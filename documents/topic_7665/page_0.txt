quint | 2021-10-02 16:59:36 UTC | #1

Is there an easy way to let `dfx` use `$(vessel bin)/moc` instead of `$(dfx cache show)/moc` to build motoko canisters?

-------------------------

nomeata | 2021-10-03 17:35:10 UTC | #2

I wanted that too recently. Probably `"type":"custom"` and `"build":"some script"` will work, but that doesn't really qualify as an “easy” way.

-------------------------

jzxchiang | 2021-12-26 06:08:21 UTC | #3

Is there a reason why vessel uses a different moc version than dfx? It's kinda confusing.

What if I use one version of Motoko to build my canister (i.e. dfx's version), but use another version of Motoko to build my dependencies (i.e. vessel's version)? Or does vessel not actually build/compile dependencies?

-------------------------

jzxchiang | 2021-12-30 06:40:49 UTC | #4

Actually, now that I look into the vessel [source code](https://github.com/dfinity/vessel/blob/b19be8b5b46544a7685717e5f91a0d548f91bed7/src/lib.rs#L121), I don't quite see the purpose of specifying a `compiler` in your project's vessel.dhall to begin with.

That compiler version in vessel.dhall isn't used by any vessel command *except* `vessel bin`. It's not used by `vessel verify` (you still need to pass in a `--moc` or `--version` flag manually) or, as OP noted, by `dfx build`.

So it's not really useful at all but just an easier way to install a `moc` binary onto your local filesystem.

-------------------------

quint | 2022-03-04 19:46:04 UTC | #5

```
DFX_MOC_PATH="$(vessel bin)/moc" dfx deploy
```

-------------------------

cryptoschindler | 2022-03-08 08:50:27 UTC | #6

is this documented somewhere or did you go through the source code?

-------------------------

quint | 2022-03-08 09:24:16 UTC | #7

> is this documented somewhere or did you go through the source code?

I found this by going through the [source code](https://github.com/dfinity/sdk/blob/fd71bfb88c3c539c758f827421a01870f3960715/src/dfx/src/config/cache.rs#L192-L202).

-------------------------

