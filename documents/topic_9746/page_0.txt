nullraisins | 2021-12-17 03:47:23 UTC | #1

Was trying to call the getAssets method of the ICPets canister in JS and am getting the following error:

`IC0504: Canister unssi-hiaaa-aaaah-qcmya-cai violated contract: ic0.msg_reply_data_append: application payload size (276532474) cannot be larger than 3145728`

Seeing the same error when viewing the method here: https://ic.rocks/principal/unssi-hiaaa-aaaah-qcmya-cai

I believe the solution is to use HTTP streaming to chunk the data as discussed in this thread: https://forum.dfinity.org/t/simplest-example-of-http-streaming-chunks-in-motoko/9116. However, according to [this code comment](https://github.com/dfinity/agent-js/blob/main/apps/sw-cert/src/sw/http_request.ts#L168) it doesn't appear that functionality has been added to the the `@definity/agent` package yet.

Am I missing something obvious or is it simply not possible to call that method from JavaScript at the moment?

-------------------------

diegop | 2021-12-17 04:27:05 UTC | #2

Welcome to the dev forum, @nullraisins . Not sure myself. Let me ping to see if someone in dfinity team knows. (someone in the community may also know)

-------------------------

cryptoschindler | 2021-12-17 16:50:55 UTC | #3

I was about to ask the same question. Maybe @kpeacock can help

-------------------------

kpeacock | 2021-12-17 18:36:01 UTC | #4

Agent-js can download chunks, but it's the responsibility of the canister to determine when and how the chunks are returned. We don't have a standard interface for the canister & agent to recognize that a payload is too large, and automatically retry with chunking, although that would be a nice feature.

In the meantime, the canister needs to offer chunks, or simply to expose the asset through a chunkable http query. In that case, you can fetch the asset using `fetch` or traditional `http` handling, and it doesn't need to go through `agent-js` at all

-------------------------

cryptoschindler | 2021-12-19 14:06:03 UTC | #5

Can you maybe record a video on this? I'm having a hard time figuring out what the different ways of retrieving data from a canister look like. So far I have this understanding regarding retrieving data that doesn't fit into a single message, please correct me if I'm wrong.

**Retrieving assets from an asset canister**
To my understanding, when you request an asset on an asset canister via URL, this HTTP request reaches a boundary node first. 

If accessed through  `ic0.app`, a service worker will be installed in your browser. The service worker calls the HTTP interface of the canister directly issuing query calls to the `http_request` of the asset canister. The services worker then *should* handle streaming for you, unfortunately it’s not [implemented yet](https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673/5?u=cryptoschindler). The boundary node just forwards this call to a canister, no transformation of the request is taking place.

If accessed through `raw.ic0.app`  the boundary node translates the [request into Candid which is then forwarded to the canister.](https://forum.dfinity.org/t/clearing-up-confusion-over-dynamically-storing-serving-large-assets/6764?u=cryptoschindler) If the asset is big enough to require streaming, the boundary node will take care of that for you. So you do not need to implement a streaming strategy in the Frontend, this happens automagically.

When using the agent-js, you're basically in the same situation as with the service worker, no support for streaming out of the box yet.

[quote="kpeacock, post:4, topic:9746"]
Agent-js can download chunks, but it’s the responsibility of the canister to determine when and how the chunks are returned.
[/quote]
^ can you give an example of how that would work?

-------------------------

cryptoschindler | 2021-12-19 14:17:12 UTC | #6

**Calling a canister method that returns a message bigger than the the message limit**
There is no out of the box solution for that, developer need to implement their own chunking/streaming.

-------------------------

kpeacock | 2021-12-20 16:54:00 UTC | #7

I'm personally about to take some PTO for the holidays, so I won't have a demo ready on this until next year. I will prioritize it in our first sprint of Q1 though

-------------------------

cryptoschindler | 2022-02-10 16:46:05 UTC | #8

any news on this @kpeacock :)

-------------------------

kpeacock | 2022-02-10 17:51:03 UTC | #9

Not yet - I've been tied up in the Invoice canister so far

-------------------------

alexeychirkov | 2022-09-06 13:18:12 UTC | #10

Dear @kpeacock, do you have any news on demo? Thanks

-------------------------

kpeacock | 2022-09-06 14:57:56 UTC | #11

So yeah, updates on Http Streaming! Http Streaming has been added to the serviceworker, and now works on `ic0.app` for large files by default. We also have a bounty for an AssetManagement interface in `agent-js` that is being worked on to make it easier to upload and download files from an asset canister

-------------------------

domwoe | 2022-09-07 06:05:07 UTC | #12

[quote="kpeacock, post:11, topic:9746"]
We also have a bounty for an AssetManagement interface in `agent-js` that is being worked on to make it easier to upload and download files from an asset canister
[/quote]

A bit more info on the bounty and the WIP is here: https://github.com/dfinity/grant-rfps/issues/1
CC: @sea-snake

-------------------------

