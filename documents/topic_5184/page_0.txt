gladguy | 2021-06-14 19:19:06 UTC | #1

From the recent challenge to find the secret, i am wondering how we can call the **http_request** in local deployment?

>   public query func http_request() : async HttpResponse {
>     return {
>       status_code = 200;
>       headers = [("content-type", "text/plain")];
>       body = T.encodeUtf8 (
>         "This is nomeata's capture-the-ic-token canister.\n" #
>         "See https://github.com/nomeata/capture-the-ic-token for details.\n" #
>         "\n" #
>         "My current cycle balance:                 " # debug_show (ExperimentalCycles.balance()) # "\n" #
>         "Secret loaded from random tape:           " # debug_show (O.isSome(secret)) # "\n" #
>         "Successful calls to set_certified_data:   " # debug_show successful_calls # "\n" #
>         "Unsuccessful calls to set_certified_data: " # debug_show unsuccessful_calls # "\n"
>       )
>     }
>   };

-------------------------

paulyoung | 2021-12-29 11:43:26 UTC | #2

One way is to use [`icx-proxy`](https://github.com/dfinity/icx-proxy) to forward HTTP requests.

-------------------------

jzxchiang | 2021-08-28 06:28:04 UTC | #3

[quote="paulyoung, post:2, topic:5184, full:true"]
One way is to use [`icx-proxy`](https://github.com/dfinity/agent-rs/tree/main/icx-proxy) to forward HTTP requests.
[/quote]


Can you clarify how you would call the icx-proxy locally? For example, let's say I have multiple canisters deployed on my local replica, and only one of them has implemented `http_request`. How do I target that canister locally using HTTP?

Typically in prod, you would make an HTTP request to `https://<canister-id>.raw.ic0.app`, where `canister-id` is the ID of the canister that implemented `http_request`.

However when testing locally, the domain in the URL is the address that the local icx-proxy is listening on, something like `https://localhost:8080`. Where would you specify the canister ID in this case?

-------------------------

paulyoung | 2021-08-28 06:39:31 UTC | #4

The way I did it for now was to edit `/etc/hosts` to add an entry like:

```
127.0.0.1 myproject.localhost
```

Then start `icx-proxy` like this:

```
icx-proxy --fetch-root-key --address 127.0.0.1:8453 --dns-alias myproject.localhost:rrkah-fqaaa-aaaaa-aaaaq-cai -v -v
```

That way I can make HTTP requests to `http://myproject.localhost:8453`. You can pick a different host name and port.

-------------------------

jzxchiang | 2021-08-28 06:50:08 UTC | #5

Hmm, don't you also need to tell icx-proxy where the local replica is listening on? Like with a flag `--replica http://localhost:$(cat .dfx/replica-configuration/replica-1.port)`

-------------------------

paulyoung | 2021-08-28 06:56:27 UTC | #6

I haven’t been doing that locally so I guess the default value matches the local replica.

https://github.com/dfinity/agent-rs/blob/f7de7670aa3870023fa45d5b5cee719b6eb7a012/icx-proxy/src/main.rs#L73-L76

-------------------------

jzxchiang | 2021-08-28 17:37:26 UTC | #7

Holy crap, it worked. Thanks a bunch!

-------------------------

jzxchiang | 2021-08-28 17:55:16 UTC | #8

Actually, you can skip the `/etc/hosts` step and use the IP address directly in the `--dns-alias` flag, e.g. `--dns-alias 127.0.0.1:<canister_id>`.

-------------------------

paulyoung | 2021-08-28 18:10:08 UTC | #9

Yes, sorry I didn’t make that clear.

-------------------------

paulyoung | 2021-08-28 18:11:37 UTC | #10

Also, you may find this useful: https://github.com/dfinity/agent-rs/pull/195

-------------------------

eddy | 2021-09-10 07:56:04 UTC | #11

How do you configure it on the main network，
I got an error when I replaced dns-alias with https://ic0.app
Error: Text must be a base 32 string.

-------------------------

paulyoung | 2021-09-11 00:26:27 UTC | #12

I think you need to make requests to https://your-canister-id.ic0.app

-------------------------

eddy | 2021-09-11 01:58:11 UTC | #13

[quote="paulyoung, post:12, topic:5184"]
https://your-canister-id.ic0.app
[/quote]

I get the same error when I request this URL with cmd 
icx-proxy --debug --address 127.0.0.1:8453 --dns-alias https://d4svy-5yaaa-aaaai-qam4q-cai.ic0.app

-------------------------

paulyoung | 2021-09-11 03:18:04 UTC | #14

Once things are deployed to the network you wouldn’t need to use `icx-proxy` and would make HTTP requests directly to https://your-canister-id.ic0.app instead

-------------------------

eddy | 2021-09-11 13:28:14 UTC | #15

Got it - thanks for the explanation.

-------------------------

jzxchiang | 2021-12-27 06:39:34 UTC | #16

@ericswanson Since icx-proxy is now the default server used by `dfx start`, it would be helpful if `dfx start` could let users configure a custom [dns_alias](https://github.com/dfinity/icx-proxy/blob/6cee84ace323c846f670d2eefdd292aa1b986f08/src/main.rs#L95) flag, which would then get passed to icx-proxy when [executing](https://github.com/dfinity/sdk/blob/1426cb6a679b09988a8d12897cfdacf5e72edee2/src/dfx/src/actors/icx_proxy.rs#L212) that binary.

Otherwise, developers can't test that their custom `http_request` code works with `dfx start`. This means no fetching images using HTTP locally.

The current workaround is to pass a flag like `--dns-alias 127.0.0.1:rrkah-fqaaa-aaaaa-aaaaq-cai` directly to icx-proxy, as suggested by @paulyoung earlier in this thread.

-------------------------

paulyoung | 2021-12-27 07:33:32 UTC | #17

I’m guessing this would involve adding to the options for the start command:

https://github.com/dfinity/sdk/blob/71e006cb5748599d913b0b13467601827a95913c/src/dfx/src/commands/start.rs#L32-L48

and then passing that along to the proxy config:

https://github.com/dfinity/sdk/blob/71e006cb5748599d913b0b13467601827a95913c/src/dfx/src/commands/start.rs#L177-L182

-------------------------

karim | 2023-01-01 12:00:41 UTC | #18

Sorry, I must be missing something. Using your example (with 127.0.0.1 in the --dns-flag) my browser returns   `unable to fetch root key` when I navigate to `http://127.0.0.1:8453/`. Is this expected?

My expectation is that in your example, the backend canister `rrkah-fqaaa-aaaaa-aaaaq-cai` would return a response, given this query function:

```
public query func http_request_text(request : HttpRequest) : async HttpResponse {
    if ((request.method, request.url) == ("GET", "/")) {
        return {
            status_code = 200;
            headers = [("content-type", "text-plain")];
            body = "this works,  but it's uncertified"
        };
    } else {
        return {
            status_code = 404;
            headers = [("content-type", "text-plain")];
            body = "404 not found";
        };
    };
};
```

I run icx-proxy with: `icx-proxy --fetch-root-key --address 127.0.0.1:8453 --dns-alias 127.0.0.1:rrkah-fqaaa-aaaaa-aaaaq-cai -v`

The backend canister via Candid can be reached via: `http://127.0.0.1:4943/?canisterId=r7inp-6aaaa-aaaaa-aaabq-cai&id=rrkah-fqaaa-aaaaa-aaaaq-cai`

-------------------------

paulyoung | 2023-01-01 22:04:00 UTC | #19

[quote="karim, post:18, topic:5184"]
my browser returns `unable to fetch root key`
[/quote]

Are you calling [`fetchRootKey`](https://erxue-5aaaa-aaaab-qaagq-cai.raw.ic0.app/agent/interfaces/Agent.html#fetchRootKey)?

> By default, the agent is configured to talk to the main Internet Computer, and verifies responses using a hard-coded public key.
>
> This function will instruct the agent to ask the endpoint for its public key, and use that instead. This is required when talking to a local test instance, for example.
>
> Only use this when you are *not* talking to the main Internet Computer, otherwise you are prone to man-in-the-middle attacks! Do not call this function by default.

-------------------------

karim | 2023-01-02 17:29:42 UTC | #20

I'm sorry Paul, this was unneccessary. I forgot to set the `--replica` flag. To sum it up for anyone else looking this up, this is the whole command:

```
icx-proxy --fetch-root-key --address 127.0.0.1:8453 --dns-alias 127.0.0.1:rrkah-fqaaa-aaaaa-aaaaq-cai --replica http://localhost:4943 -v
```

Run this after `dfx start`. It will map the canister with ID `rrkah-fqaaa-aaaaa-aaaaq-cai` to `http://127.0.0.1:8453` when the local replica is running under port `4943` (which I think is the default) and thereby allow http requests to a backend canister in local development.

-------------------------

Oleksii | 2024-02-13 14:49:09 UTC | #21

Hello. Has anything been updated in the icx-proxy functionality? I'm trying to execute this command: `icx-proxy --address 127.0.0.1:8453 --dns-alias 127.0.0.1:rrkah-fqaaa-aaaaa-aaaaq-cai --replica http://localhost:8080 -v` , but I'm getting an error: `error: unexpected argument '--dns-alias' found` . Does anyone have information on this?

-------------------------

Severin | 2024-02-14 08:38:54 UTC | #22

We bumped the icx-proxy version in the latest dfx version and didn't notice that some features were removed. We're now considering to downgrade the version again,

-------------------------

rbirkner | 2024-02-14 08:52:58 UTC | #23

The `--dns-alias` option has been removed since end of November 2022: https://github.com/dfinity/ic/commit/2ca2d2d77964330bfc36b0402af9aa6269f4e0f9

What is your use-case? I guess you are trying to call 127.0.0.1 and get forwarded directly to the canister. What client do you use?

-------------------------

Oleksii | 2024-02-14 11:11:56 UTC | #24

Thanks for the quick response. I am working on enabling the staking of a neuron, the controller of which is a canister. Since I cannot use inter-canister calls (`ic_cdk::call` ), the only option I see is to use HTTP out calls in combination with `threshold_ecdsa` . Specifically, at the moment, I am looking for a way to test my changes on a local replica. For this, I need to invoke the 'manage_neuron' method of the governance canister using the 'http_request'.

-------------------------

rbirkner | 2024-02-14 12:17:26 UTC | #25

I see. So you are trying to make an HTTP outcall to 127.0.0.1:8453 (localhost) and want that call to be forwarded to the canister.

I am not sure if the following will work for your setting/with HTTP outcalls, but that's what works for me (with the latest version):
```
icx-proxy --address 127.0.0.1:8453 --replica http://localhost:8080 --canister-alias ic:oa7fk-maaaa-aaaam-abgka-cai --domain example.com
```
Then, I can `curl` with:
```
curl http://ic.example.com:8453 --resolve ic.example.com:8453:127.0.0.1
```
Now, you cannot add `--resolve` to the HTTP outcalls. Therefore, it might work by just locally setting `example.com` to resolve to `127.0.0.1` in `/etc/hosts`.

-------------------------

kristofer | 2024-02-23 22:06:16 UTC | #26

+1 @Severin

My use case looks like this:

Canister 1: 
- Canister that accepts `http_request`
- Works like a rest api, serves different things on `http://url/1` and `http://url/2` etc

Canister 2:
- Asset canister with frontend
- Wants to load image from canister 1, `<img src="http://url/1"/>`

Works great on ic network but difficult to test locally because of `?canisterId=`. 

Dream would be that the default setup gives every canister a subdomain alias on localhost. 😀

```
canister1.localhost
canister2.localhost
```

Buut, I guess that would be difficult to automate?

-------------------------

lastmjs | 2024-02-24 09:36:04 UTC | #27

Doesn't it already work like this? We use canister id subdomains on localhost almost always, it's the default method we use and what we encourage and show everyone in our documentation.

Does this format not work for you? `http://[canisterId].localhost:[port]`

-------------------------

peterparker | 2024-02-24 10:57:06 UTC | #28

Subdomains on localhost are not supported by Safari. Using query parameters does not always work in Chrome, according to my experience.

The pragmatic current solution is a mix of both, as for example documented in II's [README](https://github.com/dfinity/internet-identity/):

> To access Internet Identity or configure it for your dapp, use one of the following URLs:
>
>    Chrome, Firefox: http://<canister_id>.localhost:4943
>    Safari: http://localhost:4943?canisterId=<canister_id>

Mentionning this assuming you are speaking about opening a dapp on a local replica with dfx.

-------------------------

kristofer | 2024-02-24 18:37:57 UTC | #29

Wow, I did not know this! :slight_smile: This is great. 

I quickly scanned the docs (the IC docs, not Azle), and couldn't find this mentioned almost anywhere. I would have assumed this to be the default choice for accessing canisters, as it more closely mimics the URL when deployed to IC. However, the reasons @peterparker lists are good arguments against promoting a setup that doesn't work on all browsers. 😀

I'll just stay off of Safari (didn't use it in the first place) and live happily ever after.

-------------------------

lastmjs | 2024-02-24 20:57:49 UTC | #30

Because it's just for local testing I feel like the Safari issue isn't as much of a problem...and this should be promoted more as the default and the Safari issue can be mentioned as the exception.

-------------------------

kristofer | 2024-02-24 21:21:03 UTC | #31

Agree, really. The default `http://127.0.0.1:4943?canisterId=<canister_id>` becomes a headache as soon as you do anything querystring related in the frontend. So, that is probably causing issues for most IC frontend development, while the Safari issue likely is experienced only by a few. Safari is not big with developers afaik.

-------------------------

lastmjs | 2024-02-24 21:42:47 UTC | #32

And any dev who uses Safari, probably on desktop if they're testing with a local replica, should have access to Chrome, FireFox, etc if they really need it. With the `http://127.0.0.1:4943?canisterId=<canister_id>` you get problems kind of everywhere.

@Severin can we get this changed? I think it's really worth considering showing the localhost subdomains as the defaults for the reasons explained in the past few comments, and this issue has come up elsewhere.

-------------------------

peterparker | 2024-02-25 07:17:24 UTC | #33

I think it's not about which one should be the default; the discussion should be about why it is that way and whether it could be fixed or improved with another approach that works cross-browser.

-------------------------

