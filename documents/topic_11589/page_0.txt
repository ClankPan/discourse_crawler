Jesse | 2022-03-19 17:50:38 UTC | #1

Getting this error when trying to deploy to the IC: 
`/main.mo:1.1-1.32: import error [M0011], canister alias "ledger" not defined` 

this is how the I'm importing the ledger canister:

```
import Ledger "canister:ledger";

```

Anyone see any obvious error?

-------------------------

skilesare | 2022-03-19 19:12:07 UTC | #2

I‚Äôm not sure what the error is but I find it easier to import a canisters from my type file and just use the service definition. Then you can have a set function to pass in the canister id.

-------------------------

Jesse | 2022-03-19 19:17:01 UTC | #3

Do you have an example of this that you could link? Thank you üôèüèæ

-------------------------

skilesare | 2022-03-19 21:14:08 UTC | #4

@quint nails it here: https://github.com/aviate-labs/icp-canister/blob/main/src/icp/main.mo. If you need more of the ledger interface you can just add it to ledger.mo.

-------------------------

Jesse | 2022-03-19 21:43:09 UTC | #6

Definitely appreciate the assist! And I‚Äôll be goin with this method if all else fails, but for some reason, i thought you could just import the ledger canister and begin using it without having to go through the trouble of creating an actor class for it and instantiating that actor class with the ledger canister-Id. 

Would you, or anyone else reading this, be able to confirm or deny this? Thanks in advance üôèüèæ

-------------------------

Jesse | 2022-03-20 14:46:26 UTC | #7

@skilesare I've implemented the method for importing the ledger canister that you referenced here and got it running locally. Now all I need is the canister-id for the mainnet ledger canister so that i can use it to instantiate the actor. do you know where I can find it? I'm checking git hub but I'm not seeing it.

-------------------------

Ori | 2022-03-20 23:11:35 UTC | #8

Cross posting an answer here: https://forum.dfinity.org/t/where-can-i-find-the-canister-id-for-the-mainnet-ledger-canister/11599/2?u=ori

-------------------------

Ori | 2022-03-20 23:21:40 UTC | #9

Looking at your other [post](https://forum.dfinity.org/t/ledger-canister-being-built-during-deploy-to-ic-causing-deploy-to-fail-should-that-be-happening/11587/10?u=ori), the reason for the error is that you removed the ledger entry from your dfx.json, which is where dfx looks for your canister import. Mainnet canisters outside of your project don‚Äôt import the same way (yet), so for now you have to specify the canister id and define the actor interface as per quint‚Äôs or [this example](https://forum.dfinity.org/t/how-to-use-cowsay-project-in-my-project/6473/2?u=ori) (in fact it doesn‚Äôt actually have to be the whole ledger canister interface, just the methods that you‚Äôre calling so the compiler can perform type checking).
Defining the actor type in a separate file is a good approach.

Re the accidentally deploying the ledger issue you‚Äôve faced, as you‚Äôve seen the issue arises because `dfx deploy` deploys all canisters specified in the dfx.json and for local development the tutorial example has you include the ledger canister here too. One solution, as suggested, is to deploy canisters individually by naming them, eg `dfx deploy my_canister`, you could do this for each of your app‚Äôs canisters and just don‚Äôt deploy the ledger canister.

Possibly a better workflow for you Jesse, is to set up the local ledger canister in an entirely separate project, see this post here:
[quote="Ori, post:7, topic:11504"]
For your ledger canister example, you can build it in its own project but run dfx start in your app‚Äôs project directory and deploy both your app and the ledger to that.
[/quote]

Doing things this way would ensure you only ever have your app‚Äôs canisters in your app project, and you can then simply `dfx deploy --network ic` and only your app‚Äôs canisters would be deployed. You would need to call the ledger using a canister id and actor definition as above for both local and mainnet deployment (note the local and mainnet canister ids will be different), but this is a more consistent approach and it separates concerns, which is useful when it comes to testing and deploying, especially if you start to build projects that call multiple other project‚Äôs canisters.

-------------------------

Iceypee | 2022-04-15 07:54:56 UTC | #10

I get this after I do your method? 
trapped explicitly: Panicked at 'Deserialization Failed: "Fail to decode argument 0 from table0 to record { account : vec nat8 }"', /ic/rs/rust_canisters/dfn_core/src/endpoint.rs:34:41"

Any idea what this error is?

-------------------------

Iceypee | 2022-04-15 14:34:16 UTC | #11

Just kidding, the answer is I was turning the principal ID to a blob and not doing the math conversion to an accountid then to a blob. Answer in here https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/217

-------------------------

jzxchiang | 2022-05-22 17:55:42 UTC | #12

Strangely, even when you include the canister name in dfx.json, the VSCode Motoko plugin still says "canister alias ... not defined".

But when I run `dfx build` in the terminal, I don't get that compiler error.

-------------------------

Hic | 2022-05-31 11:00:37 UTC | #13

Team, I have followed the tutorial for local deployment of the ledger, but how can I call methods on it from inside one of my local canisters?  I can successfully call the mainnet ledger (as described above), but I'd really like to test locally.  How does one import and use a local ledger canister?  

My local ledger canister is working ( CLI commands are successful ) and I can call it directly from JavaScript; just not from inside another local canister.  I suspect it is because I'm not using the correct principal for the local ledger.  How would I find that?  

I am likely missing something conceptually, any guidance would be appreciated!

EDIT: I just copied the principal from here and it seemes to work: it this the correct way to do it?

![Screen Shot 2022-05-31 at 6.59.22 AM|690x18](upload://gqrj7cU4WZ2xl7CYeome0n5FzzH.png)

-------------------------

domwoe | 2022-05-31 12:41:39 UTC | #14

This is one way to do it. You can also have a look at the ledger-transfer examples:
* Motoko: https://github.com/dfinity/examples/tree/master/motoko/ledger-transfer
* Rust: https://github.com/dfinity/examples/tree/master/rust/tokens_transfer

-------------------------

marcpp | 2024-06-05 09:37:09 UTC | #15

Hi,
**Can I ask how you ended up fixing this?** I have the [same issue](https://forum.dfinity.org/t/canister-dependency-not-working/31377/1) where I get `canister alias icp_ledger_canister is not defined`, whereas `dfx build` doesn't complain, so it appears to be an issue with the VSCode extension.

-------------------------

rvanasa | 2024-06-05 17:11:57 UTC | #16

In case anyone else is also running into this issue, please feel free to reply here or in the [corresponding GitHub issue](https://github.com/dfinity/vscode-motoko/issues/282) so we can narrow down the root cause.

-------------------------

