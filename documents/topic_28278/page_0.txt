peterparker | 2024-03-09 14:05:53 UTC | #1

In case one would like to create `StableBTreeMap` on the fly, e.g.

```
fn get_memory_for_something(index: u8) -> Memory {
    MEMORY_MANAGER.with(|m| m.borrow().get(MemoryId::new( index)))
}

pub fn init_stable_something(index: u8) -> Something {
    StableBTreeMap::init(get_memory_for_something(index))
}
```

Is there a better pattern than holding references to the generated `MemoryId` in another `StableVec` or similar stable structure to ensure the memory of the canister can be upgraded without loosing references to the memory?

-------------------------

ielashi | 2024-03-11 11:50:13 UTC | #2

`StableBTreeMap`, and stable structures in general, should _not_ be created dynamically - that's not what they are designed for. What's the use-case?

-------------------------

peterparker | 2024-03-11 12:13:26 UTC | #3

[quote="ielashi, post:2, topic:28278"]
should *not*
[/quote]

Why not?

Is that documented somewhere?

Use case is similar to the one I shared in the other [thread](https://forum.dfinity.org/t/stable-structures-memoryid-u8/28250/3?u=peterparker).

-------------------------

