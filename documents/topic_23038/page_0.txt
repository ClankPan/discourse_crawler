hawk | 2023-09-20 11:50:36 UTC | #1

## Overview
![rating|690x157](upload://eJ3Cjz4Jy5RY8bYe29v4K3K6dgt.png)
Status: Assigned
Size: 1,000 ICP × 2 slots (We will select up to two teams)
Deadline: - (First come, first served)

## Background of this bounty
Chainsight provides a tool to collect and process data, which is used within your on-chain application. One of the most essential parts is an asset rating, where some assets would be scored based on the historical and real-time updated data you can handle with Chainsight. In fact, the definition of the asset rating should be changed according to the situation or user demand. For instance, liquidity stability and price stability are different things. However, it would be beneficial for the ecosystem to build a general-purpose asset rating that can be seen from other applications on production because it might inspire someone who wants to create something new based on the asset rating oracle. We expect this bounty would be a trigger to the upcoming use cases.

## What we want in this bounty
- The purpose of this bounty is to develop an asset rating to asset some ERC-20 tokens based on on-chain data. It is preferable that the tokens be popular ones that are commonly used in many protocols (e.g. DAI, USDC, UNI) because anyone can understand and use them, but you can choose whatever.
- Currently, only the EVM chains are supported, and you need to collect data from an EVM chain and process them on ICP.
- Asset rating must be expressed quantitatively. However, based on the quantitative score, we recommend that it be expressed as a one-dimensional symbol with the quantitative data, such as AA or B+ to be understood easily by anyone.
- You may define any asset rating, but you must have a hypothesis as to whom the asset rating is beneficial.
- At a minimum, four assets must be selected and their data collected.
- Only one assessment item is acceptable. However, it would be much greater if multiple assessment items were combined to produce an overall assessment.
- We expect you to design so that one canister has the minimum responsibility. For example, separate a canister that only collects data on a token from a canister that assesses them based on the data. This is with the expectation that your canisters will be reused by someone else in the future.
- Template code can be generated from [Chainsight CLI](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/index.md). The project should be created based on this, and the final code must be open-sourced.
- You must use the Chainsight CLI and provide feedback on it; if the Chainsight CLI is not available for some reason, you may create your own Canister after explaining the reason to the team.
- You don’t need any front-end-related code. After launching Chainsight Dashboard, your asset rating can be searched on the dashboard.

## Example code for asset rating
- [Demo: Price Volatility Oracle](https://github.com/horizonx-tech/demo-volatility-oracles)
  - Calculating the realized volatility using price data from UniswapV3
- [Demo: HHI Oracle](https://github.com/horizonx-tech/demo-hhi-oracle)
  - Calculating the economic indicator to assess the decentralization of token holders

## How to apply
1. Please fill out the form: https://forms.gle/B3QHZuRb6jd1ckVPA
2. Mention to me in this thread.
3. We will review and assign to up to two teams.

## Payment Process
1. Share the final deliverables on this thread.
2. We will review the final deliverables considering what you were planning to build in the application form.
3. We will send 1,000 ICP to your account.

## Final Deliverables
1. CanisterIDs deployed on IC
2. GitHub repos
3. Docs (README is fine)
    1. What type of asset rating?
    2. Who is it for?
    3. What are the unique points?
4. Feedback to [Chainsight CLI](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/index.md)

-------------------------

furkan | 2023-09-15 18:13:00 UTC | #2

As Detable team, we want to inform you that we just submitted our application.

-------------------------

timk11 | 2023-09-16 07:48:26 UTC | #3

Hi. I have also submitted an application.

-------------------------

hawk | 2023-09-18 09:16:01 UTC | #4

Awesome! Thank you so much for the submission @furkan @timk11 
We will review and get back to you soon!

-------------------------

hude | 2023-09-18 13:39:33 UTC | #5

Hello, I have submitted the application form.

-------------------------

hawk | 2023-09-19 05:50:51 UTC | #6

Thank you @hude for the submission. Let us review in a few days!

-------------------------

hawk | 2023-09-19 10:39:11 UTC | #7

@hude 
Can we consider 4 different tokens in addition to $LQTY, $UNI, and $AAVE?
> At a minimum, four assets must be selected and their data collected.

-------------------------

hude | 2023-09-19 15:18:06 UTC | #8

Sure. I will add $LDO and, if possible, $DAI.

-------------------------

hawk | 2023-09-20 09:28:14 UTC | #9

Thank you guys for your application @furkan @timk11 @hude 
I am happy to get applications from three different perspectives. I originally intended to give two teams the right to participate in the bounty, but since all of the projects are interesting, I would like to increase the number of participation slots from 2 to 3, providing 1,000 ICP for each after the completion. Now, I'll change the status Open to Assigned. Please post any questions in this thread when you need.

-------------------------

timk11 | 2023-09-20 11:09:28 UTC | #10

Thanks for the opportunity! I look forward to getting stuck into it.

-------------------------

hawk | 2023-09-24 16:44:16 UTC | #11

@furkan @timk11 @hude Once again, thank you guys for your participation. There are still few docs explaining Chainsight and how to use CLI since it is beta, which would sometimes be difficult to understand when developing at this stage. Considering that, we propose the following support to you guys:

1. You can ask questions to the Chainsight core team on Slack.

If you need, you can connect Slack with us and ask questions directly to the Chainsight team. Feel free to ask about development issues, component designs, or whatever.

2. A sample project made by CLI is now available

The sample code for price oracle developed with Chainsight CLI is now public. We hope this code will help your development. 
https://github.com/horizonx-tech/chainsight-showcase/tree/main/price_oracle

If you want any other specific sample code, please request details in this thread. We may not be able to develop it right away due to priorities, but we intend to receive important feedback from you.

-------------------------

timk11 | 2023-09-25 01:58:36 UTC | #12

Thanks. I'll check out the sample project. I haven't used Slack before but I'll hop onto it. How do I find you on it?

-------------------------

hawk | 2023-09-26 08:43:16 UTC | #13

@timk11 Please let me know once you sign up. I'll send an invitation to your email.

-------------------------

timk11 | 2023-09-26 09:06:50 UTC | #14

I've signed up now. Thanks.

-------------------------

timk11 | 2023-09-26 13:39:19 UTC | #15

@hawk Can you also email or DM me the Google form that I submitted? I have all the details written down in a couple of places but I didn't save a copy of the submitted version before I sent it.

-------------------------

timk11 | 2023-10-08 08:35:49 UTC | #16

Question: Can a Solidity contract that consumes gas be used as part of a Chainsight project? If so, how is the gas paid insofar as what needs to be included in the canister code?

I've put together a Solidity contract in order to compile the required on-chain data (from an EVM-based chain) but after deploying it locally with Remix I realised that gas is needed if a `view` function is called by another function, and for some other things. I suppose one option is to move all of the gas-consuming logic out of the contract and put it in canisters, but I'm wondering if that's the only option.

-------------------------

hawk | 2023-10-10 11:13:21 UTC | #17

Hey @timk11,
If you want to write gas-consuming logic within a view function on EVM, it should definitely be outside the view function. If you are facing some troubles to write the code to fetch something from a solidity smart contract to a canister with Chainsight CLI, I suggest you refer to this sample logic:
https://github.com/horizonx-tech/chainsight-showcase/tree/main/price_oracle

Also, you can ask more questions on Slack.

-------------------------

timk11 | 2023-10-10 12:07:50 UTC | #18

Thanks @hawk. I'll have a closer look at that.

I still can't access Slack. This is what I'm getting:

![Screenshot_20231010-230059061~2|225x500](upload://oIVl4cYAJy02HygIpr7OPuCnn32.jpeg)

-------------------------

timk11 | 2023-11-13 11:47:07 UTC | #19

@hawk I just sent you an update and questions through Telegram.

-------------------------

timk11 | 2023-11-15 07:50:31 UTC | #20

I'm having some trouble with `csx build`. I managed to solve a few errors but there's one now that I'm stuck on.

Here's where I'm up to:

```
~/ic/csx/uniswap_edpr$ tree
.
├── artifacts
│   ├── __interfaces
│   │   └── UniswapV3Pool.json
│   ├── pool_fees_usdceth_0_3
│   │   ├── Cargo.toml
│   │   └── src
│   │       ├── app.rs
│   │       └── lib.rs
│   └── tcumul_28x6hr_usdceth_0_3
│       └── src
│           └── lib.rs
├── components
│   ├── algorithm_lens_usdceth_0_3.yaml
│   ├── pool_fees_usdceth_0_3.yaml
│   ├── relayer_usdceth_0_3.yaml
│   ├── tcumul_28x6hr_usdceth_0_3.yaml
│   ├── tcumul_30_min_usdceth_0_3.yaml
│   └── v3pool_usdceth_0_3.yaml
├── interfaces
│   ├── UniswapV3Pool.json
│   └── sample.did
└── project.yaml

8 directories, 14 files
```
```
~/ic/csx/uniswap_edpr$ csx build
Nov 15 07:43:15.477 INFO Building project...
Nov 15 07:43:15.481 INFO Processing for codegen
Nov 15 07:43:15.490 INFO ./artifacts/pool_fees_usdceth_0_3/src/app.rs/app.rs already exists, skip creating
Nov 15 07:43:15.490 INFO project Cargo.toml already exists, skip creating
Nov 15 07:43:15.492 INFO Interface file "UniswapV3Pool.json" copied by user's interface
Nov 15 07:43:15.511 ERRO ic_solidity_bindgen::internal::Unimplemented
```

`./artifacts/tcumul_28x6hr_usdceth_0_3/src/lib.rs` is an empty file.

Any ideas as to why I'm getting this error?

-------------------------

darroze | 2023-11-15 16:20:30 UTC | #21

@furkan @timk11 @hude
Sorry for the delay in getting back to you. And thank you for your development with Chainsight.
I am one of the development members of Chainsight.

Chainsight is being developed on a daily basis, and there are some major structural changes that we would like to explain.
The latest Snapshot version of the CLI can be downloaded [here](https://github.com/horizonx-tech/chainsight-cli/releases/tag/snapshot).
This will be updated each time changes are merged into the main branch.

Currently, the Project package structure via the CLI looks like [this sample](https://github.com/horizonx-tech/chainsight-showcase/tree/main/volatility/volatility_eth).
The major change is that the user implementation and automatically generated code are separated into different cargo projects:

```

- src
  - logics ... User implementation to index/process data (the old `app.rs`)
  - bindings ... Generates interface types to use other canisters that the Component depends on.
  - accessors ... Generates functions for Lens to call other Canisters
  - canisters ... Logic is used to act as a chainsight component casniter on ICP
```

These directories and codes are automatically generated by the csx generate command based on the contents of chainsight manifest (project.yaml and components/*.yaml).
`src/logics` generates the implementation template only for the first time, after which the user is responsible for implementation.
The other directories are always regenerated by the `csx generate` command and synchronized with the manifest definition.

This is the end of the development flow changes. Thereafter, modules are built, deployed, and initialized by `csx build`, `csx deploy`, and `csx exec` as before.
The process for maintaining and running Cycle on IC has also been updated, but we will not go into that here, so please inquire again when you are ready to deploy on IC.

You may be currently facing problems with the old version, please update to the latest, and ask us if you have any questions.

Good luck with your development!

-------------------------

timk11 | 2023-11-17 01:13:49 UTC | #22

Hi @darroze and thanks for the info!

I downloaded the snapshot and saved the extracted `csx` file in `./.cargo/bin`, then installed it using
```
cargo build --bin csx
chmod a+x csx
```
Using `csx generate` I'm now getting this error:
```
ERRO [tcumul_28x6hr_usdceth_0_3] Failed: Generate interfaces (.did files) by:    Compiling tcumul_28x6hr_usdceth_0_3_canister v0.1.0 (/home/timk/ic/csx/uniswap_edpr/src/canisters/tcumul_28x6hr_usdceth_0_3)
error: proc macro panicked
 --> canisters/tcumul_28x6hr_usdceth_0_3/src/lib.rs:1:66
  |
1 | ... ; def_snapshot_indexer_evm_canister ! ("{\"common\":{\"canister_name\":\"tcumul_28x6hr_usdceth_0_3\"},\"method_identifier\":\"observe(uint32[]):(int56[],uint160[])\",\"method_args\":[[604800,583200,561600,540000,518400,496800,475200,453600,432000,410400,388800,367200,345600,324000,302400,280800,259200,237600,216000,194400,172800,151200,129600,108000,86400,64800,43200,21600,0]],\"abi_file_path\":\"./__interfaces/UniswapV3Pool.json\"}"...
  |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: message: Failed to parse method identifier: ic_solidity_bindgen::internal::Unimplemented

error: could not compile `tcumul_28x6hr_usdceth_0_3_canister` (lib test) due to previous error
```
The relevant part of the component yaml file looks like this:
```
datasource:
  type: contract
  location:
    id: 88e6a0c2ddd26feeb64f039a2c41296fcb3f5640
    args:
      network_id: 1
      rpc_url: https://eth-mainnet.g.alchemy.com/v2/${ALCHEMY_KEY}
  method:
    identifier: observe(uint32[]):(int56[],uint160[])
    interface: UniswapV3Pool.json
    args: [[604800, 583200, 561600, 540000, 518400, 496800, 475200, 453600, 432000, 410400, 388800, 367200, 345600, 324000, 302400, 280800, 259200, 237600, 216000, 194400, 172800, 151200, 129600, 108000, 86400, 64800, 43200, 21600, 0]]

```
`UniswapV3Pool.json` in my project is copied from the Contract ABI on [this page](https://etherscan.io/address/0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640#code) and begins like this:
```
[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"int24","name":"tickLower","type":"int24"},{"indexed":true,"internalType":"int24","name":"tickUpper","type":"int24"},{"indexed":false,"internalType":"uint128","name":"amount","type":"uint128"},{"indexed":false,"internalType":"uint256","name":"amount0","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amount1","type":"uint256"}],"name":"Burn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"},
...
```
What could be going wrong here?

-------------------------

darroze | 2023-11-17 08:13:49 UTC | #23

@timk11 Thank you for the update!
Could you share the entire Chainsight PJ code with us so we can investigate while reproducing it?

-------------------------

timk11 | 2023-11-17 10:06:18 UTC | #24

Sure! I've shared the code to https://github.com/timk11/uniswap-edpr.

-------------------------

hokosugi | 2023-11-21 07:22:25 UTC | #25

I am getting an error in deploying  
`chainsight-management-canisters`.

```
make local port=8000
```

note: port=${8000} is not reflected, so I add `port := $(or $(port), $(PORT))` to the makefile and run it

Result:
```
Failed to invoke the package tool "vessel" "sources"
```
![ScShot 2023-11-21 16.05.56|690x262, 75%](upload://fUb8HuJqsTvbk9tURoSR4nMUXEc.png)

run:
```
cargo install vessel
cargo install sources
```

and add the following to `Cargo.toml`

> [dependencies].
> sources = "0.1.0"
> Vessel = "0.0.1"

Run `make local port=8000` again.
Result:
```
This virtual manifest specifies a [dependencies] section, which is not allowed.
```
![ScShot 2023-11-21 16.19.59|690x253, 75%](upload://A9MYfeBX5thbZcQSMa8hBTUuQs5.png)

How can I resolve this error? Please take into account that I am not at all familiar with this and was asking Chat GPT.

-------------------------

darroze | 2023-11-21 08:06:27 UTC | #26

Hi @hokosugi, thanks for working on Chainsight!
You can get vessel, package manager of Motoko, [from here](https://github.com/dfinity/vessel).

By the way, you can start developing chainsight components without management canisters. [Here is getting started](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/index.md).

-------------------------

hokosugi | 2023-11-21 10:15:01 UTC | #27

Does this mean that it is possible to skip Management canister deployment and deploy indexer with just csx CLI commands?

-------------------------

darroze | 2023-11-21 10:37:38 UTC | #28

Yes, there is no need to care about management canisters when deploying on IC.
Our CLI/SDK uses the management canisters we have prepared.

Developers use management canisters only when they want to deploy and test in a local environment.
If you have already developed components and want to run it in a local environment, we will guide you through the details!

-------------------------

timk11 | 2023-11-22 09:28:57 UTC | #29

Hey there @darroze . Did you get a chance to have a look at the code I linked to?

-------------------------

darroze | 2023-11-22 11:59:10 UTC | #30

Hi @timk11 .
Thanks to you, we have identified the problem and are currently working on a fix!

Therer are some EVM types that our SDK not supported yet.
We will get back to you as soon as your manifest is supported!

-------------------------

hokosugi | 2023-11-22 22:12:12 UTC | #31

Command, ``make local port=8000`` with the following error.
````
Stderr:.
/Users/myname/dfinity/chainsight-management-canisters/src/canisters/registry/Registry.mo:7.1-7.37: import error [M0010], package "candb".

/Users/myname/dfinity/chainsight-management-canisters/src/canisters/registry/Registry.mo:21.1-21.46: import error [M0010], package " stable-buffer" not define
````
Registry.mo
![ScShot 2023-11-23 6.57.34|690x468, 75%](upload://9JRX0MJ6tLghe85cw82ZajXEHRD.png)


[There are six different ways to import](https://internetcomputer.org/docs/current/motoko/main/modules-and-imports)
* Importing from the Motoko base library
* Importing local files
* Importing from another package or directory
* Importing packages from a package manager
* Importing actor classes
* Importing from another canister smart contract

A note like "import CanDB "mo:candb/CanDB" would be considered "Importing from another package or directory". There is no `candb` in vessel's library, and it seems that I need to write to dfx.json. How should I write it?

-------------------------

darroze | 2023-11-23 14:01:56 UTC | #32

Hi @timk11 ,
The EVM type issue has been resolved and your Snapshot Indexer EVM code can now be generated in the latest CLI!

However, there is an error when generating the code for Lens, and it seems that your manifest definitions are inconsistent with the latest CLI.

We have added json-schemas for component manifest so that validation will work in the code editor.
To enable json-schema, add a line as follows.
https://github.com/horizonx-tech/chainsight-showcase/blob/main/price_feed/price_eth/components/chainlink_ethusd.yaml#L1

Json-schemas are defined for each component type:
https://github.com/horizonx-tech/chainsight-cli/tree/main/resources/schema

Please update those and then try `csx generate`!

-------------------------

timk11 | 2023-11-23 22:51:00 UTC | #33

Thanks @darroze ! Glad to hear this was helpful for the improvements on your side. I'll have a thorough look at this and push ahead with it today.

-------------------------

timk11 | 2023-11-24 01:12:17 UTC | #34

That all works now. The algorithm lens manifest that ultimately worked looks like this:

```
# yaml-language-server: $schema=https://raw.githubusercontent.com/horizonx-tech/chainsight-cli/main/resources/schema/algorithm_lens.json
version: v1
metadata:
  label: algorithm_lens_usdceth_0_3
  type: algorithm_lens
  description: ''
  tags:
  - Ethereum
  - Account
datasource:
  methods:
  - id: pool_fees_usdceth_0_3
    label: last_snapshot_value
    identifier: 'get_last_snapshot_value : () -> (text)'
  - id: tcumul_28x6hr_usdceth_0_3
    label: last_snapshot_value
    identifier: 'get_last_snapshot_value : () -> (text)'
  - id: tcumul_30_min_usdceth_0_3
    label: last_snapshot_value
    identifier: 'get_last_snapshot_value : () -> (text)'
  - id: v3pool_usdceth_0_3
    label: last_snapshot_value
    identifier: 'get_last_snapshot_value : () -> (text)'
output:
  name: EDPR
  fields:
    address: String
    current_price: f32
    range_top: f32
    range_bottom: f32
    edpr: f32
  type: struct
  type_name: null
```

I did `csx generate` and `csx build` and this was successful. I take it the next step is to modify the `lib.rs`'s in `./src/logics` and then repeat `csx build`?

-------------------------

darroze | 2023-11-24 02:21:51 UTC | #35

@timk11 Great!

> I take it the next step is to modify the `lib.rs` ’s in `./src/logics` and then repeat `csx build` ?

That's right. Now comes the time to implement your own logic.
We're looking forward to it!

-------------------------

timk11 | 2023-11-27 03:36:44 UTC | #36

Quick question - If I've already run `csx build` and then edit some of the Rust files, will `csx build --only-build` replace the existing wasm files with new ones? If not, how is this best done?

-------------------------

timk11 | 2023-11-27 10:30:33 UTC | #37

This is weird, and not something I've seen before today. I don't know if it's a csx problem or something to do with the OS or the CLI. I'm using WSL. Here's what it looks like:

![image|690x386](upload://qTWeLikzdWZABIHiRLUz2aRvMU2.png)

So I'm trying the same command (`csx build --only-build` abbreviated as `!!`) every time but each time the output stops somewhere different. In the first example it stopped in the middle of a line in a warning. Lots of camel case warnings, which I'm not too bothered about. The irritating thing is that when the output progresses far enough there are error messages that I'm trying to solve, but most of the time the output doesn't even get that far. I've tried restarting a couple of times - still no different. I can't find this problem described anywhere online.

Any clues?

-------------------------

megared | 2023-11-27 12:32:53 UTC | #38

[quote="timk11, post:36, topic:23038, full:true"]
Quick question - If I’ve already run `csx build` and then edit some of the Rust files, will `csx build --only-build` replace the existing wasm files with new ones? If not, how is this best done?
[/quote]

You are right.
Your logic will be listed in the logics directory, but to keep it and build again, use build -only-build.
Normally, generate -> (write your logic in logics dir) -> build will do the trick.

-------------------------

megared | 2023-11-27 12:34:52 UTC | #39

This is the first time I saw this too. Also I don't know as I usually use mac. I will ask the team.
By the way, does csx generate or csx build (without option) work?

-------------------------

timk11 | 2023-11-27 13:23:34 UTC | #40

Not sure. I didn't try that because I didn't want to lose my logics.

-------------------------

megared | 2023-11-28 00:33:24 UTC | #41

No one on the Team saw this issue.
`-vvv` can be given to reduce the level of log output.

-------------------------

timk11 | 2023-12-01 07:13:30 UTC | #42

@darroze @megared @hawk 

Do you have a completed example of the `snapshot_indexer_evm` logic?

For instance, how would this look when completed, based on the corresponding manifest: https://github.com/horizonx-tech/chainsight-showcase/blob/main/old/volatility_oracle/src/logics/uniswap_snapshotter_mainnet/src/lib.rs ?

-------------------------

megared | 2023-12-05 14:49:27 UTC | #43

Sorry for the late confirmation.
How about this one?
https://github.com/horizonx-tech/chainsight-showcase/blob/main/price_feed/price_usdc/components/chainlink_usdcusd.yaml
For snapshot_indexer_evm, there is no need to modify the logics under "src"
https://github.com/horizonx-tech/chainsight-showcase/blob/main/price_feed/price_usdc/src/logics/chainlink_usdcusd/src/lib.rs

-------------------------

timk11 | 2023-12-06 07:48:00 UTC | #44

OK. So should lib.rs in this folder just be an empty file?

-------------------------

megared | 2023-12-06 08:25:27 UTC | #45

It should not be a problem.
If something is written in logics, it will not be used in the canister code.
However, you must not leave a description that would cause a compile error.

-------------------------

megared | 2023-12-06 08:28:34 UTC | #46

We may have identified an event similar to this one.
Perhaps you have added some ic_cdk::query in logics?
If that is the case, it may fail at that log timing.
(Not sure why there is no error log, though.)

Also, try the following command
```bash
cd src && cargo build --target wasm32-unknown-unknown --workspace
```

-------------------------

timk11 | 2023-12-06 13:46:24 UTC | #47

Thanks for the advice. I didn't have ic_cdk::query in there anywhere, but I'll try re-generating the evm logic and leaving it unmodified as you've suggested.

-------------------------

timk11 | 2023-12-08 07:21:40 UTC | #48

I've regenerated the logic from scratch. This required doing `csx generate` a few times with tweaks in between. I've edited the logic for the algorithm lens and http snapshots. My code is at https://github.com/timk11/uniswap-edpr.

I'm now getting this set of errors when using `csx generate`.

```
error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:17:50
   |
17 |     let fees_24h_usd = pool_fees_result.unwrap().result[0].fees_24h_usd;
   |                                                  ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:19:57
   |
19 |     let t0_price_usd  = pool_usd_prices_result.unwrap().result.t0_price_usd;
   |                                                         ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:20:57
   |
20 |     let t1_price_usd  = pool_usd_prices_result.unwrap().result.t1_price_usd;
   |                                                         ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:22:42
   |
22 |     let address = v3pool_result.unwrap().result.address;
   |                                          ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:23:57
   |
23 |     let current_tick_liquidity = v3pool_result.unwrap().result.liquidity;
   |                                                         ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:24:49
   |
24 |     let sqrt_ratio_x96 = v3pool_result.unwrap().result.sqrt_ratio_x96;
   |                                                 ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:25:47
   |
25 |     let tick_current = v3pool_result.unwrap().result.tick_current;
   |                                               ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:26:47
   |
26 |     let tick_spacing = v3pool_result.unwrap().result.tick_spacing;
   |                                               ^^^^^^ unknown field

error[E0609]: no field `result` on type `std::string::String`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:27:40
   |
27 |     let ticks = v3pool_result.unwrap().result.ticks; // might need to fix this
   |                                        ^^^^^^ unknown field

error[E0277]: the type `std::string::String` cannot be indexed by `{integer}`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:29:28
   |
29 |     let tick_cumul_28x6h = tc28x6_result.unwrap()[0];
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ `std::string::String` cannot be indexed by `{integer}`
   |
   = help: the trait `Index<{integer}>` is not implemented for `std::string::String`
   = help: the following other types implement trait `Index<Idx>`:
             <std::string::String as Index<RangeFull>>
             <std::string::String as Index<std::ops::Range<usize>>>
             <std::string::String as Index<RangeFrom<usize>>>
             <std::string::String as Index<RangeTo<usize>>>
             <std::string::String as Index<RangeInclusive<usize>>>
             <std::string::String as Index<RangeToInclusive<usize>>>

error[E0277]: the type `std::string::String` cannot be indexed by `{integer}`
  --> logics/usdceth_0_3_algorithm_lens/src/lib.rs:30:26
   |
30 |     let tick_cumul_30m = tc30_result.unwrap()[0];
   |                          ^^^^^^^^^^^^^^^^^^^^^^^ `std::string::String` cannot be indexed by `{integer}`
   |
   = help: the trait `Index<{integer}>` is not implemented for `std::string::String`
   = help: the following other types implement trait `Index<Idx>`:
             <std::string::String as Index<RangeFull>>
             <std::string::String as Index<std::ops::Range<usize>>>
             <std::string::String as Index<RangeFrom<usize>>>
             <std::string::String as Index<RangeTo<usize>>>
             <std::string::String as Index<RangeInclusive<usize>>>
             <std::string::String as Index<RangeToInclusive<usize>>>

Some errors have detailed explanations: E0277, E0609.
For more information about an error, try `rustc --explain E0277`.
error: could not compile `usdceth_0_3_algorithm_lens` (lib) due to 11 previous errors
```

It seems that the "_result" values in the algorithm lens code are being returned as strings, and therefore can't be indexed. As far as I can see my code matches the examples, so can you advise what might have gone wrong here?

-------------------------

megared | 2023-12-08 16:12:17 UTC | #49

I have checked your repository and it seems incomplete to understand the situation.

https://github.com/timk11/uniswap-edpr/tree/915d2514825625418c3403416f716c076ca714a6

I'd like to see .chainsight placed as well.

The manifest in project.yaml didn't seem to be there (project.yaml may not be up to date)

I thought perhaps you were having trouble with the algorithm_lens generated by usdceth_0_3_algorithm_lens.yaml.

[1] Please check the function of the caller canister you want to specify in datasource.methods.

(is "get_last_snapshot_value : () -> (text)" correct?)

If it is in your own project, you can check it in .did under `src/canisters/(component_name)`. If you want to use a function that is already deployed on the chainsight platform, you can check the .did from the icp dashboard.

[2] The format of the manifest for type=algorithm_lens is also likely to be wrong.

At least algorithm_lens does not have an output field.

See around the following.

https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/schema/algorithm_lens.md

https://github.com/horizonx-tech/chainsight-showcase

The manifest version also looks old.

Since we have recently updated management-canister, it would be helpful if you could update the cli and proceed.

-------------------------

timk11 | 2023-12-11 05:55:08 UTC | #50

Thanks @megared. That helped a lot! I've committed all my changes to GitHub now and updated the algorithm lens manifest to match the current specification. I did `csx generate` a few times, swapping the order of components in `project.yaml` to ensure that all the relevant pieces of code got generated in spite of errors, then updated the functions in `usdceth_0_3_algorithm_lens.yaml` based on the .did files as you described.

Those parts all work now, so I'm now just going through and fixing up the rest of the algorithm lens logic.

-------------------------

megared | 2023-12-11 07:44:49 UTC | #51

Great!
I also seemed to be able to generate except for usdceth_0_3_algorithm_lens.
Please feel free to contact me if you have any questions.

-------------------------

timk11 | 2023-12-13 12:55:37 UTC | #52

I've now managed to fix all the remaining errors so that the full project generates and builds successfully, and updated [the repo](https://github.com/timk11/uniswap-edpr) accordingly.

I'm having some trouble deploying chainsight-management-canisters in order to deploy the project locally. Here's an abbreviated version of the dialogue showing what I've tried and the resulting errors:

```
:~/ic/chainsight-management-canisters$ dfx start --clean --background
Running dfx start for version 0.15.2
Using project-specific network 'local' defined in /home/timk/ic/chainsight-management-canisters/dfx.json
Initialized replica.
Dashboard: http://localhost:40285/_/dashboard

:~/ic/chainsight-management-canisters$ make local port=40285
Error: Failed while trying to build all canisters.
Caused by: Failed while trying to build all canisters.
  The build step failed for canister 'uh54g-lyaaa-aaaal-achca-cai' (_management_canister_registry) with an embedded error: Failed to build Motoko canister '_management_canister_registry'.: Failed to load package arguments.: Failed to invoke the package tool "vessel" "sources"
 the error was: No such file or directory (os error 2)
make[2]: *** [Makefile:14: build] Error 255
make[2]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make[1]: *** [Makefile:27: create-build] Error 2
make[1]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make: *** [Makefile:36: local] Error 2

[I followed the advice from https://forum.dfinity.org/t/hi-everyone-i-am-facing-this-error-please-help-me/16302 and steps in https://github.com/dfinity/vessel in order to solve this.]

:~/ic/chainsight-management-canisters$ vessel init
Error: Failed to initialize, there is an existing package-set.dhall file here

:~/ic/chainsight-management-canisters$ make local port=40285
The authenticity of host 'github.com (20.248.137.48)' can't be established.
ED25519 key fingerprint is SHA256:+-----------------------------------------.
This key is not known by any other names
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Error: Failed while trying to build all canisters.
Caused by: Failed while trying to build all canisters.
  The build step failed for canister 'uh54g-lyaaa-aaaal-achca-cai' (_management_canister_registry) with an embedded error: Failed to build Motoko canister '_management_canister_registry'.: Failed to load package arguments.: The command '"vessel" "sources"' failed with exit status 'exit status: 1'.
Stdout:

Stderr:
[INFO] Installing 9 packages
[INFO] Downloading tar-ball: "base"
[INFO] Downloading tar-ball: "btree"
[INFO] Cloning git repository: "candb"
Error: Failed to clone the repo at: git@github.com:canscale/CanDB.git
with:
Cloning into 'repo'...
Warning: Permanently added 'github.com' (ED25519) to the list of known hosts.
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

make[2]: *** [Makefile:14: build] Error 255
make[2]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make[1]: *** [Makefile:27: create-build] Error 2
make[1]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make: *** [Makefile:36: local] Error 2
```

The full dialogue is at https://cmc-dlg.tiiny.site/.

What could be going wrong here?

-------------------------

megared | 2023-12-15 02:27:10 UTC | #53

Sorry I'm late.
I cloned chainsight-management-canister again and ran `dfx start` followed by `make local` with no problems.
There may be something wrong with the local environment on motoko, or it may be a network setting.

Regarding the network settings, I have specified `127.0.0.1:8000` in the repo's dfx.json. Why don't you run the following?
```bash
dfx start --clean --background
dfx ping http://localhost:8000
make local port=8000
```

I also could not see the link to the log you attached.
It would be better to post the log as a file.

Thank you.

-------------------------

timk11 | 2023-12-16 07:38:12 UTC | #54

No problem, and thanks for the further advice.

I re-synced chainsight-management-canisters to the current version and ran it using port=8000 as you suggested. I'm still getting some similar errors. On the first try I got this:

```
Error: Failed while trying to build all canisters.
Caused by: Failed while trying to build all canisters.
  The build step failed for canister 'uh54g-lyaaa-aaaal-achca-cai' (_management_canister_registry) with an embedded error: Failed to build Motoko canister '_management_canister_registry'.: Failed to load package arguments.: The command '"vessel" "sources"' failed with exit status 'exit status: 1'.
Stdout:

Stderr:
[INFO] Installing 9 packages
[INFO] Cloning git repository: "candb"
Error: Failed to clone the repo at: git@github.com:canscale/CanDB.git
with:
Cloning into 'repo'...
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.


make[2]: *** [Makefile:14: build] Error 255
make[2]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make[1]: *** [Makefile:27: create-build] Error 2
make[1]: Leaving directory '/home/timk/ic/chainsight-management-canisters'
make: *** [Makefile:36: local] Error 2
```

On the basis of [this post](https://forum.dfinity.org/t/candb-the-first-scalable-nosql-database-on-the-internet-computer/13984/14) I changed [these lines](https://github.com/horizonx-tech/chainsight-management-canisters/blob/main/package-set.dhall#L22-L23) in my local copy from
&nbsp;&nbsp;`  , repo = "git@github.com:canscale/CanDB.git"  , version = "beta"`
to
&nbsp;&nbsp;`  , repo = "https://github.com/ORIGYN-SA/CanDB"  , version = "1.0.2"`.
(The version number is from [here](https://github.com/ORIGYN-SA/CanDB/blob/beta/mops.toml#L3). I don't know if I've understood this correctly.)

I then got much the same error, except for this part:

```
Stderr:
[INFO] Installing 9 packages
[INFO] Downloading tar-ball: "candb"
[WARN] Downloading tar-ball failed, cloning as git repo instead: "candb"
Error: Failed to checkout version 1.0.2 for the repo at: https://github.com/ORIGYN-SA/CanDB
with:
error: pathspec '1.0.2' did not match any file(s) known to git
```

@icme - I've tagged you here as well in case you have any advice on this. Any pointers would be gratefully received. Let me know if more context is needed.

**Update**

I have it working now. Within package-set.dhall I changed

```
  { name = "candb"
  , repo = "git@github.com:canscale/CanDB.git"
  , version = "beta"
  , dependencies = [ "base" ]
  },
  { name = "candy"
  , repo = "git@github.com:icdevs/candy_library.git"
  , version = "0.2.0"
  , dependencies = [ "base" ]
  },
```
to
```
  { name = "candb"
  , repo = "https://github.com/ORIGYN-SA/CanDB.git"
  , version = "beta"
  , dependencies = [ "base" ]
  },
  { name = "candy"
  , repo = "https://github.com/icdevs/candy_library.git"
  , version = "0.2.0"
  , dependencies = [ "base" ]
  },
```

-------------------------

timk11 | 2023-12-16 12:53:57 UTC | #55

I had some further trouble with chainsight-management-canisters. It worked once only and then not again, so I moved on to deploying my single-asset prototype to the mainnet. `csx deploy --network ic` was successful. When I got to `csx exec --network ic` I had to run it a few times as cycles needed to be topped up. After topping up I got this error:
```
Error: Failet to do wallet call.
Caused by: Failet to do wallet call.
  An error happened during the call: 5: IC0503: Canister sftde-kqaaa-aaaag-qcwmq-cai trapped explicitly: Panicked at 'Already initialized', canisters/pool_usd_prices/src/lib.rs:1:68
occured on /home/timk/ic/csx/uniswap-edpr/artifacts/scripts/components/pool_usd_prices.sh [Line 3]
command: dfx canister --network ic call pool_usd_prices init_in '(variant { "Production" }, record {
                refueling_interval = 86400: nat64;
                vault_intial_supply = 1000000000000: nat;
                indexer = record {
                    initial_supply = 0: nat;
                    refueling_amount = 1000000000000: nat;
                    refueling_threshold = 500000000000: nat;
                };
                db = record {
                    initial_supply = 1500000000000: nat;
                    refueling_amount = 1000000000000: nat;
                    refueling_threshold = 500000000000: nat;
                };
                proxy = record {
                    initial_supply = 300000000000: nat;
                    refueling_amount = 100000000000: nat;
                    refueling_threshold = 100000000000: nat;
                };
        })' --with-cycles 2800000000000 --wallet $(dfx identity get-wallet --network ic)

(stdout at run time)
Run script for pool_usd_prices
```
This seems to suggest that the `csx exec` command is unable to pick up where it left off in the way that `dfx deploy` would. Is this something that needs to be fixed up at your end or is there something that I can do differently?

-------------------------

megared | 2023-12-17 01:50:25 UTC | #56

Hi.
In previous versions of cli this could happen, but it was supposed to be resolved now.

If you can provide me all the canister_ids in the project you deployed, I might be able to help.
(Or you could just update your github to the latest version.)

Also, have you already completed the other components?
You can use `csx exec -c` to specify components and run them individually.

-------------------------

timk11 | 2023-12-17 11:53:22 UTC | #57

I tried `csx exec -c` and that worked! I've also updated the cli.

I think I now have the full project ready to deploy to the mainnet. There are now 4 trading pairs to be snapshotted and I've updated the repo with this version. I deleted the canisters I previously deployed so as to get my cycles refunded, and I've now deployed and executed one component from the completed project as follows:
```
Current deployed status:
Canister Name: eth_usdc_price
  Canister Id: {"ic": "wgakw-caaaa-aaaag-qcwxq-cai"}
```
The full project consists of 21 components. Should I now just go ahead and run `csx deploy` and `csx exec` on all of them? It looks like deploying and executing combined cost 6T cycles per component. Is there a way to set this at a lower level so as to reduce the expenditure?

-------------------------

megared | 2023-12-17 15:01:58 UTC | #58

great!

If you want to reduce the amount of cycles consumed during deployment, you need to customize the operations performed on canister during exec execution.
I'm sorry that we are currently unable to provide a convenient function for this and that it is a relatively difficult operation...

If you look at `csx exec --help`, you will see the `--only-generate-cmds` and `--only-execute-cmds` options.
The general flow is in the following order
[1] csx exec --only-generate-cmd
[2] Execution command driven modification
[3] csx exec --only-execute-cmd 

>[2] Execution command driven modification

After step [1], `(pr_root)/artifacts/scripts/components/(component_name).sh` is generated.
The values set for vault_intial_supply, multiple initial_supplies, and `--with-cycles` in the arguments of the `init_in` function call in this command are directly related to cycle.
Since `-with-cycles` is the component itself that actually does the processing, it is better to leave a relatively large amount of `-with-cycles`, but overall, 1/2 (or even 1/3) may be okay. I think the default setting is to use about 1 canister 3T cycles, so 1/2 should be enough to keep it to that level.

-------------------------

timk11 | 2023-12-18 03:36:27 UTC | #59

No problem! I tried those steps, but there are still a few hitches along the way.

I ran `csx exec --network ic --only-generate-cmds` then went through all the .sh files and edited initial_supply (3 per file) and --with-cycles to half the original values.

`csx deploy --network ic` still required me to delete the eth_usdc_price canister that I had already deployed, and then worked fine but still used 3T cycles per canister.

I then ran `csx exec --network ic --only-execute-cmds` on each component but it kept telling me there was no wasm module:
```
Error: Failet to do wallet call.
Caused by: Failet to do wallet call.
  An error happened during the call: 3: IC0304: Attempt to execute a message on canister 6peu2-iqaaa-aaaag-qcxaq-cai which contains no Wasm module
occured on /home/timk/ic/csx/edpr_full/uniswap-edpr/artifacts/scripts/components/usdc_eth_0_3_v3pool.sh [Line 3]
```

I then did `cd artifacts` and `dfx deploy --network ic`.

`csx exec --only-execute-cmds --network ic -c eth_usdc_price` then gave me:
```
Error: Failet to do wallet call.
Caused by: Failet to do wallet call.
  An error happened during the call: 5: IC0503: Canister uo2vt-qaaaa-aaaag-qcw3q-cai trapped explicitly: Panicked at 'called `Result::unwrap()` on an `Err` value: (CanisterError, "IC0503: Canister xkzfe-fiaaa-aaaal-qcnuq-cai trapped explicitly: Panicked at 'called `Result::unwrap()` on an `Err` value: (CanisterError, \"Only the controllers of the canister uo2vt-qaaaa-aaaag-qcw3q-cai can control it.
```

I then added controllers and `csx exec --only-execute-cmds --network ic -c eth_usdc_price` (for which I had not edited any values) seemed to work fine.

Running `csx exec --only-execute-cmds --network ic -c` on each component then gave me:
```
Error: Failet to do wallet call.
Caused by: Failet to do wallet call.
  An error happened during the call: 5: IC0503: Canister vrsge-tyaaa-aaaag-qcw7a-cai trapped explicitly: Panicked at 'called `Result::unwrap()` on an `Err` value: (CanisterError, "IC0503: Canister xkzfe-fiaaa-aaaal-qcnuq-cai trapped explicitly: Panicked at 'Acceptable cycles are less than the specified in parameters.', src/canisters/initializer/src/lib.rs:48:9")', /home/timk/.cargo/git/checkouts/chainsight-sdk-ebe15f3a50378c5f/6e55b5e/chainsight-cdk/src/initializer/chainsight_initializer.rs:38:23
```
In spite of this, it still seemed to spend the number of cycles I had designated for each component.

I then re-ran `csx exec --only-generate-cmds --network ic` and edited only the --with-cycles value in each .sh file (from 2.8T to 1.25T).

I then ran `csx exec --only-execute-cmds --network ic -c` on a group of 6 components. Once again it spent the designated amount of cycles but did not seem to successfully execute the components. I'm still having the problem (mentioned in post 37 above) where the cli output seems to progress part way and then give up, so it wasn't clear whether execution was succeeding for some of the components.

![image|690x281](upload://6yBUBfluYwx4qQZ4Mvmh2GWhukb.png)

Apologies for these very long posts, but I'm hoping that this might also help the team flag issues for attention as development progresses. In summary, the current problems are:
- canister wasm's not being generated or not being recognised as such
- `csx deploy` won't run in full if some canisters are already deployed
- canister controllers are not being registered properly
- `csx exec --only-execute-cmds` won't tolerate manual changes to cycle expenditure
- `csx exec` consumes cycles even when execution is unsuccessful

Also, is there a way for me to check which components have been successfully executed?

I don't mind spending the full amount of cycles if that's what's needed, but is there a way to unlock and refund cycles that have been used in unsuccessful execution attempts? For now I'll just press on. :)

-------------------------

timk11 | 2023-12-22 13:09:31 UTC | #60

**Completed project:**
# EDPR for Uniswap V3 pairs
This tool is intended to calculate an Estimated Daily Percentage Return (EDPR) for trading pairs on Uniswap V3, using a price range (set by the liquidity provider) approximately corresponding to the pair's price range over the preceding week. Pairs currrently included are USDC/ETH, WBTC/ETH, RNDR/ETH and VRA/ETH.

- GitHub repo - https://github.com/timk11/uniswap-edpr
- Canister IDs - https://github.com/timk11/uniswap-edpr/blob/main/artifacts/canister_ids.json
- Documentation - https://github.com/timk11/uniswap-edpr/blob/main/README.md

Feedback:

- Overall the CLI functions well and the documentation on [this page](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/index.md) is very well presented. However I would suggest making the documentation a bit more noob-friendly for the benefit of new users like myself.
- In particular, it's worth including all the `cd` commands in the set-up instructions in order to make it very clear which commands happen in which folders.
- The team is obviously very active with developing and updating the CLI. Just be sure that the documentation [examples](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/index.md#component-manifest) keep up with this. (It's very possible that they did, but it was just me not keeping up!) Also add snapshot_indexer_https to these, as this is used frequently and has changed a bit since I first used it.
- A few misspellings in CLI output messages - e.g. "succeeded", "failed"
- I'm hoping that my various posts above can also serve as feedback on issues that I had trouble with, that might also be encountered by other users.
- Happy to chat further about feedback if you would like.

-------------------------

megared | 2023-12-18 12:42:02 UTC | #61

Sorry for the inconvenience, and thanks for your advice.

>canister wasm’s not being generated or not being recognised as such

The csx build will generate a .wasm deployment in the artifacts folder and a dfx.json with them.

If you do a deploy or exec immediately after build, there should be no problem...

By the way, do you know what action makes the wasm disappear (or dfx.json updated etc)?

>canister controllers are not being registered properly

>csx exec consumes cycles even when execution is unsuccessful

I thought I had resolved this issue with the upgrade I told you about the other day.

I will check this as well.

It certainly may not capture the consideration of cross sections due to cycles deficiency failures or changes in them.

>csx deploy won’t run in full if some canisters are already deployed

Sorry, this is as you say.

We are aware of the lack of functionality regarding resume/suspend.

If you are concerned about failure of individual components, it would be helpful if you could mainly use individual operations using -c for both deploy and exec.

>csx exec --only-execute-cmds won’t tolerate manual changes to cycle expenditure

Likewise, you are correct, and I apologize for the inconvenience.

Thank you.

-------------------------

timk11 | 2023-12-18 12:56:59 UTC | #62

That's all fine, and I figure it's all just part of the process at this stage. Not sure what happened with the wasm's. I think they were in the artifacts folder but somehow not being saved and/or recognised properly on the IC (or so it seemed - I couldn't test this). The CLI may have been updated between build and deploy/exec on my end, so perhaps that affected it.

-------------------------

megared | 2023-12-19 14:42:24 UTC | #63

Excellent! Thanks for the report.
Also, since you put it up on Github, it's easy for us to check too.
May I ask you a few questions and tell you what I would like to see corrected?

**Questions**

[1] What is the request url/host used in the snapshot_indexer_https datasource for algorithm_lens?
I did a little research and could not find out what services are offered by them.
Since it is http, it is originally in the web2 and has limited reliability, but if the service is too minor, it may be too unreliable.
Also, this host does not appear to be able to communicate over ipv6. It probably is not running on the icp network. Please check.
It would be better if snapshot_indexer_evm (& algorithm_lens) could be used to realize this, since the data that can be obtained from those paths would be similar to what can be obtained from UniswapV3 (or processed from them).

[2] What are the multiple algorithm_lens, but with slightly different logic?
There are multiple algorithm_lens for data with different data contents but the same format. I imagine that they use the same logic, but there are some subtle differences. What are the reasons for these differences?

```txt
diff src/logics/usdc_eth_0_3_algorithm_lens/src/lib.rs src/logics/vra_eth_0_3_algorithm_lens/src/lib.rs 
1c1
< use usdc_eth_0_3_algorithm_lens_accessors :: * ;
---
> use vra_eth_0_3_algorithm_lens_accessors :: * ;
25,27c25,27
<     let pool_fees_result = get_get_last_snapshot_value_in_usdc_eth_0_3_pool_fees (targets . get (0usize) . unwrap () . clone ()) . await ;
<     let tc28x6_result = get_get_last_snapshot_value_in_usdc_eth_0_3_tcumul_28x6hr (targets . get (1usize) . unwrap () . clone ()) . await ;
<     let v3pool_result = get_get_last_snapshot_value_in_usdc_eth_0_3_v3pool (targets . get (3usize) . unwrap () . clone ()) . await ;
---
>     let pool_fees_result = get_get_last_snapshot_value_in_vra_eth_0_3_pool_fees (targets . get (0usize) . unwrap () . clone ()) . await ;
>     let tc28x6_result = get_get_last_snapshot_value_in_vra_eth_0_3_tcumul_28x6hr (targets . get (1usize) . unwrap () . clone ()) . await ;
>     let v3pool_result = get_get_last_snapshot_value_in_vra_eth_0_3_v3pool (targets . get (3usize) . unwrap () . clone ()) . await ;
46c46
<     let current_price = current_price / f32::powf(10.0,12.0);
---
>     current_price = current_price / f32::powf(10.0,12.0);
102c102
<     let tvl_in_range = sum_liquidity as f32
---
>     let mut tvl_in_range = sum_liquidity as f32
105a106
> 	let tvl_in_range = tvl_in_range / current_price;
110a112,117
>     current_price = 1.0 / current_price;
>     let new_range_top = 1.0 / range_bottom;
>     let new_range_bottom = 1.0 / range_top;
>     range_top = new_range_top;
>     range_bottom = new_range_bottom;
> 
```

**About bug(?)**

[1] Specify lens_target in algorithm_lens manifest
In the algorithm_lens logic, we are trying to make a cross canister call to 4 snapshot_indexer_https using the "targets" argument.
However, since lens_target is not specified in manifest, I think this "targets" is empty and the id of the calling canister is not passed.

[2] The caller snapshot_indexer_https is 4 in total, but tries to access it with index 4 (= len=5)
I think `targets.get(4usize)` is None.

```rust
pub async fn calculate (targets : Vec < String >) -> LensValue {
    let pool_fees_result = get_get_last_snapshot_value_in_rndr_eth_1_pool_fees (targets . get (0usize) . unwrap () . clone ()) . await ;
    let tc28x6_result = get_get_last_snapshot_value_in_rndr_eth_1_tcumul_28x6hr (targets . get (1usize) . unwrap () . clone ()) . await ;
    let v3pool_result = get_get_last_snapshot_value_in_rndr_eth_1_v3pool (targets . get (3usize) . unwrap () . clone ()) . await ;
    let eth_usdc_price_result = get_get_last_snapshot_value_in_eth_usdc_price (targets . get (4usize) . unwrap () . clone ()) . await ;
    ...
```

**Improvements**

[1] Tags is not set in accordance with the target currency.
Many seem to be in USDC, ETH.

[2] Common algorithm_lens
It is similar to the contents of Questions[2], but if the logic is the same, it seems that only one algorithm_lens is needed.
We can also change the parameters from relayer to select the data source.

Thank you.

-------------------------

timk11 | 2023-12-20 13:26:05 UTC | #64

Thanks for the feedback! Here are responses to the questions and issues you have raised:

**Questions**

**[1]** This is the [Oku API](https://oku.trade/api), which I understand was developed under a Uniswap Foundation grant. See also <https://blockworks.co/news/uniswap-v3-new-front-end> for some background. It is not on the ICP network. How can I check if it is IPV6-compatible?

Getting the data that I have obtained from this API from on-chain data would be relatively straightforward for most of the variables used, but for a couple of them it is problematic:
- fees_24h_usd - Calculating cumulative fees for a pool is very complex and probably requires the use of historical data or stored snapshots rather than data that can be queried from a contract, as the Uniswap pool contracts only seem to provide fee data in the form of current state variables.
- ticks - I've used this variable for calculating the total value locked within a given range of ticks. This variable is readily available from the [UniswapV3Pool contract](https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolState#ticks) but is difficult to implement for our purposes because the required ticks need to be individually specified in separate queries, which would consume huge resources and would not be workable if method values need to be hard-coded.

The remaining variables could be derived from 4 separate contract calls within UniswapV3Pool ([slot0](https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolState#slot0) for both the asset pair of interest and for UDSC/ETH, [liquidity](https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolState#liquidity) and [tickSpacing](https://docs.uniswap.org/contracts/v3/reference/core/interfaces/pool/IUniswapV3PoolImmutables#tickspacing)) which would be easy to do but would start to get expensive in terms of cycles. I would have preferred to use on-chain data as much as possible, but for these limitations. Please correct me if my understanding of any this doesn't seem right.

**[2]** The algorithm_lens all use the same logic except for the VRA/ETH pair. The reason is that in this pair, (W)ETH is designated as token0 but in the other pairs it is token1, so without this change the return rate would end up being somewhat different if the price ratio had fluctuated a great deal over the preceding week.

**Bugs**

**[1]** lens_targets: I couldn't find this in the [algorithm_lens schema](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/schema/algorithm_lens.md) but I see that it appears in the [relayer schema](https://github.com/horizonx-tech/chainsight-cli/blob/main/docs/schema/relayer.md#lens_targets), and is something that I had overlooked. To my mind this seems redundant as the information also appears under datasource in algorithm_lens (what am I missing?) but I've made this change for the each of the pairs. Does [this](https://github.com/timk11/uniswap-edpr/blob/main/components/rndr_eth_1_relayer.yaml#L26) look right?

**[2]** The indices in this section are 0, 1, 3, 4. **Whoops!** I must have deleted a line at some point and overlooked this detail. I didn't understand how this part worked, but I  gather that `targets` here are specified by lens_targets, which would answer my question in the last paragraph? I'll fix this up now.

**Improvements**

**[1]** Thanks for spotting that! Something I overlooked while replicating the manifests. Now fixed.

**[2]** I'm not sure how this would work. Wouldn't `datasource:  methods:  - id:` in each algorithm_lens.yaml still need to point to a specific set of snapshotters? By my understanding the contract address in each snapshotter manifest needs to be hard coded, so they are all unique. I can see how this would work for the relayers, but is there a way around this for the algorithm_lens?

**Updating the project**

Thanks again for such detailed feedback. This has really helped me get my head around how all this fits together! Now that I've corrected the two main bugs this should hopefully work as intended.

How should I now go about updating the deployed project? Should the following steps be sufficient to safely update and re-deploy the canisters?

```
csx generate
csx build --only-build
csx deploy --network ic
```

I'm cautious about using `csx exec` as it seems to use a lot of cycles (about $80 worth to execute the full project), unless there's a way to refund the cycles I spent on the faulty version of the project similar to what happens with using `dfx canister delete`. If I've earnt the bounty then this won't matter too much but I'm happy to be guided by your advice.

-------------------------

megared | 2023-12-21 06:16:42 UTC | #65

Thank you for checking it out.

**Questions [1]**

> [1] This is the Oku API, which I understand was developed under a Uniswap Foundation grant. See also https://blockworks.co/news/uniswap-v3-new-front-end for some background.

I see, I just didn't know this. I would like to take a look.

> It is not on the ICP network. How can I check if it is IPV6-compatible?

Currently on the ICP it must be able to communicate over ipv6.

https://internetcomputer.org/docs/current/developer-docs/integrations/https-outcalls/https-outcalls-how-it-works#ipv6-only-support

https://forum.dfinity.org/t/https-outcalls-to-ipv4-destinations-update-and-request-for-comments/17377/3

I'm sure there are other ways to check, e.g. ping6.

https://techhub.hpe.com/eginfolib/networking/docs/switches/YA-YB/16-01/5200-0136_yayb_2530_ipv6/content/ch07s02.html

>Getting the data that I have obtained from this API from on-chain data would be relatively straightforward for most of the variables used, but for a couple of them it is problematic:

>The remaining variables could be derived from 4 separate contract calls within UniswapV3Pool

I think your understanding is correct, I was just asking the question based on trust in https and its endpoints and if it is difficult to get from onchain (and endpoints can be trusted), then I think you can make a decision like this.

**Questions [2]**

In a nutshell, you want to do something like a reversal?

If you want to be able to choose between token0 and token1, I think you can control such a part by adding an argument when calling algorithm_lens to make it a single algorithm_lens logic.

https://github.com/horizonx-tech/chainsight-cli/blob/f23673447ea06f67096f728a986d1123ce5e3162/docs/schema/algorithm_lens.md#with_args

**Bugs? [1]**

Sorry, this was about the relayer manifest.

On top of that, relayer seemed to be fine. Please let it go.

**Improvements [2]**

The address of the snapshot_indexer to which algorithm_lens is called is not hardcoded. The actual address is specified by the lens_target parameter in the manifest for relayer and snapshot_indexer_icp. (If you call algorithm_lens directly, it is the vec text argument.)

The datasource.methods.id of algorithm_lens will autoload .did only when the component id of the same project is specified.

The id (or func_name_alias) directly affects the function generation for cross canister calls in logics. If you are calling a canister outside of your project, make sure to specify the correct identifier (candid_file_path if you use a custom type), and make sure that the component (ex: relayer) calling the algorithm_lens has a lens_ target of the component (ex: relayer) calling algorithm_lens should be a data source such as snapshot_indexer.

https://github.com/horizonx-tech/chainsight-showcase/blob/7039ef957c51aa2cc7438a0a7f10b20eb9e1d46f/volatility/volatility_eth/components/lens_vol_ethusd.yaml
https://github.com/horizonx-tech/chainsight-showcase/blob/7039ef957c51aa2cc7438a0a7f10b20eb9e1d46f/volatility/volatility_eth/components/relayer_scroll_sepolia.yaml

-------------------------

megared | 2023-12-21 06:21:44 UTC | #66

>Updating the project

Sorry, but there is currently no way to update a canister that has already been deployed.
if prod, you can delete the canister and its associated sidecar canisters and recover the cycles.
The canister id of a sidecar can be figured out with the following function
proxy: get_proxy: () → (principal) of the body canister
vault, db: get_component_info: () → (ComponentInfo) of the proxy
proxy: `get_proxy: () → (principal)` of the body canister
vault, db: `get_component_info: () → (ComponentInfo)` of the proxy
https://github.com/horizonx-tech/chainsight-management-canisters/blob/a8515ea6041a8725654be860b9bf367685ea9128/src/canisters/proxy/src/lib.rs#L73-L81

>I’m cautious about using csx exec as it seems to use a lot of cycles (about $80 worth to execute the full project), 

The whole thing is certainly large. But the cost of deploying main to the canister itself is the ICP default (it might be better to make this itself controllable via csx deploy).
To reduce the deployment cost of sidecar related to management-canister, I would appreciate it if you could modify the parameter of the script that I told you the other day.

-------------------------

timk11 | 2023-12-22 13:52:43 UTC | #67

That's all good! :slight_smile:  

I'll write a bit more in the morning (Sydney time) in response to some of those points. For now, I've been redeploying and I'm up to `csx exec` but I keep getting this kind of error:
```
$ csx exec --only-execute-cmds --network ic -c rndr_eth_1_pool_fees
Dec 22 13:32:45.062 INFO Execute canister processing...
Dec 22 13:32:45.062 INFO Load env file: "./.env"
Dec 22 13:32:45.064 INFO Skip to generate commands to call components
Dec 22 13:32:45.064 INFO Start processing for commands execution...
Dec 22 13:32:45.065 INFO Run scripts to execute commands for deployed components
Dec 22 13:32:45.065 INFO Selected component is 'rndr_eth_1_pool_fees'
Dec 22 13:32:45.074 ERRO Failed: Executed './scripts/entrypoint.sh' by: Error: Cannot find canister id. Please issue 'dfx canister create rndr_eth_1_pool_fees'.
occured on /home/timk/ic/csx/edpr_full/uniswap-edpr/artifacts/scripts/components/rndr_eth_1_pool_fees.sh [Line 3]
command: dfx canister call rndr_eth_1_pool_fees init_in '(variant { "LocalDevelopment" }, record {
                refueling_interval = 86400: nat64;
                vault_intial_supply = 500000000000: nat;
                indexer = record {
                    initial_supply = 0: nat;
                    refueling_amount = 500000000000: nat;
                    refueling_threshold = 250000000000: nat;
                };
                db = record {
                    initial_supply = 750000000000: nat;
                    refueling_amount = 500000000000: nat;
                    refueling_threshold = 250000000000: nat;
                };
                proxy = record {
                    initial_supply = 150000000000: nat;
                    refueling_amount = 50000000000: nat;
                    refueling_threshold = 50000000000: nat;
                };
        })' --with-cycles 1400000000000 --wallet ${WALLET}

(stdout at run time)
Selected is 'rndr_eth_1_pool_fees'
Run script for rndr_eth_1_pool_fees
```
This doesn't make much sense to me. I've been through all the steps and rndr_eth_1_pool_fees has been created, built and installed. You can see [here](https://github.com/timk11/uniswap-edpr/blob/main/artifacts/canister_ids.json) which canisters have been deployed, and [here](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=2cvqa-3qaaa-aaaag-qcx2q-cai) for the Candid UI of rndr_eth_1_pool_fees.

Can you see anything that I might be missing?

-------------------------

timk11 | 2023-12-23 03:24:46 UTC | #68

Not too sure what happened there, but I've managed to work around it. I deleted all the canisters, cloned the project afresh from the repo, ran through all the steps to build, deploy and execute and it looks like it's succeeded.

I checked the Oku API on a few different test sites and it looks like it's IPV6-compatible. I totally agree with your thinking about on-chain data. On-chain data forms the ground truth for everything we're looking at in this project and it would be ideal to eliminate the need to trust a centralised source, but I decided to stick with Oku due to the complexities involved. From the information at hand it seems to be highly reliable.

> Sorry, this was about the relayer manifest.

No problem! I figured that was what you meant and it all made sense once I worked my way through it.

Reclaiming cycles from sidecar canisters by getting the details with get_proxy() worked well!

I worked on the two other main changes that you recommended - combining algorithm lenses and reducing cycle cost.

I was unable to get a successful outcome by combining lenses. I tried this:

```
# yaml-language-server: $schema=https://raw.githubusercontent.com/horizonx-tech/chainsight-cli/main/resources/schema/algorithm_lens.json
version: v1
metadata:
  label: pairs_algorithm_lens
  type: algorithm_lens
  description: 'Calculates EDPR for each trading pair'
  tags:
  - Ethereum
  - Account
datasource:
  methods:
  - id: pool_fees
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
  - id: tcumul_28x6hr
    identifier: 'get_last_snapshot_value : () -> (record { vec int64; vec text })'
  - id: v3pool
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
  - id: eth_usdc_price
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
```
This gave me an error: `ERRO Not compilable IDLProg`. It looked the method ids had to match the specific components targeted, which needed to separate as they are making calls to different contracts. I may have missed something here but I decided to go back to having a separate algorithm lens for each trading pair.

On the other hand, reducing cycle cost was successful. This ended up working once I halved all the cycles values in each .sh file, instead of just the initial_supply (x3) and --with-cycles, like so:
```
#!/bin/bash
# init
dfx canister --network ic call rndr_eth_1_algorithm_lens init_in '(variant { "Production" }, record {
                refueling_interval = 86400: nat64;
                vault_intial_supply = 500000000000: nat;
                indexer = record { 
                    initial_supply = 0: nat;
                    refueling_amount = 500000000000: nat;
                    refueling_threshold = 250000000000: nat;
                };
                db = record { 
                    initial_supply = 750000000000: nat;
                    refueling_amount = 500000000000: nat;
                    refueling_threshold = 250000000000: nat;
                };
                proxy = record { 
                    initial_supply = 150000000000: nat;
                    refueling_amount = 50000000000: nat;
                    refueling_threshold = 50000000000: nat;
                };
        })' --with-cycles 1400000000000 --wallet $(dfx identity get-wallet --network ic)
```
I now have the entire project deployed, hopefully in full working order although I haven't managed to test it out.

-------------------------

megared | 2023-12-23 12:16:23 UTC | #69

Thanks for confirming.

> This gave me an error: `ERRO Not compilable IDLProg` .

This is because it uses a custom type called SnapshotValue but does not understand its type definition,
In this case, you must specify candid_file_path to specify the .did where the SnapshotValue is located.
If the id is the name of another component in the same project, the .did will be automatically retrieved and interpreted.

-------------------------

timk11 | 2023-12-24 14:02:42 UTC | #70

Would this solve it?

**rndr_eth_1_relayer.yaml:** [and similar changes for other pairs]

```
# yaml-language-server: $schema=https://raw.githubusercontent.com/horizonx-tech/chainsight-cli/main/resources/schema/relayer.json
version: v1
metadata:
  label: rndr_eth_1_relayer
  type: relayer
  description: 'This canister relays the Estimated Daily Percentage Return (EDPR) of the RNDR/ETH 1% pair on UniSwap V3, using a price range based on the previous week''s prices, to Sepolia'
  tags:
  - Oracle
  - snapshot
datasource:
  type: canister
  location:
    id: shared_algorithm_lens
    args:
      id_type: canister_name
  method:
    identifier: 'get_last_snapshot_value : () -> (text)'
    candid_file_path: src/canisters/rndr_eth_1_algorithm_lens/rndr_eth_1_algorithm_lens.did
    interface: null
    args: []
destination:
  network_id: 11155111
  type: uint256
  oracle_address: "0xB5Ef491939A6dBf17287666768C903F03602c550"
  rpc_url: https://ethereum-sepolia.blockpi.network/v1/rpc/public
interval: ${INTERVAL}
lens_targets:
  identifiers:
    - rndr_eth_1_pool_fees
    - rndr_eth_1_tcumul_28x6hr
    - rndr_eth_1_v3pool
    - eth_usdc_price
```

**shared_algorithm_lens:**
```
# yaml-language-server: $schema=https://raw.githubusercontent.com/horizonx-tech/chainsight-cli/main/resources/schema/algorithm_lens.json
version: v1
metadata:
  label: shared_algorithm_lens
  type: algorithm_lens
  description: ''
  tags:
  - Ethereum
  - Account
datasource:
  methods:
  - id: pool_fees
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
  - id: tcumul_28x6hr
    identifier: 'get_last_snapshot_value : () -> (record { vec int64; vec text })'
  - id: v3pool
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
  - id: eth_usdc_price
    identifier: 'get_last_snapshot_value : () -> (SnapshotValue)'
```
The bit I'm still unsure about is `datasource` in the shared algorithm_lens. There is no specific component called only `pool_fees`, `tcumul_28x6hr` or `v3pool`. These snapshotters are all linked to specific pairs (`rndr_eth_1_pool_fees` etc) and to a separate Ethereum contract for each pair, so there's no way I can see to narrow it down further. What do you think?

-------------------------

megared | 2023-12-24 14:17:17 UTC | #71

That is the image I had in mind.
algorithm_lens does not specify the data source itself, and the interface of the data source must be determined.
Therefore, id does not specify a specific component, but rather a candid_file representing its interface.
https://forum.dfinity.org/t/assigned-chainsight-bnt-1-asset-rating-oracle/23038/69
https://github.com/horizonx-tech/chainsight-showcase/blob/7039ef957c51aa2cc7438a0a7f10b20eb9e1d46f/volatility/volatility_eth/components/lens_vol_ethusd.yaml

However, as I mentioned in my previous comment, it is a matter of which currency is used for token0 and token1, so I think it would be better to use algrotihm_lens with an argument and call this algorithm_lens by snapshot_indexer_icp or relayer with an argument. I think you can combine these two algorithm_lens into one by changing the parameters.

I think this showcase has everything you might want to do.
1) algorithm_lens with argument
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/components/lens_iv_calculator.yaml#L20
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/src/logics/lens_iv_calculator/src/lib.rs#L9-L15
2) snapshot_indexer_icp calling its algorithm_lens
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/components/snapshots_iv_for_spx_4500_call.yaml
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/src/logics/snapshots_iv_for_spx_4500_call/src/lib.rs
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/components/snapshots_iv_for_spx_4500_put.yaml
https://github.com/horizonx-tech/chainsight-showcase/blob/3f4fac8389e9990f3ae045f2ad80532b826a3179/implied_volatility_spx/src/logics/snapshots_iv_for_spx_4500_put/src/lib.rs

-------------------------

timk11 | 2023-12-24 14:37:40 UTC | #72

Now I'm confused. Can you clarify further?

I see there's also the logic which will need to be combined. With [this line](https://github.com/timk11/uniswap-edpr/blob/a54ebb08ced2bedd67338222ee770e81db5115f3/src/logics/rndr_eth_1_algorithm_lens/src/lib.rs#L25) as an example:
```
    let pool_fees_result = get_get_last_snapshot_value_in_rndr_eth_1_pool_fees (targets . get (0usize) . unwrap () . clone ()) . await ;
```
would this become
```
    let pool_fees_result = get_get_last_snapshot_value_in_pool_fees (targets . get (0usize) . unwrap () . clone ()) . await ;
```
?

Not sure exactly where the `get_get_...` variable name is derived from, but I would have imagined this not to work.

-------------------------

megared | 2023-12-24 14:43:28 UTC | #73

The function name is automatically generated from datasource.methods.id (or datasource.methods.id.func_name_alias).
The function is identified by which datasource.methods[n] it was generated by.
On top of that, this function does not determine which canister to call, the caller is one of the principals in the targets passed in the argument (the targets are specified by the snapshot_ indexer_icp or relayer that calls this algorithm_lens).

If you look at the link in the previous comment, you will see examples of two different snapshot_indexer_icp's calling the same algorithm_lens with different lens_targets (and non-target arguments).

>1. algorithm_lens with argument
>2. snapshot_indexer_icp calling its algorithm_lens

-------------------------

timk11 | 2023-12-24 15:23:24 UTC | #74

Got it. So this line should work, and combing the USDC, RNDR and WBTC lenses should be straightforward.

Would it be acceptable to have two separate lenses? One for these three (xxx/ETH) and the other for VRA (ETH/xxx)? I believe this would make it easy for any other pairs to be added, and simple for any other users to understand. Non-ETH pairs would probably have their returns denominated in one of the pair tokens (e.g. xxx/DAI, DAI/xxx) so this solution would have broad utility.

-------------------------

megared | 2023-12-24 17:27:32 UTC | #75

I am commenting on this at Github.
https://github.com/horizonx-tech/chainsight-showcase/pull/34#issuecomment-1868562818

-------------------------

hawk | 2023-12-28 13:41:44 UTC | #76

Hi everyone. 

I want to express my gratitude for your interest in this bounty. It has been three months since we opened it to the public. I would like to inform you that we have contacted the participants individually and the final review is currently in progress on GitHub and Telegram. Therefore, I would like to close this thread soon.

It's great to see @timk11 using Chainsight CLI to create an EDPR Oracle with UniswapV3 on this bounty. I respect his hard work. I also want to thank all the participants who used the CLI and gave the comments here.

We will be opening a second bounty program in the near future and we would love for you to apply. We appreciate your feedback and will continue to make improvements based on it. 

Thank you.

-------------------------

timk11 | 2024-01-15 14:08:30 UTC | #77

Thanks @hawk ! Completing this project has been a tremendously valuable learning experience and I'm most grateful for the opportunity to have taken part.

Final deliverables are in place as follows:
[quote="hawk, post:1, topic:23038"]
## Final Deliverables

1. CanisterIDs deployed on IC - [.../artifacts/canister_ids.json](https://github.com/timk11/chainsight-showcase/blob/univ3-edpr/uniswap_edpr/artifacts/canister_ids.json)
2. GitHub repos - [chainsight-showcase/uniswap_edpr · GitHub](https://github.com/timk11/chainsight-showcase/tree/univ3-edpr/uniswap_edpr)
3. Docs (README is fine) - [.../uniswap_edpr/README.md](https://github.com/timk11/chainsight-showcase/blob/univ3-edpr/uniswap_edpr/README.md)
  - What type of asset rating? - Estimated Daily Percentage Return (EDPR) for selected Uniswap V3 trading pairs
  - Who is it for? - Liquidity providers and dapp developers
  - What are the unique points? - Estimates a return based on a selected range of concentrated liquidity, in keeping with the actual processes of the Uniswap V3 platform, rather than across the entire range of liquidity as with existing tools
4. Feedback to Chainsight CLI - Contained in [Post #60](/uniswap_edpr/README.md) above + additional comments in this thread and in separate communications with team
[/quote]

Further notes:
- All requested deliverables are now in place pending final review.
- Results for all 4 pairs can be obtained by calling the `_indexer` component (see [canister_ids](https://github.com/timk11/chainsight-showcase/blob/univ3-edpr/uniswap_edpr/artifacts/canister_ids.json)) via the IC dashboard, e.g. `dai_eth_0_3_indexer`: [https://dashboard.internetcomputer.org/canister/2stcd-6qaaa-aaaag-qc3vq-cai](https://dashboard.internetcomputer.org/canister/2stcd-6qaaa-aaaag-qc3vq-cai) using `get_last_snapshot_value()`.
- The same results can also be viewed on the Chainsight UI, [as seen here](https://beta.chainsight.network/explore/components/2stcd-6qaaa-aaaag-qc3vq-cai) for the DAI/ETH pair.
- Results for the DAI/ETH, SHIB/ETH and wstETH/ETH pairs have been verified as accurate. Results for the RPL/ETH pair are erroneous due to an [identified error](https://github.com/horizonx-tech/chainsight-showcase/pull/34#discussion_r1451104552) that has [now been fixed](https://github.com/timk11/chainsight-showcase/blob/univ3-edpr/uniswap_edpr/src/logics/shared_algorithm_lens/src/lib.rs#L63-L67) and pushed to the repo, but as per the team's request I have not yet re-deployed it to the IC as a fresh component.
- Relayers for each pair can be seen on the Chainsight UI, e.g. `dai_eth_0_3_relayer` - [https://beta.chainsight.network/explore/components/ztrg6-wyaaa-aaaag-qc4dq-cai](https://beta.chainsight.network/explore/components/ztrg6-wyaaa-aaaag-qc4dq-cai). So far the Relayer is not giving an output (which would correspond to `edpr` obtained from [this call](https://dashboard.internetcomputer.org/canister/i7fwc-paaaa-aaaal-qdbiq-cai#last_execution_result) to  `dai_eth_0_3_indexer`). I'm informed that this is due to a known Relayer issue unrelated to my own code.

-------------------------

timk11 | 2024-01-22 11:04:48 UTC | #78

Thanks @hawk for the further discussion regarding the final review. All criteria have now been completed as per details in Telegram. I look forward to your confirmation that the bounty has been completed.

-------------------------

timk11 | 2024-01-23 16:58:48 UTC | #79

@hawk - Confirming that the final bounty payment has now been received, with thanks.

-------------------------

