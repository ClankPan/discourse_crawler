chchrist | 2021-02-24 22:02:09 UTC | #1

Hello,

Is there something equivalent to https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random or I have to implement my own?

-------------------------

Steve | 2021-02-24 22:16:50 UTC | #2

This conversation likely interests you - https://forum.dfinity.org/t/secure-lottery-function-random-number-generation/2012

Random module is here - https://sdk.dfinity.org/docs/base-libraries/random

-------------------------

chchrist | 2021-02-25 21:03:58 UTC | #3

thank you! It seems that I will have to write something myself then.

-------------------------

chchrist | 2021-02-25 23:10:06 UTC | #4

I gave it a go here https://gist.github.com/chchrist/927b0c8ffe36a52b11522f470b81f216 
Seems to be generating pseudo random numbers but since I'm new Motoko learner I'm pretty sure it can be written better.

-------------------------

chchrist | 2021-02-27 16:48:36 UTC | #5

My implementation takes around 15s to return... Generating blobs is expensive and also I need to learn more about how to handle state

-------------------------

chchrist | 2021-02-27 21:21:06 UTC | #6

The latest version takes ~3s but still, it is too much. It seems that since I mutate the state it needs consensus...

-------------------------

Steve | 2021-02-27 22:17:16 UTC | #7

Just a heads up ~3 second consensus is built into the local dev environment so developers won't be surprised when they deploy to the mainnet. But you're spot on - All update calls require consensus. Query calls do not.

-------------------------

chchrist | 2021-03-01 00:01:27 UTC | #8

ah,  I see. ty you for the clarification @Steve 

What's left now to replicate Math.random is to convert the returned integer to a Float between 0 and 1...
I'm trying to figure it out from https://github.com/v8/v8/blob/dc712da548c7fb433caed56af9a021d964952728/src/numbers/math-random.cc#L17

-------------------------

Hazel | 2021-03-02 00:23:28 UTC | #9

Hey @chchrist, here is a thought!

Since Nat8 can store the values 0..255, all you have to do is divide the random number by highest possible number:

```
var myRandom : Nat8 = 123;
let mappedRandom : Float = Float.fromInt(myRandom) / Float.fromInt(255);
```

A better way might be to use the  `Random::rangeFrom` function:

```
  /// Distributes outcomes in the numeric range [0 .. 2^p - 1].
  /// Seed blob must contain at least ((p+7) / 8) bytes.
```
So you could do something like

```
let random = Random.rangeFrom(32, someBlob)
// between 0..4294967295
let max : Float = 4294967295;
let newRandom = Float.fromInt(random) / max;
```

-------------------------

chchrist | 2021-03-02 09:02:38 UTC | #10

ty @Hazel! As Einstein once said " The definition of genius is taking the complex and making it simple." 

Now I need to find out why I'm getting this error...

    The Replica returned an error: code 5, message: "Canister rrkah-fqaaa-aaaaa-aaaaq-cai trapped explicitly: losing precision"

-------------------------

Hazel | 2021-03-02 14:33:14 UTC | #11

:thinking: now I didn't expect that! I guess that makes sense though - I'll need to think a bit on a better mapping function.

-------------------------

nomeata | 2021-03-03 18:50:59 UTC | #12

Are you using fixed-with numbers (e.g. `Int8`)? “losing precision” sounds like the error message when a lossy conversion actually loses data.

-------------------------

