wewei | 2022-02-26 17:36:27 UTC | #1

Hi, Guys
I'm trying to write a http canister with Motoko. After I deployed it to IC network, I got the "Body does not pass verification" error when I access from browser.
Canister ID: p5th4-gyaaa-aaaal-qajkq-cai
URL of problem: [https://p5th4-gyaaa-aaaal-qajkq-cai.ic0.app](https://p5th4-gyaaa-aaaal-qajkq-cai.ic0.app/)
The RAW URL works fine: [https://p5th4-gyaaa-aaaal-qajkq-cai.raw.ic0.app](https://p5th4-gyaaa-aaaal-qajkq-cai.raw.ic0.app/)
My code: [TinTinLectures-Lesson3/main.mo at master ¬∑ wewei/TinTinLectures-Lesson3 (github.com)](https://github.com/wewei/TinTinLectures-Lesson3/blob/master/src/Lesson3/main.mo)

From this topic 
[Service Worker Bug? Body does not pass verification - Developers - Internet Computer Developer Forum (dfinity.org)](https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673/5)

I learned this error has something to do with the service worker. I debugged into the SW, found the response has no `IC-Certificate` header. But I don't understand why.

Could anybody help me on this? Or, even better, share some document/ post/ sample code about how the http_request work.

-------------------------

skilesare | 2022-02-26 20:25:33 UTC | #2

These articles will have some good info for you:

https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673/11

https://forum.dfinity.org/t/boundary-node-http-response-headers/10747/45

I‚Äôd love to see a reference implementation of a motoko file server, so please revert if you get it figured out!  I think you are going to have to use the certified data api.

-------------------------

wewei | 2022-02-27 01:16:23 UTC | #3

Thank you, I'll read the threads first as well as the `ic-certified-assets` to get more background.

-------------------------

nomeata | 2022-02-27 10:41:10 UTC | #4

[quote="skilesare, post:2, topic:11154"]
I‚Äôd love to see a reference implementation of a motoko file server
[/quote]

Maybe too minimal to count as a ‚Äúreference implementation‚Äù, but <https://github.com/nomeata/motoko-certified-http> could be a starting point.

-------------------------

skilesare | 2022-02-27 19:13:36 UTC | #5

This is great. I‚Äôll use this for my http_request lecture for the bootcamp.

It would also probably be worth a bounty to flesh it out to a full file server.

One thing that has occurred to me on reading this is that it may be hard(impossible?) to do this for dynamic http responses. Say you serve a page with a time stamp on it. You wouldn‚Äôt be able to provide a certified tree with the content of the page because http_request is a query and you would not be able to update it. For dynamic content I guess we‚Äôll always have to use raw?

-------------------------

nomeata | 2022-02-27 20:34:39 UTC | #6

Correct, and one of my main criticisms of the whole ‚Äúcertified variables‚Äù approach to securing queries. I haven't given up hope that we get proper, system-provided ‚Äúcertified queries‚Äù at some point, where the boundary node aggregates the query response from multiple nodes (multi- or threshold signature). This would allow _any_ query to be used securely (even dynamic ones) without _any_ effort on the canister authors side, actually fulfilling the promise of a tamper-proof, easy to use platform. In fact, I'd argue it should be the default. No more `raw`!

And I'd bet that such a feature would have been less effort than all the work that went into certified variables across the stack and in terms of education.

Maybe one day - someone observed that it'd be internally needed or at least useful for implementing inter-canister query calls, so I'm not giving up hope.

-------------------------

paulyoung | 2022-02-27 20:42:21 UTC | #7

[quote="skilesare, post:5, topic:11154"]
You wouldn‚Äôt be able to provide a certified tree with the content of the page because http_request is a query and you would not be able to update it
[/quote]

You could use `http_request_update` üôÇ

-------------------------

faraz.shaikh | 2022-02-27 22:04:09 UTC | #8

@wewei 

For your original question, here are your possible next steps

1. Read up on certified variable  (videos and documentation)
2. Look at rust asset canister for a reference implementation 

Decide if you need the performant certified queries ? Queries are performant but are hard to implement in a ‚Äúsecure‚Äù fashion. You can fall back to updates if you don‚Äôt need the speed.  

Relying on raw path to access uncertified queries is relies on a ‚Äúunintended omission‚Äù and will be fixed anytime time and your raw accessed will ALSO start to fail. 



Please reach out to the community for implementing queries securely with certificates.  Falling back to raw path for insecure access to queries is a anti-pattern and is relies on a behavior which will be fixed anytime in near future.

-------------------------

faraz.shaikh | 2022-02-27 22:14:46 UTC | #9

IMO a lot of important aspects are getting buried under this infamous error code body cannot be verified


1. Insecurity of non-certified queries 
2. Difficulty in implementing certified response . (This is a known unspoken issue - designing certified queries is orders of magnitude more arduous than coding any other aspect of a IC canister)
3. confusion around spec of raw/non-raw mandatory non-mandatory aspects of certificate generation and checking. This is the part that can be easily fixed. 

I don‚Äôt believe throwing boundary nodes into mix brings any clarity to the situation.   Boundary nodes should best serve as performance enhancements and not turn into a core requirement/extension for the IC protocol. At least, until they are completely decentralized.

-------------------------

nomeata | 2022-02-28 08:31:06 UTC | #10

[quote="faraz.shaikh, post:9, topic:11154"]
This is a known unspoken issue
[/quote]

I keep talking about this issue all the time :slight_smile: 

(I wish someone at DFINITY would make [this document](https://docs.google.com/document/d/1vwWbCWGJ0n-aGq362gbRev_Apfkh5Mp3Uv4h7Lby24A/view) public, it discusses the issue with certified variables, and might be helpful for anyone digging deeper. But a TL;DR of it is in my post above.)

-------------------------

skilesare | 2022-02-28 14:15:45 UTC | #11

I'm still a bit confused as to if this is natively handled or if it only works with the ICX proxy.  Will this get hit for any HTTP request that is not a get natively?

My particular use case involves images and having them return in query time is pretty important. Waiting for consensus is going to make the page crawl.

-------------------------

skilesare | 2022-02-28 14:37:01 UTC | #12

[quote="faraz.shaikh, post:8, topic:11154"]
Relying on raw path to access uncertified queries is relies on a ‚Äúunintended omission‚Äù and will be fixed anytime time and your raw accessed will ALSO start to fail.
[/quote]

Does this mean that raw access will go away in the future?

-------------------------

paulyoung | 2022-03-02 20:39:51 UTC | #13

[quote="skilesare, post:11, topic:11154"]
I‚Äôm still a bit confused as to if this is natively handled or if it only works with the ICX proxy. Will this get hit for any HTTP request that is not a get natively?
[/quote]

This was the last I heard from @faraz.shaikh:

https://forum.dfinity.org/t/feature-request-map-appropriate-http-request-methods-to-update-calls/4303/17?u=paulyoung

-------------------------

