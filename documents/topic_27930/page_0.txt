b3hr4d | 2024-02-27 15:45:13 UTC | #1

Dear React Developers,

I'm thrilled to introduce `@ic-reactor/react`, a dedicated React library designed to significantly enhance your development experience on the Internet Computer (IC) blockchain. This library is tailored to harness the full potential of React, providing you with a suite of hooks and utilities for seamless state management, authentication, and type-safe interactions with IC actors.

https://youtu.be/DncH0jDdZS4

**Key Features:**

- **React Hooks Integration**: Seamlessly manage blockchain actor states and authentication within your React apps.
- **Type-Safe Actor Interactions**: Ensure type safety with your IC actors, thanks to the integration with actor declaration files.
- **Candid Adapter**: Fetch Candid interface definitions directly from the network(IC or Local), enabling you to adapt to canisters with changing interfaces or to avoid managing Candid files locally.
- **Auto-Refresh & Query Capabilities**: Keep your data fresh with auto-refreshing capabilities and straightforward querying of IC actors.

**Getting Started:**

To integrate `@ic-reactor/react` into your project, installation is just a command away:

```bash
npm install @ic-reactor/react
# OR
yarn add @ic-reactor/react
```

Once installed, you have many ways to leverage the power of `@ic-reactor/react` in your React applications. Let's explore some of the key features and usage examples to help you get started.

**Usage Example:**

Dive into `@ic-reactor/react` with this simple example, showcasing how to create an actor and use the `useQueryCall` hook for fetching data:

```ts
// actor.ts
import { createReactor } from "@ic-reactor/react"
import { backend, canisterId, idlFactory } from "./declarations/backend"

export type Backend = typeof backend

export const { useActorStore, useAuth, useQueryCall } = createReactor<Backend>({
  canisterId,
  idlFactory,
  host: "https://localhost:4943",
})
```

```jsx
// Balance.tsx
import { useQueryCall } from "./actor"

const Balance = () => {
  const principal = useUserPrincipal()

  const { call, data, loading, error } = useQueryCall({
    functionName: "get_balance",
    args: [principal],
  })

  return (
    <div>
      <button onClick={call}>{loading ? "Loading..." : "Refresh"}</button>
      {data && <p>Balance: {data}</p>}
      {error && <p>Error: {error.toString()}</p>}
    </div>
  )
}
```

**Authentication Example:**

Manage user authentication effortlessly with `@ic-reactor/react`:

```jsx
// Login.tsx
import { useAuth } from "./actor"

const Login = () => {
  const { login, logout, identity, authenticated } = useAuth()

  return (
    <div>
      {authenticated ? (
        <>
          <div>Logged in as: {identity.getPrincipal().toText()}</div>
          <button onClick={logout}>Logout</button>
        </>
      ) : (
        <button onClick={login}>Login</button>
      )}
    </div>
  )
}
```

### Provider-Based Architecture

`@ic-reactor/react` includes an `AgentProvider` that establishes a shared IC agent for all your components, ensuring efficient and centralized management of your IC connections. Within this, you can use `ActorProvider` to specify canisters and manage their state and interactions in a structured manner. This approach is ideal for applications interacting with multiple canisters, as it keeps your code organized and maintainable.

```jsx
<AgentProvider>
  <Login />
  <ActorProvider
    canisterId="ryjl3-tyaaa-aaaaa-aaaba-cai"
    loadingComponent={<div>Loading Icp Ledger...</div>}
  >
    <ICPBalance />
    <ICPTransfer />
  </ActorProvider>
  <ActorProvider
    canisterId="YOUR_CANISTER_ID"
    loadingComponent={<div>Loading Note Actor...</div>}
  >
    <Notes />
    <AddNote />
  </ActorProvider>
</AgentProvider>
```

**Note**: A noteworthy feature of `@ic-reactor/react` that deserves special mention is its capability to streamline the management of IDL files. Traditionally, interacting with canisters on the Internet Computer requires you to manually manage IDL files (`*.did` files), which define the interface of your canisters. This can be a cumbersome process, especially in complex projects with multiple canisters.

Then you can use the `useAuth`, `useQueryCall` or `useUpdateCall` and other hooks to interact with the canister.

```jsx
import { useQueryCall, useUserPrincipal } from "@ic-reactor/react"

export const ICPBalance = () => {
  const principal = useUserPrincipal()

  const { call, data, loading, error } = useQueryCall({
    functionName: "icrc1_balance_of",
    args: [{ owner: principal, subaccount: [] }],
  })

  return (
    <div>
      <h2>ICP Balance:</h2>
      <div>
        Loading: {loading.toString()}
        <br />
        Error: {error?.toString()}
        <br />
        balance:{" "}
        {data !== undefined
          ? JSON.stringify(data, (_, v) =>
              typeof v === "bigint" ? v.toString() : v
            )
          : null}
      </div>
      <button onClick={call}>Get Balance</button>
    </div>
  )
}
```

**Creating Your Own Custom Provider**

For developers seeking even more control and customization, `@ic-reactor/react` enables the creation of your own context providers. This method is type-safe and offers the flexibility to tailor the provider according to your project's specific needs, allowing for a more customized integration with the IC.

```ts
import { createActorContext } from "@ic-reactor/react"
import { backend, canisterId, idlFactory } from "./declarations/backend"

export type Backend = typeof backend

export const {
  ActorProvider: NoteActorProvider,
  useQueryCall: useNoteQueryCall,
  useUpdateCall: useNoteUpdateCall,
} = createActorContext<Backend>({
  canisterId,
  idlFactory,
})
```

**Documentation and Examples:**

For a deep dive into all the features and to get your hands on more examples, check out [documentation](https://b3pay.github.io/ic-reactor/modules/react.html) and [examples](https://github.com/B3Pay/ic-reactor/tree/main/examples).

**Contributing:**

We welcome your feedback and contributions to the `@ic-reactor` project. If you have any questions, suggestions, or issues, feel free to reach out to us on [GitHub](https://github.com/B3Pay/ic-reactor).

---
For those who don't use React, you can still check out this thread [@ic-reactor/core](https://forum.dfinity.org/t/introducing-ic-reactor-core-streamline-your-development-on-the-internet-computer/27907) on the DFINITY forum. It's designed to streamline development on the Internet Computer, and may still provide useful tools and insights even if you're not using React.

-------------------------

jennifertran | 2024-02-28 05:01:58 UTC | #2

This looks cool. I'll have to look at it in a few days. Remember to also list it here: https://github.com/dfinity/awesome-internet-computer

-------------------------

skilesare | 2024-04-10 19:36:19 UTC | #3

Is it possible to have access to two actors in the same ActorProvider?  Maybe I'm not doing this right.

-------------------------

b3hr4d | 2024-04-10 20:06:42 UTC | #4

No its not, because each canister should have different canisterId as props on `ActorProvider`  You can use [createActorContext](https://b3pay.github.io/ic-reactor/functions/react.createActorContext.html) and wrap 2 actor on each other and use them in the same component.
Actually I recommend use `createActorContext` because strong type safety on each method.

```typescript
const { ActorProvider, useActorState, useQueryCall, useUpdateCall } = createActorContext<typeof backend>({
  canisterId,
  idlFactory, // Optional
});
```
Edit: when you use the built-in `ActorProvider` it uses latest context instances, so when using built-in `useQueryCall` will come from the latest canisterId you passed into the `ActorProvider`.

-------------------------

paulous | 2024-04-12 03:00:18 UTC | #6

In the examples  doesn't seem to be a dfx.json file available. I am not sure if you are pulling say the ledger and identity canisters or something else. Thanks!

-------------------------

b3hr4d | 2024-04-12 06:52:04 UTC | #7

Thanks for the great question! One of the unique features of ic-reactor is the flexibility it offers. You donâ€™t have to manage canisters on your own; instead, ic-reactor leverages the [CandidAdapter](https://github.com/B3Pay/ic-reactor/blob/main/packages/core/src/classes/candid/index.ts) to fetch the actor interface definition (idlFactory) directly from the canister.

The `getCandidDefinition` method exemplifies this capability. It first attempts to retrieve the Candid definition from metadata. If that fails, it falls back to a temporary hack method. Should both attempts fail, an error is thrown.

Additionally, ic-reactor provides a convenient `didTojs` method, which translates the Candid file to a JavaScript module using the [didtojs](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=a4gq6-oaaaa-aaaab-qaa4q-cai) canister. This functionality is akin to what the candid-ui employs for interacting with canisters. Kudos to @chenyan for the inspiration!

With ic-reactor, developers can enjoy a seamless development experience, whether they're building with local canisters or existing canisters already deployed on the network. This eliminates the need to worry about pulling or handling canister candid declarations, streamlining the development process.

Feel free to reach out if you have any further questions or need assistance with ic-reactor. Happy coding!

-------------------------

b3hr4d | 2024-04-14 18:19:31 UTC | #8

ðŸš€ New Example: Using Multiple Actors in a Single Component! ðŸš€

https://youtu.be/wm2F78ydQxw

I'm thrilled to share a new [example](https://github.com/B3Pay/ic-reactor/tree/main/examples/multiple-provider) I've added to ic-reactor that demonstrates a powerful capability: using multiple actors in a single React component. This feature unlocks a world of possibilities for building complex decentralized applications on the Internet Computer blockchain.

In this example, we have a React component called `Donation`, which integrates two actors seamlessly: the ICP Ledger Canister and the ICDV Donation Canister. Let's dive into the details:

```jsx
//...other staff
  const {
    call: refetchBalance,
    data: balance,
    loading: balanceLoading,
  } = useICRC2QueryCall({
    functionName: "icrc1_balance_of",
    args: [{ owner: principal, subaccount: [] }],
  })

  const {
    call: refetchAllowance,
    data: allowance,
    loading: allowanceLoading,
  } = useICRC2QueryCall({
    functionName: "icrc2_allowance",
    args: [
      {
        account: { owner: principal, subaccount: [] },
        spender: {
          owner: icdvCanisterId,
          subaccount: [],
        },
      },
    ],
  })

  const {
    call: mintFromICP,
    loading: mintFromICPLoading,
    data: mintFromICPResult,
    error: mintFromICPError,
  } = useICDVUpdateCall({
    functionName: "mintFromICP",
    onSuccess: () => {
      refetchBalance()
    },
  })

  const {
    call: approve,
    loading: approveLoading,
    data: approveResult,
  } = useICRC2UpdateCall({
    functionName: "icrc2_approve",
    onSuccess: () => {
      refetchAllowance()
      mintFromICP([
        {
          amount: BigInt(amountRef.current?.value || "0"),
          source_subaccount: [],
          target: [],
        },
      ])
    },
  })

// render data and form
```

### How It Works:

1. **Initialization**: The `Donation` component initializes and retrieves the necessary information from both canisters using hooks provided by ic-reactor context api.
2. **Balance and Allowance**: It fetches and displays the user's balance from the ICP Ledger Canister and the allowance granted to the ICDV Donation Canister.
3. **Donation Form**: Users can input the amount they want to donate and submit the form.
4. **Transaction Flow**: Upon donation submission, the component orchestrates the transaction flow seamlessly. Here's where the magic of chaining comes into play:
  * When the user initiates a donation, it first triggers the `approve` function on icp ledger.
  * Upon successful allowance, it automatically calls the `mintFromICP` function from icdv canister to mints tokens.
5. **Dynamic UI**: The UI dynamically updates to reflect the transaction status, providing real-time feedback to the user.

Happy coding! ðŸš€

-------------------------

paulous | 2024-04-13 01:48:59 UTC | #9

I am no expert but this looks really amazing for simplifying frontend.

question:
Starting a new react project with dfx would do something like. Create a new project install ic-reactor and delete dfx.json?  Or not sure of the starter setup. Could you clarify. Thanks!

-------------------------

jennifertran | 2024-04-13 05:37:05 UTC | #10

Nice work! Could you post a tweet about this? Would like to promote this update.

-------------------------

b3hr4d | 2024-04-13 06:28:38 UTC | #11

It work with dfx and declarations files even easier and faster, there is not force to delete anything just install ic-reactor and use it! 
Ic-reactor uses @dfinity/agent behind the scene so you don't have to delete that too!
You can do whatever you want, it work seamlessly with local network(II, canisters), please take a look at this [starter](https://github.com/b3hr4d/ic-rust-nextjs) or this [template](https://github.com/rvanasa/vite-react-motoko) you will get the idea.

-------------------------

b3hr4d | 2024-04-13 06:24:26 UTC | #12

Thank you, Actually this feature was available from the beginning, should I make another video for react?

-------------------------

paulous | 2024-04-14 05:51:25 UTC | #13

Thanks! I am getting there. This is great!

I was wondering if there is a way to have a local testing identity?

update:
So I pulled the II canister and used this : "http://rdmx6-jaaaa-aaaaa-aaadq-cai.localhost:4943".
instead of:

```
login({
    identityProvider: "https://identity.ic0.app",
})
```
Seems to work great.

-------------------------

b3hr4d | 2024-04-14 06:16:01 UTC | #14

Iâ€™m glad youâ€™re getting started with the library and you are absolutely right.
This function work with the @dfinity/auth-client login function behind the scene and this is the parameters [doc](https://b3pay.github.io/ic-reactor/interfaces/react.types.AuthClientLoginOptions.html).

-------------------------

paulous | 2024-04-15 05:52:26 UTC | #15

Having a bit of a hard time with the ledger canister. What is the process for getting that working locally? Not sure what `/declarations/icp-ledger.ts` does. I have the ledger canister deployed locally just not sure how best to interact with it. Can I use `useQueryCall` if `ActorProvider` has `canisterId="local_ledger_canister_id"`?

-------------------------

b3hr4d | 2024-04-15 06:20:45 UTC | #16

This is the setup you should use:
```typescript 
<AgentProvider withLocalEnv>{/*  or `withProcessEnv` that will use DFX_NETWORK .env file */}
  <ActorProvider canisterId="ryjl3-tyaaa-aaaaa-aaaba-cai">{/* replace it with your actual canisterId, also you can use `import { canisterId } from "/declarations/icp-ledger"` */}
    <ICPBalance />
  </ActorProvider>
</AgentProvider>
```
and then in the `ICPBalance` component you can use `useQueryCall` or `useUpdateCall`:
```typescript
import { useQueryCall, useUserPrincipal } from "@ic-reactor/react"
import { ICPLedger } from "./declarations/icp-ledger"
import { Principal } from "@ic-reactor/react/dist/types"

export const ICPBalance = () => {
  const principal = useUserPrincipal() as Principal

  const { call, data, loading, error } = useQueryCall<
    ICPLedger,
    "icrc1_balance_of"
  >({
    functionName: "icrc1_balance_of",
    args: [{ owner: principal, subaccount: [] }],
  })

  return (
    <div>
      <h2>ICP Balance:</h2>
      <div>
        Loading: {loading.toString()}
        <br />
        Error: {error?.toString()}
        <br />
        balance:{" "}
        {data !== undefined
          ? JSON.stringify(data, (_, v) =>
              typeof v === "bigint" ? v.toString() : v
            )
          : null}
      </div>
      <button onClick={call}>Get Balance</button>
    </div>
  )
}
```

-------------------------

b3hr4d | 2024-04-15 06:46:56 UTC | #17

My recommended approach for large-scale applications is as follows:

1. Set up ActorContext for each actor:
```typescript
import { createActorContext } from "@ic-reactor/react"
import { ledger, canisterId, idlFactory } from "declarations/ledger"

export type Ledger = typeof ledger

export const {
  ActorProvider: LedgerActorProvider,
  useQueryCall: useLedgerQueryCall,
  useUpdateCall: useLedgerUpdateCall,
} = createActorContext<Ledger>({
  canisterId,
  idlFactory,
})
```

2. wrap the application with your ActorProvider and use the hooks whenever needed. 
```typescript
// In your root component or a designated provider component
import { AgentProvider } from "@ic-reactor/react";
import { LedgerActorProvider } from "./path/to/actorContext";

function App() {
  return (
    <AgentProvider withProcessEnv>
      <LedgerActorProvider>
        {/* Your application components here */}
      </LedgerActorProvider>
    </AgentProvider>
  );
}
```

This setup is typesafe and straightforward, allowing you to use multiple hooks inside one component seamlessly!

-------------------------

_Eric | 2024-05-22 08:29:31 UTC | #18

Hello, how to make custom hooks with multiple functions when using ic-reactor/react

-------------------------

b3hr4d | 2024-05-22 08:32:52 UTC | #19

Good question :smiley: 

This is an example of `ckbtc` balance hook:
```typescript
import { useState } from "react"
import { useCKBTCLedgerMethod } from "../Provider/CKBTCLedgerProvider"
import { Principal } from "@ic-reactor/react/dist/types"

const useCkbtcBalance = (userPrincipal: Principal) => {
  const [ckBtcBalance, setCkBtcBalance] = useState(0)

  const { call: callCkBtcDecimals } = useCKBTCLedgerMethod({
    functionName: "icrc1_decimals",
  })

  const { call: callCkBtcBlance } = useCKBTCLedgerMethod({
    refetchOnMount: true,
    refetchInterval: 10000,
    functionName: "icrc1_balance_of",
    args: [{ owner: userPrincipal, subaccount: [] }],
    onSuccess: async (balance) => {
      const decimal = await callCkBtcDecimals()
      setCkBtcBalance(Number(balance) / Math.pow(10, decimal))
    },
  })

  return { ckBtcBalance, callCkBtcBlance }
}

export default useCkbtcBalance

```

-------------------------

_Eric | 2024-05-22 08:41:51 UTC | #20

Wow, thanks for the answer. I learned something new.

-------------------------

b3hr4d | 2024-05-22 08:44:27 UTC | #21

Glad to help you learn something, as you can see it will fetch the balance at mount, and will re-fetch every 10 second with this hook.
Also you have `callCkBtcBlance` in case of having refresh button!

-------------------------

_Eric | 2024-05-22 08:49:57 UTC | #22

Yes, I still have many places to use the idea you provided to me, and I will change my code. I am asking you for other doubts. :rose:

-------------------------

b3hr4d | 2024-05-22 08:51:34 UTC | #23

No problem at all! ðŸ˜Š Feel free to ask any other questions you have.

-------------------------

_Eric | 2024-05-22 09:58:08 UTC | #24

![image|521x435](upload://C9ekLp2Y3HWHXJQxbv3NOwUG7C.png)
![image|500x26](upload://u37h4UcupuADOfyx9ZuDtaO6GBI.png)
console.log(address);There's no reaction here.There's no reaction here. I see your example is that you can just initialize it and return the value.
I can't get the value for my btcAddress. Why do I have to use the call method to get the value?

-------------------------

b3hr4d | 2024-05-22 11:02:37 UTC | #25

If the method is an update call, `refetchOnMount` and `refetchInterval` will not work!
Its because of safety, you should call it manually. BTW when you deal with such a task, you dont need hook for that just call it once, then pass the result into the `component`!

-------------------------

b3hr4d | 2024-05-22 12:19:34 UTC | #26

Something like this would be a better solution in this situation:

```jsx
const CkbtcAddress = ({ userPrincipal }: { userPrincipal: Principal }) => {
  const { call, data, loading } = useCKBTCMinterMethod({
    functionName: "get_btc_address",
    args: [{ owner: [userPrincipal], subaccount: [] }],
  })

  useEffect(() => {
    call()
  }, [])

  return loading ? (
    "Getting BTC address..."
  ) : (
    <div>
      <p>BTC Address: {data}</p>
      {/* other components related to BTC address */}
    </div>
  )
}
```

And:

```jsx
const CkbtcUpdateBalance = ({ userPrincipal }: { userPrincipal: Principal }) => {
  const { call, data, loading } = useCKBTCMinterMethod({
    functionName: "update_balance",
    args: [{ owner: [userPrincipal], subaccount: [] }],
  })

  useEffect(() => {
    call()
  }, [])

  return loading ? (
    "Updating balance..."
  ) : (
    <div>
      <p>UTXOs: {jsonToString(data)}</p>
      {/* other components related to updating balance */}
    </div>
  )
}
```

-------------------------

b3hr4d | 2024-05-23 11:00:28 UTC | #27

I've created a new example called `ckBTC Wallet`! This example demonstrates how to integrate with the ckBTC ledger and minter to retrieve BTC.

### Check out the demo video:
https://youtu.be/r-J6eWcfmOQ

### You can find the source code on GitHub:
[ckBTC Wallet Code](https://github.com/B3Pay/ic-reactor/tree/main/examples/ckbtc-wallet)

### Key Component: MinterRetrieveBTC

This hooks handles the retrieval of BTC by interacting with the ckBTC ledger and minter. Here are the main parts of the component:

```typescript
  const { call: refetchBalance, data: balance, loading: balanceLoading } = useCKBTCLedgerMethod({
    functionName: "icrc1_balance_of",
    args: [{ owner: userPrincipal, subaccount: [] }],
  })

  const { call: refetchAllowance, data: allowance, loading: allowanceLoading } = useCKBTCLedgerMethod({
    functionName: "icrc2_allowance",
    args: [
      {
        account: { owner: userPrincipal, subaccount: [] },
        spender: { owner: minterCanisterId, subaccount: [] },
      },
    ],
  })

  const { call: retreiveBtc, data: retreiveBtcResult, error: retreiveBtcError, loading: retreiveBtcLoading } = useCKBTCMinterMethod({
    functionName: "retrieve_btc_with_approval",
    onSuccess: () => {
      refetchBalance()
      refetchAllowance()
    },
  })

  const { call: approve, loading: approveLoading, data: approveResult } = useCKBTCLedgerMethod({
    functionName: "icrc2_approve",
    onSuccess: () => {
      refetchAllowance()
      const amount = BigInt(amountRef.current?.value || "0")
      const address = addressRef.current?.value || ""
      retreiveBtc([{ amount, address, from_subaccount: [] }])
    },
  })

  const onSubmit = (event: React.FormEvent) => {
    event.preventDefault()
    const amount = BigInt(amountRef.current?.value || "0")
    approve([{ spender: { owner: minterCanisterId, subaccount: [] }, amount, fee: [], memo: [], created_at_time: [], from_subaccount: [], expected_allowance: [], expires_at: [] }])
  }

```

This component demonstrates how to:
- Fetch and display the ckBTC balance.
- Retrieve the allowance given to the minter.
- Approve and retrieve BTC using the provided address and amount.

Feel free to explore and adapt the code to your needs. Happy coding!

-------------------------

_Eric | 2024-06-13 03:04:19 UTC | #28

Hey buddy, I have a problem, one of my Canister calls can be called directly with Plug, but I think using ic-reactor calls will fail on load.
This is my canister dashboard:https://dashboard.internetcomputer.org/canister/ypzti-4aaaa-aaaam-ab5ia-cai
Hereâ€™s a screenshot of the error:
![image|690x260](upload://9HqadrUmF1LHoYOBmcdWbkuC82I.png)

-------------------------

b3hr4d | 2024-06-13 12:08:16 UTC | #29

Seems like you didn't attach the Candid file into the canister, as you can see on the dashboard there is no method to call! if you have the candid file just import it inside javascript and pass the `idlFactory` into the actor initialization!

This is the context example:
```typescript
import { createActorContext } from "@ic-reactor/react"
import { backend, canisterId, idlFactory } from "declarations/candid"

export type Backend = typeof backend

export const {
  ActorProvider: NoteActorProvider,
  useQueryCall: useNoteQueryCall,
  useUpdateCall: useNoteUpdateCall,
  useMethod: useNoteMethod,
} = createActorContext<Backend>({
  idlFactory, // this is important part
  canisterId,
})
```
or on the provider:
```jsx
<NoteActorProvider
  withDevtools
  idlFactory={idlFactory} // this is important part
  canisterId="xeka7-ryaaa-aaaal-qb57a-cai"
  loadingComponent={<div>Loading Note Actor...</div>}
>
  <Notes publicKey={publicKey} />
  <AddNote publicKey={publicKey} />
</NoteActorProvider>
```

-------------------------

_Eric | 2024-06-27 04:47:39 UTC | #30

hi,How should I customize the loading page?
![image|564x489](upload://s2Lt3YA0q9yRxzZHruWM7rxQ0OK.png)
And when I set it here it does override it but there's a problem.
![image|486x16](upload://hOwuEtZujF2fBtZ4PHEeH9WT34A.png)
![image|393x53](upload://lHXLJnc0ucLrNVJe7KJQs06AB6T.png)

-------------------------

b3hr4d | 2024-06-27 06:23:32 UTC | #31

Yes, You be able to pass loading component into your `ActorProvider` and `CandidAdapterProvider`. Please refer to the [documentation](https://b3pay.github.io/ic-reactor/interfaces/react.types.ActorProviderProps.html) for more details.

The error you're encountering is due to the parser. When you pass the `withParser` prop, it uses the local version. Therefore, you should install `ic-reactor/parser`, which includes a Wasm file that converts Candid files into JavaScript and more.

Alternatively, you can remove the `withParser` prop, and it will use the `candid-ui` canister from the network.

-------------------------

_Eric | 2024-06-27 10:04:57 UTC | #32

![image|387x20](upload://9aNlm0ms2GNij5piL5PgEQ0pIi3.png)
Does my CandidAdapterProvider's loadingComponent have to work with withParser? He will not take effect now.

-------------------------

_Eric | 2024-06-27 10:11:31 UTC | #33

How is this not exported?
![image|658x20](upload://6nvZR93IPInAaD9B0MoaBRTrEpk.png)
I now need to dynamically create actors using something like plug below.
![image|468x71](upload://aZjO0O6zuxv4DTyPJtngqmCtCer.png)

-------------------------

b3hr4d | 2024-06-27 11:57:15 UTC | #34

[quote="_Eric, post:32, topic:27930"]
Does my CandidAdapterProviderâ€™s loadingComponent have to work with withParser? He will not take effect now.
[/quote]
Just pass the loadingComponent inside `ActorProvider`:
```javascript
<ActorProvider loadingComponent={<>Loading...</>}>
```
---

[quote="_Eric, post:33, topic:27930"]
How is this not exported?
[/quote]

Its exported!
```javascript
import { useInitializeActor } from "@ic-reactor/react"
```
and can be used like this:
```javascript
  const initializeActor = useInitializeActor()

// use it inside useEffect
  useEffect(() => {
    initializeActor(idlFactory)
  }, [initializeActor])

// or inside button
<button onClick={()=> initializeActor(idlFactory) >Initialize Actor</button>
```
I'm not sure how u can use `plug` here!

-------------------------

_Eric | 2024-06-28 01:08:06 UTC | #35

Thanks, my version is not updated. Previously using 1.7.6 without exporting this.

-------------------------

