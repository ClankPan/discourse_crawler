borovan | 2022-12-15 10:54:50 UTC | #1

Hi everybody, quick question.  Basically, how do I use Result.flatten properly?

I have a LoadResult that uses Result.Result 

![image|690x405](upload://ehOnFADsjwSmS7iRi8NiYWE888H.png)

but then it gets called from a higher level that also has it's own error 

![image|690x194](upload://vxEmd7iVEn9RAbmU8ns17qYRDOt.png)

What's the best practice to not end up with #ok(#ok(#ok(#err etc..

What I'd like to happen is that when I return #ok(Entity.load) it can tell if there's an error and instead of #ok(#err) it's just #err.  I tried using flatten but I'm just not sure what the best practice is there, what if I add more layers?  Do I just recursively flatten at the top level (actor) or flatten all the way up?

Thanks!

-------------------------

borovan | 2022-12-15 11:07:44 UTC | #2

If I just return Entity.load that does fix the problem...

But since #ok()  and #ok(#ok()) are both valid return types, I guess what im asking is how do I stop errors creeping through as I refactor code.  I need something that ensures it's always flattened and the compiler catches if it isnt.

-------------------------

paulyoung | 2022-12-15 16:08:53 UTC | #3

I’m short on time right now but my intuition says to use `Result.chain` which “short-circuits” the first time you get an `#err` or calls the next function that takes the argument from `#ok` and also produces a `Result`.

-------------------------

skilesare | 2022-12-15 20:16:37 UTC | #4

This is working for us:

We really just don't let that happen.  Any function that returns a Result is handled.  We have a standard Error object that has some data that can be passed on and incorporated in the next error.  With this pattern we just don't end up with that scenario because nothing that is in a result ever returns a result in #ok.

https://github.com/ORIGYN-SA/origyn_nft/blob/0.1.2/src/origyn_nft_reference/market.mo#L321

As an aside, Kusanagi has a key word called matchr that makes handling returning errs much easier:

```
let result  = matchr(my_function(), val, return #err("info")

compiles to 

let result = switch(myfunction()){
     case(#ok(val)){val};
     case(#err(err)){return #err(err)}};
```

-------------------------

