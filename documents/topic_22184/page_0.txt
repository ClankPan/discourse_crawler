borovan | 2023-08-16 09:20:51 UTC | #1

Hi all, wanted to share v1 of our indexing system.  It's written in Rust and uses the ic-stable-structures crate.  This is going to be part of the Dragginz ORM that we'll open source at some point (probably about 6 months away i think.)  Feel free to criticise, I probably don't know what I'm doing.

**Step 1 : Define the Entity, I'll show a complicated one...**

![image|574x335](upload://7lREoTfqf2dLJOYSiQ7mUHWI5t0.png)

You can have multiple indexes, they can be on any combination of fields (but not those named as primary/sort keys).  There's one optional argument for now, unique.

The API uses a CompoundKey which is a Vec<String>, for example ["character_id", "pet_id"].  The database itself uses a SortKey however, so ``` Character=123/Pet=456 ``` so we can do range queries and pull parent and child data in the same call.  Thanks @icme 

**Step 2 : CTOR all the things**

![image|680x500](upload://5n97vw8Gbjll6jsnh8FNj2hsqhH.png)

Every entity/newtype/set/map/list/whatever in our ORM gets sent via ctor to a schema.  This structure is serialized to a file so that the front-end can use it, but wait ...

**Step 3 : Schema goes into memory via crude hack**

![image|406x139](upload://v1yOoHeg7BS2s2Tkti5vQmWlEcI.png)
![image|690x134](upload://uX2zbg64AmbGjehmkcWHCLrPPN1.png)

This is the awesome bit.  Json goes into file via a build script, and we can read it using the include_str! macro and Arc allows us to share a pointer around the ORM.

**Step 4 : CRUD**

![image|690x381](upload://nbFf1kLzu1SpLO4yit1PksHmGul.png)
![image|690x276](upload://uRhjG0eEVWq76rybB6kgjctXpwa.png)

The pre-build Schema puts in an automatic crud endpoint for every entity within a canister.  We did think about using a variant that represents every entity but the code got really messy.

**Step 5 : The Store**

![image|450x500](upload://jjjZ5sqKnDbhQzHX95MhzLIe8vA.png)

The Store requires two stable memories and has a reference to the Schema which knows what entities have which indexes.

As we may be sending types to the front-end we need to generate candid for them, so all the types (even ones used internally via the ORM are defined in the Schema).

![image|368x500](upload://b3AgtEbPrp0ahJeZPOt60CW6LUd.png)

**Step 6 : The Candid**

![image|661x500](upload://ahb1QLbkAhdRYbeKT3ZTcfOAVRj.png)

All automatically generated by the schema!

**Step 7 : The Query**

We use a WhereQuery structure that allows us to do pagination, ranges, and most importantly indexes.

![image|690x383](upload://kX6F5RgwFEMyDLyVS3FHu63kky7.png)

Why do we need this?  One of the use-cases is a loot table where you have to keep pulling rows using different criteria.

![image|690x438](upload://yJi6T0WMzXNGejuLgvULBUSlshE.png)

Indexes can get out of date if the schema changes, so the system is designeed to allow dropping and rebuilding of index data.

**Step 8 : Testing**

![image|690x467](upload://vhfO1j5RHGOaRDynXmvBFrxwmHW.png)

Here you can see the API in action.  We have to run the tests via an endpoint because stable-structures exists within Wasm.

I will be in Zurich in September to show people what we've been working on.  Feedback appreciated, I'm cool if I have to write the whole thing from scratch, just want it to be as good as it can be.

-------------------------

borovan | 2023-08-16 09:30:14 UTC | #2

More information on the ORM... here are the "shapes / types" we support : 

![image|551x411](upload://aBFDKOFOCn3JbA7LTHJwaGmoSu7.png)

Map is a HashMap, Set a HashSet and List is a Vec.  This allows us to do cool stuff like ItemAttributes, where each Item can have a maximum of one Attribute per type.

![image|449x500](upload://suLGnddGMMGkt7SMq4vkXixzuSU.png)

Perfect for extremely complicated game design!

All Enums automatically derive a trait where you can do

```
fn variant_name() -> String
```

and that's used as the Hash bound for the HashSet

-------------------------

