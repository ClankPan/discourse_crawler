lukevoz | 2022-10-19 09:47:06 UTC | #1

Hello,

I've been messing around with the new HTTP outcalls feature and the examples that I found online, mainly the Coding with @kpeacock [proxy sample project](https://github.com/krpeacock/motoko-outcalls-proxy).

I have a question – when my HTTP call gets a response in JSON, such as [this one](https://jsonplaceholder.typicode.com/posts/1), is there a way in Motoko to assign it into a variable typed as this one?

``` 
type User = {
    userId : Nat8;
    id : Nat8;
    title : Text;
    body : Text;
};
```
Or do I have to parse values from the JSON as a text manually as is presented in [this sample code](https://github.com/dfinity/examples/blob/60bc8ce42902104fd3b8932d86e889a40f2bb43c/motoko/exchange_rate/src/Main.mo#L284)?

Thanks a lot for help.

-------------------------

Severin | 2022-10-19 09:58:02 UTC | #2

Some searching on the interwebz produced this link: https://github.com/aviate-labs/json.mo, but I have not tried it myself. Let us know if it works!

-------------------------

Kyan | 2022-10-19 20:24:45 UTC | #3

I have encountered the same problem without having found a ready-made solution. So I wrote a parser that allows me to recover the value of a json object. It works in my use case but you can use it as inspiration :

```
public func parseValue(json : Text, obj : Text) : async Text {
        var r : Text = "";
        let b : Buffer.Buffer<Text> = Buffer.Buffer(1);
        for (e in Text.split(json, #text "[")) {
            if (Text.contains(e, #text obj)) {
                for (o : Text in Text.split(e, #text "{")) {
                    var j : Text = Text.replace(o, #text "}", "");
                    j := Text.replace(j, #text "]", "");
                    if (Text.endsWith(j, #text ",")) {
                        j := Text.trimEnd(j, #text ",");
                    };
                    for (f : Text in Text.split(j, #text ",")) {
                        if (Text.contains(f, #text obj)) {
                            for (t : Text in Text.split(f, #text ":")) {
                                switch (Text.contains(t, #text obj)) {
                                    case (false) {
                                        b.add(Text.replace(t, #text "\"", ""));
                                    };
                                    case (true) {};
                                };
                            };
                        };
                    };
                };
            };
        };
        r := b.get(b.size() - 1);
        return r;
    };
```

-------------------------

lukevoz | 2022-10-19 20:31:31 UTC | #4

Thank you @Severin! I tried to work this module out and I can now confirm that this allows me to parse JSON object from text and then access individual values inside and construct the User type. It still requires more writing than I expected and took me some time to work this out. But I guess this is the best available option for now.

-------------------------

Kyan | 2022-10-20 07:27:34 UTC | #5

Small piece of morning code with a more complex json structure : 
[Motoko playground - Get Json key value](https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=1496604579)

-------------------------

lukevoz | 2022-10-20 15:04:45 UTC | #6

Thank you @Kyan, this is also interesting. I was aware of that I could parse it manually, I guess was just lazy to do it myself and was looking for easier way :). Thanks a lot for sharing this.

-------------------------

paulyoung | 2022-12-15 08:07:33 UTC | #7

Cross-posting visibility, and because I think it’s such an elegant solution:

https://forum.dfinity.org/t/how-can-i-convert-a-text-like-bitcoin-usd-18053-8-into-an-object-or-vector-that-i-can-use-programatically/17416/5?u=paulyoung

https://github.com/NatLabs/serde

```
import serdeJson "mo:serde/JSON";
    
type User = {
    name: Text;
    id: Nat;
};

let blob = serdeJson.fromText("{\"name\": \"bar\", \"id\": 112}");
let user : ?User = from_candid(blob);

assert user == ?{ name = "bar"; id = 112 };
```

-------------------------

lukevoz | 2022-12-15 09:07:58 UTC | #8

Looking great! Thanks, Paul.

-------------------------

tomijaga | 2022-12-16 18:05:26 UTC | #9

I'm glad you think so!

-------------------------

