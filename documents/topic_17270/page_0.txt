kentosugama | 2022-12-10 11:09:28 UTC | #1

![Motoko logo CYMK|653x500, 75%](upload://cWrfwv6QyRd5l82yJIEj4qKdcBu.jpeg)

# Motoko Weekly Update Part 2!

Hey Motoko Devs,

The languages team is back with a second weekly update to keep you guys in sync with what we‚Äôre working on for Motoko. You can check out our previous post [here](https://forum.dfinity.org/t/highlight-post-new-motoko-features-in-dfx-0-12/17027).

As a recap, last time we talked about the new record extension syntax, extended buffer class, and teased the generational GC that will be coming in the next release of `dfx`.

## ![|624x221](upload://fqUkH9QAPxBwuu7ZV1CNRW6VabM.png)Generational Garbage Collector now Available on the Motoko Playground!

The new generational garbage collector (GC) has been deployed to the [Motoko Playground](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/) (thanks to @chenyan)! If you‚Äôre curious to try out the new system, this is a great way to try it out before the official release in the next version of `dfx`.

As a reminder, generational garbage collection allows more efficient management and cleaning of your Motoko program‚Äôs heap space. This helps, primarily, with reducing cycle costs for your canisters and avoiding the cycle limit per message on particularly heavy computation.

Our internal testing shows that this new garbage collector is more performant than the existing two collection strategies in most situations, but @luc-blaeser (the team member responsible for this new feature) is interested in real world metrics. If you're interested in benchmarking and stress-testing Motoko, throw this new collection strategy at your canisters and send us any metrics you find interesting :)

## ![|643x91](upload://sN81tnDPqJWaXdztQhMBHVbxnYI.png)

## Teaser: Efficient Async Await

We are adding a new feature to Motoko: `async*` and `await*`!

This new type and operator lets you abstract out asynchronous code without having to send an inter-canister message (and thus suspend execution and go through the scheduler)!

This feature is not yet shipped with `dfx`, but is available on the playground and the most recent release of `moc`.

Example:

Let‚Äôs say you have a function that divides two numbers, doubles the sum, and returns the answer. Let‚Äôs also assume that your canister publicly exposes this function for other canisters to call, and so it has an asynchronous type.

```
public func foo(number1 : Nat, number2 : Nat) : async Nat {
  if (number2 == 0) {
    throw Error.reject "Cannot divide by zero";
  };
  (number1 / number2) * 2
};
```

Now, for the sake of convoluted examples, let‚Äôs say you want to pull out the division and the error checking to a helper function. Something unfortunate happens.

```
func divide(number1 : Nat, number2 : Nat) : async Nat {
  if (number2 == 0) {
    throw Error.reject "Cannot divide by zero";
  };
  number1 / number2
};

public func foo(number1 : Nat, number2 : Nat) : async Nat {
  (await divide(number1, number2)) * 2
};
```

Even though the `divide` function is a local helper, it needs to be declared with an `async` type to throw the reject. This means that when it is called and the result is `await`ed on, the canister actually pauses execution and sends a message (to itself‚Ä¶) to invoke this call. Not very efficient, especially if you have a lot of async calls like this.

But it‚Äôs okay. Just add a `*` to everything. The compiler will take care of the rest.

```
func divide(number1 : Nat, number2 : Nat) : async* Nat {
  if (number2 == 0) {
    throw Error.reject "Cannot divide by zero";
  };
  number1 / number2
};

public func foo(number1 : Nat, number2 : Nat) : async Nat {
  (await* divide(number1, number2)) * 2
};
```

Now, the helper is called locally, and you take no performance hit for pulling out code from async functions to helpers!

Note: There is a bit more detail to this feature than what we covered so far. In a nutshell, this feature avoids context switches at the expense of less commit points; your code may behave differently with traps and concurrent messages. Please be mindful of this tradeoff and difference between this feature and the `async` / `await` that you are used to. As we gather feedback on this new feature from users, we may make changes in future versions of Motoko. If you want to see the full discussion, you can check it out [here](https://github.com/dfinity/motoko/pull/3609).

# See you next time!
We'll be back with more features and updates :slight_smile: 

‚Äì DFINITY Languages team.

-------------------------

icme | 2022-12-14 07:30:21 UTC | #2



![Excited GIFs - Find & Share on GIPHY](upload://pS0ns76KdZYTF48Bjv2No9BJL9P.gif)

These features are huge for the scalability of Motoko - both in terms of improvements to heap storage (GC), and message load (output queues). So nice that they came together in the same release.

-------------------------

bitbruce | 2022-12-15 05:54:27 UTC | #3

[quote="kentosugama, post:1, topic:17270"]
The new generational garbage collector (GC) has been deployed to the [Motoko Playground](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/) (thanks to @chenyan)! If you‚Äôre curious to try out the new system, this is a great way to try it out before the official release in the next version of `dfx`.
[/quote]

Any further explanation about Generational GC?

-------------------------

skilesare | 2022-12-15 06:02:32 UTC | #4

[quote="kentosugama, post:1, topic:17270"]
Please be mindful of this tradeoff and difference between this feature and the `async` / `await` that you are used to
[/quote]

One thing that is not different, is it if you call await star you probably need to assume that a consensus check could've happened and recheck your variables after whatever return you get. Obviously, if the internal code doesn't do any awaits, this won't occur, but especially in instances where you don't know if an await will happen or not, make sure you reverify any loaded state after the await star.

-------------------------

kentosugama | 2022-12-15 18:22:03 UTC | #5

Once the feature is released in a `dfx` release, I will post a more detailed explanation going into details.

-------------------------

Severin | 2022-12-15 18:26:49 UTC | #6

dfx 0.12.2-beta.0 contains Motoko 0.7.4. Does that include these changes already?

-------------------------

icme | 2022-12-15 18:27:02 UTC | #7

I‚Äôd love to see some more documentation and examples on the pitfalls of async/await* when it comes out eventually - seems like there‚Äôs a few edge cases to consider to insure the intended application behavior is implemented.

-------------------------

LightningLad91 | 2022-12-15 18:27:15 UTC | #8

This is awesome! Thanks to the team üôè

-------------------------

kentosugama | 2022-12-15 18:52:33 UTC | #9

It does! I am planning on waiting for the full release

-------------------------

timo | 2022-12-15 20:04:41 UTC | #10

[quote="skilesare, post:4, topic:17270"]
One thing that is not different, is it if you call await star you probably need to assume that a consensus check could‚Äôve happened and recheck your variables after whatever return you get. Obviously, if the internal code doesn‚Äôt do any awaits, this won‚Äôt occur, but especially in instances where you don‚Äôt know if an await will happen or not, make sure you reverify any loaded state after the await star.
[/quote]

Not sure if I understand. Is what you say specific to `async*`? I mean isn't it true that for any internal function that you call, that if you don't know what happens internally then there could be an `await` happening inside?

-------------------------

skilesare | 2022-12-15 20:26:37 UTC | #11

[quote="timo, post:10, topic:17270"]
I mean isn‚Äôt it true that for any internal function that you call, that if you don‚Äôt know what happens internally then there could be an `await` happening inside?
[/quote]

Not if the function isn't tagged with an async return type.  You can't put an await in there unless you have an async...the compiler yells at you.

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2474467952

-------------------------

timo | 2022-12-16 07:52:07 UTC | #12

Ok, right. So then the difference is only that it can be more efficient (avoid some self-calls) but otherwise, as you say, one has to code like it was an `await` (non-starred).

-------------------------

inviscidpixels | 2023-01-12 16:46:50 UTC | #13

Are there any examples available showing how using this would definitely cause an issue?

-------------------------

ZenVoich | 2023-03-23 13:11:15 UTC | #14

```
    public func foo() : async* Nat {
      await anotherCanister.get();
    };

    public func bar() : async Nat {
      await* foo();
    };
```

Does the `*` make sense in this example if there is a call to another canister? (when calling `bar`)

-------------------------

claudio | 2023-03-24 06:11:08 UTC | #15

Not had my morning coffee yet, but yes, this makes sense and means 'bar()' only does one suspension at the 'await' inside 'foo()'.

-------------------------

