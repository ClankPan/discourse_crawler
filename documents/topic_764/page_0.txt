cryptoschindler | 2020-06-24 10:33:07 UTC | #1

I just stumbled on this in the docs! We now have a package manager for motoko :seedling:

https://github.com/kritzcreek/vessel

-------------------------

senior.joinu | 2020-06-24 11:27:10 UTC | #2

It would be cool if someone also manage to implement something like a "canister registry" where you can find a canister that does something that you need and already populated with data from other canisters using it.

-------------------------

KevLoui | 2020-06-24 11:56:12 UTC | #3

Maybe we can make one?

-------------------------

Ori | 2020-06-24 16:29:53 UTC | #4

That’s strange timing—I‘m just building something like that, it should be ready for Tungsten!

-------------------------

Ori | 2020-06-26 08:41:46 UTC | #5

Any features that might be particularly useful? Essentially going for something that’s of use to us all here for tungsten. 

(Slight thread hijack going on here, sorry Moritz!)

-------------------------

senior.joinu | 2020-06-26 09:00:32 UTC | #6

As a guy who wants to share a canister I'd expect a UI where I can save some information about my deployed canister (name, `canisterId`, some docs). Maybe it would be useful to be able to also upload a `.did` file of my canister and see some automatically generated API spec for it. It would be also useful to force canisters to have some `healthcheck` function and periodically check for their availability.

As a guy who wants to use some of shared canisters I'd like to search for key words, find something that is popular, get the `canisterId` and download it's `.did` file (so I could generate client-code by myself).

What do you think?

-------------------------

Ori | 2020-06-26 09:14:58 UTC | #7

Pretty close to my thinking, ok thanks, great input. I like the healthcheck idea, on this I was wondering how much devs would want to muddy their IDLs with additional functions like this? A healthcheck’s probably ok, since it’s generally useful to have.

-------------------------

morrolan | 2020-08-28 12:18:32 UTC | #8

Does any of you have a sane way of using vessel when building an IC canister by means of `dfx build`?

The way (recent versions of) Vessel seem to work, is that it (via `vessel sources`) provides a set of additional flags to pass to `moc` - similar to how you'd eg link a library with `gcc`.

However when building an IC canister, it doesn't seem intended (nor reasonable) to call `moc` directly. Rather one uses `dfx build`, which will call `moc` internally.

-------------------------

kritzcreek | 2020-08-28 17:19:20 UTC | #9

You can tell dfx to call `vessel` by changing `defaults->build->packtool` to `vessel sources` in your `dfx.json`. I'm in the process of properly documenting the `dfx + vessel` workflow.

-------------------------

morrolan | 2020-08-28 17:28:26 UTC | #10

Oh, that's great! Thanks for the heads-up. Looking forward to the updated docs on that part, then. :slight_smile:

-------------------------

gajendraks | 2022-02-24 00:30:12 UTC | #11

@here @ggreif @matthewhammer 
As @kritzcreek is not maintaining this anymore, please can anyone of you update `dfx + vessel` workflow.

Happy to contribute if you guide me.

-------------------------

ggreif | 2022-02-24 13:22:03 UTC | #12

There is https://github.com/dfinity/vessel/releases/tag/v0.6.3 now. Please check if it is working for you. We are happy to review PRs that improve the interplay.

-------------------------

ggreif | 2022-06-22 08:17:10 UTC | #13

I made a pre-relase https://github.com/dfinity/vessel/releases/tag/v0.6.4 to address an issue with recent Linuxen, namely the lack of `openssl-1.1.1`. Functionally it is identical, but I am interested to hear feedback (esp. from owners of freshly installed machines), so that I can finalise the release.

-------------------------

