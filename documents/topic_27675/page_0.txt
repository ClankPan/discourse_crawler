HelloRickey | 2024-02-19 08:53:39 UTC | #1

If I sign with Ethereum's private key and then send it to canister, how can I verify it with motoko.

-------------------------

rvanasa | 2024-02-19 16:58:39 UTC | #2

Hi! There are at least two possible ways to do this:

* The [evm-txs.mo](https://github.com/av1ctor/evm-txs.mo) library implements a `Helper.getRecoveryId()` function as shown in [this test case](https://github.com/av1ctor/evm-txs.mo/blob/28cfc1b3ca8ccb238001456ce33876441aeba5a7/test/sync/Transaction.test.mo#L14). This can be used to verify an ECDSA signature. Note that I would be wary of using this in production until this library undergoes a security audit. 

* The [ic-eth-starter](https://github.com/dfinity/ic-eth-starter) project includes a Rust canister with a `verify_ecdsa` method ([source code](https://github.com/dfinity/ic-eth-starter/blob/1b05557be9f7f521d3001668d2929619bae54681/canisters/ic_eth/src/lib.rs#L23)). This uses the secure and widely used [ethers-core](https://crates.io/crates/ethers-core) Rust package but requires some setup to be able to call this canister from your project. 

Hopefully one of these solutions ends up working for you! I am currently also building [a tool which makes it easier to use Rust libraries in Motoko](https://github.com/rvanasa/canpack), but it's too early in development for me to recommend quite yet (as of February 2024).

-------------------------

