mindfulanon | 2022-10-08 12:51:28 UTC | #1

Hey, 

my Website looks properly when i use the localhost url but when i try to use the canister link after deploying on icp im getting this error:

For the url with raw i get: not found (https://canisterid.raw.ic0.app)
For the url without raw i get: Body does not pass verification (https://canisterid.ic0.app/)


Im also getting this Warn when using dfx start 

```
WARN s:dt5ov-gsien-fcmqs-7nywi-tq5hw-loy5l-bqyvw-xpqno-wdoiq-assbv-hae/n:ysumc-ng35i-ekdaw-vkzb7-zvsna-lwkke-cnti3-rkn3e-wmdtu-7rcia-bae/ic_consensus/consensus starvation detected: Finalizer has not been invoked

WARN s:dt5ov-gsien-fcmqs-7nywi-tq5hw-loy5l-bqyvw-xpqno-wdoiq-assbv-hae/n:ysumc-ng35i-ekdaw-vkzb7-zvsna-lwkke-cnti3-rkn3e-wmdtu-7rcia-bae/ic_consensus/consensus starvation detected: Notary has not been invoked
```

How can i solve this?

-------------------------

peterparker | 2022-10-08 12:53:10 UTC | #2

[quote="mindfulanon, post:1, topic:15803"]
For the url with raw i get: not found (https://canisterid.raw.ic0.app)
For the url without raw i get: Body does not pass verification (https://canisterid.ic0.app/)
[/quote]

Are these just example?

What's the effective canister ID of your website?

`https://<here the effective canister id>.ic0.app`

-------------------------

mindfulanon | 2022-10-15 12:01:50 UTC | #3

I deleted the canister and I tried to set up my website in a new environment. That means I put all my website files in a new ic project on a new canister, but I get this error now:

![grafik|690x290](upload://1vvarBaAG0sEVtnrhEUp6BAi6Ez.png)

-------------------------

mindfulanon | 2022-10-15 12:05:00 UTC | #4


[details="Webpack"]
```
const path = require("path");
const webpack = require("webpack");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const TerserPlugin = require("terser-webpack-plugin");

function initCanisterEnv() {
  let localCanisters, prodCanisters;
  try {
    localCanisters = require(path.resolve(
      ".dfx",
      "local",
      "canister_ids.json"
    ));
  } catch (error) {
    console.log("No local canister_ids.json found. Continuing production");
  }
  try {
    prodCanisters = require(path.resolve("canister_ids.json"));
  } catch (error) {
    console.log("No production canister_ids.json found. Continuing with local");
  }

  const network =
    process.env.DFX_NETWORK ||
    (process.env.NODE_ENV === "production" ? "ic" : "local");

  const canisterConfig = network === "local" ? localCanisters : prodCanisters;

  return Object.entries(canisterConfig).reduce((prev, current) => {
    const [canisterName, canisterDetails] = current;
    prev[canisterName.toUpperCase() + "_CANISTER_ID"] =
      canisterDetails[network];
    return prev;
  }, {});
}
const canisterEnvVariables = initCanisterEnv();

const isDevelopment = process.env.NODE_ENV !== "production";

const frontendDirectory = "websitetwo_frontend";

const frontend_entry = path.join("src", frontendDirectory, "src", "index.html");

module.exports = {
  target: "web",
  mode: isDevelopment ? "development" : "production",
  entry: {
    index: path.join(__dirname, frontend_entry).replace(/\.html$/, ".js"),
  },
  devtool: isDevelopment ? "source-map" : false,
  optimization: {
    minimize: !isDevelopment,
    minimizer: [new TerserPlugin()],
  },
  resolve: {
    extensions: [".js", ".ts", ".jsx", ".tsx"],
    fallback: {
      assert: require.resolve("assert/"),
      buffer: require.resolve("buffer/"),
      events: require.resolve("events/"),
      stream: require.resolve("stream-browserify/"),
      util: require.resolve("util/"),
    },
  },
  output: {
    filename: "index.js",
    path: path.join(__dirname, "dist", frontendDirectory),
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: path.join(__dirname, frontend_entry),
      cache: false,
    }),
    new webpack.EnvironmentPlugin({
      NODE_ENV: "development",
      ...canisterEnvVariables,
    }),
    new webpack.ProvidePlugin({
      Buffer: [require.resolve("buffer/"), "Buffer"],
      process: require.resolve("process/browser"),
    }),
  ],
  // proxy /api to port 8000 during development
  devServer: {
    proxy: {
      "/api": {
        target: "http://127.0.0.1:8000",
        changeOrigin: true,
        pathRewrite: {
          "^/api": "/api",
        },
      },
    },
    static: path.resolve(__dirname, "src", frontendDirectory, "assets"),
    hot: true,
    watchFiles: [path.resolve(__dirname, "src", frontendDirectory)],
    liveReload: true,
  },
};
```
[/details]



[details="Index.js"]
```
import ReactDOM from "react-dom";
import React from "react";
import App from "./components/App.jsx";

const init = async () => {};

ReactDOM.render(<App />, document.getElementById("root"));

init();
```
[/details]


I have a feeling it has something to do with the Path. I already tried to change a few things on the webpack and also to use an auto generated one. I tried a lot, also looked on stackoverflow but I just can't solve it. Is there anyone who knows where the error is and can help? Thank you!

-------------------------

peterparker | 2022-10-15 12:44:25 UTC | #5

Maybe try brick by brick? A sample project works out so it should be something that you added afterwards. Maybe a typo or a dependency not installed or configured?

-------------------------

