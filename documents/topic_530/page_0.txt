Mike_DFN | 2020-03-09 22:29:56 UTC | #1

Hello everyone, V0.5.3 of the SDK is now available for download! 

## Highlights of whatâ€™s new in 0.5.3

The 0.5.3 release includes the following new features and capabilities:

* Web interface for testing canisters.

To access, with the default  `dfx.json`  setup, you can access  `127.0.0.1:8000/candid?canisterId=ic:your_canister_id` .

* Bootstrap server shows error messages for a non-existent canister ID.
* The  `replica`  will now use a random port.

Previously, you could set the port of the web server with a fixed port for  `replica` . The  `replica`  is now set to a random port so that you can run two  `dfx start`  in separate projects without a clash.

## Issues fixed in this release

This section covers the issues fixed in this release. The 0.5.3 release includes the following fixes to reported issues:

* Fix the single return value type on query function in Javascript userlib.
* The canister list when running  `dfx build`  will no longer be randomized.

## Known issues and limitations

This section covers any known issues or limitations that might affect how you work with the DFINITY Canister SDK in specific environments or scenarios. If there are workarounds to any of the issues described in this section, you can find them in the [Troubleshooting](https://sdk.dfinity.org/docs/release-notes/sdk-release-notes.html#troubleshooting.html) section.

The 0.5.3 release includes the following known issues and limitations:

* There is a breaking change to Motoko which removes definitions like  `debugPrint` ,  `abs`  and  `range`  from the default scope. You now have to import them through the Motoko standard library.

For help with importing from the standard library, check out [this section](https://sdk.dfinity.org/language-guide/index.html#intro-stdlib) of the Motoko language reference and also the [phonebook tutorial](https://sdk.dfinity.org/developers-guide/tutorials/phonebook.html).

* Float support in the Motoko programming language that is compiled to WebAssembly.

Although Motoko recognizes floating point numbers, there are some limitations related to the deterministic requirements of the Internet Computer that can create issues when compiling Motoko source code that includes floating point data types into WebAssembly for deployment. To simplify the development of test and demonstration programs that run on the current 0.5.3 release, you should avoid using Float data types for now.

* Using fixed-length Word data type arguments when running  `dfx`  commands.

Fixed-length Word32 data types are not yet supported in the  `dfx`  command-line interface. As an alternative, you can convert integers to Word32 using the standard library function  `int32ToWord32(intToInt32(value))`  until the support for fixed-length Word32 and Nat32 data types is added.

-------------------------

Mike_DFN | 2020-03-24 18:32:55 UTC | #4



-------------------------

