jorgenbuilder | 2021-09-18 02:02:48 UTC | #1

Was running into the following error:

```
Uncaught (in promise) Error: Attempt to hash a value of unsupported type: dslea-eiaaa-aaaae-aaa3a-cai
    at hashValue (request_id.js?62bc:59)
    at eval (request_id.js?62bc:89)
    at Array.map (<anonymous>)
    at requestIdOf (request_id.js?62bc:87)
    at DelegationIdentity.transformRequest (delegation.js?f4b4:208)
    at HttpAgent.query (index.js?0682:170)
    at async caller (actor.js?126c:155)
```

The cause seems to be here:

```
// Line 30 of @dfinity/agent/esm/request_id.js
else if (value instanceof Principal) {
    return hash(value.toUint8Array());
}
```

I believe 0.10.0 added a new parameter `_arr` to the `Principal` class, so this `value instanceof Principal` returns falsy. Maybe @dfinity/agent should do a different check, like `value.hasOwnProperty(toUint8Array)` which would be less error prone here.

-------------------------

jorgenbuilder | 2021-09-18 08:18:32 UTC | #2

Actually, this isn't a version mismatch problem. With uniformly versioned `@dfinity/agent@0.10.0` across all of my dep's, I was still seeing this error. The error is the result of `(value instanceof Principal)` returning falsy when the value and the Class being compared reach across npm dependencies. It seems to be the case that we end up with two unique initializations of the Principal class. Javascript object equality is based on location in memory, not a structural comparison. 

`@dfinity/agent` should not use the instanceof operator. I'm sure this is causing issues right now for more people than just myself ðŸ˜¬

This stack overflow offers some insight: https://stackoverflow.com/questions/46618852/require-and-instanceof/46630766

And this SO details an interesting solution: https://stackoverflow.com/questions/41587865/using-instanceof-on-objects-created-with-constructors-from-deep-npm-dependenci

It looks like someone might have been aware of this limitation, because the `_isPrincipal` parameter already exists on the `Principal` class and it does the job just fine. Perhaps it was deprecated for some other reason? ðŸ¤”

-------------------------

jorgenbuilder | 2021-09-28 23:17:07 UTC | #3

I do think this should be patched by Dfinity but if you're running into issues, you can also patch the dependencies yourself. I did that in [this commit](https://github.com/aviate-labs/dots/commit/136575e21b10015932916f8e3f2b3d3c5dc2f7d5) using the `patch-package` npm.

-------------------------

kpeacock | 2021-09-28 23:27:01 UTC | #4

I'll try to get a fix for this into the next version of agent-js

-------------------------

Litzi | 2021-09-29 09:39:44 UTC | #5

I've created a PR fixing that. Not sure if what I did is the best solution. Feedback appreciated:

https://github.com/dfinity/agent-js/pull/501

-------------------------

aramakme | 2021-09-29 10:37:12 UTC | #6

Wish I'd found this yesterday before beating my head against a wall for four hours!  I suggested a bit of a different branch that looked for the _isPrincipal variable...I think your is simpler! But here it is in case it is worthwhile:

https://github.com/dfinity/agent-js/issues/496

-------------------------

anthonymq | 2021-11-04 19:35:34 UTC | #7

Hi everyone, is the problem solved ? If yes with which versions ?
I also spent some hours on this ðŸ¤£ should have searched on the forum before

-------------------------

jorgenbuilder | 2021-11-05 18:08:08 UTC | #8

Not sure if the module has been updated, but you can patch it manually using the method I shared: https://github.com/aviate-labs/dots/commit/136575e21b10015932916f8e3f2b3d3c5dc2f7d5

-------------------------

kpeacock | 2021-11-16 17:35:11 UTC | #9

The version mismatch issue is resolved in `@dfinity/agent` starting in 0.10.1.

-------------------------

