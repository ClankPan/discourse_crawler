diegop | 2021-11-17 04:41:36 UTC | #1

I am working on the easy-to-follow version, but I thought I would at least put the basic steps for the more technical of you. 

Caveat: these are my own personal notes and not very user-friendly.


# 1. [ ] Create a neuron with a dissolve delay and link itg to dfx (you do this step only once)

* I created this neuron using keysmith quill and dfx

a. [ ]  Install the [keysmith](https://github.com/dfinity/keysmith): 
b. [ ] Create seed phrase: `$ keysmith generate -o seed.txt`
c. [ ] Create private.pem: `$ keysmith private-key -o private.pem`
d. [ ] Create Ledger account: `$ keysmith account -i 0`

## 1.1.  [ ] Install that key into dfx and create an identity (in my case it was called "proposals") on dfx:

a. [ ] `$ dfx identity import proposals private.pem` 
 * If you see “creating identity: proposals” in the terminal, this means it worked*
* further reading on dfx identities: https://smartcontracts.org/docs/developers-guide/cli-reference/dfx-identity.html

## 1.2  [ ] Find the public IDs on [quill](https://github.com/dfinity/quill) and dfx to ensure the principals are the same

a. [ ] With quill installed, go to: `$ target/release/quill --pem-file private.pem public-ids`
b. [ ] `$ dfx --identity proposals ledger account-id`

## 1.3  [ ] Send at least 1 ICP to the account in 1.2 (to create the neuron)

## 1.4 [ ] Now that your account has ICP, use quill to spawn a neuron
`$ target/release/quill  --pem-file private.pem neuron-stake --name $NAME --amount $AMOUNT > message.json`
`$ target/release/quill send message.json`

* this spawned neuron: `148885932052941245`

## 1.5 [ ] Increase neuron dissolve to at least 6 months with quill
* **One year: 31557600**
`$ quill --pem-file private.pem neuron-manage 148885932052941245 --additional-dissolve-delay-seconds 31557600 > message.json`
`$ target/release/quill send message.json`


* in my case, the neuron is `5241875388871980017`

# 2.  [ ] Send a message to the governance canister using dfx's ability to send messages (you do this every time you want to send a proposal):

*Once I set up everything in step #1, I only do step #2 every time I want to create a motion proposal
* governance canister candid web UI: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.ic0.app/?id=rrkah-fqaaa-aaaaa-aaaaq-cai 
* method to use: **manage_neuron**

* **dfx command template:**

`$ dfx --identity proposals canister --network ic --no-wallet call rrkah-fqaaa-aaaaa-aaaaq-cai manage_neuron '(record {id = null; command=opt variant {MakeProposal=record {url="XXXXXXXXXXXX"; action=opt variant {Motion=record {motion_text="XXXXXXXXXXXX"}}; summary="XXXXXXXXXXXX"}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=XXXXXXXXXXXX:nat64}}})'`

* **actual dfx command I used:**

`$ dfx --identity proposals canister --network ic --no-wallet call rrkah-fqaaa-aaaaa-aaaaq-cai manage_neuron '(record {id = null; command=opt variant {MakeProposal=record {url=""; title=”In the NNS Frontend dapp, add cycle_dao’s neuron (5967494994762486275) so people can follow cycle_dao”;action=opt variant {Motion=record {motion_text=""}}; summary=”As part of liquid democracy, neuron holders can choose to follow the voting choices of other neurons. This can be done manually, but a very common and consumer-friendly way is to use the ‘follow neuron’ functionality in the NNS Frontend dapp. To further decentralization, this proposal is to add cycle_dao’s neuron: 5967494994762486275.”}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=5241875388871980017:nat64}}})'`

-------------------------

diegop | 2021-11-10 23:27:56 UTC | #2

Caveat: careful with formatting mistakes from copy/paste in regards to " " characters

-------------------------

diegop | 2021-11-10 23:31:37 UTC | #3

This is the payload I used for this NNS Motion proposal: https://dashboard.internetcomputer.org/proposal/28713

Food for thought: I did a lot of playing around with the Candid web UI to find the best way for me to get comfortable.

-------------------------

wpb | 2021-11-13 16:38:41 UTC | #4

Is it necessary to follow step 1 to create a neuron that has permission to make a proposal?  Is it possible to use a neuron that was created with the NNS app? @diegop

-------------------------

wpb | 2021-11-14 05:19:04 UTC | #5

I set up the neuronID using dfx, quill, and keysmith and can see the neuron in ic.rocks with over 1 ICP and a dissolve delay of 1 year.  When I run the call below in the Candid UI, I get the error message below.  What else needs to be done to enable this neuron to make a motion proposal?

 manage_neuron(record {id=null; command=opt variant {MakeProposal=record {url=""; title=opt "This is a test title"; action=opt variant {Motion=record {motion_text=""}}; summary="This is a test summary"}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=12008772471346176261}}})

(record {command=opt variant {Error=record {error_message="Caller not authorized to propose."; error_type=3}}})

-------------------------

levi | 2021-11-14 16:33:20 UTC | #6

The error is because the candid ui always sends calls as the anonymous caller. To call the manage_neuron method is with the caller/identity that controls the neuron. In Diego’s case he is using the identity he created called 'proposals'
[quote="diegop, post:1, topic:8498"]
$ dfx --identity proposals …
[/quote]

-------------------------

wpb | 2021-11-14 19:28:08 UTC | #7

So just to make sure I understand, this error message will always occur when trying to call manage_neuron with Candid UI because I can't send it (and therefore authorize it) with the identity that I created for this neuron ID.  Basically, it sounds like I have come as far as possible with testing short of submitting an actual proposal and losing 1 ICP for the test because of a Rejected proposal.  Does that sound about right or are there other ways of testing the manage_neuron command with my neuron and identity without actually making a proposal?  I suppose this may be the reason why several people have submitted test proposals in the past. @levi

-------------------------

levi | 2021-11-14 23:22:35 UTC | #8

Sounds right, I dont know of a way to test it without making a live one. maybe on a local replica if you can get the governance canister running on it.

-------------------------

diegop | 2021-11-16 19:36:58 UTC | #9

I will be honest, I actually created a live one while testing :slight_smile: since I started creating them a few months ago when the IC was still baking, and it was my job to actually help write the docs.

Of course, it cost me ICP, but i figured "hey that is the cost of sending proposals".

Could I have started up a local version of the Governance Canister? I guess so, but i found it easier to do this for testing:

1. Craft the message via the Candid UI of Governance Canister: https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.ic0.app/?id=rrkah-fqaaa-aaaaa-aaaaq-cai

* this allowed me to type check the arguments and inputs even if it the message did not work for lack of authorization or neuron with ICP

2. Once I was relatively certain of the arguments I wanted, I then sent a real proposal with a neuron that had a few ICP for me
* Personally (and this is indicative of how early I was in the documentation process), the whole experience took me a few hours and cost me maybe 2 ICP.

(fwiw yes I actually did buy ICP on Coinbase in order to have a "start from scratch" experience and identify any pain points)

-------------------------

dostro | 2021-12-08 20:22:33 UTC | #10

@diegop unless I'm missing something, the title in step 1.2 ("... ensure the principals are the same") should be to ensure the account IDs are the same because `$ dfx --identity proposals ledger account-id` only returns the account ID, right?

-------------------------

skilesare | 2021-12-08 21:11:33 UTC | #11

[quote="wpb, post:4, topic:8498"]
Is it necessary to follow step 1 to create a neuron that has permission to make a proposal? Is it possible to use a neuron that was created with the NNS app?
[/quote]

You may have figured this out in the last 25 days, but you can add a hot key to your NNS neuron and issue manage_neuron calls from it.

-------------------------

diegop | 2021-12-08 21:27:59 UTC | #12

Yes you are right those only return account IDs. I must have meant “check accounts”. I need to do a review of the intent, but quick glance leads me to believe you are right.

-------------------------

diegop | 2021-12-08 21:28:41 UTC | #13

[quote="skilesare, post:11, topic:8498"]
You may have figured this out in the last 25 days, but you can add a hot key to your NNS neuron and issue manage_neuron calls from it.
[/quote]

I believe this is correct, but I have not tested this.

-------------------------

diegop | 2022-01-31 22:53:46 UTC | #14

**Update**: I am moving this to the wiki and cleaning up certain parts:

https://wiki.internetcomputer.org/wiki/How-To:_Create_an_NNS_motion_proposal

-------------------------

diegop | 2022-02-02 22:03:07 UTC | #15

Update:

This page is much cleaner. Please use the wiki: https://wiki.internetcomputer.org/wiki/How-To:_Create_an_NNS_motion_proposal#Check_dashboard_to_see_proposal_was_successful

-------------------------

icme | 2022-03-29 02:39:49 UTC | #16

Keysmith was just deprecated, per the README - https://github.com/dfinity/keysmith

Can you update the wiki to reflect this?

-------------------------

diegop | 2022-03-29 03:12:38 UTC | #17

Yes will do. Good catch. That should make things simpler.

-------------------------

ysyms | 2022-03-31 20:39:46 UTC | #18

I would like to submit some suggestions, but have encountered some problems.

dfx --identity proposals canister --network ic --no-wallet call rrkah-fqaaa-aaaaa-aaaaq-cai manage_neuron '(record {id = null; command=opt variant {MakeProposal=record {url=""; title="$TITLE";action=opt variant {Motion=record {motion_text="$MOTION_TEXT"}}; summary="

$SUMMARY

"}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=$NEURON_ID:nat64}}})'

Here is the command to initiate a proposal using dfx.
I need to replace $SUMMARY with proposal content,But the proposals are multi-line, so I can't enter them in one command. I can only use '\n' to replace all newlines in the proposal. Is there any way to make it simpler

-------------------------

diegop | 2022-03-31 20:44:32 UTC | #19

Hmmm I submit multi like proposals all the time by copy pasting from a markdown file. Would it help you if I paste the exact command I used?

-------------------------

ysyms | 2022-04-01 01:49:03 UTC | #21

dfx --identity proposals canister --network ic --no-wallet call rrkah-fqaaa-aaaaa-aaaaq-cai manage_neuron '(record {id = null; command=opt variant {MakeProposal=record {url="https://medium.com/@ysyms/%E5%A6%82%E4%BD%95%E5%9C%A8nns%E5%8F%91%E8%B5%B7%E5%8A%A8%E8%AE%AE%E6%8F%90%E6%A1%88-fca251185ab4"; title="$(title.md)";action=opt variant {Motion=record {motion_text="$(title.md)"}}; summary="$(proposals.md)"}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=16392997059792243989:nat64}}})'

-------------------------

ysyms | 2022-04-01 01:49:46 UTC | #22

![image|690x378](upload://vZB2azztnUXYEnYUF6Pcp24V5AN.png)

-------------------------

ysyms | 2022-04-01 01:52:26 UTC | #24

how to use md file.I am not a developer

-------------------------

diegop | 2022-04-01 03:27:04 UTC | #25

Ok, to help you I will post the EXACT command I used to create this motion proposal: [https://dashboard.internetcomputer.org/proposal/50135](https://dashboard.internetcomputer.org/proposal/50135).

I literally wrote this command in a file and then copied/pasted this on my terminal:

```
dfx --identity proposals canister --network ic call rrkah-fqaaa-aaaaa-aaaaq-cai manage_neuron '(record {id = null; command=opt variant {MakeProposal=record {url=""; title="Chain Key Bitcoin Ledger on the Internet Computer";action=opt variant {Motion=record {motion_text="Chain Key Bitcoin Ledger on the Internet Computer"}}; summary="
 
# Summary
 
The goal is to have a Bitcoin ledger that makes use of the Bitcoin integration on the IC to bring \"Chain Key Bitcoin\", referred to as ckBTC in this proposal, to the Internet Computer. Unlike standard \"wrapped\" Bitcoin solutions, this ledger will not depend on any bridge between the Bitcoin network and the Internet Computer.
 
If this functionality is built, it will be possible to exchange BTC for ckBTC and vice versa at a 1:1 rate as well as trade ckBTC at the speed of the Internet Computer.
 
To vote YES on this proposal means that you agree with the plan to build, launch, operate this functionality on the Internet Computer.
 
If this proposal fails, then this design will not be implemented and the community will go back to the drawing board.
 
## Key people involved
 
Manu Drijvers, Mario Pastorelli, Thomas Locher
 
Timeline for this community-wide design discussion
 
* 1-pager posted on the forum for review: February 3, 2022
* Draft plan for feature posted on the forum for review: March 15, 2022
* Community conversation with Mario Pastorelli and Thomas Locher: March 16, 2022
* NNS Proposal submission: March 17, 2022, 15:00 UTC
* NNS Proposal expiration: March 19, 2022, 15:00 UTC
 
If NNS Motion Proposal passes, implementation + deployment target: Q3 2022.
 
## Design doc for the community:
 
You can also view a summary of the design here: [Proposed design to review and vote on](https://forum.dfinity.org/t/feedback-wanted-wrapped-bitcoin-ledger-on-the-internet-computer/10681/66?u=thlo).
 
# NNS Proposal: Chain Key Bitcoin Ledger on the Internet Computer
 
# Objective
 
The goal is to introduce a Bitcoin ledger on the Internet Computer based on the Bitcoin integration feature and Chain Key technology.
 
While the name is not set in stone, we call it the Chain Key Bitcoin (ckBTC) ledger in this design because it is one of the proposed names that received mostly positive feedback.
 
The ledger will make it possible to trade ckBTC at the speed of the Internet Computer at low cost. Moreover, it will offer mechanisms to convert BTC to ckBTC and vice versa, at a 1:1 rate. Thus, the Chain Key Bitcoin Ledger complements the Bitcoin integration functionality, simplifying the use of Bitcoin on the IC.
 
# 1. Proposal
 
## Design
 
The ckBTC functionality is introduced in the form of two new canisters:
 
* The ckBTC Ledger is an instance of a ledger, handling ckBTC transfers and managing account balances.
* The ckBTC Minter holds all Bitcoin of ckBTC holders and is in charge of issuing mint and burn calls to the ckBTC Ledger.
 
### ckBTC Ledger
 
The API of the ckBTC Ledger will be specified at a later stage. It will offer functions to query balances and transfer funds.
 
### ckBTC Minter
 
The ckBTC Minter will offer the following functions.
 
`get_btc_address(subaccount: vec nat8) -> (String);`
 
The function deterministically computes a Bitcoin address based on the ckBTC Minter’s main Bitcoin address and the caller’s principal ID, which is an implicit parameter of the function, and the provided subaccount.
 
Specifically, starting from the ckBTC Minter’s default key, BIP-32 key derivation is used to derive a key using the caller’s principal ID and the provided subaccount. The returned address is derived from this key.
 
Note that it is possible for a user to derive this Bitcoin address herself/himself.
 
`get_withdrawal_account() -> (AccountIdentifier);`
 
The function deterministically computes a ckBTC Ledger account ID based on the principal ID of ckBTC Minter and the principal ID of the caller. The ckBTC Minter burns the ckBTC transferred to this account when the owner calls retrieve_btc to retrieve the same amount in bitcoin.
 
`update_balance(subaccount: vec nat8) -> (UpdateBalanceResult);`
 
The function instructs the ckBTC Minter to update the ckBTC balance of the caller. Specifically, the ckBTC canister checks if there are new UTXOs associated with the Bitcoin address derived from the caller’s principal ID and the provided subaccount. If there are such UTXOs, the equivalent amount is minted in ckBTC and made available to the caller in the given subaccount.
 
This function must be invoked after sending bitcoin to the ckBTC Minter because the ckBTC Minter cannot know for which derived accounts it will receive funds.
 
`retrieve_btc(amount: Bitcoin, fee: opt Bitcoin, address: String) -> (RetrieveBtcResult);`
 
The function instructs the ckBTC Minter to send the given amount of Bitcoin to the provided Bitcoin address, burning the equivalent amount of ckBTC tokens. Note that at least the given amount must be transferred first, in ckBTC, to the caller’s withdrawal account. The withdrawal account is a ckBTC Ledger account under the control of the ckBTC Minter. The subaccount is derived deterministically from the user’s principal ID.
 
The optional fee parameter defines the fee to be used in the Bitcoin transaction that transfers the Bitcoin to the given Bitcoin address. If no fee is provided, the ckBTC Minter uses a standard fee, obtained through the Bitcoin integration fee API.
 
The ckBTC tokens are burned before the Bitcoin transaction is confirmed. If a transaction does not appear in a block, the user has the option to resubmit the transaction using the resubmit_retrieve_btc function below.
 
`get_minimum_fee() -> (Bitcoin) query;`
 
The function returns the minimum expected fee when providing a custom fee in the retrieve_btc function call.
 
The ckBTC Minter uses the Bitcoin integration fee API to derive this fee.
 
`resubmit_retrieve_btc(request_id: nat64, new_fee: Bitcoin) -> (ResubmitRetrieveBtcResult);`
 
The function instructs the ckBTC Minter to resubmit a Bitcoin transaction for a previous request, updating the fee. This function is intended to be used for transactions that are stuck because the fee was set too low.
 
The new fee must be higher than the last fee in the transaction associated with this request, increasing the fee according to [BIP-125](https://github.com/bitcoin/bips/blob/master/bip-0125.mediawiki).
 
# 2. Risks
 
If the ckBTC Minter or ckBTC Ledger is compromised, the funds provided in Bitcoin could be lost. The current plan is to deploy both canisters on a large system subnet, similar in size to the NNS, to mitigate this risk.
 
# 3. Alternative Designs
 
An alternative design would be to have a single canister acting as the ledger and custodian. Since we have a well-tested ledger available, having two separate canisters is considered to be a safer design. Moreover, reusing the existing ledger reduces the implementation effort.
 
# 4. Roll-out Plan
 
Once implementation and testing work has been completed, the plan is to deploy the two canisters to a system subnet, at which point the functionality becomes available.
 
If the ckBTC functionality is observed to behave as intended, the controller will be changed to the NNS, ensuring that any future changes can only happen with the approval of the community.
 
# 5. Timeline
 
If the NNS motion proposal is accepted, development will start right away. Proper testing will only be possible once the Bitcoin integration feature is operational. As a result, we plan to release the ckBTC functionality in Q3 2022.
 
# What we are asking the community
 
- Vote YES or NO on the proposal
 
Previous threads:
* https://forum.dfinity.org/t/feedback-wanted-wrapped-bitcoin-ledger-on-the-internet-computer/10681/66?u=thlo
 
"}}; neuron_id_or_subaccount=opt variant {NeuronId=record {id=9218890096040352708:nat64}}})'

```

-------------------------

ysyms | 2022-04-01 09:27:25 UTC | #26

thanks, it looks like it's working. I was unable to execute because the special symbols were not escaped before, sorry

-------------------------

paulyoung | 2022-08-21 07:15:53 UTC | #27

[quote="icme, post:16, topic:8498"]
Keysmith was just deprecated, per the README
[/quote]

I thought this too, but apparently not. `quill` might still be a better tool for this particular task though.

https://forum.dfinity.org/t/developer-identity-backups/14846/7?u=paulyoung

-------------------------

