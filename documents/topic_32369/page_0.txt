kosta | 2024-06-26 15:56:41 UTC | #1

I am applying for a $5k Developer Grant. 

Please review my application and discuss! See DFINITY's directions for becoming a registered reviewer [here](https://addlink.com). They will be collected by DFINITY. When one week passes, DFINITY will release them and they will appear as a new section on this post.

Please review my application and discuss! If you would like to submit an official review, then please use the links below to register, see the rubric, and submit a review. 

I'm looking forward to everyone's input! 

[Reviewer Registration](https://airtable.com/app9yb0aqQ3yOkjWO/pagQ35ZwCQ8hMWY0S/form) | [Rubric for Evaluating](https://forum.dfinity.org/t/introducing-public-developer-grants/28863) | [Submit a Review](https://airtable.com/app9yb0aqQ3yOkjWO/pagKHnmIWd99ssVbe/form)

MY APPLICATION:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrNEAwRZ0Wyp4FGB?viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

REVIEWS:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrFFKUpZSTUHQPuT?viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

We are back with the [IcpKit.Swift](https://github.com/kosta-bity/IcpKit) for iOS!
This time we will be enhancing it with a command line tool that can :
1. Parse a Candid service description file (`.did` as described here : https://internetcomputer.org/docs/current/tutorials/developer-journey/level-2/2.4-intro-candid#the-did-file)
2. Generate Swift classes for each type in the file
3. Generate Swift methods for each service function
4. Generate Swift documentation for each class/method from the comments in the original .did file

The generated Swift classes can be directly used with the IcpKit.Candid implementation for interacting with a given canister without writing any of the encoding/serialisation code.
The generated Swift methods can be directly called in order to interact with the given canister.

This will further facilitate the writing of iOS mobile apps that can directly interact with any canister of the Internet Computer.

Here are some examples :
```
type Auth = variant { FreeRpc; PriorityRpc; RegisterProvider; Manage };
```
will generate a `Auth.swift` file with these contents :
```
enum Auth {
   case FreeRpc
   case PriorityRpc
   case RegisterProvider
   case Manage

   static var candidType: CandidType {
      .keyedContainer(.variant, [
         CandidKeyedItem("FreeRpc", .null),
         CandidKeyedItem("PriorityRpc", .null),
         CandidKeyedItem("RegisterProvider", .null),
         CandidKeyedItem("Manage", .null),
      ])
   }

   var candidValue: CandidValue {
      .variant(Self.candidType, self.rawValue)
   }
}
```

The `candidValue` and `candidType` properties allow this to be easily serialised and encoded for sending to a canister.

Similarly, `services` can be parsed :
```
service SomeService: {
  authorize : (principal, Auth) -> (success : bool);
}
```
will generate this Swift code
```
struct AuthorizeResponse {
   let success: Bool
}

class SomeService {
   func authorize(CandidPrincipal, Auth) -> AuthorizeResponse {
      ...
   }
}
```
We can simply call the `SomeService.authorize(_,_)` method using the `CandidPrincipal` (pre-built with IcpKit.Swift) and `Auth` (generated from the `.did`) structs. The implementation of this method makes the actual call/query to the canister and returns the decoded response in an easy to use `AuthorizeResponse` struct.

-------------------------

kosta | 2024-06-26 11:39:56 UTC | #2

A question for which I can not find any answers in the docs :

In the [`evm_rpc.did` file](https://github.com/internet-computer-protocol/evm-rpc-canister/blob/main/candid/evm_rpc.did#L253) the service is defined as follows:

```
service : (InitArgs) -> {
   ...
};
```

What is the meaning of `(InitArgs) ->` in this syntax? I can not find any documentation for this. I would expect something like :

```
service: {
   ...
};
```

-------------------------

Severin | 2024-06-26 11:54:44 UTC | #3

`service : (InitArgs) -> {` means that to instantiate one of these services, you need to supply `(InitArgs)` as an init argument. You can think of it as the deployment configuration.

@Jessie, can you get the Candid folks to document this somewhere nicely? The AskAI button points me to [Roman's blog](https://mmapped.blog/posts/20-candid-for-engineers#candid-overview), which is great, but it is pretty fundamental syntax that should be documented somewhere

-------------------------

katiep | 2024-06-26 13:45:10 UTC | #4

kosta, please edit your post to include the code so that your full application (and reviews) appear. I have sent you the code twice via email from Submittable. It is an attachment.

-------------------------

katiep | 2024-06-27 12:16:07 UTC | #5

Thank you! Since next week is a US holiday and we have some team members on PTO, we will wait until July 8 to make the reviews public.

-------------------------

