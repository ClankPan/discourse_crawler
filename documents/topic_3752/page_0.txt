rbole | 2021-05-15 17:50:08 UTC | #1

Hi, I would like to sort the result of a Trie.filter result.

This is my function:

>   // Get all articles by category
>   public query func getArticlesByCategory (artCategory : Text) : async [ArticleCatWithId]  { 
>     // func filter<K, V>(t : Trie<K, V>, f : (K, V) -> Bool) : Trie<K, V>
>     let result : Trie.Trie<ArtId, Article> = Trie.filter<ArtId, Article>(articles, func (k, v) { v.artCategory == artCategory });  
>     Trie.toArray<ArtId, Article, ArticleCatWithId>(result, transformCategory);
>   };

Is there a way to sort the result by a property name? The title of the article e.g.?

Thanks for any help.

-------------------------

claudio | 2021-05-15 23:11:20 UTC | #2

You'll have to roll your own sort function for now, I think we couldn't quite decide which flavour of sort we wanted to include in the base libraries.

There's a quicksort implementation in the examples here:

https://github.com/dfinity/examples/blob/master/motoko/quicksort/

-------------------------

rbole | 2021-05-16 05:21:53 UTC | #3

Hi, thanks for pointing this out. The quick sort example is about sorting integers, so we have to adopt it.

One other solution, more easier, would be to sort the resulting array in the frontend application via Javascript.

-------------------------

claudio | 2021-05-16 13:21:54 UTC | #4

Not quite. The example sorts integers but the actual function is generic and works for any type. Not sure it's the best implementation though and not randomized as it should be.

-------------------------

rbole | 2021-05-16 10:55:06 UTC | #5

I will try it, but for most use cases the sorting would be better on the client site. 

On other question regarding cycles would be, can an intensive sorting process increase the costs of running the canister?

-------------------------

claudio | 2021-05-16 13:06:00 UTC | #6

Yes. And a worse algorithm might also exceed the finite cycle budget allowed per call.

-------------------------

kritzcreek | 2021-05-17 07:59:31 UTC | #7

FWIW I just added an implementation of merge sort for arrays to base: https://github.com/dfinity/motoko-base/pull/256

Should be available with the next dfx update (or immediately with vessel if you can't wait ;) )

-------------------------

