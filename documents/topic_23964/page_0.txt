princess_eth | 2023-10-23 22:39:14 UTC | #1

Is there a way to test without needing to run `dfx deploy` each time? For example, in a typical React application, you can make a simple UI update without needing to manually build and deploy the application. Is there an equivalent of this using dfx?

-------------------------

NathanosDev | 2023-10-23 23:26:17 UTC | #2

If you're only testing the UI, you can run your regular web server and tell your JS code the address of the local replica running on DFX. But if you want to test canister code, then yes you need to run `dfx deploy` each time.

-------------------------

princess_eth | 2023-10-23 23:43:44 UTC | #3

Thank you for the response!

-------------------------

princess_eth | 2023-10-23 23:44:14 UTC | #4

Is the team working on any tools that would it make it easier to test canisters without running `dfx deploy` each time?

-------------------------

NathanosDev | 2023-10-24 00:02:17 UTC | #5

Are you using Rust or Motoko?

This is available for Motoko already actually (I only use Rust so I didn't think about that when I first responded): https://forum.dfinity.org/t/announcing-mo-dev-live-reloading-for-motoko-dapps/21007

I'm not aware of any similar initiatives for Rust.

-------------------------

princess_eth | 2023-10-24 06:01:33 UTC | #6

Thank you for the resource for Motoko! I am actually working with Azle and I'll ask the Demergent Labs team if they have any tool or plans to create a tool in the future.

-------------------------

Severin | 2023-10-24 07:37:21 UTC | #7

Maybe you can reuse this idea with Azle:

In Rust canisters, we (the SDK team) try to split [canister logic](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/state_machine.rs) and the [canister interface](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/lib.rs) so that we can write [unit tests](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/tests.rs) for the canister logic. This way we can run unit tests quickly while developing and then write some integration tests for CI that confirms it works this way for a deployed canister as well.

This approach becomes pretty tedious to use once you have to perform a lot of calls to other canisters because you'll have to mock a bunch of responses and have a bunch of functions that perform only part of the logic, but I still think it's the best way to test if you want to test your canister as well as possible

-------------------------

mnl | 2023-10-24 15:27:03 UTC | #8

there's also https://lib.rs/crates/pocket-ic

-------------------------

icpp | 2023-10-25 00:57:25 UTC | #9

In icpp, the C++ CDK, there are two build modes:
- icpp build-wasm
- icpp build-native 

The first is the optimized wasm for the IC.
The latter is a native debug executable, using a MockIC. 

You can use the exact same canister code to test without the need to deploy with dfx, and even more powerful is that you can debug interactively in VS Code.

I develop all my code like that and then do final testing in the network once it works natively.

-------------------------

