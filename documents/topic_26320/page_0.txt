Jesse | 2024-01-08 18:59:39 UTC | #1

I'm attempting to assign a canister principal as a neuron's controller, but I'm getting the following error: 
`Cannot add neuron, controller PrincipalId must be self-authenticating`

is this error being thrown because the principal is that of a canister? if so, when will canister's be allowed to control neurons? Having this ability is a necessity for the application that I'm building. I wouldn't expect this of all things to be what blocks me.

-------------------------

diegop | 2024-01-08 19:12:00 UTC | #2

AFAIK, a canister cannot natively control a neuron out of the box so the simple answer is "no"... however, I heard one could do the following (not straightforward process): A canister should be able to do an HTTPS outcall to the NNS canister and use Threshold ECDSA to control an NNS neuron. I am not aware of folks who have done this in practice though.

-------------------------

Jesse | 2024-01-08 19:49:33 UTC | #3

Is there a reason for requiring devs to undergo such a roundabout process in order to enable neuron staking within canisters? What’s preventing the restrictions in place from being lifted? 

I ask because I’m currently building a product that’s meant to facilitate collective IC staking and governance amongst different communities. Additionally, it’s meant to allows users to be able to collateralize their neuron stake in order to receive liquidity in the form of a loan. 

To do this, I’ll need a treasury canister that has the ability to control a neuron. I’ve already built most of the code needed. This restriction on canisters has become a roadblock for me in development.

It wouldn’t make much sense to write up some convoluted system for enabling the treasury canister to control a neuron when, instead, the 1 or 2 lines of code that restrict canisters from controlling neurons could simply be removed.

-------------------------

domwoe | 2024-01-08 21:01:10 UTC | #4

[quote="diegop, post:2, topic:26320"]
A canister should be able to do an HTTPS outcall to the NNS canister and use Threshold ECDSA to control an NNS neuron. I am not aware of folks who have done this in practice though.
[/quote]

The OpenChat SNS is doing this in practice. The code can be found here: https://github.com/open-chat-labs/open-chat/tree/master/backend/canisters/neuron_controller

[quote="Jesse, post:3, topic:26320"]
It wouldn’t make much sense to write up some convoluted system for enabling the treasury canister to control a neuron when, instead, the 1 or 2 lines of code that restrict canisters from controlling neurons could simply be removed.
[/quote]

I would personally vote in favor if you put forward a proposal.

-------------------------

diegop | 2024-01-08 21:13:16 UTC | #5

[quote="Jesse, post:3, topic:26320"]
Is there a reason for requiring devs to undergo such a roundabout process in order to enable neuron staking within canisters? What’s preventing the restrictions in place from being lifted?
[/quote]

I am not an expert on this topic, so I am not aware of what the design goals or constraints on these are (or if there is some security issue, or if its just its a feature that has been low in priority queue), so I am sorry I cannot shed more light on this.

-------------------------

jamesbeadle | 2024-03-27 10:21:55 UTC | #6

So I am in the process of this of creating a canister controlled neuron in this way, my WIP can be found in the neuron controller folder here:

https://github.com/jamesbeadle/OpenFPL/tree/Create-DAO-Neuron-controller/src/neuron_controller

So in [neuron_controller.mo](https://github.com/jamesbeadle/OpenFPL/blob/Create-DAO-Neuron-controller/src/neuron_controller/neuron_controller.mo) you will see the function get_public_key_der:

![image|665x353](upload://hkvsl4snDPwSqtRCALquBrIBF9j.png)

But I have no idea how to write this function, is there any information you could give me?

-------------------------

domwoe | 2024-03-27 11:19:40 UTC | #7

Hey James,

If I understand correctly, for this you just need to call the API at the management canister, see https://github.com/dfinity/examples/blob/340cc897f5de49eee10c78ec769602a5b1eb391a/motoko/threshold-ecdsa/src/ecdsa_example_motoko/main.mo#L26

You might also want to checkout this library: https://mops.one/tecdsa

-------------------------

jamesbeadle | 2024-03-27 12:02:52 UTC | #8

So yeah I can get the tECDSA public key in secp1 format but then I think I need to convert it back to DER format for future requests to the IC?

I can't actually load the spec
https://internetcomputer.org/docs/current/references/ic-interface-spec

-------------------------

domwoe | 2024-03-27 12:14:23 UTC | #9

[quote="jamesbeadle, post:8, topic:26320"]
So yeah I can get the tECDSA public key in secp1 format but then I think I need to convert it back to DER format for future requests to the IC?
[/quote]

yep, haven't parsed the "der" :slight_smile:  But the library I linked does this AFAICT.

-------------------------

jamesbeadle | 2024-03-27 12:19:49 UTC | #10

In the tecdsa library? I went through all the code and it doesn't mention this format DER anywhere. It's all new to me, is there any information you can give me on it?

-------------------------

Jesse | 2024-03-27 12:23:31 UTC | #11

@jamesbeadle There’s actually an active discussion proposed [Here](https://forum.dfinity.org/t/reevaluating-neuron-control-restrictions/28597?u=jesse) that would lift the restriction that prevents canisters from being able to control neurons directly. 

My guess, is that the restriction will be lifted soon, and all the work that you’re about to do in order to perform an tECDSA-signed HTTPS request will be made redundant. 

I’m not sure what your timeline is, but that’s an option for you

-------------------------

domwoe | 2024-03-27 12:23:47 UTC | #12

https://github.com/bittoko/tecdsa/blob/89fadbdad91ef8303b8a861fe9e7457ce134ba9a/src/Client/class.mo#L26

-------------------------

jamesbeadle | 2024-03-27 12:37:35 UTC | #13

Daily rewards on the neuron are probably around 20 ICP on the current figure so waiting obvs costs a lot of money especially when you'd set the DAO up to stake and pay the team through interest.

-------------------------

jamesbeadle | 2024-03-27 12:38:34 UTC | #14

Would you be able to give me any information on what this does and how it relates to getting the public key der in the same way OC does?

-------------------------

LightningLad91 | 2024-03-27 12:58:03 UTC | #15

@jamesbeadle here is a breakdown I posted in response to another post.

https://forum.dfinity.org/t/error-failed-to-authenticate-request-due-to-invalid-signature-invalid-public-key-malformed-placeholder-public-key-error-error-in-der-encoding-invalid-length-of-bit-string-74/26869/8?u=lightninglad91

Happy to add more context later, but currently at work.

-------------------------

Jesse | 2024-03-27 13:01:47 UTC | #16

I understand. 

Once you’ve retrieved the public key, you’ll have to decompress it, and then prepend a constant `Blob` to the decompressed public key. 

This thread should be helpful: 

https://forum.dfinity.org/t/error-failed-to-authenticate-request-due-to-invalid-signature-invalid-public-key-malformed-placeholder-public-key-error-error-in-der-encoding-invalid-length-of-bit-string-74/26869?u=jesse

-------------------------

jamesbeadle | 2024-03-27 13:17:00 UTC | #17

![image|690x373](upload://9WBAArZ9ohVXteLBgdgqA7LI4b3.png)
Is that what is happening in here?

-------------------------

LightningLad91 | 2024-03-27 13:24:30 UTC | #18

Yes, you can find that function here: 

https://github.com/bittoko/tecdsa/blob/89fadbdad91ef8303b8a861fe9e7457ce134ba9a/src/Client/pk.mo#:~:text=import%20%7B%20fromArray%20%3D%20blobFromArray,50

-------------------------

