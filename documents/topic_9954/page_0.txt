Motokoder | 2021-12-28 01:37:24 UTC | #1

With Motoko, is it possible to serialize any type of object into a Blob so that it can be sent to another canister in chunks and then deserialized on the other end? Thank you.

-------------------------

jzxchiang | 2021-12-28 22:16:02 UTC | #2

Why do you need to chunk an object?

Are you worried you'll hit the message limit? I believe those [only](https://github.com/dfinity/ic/blob/f14eb6e964eea38368bfb423bae00e66c09a2a70/rs/prep/src/subnet_configuration/constants.rs#L23) apply to ingress messages (from users) and not inter-canister messages (from canisters).

-------------------------

Motokoder | 2021-12-28 22:42:04 UTC | #3

Yes, that was one of the concerns. I am happy to hear that the transfer limit does not apply to cross-canister calls. Thank you for clarifying.

The other reason is to wrap objects into a generic format for on-chain backup of one or more dapp canisters. A common data type with a Blob field and some header information would enable the decoupling of a backup canister. Otherwise a backup canister would need to mirror a dapp canister's stable signature and both canisters would need to be updated together. This defeats the purpose of protecting against accidental data loss during deployments.

-------------------------

jzxchiang | 2021-12-28 23:43:56 UTC | #4

> Yes, that was one of the concerns. I am happy to hear that the transfer limit does not apply to cross-canister calls. Thank you for clarifying.

Probably better if someone from DFINITY confirms this.

> The other reason is to wrap objects into a generic format for on-chain backup of one or more dapp canisters.

I think there's an upcoming [feature](https://forum.dfinity.org/t/prioritize-safe-instantaneous-canister-upgrades/9039/9?u=jzxchiang) to let developers download the state of their canister to somewhere offline and off-chain. For this exact use case of protecting against data loss during canister upgrades.

-------------------------

Motokoder | 2021-12-28 23:57:57 UTC | #5

Thanks. I heard about the canister download feature. However, I have a requirement for automatic, incremental, on-chain backups. This method protects user data by ensuring it never leaves the security of the IC.

With the system heartbeat feature coming soon, the only missing piece, as far as I know, is binary serialization for a generic storage format.

-------------------------

jzxchiang | 2021-12-29 07:25:33 UTC | #6

That's an interesting use case that I feel like many devs would be interested in!

-------------------------

jzxchiang | 2021-12-29 07:29:10 UTC | #7

Maybe @claudio might know the answer to this.

-------------------------

timo | 2021-12-29 12:00:56 UTC | #8

[quote="Motokoder, post:3, topic:9954"]
Otherwise a backup canister would need to mirror a dapp canister’s stable signature and both canisters would need to be updated together.
[/quote]

There's a super-type, `Any`. You could make your backup canister accept objects of type Any and then send it any sharable type from the canister that is being backed up. That way your backup canister doesn't have to be upgraded in sync.

I think there is a size limit though but I let others confirm what it is.

-------------------------

timo | 2021-12-29 14:24:39 UTC | #9

But not sure if `Any` solves your problem because how do you get the data out again for recovery in a meaningful way?

-------------------------

Motokoder | 2021-12-29 14:53:27 UTC | #10

I assumed there was a way to down-cast a more generic type. Is that not possible?

-------------------------

Motokoder | 2021-12-29 15:39:17 UTC | #11

I just tried to down-cast and it doesn't seem to be supported. Does anyone know how to convert an instance of Any to an instance of Person in this example?
https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1687881096

-------------------------

timo | 2021-12-29 15:57:20 UTC | #12

I'm afraid you can't. It's a black hole :rofl:

-------------------------

Motokoder | 2021-12-29 16:03:30 UTC | #13

That would be unfortunate, but there must be some workaround.

-------------------------

Motokoder | 2021-12-29 18:13:47 UTC | #14

I see in the [documentation](https://smartcontracts.org/docs/languages/motoko-at-a-glance.html#_semantics): "no dynamic casts".

That leaves me wondering why the Any type exists and how it is used.

-------------------------

Motokoder | 2021-12-30 13:46:59 UTC | #15

My best solution for backing up data to a generic format is as follows:

1. Create a custom mapper function for each type that copies the field names and values to a tuple array of [(Text, ?Text)]. Child objects/arrays will be flattened using a composite key to indicate the hierarchy.
2. Create parser functions for each base type (Nat, etc.) so that the Text values in the tuples can be converted back to their original types.
3. Send the tuple array to a backup canister where it is added to a HashMap with a composite key of identifiers for the origin canister, data type and instance id.

Although data values require more memory to be stored as Text (rather than byte arrays), this is slightly more efficient than JSON and runs less risk of parsing errors. The implementation is also simpler. Tuple arrays can be sent between canisters (unlike HashMaps) and they are typically the format used to persist stable variables during upgrades. This makes them a nice backup format.

Without support for reflection or dynamic type casting, I believe this is the best solution, but it requires custom mapper functions for each type. On the bright side, this also offers flexibility for handling backward compatibility with older versions of your data types. Obsolete fields can be ignored. Old field names can be mapped to new field names, etc.

Any feedback or logic improvements to the above would be greatly appreciated. Thank you!

-------------------------

KennyBoyNYC | 2021-12-30 18:27:31 UTC | #16

ICP is the future and us luck ones who are in, especially everyone who paid less than $50 each are going to be in such a good position as 2022 is going to be the year that shorts cover, which will shoot us to $250 and form a new base to take us to $1000 per ICP in 2022 👍🏻👍🏻👍🏻

-------------------------

Motokoder | 2021-12-30 18:53:56 UTC | #17

Hey @KennyBoyNYC. I'm honored that your first post was in my thread, even if it's a bit off topic. I won't speculate on price, but let's just say that $ICP is my primary long-term investment. :wink:

If you're not a web developer yet, now is a good time to learn. Full-stack = React + Motoko.

-------------------------

KennyBoyNYC | 2021-12-30 19:09:27 UTC | #18

Ah. I'm honored.  I'm not a developer but I heard amazing things bout Motoko 👍🏻👍🏻👍🏻

-------------------------

timo | 2021-12-30 21:13:36 UTC | #19

Let's take a step back. If you store a lot of data in your canister then for save upgrades (to guarantee that the upgrade will never fail due to exceeding the cycle limit per execution) you will likely need to store data  directly in stable memory with the low-level interface. 
Links:
https://smartcontracts.org/docs/base-libraries/ExperimentalStableMemory.html
https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/pages/stablememory.adoc
Example: 
https://github.com/dfinity/motoko/blob/master/doc/modules/language-guide/examples/StableLog.mo

For the primitive types there are serialization functions provided in the ExperimentalStableMemory package that write the value directly into stable memory. For your own composite types you would have to write those serialization functions yourself. But hopefully the data types for your essential data that you need for disaster recovery can be kept simple.

If you do use the stable memory in that way already then it makes sense to use the serialization already present in the stable memory for your backup solution. Note that the data being in stable memory is already a form of backup because stable memory survives upgrades and if an upgrade fails because the pre/post upgrade hooks trap then the stable memory cannot be corrupted. So you are left to protect yourself against cases where the upgrade succeeds but the new code is buggy so that it corrupts your data after the upgrade.

To back up the data in the stable memory I would just take the entire memory pages and ship them off as Blob to another canister. That way the type transmitted is always Blob and the backup canister can be completely agnostic to the content and the types used in the content (as you wanted). You should be able to send at least 2 MB in a single inter-canister message. With the stable memory being organized in memory pages of 64kB you can then ship 32 pages at once.

-------------------------

timo | 2021-12-30 21:20:27 UTC | #20

Since you mentioned Text. If you have Text you can convert it to Blob with Text.encodeUtf8 first and then write it to stable memory with storeBlob.

-------------------------

jzxchiang | 2021-12-30 21:23:09 UTC | #21

> To back up the data in the stable memory I would just take the entire memory pages and ship them off as Blob to another canister.

To clarify, do you mean to use the `loadBlob` [function](https://smartcontracts.org/docs/base-libraries/ExperimentalStableMemory.html#loadBlob)?

> You should be able to send at least 2 MB in a single inter-canister message. With the stable memory being organized in memory pages of 64kB you can then ship 32 pages at once.

Oh interesting, I thought the 2 MB message size limit only applied to [ingress](https://github.com/dfinity/ic/blob/f14eb6e964eea38368bfb423bae00e66c09a2a70/rs/prep/src/subnet_configuration/constants.rs#L23) messages. I didn't know they also applied to inter-canister messages.

-------------------------

Motokoder | 2021-12-30 23:19:05 UTC | #22

Thank you @timo for your comprehensive explanation. This gives me a lot to think about.

Due to the experimental warning, I have intentionally left out ExperimentalStableMemory from the solution. However, I am very hopeful about leveraging this library in the future. I have a few questions on that topic if you have the time.

1. It sounds like the only way to get a blob from an instance of a complex type is to custom serialize it to a string format like JSON and then call Text.encodeUtf8. Is my understanding correct?
2. If I need to restore all pages of stable memory after an upgrade to some HashMaps, could I still run into the cycle limit?
3. To echo @jzxchiang, does that 2 MB message size limit apply to inter-canister messages?

-------------------------

timo | 2021-12-31 00:02:37 UTC | #23

[quote="Motokoder, post:22, topic:9954"]
It sounds like the only way to get a blob from an instance of a complex type is to custom serialize it to a string format like JSON and then call Text.encodeUtf8.
[/quote]
Certainly not the only way. What complex type are you thinking about? You can probably serialize it directly to binary.

[quote="Motokoder, post:22, topic:9954"]
If I need to restore all pages of stable memory after an upgrade to some HashMaps, could I still run into the cycle limit?
[/quote]
Theoretically, yes. If that happens then you could spread building the HashMap over several messages. The upgrade could leave the canister in a state in which only a post-upgrade function can be called and no other functions. And then you can call the post-upgrade function multiple times and each time you call it a few more entries get added to the HashMap. There are also ways for a canister to call itself in a loop, then it would be automated.

[quote="Motokoder, post:22, topic:9954"]
does that 2 MB message size limit apply to inter-canister messages?
[/quote]
As far as I know, yes. Inter-canister messages end up in blocks and there is a block size limit so there must be a message size limit, too.

-------------------------

Motokoder | 2021-12-31 04:02:40 UTC | #24

Thanks again. I like your idea to copy the stable data with multiple operations after the upgrade is finished. I'll do some testing for the message size limit since the IC code is a bit over my head. 

[quote="timo, post:23, topic:9954"]
Certainly not the only way. What complex type are you thinking about? You can probably serialize it directly to binary.
[/quote]

If you could show me how to do that, it would solve my biggest problem. Here are some examples of what I would call complex types:

```
public type Address = {
   id: Nat32;
   street1: Text;
   street2: Text;
   city: Text;
   province: Text;
   postalCode: Text;
   country: Text;
};

public type Person = {
   id: Nat32;
   firstName: Text;
   lastName: Text;
   emails: List<Text>;
   addresses: List<Nat32>;
};
```

-------------------------

Motokoder | 2021-12-31 04:42:23 UTC | #25

@timo @jzxchiang It looks like the [inter-canister message size limit](https://github.com/dfinity/ic/blob/391fd19f2154471f01068aaa771084eac010a099/rs/types/types/src/messages.rs#L39) is 2 MB.

-------------------------

timo | 2021-12-31 07:44:50 UTC | #26

[quote="jzxchiang, post:21, topic:9954"]
do you mean to use the `loadBlob` [function](https://smartcontracts.org/docs/base-libraries/ExperimentalStableMemory.html#loadBlob)
[/quote]

Yes, I meant that one.

-------------------------

timo | 2022-01-01 20:59:40 UTC | #27

[quote="Motokoder, post:24, topic:9954"]
Here are some examples of what I would call complex types:

```
public type Address = {
   id: Nat32;
   street1: Text;
   street2: Text;
   city: Text;
   province: Text;
   postalCode: Text;
   country: Text;
};

public type Person = {
   id: Nat32;
   firstName: Text;
   lastName: Text;
   emails: List<Text>;
   addresses: List<Nat32>;
};
```
[/quote]

For the text field you could serialize to binary by writing the length as one word followed by the text as Blob. For example define a function

```
import S "mo:base/ExperimentalStableMemory";
import Nat32 "mo:base/Nat32";
import Text "mo:base/Text";

    func storeText(offset : Nat32, value : Text) : Nat32 {
        let b : Blob = Text.encodeUtf8(value);
        let len : Nat32 = Nat32.fromIntWrap(b.size());
        S.storeNat32(offset, len);
        S.storeBlob(offset+4, b);
        4 + len
    };
```
and then call it like this:
```
offset += storeText(offset, street1);
offset += storeText(offset, street2);
offset += storeText(offset, city);
...
```

-------------------------

timo | 2022-01-01 21:01:13 UTC | #28

This example runs in the playground at the moment. However, I think the interface for ExperimentalStableMemory has recently changed to 64 bit address space so you may have to change all Nat32 to Nat64, depending on your environment.

-------------------------

Motokoder | 2022-01-02 00:35:41 UTC | #29

Thank you @timo. That was very nice of you to provide a code sample. It really cleared up my confusion.

Happy New Year!

-------------------------

mbeekman | 2022-07-03 10:50:32 UTC | #30

This is a great thread and directly related to a problem I want to solve ... 

As @jzxchiang asked and @timo replied with:

[quote="timo, post:19, topic:9954"]
To back up the data in the stable memory I would just take the entire memory pages and ship them off as Blob to another canister. That way the type transmitted is always Blob and the backup canister can be completely agnostic to the content and the types used in the content (as you wanted). You should be able to send at least 2 MB in a single inter-canister message. With the stable memory being organized in memory pages of 64kB you can then ship 32 pages at once.
[/quote]

I am trying to do just that ... not sure if there are examples of that somewhere ?

and on the same subject, lets assume I can figure out how to create the Blob I want and can break it into 2MB chunks of pages... Can you turn an array of complex objects into a Blob relatively easily?  ... if I were to take the example from @Motokoder, i.e. Address, and had an array of addresses i.e.: 
```
var theAddresses : [Address] = [] ;
```
and then I wanted to turn "theAddresses" into a Blob so I can chunk it up and send to another canister ...

I feel like I am 80% to the finish line, but still a little confused ... any assistance would be great. 
Thanks in advance ... and I know this thread is a little old, but like I said, right on target with what I am trying to do ...

-------------------------

icme | 2022-07-03 15:30:20 UTC | #31

Check out the `to_candid` and `from_candid` methods introduced in the links provided in [this post](https://forum.dfinity.org/t/icdevs-org-bounty-18-cbor-and-candid-motoko-parser-3-000/11398/5)

-------------------------

mbeekman | 2022-07-05 07:45:40 UTC | #32

Holy guacamole ... seems to be exactly what I am looking for ... hard to find, but for the next person along the same path ... here is a direct to the doc on it :slight_smile: 
https://internetcomputer.org/docs/current/developer-docs/build/languages/motoko/language-manual#candid-serialization

(fyi - the forum strips the #candid-serialization ... search for "Candid Serialization" in this page ... )

Muchas gracias @icme (a.k.a. Canscale) ... and again thanks to @jzxchiang @timo :upside_down_face:

going to try it right now  ...

-------------------------

mbeekman | 2022-07-05 08:03:14 UTC | #33

Also found this helpful as a reference ... 
https://forum.dfinity.org/t/candid-serialisation-to-candid-and-from-candid/13543
thanks @Gabriel  :slight_smile:

-------------------------

mbeekman | 2022-07-05 08:12:17 UTC | #34

and thanks to @matthewhammer and @claudio for building it in the first place (fyi ... need to upgrade to 0.10.1 to get the Motoko version with the methods ... otherwise will get "unbound variable to_candid" )  ... rocking on ...

-------------------------

mbeekman | 2022-07-10 11:53:17 UTC | #35

As a closer to this subject ... the from_candid method returns an optional type or ()  (?Type) ... this was a new thing for me, as it will not compile if you take that value and try to use it ... so we need a switch to check whether it worked ... even though it will assert if the "from_candid" fails ... here is a quick code example that may prove useful to the next Explorer walking this path:
```
var tempBlobReturned : ?ArchiveType = from_candid(tempBlob); 

switch tempBlobReturned {
  case (?val) {
    Debug.print("RESTORE SUCCESS - have a value" ) ;
    tempArchiveRestored:=val ;
  };
  case null {
    Debug.print("RESTORE FAILED - have no value " ) ;
  };
};// end switch

```

Happy to respond if anything does not make sense here ...  extrapolated this solution from the following post:
https://forum.dfinity.org/t/annot-producer-expected-type/5544/2
needless to say, but very obtuse ... thanks @rossberg  ... 
please rock on  ...

-------------------------

