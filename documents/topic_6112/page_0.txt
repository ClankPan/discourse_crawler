Gabriel | 2021-07-26 11:37:03 UTC | #1

Hi, 

Are there any plans for a UUID generator? 

So I've been looking for a good solution but I didn't get far. 

So 1 blob of entropy gives us 256 bits Nat (`cryptographic entropy (randomness source) is only obtainable asyncronously in discrete chunks of 256 bits (32-byte sized `Blob`s))`
https://sdk.dfinity.org/docs/base-libraries/random

This raises the question, how is the entropy generated? radioactive decay? random background radio noise?

Also how much does 1 blob of entropy cost in cycles? 

To get a UUID we need to be able to generate a 128 bit label. https://en.wikipedia.org/wiki/Universally_unique_identifier

Now in order to get a low probability collision for a 128-bit UUID, the 'birthday effect' tells us that a collision is likely after you've generated about 2^64 keys, provided you have 128 bits of entropy in each key. From what I've read you'll start seeing collisions in about 2^50 but the chances of seeing a collision if you've populated your database with just 1000 billion keys are still negligible. 

https://en.wikipedia.org/wiki/Universally_unique_identifier#Random_UUID_probability_of_duplicates
https://en.wikipedia.org/wiki/Birthday_problem

So at best we can use a full blob of entroopy for 2 UUIDs. 

Now my question is, what's the best way to generate up to 10 UUIDs using just 1 blob of entropy and ensure a low probability collision? 

PS: 

I've seens some possible solutions using the Hash https://sdk.dfinity.org/docs/base-libraries/hash

https://crypto.stackexchange.com/questions/60193/mechanism-to-get-10-pseudo-random-positive-numbers-up-to-maximum-from-a-seed-32

The problem is Hash returns a 31 bit Nat and secondly not sure how deterministic is this.

-------------------------

Gabriel | 2021-07-26 10:18:06 UTC | #2

Tagging @claudio @rossberg as they're more expert on the matter

-------------------------

claudio | 2021-07-26 16:12:04 UTC | #3

I'm actually not expert on this area, so will refrain from giving advice.

The source of the `Random.blob` entropy bits is a Threshold Random Signature, computed, in concert, by a quorum of the replicas of the IC, which (AFAIK) should give "cryptographic" randomness.

I would *not* use Hash.mo hashing functions - these don't provide any cryptographic guarantees at all - indeed, most of Motoko's hashing support needs revisiting, IMO.

-------------------------

matthewhammer | 2021-07-26 17:22:26 UTC | #4

[quote="claudio, post:3, topic:6112"]
The source of the `Random.blob` entropy bits is a Threshold Random Signature, computed, in concert, by a quorum of the replicas of the IC, which (AFAIK) should give “cryptographic” randomness.
[/quote]

That's my understanding as well.

[quote="claudio, post:3, topic:6112"]
I would *not* use Hash.mo hashing functions - these don’t provide any cryptographic guarantees at all - indeed, most of Motoko’s hashing support needs revisiting, IMO.
[/quote]

Does a UUID generator really need cryptographic randomness?  Or randomness at all, even?

A counter that counts can generate a stream of UUIDs and not use any crypto at all.  It's perfectly "secure" as a stream of UUIDs, except that the order of the stream is predictable.  Does that matter here?

If not, `Hash.mo` is fine.

-------------------------

matthewhammer | 2021-07-26 17:25:01 UTC | #5

[quote="matthewhammer, post:4, topic:6112"]
Does a UUID generator really need cryptographic randomness? Or randomness at all, even?
[/quote]

I see, according to Wikipedia, the difference between a GUID and UUID is whether there is centralized coordination in the generation or not:

> Their uniqueness does not depend on a central registration authority or coordination between the parties generating them, unlike most other numbering schemes. While the [probability](https://en.wikipedia.org/wiki/Probability) that a UUID will be duplicated is not zero, it is close enough to zero to be negligible.

But if you control a canister that issues these, the need for UUID is simply absent.  It's a need that a decentralized app has that a single canister lacks.

Is there a good reason to have the generation be truly distributed?

In that case, you'd better just do it client-side, and not in Motoko at all, IMO.

-------------------------

DATHKA | 2021-07-27 09:46:18 UTC | #6

Our application does require UUIDs to be random - or 'hard to guess' - so e.g. a consecutive numbering system would not be acceptable. We will also have a requirement to generate a large number of UUIDs on a continuous basis so latency may be an issue with cross-canister calls - it would be so much better to do this locally.

Client-side may work for some use-cases, but we're likely to require UUID generation without direct client interaction so would not want to rely on this.

Grateful for more ideas!

-------------------------

matthewhammer | 2021-07-27 17:39:40 UTC | #7

[quote="DATHKA, post:6, topic:6112"]
it would be so much better to do this locally.
[/quote]

How about using the Principal type from Candid/Motoko/Rust as a kind of UUID for resources?

They can be generated in many languages already.  For instance, you can use the existing agent libraries (in JS and Rust) for the IC to generate a large set of Principal IDs randomly.

Those are cryptographically generated, AFAIK, so they will have the needed properties that @DATHKA and @Gabriel may be wanting, and it will be practically impossible to generate duplicates.

A nice benefit to re-using this type for a general UUID type is that all of these languages already know how to send, receive, print and compare them, and the standards for all of these choices are already established.

-------------------------

rbolog | 2021-07-27 20:39:11 UTC | #9

Hi,
I did for POC a canister for UID I also use two modules from Enzo Haussecker @enzo Hex and sha256 which I modify a little to works with Nat8.

The maturity is low that why I store it in private repo. 

As the random is slow I use a stack to store UID which are generated in parallel. using function : 
public func createNewUids( number : Int)

You can get UID with :
public func getNewUid() : async ?UID

I also create a function that create a hash which is fast and it use low resources
public query func getNewId() : async Id

When I need a global UID I use getNewUid when I need an Id for internal use local to a canister or a limited datasets I use  getNewId.

I share just the canister source code as zip if you have any interest.

[uid.zip](https://ipfs.io/ipfs/QmbCXQA5DgC8fMGon9tZYQamrVDs1g4wF9i2nucgLQMkkm?filename=uid.zip)

-------------------------

