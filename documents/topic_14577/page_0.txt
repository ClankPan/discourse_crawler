cryptoschindler | 2022-07-27 21:44:16 UTC | #1

I think this should throw an error:
```
    private var _registry : TrieMap.TrieMap<Types.TokenIndex, Types.AccountIdentifier> = HashMap.fromIter(state._registryState.vals(), 0, ExtCore.TokenIndex.equal, ExtCore.TokenIndex.hash);
```

@diegop @claudio

-------------------------

paulyoung | 2022-07-27 22:42:21 UTC | #2

Due to structural subtyping, this is allowed if the structure of the two types are compatible.

-------------------------

chenyan | 2022-07-27 22:44:23 UTC | #3

Yes, it should. Do you have errors above this line that prevents the compiler from checking the error?

-------------------------

cryptoschindler | 2022-07-28 06:11:00 UTC | #4

No errors, everything compiles fine and I can deploy the canister as well.

-------------------------

chenyan | 2022-07-28 18:13:13 UTC | #5

Paul is right. Both Map happens to have exactly the same type...It is confusing that you might be thinking one data structure and the code is using another one. But from the typing perspective, it is correct.

-------------------------

icme | 2022-07-28 20:14:24 UTC | #6

Although there's definitely room for improvement in this implementation, I think this might be one of the reasons why it's preferable to use "exposed" data structures and functions that operate on those data structures instead of class wrappers.

For example, something like https://github.com/canscale/StableHashMap/blob/main/src/FunctionalStableHashMap.mo

The [StableHashMap type](https://github.com/canscale/StableHashMap/blob/main/src/FunctionalStableHashMap.mo#L37) exposed here is different than the [underlying data structure/size variables in the TrieMap](https://github.com/dfinity/motoko-base/blob/master/src/TrieMap.mo#L27), which were the TrieMap converted from a class to a record + collection of functions, you wouldn't be able to assign these types interchangeably.

@chenyan it would be nice though if the instance variable `var` types within classes were compared, and not just the function signatures. Maybe a key word to denote instance variables, which may not be public, but that are part of the underlying class-related data stored within.

-------------------------

cryptoschindler | 2022-07-29 06:50:56 UTC | #7

TBH I find this very odd, even though it's correct. I almost missed setting the variable to a TrieMap, as I'm heavily relying on the compiler as my best friend and saviour :smiley:

-------------------------

paulyoung | 2022-07-29 09:04:17 UTC | #8

This is probably a good example of why tests are still necessary in typed languages üôÇ

-------------------------

cryptoschindler | 2022-07-29 09:33:00 UTC | #9

Out of curiosity, how would you test for something like this?

-------------------------

paulyoung | 2022-07-29 10:30:47 UTC | #10

I suppose in this case you can‚Äôt since whether it‚Äôs a HashMap or TrieMap appears to be an implementation detail.

-------------------------

paulyoung | 2022-07-29 13:03:30 UTC | #11

I should perhaps capitalize on this opportunity to (yet again) shill variants üòÑ

The ‚Äúnewtype‚Äù pattern exists for situations where the type checker sees types as the same but you‚Äôd like to attach some additional meaning to them _and_ get some help from the type system.

For example, this isn‚Äôt going to help much:

```
type Kilometers = Nat;
type Miles = Nat;
```

With the above we can still easily provide a value representing kilometers somewhere we should be providing a value in miles.

However, we can do the following instead:

```
type Kilometers = { #km : Nat };
type Miles = { #miles : Nat };
```

Now we have to tag values with the desired units and the type checker will prevent us from providing incorrect values.

We can even do this:

```
type Distance = Kilometers or Miles;
```

I mention this in my talk from Motoko Bootcamp:

https://youtu.be/GFenqSGhj7I

So, perhaps you‚Äôd prefer to do this for the various Map implementations. e.g.

```
type HashMap<K, V> = { #hashMap : HashMap<K, V> };
type TrieMap<K, V> = { #trieMap : TrieMap<K, V> };
```

-------------------------

paulyoung | 2022-07-29 14:01:02 UTC | #12

For the same reasons as above, it wouldn‚Äôt prevent programming mistakes like this though:

```
private var _registry
  : TrieMap<Types.TokenIndex, Types.AccountIdentifier>
  = #trieMap HashMap.fromIter(state._registryState.vals(), 0, ExtCore.TokenIndex.equal, ExtCore.TokenIndex.hash);
```

-------------------------

