peterparker | 2022-03-10 11:53:17 UTC | #1

After the upgrade to dfx v0.9.2 I noticed that the `dfx build` command now generates a additional file for my canisters with the extension `.most`

Out of curiosity, what are these `.most` files?

![Capture d‚ÄôeÃÅcran 2022-03-10 aÃÄ 12.51.52|690x450](upload://hPvICsCNqhzSq4DOiS6W4lMqe4g.jpeg)

-------------------------

peterparker | 2022-03-10 13:10:24 UTC | #2

Yeah particularly because I get errors if I redeploy after some modification.

> ‚ùØ dfx deploy --network=ic --no-wallet manager
Deploying: manager
All canisters have already been created.
Building canisters...
Installing canisters...
WARNING!
Stable interface compatibility check failed for canister 'manager'.
Upgrade will either FAIL or LOSE some stable variable data.
.../.dfx/ic/canisters/manager/manager.old.most:1.28-1.36: type error [M0029], unbound type BucketId
Do you want to proceed? yes/No

-------------------------

Gekctek | 2022-03-10 13:58:01 UTC | #3

Looks like it might have to do with a new stable types upgrade compatibility feature.
My guess it's the stable type is not compatible with changes made

https://github.com/dfinity/motoko/pull/2887

`--stable-types: emit signature of stable types to .most file`

-------------------------

Ori | 2022-03-10 15:16:34 UTC | #4

Note that there‚Äôs a bug in the moc version dfx 0.9.2 uses (you can ignore the warning if you‚Äôre confident you‚Äôve not made any breaking changes), see here:

https://forum.dfinity.org/t/bug-stable-interface-compatibility-check-failed-for-canister/11392/2?u=ori

-------------------------

peterparker | 2022-03-10 15:43:58 UTC | #5

Indeed it look like I can safely ignore the warning. I actually did loose some stable variables today but it's because I am an idiot üòÖ.

Regarding my original question, I then understand that `.most` files are files that contain the candid representation of stable variables / types of my canisters.

-------------------------

peterparker | 2022-03-10 15:44:22 UTC | #6

Thanks for the feedback @Ori and @Gekctek

-------------------------

claudio | 2022-03-10 20:08:17 UTC | #7

Almost, it's actually not Candid, but a Motoko type signature for the stable variables and goes beyond Candid by allowing mutable data and parameterized type definitions.

The Motoko data is itself stored in an extended Candid format, but that's an implementation detail that is likely to change in future (without affecting external behaviour).

-------------------------

peterparker | 2022-03-10 19:41:52 UTC | #8

Thanks for the explanation @claudio

-------------------------

jzxchiang | 2022-03-10 23:51:06 UTC | #9

What does `most` stand for? My guess is "motoko stable types" but I'm not confident..

-------------------------

claudio | 2022-03-11 08:50:20 UTC | #10

Yep.


Are we at 20 characters yet?

-------------------------

