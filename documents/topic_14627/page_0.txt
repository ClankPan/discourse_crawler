saikatdas0790 | 2022-07-30 11:09:48 UTC | #1

Has there been any progress on this since this was last asked?

[This](https://forum.dfinity.org/t/automatically-generate-candid-from-rust-sources/5924/17) response by @chenyan has the last update that this was something being worked on.

The documentation [here](https://internetcomputer.org/docs/current/developer-docs/build/languages/candid/candid-howto/#interact-with-a-service-from-a-rust-canister) references this but wasn't able to figure out how to set this up exactly
![image|690x38](upload://dj3GxeADF75FxGNAJ8eQtr7ISLW.png)

I also found these 2 pull requests that pertain to this discussion but haven't been able to completely work out how to make this work

https://github.com/dfinity/cdk-rs/pull/169
and
https://github.com/dfinity/cdk-rs/pull/28

Any updates/thoughts?

-------------------------

oss | 2022-07-30 14:35:08 UTC | #2

Hey yeah we've been able to generate candid from rust for a while now. Not sure why it's still kinda hidden from documentation. All the psychedelic projects use it ! You just need to add the CandidType derive, and the
 `candid_service(query/update/init)` macro to all the methods and types that need to be exported. Then, the export_service!() macro will generate function that returns the candid from rust, which can be run differently depending on the project setup

For projects using a main.rs: You can add a main function only run when target is not wasm32. Then, running `cargo run` would print the candid, which can be easily piped to a file (`cargo run > candid.did` ). This works well with mono canister architechtures.
Example: https://github.com/Psychedelic/nft-marketplace/blob/develop/marketplace/src/main.rs#L1223-L1236 

for projects using cdylib/lib.rs: You can make a rust test called save_candid, which would save the candid to a file in the project root when running `cargo test`. This works really well for multi canister architectures.
 Example: https://github.com/Psychedelic/cap/blob/main/canisters/bucket/src/lib.rs#L110-L130

Personally, I've been moving solely to the lib.rs/rust test flow, to allow exporting multiple canisters did interfaces with a single command. If you have other tests as well, you can run only the candid tests using `cargo test save_candid`

--- 

We also plan on making this easy and automatic with the https://docs.rs/ic-kit/latest/ic_kit/, where we'd include the corresponding candid_method with the `#[update/query/init]` macro automatically

-------------------------

saikatdas0790 | 2022-07-30 16:55:45 UTC | #3

Thank you so much for the response.

With the mechanism that uses the test to generate the .did file, what is the value of `CARGO_MANIFEST_DIR` that you are passing in the code highlighted here?
https://github.com/Psychedelic/cap/blob/cf9a9595994f893c42b0e1e434d3aa6798d67f23/canisters/bucket/src/lib.rs#L126

-------------------------

oss | 2022-07-31 15:50:54 UTC | #4

Of course! Having auto generation makes work so much easier.

The cargo manifest dir is a environment variable provided (by cargo) during the test run, of the location of the crates cargo.toml. This is the crate toml, not the workspace, so we step back 2 parent directories to the project root, and place the candid in the `candid/<name>.did`

-------------------------

saikatdas0790 | 2022-07-31 05:47:29 UTC | #5

Right, I was asking what exact value you were passing.

I ended up shortening it further by doing it like this instead of relying on the env variable

![image|690x83](upload://rxDf1hpo9hVCp4eqDh82P6EQ0KZ.png)

-------------------------

oss | 2022-07-31 15:50:18 UTC | #6

Sorry, I had meant to add (but somehow didn't) that it's provided automatically by cargo

This is a good solution as well!

-------------------------

lastmjs | 2022-08-15 19:04:04 UTC | #7

@chenyan It would sure be nice to not have to do these workarounds to get that file generated. I'd love dfx to do it for you

-------------------------

lastmjs | 2022-08-15 19:06:13 UTC | #8

@oss so I assume you need to pass in the path to the generated Candid file in dfx.json? So for example, cargo test needs to run before installing the Wasm binary?

-------------------------

oss | 2022-08-15 21:39:55 UTC | #9

@lastmjs Exactly, I usually like having the step automatically done through a makefile (make build does the candid gen, then the dfx build). 

Separately, we're finding a solution with the kit to tie this all together. In 0.5, query/update/init macros automatically use the candid_method, as well as the candid being exported with a single macro at the end of your file. Ideally we're looking for a solution to just do everything on compile, but already the process is 10x better

-------------------------

q2333gh | 2023-09-08 06:04:12 UTC | #10


[quote="oss, post:2, topic:14627"]
Personally, Iâ€™ve been moving solely to the lib.rs/rust test flow, to allow exporting multiple canisters did interfaces with a single command. If you have other tests as well, you can run only the candid tests using `cargo test save_candid`
[/quote]

can this work for ic-cdk = "0.10.0" ? 
I`m trying to generate did file for a half day .
Still like an ape in Space Odyssey.
The official doc is lake of that part on how to auto generate 
did file for frontend canister use.

-------------------------

Dustin | 2023-09-08 11:55:25 UTC | #11

with 0.10.0, a new release came out that makes generating did for rust a lot easier.
https://forum.dfinity.org/t/automatically-generate-candid-from-rust-sources/5924/56

it's not yet fully integrated to `dfx` but already simplifies things a lot.

-------------------------

saikatdas0790 | 2023-09-08 13:10:15 UTC | #12

That article is locked behind a paywall for me..Got a different link?

![image|320x500](upload://a5APNgRJkROeWhy5p5RtBdZvLNC.png)

-------------------------

Dustin | 2023-09-08 13:58:59 UTC | #13

@peterparker is the author of the article. Maybe he has an open access link or a different version somewhere?

-------------------------

peterparker | 2023-09-08 14:04:15 UTC | #14

Indeed, here crossposted on my website: [https://daviddalbusco.com/blog/automatic-candid-generation-in-rust-exploring-the-ic-cdk-v0-10-0-update/](https://daviddalbusco.com/blog/automatic-candid-generation-in-rust-exploring-the-ic-cdk-v0-10-0-update/)

Otherwise opening the Medium link in an incognito browser should do to.

-------------------------

