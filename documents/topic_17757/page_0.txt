mparikh | 2023-01-02 03:46:02 UTC | #1

In my mental view, i think about the memory manager as a partition manager. 

Specifically i think about A memory in memory manager(there can be a theoretical max of 255 memories) as a partition. In that mental model, i noticed that the memory (partition) is allocated at the time of first insert and not at init time.

 In context of operating a file system within the confines of that memory; coperating with other memories (partitions) that might store BTreeMaps or other structures, would it be possible to make an external call to the memory manager to explicitly allocate a memory in context of 1024 pages without waiting for an insert?

Further  each memory segment is 1024 wasm pages and can grow dynamically(but currently,  i believe, only in context of additional inserts in the BTreeMaps) 1024 pages at a time, would it possible for the filesystem to call the memory manager to allocate more segments as needed? I may not using the term "segment" correctly as in the code. 
@ielashi @roman-kashitsyn @domwoe

-------------------------

ielashi | 2023-01-02 04:57:50 UTC | #2

Yes, you can explicitly grow each memory as much as you need to. Here's an example from [the documentation](https://docs.rs/ic-stable-structures/0.3.0/ic_stable_structures/memory_manager/index.html).

```
use ic_stable_structures::{DefaultMemoryImpl, Memory};
use ic_stable_structures::memory_manager::{MemoryManager, MemoryId};

let mem_mgr = MemoryManager::init(DefaultMemoryImpl::default());

// Create different memories, each with a unique ID.
let memory_0 = mem_mgr.get(MemoryId::new(0));
let memory_1 = mem_mgr.get(MemoryId::new(1));

// Each memory can be used independently.
memory_0.grow(1);
memory_0.write(0, &[1, 2, 3]);

memory_1.grow(1);
memory_1.write(0, &[4, 5, 6]);
```

The `MemoryManager` and stable `BTreeMap` are completely decoupled, and each can be used independently.

-------------------------

