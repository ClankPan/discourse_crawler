rustacean1 | 2024-02-20 12:59:25 UTC | #1

this is how my store looks like:
```ts
export interface LoggedInProfile {
  'user_principal' : Principal,
  'username' : string,
  'open_offers' : Array<[bigint, OfferDetails]>,
  'user_deposit_address' : IcrcAccount,
  'registered_at' : bigint,
  'balances' : Array<[Principal, BalanceDetail]>,
}

export type OptionalProfile = LoggedInProfile | null;

export interface ProfileStoreData{
    is_available: boolean,
    profile: OptionalProfile
};

export const profileStore = writable<ProfileStoreData>({
    is_available: false,
    profile: null,
});
```
I made a custom function to handle `undefined | Icrc1Acccount` as argument:
```ts
const show_encodedIcrcAccount = (account: undefined | IcrcAccount) => {
  if (account !== undefined){
    console.log(account);
    return encodeIcrcAccount(account)
  }else{
    return "Failed to encode"
  }
 }
```
![Screen Shot 2024-02-20 at 18.25.59|426x500](upload://4VJUzOx1Sb6x6RoVXvBoUK1nbbC.png)

this is how I'm passing the value:
```ts
<p>Encoded IcrcAccount: {show_encodedIcrcAccount($profileStore.profile?.user_deposit_address)}</p>
```

the problem here is, I'm just receiving the principal.
![Screen Shot 2024-02-20 at 17.58.29|690x239](upload://si6AflG6Lj9wdIkwQSUCZHmv3wx.png)

-------------------------

princess_eth | 2024-03-04 01:32:10 UTC | #2

Are you still having this issue? 

Are you sure that the returned encoded ICRCAccount listed is a principal? It looks like it might be a canister id.

-------------------------

