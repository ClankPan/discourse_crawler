skilesare | 2023-01-06 19:07:27 UTC | #1

This bounty likely needs some more discussion around the signature of the parsed object. I'm not an HTTP expert, so please weigh in below if you can think of some other functions/objects that would be helpful or if I'm not handling some edge cases.  One thing I considered was if we should provide hardcoded pathways to some of the common headers. It is up for debate.

# Create a HTTP Request Parser in Motoko - #8

## Current Status: Discussion

* **Discussion** (01/11/2022) <- We are here
* Ratification 
* Open for application 
* Assigned
* In Review
* Closed

[Latest Official Issue Info - ICDevs.org](https://icdevs.org/bounties/2022/01/11/HTTPRequest-Parser.html)

## Bounty Details

* Current Bounty Amount: 20 ICP
* ICDevs.org Match Available: 20 ICP - (For every ICP sent to 860bd56f4c8a9d40f26462e51e2a4dd4e27cf0e1463372a1179df089695bfd63, ICDevs.org will add one more ICP to the bounty, up to 20 ICP, After 20 ICP, Donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)
* Time Left: Expires 12/31/2022
* Project Type: Single Contributor
* Opened: 01/22/2022
* Time Commitment: Days
* Project Type: Traditional
* Experience Type: Beginner - Motoko
* Issue Type: Application Development

## Description

This bounty gives the opportunity to

* learn how http_request works with the Internet Computer
* learn and contribute to string parsing in motoko
* learn how to create and publish a vessel package

The developer will need to create a vessel package called HttpRequestParser that parses the [HTTPRequest type](https://github.com/dfinity/agent-rs/blob/b9c0b28c2dfd7fbd2a654874f8fd9a9773fa0c8d/ic-utils/src/interfaces/http_request.rs#L16) into a more useable and extensible object.  We suggest:

    {
        method: Text;
        url: {
            original: Text;
            protocal: Text //http or https - may always be https?;
            port: Nat16; //maybe always 443? What about local replica?
            host: {
                original: Text;
                array: Array<Text>; //(canisterID at 0, ic0 at 1, app at 2) //will we always have this structure?
                canister: Principal; //parse the canisterID into a principal
            };
            path: {
                original: Text;
                array: Array<Text>; // split path by "/" into an array that can be referenced;
            };
            query: {
                original: Text; //everything after the ? and before an anchor
                get: (Text) -> ?Text; //pass in a key and get value. null if not present
                hashMap: HashMap<Text, Text>;
                keys: [Text]; //list of query keys
            };
            anchor: Text; //an anchor if available(after the #;
            
        };
        headers: {
            original: Array<(Text, Text)>;
            get: (Text) -> ?Text //pass in a key and get value. null if not present
            hashMap: HashMap<Text, Text>;
            keys: [Text]; //list of header keys
        };
        body: ?{ //Get requests won't have a body
            original: Blob
            size: Nat; //size of the body
            form: { //if the content-type is as specified at https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST, parse the form and populate the collection
                get: (Text) -> ?Text //pass in a key and get value. null if not present
                hashMap: HashMap<Text, Text>;
                keys: [Text]; //list of form keys
            };
            text: () -> Text; //converts the Blob to plain text
            files: (Text) -> ?Buffer<Nat8>; //returns the formdata as a byte array; null if the form entry does not exist 
            file: () -> ?Buffer<Nat8>; //if not formdata and only one file is provided it will be here.
            bytes: (start, end) -> Buffer<Nat8>;//return the specified bytes from the blob.
        };

    };

This library is an opportunity to start a RegEx like library for motoko. RegEx is hard and big and complicated, so this is not a requirement, but if the bounty hunter wanted to dive into the basics of RegEx and explore how well/poorly motoko was going to be for RegEx it would be a bonus.

Prior art that may help in getting you started:

[https://github.com/aramakme/aramakme_nft_auction/blob/f0ca7fb629814dc24a90ad84c7d024a49390e38b/main.mo#L2757](https://github.com/aramakme/aramakme_nft_auction/blob/f0ca7fb629814dc24a90ad84c7d024a49390e38b/main.mo#L2757)
[https://github.com/dfinity/motoko-base/blob/57c3bb724dfe36928d443f5a81446872bf646de9/src/Text.mo#L346](https://github.com/dfinity/motoko-base/blob/57c3bb724dfe36928d443f5a81446872bf646de9/src/Text.mo#L346)

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the community and the DFINITY Bounty Accelerator Grant. If you would like to turbocharge this bounty you can seed additional donations of ICP to 860bd56f4c8a9d40f26462e51e2a4dd4e27cf0e1463372a1179df089695bfd63.  ICDevs will match the bounty 1:1 for the first 20 ICP and then 0.25:1 after that.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).

## General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has be been given and the bounty is closed.

# Matches

10 ICP - DFINITY Accelerator Grant


[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

dani | 2022-01-11 17:44:22 UTC | #2

Seen front the client perspective I think this is the feature I’d wish for the most.

-------------------------

quint | 2022-01-11 18:41:24 UTC | #3

Here are some references that might come in handy:
- [Common Http Types for Motoko](https://github.com/aviate-labs/http.mo)
- [JSON for Motoko](https://github.com/aviate-labs/json.mo)

-------------------------

paulyoung | 2022-01-11 19:13:48 UTC | #4

I used the [`url` crate](https://docs.rs/url/latest/url/) to parse the URL portion in Rust. It might serve as some inspiration.

I suggest trying to use parser combinators over regular expressions.

-------------------------

nomeata | 2022-01-11 22:31:54 UTC | #5

I would strongly suggest not assuming that the `Host` always refers to a canister. That this is currently usually not he case is a slight embarrassing state of affairs, let's not cement it further. (In fact it's not even true now; `identity.ic0.app` exists, and people do run their own `icx-proxy` instances to get nice hostnames.)

Also, it's odd to represent data redundantly (map and function and list?). I'd parse it as just `[(Text,[Text])]`, this way repeated fields are supported (as they are allowed in HTTP), and users needing a hashmap can use `HashMap.ofList` easily.

-------------------------

skilesare | 2022-01-11 23:24:59 UTC | #6

[quote="nomeata, post:5, topic:10219"]
Also, it’s odd to represent data redundantly (map and function and list?). I’d parse it as just `[(Text,[Text])]` , this way repeated fields are supported (as they are allowed in HTTP), and users needing a hashmap can use `HashMap.ofList` easily.
[/quote]

Great point!  I'll adjust the requirments.

[quote="nomeata, post:5, topic:10219"]
I would strongly suggest not assuming that the `Host` always refers to a canister. That this is currently usually not he case is a slight embarrassing state of affairs, let’s not cement it further. (In fact it’s not even true now; `identity.ic0.app` exists, and people do run their own `icx-proxy` instances to get nice hostnames.)
[/quote]

I forgot about those!  I'm trying to think if there is any reason for this to try to get the canister ID and I don't think there is...this should be a tool to get things organized and not a place to get work done so anyone using it that wants the canister ID should be able to get from their canister code.

-------------------------

skilesare | 2022-01-11 23:52:23 UTC | #7

Updated Spec.

Changes:

* Moved files into the form as that is how that is pushed in if you are doing multiple files
* Support multiple files of the same name
* Support multiple headers of the same name
* Support multiple form fields of the same name
* Specified that the get function is just a helper method.  I think obj.header.get("content") is cleaner IMO than HashMap<Text, [Text]>.ofList("content", myList); (And I can't actually find ofList in the base library..is this something new @nomeata ?)

    {
        method: Text;
        url: {
            original: Text;
            protocal: Text //http or https - may always be https?;
            port: Nat16; //maybe always 443? What about local replica?
            host: {
                original: Text;
                array: Array<Text>; // host split at the "."s
            };
            path: {
                original: Text;
                array: Array<Text>; // split path by "/" into an array that can be referenced;
            };
            query: {
                original: Text; //everything after the ? and before an anchor
                get: (Text) -> ?Text; //helper function: pass in a key and get value. null if not present
                hashMap: HashMap<Text, Text>;
                keys: [Text]; //list of query keys
            };
            anchor: Text; //an anchor if available(after the #;
            
        };
        headers: {
            original: Array<(Text, Text)>;
            get: (Text) -> ?[Text] //helper function: pass in a key and get values. null if not present
            hashMap: HashMap<Text, [Text]>;
            keys: [Text]; //list of header keys
        };
        body: ?{ //Get requests won't have a body
            original: Blob
            size: Nat; //size of the body
            form: { //if the content-type is as specified at https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST, parse the form and populate the collection
                get: (Text) -> ?[Text] //helper function: pass in a key and get value. null if not present
                hashMap: HashMap<Text, [Text]>;
                keys: [Text]; //list of form keys;
                files: (Text) -> ?[Buffer<Nat8>]; //helper function returns the formdata as a byte array; null if the form entry does not exist 
            };
            text: () -> Text; //converts the Blob to plain text
            file: () -> ?Buffer<Nat8>; //if not formdata and only one file is provided it will be here.
            bytes: (start, end) -> Buffer<Nat8>;//helper function: return the specified bytes from the blob.
        };

    };

-------------------------

skilesare | 2022-01-20 21:14:19 UTC | #8

This is now in “application” status. Who wants to build it? This is a chance to build something that almost every project will.use in the future. 

If you are one of the projects that needs it, consider accelerating the bounty(info above).

-------------------------

paulyoung | 2022-01-29 03:34:24 UTC | #9

[quote="paulyoung, post:4, topic:10219"]
I suggest trying to use parser combinators over regular expressions.
[/quote]

https://github.com/crusso/mo-parsec

-------------------------

Safik | 2022-03-18 07:54:25 UTC | #10

What should it look like in the end?
Option 1
A canister with a function and a json string parameter, for example http_request(json: Text) → Trie
where json is { method: Text; url: { }...}
And all interaction on the client is also via Actor and HttpAgent (**@dfinity/agent**)
Or
Option 2
Is it possible to build a request from scratch using HTTP/HTTPS specifications?

-------------------------

tomijaga | 2022-03-19 00:32:05 UTC | #11

I would love to work on this bounty. I have a repo with some of the fields in the spec implemented here https://github.com/tomijaga/http-parser.mo . I plan to add tests and documentation once I have completed the completed `body` field. I estimate it will take two weeks to complete this project.

**My Solution**

My solution splits the url into its different parts (scheme, domain, subdirectories, query and anchor) and returns them in the object spec.

For the request body, I plan to convert the blob to text and follow the specifications on the site https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST.

An external dependency I am using to retrieve the `HeaderField` and `Request` types is the `http.mo` package from aviate-labs

An issue I came across is I can not use `query` as a field in the object because it is already a keyword in the Motoko programming language. So I changed it to `queryObj` . I am open to better naming suggestions.

From a user's perspective, I think it would be helpful to add a `deserialize()` method that converts a JSON text in the body to an object.

**About Me**

I have some experience contributing to open source. These include a js SDK, a rust SDK and an HD key generation tool for an open-source blockchain project. These projects can be on my [github profile](https://github.com/tomijaga)

I took part in the Motoko Bootcamp and learned a lot about Motoko from completing the daily challenges. I better understand Motoko syntax and how to use vessel for importing and publishing packages.

-------------------------

skilesare | 2022-03-19 15:09:54 UTC | #12

Fantastic. Thanks for the detailed application. I’ll submit it to the board, but I don’t see any reason why you shouldn’t get started!

-------------------------

skilesare | 2022-03-21 21:59:31 UTC | #13

You are assigned! Please create a repo to hold your work and let us know what it is!

-------------------------

cryptoschindler | 2022-03-22 12:40:00 UTC | #14

I think the repo is private, can you make it public? I'd love to follow along

-------------------------

tomijaga | 2022-03-22 17:55:25 UTC | #15

My bad, I've made it public now. https://github.com/tomijaga/http-parser.mo

-------------------------

ArjaanBuijk | 2022-03-30 20:17:15 UTC | #16

@tomijaga ,

Can I already do some testing, or should I wait a bit?

-------------------------

paulyoung | 2022-03-31 03:39:25 UTC | #17

[quote="paulyoung, post:4, topic:10219"]
I used the [ `url` crate ](https://docs.rs/url/latest/url/) to parse the URL portion in Rust. It might serve as some inspiration.
[/quote]

I came across this recently and thought the people in this thread might be interested.

https://github.com/yescallop/fluent-uri-rs

The `url` crate refers to the [URL standard](https://url.spec.whatwg.org/) whereas this adheres to IETF [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986/).

-------------------------

skilesare | 2022-03-31 04:02:11 UTC | #18

Is there a comptable standard for a body parser as well? I’d like to get *something* out and then we can get nitty about standards because they usually help.

-------------------------

tomijaga | 2022-04-01 07:19:17 UTC | #19

What's left is percent decoding, testing and documentation. So you can start testing it out. If you run into any problems, pls let me know.

I made some changes to the initial spec. I added a `fileKeys` array to the form object type and created a new type for files.

```
form: {
        get: (Text) -> ?[Text];
        hashMap: HashMap.HashMap<Text, [Text]>;
        keys: [Text];
        
        fileKeys: [Text];
        files: (Text) -> ?[File];
    };

public type File = {
        name: Text;
        filename: Text;
        
        mimeType: Text;
        mimeSubType: Text;

        start: Nat;
        end: Nat;
        bytes: Buffer.Buffer<Nat8>;
    };

```

-------------------------

ArjaanBuijk | 2022-04-01 11:28:56 UTC | #20

@tomijaga ,
that's great!  I will let you know how it works out. 

Do you happen to have some examples that demonstrate how to use it? 

How does one actually call it when it is deployed to either the local network or the IC?

I would be great if you can share some examples. Maybe in `curl` format or even better a [postman collection](https://www.postman.com/collection/)?

-------------------------

skilesare | 2022-04-01 13:37:59 UTC | #21

I’d suggest switching to triemap as hashmap has serious memory issues.

-------------------------

tomijaga | 2022-04-02 06:28:30 UTC | #22

> Do you happen to have some examples that demonstrate how to use it?

Yes, I have an [example canister]( https://github.com/tomijaga/http-parser.mo/tree/main/example) in the repo with a simple HTML form for uploading a file and some fields. You can clone the repo and deploy it locally to access the form at http://localhost:8000. I have a function called [debugRequestParser](https://github.com/tomijaga/http-parser.mo/blob/main/example/src/main.mo#L15) that prints the parsed request to the console once the form is submitted. This function should show how to use and access some fields in the object.

> How does one actually call it when it is deployed to either the local network or the IC?

The parser is a module that can be imported into your canister by adding the `.vessel.dhall` and `package-set.dhall` files specified in the example canister and this line, `import HttpParser "mo:HttpParser";`, to your code. It would be called in the `http_request` function on the incoming request to the canister. Here's a snippet of what it would look like:
```motoko
    public query func http_request(rawReq: HttpParser.HttpRequest) : async HttpParser.HttpResponse {

        let req = HttpParser.parse(rawReq);

        let {host; port; path; queryObj; anchor; original = url} = req.url;

               ...
```

-------------------------

tomijaga | 2022-04-02 09:11:28 UTC | #23

Thanks, I will switch to that. Do you have any other suggestions on how to be more efficient? Parsing files over 30kb is really slow. It takes about 40s. I think it's because I'm concatenating the characters in every line when I only need to check the first character for a match and move to the next line if it fails. I will try this out and get back to you about the performance improvements if there are any.

-------------------------

tomijaga | 2022-04-02 10:52:52 UTC | #24

I just implemented this, and there were some improvements. The module now parses data at 100kb/s, which is still relatively slow as it takes about 10 hours to parse a 3GB file. I will check other similar parsing libs to see how I can increase the performance further.

-------------------------

skilesare | 2022-04-02 14:19:35 UTC | #25

Wow.  We are going to need a strategy for that. We really need a highly performant regex function. I’ll try to take a look, but perhaps @paulyoung has an idea?

-------------------------

skilesare | 2022-04-03 00:40:16 UTC | #26

One thing to keep in mind is that requests on the IC are limited to 2MB, so you are unlikely to run into a scenario where you need to parse more than that. I think this applies to http_request as well.

If you want a file bigger than that, you have to chunk it.

-------------------------

paulyoung | 2022-04-05 02:21:53 UTC | #27

[quote="skilesare, post:25, topic:10219, full:true"]
Wow. We are going to need a strategy for that. We really need a highly performant regex function. I’ll try to take a look, but perhaps @paulyoung has an idea?
[/quote]

As I said earlier in this thread; I suggest using parser combinators, or at least a parser that consumes the input as it goes.

I haven’t used these but they might be a good place to start.

https://github.com/crusso/mo-parsec

https://github.com/aviate-labs/parser-combinators.mo

-------------------------

skilesare | 2022-04-15 01:55:48 UTC | #28

Any new updates?  Looking forward to paying out the bounty!

-------------------------

tomijaga | 2022-04-16 21:22:24 UTC | #29

Yes, I've made a few updates. I've added support for percent-encoded search queries, written [unit tests](https://github.com/tomijaga/http-parser.mo/blob/main/tests/Test.mo) for each class and added  [documentation](https://github.com/tomijaga/http-parser.mo/blob/main/docs.md) for the ParsedHttpRequest data type. 

However, I haven't been able to get the module to parse files faster. I've tried looking into parser combinators (thanks @paulyoung for this btw),  but I haven't been able to wrap my head around them. It will take some time to understand how they work and use them in the module.

-------------------------

skilesare | 2022-04-16 21:41:56 UTC | #30

Please push your changes as they are already super useful. There are better ways to get files into the IC than http_request anyway. We can always explore and add a version later.

-------------------------

paulyoung | 2022-04-16 23:12:29 UTC | #31

This is a beginner tutorial in Rust but I think it describes some fundamental concepts well. I would focus on the “Defining the parser” and “Combinators” sections.

https://bodil.lol/parser-combinators/

Something like this might be closer in syntax: https://talk.objc.io/episodes/S01E15-building-parser-combinators-part-1

-------------------------

tomijaga | 2022-05-02 03:10:57 UTC | #32

Hey @skilesare , I have updated the repo with my changes and completed the development for this version. I believe the package is ready to be reviewed and would be awaiting your feedback on any other improvements that could be made.

-------------------------

skilesare | 2022-05-02 03:25:06 UTC | #33

Fantastic.  This bounty is officially in preview mode.

We are using a fork in the Origyn NFT already! I'll review and update to this.

Community:  Please review @tomijaga work.  This is a very cool library that will save you a ton of time when interpreting http_request queries!

-------------------------

skilesare | 2022-05-16 20:07:54 UTC | #34

This bounty is now closed and awarded.  Congrats @tomijaga!

-------------------------

tomijaga | 2022-05-22 07:43:07 UTC | #35

Thank you, @skilesare and everyone in this forum for your contributions and support.
I will continue to maintain the repo and work on a more performant version in my free time.
If you are interested in using this lib in your project, you can find the repo here
https://forum.dfinity.org/t/icdevs-org-bounty-8-httprequest-parser/10219/15?u=tomijaga

-------------------------

