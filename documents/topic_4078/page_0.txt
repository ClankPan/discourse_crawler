lastmjs | 2021-05-20 15:29:17 UTC | #1

I am using localhost subdomains in development, so my URLs look like this: http://ryjl3-tyaaa-aaaaa-aaaba-cai.localhost:8000/

I need to do this to use ES modules natively while in development, because native ES modules do not set the Referer properly for the IC (there is no canisterId query parameter).

This has been working fine so far, but I just tried to do an update call for the first time from the frontend, and I keep getting this error message in response:

```json
{
  "message": "Fail to verify certificate",
  "stack": "Error: Fail to verify certificate\n    at pollForResponse (http://ryjl3-tyaaa-aaaaa-aaaba-cai.localhost:8000/_snowpack/pkg/@dfinity/agent.js:13815:15)\n    at async caller (http://ryjl3-tyaaa-aaaaa-aaaba-cai.localhost:8000/_snowpack/pkg/@dfinity/agent.js:14000:35)\n    at async graphQLFetcher (http://ryjl3-tyaaa-aaaaa-aaaba-cai.localhost:8000/:39:21)"
}
```

I assume this is because I am using localhost subdomains, and the certificate verification process is not looking for that...perhaps?

More information about why I am using localhost subdomains: https://forum.dfinity.org/t/how-does-replica-know-which-canister-to-serve-from/2438/9

-------------------------

kpeacock | 2021-05-20 19:39:35 UTC | #2

I'm pretty sure that this is caused by the new update that hardcodes the mainnet rootkey into the HttpAgent. After initializing, you can call `agent.fetchRootKey()` to use the signature of your local replica.

We have an open improvement item to automatically do this during local development, and I apologize for pushing that responsibility out onto the developer in the meantime

-------------------------

lastmjs | 2021-05-20 16:32:59 UTC | #3

This worked! Thank you

-------------------------

nomeata | 2021-05-21 07:52:59 UTC | #4

Note that ideally you should not be calling `.fetchRootKey()` in the production build that you upload to the Internet Computer, else you lose the security properties of update call repsonses, i.e. a man-in-the-middle attack could forge the certificates.

-------------------------

lastmjs | 2021-05-21 14:22:46 UTC | #5

Duly noted, thank you

-------------------------

skilesare | 2021-05-22 00:35:28 UTC | #6

Where should we put this call if we are running the local identity service? This is what I'm running into with https://github.com/dfinity/internet-identity/issues/291

-------------------------

skilesare | 2021-05-22 00:56:44 UTC | #7

I stuck it a couple of places in iiConnection.ts.  Looks like it is routed around in prod and for some reason, the identity project builds in production mode.

-------------------------

lastmjs | 2021-05-22 00:57:57 UTC | #8

I'm not sure what your code looks like, but I put the call (it's asynchronous so make sure to wait for the promise to resolve) before my own update call

-------------------------

gladguy | 2021-07-09 03:40:58 UTC | #9

[quote="nomeata, post:4, topic:4078, full:true"]
Note that ideally you should not be calling `.fetchRootKey()` in the production build that you upload to the Internet Computer, else you lose the security properties of update call repsonses, i.e. a man-in-the-middle attack could forge the certificates.
[/quote]

Where we should call agent.fetchRootKey() kyle ?

-------------------------

gladguy | 2021-07-09 03:46:32 UTC | #10

import { Actor, HttpAgent } from '@dfinity/agent';
import { idlFactory as hello_idl, canisterId as hello_id } from 'dfx-generated/hello';

const agent = new HttpAgent();

agent.fetchRootKey();
const hello = Actor.createActor(hello_idl, { agent, canisterId: hello_id });

document.getElementById("clickMeBtn").addEventListener("click", async () => {
  const name = document.getElementById("name").value.toString();
  const greeting = await hello.greet(name);

  document.getElementById("greeting").innerText = greeting;
});


Still throwing the same erro
![Screenshot from 2021-07-09 07-43-48|690x387](upload://caDqQzgny6pIHa2tiAcJuSTKVbJ.png)

Kindly reply

-------------------------

Seb | 2021-07-09 08:25:17 UTC | #11

Try downgrading the @dfinity/agent package to 0.8.0 in your package.json. 
I have no idea of what is happening, I just know that it solved this error for me.

-------------------------

gladguy | 2021-07-09 15:31:12 UTC | #12

Thanks seb. Let me try that.

-------------------------

kpeacock | 2021-07-14 00:35:54 UTC | #13

Sorry for the delay here - I've been really focused on upgrading DFX and improving the starter code.

My recommendation is now to try upgrading! 

`DFX_VERSION="0.7.7" sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"` along with js-agent `0.9.2` should be working fine, without needing to worry about calling the certificate anymore.

-------------------------

peterparker | 2021-07-22 15:49:14 UTC | #14

FYI still got the error even though I am using sdk v0.7.7 and js-agent v0.9.2

-------------------------

Fulco | 2021-07-23 11:20:39 UTC | #15

If anybody had trouble running the whoami demo as described here https://kyle-peacock.com/blog/dfinity/integrating-internet-identity locally I got It working with this:

as noted in the blogpost you need to add:

```
identityProvider: "http://localhost:8000?canisterId=LOCAL_INTERNET_IDENITY_CANISTER_ID"
```
to the authclient.login() argument

I also added:

```
 agent.fetchRootKey();
```
below 
```
const agent = new HttpAgent({ identity });
```
in the handleAuthenticated function 

furthermore I updated @dfinity/agent to 0.9.2 in the devdependencies and used dfx 0.7.7

and added a .env file in the auth-client-demo repo with CANISTER_ID=YOUR_WHOAMI_CANISTER_ID 

good luck!

-------------------------

Ori | 2021-07-23 13:28:35 UTC | #16

Take care not to use fetchRootKey() in production here, also if the project is updated to use 0.7.7 this should be taken care of for you in the canister’s generated js file, so you shouldn’t need to add it yourself.

-------------------------

Fulco | 2021-07-23 17:10:44 UTC | #17

It didn't work locally for me without the fetchRootKey() but maybe I did something wrong.

EDIT: this is probably because the web-auth-demo was still made for 0.7.2 be sure to check out this post https://kyle-peacock.com/blog/dfinity/dfx-0_7_7-changes/#minimal-update

-------------------------

kpeacock | 2021-07-23 20:04:20 UTC | #18

I've updated the auth-client demo to `0.8.0` https://github.com/krpeacock/auth-client-demo. Still need to go back and make adjustments to the blog post, but I wanted the reference to be out there.

If you've already run it before, I recommend resetting things with `git clean -dfx` and then following the README directions

-------------------------

jzxchiang | 2021-11-20 20:04:35 UTC | #19

So I'm starting to get this exact error now `Error: Fail to verify certificate` in React Native. I'm pretty sure it worked 2 months ago when I last enabled BLS signature validation. (I disabled it for the last 2 months until today, when I wanted to test it out again.)

FYI I'm on dfx 0.7.1, and I do call `await agent.fetchRootKey` before making an update call.

I'm also NOT using Internet Identity, and instead use an Identity that I construct from a private key that I get from a 3rd party, but it also doesn't work with the `AnonymousIdentity`. Here's the code where I construct the Actor:

```
function createActor(identity?: Identity) {
  const agent = new HttpAgent({host: getHost(), identity});
  const actor = Actor.createActor<_SERVICE>(service_idl, {
    agent,
    canisterId: service_id,
  });
  return {agent, actor};
}
```
Also, I put a bunch of console.log statements in the `verify` [function](https://github.com/dfinity/agent-js/blob/9c133826f04bb7aafc04c81aa1ab7152c3889719/packages/agent/src/certificate.ts#L116) in the agent-js library, and it says that...

```
 LOG  rootHash: []
 LOG  derKey: []
 LOG  sig: [167, 104, 28, 190, 58, 122, 182, 218, 25, 197, 15, 41, 232, 84, 122, 112, 103, 42, 241, 195, 71, 163, 225, 88, 13, 144, 164, 240, 75, 252, 45, 115, 136, 200, 246, 201, 187, 175, 115, 57, 69, 220, 220, 245, 52, 211, 89, 23]
 LOG  key: []
 LOG  msg: []
```
Is it normal for everything but `sig` to be empty?

Thanks!

-------------------------

jzxchiang | 2021-11-21 06:15:24 UTC | #20

OK I identified the root cause.

Upgrading `agent-js` from 0.9.1 to 0.10.1 caused certificate validation to fail. I think it's due to the removal of `Buffer` in favor of `ArrayBuffer`.

@kpeacock, have you seen this before? When I revert my code from 0.10.1 to 0.9.1, the BLS signature [verification](https://github.com/dfinity/agent-js/blob/9c133826f04bb7aafc04c81aa1ab7152c3889719/packages/agent/src/certificate.ts#L116) passes.

-------------------------

kpeacock | 2021-11-22 16:46:03 UTC | #21

This is the first report I've heard of this. Feel free to open up an issue with steps to reproduce, and I'll look into it.

-------------------------

jzxchiang | 2021-11-23 06:50:52 UTC | #22

I can't reproduce it in web (using the hello Quick Start project)... but I can reproduce it in React Native. No clue what's going on. Might need to stick with `Buffer` in mobile... :man_facepalming:

-------------------------

jzxchiang | 2021-11-23 07:07:13 UTC | #23

Were there any gotchas you encountered when implementing that [migration](https://github.com/dfinity/agent-js/commit/2fe3dd99cddfcf45c6d9d5b7a199a86285ce9740) from nodejs `Buffer` to ECMAScript `ArrayBuffer`?

-------------------------

jzxchiang | 2021-11-23 19:48:06 UTC | #24

I'm ashamed to report that the issue was because I forgot to call `agent.fetchRootKey` in a particular location (after signing in). I had only called it in the constructor, but I should've called it in both.

I am so dumb. This mistake cost me 16 hours of work. Sorry for the trouble.

-------------------------

lastmjs | 2021-11-23 20:04:38 UTC | #25

This fetchRootKey requirement seems to be confusing a lot of people and causing headaches, myself included.

Is there some way to abstract it away so that we never have to deal with it again?

-------------------------

lastmjs | 2021-11-23 20:05:01 UTC | #26

I'm sorry for your loss :slight_smile:

-------------------------

roy4roll | 2022-03-25 07:38:15 UTC | #27

I guess that doesn't always seem to work out.

In our project, we'll be running integration tests in a Nodejs way. And these integration tests always come up with errors by accident. But after a retry it might work.

For example, here is a recent log of a failure.
https://github.com/IC-Naming/icnaming/runs/5687957481?check_suite_focus=true

If possible, I hope you can help me analyze the possible causes. I am willing to provide assistance. Many Thanks.

-------------------------

kpeacock | 2022-03-25 20:45:10 UTC | #28

There's only so much I can do, when environment-specific implementations are necessary. The current abstraction of the codegen + webpack config is better than it was, but we can probably do better. I'm open to changing the `dfx generate` `index.js` template, or adding more configuration to it, in order to generate `createActor` abstractions that people are more able to use

-------------------------

0xlup3x | 2022-06-04 01:46:15 UTC | #29

[quote="skilesare, post:6, topic:4078"]
Where should we put this call if we are running the local identity service?
[/quote]

I am facing this while using candid ui. Any fixes?

-------------------------

