skilesare | 2022-10-15 12:37:30 UTC | #1

Hey @rvanasa, does https://github.com/dfinity/node-motoko still depend on the oCAML compiler in some way, or is it pure js?

Meta question for you + @lastmjs Could Azel compile/run a motoko contract with this?

-------------------------

lastmjs | 2022-10-15 13:06:28 UTC | #2

Looking through the code,y buest guess is the Motoko compiler has been compiled into Wasm, and can thus be used in node. Look at the versions/latest directory.

Azle could incorporate this at compile-time at least, I'm not sure the use case though.

-------------------------

paulyoung | 2022-10-15 14:32:59 UTC | #3

It looks to me like it’s been compiled to JavaScript and not Wasm: https://github.com/dfinity/node-motoko/blob/c906f862dad4d314aa60576134917cffe1908212/versions/latest

The ability to do this type of thing has been around since:

https://github.com/dfinity/motoko/pull/11

-------------------------

paulyoung | 2022-10-15 14:40:09 UTC | #4

[quote="skilesare, post:1, topic:15916"]
Could Azel compile/run a motoko contract with this?
[/quote]

If that’s a goal for Azle maybe https://github.com/dfinity/motoko.rs / https://github.com/dfinity/ic-mo-vm is a better route.

Perhaps @matthewhammer or @rvanasa can comment on that.

-------------------------

skilesare | 2022-10-15 15:01:48 UTC | #5

The use case would be that a black-holed canister could compile open-source code in a dependable way, making sure that only 'blessed' versions of canisters can be deployed.  There are other ways of doing this of course, and Cover is trying to serve some of these use cases, but as we move toward DAOs and autonomous software, it would be cool if these DAOs could automate deployment, upgrades, or even create composable canisters on the fly.  Imagine a DAO builder that lets you pick modules from a list and then compiles and deploys the DAO for you.

-------------------------

paulyoung | 2022-10-15 15:20:55 UTC | #6

For what it’s worth, Motoko Playground uses the JS version of the Motoko compiler as well.

Would that be a sufficient basis for what you’re describing?

-------------------------

rvanasa | 2022-10-15 15:58:48 UTC | #7

Yep! `node-motoko` uses `js_of_ocaml` under the hood, so everything is pure JavaScript. 

@matthewhammer and I are currently working on [a Rust interpreter for Motoko](https://github.com/dfinity/motoko.rs), which we are calling "MoVM." This is much closer to the metal compared to `node-motoko` (probably at least 2-3 orders of magnitude faster than `js_of_ocaml` running on Azle). 

Here are [some benchmarks for the project](https://github.com/dfinity/canister-profiling/tree/gh-pages/collections) and [an example canister](https://github.com/dfinity/ic-mo-vm/pull/5) for reference. 

This project is very early in development, so it could still be worth looking into running the `node-motoko` compiler from an Azle canister. [Here is the js_of_ocaml file (moc.js)](https://github.com/dfinity/node-motoko/blob/main/versions/latest/moc.min.js) which should contain everything you need if you want to try this experiment. 

Cheers!

-------------------------

lastmjs | 2022-10-15 17:13:33 UTC | #8

So the JS version of the Motoko compiler compiles Motoko to Wasm?

If so @skilesare this sounds possible to me. And hopefully it wouldn't even need to be incorporated into Azle, you should be able to install it with npm. We just need to make sure that it's self-contained i.e. doesn't rely on any APIs not available to a canister.

-------------------------

rvanasa | 2022-10-15 18:48:15 UTC | #9

`moc.js` uses a virtual file system, so it's fully self-contained, at least up to browser compatibility. 

Here's a code snippet for compiling IC Wasm from Motoko:

```javascript
import { Motoko } from "./moc.min.js";

const source = 'actor { public query func example() : async Text { "Hello" } }';

Motoko.saveFile('Main.mo', source);
const result = Motoko.compileWasm('ic', 'Main.mo');

console.log(result.code.wasm); // Uint8Array(...)
```

I think there's a solid chance that this could work!

-------------------------

lastmjs | 2022-10-15 19:42:50 UTC | #10

Very cool, I will have to try this out to see if it works

-------------------------

lastmjs | 2022-10-15 19:44:17 UTC | #11

Is the compiler completely synchronous? Azle doesn't have support for promises or async/await yet.

-------------------------

rvanasa | 2022-10-15 19:48:18 UTC | #12

Just confirmed that `moc.js` is fully synchronous.

-------------------------

lastmjs | 2022-10-15 20:06:37 UTC | #13

Very nice, I'm excited to test this out

-------------------------

lastmjs | 2022-10-24 20:55:52 UTC | #14

This doesn't currently work in Azle for a couple reasons, one being this syntax error problem: https://github.com/demergent-labs/azle/issues/749 That might be a bug with the underlying Boa JS engine.

Another problem has to do with the next version of Azle, we have some buffer size issues with the way were handling some things, and because the node-motoko code is so large (~2mb) this causes problems.

-------------------------

rvanasa | 2022-11-30 22:54:32 UTC | #15

Just checked back on this thread. The syntax error does seem like a bug with the Boa engine. It might be more feasible to run the interpreter (using `motoko/versions/latest/moc_interpreter.min.js`), although this would still be about 1.2 MB of generated code. 

This was certainly worth a try! I'll keep this in the back of my mind in case there's a way to eventually make this work.

-------------------------

lastmjs | 2022-11-30 23:03:30 UTC | #16

Once the Wasm binary limit is increased the 1.2mb should be a non-issue I'm hoping. The syntax error is interesting and I will look into it more later, maybe once the Wasm binary limit is lifted.

-------------------------

lastmjs | 2024-01-19 05:47:31 UTC | #17

By the way this is finally working in Azle!

https://x.com/lastmjs/status/1748196605709189490

-------------------------

skilesare | 2024-01-19 13:24:43 UTC | #18

Is it just the interpreter, or will the compiler work as well?

-------------------------

lastmjs | 2024-01-19 16:26:33 UTC | #19

Let me check and get back to you

-------------------------

