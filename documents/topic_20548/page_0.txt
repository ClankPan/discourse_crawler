ArielRobotti | 2023-06-08 18:26:24 UTC | #1

Is there a concept of interface in Motoko, in the sense of Java interfaces for example? I need a function to admit objects of different types but that they all have a common method implemented. Or how can I do this in Motoko?

-------------------------

claudio | 2023-06-09 10:23:05 UTC | #2

Motoko uses structural typing so any object that implements methods of the expected signatures will satisfy an object type with methods of those signatures. It can also provide more members than required. I.e. just use an object type with the common members.

Motoko also supports bounded type parameters which can be used in more advanced scenarios.

On mobile, on vacation so can't give examples.

-------------------------

ArielRobotti | 2023-06-09 17:09:12 UTC | #3

Hello!! Thanks for the reply...
I think I'm understanding!!
If one of my classes is the following:

class hashable(){
    func hash(){//function logic};
};
 
Could a function that accepts it have this form?

actor{
    func hash<T>(hash:() -> Nat32): Nat32{
            hash();
    };
};

-------------------------

ArielRobotti | 2023-06-09 17:14:21 UTC | #4

![Screenshot_20230609-141344|225x500](upload://rLDO146JCw8yRUn3OKayZ5rcxQe.png)

-------------------------

ArielRobotti | 2023-06-09 19:06:48 UTC | #5

Thanks Claudio, there I was able to do what I needed. The below is just an example

![image|690x425](upload://rOyvt7ICLkXfADqyVcbiiYYA34.png)

-------------------------

