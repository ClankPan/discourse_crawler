HelloRickey | 2021-08-04 13:29:14 UTC | #1

Hi guys, I use Random from Motoko to generate random numbers
But I found that the generation time needs to be very long, is there any good way?
```
  var blob=await Random.blob();
  var seednum:Nat=Nat8.toNat(Random.byteFrom(blob));
```

-------------------------

CarstenJ | 2021-08-04 17:26:34 UTC | #2

Hi @HelloRickey,

The delay is intentional, it guarantees that you actually get fresh randomness which was created *after* the request for randomness was made.

-------------------------

matthewhammer | 2021-08-04 19:44:29 UTC | #3

[quote="CarstenJ, post:2, topic:6296"]
The delay is intentional, it guarantees that you actually get fresh randomness which was created *after* the request for randomness was made.
[/quote]

Yes, exactly.

But luckily, you can do some management of when you want to pay this cost using the `Finite` class within the `Random` module.  That class will give you entropy derived from one of those (costly) calls and will manage when it has run out, requiring another call to the actual system's (real) entropy source.

[Here's a link to the code](https://github.com/dfinity/motoko-base/blob/ce5cae762d9b54d7cc8e5b82ac9524304cea6514/src/Random.mo#L37) in base package, with doc comments there that explain more.

-------------------------

