lwshang | 2022-10-31 16:54:22 UTC | #1

# Objective

The goal of developing Canister Metadata Standard is to improve  the experience of integrating third party canisters. A service provider make its canister compliant with the standard. Then a consumer can easily pull the canister from the mainnet and set it up locally.

# Background

## What is Canister Metadata?

Canister is simply a Wasm module. Developer can add arbitrary data to a custom section of the Wasm module. Then the data can be fetched from the `metadata` path in system state tree. For more details, please check [this section](https://internetcomputer.org/docs/current/references/ic-interface-spec/#state-tree-canister-information) in IC specification.

## Why we need a standard?

We plan to provide a complete workflow of third party canister integration for both service provider and consumer. Canister metadata is suitable for communication between the two parties. 

The consumer can understand the provider only if they speak "the same language" which is the standard we are proposing.

## How will the standard be executed？

In short, `dfx` will handle it. 

A service provider explicitly opt in this standard by declaring necessary metadata value in `dfx.json`. Then `dfx` will write metadata in the standard format into Wasm module custom section. When install canister, `dfx` will check if the metadata are complaint with the standard in case the developer modify metadata outside `dfx`.

A service consumer, declare dependency canister ID in `dfx.json`, then `dfx` will request the metadata on-chain and setup the dependency canister locally.

# Proposal

Before the standard details, I want to state several principles for it:

1. Less is more
2. No obvious interference with other metadata use cases
3. Consider future evolvement 

The canister metadata can be viewed as key-value pairs. For simplicity, we only allow valid UTF-8 text in both key and pair.

To avoid name conflicts, we prefix the keys with `dfx:`. And all metadata in this standard must have public visibility so that everyone can fetch them.

### `dfx:wasm_url`

A URL to download canister Wasm module which will be deployed locally.

Service provider is responsible for hosting the resource online. When consumer pull the canister, `dfx` will check if downloaded wasm hash match on-chain version. If not, a warning message will be shown.

> We expect that it will be possible to download canister Wasm directly from IC itself. Then this metadata won't be required.

### `dfx:deps`

A list of `name:ID` pairs of direct dependencies separated by semicolon. This metadata helps resolve transitive dependencies recursively.

For example, if the canister directly depends on:
* `ledger` canister with mainnet ID `bbbbb-bb`;
* `dex` canister with mainnet ID `ccccc-cc`;

Then the value should be:
`ledger:bbbbb-bb;dex:ccccc-cc`;

### `dfx:init`

A message to guide consumers how to initialize this canister.

If it is simple to initialize, the message can be just the command to be executed. If it is complicated, the message can be a URL point to the page with detailed initialization process.

### `candid:service`

The canister interface in candid.

`dfx` has supported automatically adding `candid:service` metadata. If service provider opt in this standard, this metadata is required to be public.

# What next?

We look forward to any comments, questions or feedbacks from the community. 

Please note that we are not proposing any new feature to Internet Computer itself. Instead, we are developing a recommended standard for the applications (canisters) on IC. And `dfx` will only write these metadata if the provider opt in this approach.

We will stick to current design of the framework. Any suggestion on the details are welcome.

After a short RFC period, we will put this standard in `sdk` repo and start implementation soon.

### `dfx.json` preview

This is just a demo for how would provider/consumer write `dfx.json` to interact with canister metadata. It is not a part of the standard.

Provider:

```json
{
  "canisters": {
    "provider_app": {
	  ...,
	  "pull": {
	    "wasm_url": "https://example.com/app.wasm.gz",
        "init": "https://example.com/readme.md"
      },
      "dependencies": [
        "ledger", "dex"
      ]
    },
    "ledger": ...,
    "dex": ...,
  }
}
```

Consumer:

```json
{
  "canisters": {
    "app": {
      ...,
      "dependencies": [
        "provider_app"
      ]
    },
    "provider_app": {
      type: "pull",
      id: "ddddd-dd",
    }
  }
}
```

-------------------------

domwoe | 2022-11-02 07:12:04 UTC | #2

Thank you @lwshang.

Given that devs are not dependent on `dfx` to set metadata but can also use tools like [ic-wasm](https://github.com/dfinity/ic-wasm) to add custom sections, this would benefit from a public registry to register/announce namespaces.

-------------------------

lastmjs | 2023-03-14 19:39:41 UTC | #3

Demergent Labs is very interested in this.

I would like to propose a `cdk` key-value pair. To keep it simple and avoid possible security implications with revealing too much information (such as a version), `cdk` could simply be the name of the CDK.

Or, `cdk` could be a prefix like follows:

`cdk:name`: The name of the CDK
`cdk:version`: The version of the CDK

One key use-case that we have in mind is for canister indexing services like `icscan` or the `IC dashboard` to allow totals and filtering of canisters by cdk name. Then we could know exact numbers of Rust, Motoko, Python, TypeScript, C++, etc canisters on the IC.

-------------------------

domwoe | 2023-03-22 14:43:59 UTC | #4

@lwshang Are there any news about this and the integration in dfx?

We revisited this in a twitter thread as a way to link to the source code from a canister.

https://twitter.com/domiwoe/status/1638476270424977412

-------------------------

lastmjs | 2023-05-08 22:51:58 UTC | #5

I would like to propose the following (updating my thoughts from a couple comments back):

# cdk:name

This is the name of the CDK that was used to produce the canister's Wasm module binary e.g. `motoko`, `cdk-rs`, `azle`, `kybra`, `icpp`.

# cdk:languages

This is a list of strings indicating the source code languages that the CDK supports e.g. `motoko`, `rust`, `typescript;javascript`, `python`, `c++`

# cdk:version

This is the version of the CDK that was used to produce the canister's Wasm module binary e.g. `1.2.3`, `0.16.2`, `2.3`

-------------------------

lastmjs | 2023-06-05 16:33:46 UTC | #6

Any updates on pushing these standards forward?

-------------------------

lastmjs | 2023-06-05 16:34:17 UTC | #7

Should these be ICRC standards?

-------------------------

bitdivine | 2023-06-06 14:15:23 UTC | #8

Do we need a standard?  AI will watch us all writing our code and tab completion will steer us towards a convention. ;-)

-------------------------

bitdivine | 2023-06-06 14:17:33 UTC | #9

On a more serious note, maybe it just needs the cdk developers to reach a consensus on the cdk: metadata namespace.  So, you, the motoko team and so on.  Is there a IC cdk developers forum somewhere?

-------------------------

bitdivine | 2023-06-06 14:25:59 UTC | #10

Personally I would be interested in expanding the detail of the `init` metadata.  For me, the init args consist of feature flags and canister IDs.  Can we have a convention by which init args are tuples and the second entry in the tuple is a map from canister names to IDs?  That way the init argument can be made for all the canisters I work with in a standardized way.  I am aware that this makes the rather crude assumption that for every name, there is just one canister ID, and that assumption doesn't scale well.  But this is a start.

-------------------------

ZenVoich | 2023-09-04 19:17:44 UTC | #11


[quote="lastmjs, post:5, topic:16280"]
# cdk:name

This is the name of the CDK that was used to produce the canister’s Wasm module binary e.g. `motoko`, `cdk-rs`, `azle`, `kybra`, `icpp`.
[/quote]

Would love to see support for `cdk:name`

-------------------------

bitdivine | 2023-09-07 09:16:52 UTC | #12

Another thing that would be nice to standardize:  **infrastructure:canister_name** and **infrastructure:path**

E.g. if I have an app with 3 canisters, and a couple of deployments of this app, I would have 6 canisters in total, with deployment and names that might be:

* name=**my-dapp** and path=**test_deployment/my-dapp**
* name=**backend** and path=**test_deployment/my-backend**
* name=**my-archive** and path=**test_deployment/my-archive[0]**
* name=**my-dapp** and path=**prod/my-dapp**
* name=**my-backend** and path=**prod/my-backend**
* name=**my-archive** and path=**prod/my-archive[0]**

Regarding name:  A key motivation here is to reduce the risk of deploying the wrong wasm to a canister.  If it is really easy to get names, we reduce the risk of error.  We might even have a pre-upgrade check that refuses an upgrade request if names don't match.

Regarding ID: The motivation here is to have a structured way of distinguishing identical canisters, for the cases when there are multiple deployments of the same canister for any reason.  Given two canisters with the same name, the deployment path, like a terraform path, makes it clear how that canister fits in to the rest of the infrastructure.

Regarding both: It would be nice to get feedback from infra people, who have a lot of experience managing large terraform, ansible, cloudformation and other deployments.  Not everything from the centralized world will apply to blockchain but I expect that some lessons will be transferrable.

-------------------------

bitdivine | 2023-09-07 09:01:34 UTC | #13

For metadata to be useful, it helps for it to be widespread, and for it to become widespread, it helps for it to be there by default, and for a standard to be there by default it helps to have it in tooling, and tooling is built on standards.

Some things like `cdk:name` and `deployment:name` are information that tools such as dfx have already, so it feels as if the work needed to go from idea to widespread use is quite small.

-------------------------

ZenVoich | 2023-10-19 06:17:16 UTC | #14

@lastmjs hi, I would like to count Azle/Kybra canisters too on https://icp.zone ([forum post](https://forum.dfinity.org/t/introducing-icp-zone-fancy-ic-stats/23371))

Currently I check if `motoko:compiler` custom section is presented(although it is private).

What if Azle/Kybra will fill `azle:compiler` and  `kybra:compiler` custom sections until `cdk:name` is standardized?

-------------------------

lastmjs | 2023-10-19 13:56:54 UTC | #15

Is there a problem with just checking cdk:name even before it is standardized? Seems like it shouldn't be too complicated?

I'm currently waiting for dfx extensions to be implemented and testable before really putting the metadata infrastructure in place.

-------------------------

lastmjs | 2023-10-19 13:58:21 UTC | #16

This seems very exciting though, if we put the metadata in place for Azle and Kybra, how much effort/how long before icp.zone could pick everything up?

-------------------------

ZenVoich | 2023-10-19 14:06:27 UTC | #17

[quote="lastmjs, post:15, topic:16280"]
Is there a problem with just checking cdk:name even before it is standardized? Seems like it shouldn’t be too complicated?
[/quote]

Yes, that's even better. Will require only one request instead of many for each cdk

[quote="lastmjs, post:16, topic:16280, full:true"]
This seems very exciting though, if we put the metadata in place for Azle and Kybra, how much effort/how long before icp.zone could pick everything up?
[/quote]

I don't think it should be difficult, a few days maybe...

-------------------------

lastmjs | 2023-10-19 14:21:26 UTC | #18

Great, I'll let you know then

-------------------------

icpp | 2023-10-19 22:52:21 UTC | #19

Same for icpp, the C++ CDK.
We have dfx integrated now as a default post processing step during a build and can use it too for creating the custom section.

-------------------------

ZenVoich | 2024-02-01 06:09:22 UTC | #20

I would love to count canisters on different languages to show on icp.zone. 

Any progress on supporting `cdk:name` in Azle/Kybra @lastmjs?

In C++ CDK @icpp?

Would helpful if Dfinity also will add support for this metadata section for Motoko/Rust canisters too(idk who to mention @domwoe @Severin)
For now I make distinction between rust and motoko canisters by trying to get `motoko:compiler` section, which is hacky.

Also, this section should be filled for dynamically spawned canisters from the parent canister, right?

-------------------------

lastmjs | 2024-02-01 07:10:18 UTC | #21

We're waiting on dfx extensions to do this in a very nice way automatically for the developer...we could do it sooner but we're just focused on other things right now.

-------------------------

lastmjs | 2024-02-10 21:14:42 UTC | #22

Okay I think I'm going to add `cdk:name` to Azle in the next release, I'll let you know how it goes.

@icpp does `cdk:name` work for you? For Azle it would be `azle`, for Kybra `kybra`, and for your project?

-------------------------

lastmjs | 2024-02-10 21:18:18 UTC | #23

What do you mean by dfx already having `cdk:name`? Does it?

-------------------------

icpp | 2024-02-11 00:31:15 UTC | #24

@lastmjs 

`cdk:name` will work and I will use `icpp` .

-------------------------

icpp | 2024-02-11 14:59:24 UTC | #25

@ZenVoich , 

Can you try it out on canister `p5ezj-diaaa-aaaag-acn5a-cai` ?
You can check on:
- icp:public cdk:name                         -> `icpp`
- icp:public cdk:languages                 -> `c++`
- icp:private icpp:compiler  -> `3.14.1`

---

@ZenVoich , @lastmjs 

The command `$ icpp build-wasm` will now automatically add those custom sections to the wasm, using the already installed tool `llvm-objcopy`, which comes with [wasi-sdk](https://github.com/WebAssembly/wasi-sdk), which is what icpp-pro is build on top off.

In summary, with `icpp-pro 3.14.1`, the following commands are now run automatically as part of the `build-wasm` pipeline, and it works on Windows, Ubuntu and Mac:
```bash
--
Adding custom sections to the wasm file...
~/.icpp/wasi-sdk-20.0/bin/llvm-objcopy --add-section="icp:public candid:service"="/home/demo/greet/src/greet.did" greet.wasm greet.wasm
~/.icpp/wasi-sdk-20.0/bin/llvm-objcopy --add-section="icp:public cdk:name"="/home/demo/greet/build/custom_section_cdk_name.txt" greet.wasm greet.wasm
~/.icpp/wasi-sdk-20.0/bin/llvm-objcopy --add-section="icp:public cdk:languages"="/home/demo/greet/build/custom_section_cdk_languages.txt" greet.wasm greet.wasm
~/.icpp/wasi-sdk-20.0/bin/llvm-objcopy --add-section="icp:private icpp:compiler"="/home/demo/greet/build/custom_section_version.txt" greet.wasm greet.wasm
--
```
You can then verify the content of the custom sections using the llvm-objdump command:
```bash

# check 1
$ ~/.icpp/wasi-sdk-20.0/bin/llvm-objdump -h build/greet.wasm

build/greet.wasm:       file format wasm

Sections:
Idx Name                      Size     VMA      Type
Idx Name                      Size     VMA      Type
  0 TYPE                      0000013a 00000000 
  1 IMPORT                    000000d8 00000000 
  2 FUNCTION                  000008e9 00000000 
  3 TABLE                     00000007 00000000 
  4 MEMORY                    00000003 00000000 
  5 GLOBAL                    000006c3 00000000 
  6 EXPORT                    000047f1 00000000 
  7 ELEM                      00000869 00000000 
  8 CODE                      000b6ba4 00000000 TEXT
  9 DATA                      0000b21e 00000000 DATA
 10 icp:public candid:service 00000282 00000000 
 11 icp:public cdk:name       00000004 00000000 
 12 icp:public cdk:languages  00000003 00000000 
 13 icp:private icpp:compiler 00000006 00000000 

# With values for each section
$ ~/.icpp/wasi-sdk-20.0/bin/llvm-objdump --full-contents --section='icp:private icpp:compiler' build/greet.wasm

build/greet.wasm:       file format wasm
Contents of section icp:private icpp:compiler:
 0000 332e3133 2e30                        3.14.1

$ ~/.icpp/wasi-sdk-20.0/bin/llvm-objdump --full-contents --section='icp:public cdk:name' build/greet.wasm

build/greet.wasm:       file format wasm
Contents of section icp:public cdk:name:
 0000 69637070                             icpp

$ ~/.icpp/wasi-sdk-20.0/bin/llvm-objdump --full-contents --section='icp:public cdk:languages' build/greet.wasm
 
build/greet.wasm:       file format wasm
Contents of section icp:public cdk:languages:
 0000 632b2b                               c++
```

---
Reason I decided to go with this approach is because of what I saw in the motoko wasm:

```bash

# check 1
$ llvm-objdump -h my_motoko.wasm

my_motoko.wasm: file format wasm

Sections:
Idx Name                            Size     VMA      Type
  0 TYPE                            000000c8 00000000 
  1 IMPORT                          0000026f 00000000 
  2 FUNCTION                        00000378 00000000 
  3 TABLE                           00000007 00000000 
  4 MEMORY                          00000003 00000000 
  5 GLOBAL                          00000084 00000000 
  6 EXPORT                          000001d3 00000000 
  7 START                           00000002 00000000 
  8 ELEM                            0000077c 00000000 
  9 CODE                            00028e65 00000000 TEXT
 10 DATA                            00011541 00000000 DATA
 11 name                            0000661d 00000000 
 12 icp:public candid:service       0000047c 00000000 
 13 icp:private motoko:stable-types 0000004f 00000000 
 14 icp:private motoko:compiler     00000005 00000000 
 15 icp:public candid:args          00000009 00000000 

# Check 2
$ llvm-objdump --full-contents --section='icp:private motoko:compiler' my_motoko.wasm

my_motoko.wasm: file format wasm
Contents of section icp:private motoko:compiler:
 0000 302e392e 38                          0.9.8
```

After seeing what's in the Motoko wasm, I decided to just do both, and I implemented @lastmjs suggestion for name & languagues, but then the motoko convention for version number.

---

ps. one great side effect of this effort is that I learned how to stuff the candid file into the wasm using llvm-objcopy, and when I deploy, the Candid UI now works! 

:tada:

---

@lwshang ,

If dfx will support these metadatas as part of a standard, I will switch to that implementation for consistency.

-------------------------

icpp | 2024-02-12 20:57:16 UTC | #26

Can't wait to see the C++ canisters count listed on https://icp.zone/

At least 4 :smile:

-------------------------

ZenVoich | 2024-02-13 19:35:45 UTC | #27

Added support for C++ canisters

![image|499x407](upload://AqyT2VcoFc0QuycZvinRPzi3gtc.png)

[quote="icpp, post:26, topic:16280"]
At least 4 :smile:
[/quote]

exactly 4)

-------------------------

lastmjs | 2024-03-04 16:55:01 UTC | #28

Thanks for adding TypeScript! How up-to-date is the info? When does the process run?

-------------------------

ZenVoich | 2024-03-05 10:14:48 UTC | #29

To check the language of new canisters, I run it manually once a week or so

-------------------------

lwshang | 2024-03-20 20:17:48 UTC | #30

Hi folks.

I just posted [[RFC] tech_stack - Canister Metadata Standard extension](https://forum.dfinity.org/t/rfc-tech-stack-canister-metadata-standard-extension/28692).

It is my latest effort to cover the usage of `cdk:*` fields.

I'm looking forward to your feedback.

cc: @lastmjs @icpp @ZenVoich

-------------------------

