skilesare | 2021-05-30 17:00:24 UTC | #1

Has anyone had any progress in decoding the crazy cbor that is sent/returned from canisters when using xhr requests?  This seems like a good target for a react tools style plug in that would allow you to 'pretty print' the cbor.  I guess you need to know the candid interface to decode it?  Any suggestions for tools to use?  I'm guessing JSON was just too straightforward and widely accepted to be considered cool?😂I'm sure there are performance benefits, but man....what a pain.  Let's fix it! 🛠

-------------------------

wang | 2021-05-30 23:50:25 UTC | #2

Libraries: https://cbor.io/impls.html

Online tool: http://cbor.me/

-------------------------

toysrtommy | 2021-05-31 04:56:46 UTC | #3

Trying to figure out a CBOR-decoded response (to a "request-status" call) below.

From the IC spec document, I understand the sig is a certification of IC state, but what about the actual payload ("tree"), how do I map it the actual state-tree?

{ 'certificate': { 'signature': 'hexb aa ac 9a 1d 69 6e e3 9b 1a e4 b1 01 7e '
                                'bf 93 19 43 c8 1b b3 fe 68 b5 dd 06 15 77 f1 '
                                '0f f8 dc f7 65 b9 7a 8d 9b 63 30 95 93 76 c7 '
                                'd9 71 9b 37 89',
                   'tree': [ 'int 1',
                             ['int 4', 'simp 15'],
                             [ 'int 1',
                               ['int 4', 'int 7'],
                               [ 'int 2',
                                 'hexb 74 69 6d 65',
                                 [ 'int 3',
                                   'hexb cc a7 92 de b8 ae 83 c2 16']]]]}}

-------------------------

skilesare | 2021-06-01 14:21:45 UTC | #4

I've tried the cbor.me tool before. I have no idea what to paste where to translate it. Take this response from dscvr.one:

![image|690x50](upload://dxNFmN3qUHkqQoNcrLJ63glZAUe.png)

Where do I paste that response?  If I put it on the left of cbor.me I get

    ED # primitive(13)


    ##### 1 unused byte after the end of the data item:

    CA

If I put it on the right I get 

    simple(13)

What do I need to paste where and what boxes need to be checked to convert this notation to some kind of readable structure?

-------------------------

nomeata | 2021-06-01 15:18:19 UTC | #5

If you use nix, you can install some convenience tools with
```
$ nix-env -i cbor-diag
```
But I think they don't do much more than `cbor.me`.

-------------------------

skilesare | 2021-06-01 15:53:34 UTC | #6

[quote="nomeata, post:5, topic:4556"]
`cbor-diag`
[/quote]

So if I want to convert the response of a query to a canister to json, what arguments do I give?  Do I have to convert the text in the response window of chrome inspector to binary?  And then pass it to this tool?

-------------------------

nomeata | 2021-06-01 15:58:39 UTC | #7

The response to a query is typically a Candid value, not a CBOR values. You only need to worry about CBOR if you are writing your own agent (library interacting with the IC), or are debugging things related to that low level.

But for low-level requests, you can use these CLI tools:
```
$ GET https://ic0.app/api/v2/status|file -
/dev/stdin: Concise Binary Object Representation (CBOR) container (array) (map)
$ GET https://ic0.app/api/v2/status|cbor2yaml.rb 
--- !ruby/struct:CBOR::Tagged
tag: 55799
value:
  ic_api_version: 0.17.0
  root_key: !binary |-
    MIGCMB0GDSsGAQQBgtx8BQMBAgEGDCsGAQQBgtx8BQMCAQNhAIFMDm7HH6tYOwi9gTc8JVw8NxsuhIY8mKTx4It0I10U+12cDNVG2WhfkToMCyzFNBWDv0tDkuRn25bWW5u0y3FxEvhHLg1aTRRQX/10hLASkQkcX4e5iINGP5gJGguqrg==
  impl_version: ca35377220efd5efb1f5944e34c4d6caf1aff2df
  impl_hash: ebb16175fd93b21e93a79a35935cc11eb1965d4fe4b8d349a59c394ea555d1a2
```

-------------------------

skilesare | 2021-06-01 17:18:53 UTC | #8

Thank you! Very descriptive. If the response to a query is typically a candid value, why can't I read it?  See the image above. How do I convert that garbled text into a candid object?

-------------------------

Ori | 2021-06-01 21:26:22 UTC | #9

didc might help you with this: [https://github.com/dfinity/candid/tree/master/tools/didc](https://github.com/dfinity/candid/tree/master/tools/didc)

-------------------------

nomeata | 2021-06-02 06:41:01 UTC | #10

[quote="skilesare, post:8, topic:4556, full:true"]
Thank you! Very descriptive. If the response to a query is typically a candid value, why can’t I read it? See the image above. How do I convert that garbled text into a candid object?
[/quote]

Ah, the HTTP response is indeed CBOR, but it carries, in the `arg` field, the response from the canister (which is either a reject message, or a reply, which itself is typically Candid encoded). Different layers of abstraction; a bit like IP/TCP/HTTP/JSON).

So that response _should_ work with `cbor.me`. But the problem you are facing is that current browser developer tools are surprisingly bad at this when the response is binary. I would expect that UI to have a checkbox to show the response in hex (which you could then paste into `cbor.me`).

If I work locally, without HTTPS, I sometimes use wireshark to sniff the HTTP exchange and copy the HTTP payload there.

-------------------------

paulyoung | 2021-06-05 21:59:45 UTC | #11

People on macOS might prefer [Proxyman](https://proxyman.io/ ) to Wireshark.

-------------------------

jorgenbuilder | 2021-11-18 22:23:56 UTC | #12

If anyone has a quick overview for how they make a valid CBOR / Candid object from the junk in chrome devtools 👀👀👀

-------------------------

skilesare | 2021-11-18 22:38:23 UTC | #13

I'm just still confused why they didn't use good old-fashioned json.  Sometimes it seems like the most obtuse tool was chosen on purpose.  How many devs have tried to inspect the messages sent on an IC app and just peace outed?  :laughing:

-------------------------

jorgenbuilder | 2021-11-18 22:50:47 UTC | #14

I guess when you're replicating stuff a whole bunch of times as you do on a blockchain, the concision of CBOR starts to make more sense as the default message format on the IC??? Not to understate your point... the developer experience is really bad right now. Seems not so hard to add `application/cbor` interpreter to devtools, technically speaking--I have no idea what that process is like. On top of that, it sounds like we need a Candid interpreter in there. 😵

I guess you could also do something like make canisters translate cbor/candid to json for http requests. Honestly not sure which approach is better.

Life would be SO MUCH easier with a fix in place.

-------------------------

skilesare | 2021-11-18 22:57:59 UTC | #15

Sounds like a good bounty opportunity.  Hmmm.....

-------------------------

jorgenbuilder | 2021-11-18 22:59:38 UTC | #16

It's a killer bounty idea. Get a grant and make it happen. I'm up for a collab.

-------------------------

kpeacock | 2021-11-18 23:04:02 UTC | #17

I don't think there's anything that we can do from the `agent-js` side to clean up the default network tab preview, but it would be really nice if there was. If there's any requirement to hook into `agent-js` from a devtools extension, I'm happy to accommodate it

-------------------------

skilesare | 2021-11-18 23:06:39 UTC | #18

We probably have 20ICP we can put behind it from ICDevs right away.  We just need to write up the simplest path forward.  I'm guessing it is something along the lines of adding a tab to the dev tools via a plug-in that looks for cbor and decodes it and then further decodes any candid it finds?

-------------------------

jorgenbuilder | 2021-11-18 23:09:23 UTC | #19

[quote="skilesare, post:18, topic:4556"]
lines of adding a tab to the dev tools via a plug-in that looks for cbor and decodes it and then further decodes any candid it finds?
[/quote]

That makes a lot of sense. I went straight to patching devtools core 😆. I've yet to parse the output even manually, but getting that down then building a little devtools extension seems like the shortest critical path.

-------------------------

jorgenbuilder | 2021-11-19 22:55:58 UTC | #20

Dove into this a bit today. What we're getting back from a canister is b64 encoded byte array. Getting that to play nicely with cbor.me was a matter of hex encoding it. Now I just need to throw Candid decoding in there. Am I crazy, or is it only possible encode/decode Candid if you have type data? `agent-js` seems to be providing types as well as args for each encode/decode event. If so, I suppose the extension would have to provide a way to map an interface onto a canister in order to function.

-------------------------

kpeacock | 2021-11-19 23:36:23 UTC | #21

If you can use web assembly in the extension, you could probably compile the [Candid](https://github.com/dfinity/candid) crate to decode it without having to do a bunch of extra work in JS

-------------------------

jorgenbuilder | 2021-11-20 00:20:16 UTC | #22

Interesting... was thinking of grabbing `@dfinity/candid/idl.js -> decode()` and its deps.

Here's the repo: https://github.com/jorgenbuilder/chrome-dfinity-decoder

-------------------------

jorgenbuilder | 2021-11-20 01:58:10 UTC | #23

Stuck for the moment on decoding the candid.

Made an attempt at building a wasm from the Candid crate and importing it into the extension. Import seems to work (would likely require some additional work to get into the chrome web store,) but I don't know any rust so didn't really get it to actually do anything.

`didc` makes quick work of decoding the bytes without types though, so I know it can be done.

-------------------------

jorgenbuilder | 2021-11-23 01:24:44 UTC | #24

Some success using a hacked version of the agent-js code today:

![image|690x353](upload://uLgafO87npdVx4hDD9Xvhl2SMJO.png)

-------------------------

jorgenbuilder | 2021-11-23 08:25:28 UTC | #25

https://github.com/ic-rocks/didc-js

-------------------------

jorgenbuilder | 2021-11-23 08:28:12 UTC | #26

https://github.com/ic-rocks/ic-rocks/blob/e975545ba1fdb35d70536284eb9a26617c88f192/pages/principal/%5BprincipalId%5D.tsx#L123

-------------------------

skilesare | 2021-11-23 15:47:04 UTC | #27

# Create a CBOR developer plugin - #5

## Current Status: Discussion

* Discussion (11/21/2021)
* Ratification (11/22/2021)
* Open for application (11/23/2021)
* **Assigned** (11/23/2021) <- We are here
* In Review
* Closed

[Issue Link - Discussion Forum](https://forum.dfinity.org/t/cbor-plug-in-or-tools/4556/26)

## Bounty Details

* Current Bounty Amount: 10 ICP
* ICDevs.org Match Available: 10 ICP - (For every ICP sent to 66083bb3c940c7de2a70aa127ec771da75d60deadc10f5f66b280f203d8f6e73, ICDevs.org will add one more ICP to the bounty, up to 10 ICP, After 10 ICP, Donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)
* Time Left: Expires 12/31/2022
* Project Type: Single Contributor
* Opened: 11/23/2021
* Time Commitment: Days
* Project Type: Traditional
* Experience Type: Intermediate - Web Dev
* Issue Type: Application Development

## Description

This bounty gives the opportunity to

* learn how chrome plugins work
* learn how CBOR encoding works
* learn how Candid encodings work
* learn how the Internet Computer communicates with other applications

The developer will need to create a plug-in for Google Chrome in the style of react developer tools.  This plug in should detect when CBOR has been sent or recieved from a server and be able to display that CBOR content in a more readable format. The user should be able to switch between a candid view/motoko data view/rust data view/json view.  This will allow the user to copy and paste the data easily in to test harneses if they need to. 


## To apply for this bounty you should:

Github user jorgenbuilder applied for this bounty.

## Selection Process

Github user jorgenbuilder was selected for this bounty.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the community. If you would like to turbocharge this bounty you can seed additional donations of ICP to 66083bb3c940c7de2a70aa127ec771da75d60deadc10f5f66b280f203d8f6e73.  ICDevs will match the bounty 1:1 for the first 10 ICP and then 0.25:1 after that.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).

## General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has be been given and the bounty is closed.

# Matches

We are waiting on our first community match.


[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

skilesare | 2021-12-17 21:17:06 UTC | #28

Hey...just wanted to remind everyone that we have an open bounty for this.  @jorgenbuilder 's latest progress is at https://github.com/jorgenbuilder/chrome-dfinity-decoder and someone could pick up and run with it.

-------------------------

jorgenbuilder | 2022-01-12 17:10:59 UTC | #29

I slapped a UI on what I had so far and have a release pending review in the chrome web store. I think this will serve as a fine alpha release, and I've started adding issues for future releases to the github repo.

-------------------------

jorgenbuilder | 2022-01-13 07:33:51 UTC | #30

We're live on the chrome webstore :)

https://chrome.google.com/webstore/detail/dfinity-decoder/meaadkenfkhjakkkdapaallimhbdofck

-------------------------

chenyan | 2022-01-13 18:27:15 UTC | #31

For decoding Candid message online, you can try https://fxa77-fiaaa-aaaae-aaana-cai.raw.ic0.app/explain

-------------------------

coin_master | 2022-01-26 16:02:37 UTC | #32

Any idea why the tool doesn't work with https://app.sonic.ooo ?

-------------------------

jorgenbuilder | 2022-01-27 00:10:20 UTC | #33

@coin_master It was a problem with the url capture regex. I've updated it and capture on sonic.ooo is working now. The 0.0.6 release with this change should be live on the web store any minute now. Thanks for letting me know!

-------------------------

jorgenbuilder | 2022-01-27 00:31:33 UTC | #34

Sonic uses some url entries into the internet computer that I hadn't seen before. I recently swapped from capturing IC requests based on content types to capturing them based on urls (as of now, `*.(ic0.app|dfinity.network|localhost:*)/api/v2/canister/<canister>/<method>
`). I opened up that matcher a bit in order to work well with sonic, but there may yet be some URLs to add to this list, or perhaps it's the wrong mechanism to identify IC requests 🤷‍♂️

-------------------------

martin_DFN1 | 2022-06-28 21:58:38 UTC | #35

I cannot find out how to use this. In an app that talks to the IC (based on icfront) I open the debug tools and in the network tab I expect a 'decoder' tab. But it does not appear. See this:
![Screen Shot 2022-06-28 at 14.57.58|690x424](upload://5tkh44BZnRFlWzWGev88h6frvkY.png)

How can I get the CBOR tab?

-------------------------

skilesare | 2022-06-29 17:19:48 UTC | #36

It *shold* be at the end on the right of your tab bar. Maybe check settings that it is enabled or restart chrome?

-------------------------

martin_DFN1 | 2022-06-29 18:49:17 UTC | #37

I found that after restarting the browser it worked. This is really useful. Thanks!!

-------------------------

