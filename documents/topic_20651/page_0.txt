pramitgaha | 2023-06-12 06:37:12 UTC | #1

I'm using `ic-stable-memory` libary by @senior.joinu.
here is my upgrading code:
```rs
#[pre_upgrade]
pub fn pre_upgrade() {
    let init_state: InitState = INIT_STATE.with(|state| state.borrow().clone());
    let init_state = SBox::new(init_state).expect("failed to clone");
    let system_state = SYSTEM_STATE
        .with(|state| state.borrow().clone())
        .expect("failed to clone");
    let system_state = SBox::new(system_state).expect("failed to box");
    let user_state = USER_STATE.with(|state| state.borrow().clone().expect("failed to clone"));
    let user_state = SBox::new(user_state).expect("failed to box");
    let offer_state = OFFER_STATE.with(|state| state.borrow().clone().expect("failed to clonex"));
    let offer_state = SBox::new(offer_state).expect("failed to box");
    store_custom_data(0, init_state);
    store_custom_data(1, system_state);
    store_custom_data(2, user_state);
    store_custom_data(3, offer_state);
    stable_memory_pre_upgrade().expect("out of memory");
}

#[post_upgrade]
pub fn post_upgrade() {
    stable_memory_post_upgrade();
    let init_state: SBox<InitState> = retrieve_custom_data(0).unwrap();
    let system_state: SBox<System> = retrieve_custom_data(1).unwrap();
    let user_state: SBox<UserState> = retrieve_custom_data(2).unwrap();
    let offer_state: SBox<OfferState> = retrieve_custom_data(3).unwrap();
    INIT_STATE.with(|state| {
        *state.borrow_mut() = init_state.into_inner();
    });
    SYSTEM_STATE.with(|state| {
        *state.borrow_mut() = system_state.into_inner();
    });
    USER_STATE.with(|state| {
        *state.borrow_mut() = user_state.into_inner();
    });
    OFFER_STATE.with(|state| {
        *state.borrow_mut() = offer_state.into_inner();
    });
}
```
when I try to upgrade the canister it fails with this error:
```
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'contract'.
      Failed during wasm installation call: The Replica returned an error: code 5, message: "Canister bw4dl-smaaa-aaaaa-qaacq-cai trapped: heap out of bounds"
```

-------------------------

senior.joinu | 2023-06-12 09:54:05 UTC | #2

Can you please also provide us with your `init` method and how you declare the state (thread_locals)?

Does this error happen on upgrade or on initial deployment?

UPD:
also, how much heap memory does your state occupy before upgrading?

-------------------------

pramitgaha | 2023-06-13 04:37:12 UTC | #3

```rs
thread_local! {
    pub static INIT_STATE: RefCell<InitState> = RefCell::default();
    pub static OFFER_STATE: RefCell<OfferState> = RefCell::default();
    pub static USER_STATE: RefCell<UserState> = RefCell::default();
    pub static SYSTEM_STATE: RefCell<System> = RefCell::default();
}
```
How do I check how much storage is being used, I don't know!

-------------------------

Severin | 2023-06-13 07:14:13 UTC | #4

There is a [memory field in the canister status response](https://docs.rs/ic-cdk/latest/ic_cdk/api/management_canister/main/struct.CanisterStatusResponse.html#structfield.memory_size). Is that useful for you?

-------------------------

pramitgaha | 2023-06-13 08:21:27 UTC | #5

is there heap limit for upgrading the codes?

-------------------------

Severin | 2023-06-13 08:40:32 UTC | #6

Yes, the Wasm runtime is only 32 bit for now, so you can only have up to 4GB in the heap

-------------------------

pramitgaha | 2023-06-13 08:42:06 UTC | #7

damn, what if my canister holds more data than that of 4gb?
what's the say to make it work at the moment?

-------------------------

Severin | 2023-06-13 08:43:06 UTC | #8

Then you have to store data in stable storage. Stable storage goes up to 48 GB (or is it 64 already?)

-------------------------

pramitgaha | 2023-06-13 08:46:32 UTC | #9

hmm, how do I do that?
can you show some code?
I'm using `ic-stable-memory` so I'm guessing my data is already on stable-memory.
is that how it's done? or I'm wrong?

-------------------------

pramitgaha | 2023-06-13 08:54:27 UTC | #10

also in the above code/project. I just have inserted few bytes of data. why did it failed?

-------------------------

Severin | 2023-06-13 09:11:09 UTC | #11

I'm no good with ic-stable-memory, but I can recommend you have a look at the [readme](https://github.com/seniorjoinu/ic-stable-memory) to see some examples. Otherwise, please ping @senior.joinu, he's the author

-------------------------

senior.joinu | 2023-06-13 09:16:15 UTC | #12

I would suggest you to provide us with a MRE. This way I could try it locally and see what happens. 
From the error message itself I don't see if this is a bug with `ic-stable-memory`, but it may be.

-------------------------

pramitgaha | 2023-06-13 09:20:40 UTC | #13

what's MRE?
here is my init method:
```rs
pub fn init() {
    ic_stable_memory::stable_memory_init();
    let caller = ic_cdk::caller();
    INIT_STATE.with(|state| {
        let mut state = state.borrow_mut();
        state.authority = caller;
    })
}
```

-------------------------

senior.joinu | 2023-06-13 09:24:37 UTC | #14

A minimal reproducible example.

-------------------------

pramitgaha | 2023-06-13 09:35:28 UTC | #15

can you explain what do i have to share?

-------------------------

senior.joinu | 2023-06-13 09:40:06 UTC | #16

Yes, sure.
So you have this code that doesn't work. If it is not a secret, just share it without modifying and provide an instruction on how to achieve the same error you're having. 
If it is a secret, then find a way to achieve the same error with similar code, that does not reveal any secrets, and share this code instead.

-------------------------

pramitgaha | 2023-07-13 02:08:28 UTC | #17

hello @Severin, does the memory size returned from the method is heap storage or it is also the combination of stable memory too?

-------------------------

ulan | 2023-07-13 13:41:59 UTC | #18

It the sum of Wasm and stable memory sizes.

-------------------------

lastmjs | 2023-07-13 16:13:10 UTC | #19

It's been 64 GiB for a bit now.

-------------------------

