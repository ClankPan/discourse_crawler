borovan | 2022-04-16 12:51:42 UTC | #1

Hi there,

Is there a good way to just exit out in the middle of an Update call and not change the state?

If we had a complex function call that modified a load of data structures, and there was an error right at the end, how would we keep the integrity of the data?  Writing a commit/rollback system for our ORM would be possible but... horrible.

**EDIT** - just saw this.  https://forum.dfinity.org/t/discard-state-changes-from-update-call-without-trap/5862.  Yes we'd like to be able to return a message to the user if possible.

-------------------------

justmythoughts | 2022-04-16 17:49:22 UTC | #2

If itâ€™s in a shared/async context you can try throwing asynchronous errors

https://smartcontracts.org/docs/language-guide/errors.html#_asynchronous_errors

-------------------------

borovan | 2022-04-17 14:35:52 UTC | #3

I think we're going to bite the bullet and making a Transaction wrapper for all our complex queries.  No idea where to start!

-------------------------

skilesare | 2022-04-17 16:31:29 UTC | #4

One thing to be wary of is changes that happen during your intercanister calls. Your transaction wrapper will need to handle this or throw if the underlying data changed. An alternative is to lock a record when it goes into a trx, but then you will slow your app.  No easy fixes.

I bet there are some js or rust transaction libraries that would be decent patterns to follow, especially with the move to async js recently.

An update to this pattern (https://github.com/aramakme/candy_library/blob/88de87b85006d22480829bb55336407f9266a12e/src/properties.mo#L96) with a transaction layer might be a place to start. Most of this came from @quint so he may have some ideas.

-------------------------

borovan | 2022-04-17 16:50:48 UTC | #5

![image|604x493](upload://imGrdpv9qxPZs8TgEVdwwksjwbm.png)

well this was the first step.  I was thinking of having a Transaction class that could store a list of updates, but you can't have an array of different generic types.  I just need to store a load of queries but not pull the trigger until all the validation is done.  I'll get there haha.

-------------------------

