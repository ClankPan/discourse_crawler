jamesbeadle | 2023-09-20 01:25:30 UTC | #1

I would like to get the neuron id for the authenticated user in my frontend so I can send it with the MakeProposal payload:

![image|690x394](upload://7dLCRMNHHAiaMY6dtaN8bgXMUjw.png)

How can I obtain this?

-------------------------

lmuntaner | 2023-09-20 08:58:22 UTC | #2

You can use sns-js to query the neurons of a specific principal.

https://github.com/dfinity/ic-js/blob/4c8dd0b22416f86f75b5a957fa6a210b44fd5156/packages/sns/src/governance.canister.ts#L82

The method has a parameter called "principal", if you pass the authenticated user's principal, you will get the neurons of the user.

That said, remember that the principal is different per domain. The same user in your dapp, is not the same user in NNS Dapp for example.

Therefore, you might need to ask them to add their principal in your dapp as hotkey of the neuron in NNS Dapp (assuming they have it there). Once the added as a hotkey, you can use their principal to query the neurons. Adding it as hotkey, will also give permissions to the principal in your dapp to make proposals.

-------------------------

jamesbeadle | 2023-09-20 09:03:53 UTC | #3

Thanks for coming back to me. 

If I understand you correctly, you're saying that in OpenChat, to vote on things, that user has added the neuron id here:

![image|690x258](upload://9IJ0CQTxJBWffOcQKddglwdm9Hh.png)


in the app somewhere?

I'm not 100% sure what you mean by hotkey?

-------------------------

jamesbeadle | 2023-09-20 09:31:37 UTC | #4

Ok I in the NNS:

![image|690x171](upload://aWIRu48vhwEQ6GbaeqwaZuN7vsi.png)


User adds their principal and they get their voting power in the app, simple as that? If they have say 3 neurons, add a hotkey to all 3, will the Principal get the VP of all 3 neurons in OpenFPL?

Appreciate the help on this.

-------------------------

jamesbeadle | 2023-09-20 09:46:23 UTC | #5

@Imuntaner would I need to loop through all the neurons returned for the principal that has been added as a hotkey and attempt to raise the proposal multiple times:

![image|690x379](upload://xNgoIzxFBMqNA28HSjfgeDMHI1J.png)


So the first time if an identical proposal doesn't exist (checked in the validator_method_name) it will raise the proposal but if it does exist it should vote on the existing proposal.

-------------------------

lmuntaner | 2023-09-20 12:16:18 UTC | #6

Yes, correct. Simple as that.

Yes, either loop or choose one to make the proposal. Or let the user do so. Proposals cost tokens; therefore, take into account the stake of the neuron. Or add a fallback mechanism.

-------------------------

jamesbeadle | 2023-09-20 12:21:41 UTC | #7

But I'm right in thinking that if a user attempts to make a proposal in that loop, the first time it will add the proposal and cost them tokens. Then in the second loop the add proposal function is called again and votes are just added as the validator_method_name converts their action of raising a proposal into voting an existing one, thus not costing them tokens on the second loop?

Tokens for the people raising proposals are then returned to user if it passes correct?

-------------------------

lmuntaner | 2023-09-20 13:15:26 UTC | #8

I only see one loop in the code. Inside that loop, each neuron creates a proposal. I don't see how neurons vote in a proposal.

You might want to exit the loop if the proposal is created successfully. Otherwise it will create one per neuron, no?

-------------------------

jamesbeadle | 2023-09-20 13:32:46 UTC | #9

So yes, say I have 3 neurons and run that code it would create 3 proposal. But what I want to do is intercept in the validator_method_name and check if the proposal already exists and if so just vote for it there.

The reason is there could be a 1000 people all at the same time revaluing a player, each could think they were creating the first proposal and not voting on an existing one. So exiting the loop doesn't solve the problem if another user goes to revalue a player aswell.

Another example might be when a game finishes, 1000 users might all add a proposal to say the score is 1-0. The first person I want to create the proposal but the 999 remaining people who say it's 1-0 will just be voting for the initial proposal.

On the backend I need to check whenever these governance proposal are already created by another user and then if it has I will just vote for the existing one with the neurons voting power.

Thanks,
James

-------------------------

lmuntaner | 2023-09-20 15:29:30 UTC | #10

Oh, I see. I'm not so sure the validator_method_name was built with that in mind. I'm also not sure whether you can submit a vote for the neuron from there. It might not have permissions to do so.

This logic of checking proposals might need to happen before submitting the proposal.

Maybe @lara has better ideas. It's an interesting problem, and I understand why doing it on the client side is not enough.

-------------------------

jamesbeadle | 2023-09-20 15:49:39 UTC | #11

I'm happy to do it on the client side, I'm just worried about a certain situation. 

So if 2 users submit some data at exactly the same time, both will create the identical proposal. Then every user who does the same thing after I can check if proposal exists, and just add votes to that proposal from the client side.

It's stopping that identical proposal being created initially.

-------------------------

jamesbeadle | 2023-09-20 16:04:08 UTC | #12

I'll just ask this as it may be a stupid question but it's burning a hole in my brain. 

So I get interfacing with the SNS is easiest via the sns-js library, it uses agent-js to send the user's principal with requests so the hotkey workflow can work. 

What I don't get is why this can't also be done on the backend? Is the caller here not the principal the hotkey uses:

![image|690x93](upload://5JeffEP6QNrTGFJak1KvMpQ9f37.png)

And then can I not just create an interface like I do for the ledger and somehow initialise it with the caller?

![image|690x143](upload://kizV1p6WHOBvC7U0yMu2guncqnm.png)

If you could explain what I am not getting it would be appreciated.

Thanks,
James

-------------------------

lmuntaner | 2023-09-20 16:29:46 UTC | #13

There is no such thing as stupid question, even less within IC :joy: 

The reason it can't be used from the backend is because the call needs to be signed with from the principal in the frontend. And that can only be done from the client.

Making calls from the backend works, but they won't be signed with the principal's user.

-------------------------

jamesbeadle | 2023-09-20 17:36:23 UTC | #14

Thank you for clarifying. That really clears up the design then. Since I won't be able to raise a proposal anyway within the validator_method_name as I won't be able to sign it with the principal's user.

I still worry that 2 users will create identical proposals at the same time because it doesn't exist at the time they submit it. Would I be able to solve this by checking the proposals list in the validator_method_name and reject it from there? Then when a user enters duplicated data at almost the same time as another user, one would be rejected in the validator_method_name and that rejected user would receive an error and retries with voting on the other user's proposal?

I read that returning a value from the validator_method_name is required so I can return the existing proposal id if it fails?

Does this work? I don't need to sign the message to get the proposals list?

-------------------------

lmuntaner | 2023-09-20 18:57:06 UTC | #15

That might work. I don't know whether you'll get the returned value (proposal id) from the make proposal endpoint though. I'll ask the NNS team about it.

But since if it happens it's because the proposal is very new, you can get the latest proposals and find a similar one there.

Yes, getting the proposals list doesn't need to be signed by a logged in user. Therefore, you can get it from the canister.

-------------------------

jamesbeadle | 2023-09-20 19:51:31 UTC | #16

Thank you for all your help on this.

-------------------------

daniel-wong | 2023-09-21 09:03:24 UTC | #17

[quote="lmuntaner, post:15, topic:23179"]
I don’t know whether you’ll get the returned value (proposal id) from the make proposal endpoint though. I’ll ask the NNS team about it.
[/quote]

Yes. [Here] is where the Err string from the validator starts its long bucket brigade back to the InvalidProposal GovernanceError error_message.

[Here]: https://sourcegraph.com/github.com/dfinity/ic@56800b234dc986c14e8730ba9c26f29811c3db79/-/blob/rs/sns/governance/src/proposal.rs?L142

# Tangent

Trying to reject duplicates in a distributed system is possible, but fraught with peril.

A simpler alternative is to just let competing proposals through. Then, let people vote on the competing proposals for the one(s) that they like.

-------------------------

jamesbeadle | 2023-09-21 09:03:42 UTC | #18

It's just I want proposal governance on loads of tiny bits of data, so I want to abstract that away from the user. 

They are just performing an action to revalue something up or down. They don't really want to see the proposal behind it, although they could.

So in my frontend I've currently got this code that will look for the existing proposals to revalue up and down and then either vote or create a new proposal:


    const revaluePlayerUp = async (player) => {
        const functionIdUp = 1000;
        const functionIdDown = 2000;
        const proposalTitleUp = "Increase Player Value Proposal";
        const proposalUrl = "https://openfpl.xyz/governance";
        const proposalSummaryUp = `Proposal to increase the value of ${player.firstName !== "" ? player.firstName.charAt(0) + "." : ""} ${player.lastName}.`;
    
        const payload = IDL.encode(InitArgs, `(record { seasonId=${systemState.activeSeason.id}; gameweek=${systemState.activeGameweek} playerId=${player.id} })`);
        const neurons = await SnsGovernanceCanister.listNeurons({ principal: authClient.getPrincipal() });
    
        for (const neuron of neurons) {
            const neuronId = neuron.id[0].NeuronId.toString();
            
            const activeProposals = await SnsGovernanceCanister.listProposals({
                includeStatus: [SnsProposalDecisionStatus.PROPOSAL_DECISION_STATUS_OPEN]
            });

            const matchingProposalDown = activeProposals.filter(proposal => {
                const action = proposal.proposal?.action[0];
                return action?.ExecuteGenericNervousSystemFunction?.function_id === functionIdDown && IDL.decode(InitArgs, proposal.payload).playerId === player.id;
            });

            const matchingProposalUp = activeProposals.filter(proposal => {
                const action = proposal.proposal?.action[0];
                return action?.ExecuteGenericNervousSystemFunction?.function_id === functionIdUp && IDL.decode(InitArgs, proposal.payload).playerId === player.id;
            });
    
            if (matchingProposalDown) {
                await SnsGovernanceCanister.registerVote({
                    neuronId: neuronId,
                    proposalId: matchingProposalDown.id,
                    vote: "NO"
                });
            }
    
            if (matchingProposalUp) {
                await SnsGovernanceCanister.registerVote({
                    neuronId: neuronId,
                    proposalId: matchingProposalUp.id,
                    vote: "YES"
                });
            } else if (!matchingProposalUp && !matchingProposalDown) {
                const manageNeuronRequest = createManageNeuronRequestForProposal(
                    neuronId, proposalTitleUp, proposalUrl, proposalSummaryUp, functionIdUp, payload
                );
                await SnsGovernanceCanister.manageNeuron(manageNeuronRequest);
            }
        }
    };

-------------------------

daniel-wong | 2023-09-21 09:05:59 UTC | #19

Ah. In that case, *you* can choose to not show "extraneous" proposals. You can maybe choose to show the one where the most voting power has been exercised.

-------------------------

jamesbeadle | 2023-09-21 09:10:33 UTC | #20

I don't know if this helps but here is the UI design where this governance will start:
![image|690x451](upload://qDrvQFcRaDpFmdi53ZavnXFz0Vn.jpeg)

So clicking the green button will revalue up and red will revalue down. Each of these green button will create / vote on the appropriate player, and also vote NO on any existing revalue player down proposal.

So I don't show proposals, I show players and the list can change.

-------------------------

lara | 2023-09-21 09:18:50 UTC | #21

I also wondered: could you just let the "duplicate" proposals be submitted and filter them in the frontend? I.e., just take the oldest proposal with the same information into account in the frontend (so the newer ones never even influence what users see)? 

Note thought that proposals still have a cost, so the "duplicate" ones will likely be rejected which measn that the submitter has to pay a fee. So not sure if this is nice for users.

-------------------------

jamesbeadle | 2023-09-21 09:19:58 UTC | #22

Yeah that sounds terrible for users!

-------------------------

daniel-wong | 2023-09-21 09:28:33 UTC | #23

Ok, then let me suggest this:

```
// C-like Pseudocode
//        ^^^^^^^^^^

fn revalue(asset, up_or_down) {
  proposal = get_or_create_revalue_proposal(asset);
  vote(proposal, up_or_down);
}

fn get_or_create_revalue_proposal(asset) {
  if not asset.lock.acquire() {
    return err;
  }

  if is_there_revalue_proposal(asset) {
    asset.lock.release();
    return the existing proposal;
  }

  // No TOCTOU issue here, because asset.lock is being held.
  proposal = create_revalue_proposal(asset);

  asset.lock.release();
  return proposal;
}
```

This way of enforcing uniqueness does not involve the validator. As a result, the validator can remain nice and simple.

-------------------------

jamesbeadle | 2023-09-21 09:47:55 UTC | #24

Yes I did think about a lock, I will look at this as I think it might be the way to go.

As for the proposal fee for unsuccessful proposals, is it possible to have different fees for different types of proposals. I want to encourage player revaluations so ideally it would cost people nothing. Whereas the standard proposals should have the usual fee in place.

-------------------------

daniel-wong | 2023-09-21 10:43:49 UTC | #25

:+1:

Remember that a crash might occur while the lock is held. This is one of the issues that makes distributed systems "fraught with peril" :grimacing:

-------------------------

jamesbeadle | 2023-09-21 10:55:03 UTC | #26

The issue being that my canister crashes, the asset is locked and doesn't get released?

Could you explain the problem a little if possible?

Could I utilise the timer system to release locks at certain points?

-------------------------

jamesbeadle | 2023-09-21 11:43:34 UTC | #27

@daniel-wong @Imuntaner 

I think I get what to do. I’m fighting the governance design of the IC and I’m just going to redesign my app to fit the way you’ve set things up. I’m going to drop all the restrictions and I will just have those revaluation buttons raise a proposal. This will make neuron holders sure that a players value change is justified as it will cost them if people don’t vote for the revaluation. I’ll just add another view for the voting of the valuation proposals people have changed.

Thanks for all your help on this!

James

-------------------------

