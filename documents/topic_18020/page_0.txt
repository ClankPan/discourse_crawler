blabagastered | 2023-01-17 22:01:03 UTC | #1

Basically seeking something like this:

` stable var users : HashMap.HashMap<Principal, UserData> = HashMap.empty();`

Where for example


```
type UserData = {
    principal : Principal;
    favorite_color : Text;
    name : Text;
    favorite_number : Nat;
  };
```

-------------------------

Gekctek | 2023-01-17 23:30:54 UTC | #2

Not that I have seen.

I know there was a stable b-tree implementation but i havent used it myself
https://github.com/sardariuss/MotokoStableBTree
https://icdevs.org/bounties/2022/08/14/Motoko-StableBTree.html

Otherwise what you would do is have a stable variable that was like a array or another stable data structure

-------------------------

blabagastered | 2023-01-18 01:24:39 UTC | #3

Thank you, I ended up using this for now. As far as I can tell, HashMap is a far better structure than Trie to store principals as keys.

https://github.com/ClankPan/StableHashMap

My worry are bugs and security vulnerabilities since it seems to be a little known repo, but really the natural structure is HashMap so I'll use this for now.

-------------------------

rossberg | 2023-01-18 08:41:10 UTC | #4

How about `RBTree`? (Which should perhaps better be named `TreeMap` or something like that.)

-------------------------

skilesare | 2023-01-18 11:45:53 UTC | #5

We use both motoko-hash-map and the migration pattern in the latest version of axon.  See: https://github.com/icdevs/axon/blob/da8601a65fce0d2536971bca562538fa39f1cd53/src/Axon/migrations/v002_000_001/lib.mo#L23 for the ledger implementation.

-------------------------

blabagastered | 2023-01-18 12:25:36 UTC | #6

[quote="rossberg, post:4, topic:18020"]
How about `RBTree`?
[/quote]

Is it stable?

I see 

`  stable var rb_users = RBTree.RBTree<Principal, UserData>(Principal.compare);`


```
variable rb_users is declared stable but has non-stable type
  RBTree<Principal, UserData>Motoko
```

-------------------------

blabagastered | 2023-01-18 12:27:25 UTC | #7

[quote="skilesare, post:5, topic:18020"]
We use both motoko-hash-map and the migration pattern in the latest version of axon.
[/quote]

Are there major advantages of doing this over StableHashMap?

-------------------------

skilesare | 2023-01-18 13:47:57 UTC | #8

Likely yes.  I haven't tested it against that library explicitly, but check this thread: https://forum.dfinity.org/t/day-origyn-motoko-gift-2-a-better-map/14758

-------------------------

pk34 | 2023-01-31 14:26:07 UTC | #9

I work with something like this:

For the types
```
/// Users
    public type UserID   = Principal;
    public type Username = Text;
    public type UserData = {
        username : Username;
        banned   : Bool;
    };
```

The HashMaps
```
/// We create an array as a stable var, since hashmaps are not stable
private stable var _users : [(UserID, UserData)] = [];

/// Then we create the hashmap and initialize it from the _users array
var users : HashMap.HashMap<UserID, UserData> = HashMap.fromIter(_users.vals(), 0, Principal.equal, Principal.hash);
```

And to keep them on every update
```
//State functions
    system func preupgrade() {
        /// Before an update we put all values from the hashmap to the array, so they can be preserved
        _users := Iter.toArray(users.entries());
    };
    system func postupgrade() {
        /// And since the hashmap is initialized with all the values from the stable array, we can reset the array so in the next update values don't duplicate
        _users := [];
    };
```

I hope this can help with your main problem (:

-------------------------

blabagastered | 2023-01-31 14:43:52 UTC | #10

[quote="pk34, post:9, topic:18020"]
I hope this can help with your main problem (:
[/quote]

Thank you, I ended up using this on @skilesare's advice elsewhere, which I believe doesn't require pre-postupgrade: https://github.com/ZhenyaUsenko/motoko-hash-map

-------------------------

jaxopaxo | 2024-04-08 09:52:58 UTC | #11

This is working well, I added below

let users = HashMap.HashMap<Principal, User>(0, Principal.equal, Principal.hash);
private stable var _users : [(Principal, User)] = [];
  
//State functions
system func preupgrade() {
	/// Before an update we put all values from the hashmap to the array, so they can be preserved
    _users := Iter.toArray(users.entries());
};
system func postupgrade() {
	/// And since the hashmap is initialized with all the values from the stable array, we can reset the array so in the next update values don't duplicate
    for ( (p, al )  in _users.vals() ) {
		users.put(p, al);
		};
	_users := [];
};

-------------------------

