tiago89 | 2023-06-18 09:50:41 UTC | #1

Hi,

On DFX 14.1 (two weeks ago), it was released the sub command "deps", which I think is really cool and useful!

I want to give it a try on a project I am in, but I am not finding any deeper explanation / reference or guide.

Have searched on internet computer:
- https://internetcomputer.org/docs/current/references/cli-reference/dfx-parent
- https://internetcomputer.org/docs/current/references/cli-reference/

Have searched on this forum, no topic that I could find, (either forum search or google search).

My only luck was indeed on the github repo, the very files that have the subcommand codes:
https://github.com/dfinity/sdk/tree/c7d4e36bac8275bf94442afbed84e1617d3e78ad/src/dfx/src/commands/deps

They already have some answers (eg.: that pull command defaults to mainnet, and that can handle the local network as well).

But I am still wondering how to properly use this (which I will probably discover on my own), but still think it's important to clarify on a guide:
- what use cases does it currently address?
- what does dfx deps pull actually fetches (just the metadata / types / candid or the actual wasm?)
- dfx deps deploy will deploy exactly what? (it would be really cool if it was the wasm itself)
- how does it handle dependencies of the dependencies?
- how should we deal with updates? (I am guessing a simple re-pull and re-deploy would do)
- how should we use this info in our projects (is it possible to use the ../../declarations as we do for _backend canister? is it possible, in motoko, to do import "canister:some_cool_deps"?)

I will now be discovering it on my own, but since this feature has the potential to profoundly changing the development habits (and making it so much easier to use external services), think the community would really value having more docs about the topic.

Thanks,
Tiago

-------------------------

Severin | 2023-06-20 08:15:31 UTC | #2

So far the feature is implemented, but it requires support from canisters. @lwshang is working on getting an example canister fit for pulling with `dfx deps` and will then provide detailed instructions how to get other canisters ready.

I'll answer your questions to the best of my abilities

[quote="tiago89, post:1, topic:20792"]
what does dfx deps pull actually fetches (just the metadata / types / candid or the actual wasm?)
[/quote]
All of it, but it can be other/modified from production since it may be more appropriate to have a dev version locally. E.g. Internet Identity is usually run locally with a disabled captcha. Or a DEX may want to supply some initial state with a dummy swap pool already pre-configured

[quote="tiago89, post:1, topic:20792"]
dfx deps deploy will deploy exactly what? (it would be really cool if it was the wasm itself)
[/quote]
Whatever is provided in the previous step. Can be the production wasm, or something else

[quote="tiago89, post:1, topic:20792"]
how does it handle dependencies of the dependencies?
[/quote]
Just fine

[quote="tiago89, post:1, topic:20792"]
how should we use this info in our projects (is it possible to use the …/…/declarations as we do for _backend canister? is it possible, in motoko, to do import “canister:some_cool_deps”?)
[/quote]
Integrating with these canisters works the same as with all other canisters. Just the way you get them to your local replica is different.

-------------------------

tiago89 | 2023-06-20 07:27:31 UTC | #3

Thanks @Severin ,

You are always so helpful! :sweat_smile: 

Ah, it needs to be set up on the side of the canister (so that it can be pulled), just like packages.

Really cool, this is very promising, for sure let's give it enough time to prepare, we will all be watching for updates :+1: 

Thanks and have a great day!

-------------------------

lwshang | 2023-06-20 14:23:44 UTC | #4

The example project is available at:

https://github.com/lwshang/pullable

It provides instructions for both service providers and consumers.

-------------------------

