sberreth | 2021-05-16 13:13:16 UTC | #1

Since canisters generally don't run like smart contracts on a public chain that everyone can inspect, how can you run a canister that is running code which is publicly verifiable?

-------------------------

wang | 2021-05-16 14:20:07 UTC | #2

I imagine some sort of canister registry that lets developers upload source code, which is compiled (by a compiler canister) so the resulting binary can be compared. An additional service can be offered that notifies users when canisters are upgraded.

Who is building this?

-------------------------

Ori | 2021-05-16 18:55:09 UTC | #3

Working on it! A few things to iron out for that particular feature but it’s on the roadmap.

-------------------------

alexeychirkov | 2021-06-01 09:56:16 UTC | #4

Is there technical roadmap available somewhere?

-------------------------

Ori | 2021-06-01 14:28:44 UTC | #5

Not as such, but it is for the community so input on features going forward is definitely open—we want this to evolve with everyone’s needs.
(I should stress this is a third party endeavour btw!)

-------------------------

Hazel | 2021-06-01 13:10:22 UTC | #6

@Ori - If we could just get the [module hash](https://sdk.dfinity.org/docs/interface-spec/index.html#ic-canister_status) via a publicly available method that would be a nice stopgap.

-------------------------

wang | 2021-06-01 14:01:01 UTC | #7

https://github.com/ic-cubes/ic-tools/blob/main/components/PrincipalDetails.tsx#L59-L72

-------------------------

Hazel | 2021-06-01 14:30:48 UTC | #8

:tada: :tada: :tada: Thanks for sharing this! I was shown 

[https://sdk.dfinity.org/docs/interface-spec/index.html#ic-canister_status](https://sdk.dfinity.org/docs/interface-spec/index.html#ic-canister_status)

> Only the controllers of the canister can request its status.

and was under the impression the module_has wasn't accessible at all to anyone except the owner.

-------------------------

nomeata | 2021-06-01 15:19:22 UTC | #9

The `aaaaa-aa.canister_stats()` method is indeed restricted, but some information is also exposed via the state tree, as @wang’s code shows.

-------------------------

dave | 2021-06-01 20:44:46 UTC | #10

So -- to summarize -- is it correct that a third party is able to get the module hash of a canister (e.g., using Wang's code above), and if the canister owner published their source code, they could then verify the code by basically just hashing it? Obviously this process would be improved/easier with a registry as discussed.

-------------------------

prithvi | 2021-06-01 21:38:14 UTC | #11

You can also get the module hash and the controller of any canister by doing
`dfx canister --no-wallet --network ic info <canister_id>`

-------------------------

nomeata | 2021-06-02 06:45:19 UTC | #12

@dave, the summary is almost correct. the module hash is the hash of the _compiled_ code. So if the module author is publishing the source code, they should also publish instructions how to build that **bit-for-bit reproducibly**, which is not that easy (as, for example, local file paths end up in the `.wasm`, changing the hash).

This is why, for example, the Internet Identity project ships a `Dockerfile` and [instructions to build the `.wasm`](https://github.com/dfinity/internet-identity/blob/main/docs/internet-identity-spec.adoc#official-build) in a way that _should_ allow anyone to reproduce the deployed `.wasm`.

Try it! According to <https://github.com/ic-association/nns-proposals/blob/main/proposals/network_canister_management/20210527T2203Z.md> the latest deployed git revision is `bd51eab`, so you should be able to check out the `internet-identity` repository at that revision, follow the build steps, and get a `.wasm` file that matches the module hash as reported by `dfx canister ic info`.

See https://reproducible-builds.org/ for more on why reproducible builds are hard and what people to do get them.

-------------------------

nomeata | 2021-06-02 08:12:05 UTC | #13

Here is a more detailed walk-through: https://forum.dfinity.org/t/walkthrough-verifying-the-code-of-the-internet-identity-service/4650/2

-------------------------

dave | 2021-06-02 15:58:01 UTC | #14

Excellent walk-through! Thanks, this is exactly what I was looking for. Awesome stuff. On a different but somewhat related note, with regards to canister ownership -- if a canister owner can update the code anytime, then am I correct that dapps will likely have their original owners/deployers revoke their ownership after deployment? (Obviously there are also some other models that could be used). Is revoking ownership straightforward?

-------------------------

nomeata | 2021-06-02 17:02:07 UTC | #15

Yes, it's straight forward, see https://forum.dfinity.org/t/non-revokable-apis/1156/5

-------------------------

