baolongt | 2024-02-05 03:49:10 UTC | #1

I'm deploying some service outside of Dfinity canister. Any with JS agent and did file I can make few interesting thing with app outside of canister. For every canister I used icscan to get the did file but this morning I found that there is some canister like Openchat's canister cannot get the did file from icscan. 

So my question is what is mechanism to public the did file in icscan and is that any way to get the did file with these private canisters?

-------------------------

Severin | 2024-02-05 08:13:00 UTC | #2

If canisters expose their .did file then the convention is to do it in the `candid:service` metadata section. You can fetch that section with `dfx canister --ic metadata <canister id> candid:service`

-------------------------

jaesharma | 2024-06-26 16:56:03 UTC | #3

How can we do the same programatically? can we fetch the candid of canister using javascript?

-------------------------

sea-snake | 2024-06-26 19:26:35 UTC | #4

Yes, there's a utility method in agent-js to fetch the candid:

```js
import { fetchCandid } from "@dfinity/agent";

const agent = new HttpAgent()
const did = await fetchCandid(CANISTER_ID, agent);
```

Keep in mind this will be a string containing the did file contents. If you want to use this to e.g. create an actor, you'd still need to convert this into js/ts definition files.

-------------------------

jaesharma | 2024-06-27 02:49:58 UTC | #5

to convert did into js/ts i found, we can get it from this canister:
```
import { IDL } from "@dfinity/candid";
import { Actor, HttpAgent } from "@dfinity/agent";

export const candidToJS = async (candid_source: string) => {
  // call didjs canister
  const didjs_interface: IDL.InterfaceFactory = ({ IDL }) =>
    IDL.Service({
      did_to_js: IDL.Func([IDL.Text], [IDL.Opt(IDL.Text)], ["query"]),
    });

  const candidCanister = `a4gq6-oaaaa-aaaab-qaa4q-cai`;

  const agent = new HttpAgent({ host: "https://icp-api.io" });

  const didjs = Actor.createActor(didjs_interface, {
    agent,
    canisterId: candidCanister,
  });
  const js: any = await didjs.did_to_js(candid_source);
  if (Array.isArray(js) && js.length === 0) {
    return undefined;
  }
  return js[0];
};
```

do we have any other offline solution? i mean where we generate didtojs on our end and don't have to make any call to other service or canister.

-------------------------

sea-snake | 2024-06-27 08:10:55 UTC | #6

Running the following in WASM is the current solution I'm working with: https://github.com/dfinity/candid/tree/master/rust/candid_parser

-------------------------

b3hr4d | 2024-06-28 18:29:36 UTC | #7

[quote="jaesharma, post:3, topic:27294"]
Can we fetch the candid of a canister using JavaScript?
[/quote]

I would suggest using `@ic-reactor`, a library I'm currently developing. You can easily use the [CandidAdapter](https://b3pay.github.io/ic-reactor/functions/core.createCandidAdapter.html) feature to get the candid definition as an `idlFactory`, which can be used directly to create an actor:

```typescript
// adapter.ts
import { createAgentManager, createCandidAdapter } from "@ic-reactor/core";

export const agentManager = createAgentManager({ withProcessEnv: true });

export const adapter = createCandidAdapter({ agentManager });

export async function getCandidDefinition(canisterId: string) {
  return adapter.getCandidDefinition(canisterId);
}
```

[quote="jaesharma, post:5, topic:27294"]
To convert DID into JS/TS, I found that we can get it from this canister:
[/quote]

This approach is similar to the one used by [candid-ui](https://github.com/dfinity/candid/tree/master/tools/ui).

[quote="jaesharma, post:5, topic:27294"]
Do we have any other offline solutions?
[/quote]

Yes, there is also an offline solution using the wasm mentioned by @sea-snake. You just need to install:

```shell
npm install @ic-reactor/parser
```

Then, initialize the wasm parser after creating the `CandidAdapter`:

```typescript
adapter.initializeParser();
```

Additionally, if you are using React, you might want to try [@ic-reactor/react](https://forum.dfinity.org/t/introduction-ic-reactor-react-for-react-developers/27930/1). It has a built-in adapting actor feature that only requires you to specify the `canisterId` to interact with it!

I have developed this library and it is used extensively in the creation of B3Forge. Please also give a shot to the [B3Forge/playground](https://sehgq-cqaaa-aaaap-ahc4q-cai.icp0.io/playground). As you can see, it does not make a call to convert candid into JavaScript.

-------------------------

jaesharma | 2024-06-29 00:12:09 UTC | #8

ok i'll check these out. thanks for the help.

-------------------------

