peterparker | 2021-08-06 06:16:18 UTC | #1

I try to implement a `query` function that calls an `async` function but, I am facing the error "misplaced await".

I have the feeling I am hitting the limitation described in this [post](https://forum.dfinity.org/t/cant-call-an-imported-actors-query-functions/1732/12?u=peterparker) but, hopefully, I am "just" missing something.

Any idea how can I solve this?

```
import Error "mo:base/Error";

actor Echo {

  public query func say(phrase : Text) : async Text {
      await check_permission(phrase); // <-- misplaced await

      return phrase;
  };

  private func check_permission(phrase: Text) : async () {
    if (phrase == "no") {
       throw Error.reject("No permission.");
    }
  };
};
```

P.S.: Long story short. I have to transform my shared functions ("getter") to `query` in order to improve the performance of the readonly queries of my web app. 

On the other side, as we have users, I have implemented a permission check that throw errors if access is not granted. Therefore `throw Error.reject` which, I think, requires the function to be `async`.

-------------------------

claudio | 2021-08-06 07:49:40 UTC | #2

Yes, you've hit the limitation.

A workaround, that will also greatly improve your perf and keep execution of the check atomic, is to rewrite your check to return a plain Bool (not async Bool) and  test and throw at the former callsites.

-------------------------

peterparker | 2021-08-06 07:49:37 UTC | #3

[quote="claudio, post:2, topic:6325"]
to rewrite your check to return a plain Bool (not async Bool) and test and throw at the former callsites.
[/quote]

It's what I had in mind too but, thought it was worth a try to ask first before refactoring all my code ðŸ˜‰.

Thanks for the confirmation!

-------------------------

peterparker | 2021-08-06 14:46:29 UTC | #4

Here the resulting canister if someone is interested: https://github.com/deckgo/deckdeckgo/tree/feat/internet-computer/studio/canisters/users

I modified the permission check with boolean and also wrapped the result in an object that contains both result and a potential error label. Doing so, in my actor, I am able to check if there were errors and, in such cases, still throw Exception.

-------------------------

