ilbert | 2023-10-27 17:39:33 UTC | #1

In our [IC WebSocket JS SDK](https://github.com/omnia-network/ic-websocket-sdk-js), we're trying to make it possible for developers to not care about serialization and deserialization of application messages manually, while at the same enforcing them to implement a strong typing system between their canisters and their clients.
To do so, we require the generated actor in the parameters of the `IcWebSocket` constructor and extract the developer's application message type from the `ws_message` method using this function:
https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/idl.ts#L114-L137

Then, we're using the obtained IDL type to decode the WebSocket message content coming from the canister:
https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/ic-websocket.ts#L483

However, if in the tests everything goes fine (using a custom created actor), when deploying it on the [example](https://github.com/omnia-network/ic_websocket_example), it gives some errors

1. the `extractApplicationMessageIdlFromActor` function throws the error:
    ```
    Application message type must be optional in the ws_message arguments
    ```
    which means that the extracted type is not an instance of `OptClass`, while instead the generated `idlFactory` has the correct `IDL.Opt` type.
    
    As a work around to this error, I've replaced the instanceof check with:
    ```diff
    - if (!(applicationMessageArg instanceof IDL.OptClass)) {
    + if (!applicationMessageArg.name.startsWith("opt")) {
    ```
    Is it robust enough?

2. after fixing the previous error, the [`IDL.decode`](https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/ic-websocket.ts#L483) call throws:
    ```
    Error: type mismatch: type on the wire rec_4, expect type record {text:text; timestamp:nat64}
        at Ba.checkType
    ```
    (example's application message type declaration [here](https://github.com/omnia-network/ic_websocket_example/blob/main/src/ic_websocket_example_backend/ic_websocket_example_backend.did#L2-L5))

Should we extract the IDL type in a different way? What are we missing?

-------------------------

chenyan | 2023-10-27 18:32:56 UTC | #2

How do you get the IDL type? I suspect both questions are related to a `RecClass` wrapper in the JS IDL definition. Can you print the console.log of `applicationMessageArg` and `this._applicationMessageIdl`?

-------------------------

ilbert | 2023-10-27 18:44:44 UTC | #3

[quote="chenyan, post:2, topic:24046"]
How do you get the IDL type?
[/quote]
The whole extraction of the IDL type is done in the [extractApplicationMessageIdlFromActor](https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/idl.ts#L114-L137).

[quote="chenyan, post:2, topic:24046"]
Can you print the console.log of `applicationMessageArg` and `this._applicationMessageIdl`?
[/quote]
- `applicationMessageArg` (hex): `4449444c016c02ad99e7e70471d6a9bbae0a7801000470696e673851820ceb0a9217`
- `this._applicationMessageIdl` (couldn't really copy it from browser Dev Console): 
![image|506x500](upload://bCob3stmYv6gj3bwuHCrKpnHbVL.png)

-------------------------

chenyan | 2023-10-27 19:23:10 UTC | #4

How do you construct the input `actor` then? If https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/idl.ts#L136 works, it means `applicationMessageArg instanceof IDL.RecClass` is true. You can either check `applicationMessageArg["_type"] instanceof IDL.OptClass`. String matching on the `name` is probably good enough as well.

For the second question, on https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/idl.ts#L136, can you return `applicationMessageArg` instead of `applicationMessageArg["_type"]`?

-------------------------

ilbert | 2023-10-27 20:03:28 UTC | #5

[quote="chenyan, post:4, topic:24046"]
How do you construct the input `actor` then?
[/quote]
The input actor is the actor generated by the `dfx generate` command and imported from the `declarations` folder. Here's the generated `idlFactory` of used by the actor:
```javascript
export const idlFactory = ({ IDL }) => {
  const ClientPrincipal = IDL.Principal;
  const ClientKey = IDL.Record({
    'client_principal' : ClientPrincipal,
    'client_nonce' : IDL.Nat64,
  });
  const CanisterWsCloseArguments = IDL.Record({ 'client_key' : ClientKey });
  const CanisterWsCloseResult = IDL.Variant({
    'Ok' : IDL.Null,
    'Err' : IDL.Text,
  });
  const CanisterWsGetMessagesArguments = IDL.Record({ 'nonce' : IDL.Nat64 });
  const CanisterOutputMessage = IDL.Record({
    'key' : IDL.Text,
    'content' : IDL.Vec(IDL.Nat8),
    'client_key' : ClientKey,
  });
  const CanisterOutputCertifiedMessages = IDL.Record({
    'messages' : IDL.Vec(CanisterOutputMessage),
    'cert' : IDL.Vec(IDL.Nat8),
    'tree' : IDL.Vec(IDL.Nat8),
  });
  const CanisterWsGetMessagesResult = IDL.Variant({
    'Ok' : CanisterOutputCertifiedMessages,
    'Err' : IDL.Text,
  });
  const WebsocketMessage = IDL.Record({
    'sequence_num' : IDL.Nat64,
    'content' : IDL.Vec(IDL.Nat8),
    'client_key' : ClientKey,
    'timestamp' : IDL.Nat64,
    'is_service_message' : IDL.Bool,
  });
  const CanisterWsMessageArguments = IDL.Record({ 'msg' : WebsocketMessage });
  const AppMessage = IDL.Record({ 'text' : IDL.Text, 'timestamp' : IDL.Nat64 });
  const CanisterWsMessageResult = IDL.Variant({
    'Ok' : IDL.Null,
    'Err' : IDL.Text,
  });
  const CanisterWsOpenArguments = IDL.Record({ 'client_nonce' : IDL.Nat64 });
  const CanisterWsOpenResult = IDL.Variant({
    'Ok' : IDL.Null,
    'Err' : IDL.Text,
  });
  return IDL.Service({
    'ws_close' : IDL.Func(
        [CanisterWsCloseArguments],
        [CanisterWsCloseResult],
        [],
      ),
    'ws_get_messages' : IDL.Func(
        [CanisterWsGetMessagesArguments],
        [CanisterWsGetMessagesResult],
        ['query'],
      ),
    'ws_message' : IDL.Func(
        [CanisterWsMessageArguments, IDL.Opt(AppMessage)],
        [CanisterWsMessageResult],
        [],
      ),
    'ws_open' : IDL.Func([CanisterWsOpenArguments], [CanisterWsOpenResult], []),
  });
};
export const init = ({ IDL }) => { return []; };

```

[quote="chenyan, post:4, topic:24046"]
can you return `applicationMessageArg` instead of `applicationMessageArg["_type"]`?
[/quote]
Here it is:
![image|269x500](upload://q6oDmCTO0wm7RWopzRvHjdkz3qz.png)


Also, I didn't find a clear way to extract the type of an `OptClass` except from accessing the protected `_type` field.

-------------------------

chenyan | 2023-10-27 22:49:59 UTC | #6

I mean I assume `this._applicationMessageIdl` comes from `extractApplicationMessageIdlFromActor`. Can you return `applicationMessageArg` instead of `applicationMessageArg["_type"]` in `extractApplicationMessageIdlFromActor`?

-------------------------

ilbert | 2023-10-28 07:25:45 UTC | #7

[quote="chenyan, post:6, topic:24046"]
I mean I assume `this._applicationMessageIdl` comes from `extractApplicationMessageIdlFromActor` .
[/quote]
Yes exactly.

[quote="chenyan, post:6, topic:24046"]
Can you return `applicationMessageArg` instead of `applicationMessageArg["_type"]` in `extractApplicationMessageIdlFromActor`?
[/quote]
Why should I return the Opt type? The encoding and decoding is done using the inner type of the option, because the canister sends the encoded app message through WebSocket, not the option of it (see [the code in the example](https://github.com/omnia-network/ic_websocket_example/blob/d7230150fc49c87658b66dab0eb5528a742900ee/src/ic_websocket_example_backend/src/canister.rs#L41)). Anyway, after trying what you suggested, I'm getting the same error:
```
Error: type mismatch: type on the wire rec_4, expect type opt record {text:text; timestamp:nat64}
```

-------------------------

chenyan | 2023-11-02 01:47:40 UTC | #8

Would be good if you can have a minimal repo that I can try locally.

But before that, let's try changing this line https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/ic-websocket.ts#L483 into

```
const decodedType = Rec();
decodedType.fill(this._applicationMessageIdl);
const decoded = IDL.decode([decodedType], data)[0] as ApplicationMessageType;
```

-------------------------

ilbert | 2023-11-02 09:31:48 UTC | #9

[quote="chenyan, post:8, topic:24046"]
But before that, letâ€™s try changing this line https://github.com/omnia-network/ic-websocket-sdk-js/blob/e2317b52f6a60200e9fbae97b5874f5d3a8140ea/src/ic-websocket.ts#L483 into

```
const decodedType = Rec();
decodedType.fill(this._applicationMessageIdl);
const decoded = IDL.decode([decodedType], data)[0] as ApplicationMessageType;
```
[/quote]
I'm getting the same error, but with `rec_5` instead of `rec_4`:
```
Error: type mismatch: type on the wire rec_5, expect type record {text:text; timestamp:nat64}
```

Other information that could help:
- I've also tried to use a `variant` type as the application message, but I'm getting the **exact** same mismatch error
  ```
  Error: type mismatch: type on the wire rec_4, expect type variant ...
  ```
- if I use a plain `text` type it works smoothly (and I believe it's the same for all other primitive types).

I think it has somehow to do with the JS compiler that I'm using (Vite+Rollup).

Regarding reproducing it, it's a bit hard to create a minimal repo since there are many dependencies involved (*Rust CDK* (which version is still not published), *JS SDK* (which version is still not published) and the *WS Gateway* that has to run separately). I'll see what I can do.

-------------------------

ilbert | 2023-11-02 10:37:39 UTC | #10

Diving into the [`@dfinity/candid`](https://github.com/dfinity/agent-js/tree/v0.19.3/packages/candid) source code, I can't understand how is it possible that I'm falling in the throw case:
https://github.com/dfinity/agent-js/blob/83307737c4088e923edbdaeaeb5040dc7e7f4282/packages/candid/src/idl.ts#L246

because the following condition is **not** met:
https://github.com/dfinity/agent-js/blob/83307737c4088e923edbdaeaeb5040dc7e7f4282/packages/candid/src/idl.ts#L239

while the only case in which the `t.name` getter returns `rec_...` is exactly in the `RecClass`:
https://github.com/dfinity/agent-js/blob/83307737c4088e923edbdaeaeb5040dc7e7f4282/packages/candid/src/idl.ts#L1318

It seems that the compiler is somehow messing up these class implementations and this breaks the `instanceof` operator. And it seems that for the same reason, the `OptClass` condition also fails:
[quote="ilbert, post:1, topic:24046"]
`if (!(applicationMessageArg instanceof IDL.OptClass)) {`
[/quote]

Possibly related: https://github.com/evanw/esbuild/issues/3333

-------------------------

ilbert | 2023-11-02 10:56:49 UTC | #11

I managed to solve the issue! :tada: 

Based on this [comment](https://github.com/evanw/esbuild/issues/3333#issuecomment-1689693495), I noticed that I was having multiple `node_modules/@dfinity/...` folders: one in `node_modules/@dfinity/*` and the other in `src/ic_websocket_example_frontend/node_modules/@dfinity/*`. The bundler was importing both of them and that's why the `instanceof` operator was failing...
After deleting the second one, it worked!

Also happy that the `@dfinity/candid` and `ic-websocket-js` packages didn't have bugs at the end.

-------------------------

