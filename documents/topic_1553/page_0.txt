mymikemiller | 2020-11-07 16:38:21 UTC | #1

Has anyone gotten Flutter to work as a front end? It transpiles to JavaScript, so I imagine it’s compatible with some finagling. Just curious if it’s been done, or if I’ll be going into this blind.

-------------------------

cryptoschindler | 2020-11-08 11:04:12 UTC | #2

I‘m also interested in this one @stanley.jones

-------------------------

KevLoui | 2020-11-08 15:00:07 UTC | #3

Good thread! I think I’d asked this question a while back when it wasn’t possible, but would love to know if anything has changed!

-------------------------

mymikemiller | 2020-11-23 21:31:12 UTC | #4

Update on this: I'm able to run a flutter web frontend in a canister running locally. Here's what I did:

Build a flutter web app for release following the [flutter docs](https://flutter.dev/docs/get-started/web).

After running `flutter build web`, copy everything from the output `/build/web` directory into your asset canister's `public` folder.

Modify the dfx.json file to reference flutter's generated main.dart.js file (ignore index.html). For example, in my flutter_on_ic project, I have:

    
    "flutter_on_ic_assets": {
      "dependencies": [
        "flutter_on_ic"
      ],
      "frontend": {
        "entrypoint": "src/flutter_on_ic_assets/public/main.dart.js"
      },
      "source": [
        "src/flutter_on_ic_assets/assets",
        "dist/flutter_on_ic_assets/"
      ],
      "type": "assets"
    }

Build and install your canisters, and launching the following URL will load your flutter frontend:

127.0.0.1:8000/?canisterId=<ASSETS-CANISTER-ID>

-------------------------

mymikemiller | 2020-12-01 07:11:36 UTC | #5

I spoke too soon.

I've hit a wall and decided that, while it's possible to host a Flutter frontend in a canister (see above post), it's not possible for that frontend to interact with any of your other canisters in the way that javascript-based frontends (like React) can. I hope someone is able to prove me wrong eventually, because I would really like to develop on the IC using Flutter for the frontend.

My goal is to create a Dart package that allows Dart code to interact with my motoko canister, ideally without me having to re-implement the interface in Dart but at this point I'd settle for that...

I looked into using [package:js/js.dart](https://pub.dev/packages/js) which is designed to be used on the frontend, in the context of a browser (see [this issue](https://github.com/dart-lang/sdk/issues/36557#issuecomment-481689918)). 

Seems that to make package:js work with my own JavaScript library, I need to load my js library by including it in the .html file (see [this example project](https://pub.dev/packages/firebase_web#using-this-package-for-browser-applications)). This didn't work for me because I couldn't get dfx.json's frontend.entrypoint to successfully reference a .html file while pulling in the required javascript. I tried to follow the recommendation [here](https://forum.dfinity.org/t/is-it-possible-to-use-vanilla-js-html-and-css-instead-of-a-framework/951), but it ended up just injecting the entire contents of my html file (html/head/body tags and all) into the body of the served page, and I couldn't get it to execute the script tags to pull in the necessary scripts.

If I set frontend.entrypoint to Flutter's generated build/web/main.dart.js file, as in my optimistic post above, I don't get any of the other necessary files, namely the javascript file generated from the motoko that needs to be there for me to do the interop. Maybe it's because I have zero experience with webpack or with package:js, but I couldn't figure out how to get package:js to expose the motoko functions to dart.

Even if I could get interop to work using this method for Flutter-for-web on the frontend in the context of a browser, it wouldn't work when built for iOS or Android. So I'm giving up for now.

Seems like it might just be easier to build my own interface to my canisters by making http calls à la the [auto-generated Candid web interface](https://sdk.dfinity.org/docs/developers-guide/tutorials/calculator.html#candid-ui).

Sorry for the brain-dump. Wanted to get that all out before I switch gears and look into the Candid option. I'm all-ears if you have any suggestions for the interop method, though!

-------------------------

rckprtr | 2020-12-01 16:51:53 UTC | #6

I believe you are correct in the fact you must implement a [@dfinity/agent](https://www.npmjs.com/package/@dfinity/agent) in Dart.

-------------------------

chenyan | 2020-12-01 20:47:14 UTC | #7

Not sure how Dart interop with JS, but we are able to use Elm for frontend with very little JS glue code: https://github.com/chenyan2002/ic-elm/

-------------------------

anthonymq | 2021-02-09 14:17:08 UTC | #8

Hi @mymikemiller, did you manage to call the IC from from a flutter app ?

-------------------------

rlaracue | 2021-02-10 03:59:52 UTC | #9

I am looking for a Flutter developer who can help us move our app Weact.chat to Dfinity, in addition, to help with getting the current project out the door for the traditional cloud.  If you have some spare cycles we should chat.  ray@oblivion.io also works.

-------------------------

rlaracue | 2021-02-10 04:00:35 UTC | #10

React or IC native language skills also work along with Rust.  :slight_smile:

-------------------------

rckprtr | 2021-02-10 06:42:22 UTC | #11

Ha you're right https://dev.to/sunshine-chain/dart-meets-rust-a-match-made-in-heaven-9f5

-------------------------

rlaracue | 2021-02-10 13:52:38 UTC | #12

Actually I meant instead of Flutter for a browser version.

-------------------------

umekalu | 2021-03-03 10:21:43 UTC | #13

I was able to run a Flutter web app on Dfinity canister which was successful but I hit a wall also. On trying to deploy at the stage of **Uploading assets to asset canister...**,

I get error message: 

`**The replica returned an HTTP Error: Http Error: status 413 Payload Too Large, content type "text/plain; charset=UTF-8", content: Request 0x4112050935eefd410ed867f7038a3519c99ea9eeee00aaea47ececa4427afaaf is too large.**`

I don't know if this was your challenge @mymikemiller or if anyone else has come across this.

The image shows my progress.
The right image is the Flutter web and the left is the Flutter canister. Code works fine only the UI giving issue.

![dfx_flutter|690x388](upload://xuK7H6Pu1gyHpNBtFV6Blquw8Yw.jpeg)

-------------------------

cryptoschindler | 2021-03-04 23:17:03 UTC | #14

hey @umekalu ! welcome to the community :) 
maybe this helps?

https://forum.dfinity.org/t/http-error-status-413-payload-too-large/1705/5?u=cryptoschindler

-------------------------

umekalu | 2021-03-06 21:24:10 UTC | #15

@cryptoschindler Thanks for your help.
My dist contains 5.3MB *(.js file =  1.3MB and the .map = 3.9MB)* of data while the source is 8.9MB.

Challenge is I can't locate the actual file that contains this item **text/plain; charset=UTF-8** in the error message which is generating the error. I tried removing the generated HTML file because it contains *<meta charset="UTF-8">* still I get the same error.

[quote="umekalu, post:13, topic:1553"]
**The replica returned an HTTP Error: Http Error: status 413 Payload Too Large, content type "text/plain; charset=UTF-8", content: Request 0x4112050935eefd410ed867f7038a3519c99ea9eeee00aaea47ececa4427afaaf is too large.**
[/quote]

Also, is there any possibility of chunking the frontend code as you said?

-------------------------

umekalu | 2021-03-06 23:25:45 UTC | #16

My dist is actually 5.1M and src is 3.6M.

Is there anywhere I can increase the

-------------------------

cryptoschindler | 2021-03-08 06:41:59 UTC | #17

I don’t believe `text/plain` is pointing to the file, it’s just the content type in the header of the HTTP message you received as an error. I don’t know if there is a standard procedure to chunk the files, but i would try to split up my codebase in different, so that no **single file** is bigger than 2MB.

-------------------------

cryptoschindler | 2021-04-09 17:47:40 UTC | #18

Hey, thanks for joining the dev call and asking your question! 
With the newest release of dfx, the file size limit has been removed. So maybe try installing the new dfx version and try again :slight_smile: 

https://www.notion.so/Announcing-Improved-Asset-Canisters-7b5815f6ca46461dae4b7f22501f4e39
https://kyle-peacock.com/blog/dfinity/http-canisters
https://kyle-peacock.com/blog/dfinity/static-site-generators-ic/

-------------------------

umekalu | 2021-04-09 18:11:59 UTC | #19

Wow! Awesome!
Thanks a lot.

-------------------------

levi | 2021-04-09 21:25:24 UTC | #20

I am working on a ic-service with a flutter-frontend, currently this is where im at with hosting the flutter on the ic with the dfx asset canister (0.7.0-beta.2), i got this error: 
Uncaught SyntaxError: expected expression, got '<'[main.dart.js:1]

**Mendment**: without the webpack file that error is gone.


There is this error that comes up when Its uploading the assets: 
The Replica returned an error: code 5, message: "Canister <canisterId> exceeded its allowed memory allocation"? the files are total 4.3 mb.

-------------------------

levi | 2021-04-09 19:52:38 UTC | #21

this is so lit :fire:

-------------------------

theonlyandreas | 2021-04-19 14:56:11 UTC | #22

Hi everyone!
I am trying to call the IC from a regular Flutter app.
For this purpose, I forked the repository from this blog post 
[quote="rckprtr, post:11, topic:1553, full:true"]
Ha you're right https://dev.to/sunshine-chain/dart-meets-rust-a-match-made-in-heaven-9f5
[/quote]
in order to execute Rust code from Dart via FFIs. 
If you're interested, come take a look at [IC Flutter Template](https://github.com/theonlyandreas/ic_flutter_template) :grinning:
I changed the example web scrapper to the name "ic" and started by adding a query_call function that uses the QueryBuilder of the rust ic_agent package.
Unfortunately, cargo could not compile ic_agent (all other changes in the repo are commented out because of this).
Here are the errors:
1) at ../ic-agent-0.3.0/src/identity/basic.rs:67:22
   |
67 |     let id_ed25519 = oid!(1, 3, 101, 112);
   |                      ^^^^^^^^^^^^^^^^^^^^ expected struct `simple_asn1::BigUint`, found struct `num_bigint::BigUint`
2) at ../ic-agent-0.3.0/src/identity/secp256k1.rs:86:48
   |
86 |     let ec_public_key_id = ObjectIdentifier(0, oid!(1, 2, 840, 10045, 2, 1));
   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `simple_asn1::BigUint`, found struct `num_bigint::BigUint`
3) at ../ic-agent-0.3.0/src/identity/secp256k1.rs:87:44
   |
87 |     let secp256k1_id = ObjectIdentifier(0, oid!(1, 3, 132, 0, 10));
   |                                            ^^^^^^^^^^^^^^^^^^^^^^ expected struct `simple_asn1::BigUint`, found struct `num_bigint::BigUint`

These errors lead to cargo aborting the build. 
Has anyone encountered this type problem before?

-------------------------

neokree | 2021-05-24 08:45:15 UTC | #23

Hi everyone! 

I'm a Flutter developer and I would love to help making flutter for frontend a reality. 

Is there someone that it's actively working on it? From the thread It seems like that the best way would be to make a Flutter plugin that uses the JS agent for `flutter_web`, and Rust agent for android and iOS. 

If someone is working on a generic solution let me know, I have worked on flutter plugin development for a while, and native android/iOS code is not a problem for me

-------------------------

levi | 2021-05-24 13:33:08 UTC | #24

Hi @neokree, I am working on a code in the dart that will call and query ic-canisters. A Candid library to en-code the canister-method-arguments is the only part that I need to write as a JS interop because there is no candid library written in the dart yet. If you can make a dart/flutter library for the Candid that uses js/rust/js-rust(for the *.did->js code-generation) interop, and that the library/plugin hides the js-interop that would be great. (or a candid library in straight dart)

[https://github.com/dfinity/candid/blob/master/spec/Candid.md](https://github.com/dfinity/candid/blob/master/spec/Candid.md)


p.s. the nns.ic0.app is running on flutter.

-------------------------

mymikemiller | 2021-05-24 15:28:24 UTC | #25

@neokree @levi I’m not sure if it will be useful here (probably not), but I wrote some Dart code that converts Candid strings coming from the Internet Computer, for example the response from calling a query method from the cli with `dfx canister call myCanister myMethod`, into a set of nested Records (Map<String, V>, where V can be a String, Double, Vector or another Record). I put the relevant code in a gist in case anyone's interested: [Candid parser in Dart](https://gist.github.com/mymikemiller/6e4f46675e7ede6291d8cdaf59c91e9d)

I only just finished it, so it's not battle tested and likely has many issues and missing parts, but maybe something like this will be useful in creating a Dart agent. Probably not, but for now it works for my needs to get data from the IC into my Dart programs.

I'm very interested in using the IC in flutter apps, and am more than happy to put in some work if I can be of use!

-------------------------

neokree | 2021-05-24 15:53:02 UTC | #26

Ok so from what I have understood:
1. We need a way to convert Candid *.did files to dart code, in order to call our canisters from Flutter
2. We need a way to connect with IC using an Agent, independently from the platform used
3. Flutter is already used in production with the IC, on nns.ic0.app 
      _(just for web? It's an open source project? There is a way to know how they connected with IC?)_

For problem #1, we need a dart code generator that write Dart classes from the *.did files. 
Normally these are written for the [build_runner](https://pub.dev/packages/build_runner) library in Flutter, so that you can run `flutter pub run build_runner build` from your project and wait for the magic to happen.  :mage: 
A little more configuration (like the path for *.did files) will be needed, but I already saw other packages doing it so I think it's not a problem.

The real pain start with problem #2, since we need to use PlatformChannels, that will connect with Rust using `ffi` for native platforms, and JS for the web. Using PlatformChannels it is not possible to pass complex data structures (normally they are converted to Lists/Maps, so a method call would need to be converted in the method's name, and a list of his parameters).  That would be ok for JS, since it have reflection, but not for Rust since it doesn't implement it (just looked up on Google, I don't know Rust or how the rust library works so feel free to tell me I'm wrong). 
Anyway it does not seem to me an easily maintainable solution to me, since each time the JS library or Rust library changes I would need to change it as well. 

The other option I see would be to write a Dart Agent, but I don't know how much work that would be, or if it would be feasible. From a simply design perspective, this way we could skip the data transmission to native code completely and the only dependency would be the Candid spec, which I think it will be much more stable than a client library in the long run.

Let me know what you think about it

-------------------------

neokree | 2021-05-24 15:57:21 UTC | #27

Thank you! I will surely check it out

-------------------------

levi | 2021-05-24 21:40:17 UTC | #28

@neokree Yes! it is way better to have an agent written in dart itself and have the only interop-pendency of the candid library. I am working on some ic-tools that are in the language of the dart, cord to the the internet-computer-specification (not an interop with js or rust agent). It has the functions for the call of a canister update or query call. I have the pieces written in the dart, the thing that needs to use outside code with is the candid library.

For the nns.ic0.app, the front page says that it is in beta but im sure it won’t be sometime. It Looks like they are using a jsdart interop for some thing but I think it might be for the whole js-dfinity-agent, the frontend is downloads a file looks browserified dfinity_agent.js

-------------------------

neokree | 2021-05-24 23:17:16 UTC | #29

Ok in this case I think we can start building the candid-dart package! 

Just to be sure we aren't reinventing the wheel I opened a support ticked with the DFINITY team, asking if this development have already been made for nns.ic0.app but it's not public yet. 

In the middle time, please send me your github username (here or with a PM) so that I could add you on the [repo](https://github.com/neokree/candid-dart) as a collaborator. 

@mymikemiller If you want to be a collaborator and help us you are welcome too! :v:

-------------------------

mymikemiller | 2021-05-24 23:30:17 UTC | #30

I’d love to help! Same username: [mymikemiller](https://github.com/mymikemiller)

-------------------------

chenyan | 2021-05-24 23:53:28 UTC | #31

We don't have plans on building a candid-dart package, so community contribution is very much welcome and appreciated!

Just want to point out some resources from the official candid repo:
* did -> dart binding. The JS binding is generated here: https://github.com/dfinity/candid/blob/master/rust/candid/src/bindings/javascript.rs. It should be relatively easy to change this code to generate a Dart binding once you figure out the type mapping from Candid to Dart.
* If you want to implement the Candid serialization library in Dart, we have a test suite that is language agnostic: https://github.com/dfinity/candid/tree/master/test. These tests help to ensure that the implementation conforms to the spec.
* Not sure about Wasm support in Dart, but another idea is to compile the Rust library to Wasm and use it in Dart. See Norton's example: https://github.com/dfinity/candid/pull/230

-------------------------

neeboo | 2021-05-25 16:29:34 UTC | #32

[quote="mymikemiller, post:25, topic:1553"]
Candid parser in Dart
[/quote]

My team is planning to do it, and maybe applying a grant later

-------------------------

Rakesh.MindInc | 2021-05-25 16:26:52 UTC | #33

Do share the repository when you start, may be able to allot one of my team to contribute.

-------------------------

levi | 2021-05-25 19:25:24 UTC | #34

@neokree Awesome, my GitHub username is levifeldman , let’s do it, once candid library is in the dart then flutter will have each feature to call the ic!

-------------------------

neeboo | 2021-05-27 04:06:25 UTC | #35

Wasm support is not supported by Dart. 
Candid is not enough for accessing replica, I think we need to make agent work for dart/flutter, either porting the `agent-rs` to `agent-dart` or use FFI to interop.


Any teams are working on mobile wallet or mobile SDK? 
Been poked by many token holders and investors saying they cannot use any mobile wallet app on IC. When "mainstream" devs come to build mobile native/hybrid apps on IC, javascript or web sdks are not enough. It's inevitable to prepare such tools for them and us.

Maybe we should open another topic focusing on mobile device client?

-------------------------

neeboo | 2021-06-05 02:08:43 UTC | #36

We are officially woking on `agent-dart` now.

https://github.com/AstroxNetwork/agent_dart

-------------------------

SomyaRanjanSahu | 2024-03-21 07:11:02 UTC | #37

Can anyone help me fix this, please? How do you handle these options in Flutter?

*The image argument can be null or can store a string value* 

```
var addReview = await SignIn.newActor!
          .getFunc(FieldsMethod.addReviews)
          ?.call([rating, title, review, image, reviewee_id]);
```

**my integration.dart , IDL:**

```
FieldsMethod.addReviews: IDL.Func(
        [IDL.Float64, IDL.Text, IDL.Text, IDL.Opt(IDL.Text), IDL.Text],
        [reviews],
        []
      ),
```

**Review struct:**

```
struct Reviews {
    pub ratings: f64,
    pub title: String,
    pub review: String,
    pub image: Option<String>,
    pub reviewer: String,
}
```

**my backend, .did:**

```
add_reviews : (float64, text, text, opt text, text) -> (Reviews);
```

**Function:**

```
#[update]
fn add_reviews(ratings: f64, title: String, review: String, image: Option<String>, profile_reviewed: String) -> Reviews {
    let mut profile = get(profile_reviewed);
    let me = get_self();

    // Create a new review
    let new_review = Reviews {
        ratings,
        title,
        review,
        image,
        reviewer: me.fullname,
    };


    profile.reviews.push(new_review.clone());

    new_review
}

```
**Error:**

[quote=""]
Error: Invalid argument (type): Error in covariant types opt text : null: Instance of 'OptClass<String>'
[/quote]

@neeboo

-------------------------

neeboo | 2024-03-22 17:15:34 UTC | #38

use candid dart to generate IDLs easily and automatically

https://github.com/AstroxNetwork/candid_dart

-------------------------

SomyaRanjanSahu | 2024-04-02 06:23:12 UTC | #39

Thanks for sharing, I will look into it.

-------------------------

