skilesare | 2022-12-22 16:45:55 UTC | #1

Has anyone seen this error:

Illegal service definition: services can only contain functions

We are calling a simple query:

```
public query func topAxons() : async [T.AxonPublic] {
    let filtered = Array.mapFilter<T.AxonFull, T.AxonPublic>(Array.freeze(axons), func(axon) {
      switch (axon.visibility, axon.neurons) {
        case (#Public, ?{response={full_neurons}}) {
          ?getAxonPublic(axon)
        };
        case _ { null }
      }
    });
    Array.sort<T.AxonPublic>(filtered, func (a, b) {
      if (b.totalStake > a.totalStake) { #greater } else { #less }
    });
  };

// Return Axon with own balance
  func getAxonPublic(axon: T.AxonFull): T.AxonPublic {
    {
      id = axon.id;
      proxy = axon.proxy;
      name = axon.name;
      visibility = axon.visibility;
      supply = axon.supply;
      policy = axon.policy;
      balance = Option.get(axon.ledger.get(Principal.fromActor(this)), 0);
      totalStake = axon.totalStake;
      tokenHolders = axon.ledger.size();
    }
  };

```

-------------------------

paulyoung | 2022-12-22 19:02:53 UTC | #2

It looks like that originates here:

https://github.com/dfinity/agent-js/blob/98657575b3a9ee26ee445a722b710978204c54c1/packages/candid/src/idl.ts#L1787

You should be able to set a breakpoint and see what `type` is.

The generated bindings might give some clues as well.

-------------------------

lastmjs | 2023-03-22 00:12:40 UTC | #3

I'm running into this with Azle right now, trying to implement the service Candid type. Did anyone figure out the problem?

-------------------------

lastmjs | 2023-03-22 00:20:52 UTC | #4

I made a GitHub issue: https://github.com/dfinity/agent-js/issues/702

-------------------------

alejandrade | 2023-06-01 20:03:35 UTC | #5

Looks like call raw is not serializing for me? Same error as above

the error is thrown because 14n for call raw returns undefined. 

```
    'call_raw' : IDL.Func(
        [IDL.Principal, IDL.Text, IDL.Vec(IDL.Nat8), IDL.Nat],
        [Result__1_1],
        [],
      ),

```
![image|309x182](upload://iX6JrjvoEaVMUgz5JF83UkkakB6.png)

![image|548x180](upload://vsUdCQL3UYw7Hlx1vXcZ9Yv51Pq.png)

```
type Proxy = 
 service {
   call_raw: (principal, text, blob, nat) -> (Result__1_1);
   list_neurons: () -> (ListNeuronsResponse);
   manage_neuron: (ManageNeuron) -> (ManageNeuronResponse);
   mint_burn_batch: (vec MintBurnBatchCommand) -> (vec TransferResult);
   recycle_cycles: (principal, nat) -> (nat);
 };
```

-------------------------

skilesare | 2023-06-02 22:12:51 UTC | #6

Pinging @kpeacock here...what is going on with this....if you need a sample project it is https://github.com/icdevs/axon.  @alejandrade is this just on loading a page....or when trying to call a particular function? Just creating the actor?

-------------------------

alejandrade | 2023-06-04 02:47:33 UTC | #7

When i call the function create. the response throws the issues

-------------------------

skilesare | 2023-06-04 02:51:21 UTC | #8

Does create succeed? It is just the response that causes the error?

-------------------------

alejandrade | 2023-06-04 02:53:11 UTC | #9

Yes the call succeed it's just the deserialization.

-------------------------

kpeacock | 2023-06-05 16:33:38 UTC | #10

What is the expected result type, and does Rust (dfx) deserialize it correctly?

-------------------------

alejandrade | 2023-06-07 13:53:13 UTC | #11

``` 
type Proxy = 
 service {
   call_raw: (principal, text, blob, nat) -> (Result__1_1);
   list_neurons: () -> (ListNeuronsResponse);
   manage_neuron: (ManageNeuron) -> (ManageNeuronResponse);
   mint_burn_batch: (vec MintBurnBatchCommand) -> (vec TransferResult);
   recycle_cycles: (principal, nat) -> (nat);
 };
``` 
Is the type I'm expecting.  I'm calling from the js agent in the front end.


So the decelration for it is 

```
export interface Proxy {
  'call_raw' : ActorMethod<
    [Principal, string, Uint8Array | number[], bigint],
    Result__1_1
  >,
  'list_neurons' : ActorMethod<[], ListNeuronsResponse>,
  'manage_neuron' : ActorMethod<[ManageNeuron], ManageNeuronResponse>,
  'mint_burn_batch' : ActorMethod<
    [Array<MintBurnBatchCommand>],
    Array<TransferResult>
  >,
  'recycle_cycles' : ActorMethod<[Principal, bigint], bigint>,
}
```

-------------------------

kpeacock | 2023-06-07 17:04:24 UTC | #12

Interesting, this could take some time to unpack. A minimal reproducing example would be helpful

-------------------------

skilesare | 2023-06-07 17:26:36 UTC | #13

I'm pretty sure deploying the front an d back end and trying to launch an axon here will work. 


https://github.com/icdevs/axon

-------------------------

ArielRobotti | 2023-06-09 06:23:01 UTC | #14

I don't know if it will serve as a clue to reach a solution, but here I got the same error when trying to instantiate an actor class (and I suppose that with this I would be creating a canister for that actor) from another canister through a public function (mkActor ()). 
![image|690x318](upload://jet3SzhDEk7bTtudDu3EabGfGY2.png)
![image|690x295](upload://l1c6WzDH0RuvmwVTazrt6y78Q0M.png)

-------------------------

alejandrade | 2023-06-17 02:38:45 UTC | #15

Bump because this has been blocking me for a long time now.

-------------------------

chenyan | 2023-06-20 22:01:58 UTC | #16

Thanks for the example. I can reproduce locally. Will take a deeper look.

-------------------------

alejandrade | 2023-06-26 04:20:03 UTC | #17

Just checking in on this

-------------------------

chenyan | 2023-06-27 05:04:22 UTC | #18

I think I found the problem, will make a fix in agent-js tomorrow. Sorry about the delay.

-------------------------

chenyan | 2023-06-28 04:15:19 UTC | #19

Will be fixed once this PR gets merged: https://github.com/dfinity/agent-js/pull/731

-------------------------

