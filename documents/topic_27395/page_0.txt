skilesare | 2024-02-07 16:17:03 UTC | #1

The tokenization and ledger working group is getting close to finalizing ICRC-4 - Batch Transfers.

The current spec can be seen below:

https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md

Please provide your feedback here or at https://github.com/dfinity/ICRC/issues/4

We'd love to have more participation in the working group, so feel free to join us.  Consult the working group calendar: https://calendar.google.com/calendar/embed?src=c_cgoeq917rpeap7vse3is1hl310%40group.calendar.google.com&ctz=Europe%2FZurich

-------------------------

icme | 2024-03-04 17:04:57 UTC | #2

Added some extensions for this idea to the Developer Feedback board since this extends to ICRC-2 and Cycles Ledger `withdraw()`.

https://dx.internetcomputer.org/topic/225

-------------------------

lastmjs | 2024-03-27 04:09:46 UTC | #3

I'm very excited for this feature to get standardized, if the cycles ledger could implement this along with pre-signed transactions, we might be able to implement a cycle compensation model.

Would these batch transfers work with a possible future pre-signed transaction standard?

-------------------------

skilesare | 2024-03-27 14:38:59 UTC | #4

We haven't started tackling pre-signed transactions and on our last call @mariop said there is a bit more research to do there.  I'm hopeful that this would be the case.

I'm curious about your use case here though.  Are you imagining a canister having to distribute out many payments to many source code owners at once? Or something else?

-------------------------

lastmjs | 2024-03-27 14:48:01 UTC | #5

Cycle Compensation I believe is best done at least technically at the protocol level.

But if we are to do it at the application level, I'm imagining it would work like this:

All canisters wanting to engage in cycle compensation would expose a query or update method (not sure if we'll need to store state). This method would be automatically installed in the case of Azle of Kybra for example.

The overarching theme here is ~0 friction. DO NOT MAKE THE PAYING DEV DO ANYTHING. As soon as you do the idea is done; a bit of hyperbole but that's my guiding principle here.

So by default the open source library installed can include this method. The method when called would look at its cycle usage over a certain period of time, and would also look at its dependencies. In the case of Azle for example, the package-lock.json or dfx.json or some other kind of config file included in the canister on deploy could have a field in each library called "funding" or "cycle_compensation" or something like that. It would be an address or principal.

So this method would loop through the config file, gather all of the addresses, apply a heuristic and return the addresses with the number of cycles to issue out. It would pre-sign all of the transactions.

This would allow some kind of centralized server infrastructure (doing this in a canister just seems infeasible at scale) to query all canisters for this method, and batch all pre-signed transactions to submit to the ledger canister.

This is the most promising way that I can think to implement cycle compensation thus far at the application level.

-------------------------

lastmjs | 2024-03-27 14:50:08 UTC | #6

So in short, yes I imagine each canister distributing many cycle payments to its dependencies at once.

-------------------------

zohaib29 | 2024-06-28 11:46:46 UTC | #7

@skilesare Any updates on ICRC-4 Batch transfers?

-------------------------

skilesare | 2024-06-28 12:13:52 UTC | #8

We have general consensus on the standard. The Pan Industrial ICRC Suite has it implemented already and it is alive and working with tokens that use it such as $ICDV(https://dashboard.internetcomputer.org/canister/agtsn-xyaaa-aaaag-ak3kq-cai).

I'm not sure what the priority is for DFINITY to do security reviews and get it integrated with ICP/SNS tokens, but they have a much higher bar to clear for existing tokens than for those deploying new code and I have not heard of work starting on that yet, so I would not expect it in immenately.

-------------------------

kayicp | 2024-07-05 13:57:51 UTC | #9

hm i have some comments
perhaps we can remove the `_batch` suffix from the update methods? since icrc7 update methods dont have this suffix

-------------------------

kayicp | 2024-07-05 14:04:25 UTC | #10

also one more; we might wanna change `maximum_` to just `max_` on the query methods and the metadata keys to make it consistent with icrc7

-------------------------

skilesare | 2024-07-05 18:39:11 UTC | #11

Both are great suggestions.

-------------------------

baolongt | 2024-08-05 05:46:25 UTC | #12

Hi any update on this ICRC4 release day?

-------------------------

