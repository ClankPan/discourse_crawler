qwertytrewq | 2024-05-09 03:17:42 UTC | #1

﻿I am applying for a $5k Developer Grant. 

Please review my application and discuss! See DFINITY's directions for becoming a registered reviewer [here](https://addlink.com). They will be collected by DFINITY. When one week passes, DFINITY will release them and they will appear as a new section on this post.

Please review my application and discuss! If you would like to submit an official review, then please use the links below to register, see the rubric, and submit a review. 

I'm looking forward to everyone's input! 

[Reviewer Registration](https://airtable.com/app9yb0aqQ3yOkjWO/pagQ35ZwCQ8hMWY0S/form) | [Rubric for Evaluating](https://forum.dfinity.org/t/introducing-public-developer-grants/28863) | [Submit a Review](https://airtable.com/app9yb0aqQ3yOkjWO/pagKHnmIWd99ssVbe/form)

MY APPLICATION:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrFVcWBfexufOdB1?backgroundColor=cyanDusty&viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

REVIEWS:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrGtEivkuJrriS9P?backgroundColor=cyanDusty&viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

-------------------------

zensh | 2024-05-11 03:26:32 UTC | #2

Hi, qwertytrewq, a month ago I developed the [Idempotent Proxy](https://github.com/ldclabs/idempotent-proxy) service using Rust, which can solve the problem you described. I did this to enable canister calls to Google's reCaptcha v3 to prevent bots.

Here is the canister source code: https://github.com/ldclabs/ic-panda/commit/add51a3f7b14328bbb2baac4b50dde3dc1fe943f#diff-be93fac32b71fe788033b834d30b733d740acf7174c8b2b76fc1e3e96862678e

I also tried applying for a [$5k Developer Grant](https://forum.dfinity.org/t/idempotent-proxy-proxy-https-outcalls-to-any-web2-service/30624) yesterday and noticed that you are applying too. What a coincidence!
I suspect that developers might have developed a similar service even earlier.

-------------------------

sea-snake | 2024-05-11 17:39:33 UTC | #3

I'm wondering if you can also make a idempotency proxy  with an nginx instance only, avoiding the need to build, maintain and run any custom service. Maybe a combination of cache and proxy pass config will suffice.

A quick gpt chat ended up with the following config:
```
http {
    proxy_cache_path /path/to/cache levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;

    server {
        listen 80;

        location /proxy {
            resolver <your_dns_resolver>;  # Replace with your DNS resolver IP
            set $backend_url $arg_url;
            proxy_pass $backend_url;
            proxy_cache my_cache;
            proxy_cache_valid any 10m;  # Set cache validity time
            proxy_cache_key "$host$request_uri";
            proxy_cache_lock on;
            proxy_cache_lock_timeout 5s;
        }
    }
}
```

Obviously I would still add some header access check to avoid making it a publicity available nginx proxy.

-------------------------

qwertytrewq | 2024-05-11 22:45:32 UTC | #4

Accordingly Claude.ai, your proxy Nginx code will not work as needed:

Q:
> Will the following Nginx config deliver outdated data even when the backend server directs not to by Cache-Control: header?

A:
> No, the Nginx reverse proxy configuration you've provided will respect the `Cache-Control` headers set by the backend server.

So, a custom code (intentionally violating HTTP standard) is needed.

Also, with custom code it's possible to use vet-keys, to save proxy traffic from hackers with an IC instance.

-------------------------

qwertytrewq | 2024-05-11 22:48:22 UTC | #5

My software also may be easier to install than Nginx, when Apache is already installed.

-------------------------

qwertytrewq | 2024-05-11 22:49:51 UTC | #6

Also, I am not sure whether Nginx can be installed on AWS Lambda (I think, no).

-------------------------

sea-snake | 2024-05-11 22:55:13 UTC | #7

I mean apache and nginx both do the same thing. And probably can both be configured for the same end result.

Regarding vet keys, making http outcalls to a proxy that support vet keys encrypted requests is a very interesting use case you brought up. It basically adds another interesting use-case (non public outcalls) besides http outcalls to non idempotent API endpoints.

-------------------------

qwertytrewq | 2024-05-11 23:04:48 UTC | #8

My code has some advantages compared to yours:

- easier to install
- (will) support AWS Lambda
- does not require Redis
- easily configurable caching time
- protection with a proxy secret
- option to hard-specify upstream host
- passing headers to upstream

Your `Idempotent-Key` idea is good, but better to follow HTTP standard and name it `X-Idempotent-Key`.

I see that Redis is useful to ease load balancing.

@zensh What's about an agreement to halve our $5k grant to two $2500 paid to both of us, whoever wins?

-------------------------

sea-snake | 2024-05-11 23:17:30 UTC | #9

Maybe split the work across different parts, that could depending on each individual depth be seen as separate grants?

I would love to see the vetKeys part instead of relying on unsafe things like secret keys in the header:
1. verify the incoming call in the proxy is coming from a valid canister based on e.g. canister signature
2. decrypt incoming request with vetkeys
3. call external api and encrypt the response with vetkeys
4. canister receives and decrypts response with vetkeys

As for caching relying on Redis, I would make things like caching configurable so it can rely on different things to suit the environment the proxy is running in.

Creating a proxy is a lot more straightforward, but creating a proxy specific for the IC that uses e.g. canister signatures and vetkeys seems like a cool challenge.

-------------------------

qwertytrewq | 2024-05-11 23:30:38 UTC | #10

[quote="qwertytrewq, post:8, topic:30541"]
Your `Idempotent-Key` idea is good
[/quote]

After some more thinking: `Idempotent-Key` is a superfluous idea for our use case (outcalls on IC).

Really, idempotency can be determined by hash of the request (headers and body). The hash is always the same for the same outcall. Reversely, if the hash is the same, the returned information by the logic of the outcalls should be the same. So, hash of the outcall body and headers can play the role of `Idempotency-Key`, rendering `Idempotency-Key` useless.

-------------------------

qwertytrewq | 2024-05-11 23:34:29 UTC | #11

[quote="sea-snake, post:9, topic:30541"]
Maybe split the work across different parts, that could depending on each individual depth be seen as separate grants?
[/quote]

I don't understand this English phrase. Could you rephrase? What is "individual depth"? (The depth of an individual's tech expertise?)

You propose to encrypt/decrypt requests. That is superfluous, because they are anyway already encrypted with HTTPS and the canister that does an outcall already has access to both outgoing and incoming request data.

-------------------------

sea-snake | 2024-05-12 00:11:07 UTC | #12

[quote="qwertytrewq, post:11, topic:30541"]
already encrypted with HTTPS
[/quote]
Without vetkeys any canister call or http outcall is public information on the IC. When an http outcall is made, the http request is sent with a system api call to multiple IC nodes (unencrypted publicly) which then in turn make the actual https outcall, afterwards the responses are compared and returned to the canister (unencrypted publicly). 

This is why storing, using and sending secrets with http outcalls is insecure. Even if the http request and response don't need to be a secret, you'd want the manner of verifying if the incoming request is from a trusted canister to be secure, not a token that becomes public information on the IC the moment you sent it in the request.

So two additional challenges I see besides proxying requests with idempotency:
1. Verify that a incoming request is coming from a trusted canister with [tECDSA](https://internetcomputer.org/docs/current/developer-docs/smart-contracts/encryption/t-ecdsa), canister signatures or maybe even vetkeys in case request is encrypted with vetkeys. (discussed earlier [here](https://forum.dfinity.org/t/how-can-i-validate-that-a-request-is-originating-from-a-particular-canister/22374/1))
2. Encrypt/decrypt proxied requests and responses between canister and proxy with vetkeys.

-------------------------

zensh | 2024-05-12 01:29:10 UTC | #13

[quote="qwertytrewq, post:8, topic:30541"]
@zensh What’s about an agreement to halve our $5k grant to two $2500 paid to both of us, whoever wins?
[/quote]

I agree :smile:

[quote="qwertytrewq, post:10, topic:30541"]
`Idempotent-Key` is a superfluous idea for our use case
[/quote]
In some scenarios, the hash of the request header and request body alone cannot determine if it should be idempotent. For example, querying token price information is also time-dependent. I am implementing a general-purpose idempotent reverse proxy service, where users can define their idempotence logic using an Idempotent-Key. Of course, when a request does not include an Idempotent-Key, the hash of the request (url, headers, body) can be considered.

-------------------------

zensh | 2024-05-12 01:52:39 UTC | #14

[quote="sea-snake, post:12, topic:30541"]
Without vetkeys any canister call or http outcall is public information on the IC.
[/quote]
Absolute confidentiality is an issue, and I have been waiting for ICP's vetKeys to be deployed in the production environment.

[quote="sea-snake, post:12, topic:30541"]
Verify that a incoming request is coming from a trusted canister with [tECDSA](https://internetcomputer.org/docs/current/developer-docs/smart-contracts/encryption/t-ecdsa), canister signatures or maybe even vetkeys in case request is encrypted with vetkeys. (discussed earlier [here](https://forum.dfinity.org/t/how-can-i-validate-that-a-request-is-originating-from-a-particular-canister/22374/1))
[/quote]
The Idempotent Proxy service resolves issues by validating access tokens based on ECDSA. The canister issues tokens using a private key, and the Idempotent Proxy uses a public key to verify the tokens, ensuring requests come from trusted sources.

[quote="sea-snake, post:12, topic:30541"]
Encrypt/decrypt proxied requests and responses between canister and proxy with vetkeys.
[/quote]
The Idempotent Proxy service also supports replacing request URLs (already implemented) and headers. It stores sensitive information like secret keys within the Idempotent Proxy service, rather than in the canister. When the canister makes a request using variable names, the Idempotent Proxy replaces them with the actual secrets before forwarding the request to the target service.

For example, if a canister's request URL is https://grecaptcha.panda.fans/URL_GRE, the reverse proxy service will replace it with a full URL containing the API key: “https://recaptchaenterprise.googleapis.com/v1/projects/xxx/assessments?key=xxxxxx.”

-------------------------

qwertytrewq | 2024-05-12 02:18:08 UTC | #15

[quote="zensh, post:13, topic:30541"]
[quote="qwertytrewq, post:8, topic:30541"]
@zensh What’s about an agreement to halve our $5k grant to two $2500 paid to both of us, whoever wins?
[/quote]

I agree :smile:
[/quote]

Wait, we didn't set for each other some kind of warranty that it will really be paid. So, don't count me agreed on this (yet).

[quote="zensh, post:13, topic:30541"]
In some scenarios, the hash of the request header and request body alone cannot determine if it should be idempotent. For example, querying token price information is also time-dependent. I am implementing a general-purpose idempotent reverse proxy service, where users can define their idempotence logic using an Idempotent-Key. Of course, when a request does not include an Idempotent-Key, the hash of the request (url, headers, body) can be considered.
[/quote]

But if we pass `Idempotent-Key`, it changes the hash of the message and therefore retrieves its new version anyway. There is no need to support `Idempotent-Key` specifically (except that we can introduce configuration to remove some headers, in particular to remove `Idempotent-Key` not to be send to the upstream host).

However, your `Idempotent-Key` has advantages when using outside of IC outcalls, but for some other purpose: We can send the same reply for different requests, if they have the same `Idempotent-Key`.

-------------------------

qwertytrewq | 2024-05-12 02:26:30 UTC | #16

Apparently, I should also rewrite in Rust (I know Rust well.), to support vetKeys. BTW, I to make usage of Redis (or just a data structure in Rust) optional, for user convenience (also direct querying of a Rust data structure is expected to be a little more performant than using Redis).

-------------------------

zensh | 2024-05-12 02:28:06 UTC | #17

[quote="qwertytrewq, post:15, topic:30541"]
Wait, we didn’t set for each other some kind of warranty that it will really be paid. So, don’t count me agreed on this (yet).
[/quote]

Ok...
As long as the [Idempotent Proxy](https://github.com/ldclabs/idempotent-proxy) service can help alleviate some pain points for ICP developers, that's sufficient. I am also happy to continue improving it.

-------------------------

qwertytrewq | 2024-05-23 16:18:30 UTC | #18

_The below is a request for comments. I checked it for error "lightly" and am going to check more. Your input is also welcome._

So, I studied vetKeys. My proposal for [s]vetKeys[/s] (I replaced vetKeys by plain [s]tECDSA[/s], by update callback to the canister) in our proxy:

First, rewrite my code in Rust to easily access the needed cryptography. (I know Rust and some Rust Web frameworks well and can easily translate Python code to Rust.) I propose to use my Python code, not @zensh's code, as the base, because I have better idea of using a hash rather than a specific header with randomness, that complicates things a little on the side of IC canister.

Second, make usage of vetKeys optional (using `Bearer` token as an alternative), because apparently vetKeys will eat much cycles.

For the proxy's config there will be one or more principals that outcalls from are allowed.

We will consider two canisters: The "keeper" canister (that does the cryptography and to which the proxy trusts) and the calling canister that does an actual HTTPS outcalls.

The workflow:

- The keeper canister generates two nonces:  long-time-nonce and short-time-nonce.
- The calling canister sends the HTTP outcall with headers `Canister: <keeper canister principal>` and `Canister-Key: signature (with sign_with_ecdsa) of (keeper principal, long-time-nonce, short-time-nonce)>` and with header `Nonce:` set by the calling canister to contain the two nonces.
- The proxy returns access denied if short-time-nonce is repeated compared to a previous call.
- The proxy returns access denied if keeper canister isn’t in the list of allowed callers.
- The proxy verifies the signed principal of calling canister by using `ecdsa_public_key`.
- The proxy returns access denied if the signature does not match.
- The proxy returns a signature of the nonce by a private key stored in the proxy back with the proxied content in `Signature:` header.
- We trap in the transformation function, if Signature header does not match nonce of keeper principal (using public key openly stored in the user’s code).

The above scheme is still insecure in that a hacked hardware running canisters (ours and possibly another one) can receive and steal the SK and use it to send either a modified request from our canister (with fake `Canister-Key:`) or even from an another arbitrary canister (with fake `Canister-Key:` and possibly fake `Canister:`), that will be considered by our proxy as a genuine request. This way, for example, an amount of OpenAI tokens can be stolen.

But if `Nonce:` is a unique value, then misbehavior of the canister hardware will be revealed by a trap in the transformation function by its inability to serve replies with correct nonces (while a majority other nodes served it correctly), and it can be knocked out of the system. Short-time-nonce is used to prevent the hardware to make the correct request soon after a fake one (by a stolen SK). Long-time nonce is used to prevent the hardware to store nonce data for a long time and fetch stored data to hack the system by repeating the short-time nonce.

Note that the proxy does not need to store the full history of nonces, but just for about a few minutes, because outcalls needs to be answered quickly.

P.S. Will a canister be knocked out from the system, if it repeatedly returns results of HTTPS outcalls different than the consensus? (This is at one side desirable, because it knocks out hacked canisters; and at other side, not desirable, because a site owner of the outcall can intentionally harm a canister with the given IP, giving it incorrect results.) This security vulnerability (if it exists), can be mostly solved by DFINITY allocating a big enough pool of IPv6 addresses and allowing canisters to use random addresses from it. Having this, a particular canister could still be targeted by its response times "profile", but that becomes difficult for an attacker.

-------------------------

qwertytrewq | 2024-05-12 05:06:59 UTC | #19

[quote="zensh, post:14, topic:30541"]
The Idempotent Proxy service resolves issues by validating access tokens based on ECDSA. The canister issues tokens using a private key, and the Idempotent Proxy uses a public key to verify the tokens, ensuring requests come from trusted sources.
[/quote]

This seems not being enough, because the secret key would be stolen (after it is retrieved) by hacked canister hardware and then used to do (possibly, repeatedly) fake requests, like stealing OpenAI tokens. Even if (that I doubt) your way does prevent repeated access with the SK token, the owner of a hacked canister hardware could still invisibly steal a big amount of (proxied) OpenAI tokens by doing two (or more) requests to OpenAI instead of one, when it is prompted to do a request.

One reason why I think, that your approach to this is not enough is because I developed [a complex way](https://forum.dfinity.org/t/a-proxy-joining-multiple-http-requests-into-one/30541/18?u=qwertytrewq) in a competing grant application to do this, and what you explained seems to be too simple compared to (as I assume) the right way.

-------------------------

sea-snake | 2024-05-12 12:52:26 UTC | #20

I wouldn't use vetkeys specifically in the proxy to verify if a incoming request is coming from a trusted canister. Instead vetkeys are mostly useful to encrypt/decrypt the request and response to hide sensitive information from the IC nodes.

For verifying if a proxy request comes from a trusted canister, a tECDSA or canister signature is probably a better approach.

-------------------------

qwertytrewq | 2024-05-12 13:36:39 UTC | #21

@sea-snake You misunderstand the purpose of my algorithm:

I use vetKeys not only to verify that the request is coming from a trusted canister, but also to verify (with the purpose to punish a misbehaved canister hardware provider) that the canister does not do extraneous (I mean, additional, not requested by the client) requests to the proxy. I highly doubt that this can be done without vetKeys, because a misbehaving canister hardware can steal the secret key and do additional requests, as I explain in the next paragraph.

It is important to note that, if we don't use vetKeys for the `Canister-Key:` signature, then the keeper canister hardware could forge the signature for more "long time"/"short time" nonce pairs and send fake requests (possibly, for example, stealing OpenAI tokens). You propose to use tECDSA instead. I have no idea who would keep several keys of tECDSA. Do you propose to create several canisters to do it?

Well, I seem to be right in the above by "feeling the math", but cryptography is a complex topic, so I can't exclude the possibility of my error. If I have some mistake, point it to me.

-------------------------

sea-snake | 2024-05-12 15:46:55 UTC | #22

[quote="qwertytrewq, post:21, topic:30541"]
the keeper canister hardware could forge the signature
[/quote]

A tECDSA or canister signature can't be forged by a single node since it relies on threshold signing (multiple nodes).

-------------------------

qwertytrewq | 2024-05-12 23:36:21 UTC | #23

[quote="sea-snake, post:22, topic:30541"]
A tECDSA or canister signature can’t be forged by a single node since it relies on threshold signing (multiple nodes).
[/quote]

Again: Do you propose me to create multiple canisters? How many? Isn't the cost of creating multiple canisters too high?

-------------------------

qwertytrewq | 2024-05-13 02:27:59 UTC | #24

[quote="sea-snake, post:22, topic:30541"]
A tECDSA or canister signature can’t be forged by a single node since it relies on threshold signing (multiple nodes).
[/quote]

Canister signature can't be forged, but it can be _reused_ multiple times by a single canister. My algorithm is meant to protect from reusing a single key multiple times. Can it be done without vetKeys? I think, no, but you can try to change my mind.

-------------------------

qwertytrewq | 2024-05-13 03:00:53 UTC | #25

[quote="sea-snake, post:20, topic:30541, full:true"]
I wouldn’t use vetkeys specifically in the proxy to verify if a incoming request is coming from a trusted canister. Instead vetkeys are mostly useful to encrypt/decrypt the request and response to hide sensitive information from the IC nodes.

For verifying if a proxy request comes from a trusted canister, a tECDSA or canister signature is probably a better approach.
[/quote]

Oh, sorry, it was me who misunderstood, not you. Accordingly my understanding, both vetKeys and canister signature are tECDSA and do the same thing, except that canister signature does not bring a new additional key into the system. So, I've rewritten my algorithm (see "workflow" above) to use tECDSA instead of vetKeys. Now a few leading items are removed from the algorithm, simplifying it.

-------------------------

qwertytrewq | 2024-05-13 03:29:22 UTC | #26

[quote="zensh, post:14, topic:30541"]
The Idempotent Proxy service resolves issues by validating access tokens based on ECDSA. The canister issues tokens using a private key, and the Idempotent Proxy uses a public key to verify the tokens, ensuring requests come from trusted sources.
[/quote]

I confess that I had a misunderstanding: That a request comes from a trusted canister can be validated by simply checking a canister-generated token with canister's ECDSA. @zensh was right. Moreover, this no more requires punishing a canister post-factum, because it simply cannot receive a status 200 reply from the proxy, if misbehaves. I tried to use vetTokens by the scheme "I have a hammer, therefore  everything is a nail."

However, the @sea-snake's idea and @zensh waiting for vetKeys to use vetKeys to cipher requests still seems wrong for me: Inside the IC the sent concept can be intercepted anyway (unless it is cryptographically obfuscated) and outside IC we are protected by HTTPS anyway, no need to introduce an additional level of encryption using vetKeys. Or do I again have a misunderstanding?

-------------------------

qwertytrewq | 2024-05-13 03:38:35 UTC | #27

[quote="qwertytrewq, post:26, topic:30541"]
Moreover, this no more requires punishing a canister post-factum, because it simply cannot receive a status 200 reply from the proxy, if misbehaves. I tried to use vetTokens by the scheme “I have a hammer, therefore everything is a nail.”
[/quote]

I [propose](https://github.com/dfinity/interface-spec/pull/158#issuecomment-2106573927) to modify vetKeys API to allow such a use case of vetKeys. Well, for our particular task, tECDSA is enough and vetKeys are not required.

-------------------------

qwertytrewq | 2024-05-13 03:48:15 UTC | #28

[quote="qwertytrewq, post:26, topic:30541"]
Moreover, this no more requires punishing a canister post-factum, because it simply cannot receive a status 200 reply from the proxy, if misbehaves.
[/quote]

However, see [my question](https://forum.dfinity.org/t/can-sign-with-ecdsa-be-forged/30679), I am not yet 100% sure that signing by tECDSA is not vulnerable of multiple signatures attack, let first get an authoritative answer to that question.

-------------------------

qwertytrewq | 2024-05-13 04:58:42 UTC | #29

[quote="zensh, post:14, topic:30541"]
The Idempotent Proxy service resolves issues by validating access tokens based on ECDSA. The canister issues tokens using a private key, and the Idempotent Proxy uses a public key to verify the tokens, ensuring requests come from trusted sources.
[/quote]

Sorry for addressing this issue second time. Disclaimer: I am @zensh's competitor. But I will address it again, because here the context of @zensh's words need a response.

Storing private key in canister is unsafe against hacked canister hardware. (My current code also does this, too, but I am in process of rewriting.) Canister platform can steal the private key and do unsanctioned calls (e.g. to steal OpenAI tokens).

The safe implementation is to use the ICP's variant of tECDSA.

-------------------------

sea-snake | 2024-05-13 08:17:49 UTC | #30

VetKD signing isn't in th spec because that's basically what tECDSA is already available and meant for, vetkd is solely focused on en/decryption. 

Another alternative for signing besides tECDSA is canister signatures, this basically is the certified data functionality that the asset canister uses to verify query responses and II uses to create signed delegations. As far as I remember, tECDSA is more expensive than the latter (cycles) but these sort of details are something I would recommend investigation, measuring and weighing the options.

-------------------------

qwertytrewq | 2024-05-13 08:56:13 UTC | #31

So, to be sure that I understand:

If vetKD signing were be available, it would confirm that the canister that has access to vetKey signed, but it is exactly the same, as a definitely pointed canister signing, that is would be just a more complex API for canister signing.

Concerning encryption/decryption, why not make SK key hidden from the canister in the same way as in canister signing SK key is not exposed? Won't it make signing more secure (against the "key replay" attack that I discovered, but applied to encrypting rather than to signing)?

Also, I've recently read in the Internet that ECDSA is not suited for encryption/decryption, because its properties as an encryption key are not yet enough researched, and it is therefore suited only for signing. What's about this?

-------------------------

sea-snake | 2024-05-13 15:28:02 UTC | #32

Saw the updated message above, instead I would hash the whole http request (url, headers, body bytes) then sign this hash. The proxy then can then hash the request and check if this matches the signature. Additionally a nonce could be added to the request to prevent replay attacks. The proxy then has a "window" of x minutes that it will ignore requests with the same hash.

This is basically similar to how canister calls are signed and sent in agent-js to the IC api boundary node. On the IC the window is 5 minutes if I remember correctly.

-------------------------

qwertytrewq | 2024-05-13 15:45:18 UTC | #33

Signing the entire request in IC would unnecessarily eat too many cycles. It is enough to sign the principal of the canister (in the case if the code in the canister behaves correctly, what is assumed).

Nonce is a correct idea that I mentioned above.

-------------------------

sea-snake | 2024-05-13 16:32:12 UTC | #34

If you sign the principal of the canister, then you can't trust the request sent along that signature, since anyone can attach that signature to a different request. Also to a sign a request, signing the (way shorter) hash of the request would suffice.

-------------------------

qwertytrewq | 2024-05-13 16:44:04 UTC | #35

Signing a principal and providing a nonce is enough. As a nonce we can take `stable Nat` incremented by one variable, to warrant that nonce does not repeat. Then, provided that the canister will follow my spec, it is easy to check at the side of the proxy that nonces always increase and therefore a request can't be replayed. The rest is verified by a canister signature of the principal.

-------------------------

qwertytrewq | 2024-05-21 13:59:20 UTC | #36

I realized that I did the following error: Contrary to what I said, tECDSA signed stuff needs to contain the hash of the entire message, to avoid a malevolent replica to substitute another body.

But the above is no more important, because I am removing tECDSA support (it was [estimated](https://forum.dfinity.org/t/proposal-50x-price-reduction-for-chain-key-ecdsa-signing-threshold-ecdsa-signing/23560) as a few USD cents).

A much less expensive way is, if the proxy sends an update call back to the canister that requested a HTTPS outcall with the hash of the outcall **before** delivering the request further. This request can be used by our canister to determine if it asked for this outcall or no.

-------------------------

qwertytrewq | 2024-06-09 09:25:47 UTC | #37

Yesterday I released a beta of [Join Proxy](https://github.com/vporton/joining-proxy-rust).

Security in the beta is not perfect: A malignant node can drain cycles from the user's canister. But that is considered a low security risk. So the beta is practically usable for serious work (at least, declared so).

There remains a list of ToDo items.

-------------------------

