THLO | 2022-07-26 09:08:02 UTC | #1

**Summary**

We propose to replace the existing proposal-based ICP/XDR conversion rate mechanism with an exchange rate canister that makes use of the forthcoming HTTP call feature.
The new mechanism not only improves decentralization but also provides a more general service, offering current exchange rates for arbitrary cryptocurrency and fiat currency pairs.

**Status**

Discussing

**Key people involved**

David Ribeiro Alves, Ryan Croote, Yotam Harchol, Thomas Locher

**Description**

Since the price of cycles is pegged to the [IMF SDR](https://www.imf.org/en/About/Factsheets/Sheets/2016/08/01/14/51/Special-Drawing-Right-SDR) and cycles are obtained by burning ICP, the NNS has to know the current ICP/XDR rate at all times.

The current mechanism uses "conversion rate providers", which periodically fetch pricing information from market data providers and exchanges and then create NNS proposals to update the conversion rate.

While it is a fairly safe mechanism, it has several shortcomings:

* Everybody could generate such proposals in theory but there is little incentive to do so. As a result, the whole mechanism is controlled by DFINITY, which means it is not a (fully) decentralized mechanism.
* The NNS needs to deal with a large number of conversion rate proposals daily. As the market sets the conversion rate, there shouldn't be a need to further vote on it.
* DFINITY needs to make sure that the conversion rate providers are always running and be ready to step in whenever there are issues.

We propose to replace this mechanism with an entirely different mechanism based on the [HTTP call](https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670) feature.
The main component of the new mechanism is an _exchange rate canister_ that queries market data providers and exchanges, using HTTP calls, in order to reply to exchange rate request from other canisters.
For example, the cycle minting canister will periodically request the ICP/XDR conversion rate from the exchange rate canister.

We believe that being able to reliably retrieve exchange rates will also benefit a range of other services developed by the community.

**Next Steps**

The first step is to get feedback and input from the community here in the forum.
There will be a community conversation about this topic, tentatively scheduled for **August 18, 2022**.
After the community conversation, a motion proposal will be issued. If the proposal is accepted, development will start soon thereafter.

-------------------------

jzxchiang | 2022-07-28 04:51:59 UTC | #2

This is a perfect first use case of the new HTTP request feature!

Which API are you calling to get the pricing data though? Will this be made public?

-------------------------

THLO | 2022-07-28 11:23:13 UTC | #3

[quote="jzxchiang, post:2, topic:14543"]
Which API are you calling to get the pricing data though? Will this be made public?
[/quote]

We will likely use historical candlestick data, aggregated over a one-minute interval, in order to ensure deterministic responses.
This type of information can be obtained from most exchanges.

And yes, the whole exchange rate canister will be open-sourced!

-------------------------

torates | 2022-07-28 15:12:17 UTC | #4

Perfect use of the HTTPS feature. Will the update rate be the same as the current exchange rate canister?

-------------------------

THLO | 2022-07-28 17:38:38 UTC | #5

[quote="torates, post:4, topic:14543"]
Will the update rate be the same as the current exchange rate canister?
[/quote]

A requested exchange rate will be fetched **on demand**, so there is no fixed update rate.

The ICP/XDR rate will probably be an exception because we know that the cycle minting canister will request it periodically. There is no decision yet on the update rate but we could certainly update it more frequently than once every ten minutes as it is done now.

-------------------------

emmaperetti | 2022-08-02 16:13:48 UTC | #6

team, come and join community conversation on August 18, 2022: https://internetcomputer.org/live-sessions/#Community-Conversation:-The-new-exchange-rate-mechanism

-------------------------

THLO | 2022-08-19 16:43:22 UTC | #7

Thanks to everyone who joined the community conversation!

Here is a summary of the current feature design.
Note that the design reflects our current thinking and it is possible that some parts of the design will change.

# NNS Proposal: New Exchange Rate Mechanism

The goal is to replace the current ICP/XDR conversion rate mechanism with a more general, decentralized mechanism based on an exchange rate canister that will be developed if the motion proposal is accepted.

The exchange rate canister, running in a system subnet, will enable any canister to request the exchange rate between any pair of fiat currency and cryptocurrency - including pairs of fiat currencies and pairs of cryptocurrencies. It will further be possible to request rates in the recent past.

# Design

The main component of the proposed feature is the exchange rate canister. This canister will make use of the new HTTP call feature to obtain FOREX and cryptocurrency exchange rates from numerous public sources.
The exchange rate canister will offer (at least) the following endpoint:

```
get_exchange_rate(base_asset: String, quote_asset: String, timestamp: opt u64) -> (ExchangeRateResult);
```

The base and quote assets can be arbitrary currency codes. If no rate can be obtained for either asset, for the current time or the specified timestamp, an error is returned with an error message.
If an exchange rate could be computed, the returned results contains the rate as well as metadata such as the number of data sources that provided rates, the spread among the rates, among other information.

Invoking this function will cost cycles but the exact amount has yet to be determined.

-------------------------

diegop | 2022-08-22 21:32:10 UTC | #8

Proposal is live: [https://dashboard.internetcomputer.org/proposal/76767](https://dashboard.internetcomputer.org/proposal/76767)

-------------------------

skilesare | 2022-08-22 22:06:05 UTC | #9

How do you mange the risk of your data sources going down or being taken down? Are we dependent on an emergency proposal being adopted to get us out of a hole? Could an attacker target this mechanism?

I generally wary of remote data sources becoming dependencies.

Can we keep the existing system in place in case we need it?

-------------------------

justmythoughts | 2022-08-22 23:14:20 UTC | #10

[quote="skilesare, post:9, topic:14543"]
Can we keep the existing system in place in case we need it?
[/quote]

@THLO It would be helpful to first receive an complete overview of what the current exchange mechanism looks like, something that would show all the dependencies, and maybe a flow chart/diagram to show how the exchange/price data coming from source X ends up affecting the cycles exchange rate.


From the [proposal](https://dashboard.internetcomputer.org/proposal/76767), it mentions an exchange rate canister:

> "The exchange rate canister, running in a system subnet, will enable any canister to request the exchange rate between any pair of fiat currency and cryptocurrency - including pairs of fiat currencies and pairs of cryptocurrencies. It will further be possible to request rates in the recent past."

@diegop A few follow-up questions.

1. The proposal mentions that it will be possible to request rates in the "recent past" - how far back is the recent past? How far back, as well as the update interval has significant implications with respect to how much data might be stored in the canister.

2. I understand the importance of this feature in terms of ICP/USD, but why is DFINITY developing and owning an exchange rate canister that will keep track of all other currencies? That puts a lot of trust and eyes on this specific exchange rate canister. 

3. Why does it make sense for DFINITY to go beyond ICP/USD and to build the tooling for what could become a cryptocurrency exchange on the IC? Does DFINITY have plans to build their own DeFi ecosystem?

-------------------------

diegop | 2022-08-22 23:29:46 UTC | #11

[quote="justmythoughts, post:10, topic:14543"]
@diegop A few follow-up questions.
[/quote]

to be perfectly honest, I submitted it on behalf of R&D, but I am not the right person to ask. @THLO is better suited.

-------------------------

THLO | 2022-08-23 09:00:21 UTC | #12

Thanks a lot for your questions! Let me try to answer all of them.

> How do you manage the risk of your data sources going down or being taken down? Are we dependent on an emergency proposal being adopted to get us out of a hole? Could an attacker target this mechanism?

We already have this risk in the current mechanism: Our conversion rate providers periodically query data from exchanges and market data providers. Since there is a lot of redundancy (every source is queried every time), an attacker would have to take down or corrupt many data sources. More precisely, the conversion rate providers currently get the ICP/USD rate from 7 different exchanges and select the median rate. They further query 3 market data providers to get the current USD/XDR rate and again select the median rate. We currently have paid subscriptions for the USD/XDR sources, so a lower number of sources is deemed acceptable.
Since we will only make use of (free) public sources in the new mechanism, we plan to query Forex data from numerous (more than 3!) sources.

In short, targeting the new mechanism won't be easier than targeting the current mechanism.
It is correct that we have to monitor the process and create a proposal to upgrade the canister if we want to add or remove data sources.

> It would be helpful to first receive an complete overview of what the current exchange mechanism looks like

Once the median rates are selected as described above, the two rates are multiplied to obtain the current ICP/XDR rate. Using a round-robin mechanism, one of the conversion rate providers creates a proposal and the others simply vote, accepting the proposal if the proposed rate does not deviate much (at most 1%) from the locally computed rate.
That's the mechanism in a nutshell. If you think it would help, I can post a diagram and add more details.

> The proposal mentions that it will be possible to request rates in the “recent past” - how far back is the recent past?

The idea is to store the daily Forex rates (one data point for each supported fiat currency) for some time, possibly one year. In this case, the amount of data that needs to be stored is 365 times the number of fiat currencies times the size of the rate data structure.

Note that cryptocurrency rates are queried **on demand**, so the canister only stores very little data.

> why is DFINITY developing and owning an exchange rate canister that will keep track of all other currencies? 

As mentioned above, the exchange rate canister will not "keep track" of other currencies, it will merely provide an interface to query exchange rates. Developers are free to use the HTTP call feature directly.

> Why does it make sense for DFINITY to go beyond ICP/USD and to build the tooling for what could become a cryptocurrency exchange on the IC? Does DFINITY have plans to build their own DeFi ecosystem?

It is not meant to become a cryptocurrency exchange. It simply offers a convenient way to access exchange rates. We *could* restrict it to just provide the ICP/XDR rate but we can get the functionality to query the rate for any currency pair basically for free.

It may appear that the exchange rate canister offers a lot but, in my view, it is just a generalization of the required system functionality to maintain the ICP/XDR rate (which will still be stored in the cycle minting canister). 
DFINITY does not plan to build any applications on top.

-------------------------

justmythoughts | 2022-08-23 15:48:42 UTC | #13

[quote="THLO, post:12, topic:14543"]
As mentioned above, the exchange rate canister will not “keep track” of other currencies, it will merely provide an interface to query exchange rates. Developers are free to use the HTTP call feature directly.
[/quote]

Got it, thanks for the explanation.

If the exchange rate data is not kept and “cached” on the canister, could this open up the exchange rate canister to a cycle drain attack? 

According to some initial feedback from DFINITY it looks like [HTTP calls are expensive](https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670/106) (400M cycles per call). Since the exchange rate canister would be the one paying for the HTTP calls, how do you plan on keeping it topped up and preventing cycle drain overuse?

-------------------------

THLO | 2022-08-23 16:34:25 UTC | #14

[quote="justmythoughts, post:13, topic:14543"]
If the exchange rate data is not kept and “cached” on the canister, could this open up the exchange rate canister to a cycle drain attack?
[/quote]

First of all, the plan is to cache requested rates but only for a relatively short time (around one minute). So, when I said that "the canister only stores very little data", I made the assumption that there won't be too many requests for different rates simultaneously. In any case, there will be a maximum number of cached rates to bound the maximum canister state size.

The caching mechanism mainly serves to provide quick answers if the same rate was requested recently and to conserve bandwidth. A cycle drain attack won't be possible because the exchange rate canister will run on a system subnet, i.e., it will be exempt from paying cycles.

-------------------------

dieter.sommer | 2022-08-23 16:35:13 UTC | #15

[quote="justmythoughts, post:13, topic:14543"]
According to some initial feedback from DFINITY it looks like [HTTP calls are expensive](https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670/106) (400M cycles per call). Since the exchange rate canister would be the one paying for the HTTP calls, how do you plan on keeping it topped up and preventing cycle drain overuse?
[/quote]

Note that the pricing referred to here is provisional and pretty conservative (= expensive). We are currently working on an updated pricing model which will also determine the price for the HTTP outcalls feature and it is likely that it will become cheaper in this new model.

-------------------------

LightningLad91 | 2022-08-23 16:51:14 UTC | #16

[quote="THLO, post:14, topic:14543"]
the exchange rate canister will run on a system subnet, i.e., it will be exempt from paying cycles.
[/quote]

Will this be true for any canister that is deployed to a system subnet? Is it possible to have a canister on a system subnet that does pay cycles?

-------------------------

janosroden | 2022-08-23 17:49:43 UTC | #17

[quote="THLO, post:12, topic:14543"]
Note that cryptocurrency rates are queried **on demand**, so the canister only stores very little data.
[/quote]

How this lazy loading can work in general? If I want to use the "free" exchange canister from an app subnet:
 
1. Canister A requests an exchange rate in a query call which will fail first. Who should initiate the update call to load the data? And will the request fail again, after the cache expires?
2. If the request should be an update call in the first place then cross subnet update call will be slower than a direct http call (data is heavily cached on exchange, takes just a few milliseconds) because 2 subnets need to finalize instead of one.

-------------------------

Severin | 2022-08-24 06:13:15 UTC | #18

[quote="LightningLad91, post:16, topic:14543, full:true"]
[quote="THLO, post:14, topic:14543"]
the exchange rate canister will run on a system subnet, i.e., it will be exempt from paying cycles.
[/quote]

Will this be true for any canister that is deployed to a system subnet? Is it possible to have a canister on a system subnet that does pay cycles?
[/quote]

Enabling/Disabling cycles accounting is a subnet-type wide setting, so (at least at the moment) it is not possible to have a canister that consumes cycles on a (currently only one, but we could have more) system subnet.

To see how it works in practice, you can run your local replica in system mode as well. [Here](https://github.com/dfinity/examples/blob/master/motoko/defi/dfx.json#L40-L42) are the lines to configure it that way.

-------------------------

THLO | 2022-08-24 08:11:30 UTC | #19

[quote="janosroden, post:17, topic:14543"]
How this lazy loading can work in general? If I want to use the “free” exchange canister from an app subnet: (...)
[/quote]

The exchange rate canister will charge cycles for its service.
While it just makes sense to pay the canister for its service, it is further an effective mechanism to prevent spam.

Since we currently don't support cross-subnet query calls, the plan is to use update calls for the time being.

You are right, these calls may be quite a bit slower than using the HTTP call API directly. There is a trade-off: If you use the exchange rate canister, you get a rate derived from inputs from many sources, so the effort to get accurate rates is low. However, you have to accept a higher latency. On the other hand, if you use the HTTP call functionality, the latency will be lower but you need to implement (and maintain) the code to compute accurate rates yourself.

-------------------------

janosroden | 2022-08-24 08:49:18 UTC | #20

Thanks, makes sense, I didn't consider the multi exchange scenario (however such aggregation services probably already exists).

[quote="THLO, post:19, topic:14543"]
Since we currently don’t support cross-subnet query calls, the plan is to use update calls for the time being.
[/quote]

IF cross-subnet query calls would be possible
- what would be the flow?
- the canister would be designed to use that?

With the http request feature in theory it is possible to make a query call (via http) to another subnet, right? Of course strictly until the official way became supported :slight_smile:

-------------------------

THLO | 2022-08-24 10:09:34 UTC | #21

[quote="janosroden, post:20, topic:14543"]
IF cross-subnet query calls would be possible

* what would be the flow?
* the canister would be designed to use that?
[/quote]

There is no design for that at this stage, so these are just my current thoughts.
The flow could work as follows: The exchange rate canister certifies the rates that are currently cached. A query call would return the cached and certified rate as long as the rate is valid. Once a rate expires, a query call would return an error message indicating that there is no valid rate in its cache.

We might also consider fetching the rate if it is not cached as part of a query call instead of returning an error. However, there are two problems that need to be considered:

1. This option only becomes feasible once we are able to charge for query calls.
2. There is no way to certify the rate, so there is a risk that a malicious replica returns a wrong rate.

> With the http request feature in theory it is possible to make a query call (via http) to another subnet, right? 

This is not possible in practice because the firewall rules disallow it. It is probably safer to wait until there is a proper solution for cross-subnet query calls anyway.

-------------------------

LightningLad91 | 2022-08-24 12:19:27 UTC | #22

Thank you Severin. I feel like I learn something new about the IC every day :slight_smile:

-------------------------

jzxchiang | 2022-08-25 06:18:29 UTC | #23

Once heartbeat becomes [cheaper](https://forum.dfinity.org/t/heartbeat-improvements-timers-community-consideration/14201/36), I think it may be worth exploring caching query results again.

That could actually save developers cycles in the long run, as most clients are probably interested in querying the same rate anyways. The cost of prefetching via heartbeat is therefore amortized across the clients who need that prefetched data.

-------------------------

THLO | 2022-08-29 16:26:13 UTC | #24

Since the [NNS proposal](https://dashboard.internetcomputer.org/proposal/76767) got accepted, it is time to go to work!   :slight_smile: 

We could actually use your help: We need reliable, trustworthy Forex data sources that are accessible via **IPv6** and that provide end-of-day rates for the most commonly used fiat currencies, ideally providing the rates in a JSON structure.

As it turns out, it's not so easy to find such data sources. After searching the web for a while, we found the following free, IPv6-enabled Forex data sources:

* [Monetary Authority of Singapore](https://secure.mas.gov.sg/api/APIDescPage.aspx) (the only one providing responses in JSON!)
* [Reserve Bank of Australia](https://www.rba.gov.au/statistics/frequency/exchange-rates.html)
* [Bank of Israel](https://www.boi.org.il/en/Markets/Pages/explainxml.aspx)
* [US Federal Reserve](https://www.federalreserve.gov/feeds/h10_data.htm)

If anybody is aware of (or manages to find) additional/better Forex data sources, it would be great if you could post links in this thread!

-------------------------

janosroden | 2022-09-04 11:23:33 UTC | #25

Far from JSON but [Hungarian National Bank](https://www.mnb.hu/en/arfolyam-lekerdezes) (central bank of Hungary) has a [SOAP service](https://www.mnb.hu/arfolyamok.asmx) and IPv6 address (agree, surprisingly rare).

-------------------------

THLO | 2022-09-05 08:08:34 UTC | #26

Thanks a lot for taking the time to look around! We will check if we can use it.

Luckily, we did manage to find some additional sources in the meantime but we're still looking for more.

-------------------------

janosroden | 2022-09-05 08:40:02 UTC | #27

One more question: I'm confused why are you looking for IPv6 services if the http call uses IPv4 boundary nodes?

https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670/150?u=janosroden

-------------------------

THLO | 2022-09-05 11:22:37 UTC | #28

[quote="janosroden, post:27, topic:14543"]
One more question: I’m confused why are you looking for IPv6 services if the http call uses IPv4 boundary nodes?
[/quote]

As @dieter.sommer wrote, using boundary nodes for the HTTP call feature is just "one avenue towards enabling IPv4 connectivity". By default, the replicas will attempt to reach the targeted service **directly**, that is, over IPv6.

Since we aim for maximum decentralization, the goal is to use as many IPv6-enabled data sources as possible.

-------------------------

bjoernek | 2022-09-09 14:08:36 UTC | #29

Hi all, 
FYI after a discussion with @THLO, I did a short analysis on the interplay of the new exchange rate mechanism and financial incentives for spam. In particular I quantified how much ICP an individual (or a group) needs to hold in order to be able to offset the rejection cost of 10 ICP by increased rewards due to submitting one spam governance proposal. 

**Used input**: 
* Based on historical data we have on average approx 0.5 governance and 6 non-governance proposal per day (in addition to 144 exchange rate proposals). 
* For the staked ICP by the (group of) spamer(s) I assume a dissolve delay bonus of 2. 

**Outcome**
Required ICP to be able to offset 

||pre new exchange rate|post new exchange rate|
|---|---|---|
|weekday|307,166|256,985|
|weekend|68,178|17,572|

**Conclusion**
* The new exchange rate mechanism increases considerable the financial incentives for spamming, in particular on week-ends.  
* It would desirable to implement a spam prevention mechanism in parallel with the new exchange rate mechanism.

-------------------------

wpb | 2022-09-09 16:28:56 UTC | #30

Are you sure this is really going to be an incentive for spam?  It still seems unlikely to me with the current Governance proposal weight of 1x.  What was the equivalent analysis of financial incentive for spam when the Governance proposal weight was 20x?  Would it be accurate to say 68,178/20 = 3409 was the ICP required to offset the proposal reject fee on the weekends pre new exchange rate?  That’s a lot lower than 17,572.  

If we see spam, then a proposal reject fee of 38.8 ICP would be equivalent disincentive to spam compared to what exists pre new exchange rate.  Instead of going straight to that proposal reject fee, it could be slowly increased until the spam stops.  We could even advertise that spam will cause an increase in proposal reject fee so any donors to a spam funding campaign know up front that their financial analysis of the spam opportunity will change during the spam campaign.  That seems like a deterrent as well.  I would be willing to submit proposals to increase the proposal reject fee to avoid more spam.

People submitting register known neuron proposals is also a disincentive to spam because they are legit Governance proposals.  There have been a lot of them lately and I see no reason why the community shouldn’t continue encouraging registration.  In fact, I’d be willing to offer my services for submitting these proposals for anyone who is not comfortable with DFX command line yet still have an interest in participating in governance at a higher level.

My main concern is rushing into a spam prevention solution that goes beyond the tools that are already built into the NNS and what has already been deliberated and voted.  I know DFINITY has been working on this exchange rate change, but I’m not aware that any activity has been occurring on spam prevention solutions.  Hence, coordinating exchange rate change with spam prevention seems rushed on the spam prevention side.  Perhaps activity has been in progress that hasn’t been released publicly yet.  In that case, I’d love to hear more about the plans.

-------------------------

skilesare | 2022-09-09 16:34:38 UTC | #31

I've bumped https://forum.dfinity.org/t/reproposal-spam-prevention-convert-from-system-based-rewards-to-voter-based-rewards/15352/2 as a proposal as I think it takes care of 98% of this issue and allows us to bump governance back up to 20.

This plus the re-selection every six months gives us a broad-based solution, but my understanding is that the re-selection is going to take a bit longer than this would.

-------------------------

bjoernek | 2022-09-09 18:54:03 UTC | #32

[quote="wpb, post:30, topic:14543, full:true"]
Are you sure this is really going to be an incentive for spam? It still seems unlikely to me with the current Governance proposal weight of 1x. What was the equivalent analysis of financial incentive for spam when the Governance proposal weight was 20x? Would it be accurate to say 68,178/20 = 3409 was the ICP required to offset the proposal reject fee on the weekends pre new exchange rate? That’s a lot lower than 17,572.
[/quote]

The according numbers for governance weight 20 are 92k ICP (weekdays) and 20k ICP (weekend). So in particular for weekends the numbers are quite similar post the implementation of the new exchange rate mechanism (17k vs 20k). For your reference, the underlying calculation is [here](https://docs.google.com/spreadsheets/d/1f4mlX1ADbZuJV6LGkvtOZzUU5iCD6yfsmO7egvbwGdU/edit#gid=288341837). 

[quote]
My main concern is rushing into a spam prevention solution that goes beyond the tools that are already built into the NNS and what has already been deliberated and voted. I know DFINITY has been working on this exchange rate change, but I’m not aware that any activity has been occurring on spam prevention solutions. Hence, coordinating exchange rate change with spam prevention seems rushed on the spam prevention side. Perhaps activity has been in progress that hasn’t been released publicly yet. In that case, I’d love to hear more about the plans.
[/quote]
I have done the analysis above a week ago (there was no further activity within DFINITY on this during the summer apart from the tactical fix for setting the reward weights back to 1). Given these results, we wanted to point this out and trigger the discussion on spam again.

-------------------------

THLO | 2022-09-28 10:55:04 UTC | #33

Now that the [HTTPS outcall](https://medium.com/dfinity/beyond-oracles-direct-https-outcalls-from-canister-smart-contracts-on-the-internet-computer-2e4a5bcbee43) feature is being rolled out, you may be wondering about the status of this feature.

In short, the implementation effort is progressing nicely. We should have a working canister and start testing it extensively in early October. If everything goes according to plan, the roll-out should follow soon thereafter.

-------------------------

lastmjs | 2022-09-30 14:14:31 UTC | #34

Nice! I'm very excited for this. What will happen to the exchange rate proposals once this canister is launched? Will the topic be removed?

-------------------------

THLO | 2022-09-30 14:43:13 UTC | #35

At first, we will simply stop creating exchange rate proposals. Once we're sure that everything works reliably, we can then proceed to remove support for exchange rate proposals from the NNS.

-------------------------

torates | 2022-10-12 20:40:10 UTC | #36

[quote="THLO, post:24, topic:14543"]
Monetary Authority of Singapore
[/quote]

Any update on the feature? I am working on a protocol which uses the old XDR exchange rate to quantify risk on borrows, as such I would like to have an idea of an ETA so I can schedule an upgrade to the protocol canisters without interrupting users or corrupting the state.

-------------------------

THLO | 2022-10-13 09:23:59 UTC | #37

[quote="torates, post:36, topic:14543"]
Any update on the feature?
[/quote]

Sure, I can provide an update. It's been roughly two weeks, so thanks for the reminder!

There are a few minor things that need to be implemented but overall the implementation is nearly complete. My expectation is that we can focus on getting the canister ready for production at some point next week.

However, there is a risk that the roll-out will be delayed: Since we've been struggling to find sufficiently many data sources (including cryptocurrency exchanges!) that are accessible over IPv6, we are exploring ways to interact with IPv4-only sources as well to make sure that the exchange rate canister offers at least the same level of security as the current exchange rate mechanism.

One option that is being discussed is the use of public NAT64 servers for IPv4-only sources via custom DNS resolvers in HTTPS outcalls. Since there is no way to set a custom DNS resolver at the moment, a change to the HTTPS outcall feature would be required.
The plan is to agree on a way forward early next week. I'll provide more information about the expected timeline as soon as I can!

-------------------------

THLO | 2022-10-18 17:52:57 UTC | #38

Just a quick follow-up to last week's update: After some more discussion, using custom DNS resolvers to reach more data sources via NAT64 servers is still considered the best (short-term) option.
Work on this task will hopefully begin soon. In the meantime, we will continue to make the exchange rate canister production-ready.

-------------------------

THLO | 2022-11-01 22:03:02 UTC | #39

It's time for another update!
After more rounds of discussion, we decided to proceed with a conservative roll-out plan. Unfortunately, the plan somewhat contradicts what I posted earlier but we hope that everybody agrees that being cautious is the right approach for such a critical feature. The plan is the following:

* A fully functional exchange rate canister will be released on the [w4rem](https://dashboard.internetcomputer.org/subnet/w4rem-dv5e3-widiz-wbpea-kbttk-mnzfm-tzrc7-svcj3-kbxyb-zamch-hqe) system subnet for testing purposes. We call this the **beta release**, which is planned for **mid November**. We have to wait with the beta release until the targeted subnet is upgraded to a replica version that incorporates the latest changes to the HTTPS outcalls feature. Once the exchange rate canister is released, everybody is free to use and test it! However, there is **no guarantee** that this beta version will be around forever. 
* After an initial round of battle-testing, the exchange rate canister will be released on a larger system subnet (the current plan is to use [uzr34](https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe) but there is no final decision yet), which will be the **main release**. It is important to note that this canister will have a different canister ID. There is no fixed date for this release because it heavily depends on the experience with the beta release. The current expectation is that the main release will still happen this year.
* In parallel to the activities above, a secure and reliable solution for IPv4 connectivity will be developed, which may not use NAT64 servers as proposed earlier. The exchange rate canister (beta and main release) will initially rely on IPv6 data sources only. Once IPv4 data sources are supported, the exchange rate canister will be upgraded to make use of additional data sources to improve decentralization.
* After having battle-tested the main release (with IPv4 data sources) for some time without any major issues, the cycle minting canister will be upgraded to make use of the exchange rate canister to set the ICP/XDR rate. At this point, the current exchange rate proposal mechanism will be deactivated. However, there will be code in place to quickly **fall back to the NNS proposal mechanism** if any issues are observed. Ideally, there won't be any more conversion rate proposals at this stage. The timeline for this step depends on the experience with the main release.
* After having monitored the new mechanism for some time without any issues, the cycle minting canister can be upgraded to only accept the rate from the exchange rate canister, making the conversion rate proposals obsolete. Since there is no rush to completely remove the current conversion rate functionality, this last step will not happen until later next year.

I hope that I managed to shed some light on the current plan. Please let me know if you have any questions or concerns!

-------------------------

THLO | 2022-11-17 16:00:13 UTC | #40

I'm happy to report that the beta version of the exchange rate canister is now **live**!
The canister ID of the beta version is `gvu7d-7aaaa-aaaan-aaaba-cai`.

This is the content of the Candid file:
```
type AssetClass = variant { Cryptocurrency; FiatCurrency; };

type Asset = record {
    symbol: text;
    class: AssetClass;
};

type GetExchangeRateRequest = record {
    base_asset: Asset;
    quote_asset: Asset;
    timestamp: opt nat64;
}; 

type ExchangeRateMetadata = record {
    decimals: nat32;
    base_asset_num_received_rates: nat64;
    base_asset_num_queried_sources: nat64;
    quote_asset_num_received_rates: nat64;
    quote_asset_num_queried_sources: nat64;
    standard_deviation: nat64;
};

type ExchangeRate = record {
    base_asset: Asset;
    quote_asset: Asset;
    timestamp: nat64;
    rate: nat64;
    metadata: ExchangeRateMetadata;
};

type ExchangeRateError = variant {
    CryptoBaseAssetNotFound: null;
    CryptoQuoteAssetNotFound: null;
    StablecoinRateNotFound: null;
    StablecoinRateTooFewRates: null;
    StablecoinRateZeroRate: null;
    ForexInvalidTimestamp: null;
    ForexBaseAssetNotFound: null;
    ForexQuoteAssetNotFound: null;
    ForexAssetsNotFound: null;
    RateLimited: null;
    NotEnoughCycles: null;
    FailedToAcceptCycles: null;
    InconsistentRatesReceived: null;
    Other: record {
        code: nat32;
        description: text;
    }
};

type GetExchangeRateResult = variant {
    Ok: ExchangeRate;
    Err: opt ExchangeRateError;
};

service : {
    "get_exchange_rate": (GetExchangeRateRequest) -> (GetExchangeRateResult);
}
```
Here is a sample invocation using `dfx`:

```
dfx canister --network ic call ---candid xrc.did -with-cycles 5000000000 --wallet $WALLET gvu7d-7aaaa-aaaan-aaaba-cai get_exchange_rate '(record { base_asset = record { symbol = "ICP"; class = variant { Cryptocurrency } }; quote_asset = record { symbol = "USDT"; class = variant { Cryptocurrency } }; timestamp = opt 1668693600 })'
```

As you can see from the command, the service is not free: Every request must send 5B cycles, which may be partially refunded depending on the number of HTTPS outcalls that are required to serve the request. If the requested rate is found in the cache, the cost is only 200M cycles.

We are currently working on open-sourcing the repository. I'll let you know when the code is publicly available.

-------------------------

justmythoughts | 2022-11-29 00:28:05 UTC | #41

@THLO 

Currently, the exchange rate proposals are titled like so:

![Screen Shot 2022-11-28 at 16.22.17|471x280](upload://WNezcTqhDqG8TMmVNyjHLxZJTS.png)

This is confusing, since the number represented in the proposal is actually XDR/ICP, and not ICP/XDR, as shown by the payload of the proposal.

![Screen Shot 2022-11-28 at 16.27.16|371x312](upload://2cmy573HhBrJn7cU3oxhXC9inSC.png)


I suggest that verbiage for this be changed so that the proposals either read:

* The ICP/XDR conversion rate is now 0.3417

or

* The XDR/ICP conversion rate is now 2.9269

-------------------------

THLO | 2022-11-29 07:58:12 UTC | #42

I agree that it's somewhat confusing but it's actually correct: `ICP/XDR = x`, where `ICP` is the base asset and `XDR` is the quote asset, means that you get `x` XDR for `1` ICP (see, for example, [here](https://www.investopedia.com/terms/c/currencypair.asp#toc-major-currency-pairs)).
So, we are using the standard currency pair notation. In the payload itself where the rate is scaled by a factor of 10,000, we use a more explicit field name to make sure that it's clear what the number means.

I hope this explanation helps!

-------------------------

Motokoder | 2022-12-14 14:44:34 UTC | #43

Has the canister id changed?
I don't see the interface (https://icscan.io/canister/gvu7d-7aaaa-aaaan-aaaba-cai) and when attempting to call, I get this error:

error: Found argument 'get_exchange_rate' which wasn't expected, or isn't valid in this context

Thanks

-------------------------

THLO | 2022-12-14 17:01:26 UTC | #44

[quote="Motokoder, post:43, topic:14543"]
Has the canister id changed?
[/quote]

No, the canister ID is still the same as you can see [here](https://dashboard.internetcomputer.org/canister/gvu7d-7aaaa-aaaan-aaaba-cai).
I'm not sure why you got this error, though. The endpoint is indeed called `get_exchange_rate`.
There is some demo code [here](https://github.com/THLO/xrc_demo) if it helps.

-------------------------

Motokoder | 2022-12-14 22:26:08 UTC | #45

Thank you @THLO. I'll try it out.

-------------------------

THLO | 2022-12-14 22:39:43 UTC | #46

Good news!
The source code of the exchange rate canister is now [publicly available](https://github.com/dfinity/exchange-rate-canister).
Moreover, the proposal to give a principal controlled by the exchange rate canister team the right to install the exchange rate canister on the [uzr34 system subnet](https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe) has been [accepted](https://dashboard.internetcomputer.org/proposal/97003). After getting a few more code changes in, we will deploy the exchange rate canister on this subnet.

Note that we will remain in control of this canister in the upcoming weeks (the controller will be `ichnh-6yomf-ktta2-mcswl-h2yep-5w45d-n3i4d-wlfxr-qpsag-2sbbe-tqe`) just to make sure that we could step in quickly if we observed any severe issues.
Of course, control will be handed over to the NNS **before** upgrading the cycles minting canister to make use of the exchange rate canister.

-------------------------

THLO | 2022-12-20 14:45:13 UTC | #47

Hi everyone. This will be my last update in 2022:
We now have an [empty canister](https://dashboard.internetcomputer.org/canister/uf6dk-hyaaa-aaaaq-qaaaq-cai) on the [uzr34 system subnet](https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe).

Since we already have a fully functional [beta version](https://dashboard.internetcomputer.org/canister/gvu7d-7aaaa-aaaan-aaaba-cai) running on the [w4rem subnet](https://dashboard.internetcomputer.org/subnet/w4rem-dv5e3-widiz-wbpea-kbttk-mnzfm-tzrc7-svcj3-kbxyb-zamch-hqe), we decided against deploying the main exchange rate canister on the uzr34 subnet so close to the Christmas break.
The current plan is to roll it out in early January 2023 instead. I hope this decision makes sense to everybody!

Note that there is an [open proposal](https://dashboard.internetcomputer.org/proposal/98066) already to remove the authorization for the development team's principal to install canisters on the uzr34 system subnet.

Merry Christmas!

-------------------------

lastmjs | 2023-01-16 20:13:22 UTC | #48

Hey, just wondering what the state of the exchange rate canister is. Is it live yet? If not, can the beta be queried by canisters currently?

-------------------------

THLO | 2023-01-17 12:39:39 UTC | #49

Good news, everyone!
The exchange rate canister is now installed on the [uzr34 system subnet](https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe)!
The canister ID is `uf6dk-hyaaa-aaaaq-qaaaq-cai`.
However, the exchange rate canister cannot serve requests until the HTTPS outcalls feature is activated on this subnet. Please vote in favor of [this proposal](https://dashboard.internetcomputer.org/proposal/102549) that enables HTTPS outcalls on its subnet!

Until then, you can use the beta version for testing, which is fully functional (that is, it responds to requests from other canisters).

Even more good news: There is now a dedicated [wiki page](https://wiki.internetcomputer.org/wiki/Exchange_rate_canister) about the exchange rate canister.

-------------------------

THLO | 2023-01-19 16:43:56 UTC | #50

The HTTPS outcalls feature is now enabled and the [exchange rate canister](https://dashboard.internetcomputer.org/canister/uf6dk-hyaaa-aaaaq-qaaaq-cai) is up and running!
Feel free to try it out!

If there are no objections, the beta version will be uninstalled soon.

-------------------------

lastmjs | 2023-01-25 16:45:54 UTC | #51

How is the local testing situation for these types of system canisters? Do we have the `dfx pull` command yet?

-------------------------

Severin | 2023-01-26 07:59:54 UTC | #52

`dfx pull` is not ready yet. Maybe @lwshang can explain how far along he is with implementing it.

-------------------------

THLO | 2023-01-26 14:03:51 UTC | #53

At the moment, the simplest solution for local testing is to just deploy an up-to-date Wasm module locally (see [here](https://github.com/THLO/xrc_demo) for an example).

-------------------------

skilesare | 2023-02-04 22:02:43 UTC | #54

@THLO 

Is this the candid? https://github.com/dfinity/exchange-rate-canister/blob/main/src/xrc/xrc.did ?

"class" is a reserved word in motoko so it is currently impossible to construct an Asset.

@claudio is there a work around for this?

edit:

The motoko converter for did files at https://k7gat-daaaa-aaaae-qaahq-cai.raw.ic0.app/docs/ puts a _ at the end of class, so hopefully that does it. :)...still...odd.

-------------------------

claudio | 2023-02-04 23:55:30 UTC | #55

Yes, that workaround works, IIRC. @chenyan can confirm.

https://github.com/dfinity/motoko/blob/master/design/IDL-Motoko.md describes the escaping of Candid identifiers that clash with Motoko reserved words.

-------------------------

chenyan | 2023-02-05 17:24:57 UTC | #56

Yes, it's a naming convention for converting between Motoko and Candid: append `_` in the identifier if the identifier is a reserved keyword. See the `unescape` and `escape` function in the spec: https://github.com/dfinity/motoko/blob/master/design/IDL-Motoko.md

-------------------------

THLO | 2023-03-15 16:06:15 UTC | #57

Hi everyone! It's time for a quick update.
While the exchange rate canister is up and running, there are two reasons why the cycle minting canister doesn't make use of it yet:

- The number of available data sources (exchanges and forex data providers) is currently too small. HTTPS outcalls to IPv4 hosts are needed to increase the number of data sources to a reasonable level.
- The removal of conversion rate proposals significantly increases the risk of spam proposals. A change to the voting reward mechanism is required to remove the economic incentive for spam proposals.

The recently accepted [update](https://dashboard.internetcomputer.org/proposal/112433) enables IPv4 on the usr34 subnet where the exchange rate canister resides.
Moreover, work to change the voting reward mechanism in the governance canister is ongoing (see [here](https://forum.dfinity.org/t/financial-spam-prevention-nns-implementation-update/18917) for a recent post on this topic) and is scheduled to be rolled out this week.

Once these two roadblocks are out of the way, we will begin our final round of testing. The upgrade of the cycle minting canister, which will make it request the ICP/XDR rate periodically from the exchange rate canister, is currently planned for the last week of March.

After this upgrade, the number of daily proposals will go down significantly. In case you are wondering, rewards will roll over to the next voting reward period on days without any NNS proposals.

-------------------------

cryptoschindler | 2023-03-23 13:46:17 UTC | #58

[quote="THLO, post:57, topic:14543"]
The recently accepted [update](https://dashboard.internetcomputer.org/proposal/112433) enables IPv4 on the usr34 subnet where the exchange rate canister resides.
[/quote]

So no more need for proxy calls? IPv4 is enabled on subnets directly? Will this be rolled out for all subnets eventually or do I need to install my canister in a special subnet to be able to make IPv4 calls?

-------------------------

THLO | 2023-03-23 14:11:34 UTC | #59

HTTPs outcalls via IPv4 is discussed in [this thread](https://forum.dfinity.org/t/https-outcalls-to-ipv4-destinations-update-and-request-for-comments/17377).
I'm not directly involved in this feature but the plan is to have IPv4 support on all subnets *eventually*. Until then, only system subnets including the uzr34 subnet have IPv4 support (using the SOCKS proxy approach).

-------------------------

Iceypee | 2023-04-16 19:51:48 UTC | #60

@THLO 
is there a list of symbols available? More specifically is this xdr, "cxdr"? Cant seem to get prices in xdr
![image|690x472](upload://9WRlcCIMCHbDZRSLf2uGwSAhGTm.png)

-------------------------

THLO | 2023-04-17 09:21:25 UTC | #61

[quote="Iceypee, post:60, topic:14543"]
is there a list of symbols available?
[/quote]

No, there is no (hard-coded) list. The exchange rate canister simply collects all the symbols that the forex data providers return.

There is only a small number of providers that support "XDR", so it is possible that you don't get any rates for specific timestamps.

Since we need support for XDR, there is a "computed XDR" rate (symbol "CXDR"), which is artificially added. It is derived from the rates and weights defined by the IMF (the weights are shown in the screenshot).

In short, if you need the IMF SDR asset conversion rate, the preferred way is to use the "CXDR" symbol.

-------------------------

Iceypee | 2023-04-27 01:36:50 UTC | #62

Is there any way to receive multiple assets in one go? I feel like having to make 3 separate async calls per 3 different assets could cause some kind of reentrancy attack if thats the right term. Basically, if you need to calculate the amount of you hold in USD for five different assets simultanously, would this current exchange rate canister make that feasible?

or if not now, will there be plans to do this?

Oh yea, is this supposed to be the defacto one source exchange rate shop for the ic, similar to how chainlink is and its bad practice to use any other price feed sources or should this be looked at just as another source that could be faulty and its good to have backups? On localnet, I have quite a bit of random failures but so far none on the mainnet so I am curious?

-------------------------

THLO | 2023-04-27 13:07:02 UTC | #63

[quote="Iceypee, post:62, topic:14543"]
Is there any way to receive multiple assets in one go?
[/quote]

No, there is not. Note that the exchange rate canister needs to make calls to all exchanges for each requested asset individually anyway, so there is no way to reduce the number of HTTPS outcalls in this scenario. Moreover, if you don't want to make the requests sequentially, you can choose to make multiple calls in parallel and await the completion of all these calls.
However, you should only request a small number of rates at any given time because there is rate limiting in place to make sure there aren't too many HTTPS outcalls at the same time. If you are requesting too may rates, you'll get a response containing the `ExchangeRateError::RateLimited` error.

[quote]
or if not now, will there be plans to do this?
[/quote]

As mentioned above, adding such an endpoint wouldn't add a lot of value in my opinion. I agree that it would make things more convenient for developers. I will discuss it with the rest of the exchange rate canister team to see how they feel about it.

[quote]
is this supposed to be the defacto one source exchange rate shop for the ic (...) or should this be looked at just as another source that could be faulty and its good to have backups
[/quote]

It is just one canister that acts as an oracle for cryptocurrency and fiat currency exchange rates. There can definitely be many others, for example, interacting with other/more sources, providing exchange rates for other assets such as stocks and so on.
Everybody is free to develop their own oracle services and use whichever service suits their needs.

[quote]
should this be looked at just as another source that could be faulty and its good to have backups
[/quote]

Just to be clear, the exchange rate canister is more than "just another source" because it interacts with multiple data sources and consolidates the received rates to provide a rate that is likely to be accurate. Note that the cycle-minting canister will soon receive the ICP/XDR rate from the exchange rate canister.
There is no guarantee that the rate is correct, however, so you may choose to get the rate from other oracles as well (but they may be faulty, too).

-------------------------

Iceypee | 2023-04-27 19:13:57 UTC | #64

Extremely helpful.  :pray:

-------------------------

THLO | 2023-05-08 11:45:00 UTC | #65

Just in case somebody missed it: The NNS proposal to upgrade the cycle-minting canister (CMC) is [open](https://dashboard.internetcomputer.org/proposal/121734), so please cast your vote!

If the proposal is accepted, the CMC will start using the exchange rate canister to get the ICP/XDR rate after the upgrade.

-------------------------

THLO | 2023-05-08 20:11:19 UTC | #66

The CMC has been upgraded!

The [dashboard](https://uf6dk-hyaaa-aaaaq-qaaaq-cai.raw.ic0.app/dashboard) of the exchange rate canister shows that the CMC (`rkp4c-7iaaa-aaaaa-aaaca-cai`) requests the rate from the exchange rate canister.
You can verify that the conversion rate proposals stopped a few hours ago on the [Internet Computer dashboard](https://dashboard.internetcomputer.org/governance) (by looking at the `Exchange Rate` topic) and that the CMC updates the rate successfully using the `get_icp_xdr_conversion_rate` endpoint.

-------------------------

lastmjs | 2023-05-08 22:14:50 UTC | #67

This is extremely awesome

-------------------------

lastmjs | 2023-05-08 22:24:50 UTC | #68

What are the privileged canister ids?

-------------------------

Dylan | 2023-05-08 22:35:58 UTC | #69

`rkp4c-7iaaa-aaaaa-aaaca-cai` is the Cycles-Minting canister (CMC).

`ewh3f-3qaaa-aaaap-aazjq-cai` is the Total Value Locked (TVL) canister, used to provide *Total ICP Value Locked* to the NNS front-end dapp.

![image|690x224](upload://iDiaEk4zTleJLeyDOwf65Z7674F.png)

-------------------------

lastmjs | 2023-05-08 22:36:47 UTC | #70

Thanks, I should have asked "what does it mean to be a privileged canister", and then knowing which those are would be great.

-------------------------

lastmjs | 2023-05-08 22:37:16 UTC | #71

I'm assuming they just don't have to pay cycles?

-------------------------

0x5279616e | 2023-05-08 22:37:55 UTC | #72

They do not pay for cycles and can bypass the XRC's rate limiting mechanism.

-------------------------

0x5279616e | 2023-05-08 22:40:12 UTC | #73

The final privileged canister is the NNS dapp: `qoctq-giaaa-aaaaa-aaaea-cai`.

-------------------------

lastmjs | 2023-05-08 22:41:58 UTC | #74

Awesome, thanks for the replies. So the canister is fully open for usage, the CMC is using it live, and any canister can now rely on it (and has been able to for some time)?

-------------------------

0x5279616e | 2023-05-08 22:54:10 UTC | #75

The canister is open for usage (it has been for some time :slight_smile:).

-------------------------

Fortaite | 2023-05-14 20:46:40 UTC | #76

The XRC demo works like a charm deployed locally. Is anyone able to guide a noob like me with an example call on the live canister via dfx/terminal or even better some kind of inter canister call example from within motoko. Either way, awesome work seems really useful.

-------------------------

THLO | 2023-05-15 07:06:10 UTC | #77

When you say XRC demo, do you mean [this sample code](https://github.com/THLO/xrc_demo)?

If that's what you mean and your demo canister is deployed on the Internet Computer, you can test it using the following `dfx` command:

```
dfx canister call --network ic xrc_demo get_exchange_rate "ICP"
```
You can also use the [Candid UI canister](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.ic0.app/) to test your canister in a web browser.

-------------------------

Fortaite | 2023-05-15 08:58:32 UTC | #78

Thanks, yes this is the sample code I tested with. This worked fine via candid in a browser but if I wanted to call the live canister on the ic? I presume this is possible from within my own Dapp?

-------------------------

Fortaite | 2023-05-15 09:06:24 UTC | #79

I think maybe I was looking at this in an incorrect way, is your xrc demo an interim dapp that is contacting the exchange rate canister with a degree of separation rather than retrieving the live data directly from market makers. This makes more sense. I'll have a another look at the example and try to adapt that to my environment.

Thanks again!

-------------------------

THLO | 2023-05-15 09:52:33 UTC | #80

[quote="Fortaite, post:79, topic:14543"]
is your xrc demo an interim dapp that is contacting the exchange rate canister with a degree of separation rather than retrieving the live data directly from market makers.
[/quote]

Yes, exactly! The demo shows how a canister can conveniently use the exchange rate canister rather than collecting rates itself using HTTPS outcalls.

-------------------------

THLO | 2023-07-17 09:46:38 UTC | #81

Hey everyone! 
There haven't been any news lately simply because the exchange rate canister is running smoothly. Since the canister went live, we've been working on several improvements that we'd like to roll out in a canister upgrade.
The upgrade would include the following:

- The pricing has been updated in accordance with the new [price function of HTTPS outcalls](https://forum.dfinity.org/t/a-new-price-function-for-https-outcalls/20838). In short, the number of cycles that need to be attached and the number of cycles charged have been reduced by a factor of 10!
- The exchange rate canister now supports *variable decimals*. That is, the `decimals` field in the returned exchange rate metadata may deviate from the default value 9 to represent very small or large exchange rates.
- Since all rates are represented as integers, the standard deviation in the metadata is now computed using an integer square-root function to minimize the use of floating-point operations.
- The exchange rate canister now supports the upcoming `dfx deps` feature, which will make it possible to easily install canisters locally.
- Several new end-to-end tests have been added to test the canister's behavior in various scenarios.

We'd like to propose to upgrade the exchange rate canister to the latest version on the main branch (the source code is [here](https://github.com/dfinity/exchange-rate-canister)), which contains all these changes.

If you have any questions or concerns, please let us know!
The current plan is to create an NNS proposal on **Friday, June 21**.

-------------------------

THLO | 2023-07-21 14:53:39 UTC | #82

The proposal to upgrade the exchange rate canister with the changes outlined in my previous post is now [live](https://dashboard.internetcomputer.org/proposal/123717)!

When you get the chance, please follow the instructions to verify the WASM hash and cast your vote!

-------------------------

0x5279616e | 2023-07-21 15:07:17 UTC | #83

Hi all.

I noticed an issue in the proposal instructions that it did not point to the repository. You can find the repository here: https://github.com/dfinity/exchange-rate-canister.

-------------------------

Iceypee | 2023-07-29 03:18:28 UTC | #84

is there a minimum decimals that we can rely on? If in one of my applications, I want to just use a set amount of decimals. Will there always be 8 or something?

-------------------------

0x5279616e | 2023-07-31 15:52:38 UTC | #85

Would you want a particular set amount of decimals in the request?

Generally, you can depend on 9 decimal places unless the assets chosen have a fairly significant price difference. I would suggest though scaling the result in a similar fashion as the cycles minting canister: https://sourcegraph.com/github.com/dfinity/ic@4f0e58a6a6098115058b1ed8036ce40b958195c7/-/blob/rs/nns/cmc/src/lib.rs?L329-336

-------------------------

Iceypee | 2023-08-02 05:20:05 UTC | #86

Not a particular amount. Just a gaurantee of a minimum number.

-------------------------

0x5279616e | 2023-08-02 11:26:21 UTC | #87

Most rates will have 9 decimals, but we cannot guarantee that value will not shift over time. An asset could experience a significant rise or lowering in price in comparison to the other asset. It would be best to have code in place that would adjust the value to what you expect.

-------------------------

THLO | 2023-08-14 09:05:51 UTC | #88

As @0x5279616e said, there is no guarantee that there will always be a certain number of decimals for a specific currency pair because a shift may be required if the conversion rate becomes much larger or smaller. However, the number of decimals will always be in the range `[0, 18]`.

-------------------------

THLO | 2023-11-27 16:53:17 UTC | #89

Hey everyone!
Some community members reported issues when trying to get rates from the exchange rate canister.

The reason for the (many) `RateLimited` errors was that the Binance API failed to respond to requests, causing the rate retrieval process to stall for 30 seconds for each request. As a result, handling requests took so long that most requests were rejected because the number of requests that can be handled concurrently is limited.

This issue has gone away on its own; however, since calls to Binance often fail (calls from replicas in the US are always rejected), we'd like to [replace Binance with Bybit](https://github.com/dfinity/exchange-rate-canister/pull/245), a smaller exchange, which, based on our initial testing, provides rates reliably.
Moreover, since the Monetary Authority of Singapore no longer provides a free API, we'd like to [remove it from the forex data sources](https://github.com/dfinity/exchange-rate-canister/pull/246). There are ten forex data sources even without this source, so there is no immediate need to replace it. We will look into a suitable replacement at a later stage.

Our plan is to create a proposal to upgrade the canister to the latest version of the source code in the [exchange rate canister repository](https://github.com/dfinity/exchange-rate-canister) on **Friday, December 1, 2023**.

If you have any questions or concerns, please let me know!

-------------------------

infu | 2023-11-27 17:21:34 UTC | #90

Could it be configured to automatically cancel calls to APIs that don't respond within approximately 2 seconds? If the number of responding APIs is sufficient, XRC would then only consider these for determining the outcome.

-------------------------

THLO | 2023-11-28 19:01:51 UTC | #91

We identified an issue with the acquisition of forex rates: There were many failures to reach consensus recently because the rates were not sorted in the `transform` function.
Fortunately, there is an [easy fix](https://github.com/dfinity/exchange-rate-canister/pull/247).

Just to make sure that the exchange rate canister continues to gather enough forex data in the upcoming days, we decided to speed up the process and push out the upgrade proposal - including the changes presented in my previous post - already now.
You can view the proposal [here](https://dashboard.internetcomputer.org/proposal/126130). Please cast your vote!

-------------------------

0x5279616e | 2023-12-01 19:18:06 UTC | #92

Hi everyone.

Our [previous proposal](https://dashboard.internetcomputer.org/proposal/126130) this week was successful in resolving an issue the XRC was experiencing while retrieving forex sources.

Unfortunately, it did not solve the `RateLimited` errors from occurring as ByBit is experiencing a significant amount of timeouts similar to Binance. To remedy this, we have proposed [126300](https://dashboard.internetcomputer.org/proposal/126300) which will swap out ByBit for Crypto.com. This allows the XRC to maintain the goal of utilizing 7 crypto exchange sources while providing a more reliable source. Please cast your vote!

-------------------------

Berg | 2023-12-01 21:38:06 UTC | #93

Never thought I'd see crypto.com and reliable in the same sentence! :slight_smile:

-------------------------

0x5279616e | 2024-01-19 17:29:49 UTC | #94

Hi everyone.

Earlier in the week, the XRC team identified an issue with the Gate.io exchange. Gate.io's  API was updated with a new field causing the XRC to be unable to extract a rate from the source. To fix this, we have proposed [127097](https://dashboard.internetcomputer.org/proposal/127097). Please cast your vote!

-------------------------

0x5279616e | 2024-02-02 14:50:28 UTC | #95

Hi everyone.

The XRC team identified an issue with the MEXC exchange. MEXC is returning additional headers in the response that need to be accounted for in the max response bytes. To address this, we have proposed https://dashboard.internetcomputer.org/proposal/127671. Please cast your vote!

-------------------------

0x5279616e | 2024-04-05 14:20:33 UTC | #96

Hi everyone.

The XRC team has proposed a new version: https://dashboard.internetcomputer.org/proposal/129034. We have added two new crypto exchanges (Bitget and Digifinex) and a new forex source (Central Bank Of Turkey). 

Please cast your vote!

-------------------------

0x5279616e | 2024-07-19 15:36:35 UTC | #97

Hi everyone.

The XRC team has proposed a new version: https://dashboard.internetcomputer.org/proposal/131366. We have added a piece of functionality to exclude calls to exchanges if they have failed previously. This should help resolve an issue we have noticed if exchanges timeout causing subsequent calls to become rate limited.

Please cast your vote!

-------------------------

ZackDS | 2024-07-22 08:07:43 UTC | #98

The CodeGov project team completed reviews for the proposal and voted to adopt it. You can find details on [OpenChat](https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/168083459961697538699863191526193241390/118)

-------------------------

