paulyoung | 2020-09-01 03:42:15 UTC | #1

Is it possible to write a function whose type is `<A> (A) -> async A`?

At the moment I get errors like `type error, async has non-shared content type A/52`

This makes me think there's a way to say that `A` must be constrained to the set of values that are `shared` but I haven't been able to figure out how to do that.

-------------------------

chenyan | 2020-09-01 17:40:56 UTC | #2

We don't support polymorphism for async functions. It has to be a concrete sharable type. There is no notion of type class, so we cannot constrain the type variable.

-------------------------

paulyoung | 2020-09-04 02:18:32 UTC | #3

Thanks Yan.

I think youâ€™re saying this is a limitation of Motoko and not the IDL (probably because things will need to be specialized by then anyway)

Is that right?

-------------------------

chenyan | 2020-09-04 05:02:55 UTC | #4

I would say it's the limitation of both. We need to extend both type systems to support this. It's theoretically possible to transmit polymorphic values over the wire, but not a very high priority.

-------------------------

paulyoung | 2022-01-12 14:01:51 UTC | #5

This was mentioned here:

https://github.com/dfinity/motoko/blob/a7cd4fba954b2fa7aeadc5680e2dc5d25e38cb69/design/WhitePaper.md#shared-generics-2096

and previously here:

https://github.com/dfinity/motoko/issues/2096

-------------------------

ggreif | 2022-02-18 10:08:18 UTC | #6

[quote="paulyoung, post:1, topic:1192"]
function whose type is `<A> (A) -> async A` ?
[/quote]

You'll have a hard time to get such a thing working with inter-canister messaging. While messages carry a self-describing type table, there is currently no mechanism to capture it in raw form and interpret it.

For strictly self-sends (i.e. `private`) such a signature would be simpler to implement in the compiler, since it can generate both sides of marshalling simultaneously. But what would be the utility to it?

-------------------------

paulyoung | 2022-02-19 07:01:56 UTC | #7

@ggreif I think at the time I was attempting to write something akin to `do` notation in user space for monadic values, and this came up.

I think the gist of it was to force unwrap optional values and short circuit by catching them and returning.

I think Motoko has a version of this built in now, but only for optional values. what I was attempting would have potentially worked for `Result` and others.

-------------------------

