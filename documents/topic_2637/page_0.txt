Hazel | 2021-04-30 03:20:06 UTC | #1

Looking at https://sdk.dfinity.org/docs/http-middleware.html#_enabling_canisters_to_respond_to_http_requests

Can Motoko canisters implement the http_request() method?

-------------------------

kpeacock | 2021-04-30 04:26:21 UTC | #2

Yes you definitely can! That's actually what our asset canister is doing - it's just a Motoko canister implementing `http_request` that we include with the SDK.

I'm hoping we can create a Vessel package to make it really easy to add asset functionality to canisters and also open source our SDK codebase soon so I can start linking to relevant code

-------------------------

cryptoschindler | 2021-04-30 06:17:28 UTC | #3

I find it a bit confusing how this all used to work, could you help me please?

 1. Accessing the canister through `<CANISTER_ID>.ic0.app` calls the asset canisters `retrieve()` function without arguments
2. This returns a blob which consists of a `index.js` file that contains some JS and static HTML -> the so called `bootstrap` code
3. Executing this `bootstrap` code then did the following things 
 3.1 create worker
 3.2 polyfill `window.ic`
 3.3  call `retrieve` again, but this time with `index.js` as an argument
 3.4 pass control of the DOM and the page to the newly fetched `index.js` from `3.3`

Is this correct?

-------------------------

cryptoschindler | 2021-04-30 06:22:29 UTC | #4

Oh and is this the middleware server?

https://docs.rs/tiny_http/0.8.1/tiny_http/

Isn't the middleware server a single point of failure and centralization?

-------------------------

nomeata | 2021-04-30 10:58:43 UTC | #5

I don’t think we have `retrieve()`  anymore, nor the bootstrap code. Are you looking at old versions of the asset canister?

-------------------------

cryptoschindler | 2021-04-30 12:21:17 UTC | #6

Yes, I'm reading the article @Hazel linked where the workings of the old assets canister are explained

-------------------------

Hazel | 2021-04-30 13:31:53 UTC | #7

@kpeacock - Do you have any examples you could share :sweat_smile: ?

Or, is it as-simple-as just implementing the interfaces here in Motoko
(and setting the type to asset?)

https://github.com/dfinity/agent-rs/blob/b9c0b28c2dfd7fbd2a654874f8fd9a9773fa0c8d/ic-utils/src/interfaces/http_request.rs

and doing something like..

```
public shared func http_request(req : HttpRequest) : async HttpResponse {
  // Do stuff w/ req, build response
};
```

-------------------------

nomeata | 2021-04-30 14:09:40 UTC | #8

Make sure you mark it as a `query` method, but yes, it is as simple as that. Try this as an (untested) starting point:
```
shared actor {

  type HeaderField = (Text, Text);

  type HttpRequest = {
    method: Text;
    url: Text;
    headers: [HeaderField];
    body: Blob;
  };

  type HttpResponse = {
    status_code: Nat16;
    headers: [HeaderField];
    body: Blob;
  };

  public query func http_request(request: T.HttpRequest): async T.HttpResponse {
    …
  }
}
```

(I left out the streaming part, for simple experiments this should not be needed. Thanks to Candid subtyping, it should work fine.)

Note that Motoko’s support for string parsing, e.g. for headers, is limited. Community-provided libraries are welcome!

-------------------------

Hazel | 2021-04-30 14:10:56 UTC | #9

[quote="nomeata, post:8, topic:2637"]
`http_request`
[/quote]

Will give this a shot after work today. I'm super excited for this, great job everyone!!!

-------------------------

Gabriel | 2021-05-04 14:44:13 UTC | #10

[quote="nomeata, post:8, topic:2637"]
```
ublic query func http_request(request: T.HttpRequest): async T.HttpResponse {
    …
```
[/quote]

Hi @Hazel 

Any luck with this?

I'm also interested but if you got this working there's no point for me to reinvent the wheel.

Can you share your code please?

-------------------------

Hazel | 2021-05-08 04:54:44 UTC | #11

https://gist.github.com/SuddenlyHazel/26613b42974b88dade60a9db6265fe32

Working example!

-------------------------

ComputerInternetMan | 2021-06-05 22:08:55 UTC | #12

If I might humbly suggest...This is code that should be presented widely so folks can visualize.

‘’ Whoa, it works!! ‘’

Very flash Hazel.

-------------------------

skilesare | 2021-06-14 01:49:06 UTC | #13

This looks great for hard coded or programmatic responses, but how do you read in your source files...like have some HTML that I want to return for a certain path...how can motoko load in that file and serve it up?

-------------------------

paulyoung | 2021-06-14 03:38:38 UTC | #14

I think the asset canister that gets created by `dfx` should allow you to do that.

-------------------------

wang | 2021-06-14 05:07:50 UTC | #15

Has anyone gotten html templating to work with rust, or is building something for motoko?

-------------------------

skilesare | 2021-06-14 13:11:05 UTC | #16

Is DFX open sourced?  It looks like the asset canisters just have a putAsset, getAsset, and http_request() that serve the named assets. Seems like this would be an easy set of motoko function to just lift and put into your core canister rather than having a separate canister.

-------------------------

jzxchiang | 2021-08-27 23:24:04 UTC | #17

Good question, I wonder myself whether DFX is open-sourced...

-------------------------

nomeata | 2021-08-28 21:13:08 UTC | #18

Dfx is not (yet?) open source, but the asset canister is since a few days: https://github.com/dfinity/certified-assets

-------------------------

