lastmjs | 2022-04-08 00:31:14 UTC | #1

Hey everyone!

I've been working hard at bringing TypeScript and JavaScript to the table as languages for developing IC canisters. I am very happy to announce the launch of Azle Beta: https://github.com/demergent-labs/azle

Keep your expectations tempered. It is a beta and there are probably many many issues that we will run into. But I believe it is ready for much broader testing.

If you're interested, please have a go at it and feel free to reach out to me on any platform @lastmjs and I'd love to help you out if you get stuck or run into any issues.

-------------------------

Maxfinity | 2022-04-09 17:16:48 UTC | #2

This is amazing work, Jordan! What a fun and useful project to be working on - I can only imagine how many new developers this initiative will bring to the IC.

-------------------------

nomeata | 2022-04-11 09:56:02 UTC | #3

Intriguing. I couldn’t tell from the README: How do you compile TypeScript to WebAssembly? (I see a `typescript_to_rust` directory – are you transpiling typescript to Rust first?)

-------------------------

lastmjs | 2022-04-11 12:42:36 UTC | #4

As far as I know, there is currently no way to compile TypeScript/JavaScript into Wasm. The closest you can get with that path is to compile AssemblyScript into Wasm. I didn't want to go that path because I want to enable the full TypeScript/JavaScript language.

So, I use a JS engine written in Rust, [boa](https://github.com/boa-dev/boa), to do the actual JS execution. I basically transpile the TypeScript into a Rust canister, mapping all of the TypeScript functions and types into the equivalent Rust functions and types, but the function bodies call into the JS engine.

-------------------------

