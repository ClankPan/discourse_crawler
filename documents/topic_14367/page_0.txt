peterparker | 2022-07-17 13:17:32 UTC | #1

```
private let myMap: HashMap.HashMap<Nat, MyObject> = 
   HashMap.HashMap<Nat, MyObject>(10, Nat.equal, Hash.hash,);
```

throws following warning with dfx `v0.10.0`

```
warning [M0154], field hash is deprecated:
For large `Nat` values consider using a bespoke hash function that considers all of the argument's bits.
```

Somebody already migrated and has an example to share?

-------------------------

quint | 2022-07-17 14:59:16 UTC | #2

I am waiting for a new release of `moc` so that we have support for shift primitives for `Nat`.
The feature is already merged ([e4125ef](https://github.com/dfinity/motoko/commit/e4125efff6e48d1ecd922eaf5d4e5650a105640a)), but not yet included in a release (as of `v0.6.29`).

Once this feature is added, it will be much easier to create hash functions.
You could already use SHA hashes, but that seems a little inefficient (depending on the use case).

EDIT: as long as you can convert your data structure to a blob, you can always use `Blob.hash` ([ref](https://github.com/dfinity/motoko-base/blob/648cb099febc790a9bacb69ce4c9e61e2a28ccad/src/Blob.mo#L15-L16)).

```
// NOTE: this is NOT efficient!
private let bl = 256;

private func bytelen(n : Nat) : Nat {
    var m = n; var l = 0;
    while (m > 0) { l += 1; m /= bl; };
    l;
};

public func natToArray(n : Nat) : [Nat8] {
    var m = n; let l = bytelen(n);
    Prim.Array_tabulate(l, func (i : Nat) : Nat8 {
        let n = m % bl; m /= bl;
        Prim.natToNat8(n);
    });
};
```

-------------------------

bytesun | 2023-03-01 06:15:11 UTC | #3

same issue with dfx 0.12.1,  does anyone has any better solution to migrate?

-------------------------

skilesare | 2023-03-01 10:44:20 UTC | #4

Don't use hashmap. It has various problems. There are better alternatives.

https://github.com/ZhenyaUsenko/motoko-hash-map

-------------------------

matthewhammer | 2023-03-02 00:31:31 UTC | #5

[quote="skilesare, post:4, topic:14367"]
Donâ€™t use hashmap.
[/quote]

Or more precisely, at least consider not using `Hash.hash` as your hash function, as the message indicates.

Instead, I *think* answer is that developers should use a library that hashes the full value for them, unlike the current (very poor) hash function provided by `base`.

I wasn't aware of [that message](https://github.com/dfinity/motoko-base/blob/322308fe23fa719aa0b70e4ad333e4a53bc67a6d/src/Hash.mo#L26), but it makes sense.

If you [look at the implementation](https://github.com/dfinity/motoko-base/blob/322308fe23fa719aa0b70e4ad333e4a53bc67a6d/src/Hash.mo#L28), it's not using the full `Nat` , and thus may introduce a lot of collisions for certain kinds of `Nat` sets that have common bits once they go through `Prim.intToNat32Wrap`.

My guess (not sure) is that @quint has a better hash function for `Nat` by now?

-------------------------

skilesare | 2023-03-02 13:08:09 UTC | #6

Does Blob.hash suffer from the same issue?

-------------------------

matthewhammer | 2023-03-02 23:09:18 UTC | #7

Interesting question!

[Blob.hash](https://github.com/dfinity/motoko/blob/e9cb4a8455a5754e898f920d4b64e47da943e2af/src/prelude/prim.mo#L75) uses a different, well-known hash function (crc32), at a different level ([Rust run-time system code](https://github.com/dfinity/motoko/blob/master/rts/motoko-rts/src/principal_id.rs#L14)).

[quote="matthewhammer, post:5, topic:14367"]
My guess (not sure) is that @quint has a better hash function for `Nat` by now?
[/quote]

Indeed, @quint has a library for doing crc32 in user code:

https://github.com/aviate-labs/hash.mo

-------------------------

