skilesare | 2021-08-03 01:15:48 UTC | #1

Continuing the conversation in: https://forum.dfinity.org/t/recommended-usage-of-certifieddata/4370/14

I've taken the liberty to set up: https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=204614974 so that we can reason about this.

Super simple. addItem associates a Nat with another Nat. It also adds the key and value to a Merkle tree as provided by @nomeata .  The return is a tuple (data put into CertifiedData.set(the hashTree of the MerkleTree), the witness to the object in the tree).

When you getItem(item) I return a tuple (key, the certificate as returned by CertifedData.getCertificate, the current witness to the item, the root of the MerkleTree).

I've messed with MerkleTrees a good bit, but am not really an expert.  I'm missing a number of things here that would be nice to solve for:

1. Why isn't the root part of the witness?  I'm guessing there is a theoretical function in MerkleTree called proveWitness(root, witness) that will roll up the witness from the bottom by hashing the items at each leaf and confirm that they roll up to the top where you should find the MerkleRoot.  Seems like this root should be part of the witness.  Maybe a #root(Hash, Witness, Witness)?

2. Why isn't there a function to do this in MerkleTree?  It doesn't seem like that bad of a function to write if I can get a couple of assumptions cleared.
    a). how is 
        
```
        
        //this
        let keyPrefix = hp(k);
        let keyHash = prefixToHash(keyPrefix);
 
        //different from this
        let valueHash = h(v);

       //hp takes the sha256 and prefix converts it to a blob
       // h does both in the same function; can this be refactored?
```
    b)Looks like the leafs and forks get a prefix all the time? or just sometimes?  see mkLeaf, mkFork

3. The certificate looks like a long blob. I'm guessing there exists a function verifyCertificate(cert, data) that will confirm the certificate for the data.  In this case the data is the Merkle root.  
     a). What is the function and what is the output?  
     b). Is one of the outputs the current Signing Key for MainNet?  
     c).  If so how do I get that? 

4.  I also think that I probably shouldn't be returning the certificate in my getItem and instead provide just the witness and data.  I should get the certificate somewhere else.  Where do I get it? I'm guessing it is a system canister call, but I can't seem to find it on ICRocks anywhere.

5. I don't want to mess around with writing a witness prover if a new paradigm is "coming soon" *© Dom.* :wink:

-------------------------

claudio | 2021-08-03 16:29:26 UTC | #2

I don't have much knowledge of this stuff, but just in case you missed it, @nomeata  did an overview here:

https://dfinity.org/technicals/response-certification

-------------------------

skilesare | 2021-08-03 19:14:11 UTC | #3

That was super helpful and helped answer some questions.  One question it leaves me with is what the format of the certificate is.  It looks like it should have Time, Principal, and Data in it, but I'm not sure how to parse it out.

It also looks like a client could get certified data from the system state tree for double verification.  Are we able to get the things listed here: https://sdk.dfinity.org/docs/interface-spec/index.html#http-read-state in motoko?  Perhaps there is another way to go about it. I was hoping the https://sdk.dfinity.org/docs/interface-spec/index.html#ic-management-canister aaaaa-aaa canister might expose the cansiter state, but I don't see that in the did spec.

ReadState would be more useful if we had access to the messageID, but I don't think we have access to that in motoko.  Perhaps it could be added to the msg object for shared functions?  I could see wanting to do some retroactive analysis on requests and if they were rejected or accepted.

Finally...according to https://sdk.dfinity.org/docs/interface-spec/index.html#certification-encoding the certificates are encoded in CBOR.  This begs the question as to whether there is a CBOR library for motoko anywhere?

-------------------------

claudio | 2021-08-04 18:54:31 UTC | #4

As far as I know there is no CBOR implementation for Motoko yet. Perhaps this would be decent starting point: https://github.com/ygrek/ocaml-cbor but I can't vouch for it. Note OCaml use 32-bit chars to represent bytes and 32-bit char strings for byte sequences (yuck).

I'm not sure why Motoko would want to verify the certificates  - isn't the use-case to verify the results of unreliable ingress queries (ie. from a browser). An inter-canister query call goes through consensus and doesn't require certification.

Perhaps the best folk to chime in here are @nomeata and @roman-kashitsyn.

-------------------------

skilesare | 2021-08-04 19:11:00 UTC | #5

> I’m not sure why Motoko would want to verify the certificates - isn’t the use-case to verify the results of unreliable ingress queries (ie. from a browser). An inter-canister query call goes through consensus and doesn’t require certification.

I was informed that query calls are subject to a bad actor because query just goes to one canister and thus are not subject to consensus.  It is a huge bit of complexity off my plate if that is not the case...but I almost think I'd like it that way because it means that I'm getting the fastest response to my query that I can...I at least want some way to NOT have to go through consensus if I can get the same guarantees through a witness/cert.

-------------------------

claudio | 2021-08-04 20:53:08 UTC | #6

Yeah, this is confusing.
Query ingress message are vulnerable because they talk to a single replica (not canister) and don't require consensus.

When a canister's update method makes a call to a query method, consensus is required, or the entire update would be less trustworthy. This is why query calls from update methods don't buy the same performance gains as ingress calls to query methods.

At least, that's my understanding.

-------------------------

skilesare | 2021-08-04 21:02:37 UTC | #7

That would be great to have confirmation on.  And it might be worth putting a shim in there long term for folks that know what they are doing because trusted queries during update calls would be really nice and amplify scalability.  I get that it would require expert usage.  I guess I'll stop working on a motoko cbor library :joy:

-------------------------

skilesare | 2021-08-05 13:16:19 UTC | #8

Motoko demo putting a bunch of pieces together and writing a new reconstruct function.

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3177226102

-------------------------

nomeata | 2021-08-06 14:16:52 UTC | #9

I was off the grid for a while and lost track of which questions are still open here, if any

-------------------------

skilesare | 2021-08-06 20:36:10 UTC | #10

1. Confirmation that you don't need to verify a cert after a query call fromnone canister to another because it goes through concensus.

2. Comment on if would be possible to have a raw query during intercannister calls that would avoid concensus and rely on the canister operator to verify a returned certificate.(maybe this breaks determinism?)

3. What is the format of a cert and can we get a motoko function for converting it into a witness, signature, etc(cbor serializer/deserializer) in case there emerges a reason to verify old certs. We'd also need the motoko version of certificate and signature verification.

4. Can motoko call the state functions to get data on calls and/or certificate information from the state tree? Example: I want to record the current root and a cert now and later someone can prove they had a value in the canister at time x by providing a witness.

I'll review the old thread and see if there is anything else.

-------------------------

nomeata | 2021-08-07 09:06:10 UTC | #11

[quote="skilesare, post:10, topic:6272"]
Confirmation that you don’t need to verify a cert after a query call fromnone canister to another because it goes through concensus.
[/quote]

Correct. The update/query call distinction doesn't even exist for inter-canister calls.


[quote="skilesare, post:10, topic:6272"]
if would be possible to have a raw query during intercannister calls that would avoid concensus and rely on the canister operator to verify a returned certificate.(maybe this breaks determinism?)
[/quote]

Not possible in the current architecture, precisely because it breaks determinism.

One can imagine a “fast path consensus for non-mutating calls” that would provide a middle ground, but that is far future work.


[quote="skilesare, post:10, topic:6272"]
What is the format of a cert
[/quote]

You need to distinguish between the system certificate (which is CBOR as per the Interface Specification), and which contains only the “root hash” of the application's data structure, and the application's certificate, which of course is completely up to the application.


[quote="skilesare, post:10, topic:6272"]
can we get a motoko function for converting it into a witness, signature, etc(cbor serializer/deserializer) in case there emerges a reason to verify old certs
[/quote]

I don't follow what the use case is here?


[quote="skilesare, post:10, topic:6272"]
We’d also need the motoko version of certificate and signature verification.
[/quote]

Why? Verification only happens on the client side, and Motoko is (so far) purely a canister-side language.

[quote="skilesare, post:10, topic:6272"]
Can motoko call the state functions to get data on calls and/or certificate information from the state tree?
[/quote]

No, it has to use the system API. Data on calls is intentionally not exposed there (it'd be a layering violation), the same way a Unix application using TCP doesn't see IP packets or sequence numbers. 

The system certificate can and should be obtained via the system API, and in Motoko via the `CertifiedData` module.



So my suggestion for a Motoko service that certifies it's query calls is to use a library like my [motoko-merkle-tree](https://github.com/nomeata/motoko-merkle-tree), and use the built in Candid support to transfer the witness (a.k.a. pruned tree) to the client, where you can turn it into the “decoded” data structure used by the JS library for verification. This way no CBOR is needed.

For certified HTTP assets, some simple CBOR and base64 encoding needs to be written first, indeed.

-------------------------

skilesare | 2021-08-07 15:33:09 UTC | #12

[quote="nomeata, post:11, topic:6272"]
You need to distinguish between the system certificate (which is CBOR as per the Interface Specification), and which contains only the “root hash” of the application’s data structure, and the application’s certificate, which of course is completely up to the application.
[/quote]

Hmmm…the signed data is up to me, but when I call CertifiedData.getCertificate() it definitely returns a byte array that I’d not know how to interpret. I see my hash that I signed in there with a 32 in front of it(which I’ve deduced from the cbor spec).

Use case:

I'm thinking of a use case where you want to prove data was committed to in a previous time period.

Consider an auction

T=0 - Camister B,C,D separately and secretly commit to a bid.

T=1 Canister A asks Cansister B,C,D for their current certificates.

T=2 - Canister A closes the auction.

T=3 - Canister B,C ,D reveal their witness showing their committed value.

T=4 -Canister confirms witnesses and awards auction to highest bidder.

To do this it would be great to be able to read the certificate metadata in getCertificate() and be able to verify the dig in T=1. Maybe even just a getCertificate Candid would be helpful?

Generally, is it potentially useful for a motoko canister to act like a client?

It seems that rust canisters get to walk this line between a pure canister and accessing underlying system calls. Should “any canister that could be written in rust  should also be possible to write in motoko?”  If not the language becomes much less appealing for a developer to commit to learning.

Re: merkletrees

I’ve put the example together at https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3177226102 that shows what comes back from getCertificate, and yes, uses your library to create the root.

-------------------------

nomeata | 2021-08-08 09:43:00 UTC | #13

[quote="skilesare, post:12, topic:6272"]
when I call CertifiedData.getCertificate() it definitely returns a byte array that I’d not know how to interpret
[/quote]

Only the client ought to have to interpret that, the canister (and hence Motoko) just passes it through.

Your example doesn't involve outside clients, but only canisters, so everything is happening in the happy world of deterministic execution, and I don't think you need to or should reach for certification here. Instead, you can solve it differently. For example, the canisters could just commit by sending their bits to another canister that notes them together with a timestamp, and forwards them when done?

-------------------------

nomeata | 2021-08-08 09:48:03 UTC | #14

[quote="skilesare, post:12, topic:6272"]
Should “any canister that could be written in rust should also be possible to write in motoko?”
[/quote]

I would phrase it as Motoko vs. raw Wasm-level System API (rust just happens to provide a relatively low level mapping of the raw System API - but not even rust allows you to do every useful thing possible there).

That is probably worth its own thread, as it's a hard question. For example Motoko fully embraces Candid, which is a deliberate choice. But is it the right choice?

Again analogies can be helpful. The Unix System API gives user level programs access to TCP, but not raw IP. Is that good or bad? Some programs cannot be written, but on the other hand interoperability is improved by that restriction.

-------------------------

skilesare | 2021-08-08 14:47:05 UTC | #15

[quote="nomeata, post:14, topic:6272"]
That is probably worth its own thread, as it’s a hard question. For example Motoko fully embraces Candid, which is a deliberate choice. But is it the right choice?

Again analogies can be helpful. The Unix System API gives user level programs access to TCP, but not raw IP. Is that good or bad? Some programs cannot be written, but on the other hand interoperability is improved by that restriction.
[/quote]

Thanks for the reply. This makes sense. I may try to document the system calls in a table and show how you can/cannot do things in rust vs. motoko. I’ve already discussed with @claudio that we really do need a call_raw(blob):blob. For basic pass through wallet functionality.

-------------------------

skilesare | 2021-08-08 14:55:49 UTC | #16

[quote="nomeata, post:13, topic:6272"]
Your example doesn’t involve outside clients, but only canisters, so everything is happening in the happy world of deterministic execution, and I don’t think you need to or should reach for certification here. Instead, you can solve it differently. For example, the canisters could just commit by sending their bits to another canister that notes them together with a timestamp, and forwards them when done?
[/quote]

I feel a bit better about this from a motoko standpoint. I’d still love to see a functional spec of verifying a signature in case I get crazy and want to write a cobol client.😬 I think the site has a good tech spec, but a functional, step by step process with exact curves and encryption schemes would be instructive.

I think it is something like:

1. Decode cert using cbor. Components: Signature, tree
 A. Cert is a _________ type signature.
 B. Is a merkle tree with definition (link to merkle tree class)
2. Find cert in leaf of merkle tree and verify root of tree using .reconstruct.
3. Retrieve root bls key from system
4. Verify signature is signed by root bls key and is of data root of tree using (function) of (crypto class)

-------------------------

nomeata | 2021-08-08 16:24:58 UTC | #17

Yes, such a tutorial/explainer would be useful. The pieces are all there (in the Interface Specification), but hard to put together.

There is also a talk on response certification which has been recorded a good while ago, and will hopefully soon appear at … oh, has been published without me knowing!

https://dfinity.org/technicals/response-certification

(A bit more high level than what you wanted to know, but still helpful for background information.)

-------------------------

skilesare | 2021-08-13 16:29:53 UTC | #18

I think I though of a decent use case:

Canister A hods some state that is important to a decision on Canister B.  Canister B could query Canister A for that state during an update query, but that will result in the cycle cost of a XCanister Call and a round trip for waiting for consensus.

Instead it would be nice if A could push the certified data to B once and then the client could deliver the certificate with the update call with a witness and validate any number of pieces of data on A without the XCanister call.

Example:  A is a ledger of Tokens X.  B awards a Token Y if you burn tokens X.  A can update B on the root and all burns -> mint can be executed without a XCanister call.

-------------------------

nomeata | 2021-08-13 17:53:51 UTC | #19

Maybe a bit contrived, but sure, I'll take it. Now we just need volunteers to write the corresponding libraries for Motoko :-)

-------------------------

skilesare | 2021-08-13 18:34:46 UTC | #20

What are those for the certificate?

I think it is cbor encoded so we'd need to parse a subset of cbor values.  What are the fields and types?

What crypto library do we need for validating the signature?

-------------------------

nomeata | 2021-08-13 18:39:06 UTC | #21

[quote="skilesare, post:20, topic:6272"]
I think it is cbor encoded so we’d need to parse a subset of cbor values. What are the fields and types?
[/quote]

See [the CDDL spec](https://sdk.dfinity.org/docs/interface-spec/index.html#certification-encoding). CBOR tags, arrays, records and `bytes`.

[quote="skilesare, post:20, topic:6272"]
What crypto library do we need for validating the signature?
[/quote]

Oh, right, you still need to validate the signature. That would require an implementation of BLS. Probably not fun in pure Motoko… maybe we should bet on developer-accessible FFI.

-------------------------

skilesare | 2021-08-13 19:56:50 UTC | #22

Thank you for the link!

FFI means being able to reference and call rust functions from our motoko code right?  That would be game-changing.

-------------------------

nomeata | 2021-09-15 13:47:37 UTC | #23

I am building a proof of concept Motoko canister that serves a dynamic HTTP asset and certifies it, including CBOR encoding etc.:

Code at https://github.com/nomeata/motoko-certified-http

It’s still buggy (https://ce7vw-haaaa-aaaai-aanva-cai.ic0.app/ doesn't work) and I am out of time for today; I’ll create a new post once it actually works. But at least it works already on https://ce7vw-haaaa-aaaai-aanva-cai.raw.ic0.app/.

-------------------------

nomeata | 2021-09-15 16:37:03 UTC | #24

Works now, see https://forum.dfinity.org/t/certified-assets-from-motoko-poc-tutorial/7263

-------------------------

LightningLad91 | 2022-08-17 14:13:27 UTC | #25

@nomeata @skilesare @claudio 

I have a question about using Certified Variables and I think its relevant to this thread.

I am trying to understand how Canister Signatures work so that I may use them in Motoko to create a canister-controlled neuron, as described by @bjoern [here](https://forum.dfinity.org/t/how-to-create-a-decentralized-community-neuron/12564?u=lightninglad91).

I just finished watching @nomeata's video presentation [Inside the Internet Computer | Certified Variables](https://internetcomputer.org/how-it-works/response-certification/) and one question I have is how this subnet certified data will be handled in the future if a canister migrates from one subnet to another.

Specifically, if I create a canister-controlled neuron that can only be controlled via certified data from a given subnet, do I run the risk of losing control of that neuron in the future if my canister migrates to a different subnet?

-------------------------

skilesare | 2022-08-17 14:17:49 UTC | #26

I don't think you can do that quite yet.  But we are close.  Watch the skies! You'll need to use a t-ecdsa signature I think.  I don't think canister signatures are going to let you control a neuron.

-------------------------

LightningLad91 | 2022-08-17 14:20:25 UTC | #27

I suspected as much, but I've been told differently and I wanted to do my due diligence.

Edit: For clarification, do you not think it can be done at all or do you think this is only a limitation for Motoko?

-------------------------

skilesare | 2022-08-17 14:24:49 UTC | #28

I think they limit canisters from holding neurons on purpose. The t-ecdsa routes around that.  Seems like it will be a silly restriction once we have t-ecdsa, so hopefully we can have it removed.  I think the canister signatures are used for delegations, so maybe you could delegate to a canister your ownership of a neuron...but you'd need some way to prove you'd destroyed the private key.

-------------------------

LightningLad91 | 2022-08-17 14:30:14 UTC | #29

[quote="skilesare, post:28, topic:6272"]
Seems like it will be a silly restriction once we have t-ecdsa, so hopefully we can have it removed
[/quote]

I agree.

[quote="skilesare, post:28, topic:6272"]
…but you’d need some way to prove you’d destroyed the private key.
[/quote]

Not sure I follow. If I eventually remove the controller of the canister, or hand control to the DAO wouldn't that be verified by checking the canister's controller list?

-------------------------

LightningLad91 | 2022-08-17 14:35:42 UTC | #30

@skilesare here is the process that @bjoern provided to me on Twitter.

https://twitter.com/bjoerntm/status/1553021814665842688?s=20&t=B5JZbMSqwW3omNV3lhlSEg

-------------------------

skilesare | 2022-08-17 15:10:29 UTC | #31

Ha! Ok...so that is interesting. I'd be happy to outline that out a bit here.

I'm clearly missing something here.  A canister can sign a root, but I don't think it can sign data.  Wouldn't it need to sign the transaction?  (Maybe the key here is that all that needs to be signed is a transaction hash.) If that is the case then you aren't really signing a Merkle tree, you are just signing a root that isn't a root, but a hash of a transaction.  Maybe @bjoern can give some clarity.

Steps:
1. Send Transaction hash and candid to the canister.  Have the hash written to the certified data.
2. Have the canister submit a query via the new HTTP interface to get the signature
3. Do a second HTTP call to send the call to the management canister and the signed hash to the IC.

I wish I'd thought of that before because we could have been doing this manually for a while....now with HTTP requests, we can automate it.

-------------------------

bjoern | 2022-08-17 15:51:34 UTC | #32

The canister would create the ingress message and would put the request id into a Merkle tree structure as described in the [section on canister signatures](https://internetcomputer.org/docs/current/references/ic-interface-spec#signatures). In a subsequent query call to that canister, one can request the signature on the root of the Merkle tree, and the canister can also return the path in the Merkle tree. Together, those form the "canister signature". This is exactly what we do in Internet Identity; well, we "sign" a delegation not an actual request id, but that doesn't really matter, just do what II does but "sign" the request id instead.

That said, as @skilesare pointed out, canister signatures (and the tECDSA feature as well) together with the HTTP request feature make the restriction that canisters cannot hold neurons somewhat artificial. So maybe there is a discussion to be had (maybe first in a dedicated thread here in the forum, and maybe that could lead to an NNS proposal) about lifting that restriction.

-------------------------

LightningLad91 | 2022-08-17 15:58:17 UTC | #33

Thanks @bjoern, I have a few follow-up questions:

[quote="LightningLad91, post:25, topic:6272"]
if I create a canister-controlled neuron that can only be controlled via certified data from a given subnet, do I run the risk of losing control of that neuron in the future if my canister migrates to a different subnet?
[/quote]

Do you know if I risk losing control of the neuron in the scenario described above?

[quote="bjoern, post:32, topic:6272"]
The canister would create the ingress message
[/quote]
 Do you have a reference for doing this? I'm still learning the ins/outs of Motoko. I thought only external actors could create ingress messages.

[quote="bjoern, post:32, topic:6272"]
In a subsequent query call to that canister, one can request the signature on the root of the Merkle tree, and the canister can also return the path in the Merkle tree.
[/quote]

So does this mean that the canister itself would not be submitting the neuron management calls to the NNS? I would need some authorized third party to retrieve these variables and then pass them to the NNS indirectly?

-------------------------

bjoern | 2022-08-17 16:23:56 UTC | #34

[quote="LightningLad91, post:33, topic:6272"]
Do you know if I risk losing control of the neuron in the scenario described above?
[/quote]

That is not a risk. Let us look at the [spec](https://internetcomputer.org/docs/current/references/ic-interface-spec#signatures), in particular the part that defines the "public key" for canister signatures:

> The `BIT STRING` field `subjectPublicKey` is the blob `|signing_canister_id| · signing_canister_id · seed`, where `|signing_canister_id|` is the one-byte encoding of the the length of the `signing_canister_id` and `·` denotes blob concatenation.

The key only depends on the `signing_canister_id` and a canister-chosen `seed`. No information about the subnet is used. In fact, we will be moving the Internet Identity canister to a new subnet soon, which is only possible due to the described property.

[quote="LightningLad91, post:33, topic:6272"]
Do you have a reference for doing this? I’m still learning the ins/outs of Motoko. I thought only external actors could create ingress messages.
[/quote]

I don't, unfortunately. It's a mess, since you have to first encode the argument as Candid, then you have to assemble the ingress message as CBOR and compute the request id. I was saying that it's possible, not that it's easy...

[quote="LightningLad91, post:33, topic:6272"]
So does this mean that the canister itself would not be submitting the neuron management calls to the NNS?
[/quote]

Well the canister can use the HTTP request API to make a query call to itself. And then it could use the HTTP request API to submit the request to the boundary node. So once we have HTTP queries, the canister can do this.

But yeah, all this wouldn't be necessary if canisters could control neurons directly.

-------------------------

LightningLad91 | 2022-08-17 18:46:42 UTC | #35

[quote="bjoern, post:34, topic:6272"]
The key only depends on the `signing_canister_id` and a canister-chosen `seed`. No information about the subnet is used. In fact, we will be moving the Internet Identity canister to a new subnet soon, which is only possible due to the described property.
[/quote]

Thank you! This is good to know. I misunderstood the video when it said the subnet would sign the certificate and had not taken a look at the spec yet.

[quote="bjoern, post:34, topic:6272"]
I was saying that it’s possible, not that it’s easy…
[/quote]
 Copy that. I may still try to build this just to learn from the experience.

[quote="bjoern, post:34, topic:6272"]
But yeah, all this wouldn’t be necessary if canisters could control neurons directly
[/quote]

I would like to draft a governance proposal requesting that DFINITY add this feature to their roadmap, or at least consider it in their horizon planning. I'm just not sure how that process works now given recent discussions on the topic. I want to respect y'alls processes.

-------------------------

skilesare | 2022-08-18 10:08:28 UTC | #36

[quote="LightningLad91, post:35, topic:6272"]
I would like to draft a governance proposal requesting that DFINITY add this feature to their roadmap, or at least consider it in their horizon planning. I’m just not sure how that process works now given recent discussions on the topic. I want to respect y’alls processes.
[/quote]

https://forum.dfinity.org/t/proposal-remove-the-is-self-authenticating-restriction-on-neuron-ownership/14948

-------------------------

bjoern | 2022-08-18 10:19:35 UTC | #37

[quote="LightningLad91, post:35, topic:6272"]
I would like to draft a governance proposal requesting that DFINITY add this feature to their roadmap, or at least consider it in their horizon planning. I’m just not sure how that process works now given recent discussions on the topic. I want to respect y’alls processes.
[/quote]

If you're referring to [the recent discussion on priorities](https://forum.dfinity.org/t/proposal-to-prioritize-55651-periodic-confirmation-38985-manual-voting-over-48623-compounding-maturity/14461/26): I think the proposal you have in mind is clearly a (technically straightforward) proposed change to the IC governance system. Especially if it is phrased like that (a proposal to change the governance system, not necessarily about who implements it and when), I think it is clearly suitable and expect that fact to be uncontroversial. That said, it may make sense to describe the intent in a forum thread first.

-------------------------

