Gekctek | 2022-06-01 23:35:20 UTC | #1

Is there a way right now to validate or ensure a version of a canister being called? 
I was thinking about a scenario where I ONLY want to call the canister that has a specific binary running, not any 'updated' versions, or just fail/error.
In other blockchains, the immutability allows for the use of a smart contract without it ever being changed. This is inflexible but creates this stability and trust that things can't change unless you update your dapp to use a different smart contract.
Unless ownership of the canister is completely given up, there is a problem of trusting the thing you are calling is what you expect.

I was just wondering if there was a way now/in the future to restrict a canister call based on canister version/canister binary hash.

-------------------------

domwoe | 2022-05-30 16:10:56 UTC | #2

Currently this is only possible for external users (i.e not inter-canister calls) as far as I know. As an external user you can [access public metadata via the `read_state` API](https://internetcomputer.org/docs/current/references/ic-interface-spec/#state-tree-canister-information). This includes the module hash.

-------------------------

Gekctek | 2022-05-30 17:09:13 UTC | #3

That solves most of the problems but in theory, the time between accessing the module_hash and making an external api call to a function, the module could change right? Very unlikely but just thinking out loud

-------------------------

paulyoung | 2022-05-30 19:56:25 UTC | #4

[quote="Gekctek, post:1, topic:13370"]
I was just wondering if there was a way now/in the future to restrict a canister call based on canister version/canister binary hash.
[/quote]

You could add an explicit argument for version number or binary hash to your functions. The caller would supply the argument and the canister would check the argument matches its version/hash.

-------------------------

Gekctek | 2022-05-31 03:39:49 UTC | #5

Fair point, but a use case I'm trying to figure out if if the canister is not trusted. In theory the canister can be updated to not have that check or it might not be there at all. It would probably have to be an IC protocol check which sounds like doesn't exist

-------------------------

paulyoung | 2022-05-31 03:47:25 UTC | #6

Maybe [CanisterStatus](https://agent-js.icp.host/agent/modules/CanisterStatus.html)?

https://forum.dfinity.org/t/agent-js-0-11-2/13136?u=paulyoung

-------------------------

domwoe | 2022-05-31 06:42:23 UTC | #7



[quote="Gekctek, post:3, topic:13370, full:true"]
That solves most of the problems but in theory, the time between accessing the module_hash and making an external api call to a function, the module could change right? Very unlikely but just thinking out loud
[/quote]

Yes, I think you're right. Although unlikely, you're not guaranteed that your call hits the version you expect.

[quote="paulyoung, post:6, topic:13370"]
Maybe [CanisterStatus](https://agent-js.icp.host/agent/modules/CanisterStatus.html)?
[/quote]

Yep, thanks for mentioning this. This is the JavaScript wrapper around the Internet Computer API I mentioned above

-------------------------

AdamS | 2022-05-31 16:22:13 UTC | #8

There is a ['black hole' canister](https://github.com/ninegua/ic-blackhole) at `e3mmv-5qaaa-aaaah-aadma-cai`. If it reports that it is the only controller of a canister, then that canister is immutable. You can use that as a programmatic constraint.

-------------------------

spnrapp | 2022-06-01 18:50:36 UTC | #9

Even users can't be sure. Because code hash could have changed between the time you checked it (via dfx canister info) and the time you make the call. Even if you check after you make the call, and see the code hash was the same, it still can't prove anything -- because some one could have done an upgrade to change code from version A to B and then back to A.

Sure, making canister immutable is one way to go about it. But other than those with trivial implementations (e.g. the blackhole canister itself), real apps do need regular upgrades, and for good reasons like maintenance/features/bugfix, etc.

This is why we build LaunchTrail to help.

https://github.com/spinner-cash/launch-trail

A developer can first deploy their own LaunchTrail canister, set it as immutable, and then use it deploy/upgrade/manage other canisters. Anything that goes through LaunchTrail literally leaves "a trail", which gives a chance for the public to verify (and for the developer to prove) what has happened and what is going to happen, because LaunchTrail can set code upgrade as a delayed action that will only take place at a future time.

Back to the original question, if a canister was deployed through LaunchTrail, its users (including other canisters) can verify the following:

1. The canister is running the code hash it claims to be running.
2. The canister's code hash history since its creation is fully auditable.
3. The canister's code hash is either not going to change in XX days, or scheduled to change at some point.

As a corollary, if the canister's code hash history is verified to match source and the source is trusted to behave correctly, then the canister's current state (data stored in there) and behavior (as prescribed by code) can be trusted. So another canister can safely rely on this one.

Of course it still depends on the developer to use LaunchTrail correctly and hence prove themselves to the public. But at least this is entirely possible on IC today, and developers should start doing it!

-------------------------

Gekctek | 2022-06-01 23:34:29 UTC | #10

I would just like to say I LOVE the Internet Computer community.
Everyone is working on something.
Essentially everything is open source.
There is always something new to learn

This is great. Thank you

-------------------------

diegop | 2022-06-02 01:34:43 UTC | #11

[quote="Gekctek, post:10, topic:13370"]
I would just like to say I LOVE the Internet Computer community.
[/quote]

I could not agree more!

-------------------------

domwoe | 2022-06-21 10:55:47 UTC | #12

Just came across this discussion which is very much related: https://github.com/dfinity/interface-spec/pull/19

-------------------------

