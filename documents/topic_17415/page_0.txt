samuelburri | 2022-12-15 15:28:56 UTC | #1

This is an overdue roadmap update. The last one was published in [September](https://forum.dfinity.org/t/update-on-the-ic-roadmap-august-september-2022-summary/15251). Meanwhile, we are close to the end of the year. We are proud of some recent releases that included major features that kept us busy for many months. We will also provide an update of the 2022 highlights in today's [public global R&D](https://internetcomputer.org/live-sessions#Global-RandD-Meeting-December-2022).

We stick to the categories/domains used in the past roadmap updates and highlight the top items that we work on or have released recently.

![roadmap-december-updated1|690x387](upload://9uYAIKR9UMWUggvdAQ9KzXDnLsV.jpeg)

**Core protocol:** Every now and then, community members voice concerns that the foundation invests too little into the core protocol. I want to point out that the percentages on top of the roadmap columns indicate the share of the team working in the respective area. You can see that by far the biggest effort keeps going into the protocol.

* **Code Bitcoin:** In the beginning of December, we finally [launched](https://twitter.com/dfinity/status/1598708279529578496?s=20&t=WZJZWj25sGu6-Cd079k8xw) the [Bitcoin integration](https://internetcomputer.org/bitcoin-integration). This milestone completed a longer beta phase. We are excited to see various developer teams building on top of this technology. You may also want to check out the dedicated [dashboard](https://dashboard.internetcomputer.org/bitcoin).
* **Chain-Key Signatures:** A key building block for the Bitcoin integration is tECDSA that allows canisters to create ECDSA signatures in a decentralized fashion. tECDSA, often branded as Chain-key Signatures, is a powerful capability beyond the Bitcoin integration. For example, @domwoe and Ben Lynn demonstrated a [Uniswap frontend running on the IC combined with an ECDSA signing canister](https://youtu.be/J62LilJsFlQ?t=3183). During the Bitcoin integration beta phase, we further improved tECDSA security by implementing a [rotation of IDKG encryption keys](https://youtu.be/NcXUQGMk8D4?t=1095).
* **48 GiB stable memory:** canisters can now make use of 48 GiB stable memory. Previously, we aimed for 32 GiB and communicated accordingly. But we determined that 48 GiB is possible. This is a 10x bump from the 4 GiB where we started at the beginning of this year.
* **Higher-replication subnets:** As [demonstrated in November](https://youtu.be/ZDPIR_fpgXk?t=2043) by @dsarlis, developers will soon be able to choose the replication factor of the subnet on which their dapp is deployed. Higher replication means stronger security guarantees but also burns more cycles. Lower replication subnets that consist only of a few nodes will follow in the future.
* **Inter-canister query calls (ICQC):** is a functionality asked for by many developers. @ulan  [presented the technical tradeoffs related to ICQC and a rough roadmap towards full ICQC support](https://youtu.be/J62LilJsFlQ?t=1433) in September.
* **100k canisters per subnet:** Currently an IC subnet may slow down if the number of canisters running on it goes beyond 50k. The exciting growth of some dapps hosted on the IC increases the need to address such bottlenecks.
* **Support larger WASM modules:** The relatively small size of WASM modules supported by canisters today prevents developers from building dapps depending on large libraries. We plan to lift this restriction soon.
* **Safe canister upgrades:** Currently, canisters cannot be upgraded safely without stopping them to ensure there are no outstanding calls. By introducing named callbacks, canisters can be upgraded without stopping, ensuring that canisters can always be upgraded.
* **On-chain encryption:** As explained by @ais  and @gregory, this feature will [bring end-to-end encryption (confidentiality) to user data stored on the IC](https://www.youtube.com/watch?v=baM6jHnmMq8&list=PLuhDt1vhGcrez-f3I0_hvbwGZHZzkZ7Ng&index=4).

**Boundary**

* **Custom domains:** as demonstrated by many developers, e.g. [dscvr.one](https://dscvr.one/), dapps can be reached by custom domains. However, so far, they rely on web2 infrastructure. With this feature, it will be possible to manage your dapp’s custom domains through a canister hosted on the IC.
* **Certified headers:** Today, the IC only supports certification of response bodies (e.g., static assets). This feature introduces flexible certification that allows the dapp developer to specify the header fields and assets to be certified, a prerequisite for better caching.
* **WebSockets** provide a [bi-directional communication channel between the client (dapp frontend) and the canister (dapp backend)](https://youtu.be/ZDPIR_fpgXk?t=1123). We started to prototype a WebSocket solution in collaboration with [Psychedelic](https://psychedelic.ooo/). This enables canisters to push notifications directly to the client and to dynamically update dapp content.

**System utils / dapps**

* **NNS FE dapp:** The GIX team has been working hard to extend the NNS FE dapp for the SNS. In parallel, the dapp underwent [multiple design and user experience improvements](https://forum.dfinity.org/t/nns-dapp-ui-design-upgrade-and-public-proposals/16801). We are happy to see how the community appreciates these changes and are committed to further improve the experience.
* **ckBTC:** As [demoed in November](https://youtu.be/ZDPIR_fpgXk?t=2340) by @Manu and Leo, the team is currently building the infrastructure for an ICRC-1 compatible token, called ckBTC, that “chain-key-wraps” Bitcoin. We aim to launch in January.
* **ICRC-2 token standard:** As first ICRC-1 ledgers see the light of the day, the ledger and token [working group](https://forum.dfinity.org/t/ledger-tokenization-working-group-update/15298) continues to define ICRC-2. [ICRC-2 is an extension of ICRC-1](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2) and specifies a way for an account owner to delegate token transfers to a third party on the owner's behalf.

**Governance**

* **SNS-1:** The launch of the first SNS-decentralized dapp, [SNS-1](https://dscvr.one/p/sns1), was a major milestone with huge contributions from many teams. Even though this launch was only considered an experiment, we often called it a “[dress rehearsal](https://youtu.be/NcXUQGMk8D4?t=2068)”, it attracted a lot of community members to participate and created a lot of excitement. We also faced some problems and discovered limitations, which @lara  summarized in an extensive [lessons learned](https://forum.dfinity.org/t/sns-1-lessons-learned/17230) post.
* **Community proposals:** We are aware that we didn’t give enough attention to some adopted community governance proposals. For the next few weeks, we anticipate to still be fairly busy with the SNS but we up-prioritized these proposals and plan to tackle them next.

**DX**

* **dfx shared replica:** The SDK team releases a stream of dfx updates, packed with quality-of-life improvements. For example, the [IC emulator included with dfx is now available system wide](https://youtu.be/J62LilJsFlQ?t=2483).
* **Motoko VS Code extension:** We improved the VS Code extension for Motoko as [demoed](https://www.youtube.com/watch?v=NcXUQGMk8D4&t=459s) by @rvanasa in October. There are many additional [Motoko improvements](https://forum.dfinity.org/t/highlight-post-new-motoko-features-in-dfx-0-12/17027) waiting for Motoko devs to be discovered.
* **Motoko garbage collection:** Building on [Deterministic Time Slicing (DTS)](https://forum.dfinity.org/t/deterministic-time-slicing/10635/3) released earlier this year, the Motoko team is working on a [generational garbage collector (GC)](https://forum.dfinity.org/t/generational-gc-on-playground-and-new-async-await-weekly-motoko-updates/17270), which will reduce cycle costs and allow heavier computations.
* **Documentation:** We are working on a general overhaul of the developer documentation. We start from the very beginning with a significantly simplified “hello world” and plan to work our way up to more complicated tutorials and explanations.

**Platform Engineering**

* **Gen2 hardware:** The [generic Gen2 replica node hardware was published](https://wiki.internetcomputer.org/wiki/Node_provider_hardware#Gen_2) a few weeks ago. Since then, the node team has tested numerous compatible machines by different vendors as [regularly reported](https://forum.dfinity.org/t/draft-motion-proposal-new-hardware-specification-and-remuneration-for-ic-nodes/14202/35) by @garym.
* **NP remuneration and self-declaration:** the new [node provider (NP) onboarding process](https://wiki.internetcomputer.org/wiki/Node_Provider_Onboarding) was published in spring. In the past weeks, @SvenF discussed with the community two NNS proposals that we plan to submit in the next few days. (1) The [self-declaration process for NPs](https://forum.dfinity.org/t/proposal-for-node-provider-self-declaration/16501) will ask future NPs to share more details about their identity and intent with the community. (2) The updated [NP remuneration model](https://forum.dfinity.org/t/the-state-and-direction-of-decentralization-nodes-on-the-internet-computer/9170/128?u=samuelburri) will account for the increased cost of the Gen2 hardware.
* **New node providers:** We are happy to see that community members decide to become node providers and that their [NNS proposals are being accepted](https://dashboard.internetcomputer.org/proposal/91624). We know about a dozen of nodes that are being racked and stacked, [following the onboarding process described on the Wiki](https://wiki.internetcomputer.org/wiki/Node_Provider_Onboarding). These nodes will join the network in the near future. Many more new node providers have expressed interest to join the network and are talking to hardware vendors to get quotes.

A very busy year comes to an end. The list above is already fairly long and it’s only the tip of the iceberg. May more team members should have been mentioned but the forum only allows me to mention 10 per post. A big “thank you” to all the community members for their active engagement and feedback. Have a great holiday and we look forward to continuing building the IC and its ecosystem with you in 2023.

*Updated on 2022-12-15 adding "safe canister upgrades" that was missing in the initial post.*

-------------------------

levi | 2022-12-14 22:26:36 UTC | #2

Hey @samuelburri ! Can we put the name-callbacks feature on here? @Manu can you help? Name-callbacks are a requirement for creating frameworks based on standards that anyone can implement. Name-callbacks are a requirement for canister upgrades without stopping, and for a canister to self-upgrade. A lack of the named-callbacks has led to the unfortunate use of the “one-way calls” hack where most users of it are unaware of its workings. The icp ledger once had to remove it’s notify method because of the security vulnerability that a canister could prevent the ledger from upgrading by withholding a callback/response, and the ledger needed to stop before upgrading because there was no named-callbacks.

-------------------------

Zane | 2022-12-14 23:04:06 UTC | #3

Yes please, the possibility of a new token standard based on reliable notifications would by itself be enough to have named callbacks on the roadmap.

-------------------------

Manu | 2022-12-15 09:20:18 UTC | #4

Thanks for flagging @levi, I think the omission of safe canister upgrades might have just been a mistake and it's still on the roadmap. I'll double check and follow up here.

Edit: confirmed that safe canister upgrades are still on the roadmap but accidentally didn't make it into the overview that Sam shared. This will be updated!

-------------------------

levi | 2022-12-15 09:34:44 UTC | #5

Awesome! Thanks @Manu 🙏.

-------------------------

samuelburri | 2022-12-15 11:16:53 UTC | #6

@levi @Manu thanks for pointing that out. I missed to add "safe canister upgrades" when I created the initial post. It's added now.

-------------------------

jzxchiang | 2022-12-21 06:57:08 UTC | #7

I think one conversation that may be worth starting is whether we will have subnets that support various hardware accelerators, namely GPUs.

There seems to be a growing trend of _heterogeneous computing_, where special categories of software are offloaded to an accelerator for processing. Prominent examples include machine learning and cryptography. My feeling is that this trend will only accelerate in this decade.

What will it take to support GPUs in Gen3 node hardware? I know it's a bit premature, but I think there is value in thinking through what the economics (and technical effort) of that would look like.

-------------------------

