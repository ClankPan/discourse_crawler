mikhail-turilin | 2022-07-27 18:08:40 UTC | #1

Hey everyone,

We are talking with the Motoko team about their future roadmap. What are your top suggestions for the language?

Just to give you a starting point here are some of the topics we are discussing (you don't have to limit yourself to those):
- **Syntax**. Making language syntax more expressive and pleasant to code. Like supporting some functional programming primitives or making it easier to serialize data structures.
- **Libs.** Improve the library ecosystem by improving packaging tools (vessel) or enable libraries written in Rust.
- **Testing.** Better unit/integration testing support. Code linters.
- **Motoko playground** improvements to make it a more serious development tool.
- **Tools.** Better formatters. Better IDE support. REPL for Motoko.
- **Debugging** using the local replica.
- **IC support.** Improving support for core IC features, like the support for BTC / ECDSA / extended memory / certified queries.
- **Performance** / execution efficiency improvements, like GC optimizations. Getting closer to Rust in performance.

Please, let me know what you think! 

Best regards,
Mikhail Turilin
Product Manager 
DFINITY foundation

-------------------------

borovan | 2022-07-27 18:39:29 UTC | #2

VSCode plugin that automagically handles imports!

-------------------------

jzxchiang | 2022-07-28 05:35:38 UTC | #3

The biggest one for me is a plan for stable memory moving forward (see [here](https://forum.dfinity.org/t/motoko-stable-memory-in-2022/10433)). For example, should `ExperimentalStableMemory` be kept as is (and graduated from being "experimental" to "production-ready")? Can we have stable data structures like the ones developed in Rust for the BTC integration, where they transparently store data in stable memory directly (without going through stable variables)?

And a couple random ones:

* spread syntax to construct a record from an existing record
* type inference in generic functions to avoid having to specify `Trie.mapFilter<..., ..., ...>` every time I call it, e.g.
* language server doesn't check files if they aren't imported from the main Motoko file
* add IC management canister interface as a Motoko type in the stdlib
* operator overloading for classes (as a side note, how is equality even defined for records and arrays? the docs are not too clear)

-------------------------

Gekctek | 2022-07-28 05:40:45 UTC | #4

I dont think that performance and testing arent as important for the immediate future.
If someone needs full functionality, performance and other advanced features they will use Rust.
Motoko should be easy to use with tooling and debugging. That way new people can more easily onboard and have more people be able to build up library support for the ecosystem

The being said, my personal pain points are:

* Better non-canister/dfx (library code) support for things like VSCode Language Server and building. Currently I use a dummy canister for dfx support and also use wasmtime/vessel for building
* Something like `?` operator rust has to avoid tedious switch statements everywhere to propagate errors/nulls. https://doc.rust-lang.org/rust-by-example/error/result/enter_question_mark.html
* VSCode debugging
* Numbers a annoying to constantly change between Nat8,16,32,64,Nat. The only way I can find to convert between 2, like 8-16, is to convert to Nat, then down to another, like Nat8 -> Nat -> Nat16
* Better library/vessel package management support

-------------------------

peterparker | 2022-07-28 14:17:03 UTC | #5

- a sort of [Prettier](https://prettier.io/) code formatter to format the code automatically. To make collaboration (review) easier and code looks always good

- agree on a "better library/vessel package manager". For the best and the worst, something as dead simple as `npm i that_package`

-------------------------

ZenVoich | 2022-07-29 05:47:37 UTC | #6

[quote="peterparker, post:5, topic:14573"]
* agree on a “better library/vessel package manager”. For the best and the worst, something as dead simple as `npm i that_package`
[/quote]

There is MOPS https://mops.one package manager for Motoko. With mops you can install package as simple as `mops i that_package` :slight_smile:

-------------------------

peterparker | 2022-07-29 06:03:16 UTC | #7

Cool. It's open source?

-------------------------

ZenVoich | 2022-07-29 06:04:55 UTC | #8

Yes - https://github.com/ZenVoich/mops

-------------------------

peterparker | 2022-07-29 07:07:10 UTC | #9

Cool 👍

Starred and you may have received a PR that adds the repo url on your dapp 😉

-------------------------

ZenVoich | 2022-07-29 07:37:11 UTC | #10

Great! I'll take a look in a couple of days

-------------------------

Zane | 2022-08-01 19:25:56 UTC | #11

[quote="Gekctek, post:4, topic:14573"]
Something like `?` operator rust has to avoid tedious switch statements everywhere to propagate errors/nulls.
[/quote]

Isn't this already possible by using do ? blocks? But yeah I agree there could be a bit more syntactic sugar around optionals, something like *Optional1?(#err1).Optional2?(#err2).Optional3?(#err3).value* would help a lot.

Rust's trait system to write polymorphic code/do object composition and macros/reflection would also be nice to have.

-------------------------

torates | 2022-08-02 00:30:05 UTC | #12

I think Motoko could benefit of more detailed error handling.

But the biggest improvement would be a higher level of IC support. Motoko its the native language of the IC and I feel it should not be limited to constant workarounds to access core IC features by us devs.

-------------------------

jzxchiang | 2022-08-02 05:43:38 UTC | #13

> I feel it should not be limited to constant workarounds to access core IC features by us devs.

I agree. It took months for `inspect_message` to be available on Motoko, as one example. All NNS canisters are written in Rust, so in that sense Motoko doesn't feel like a first-class citizen in terms of feature and library support. Another [example](https://forum.dfinity.org/t/stablebtreemap-in-canisters/14210) is the `StableBTreeMap` data structure that was developed for the BTC integration, and is available only in Rust.

-------------------------

mido | 2022-08-02 21:37:59 UTC | #14

I really like the idea, that you want to listen to the Community, big respect from myself <3. 

idea: Can we get more Tutorials for beginners?, maybe something like, "From 0 To Hero" so that everyone can try and learning.

Thank you very much.

-------------------------

icme | 2022-08-03 04:25:06 UTC | #15

First off, I agree with pretty much everything you already have up there.

[quote="mikhail-turilin, post:1, topic:14573"]
**Testing.** Better unit/integration testing support. Code linters.
[/quote]

In addition to this, it would be really neat to be able to mock imported libraries and actor APIs in order to actually **unit** test, instead of testing much more than just the logic of a particular function or worse, requiring an integration test when the ability to mock an inter-canister call would suffice and make developer's lives so much simpler. 

[quote="mikhail-turilin, post:1, topic:14573"]
IC support.
[/quote]

We currently have methods for accessing [canister RTS statistics](https://github.com/dfinity/motoko/blob/master/src/prelude/prim.mo#L61) such as `Prim.rts_heap_size()`, but from my understanding some of these stats are an approximation. Specifically, that the `rts_heap_size` measurement becomes less accurate and over-estimates the heap size if the developer has a data structure that takes advantage of sharing (multiple pointers or indices to the same data).

I don't know what type of effort or lift this would take, but it would be great to see the team explore how accurate a `Prim.rts_heap_size()` **V2** could get while maintaining low cycle cost efficiencies, as well as overall encapsulating this `Prim.rts_xxx` tooling into a higher level, more stable developer facing library that would allow a canister be able to efficiently inspect and receive real time stats on its utilization.

-------------------------

hugepuppy | 2022-08-03 17:56:41 UTC | #16

* easy in-line / lambda functions
* library for asymmetric encryption

-------------------------

skilesare | 2022-08-05 21:04:25 UTC | #17

Hey all...quick survey here...what is your most requested syntactic sugar for Motko?

[quote="hugepuppy, post:16, topic:14573"]
easy in-line / lambda functions
[/quote]

What would that look like?

-------------------------

hankbrigham | 2022-08-07 14:17:38 UTC | #19

Template strings / string interpolation would be really nice

-------------------------

hankbrigham | 2022-08-07 14:21:17 UTC | #20

How about a way to utilize environment variables?

Currently if I want to make an inter-canister call I have to include the canister's uuid, which is a very manual process and not sustainable from a devops perspective.

let admin = actor "rrkah-fqaaa-aaaaa-aaaaq-cai": AdminActor;

It would be great if I could load that canister id from my computer's environment rather than having to swap that every time I deploy to mainnet or my local replica. If this is possible now or I'm doing this incorrectly please let me know!

-------------------------

hugepuppy | 2022-08-07 15:03:21 UTC | #21

I'm thinking like the following:
```
(x : Nat) : Nat => x +1
```

-------------------------

skilesare | 2022-08-07 16:13:49 UTC | #22

How would you use that?  Would you assign it to a variable?

Is it different than this that you can do today?

‘’’
let z = (x : Nat) : Nat {x+1};

‘’’

-------------------------

hugepuppy | 2022-08-07 21:55:24 UTC | #23

Yeah I guess that's pretty much the same as what's already available. I just have noticed that when I pass functions as parameters it gets pretty messy. So assigning them to a variable would probably solve the problem.

-------------------------

skilesare | 2022-08-07 22:04:43 UTC | #24

I do like the distinction between -> as the type identifier and then => as the implementation

The below looks kind of nice.

```
let z : (x: Nat) -> Nat = (x : Nat) : Nat => x+1;
```

-------------------------

tomijaga | 2022-08-07 22:33:24 UTC | #25

A way to ignore the return value of a group of functions without adding the ignore keyword to each line. I think something similar to this image would be suitable, where you could ignore the return values of a whole code block.
![Screen Shot 2022-08-04 at 6.24.50 PM|690x264](upload://zw6q3FDEtEC9aTZLdzQjsCcSxbM.png)

I was able bundle the return values into one and use a single ignore key because the values where boolean
![Screen Shot 2022-08-04 at 6.36.15 PM|690x245](upload://AwzuLsp1rIIs76pjU7niULYR3Li.png)

Otherwise you would have to use the ignore key for every line.
![Screen Shot 2022-08-04 at 6.33.53 PM|690x243](upload://qlXDrC7RQMEARAQlBfu7T5tb31T.png)

-------------------------

Zane | 2022-08-07 22:46:57 UTC | #26

I still haven't quite figured why ignore is even a thing, like I understand why they added it, but I'm not sure it brings more benefits than annoyances, but I might be missing something.

-------------------------

skilesare | 2022-08-08 00:21:01 UTC | #27

Yeah….I’d love a primer on what it is useful for.

-------------------------

Severin | 2022-08-08 09:58:43 UTC | #28

[quote="Zane, post:26, topic:14573, full:true"]
I still haven’t quite figured why `ignore` is even a thing, like I understand why they added it, but I’m not sure it brings more benefits than annoyances, but I might be missing something.
[/quote]

[quote="skilesare, post:27, topic:14573, full:true"]
Yeah….I’d love a primer on what it is useful for.
[/quote]

I just used it in my work on the cycles faucet. The faucet hands out cycles wallets, and these wallets require some canisters that are created somewhere. Previously, this was all done outside of the faucet in a script that called `dfx ledger` to create the canisters. Now, whenever I `register_codes` to the faucet and want to create `create_n` canisters to the queue, it runs this:
``` motoko
while (create_n > 0) {
    ignore create_canister_to_reserve();
    create_n := create_n - 1;
};
```
The `ignore` just dispatches an async call, but doesn't wait for a response to arrive. This means that I get a response from the `register_codes` call without having to wait for all those canisters to be created, and all the `create_canister_to_reserve` calls run in parallel (I don't await the result of one to start the next one).

IDK if there's a better way to do it (I'm new to Motoko), but that's the way I made it work with.

-------------------------

skilesare | 2022-08-08 12:04:12 UTC | #29

[quote="Severin, post:28, topic:14573"]
The `ignore` just dispatches an async call, but doesn’t wait for a response to arrive. This means that I get a response from the `register_codes` call without having to wait for all those canisters to be created, and all the `create_canister_to_reserve` calls run in parallel (I don’t await the result of one to start the next one).
[/quote]

Ahh...I see.  I always just call it something like

```

let create_future = create_canister_to_reserve();

```

...and then it gets discarded after the block.  It would be great to know from @rossberg if one version has performance advantages over the other.

-------------------------

Severin | 2022-08-08 12:09:39 UTC | #30

From the documentation about `ignore` [here](https://internetcomputer.org/docs/current/developer-docs/build/languages/motoko/language-manual#ignore):

```
Then the semantics is equivalent to let _ = <exp> : Any.
```

So I guess technically our versions are equivalent, but maybe the `ignore` approach makes a bit easier for the compiler (or reader) to figure out that the result can be discarded.

-------------------------

infu | 2022-08-08 12:12:46 UTC | #31

syntactic sugar for type changes when upgrading

-------------------------

rossberg | 2022-08-08 12:31:25 UTC | #32

So far, an `ignore` expression is literally compiled as the desugaring shown in the docs, so there is no difference other than brevity and clarity.

-------------------------

brady | 2022-08-10 18:06:33 UTC | #33

**syntax:**
golang style for loops
more concise syntax for pattern matching & error handling

**other:**
keep improving documentation
framework for unit testing
better package manager
vscode plugins

-------------------------

peterparker | 2022-08-11 10:23:21 UTC | #34

[quote="peterparker, post:5, topic:14573"]
a sort of [Prettier](https://prettier.io/) code formatter to format the code automatically. To make collaboration (review) easier and code looks always good
[/quote]

in addition, if it can auto organize import that would be neat too.

In almost all my frontend projects I use [Prettier](https://prettier.io/) and [prettier-plugin-organize-imports](https://github.com/simonhaenisch/prettier-plugin-organize-imports). Would be cool if I could have something similar for my Motoko projects and code.

-------------------------

peterparker | 2022-08-26 20:09:54 UTC | #35

[quote="peterparker, post:5, topic:14573"]
a sort of [Prettier](https://prettier.io/) code formatter to format the code automatically. To make collaboration (review) easier and code looks always good
[/quote]

nvm it has been solved 🤩

https://twitter.com/kylpeacock/status/1563256664819507201

https://github.com/dfinity/prettier-plugin-motoko#readme

-------------------------

jzxchiang | 2022-08-27 04:29:44 UTC | #36

Whoa didn't know this existed...

-------------------------

peterparker | 2022-08-27 05:09:28 UTC | #37

It's brand new I think 🚀

-------------------------

matthewhammer | 2022-09-01 16:43:17 UTC | #38

Regarding `ignore`:

Q1: Why do we have it?

A1: If you didn't have `ignore`, you'd be writing `let _ = ` in its place, and as @rossberg mentioned, they are equivalent from the viewpoint of the compiler.

Q2: Why do we have to write either of these, and why can't we just ignore return values without extra syntax?

A2: Well, our type system needs more details, and perhaps if the type system made more distinctions other than `()` vs non-`()` return types, we could.  For example, Rust has a more nuanced view of return results' types:

https://doc.rust-lang.org/stable/nightly-rustc/rustc_lint/unused/static.UNUSED_MUST_USE.html

So in Rust world, the `Result` type would require an `ignore`-like syntax, but other primitive types may not.

Q3: Is that more nuanced approach an improvement?

A3 (my own at least): Perhaps!  Especially for data structure APIs that may return extra success information that users do not always need (as in the graph API mentioned by @tomijaga above)

[quote="torates, post:12, topic:14573"]
Motoko its the native language of the IC and I feel it should not be limited to constant workarounds to access core IC features by us devs.
[/quote]

Which IC features are the most challenging or most needed?

-------------------------

rossberg | 2022-09-01 18:09:47 UTC | #39

[quote="matthewhammer, post:38, topic:14573"]
Q2: Why do we have to write either of these, and why can’t we just ignore return values without extra syntax?
[/quote]

The short answer is: both to protect against accident and to make the intent explicit. Forgetting to use a result is a fairly common error, and neither compiler nor human readers would otherwise know if it was intended.

As a secondary effect, it is also meant to encourage less error-prone API design, i.e., avoid functions that both have non-trivial side effects _and_ return results. If your interfaces are designed with that in mind (similar to the query vs update distinction), then you won't need `ignore`.

-------------------------

matthewhammer | 2022-09-01 21:10:34 UTC | #40

[quote="rossberg, post:39, topic:14573"]
As a secondary effect, it is also meant to encourage less error-prone API design, i.e., avoid functions that both have non-trivial side effects *and* return results.
[/quote]

An impractical stance, but I admire the principles. :slight_smile: 

I think the Rust compiler has a good compromise: It complains for `Result` types that could contain unhandled errors, but does not go so far as to assume that *every* result is worthy of being this pedantic.

BTW, for a data structure that replaces old stuff with new stuff, it's natural to return the old stuff as an optional result.  For instance, `Trie.replace` in `base`.  So, that's a good situation for the more relaxed Rust conventions in Motoko, and something that I would appreciate myself, personally.

-------------------------

jzxchiang | 2022-09-02 05:32:21 UTC | #41

Unrelated, but one of the biggest headaches I had when initially developing on Motoko was dealing with the whole functional vs imperative data structure dilemma. I don't want to think about it, but I have to if I want to work with `stable` variables, which most developers invariably will want to. The syntax is really quite different between the two.

Could you ever envision a world where imperative data structures could be stored in `stable` variables? Is there no theoretical way for the Motoko compiler to implicitly convert an imperative data structure to a functional one?

-------------------------

rossberg | 2022-09-02 09:35:55 UTC | #42

@jzxchiang, actually, imperative data structures are compatible with stable variables. What isn't are _object-oriented_ abstractions, because of the functions embedded in the data. But that is an independent dimension, as objects can be either imperative or functional.

To wit, here is a toy example of a counter object that, although functional, cannot be put in a stable var:
```
class Counter(x : Nat) {
  public func get() : Nat { x };
  public func inc() : Counter { Counter(x + 1) };
};

stable var c : Counter = Counter(0);   // ERROR
```
On the other hand, here is an imperative counter type that you can store in a stable var just fine:
```
type Counter = {var count : Nat};
func Counter(x : Nat) : Counter { {var count = x} };
func get(c : Counter) : Nat { c.count };
func inc(c : Counter) { c.count := c.count + 1 };

stable var c : Counter = Counter(0);  // ok
```

Of course, that doesn't eliminate the dilemma, but it is rather between choosing object-oriented and "procedural" interfaces.

-------------------------

rossberg | 2022-09-02 07:53:38 UTC | #43

[quote="matthewhammer, post:40, topic:14573"]
but does not go so far as to assume that *every* result is worthy of being this pedantic.
[/quote]

Right, but once you loosen it like that, the intent is no longer visible in the code. It might or might not be an accident.

In my experience (e.g. in OCaml), the strict rule is good documentation and uncovers many mistakes early on. The occasional ignore in cases like replace is a fair deal in exchange. But like option types, it's one of these features that you have to learn to "hold right". When you are working against it (perhaps out of habit) you can end up with repetitive strain injury.

-------------------------

miadey | 2022-09-02 17:00:37 UTC | #44

I don't want to be deciphering the documentation.

What I need :slight_smile: 
https://laravel.com/docs/9.x/controllers

What I get :frowning: 
https://internetcomputer.org/docs/current/references/motoko-ref/List

Also, Add a "New developper start here" button with Dr Angela Yu uDemy Web3 video featuring ICP and Motoko. Would have save me a ton of hours searching for basic info as a newbie.

-------------------------

skilesare | 2022-09-02 17:06:42 UTC | #45

We 100% should have a https://embed.smartcontracts.org/ example for each of the functions in base.

-------------------------

rvanasa | 2022-09-04 04:09:28 UTC | #46

That's a really good idea...

I'll build an MVP to show the team, and we'll see what happens from there.

-------------------------

tomijaga | 2022-11-08 02:50:37 UTC | #47

It'd be cool if we could omit optional record fields.

![Screen Shot 2022-11-07 at 9.47.56 PM|559x188](upload://5BzZ0gWyzm7vDZ6Tp85kbnF0PbJ.png)

-------------------------

icme | 2023-01-23 20:44:44 UTC | #48

That's ends up creating a totally different type and reworking the meaning of an optional type into something more JavaScripty though, right?

You can always narrow

```
  type OptionalArgsABC = { a : ?Text; b : ?Text; c : ?Text };
  let optionals : OptionalArgsABC = { a = ?"maybe"; b = ?"is"; c = null };

  type OptionalArgsAB = { a : ?Text; b : ?Text };
  let { a; b }: OptionalArgsAB = optionals;
```

@tomijaga What's the common use case you have in mind?

-------------------------

ZhenyaUsenko | 2023-01-23 22:02:01 UTC | #49

@icme Lets say we have a method that accepts parameters as the first argument
```
public shared func myMethod(params: {
  paramA: ?Nat;
  paramB: ?Nat;
  paramC: ?Nat;
  paramD: ?Nat;
  paramE: ?Nat;
})
```
All of the parameters are optional. I want to call this method, but I only need to pass **paramA**

```
myMethod({ paramA = ?1; paramB = null; paramC = null; paramD = null; paramE = null });
```

Not very convenient as I still need to specify all of the parameters even if I don't need them. With the latest features, though, I can do this

```
let defaultParams = { paramA = null; paramB = null; paramC = null; paramD = null; paramE = null };

myMethod({ defaultParams with paramA = ?1 });
```

A lot better but still requires **defaultParams** to be declared on the side of a caller

-------------------------

icme | 2023-01-23 22:18:19 UTC | #50

[quote="ZhenyaUsenko, post:49, topic:14573"]
```
public shared func myMethod(params: {
  paramA: ?Nat;
  paramB: ?Nat;
  paramC: ?Nat;
  paramD: ?Nat;
  paramE: ?Nat;
})
```
[/quote]

I could see this as a good class constructor scenario as well.

Record extension syntax works for now, but at least that is explicitly saying what the defaults are - it sounds like with this feature you’d like the defaults to implicitly be null.

-------------------------

nolyoi | 2023-01-24 00:01:24 UTC | #51

some better vscode tooling would be really nice

-------------------------

tomijaga | 2023-01-24 05:21:00 UTC | #52

@ZhenyaUsenko explained the use case I had in mind.

[quote="icme, post:50, topic:14573"]
it sounds like with this feature you’d like the defaults to implicitly be null.
[/quote]
Yes, that is right.
I was thinking about the user experience when calling a function that takes a record with many optional fields.
An example would be initializing the ICRC-1 token, where some fields are optional and have default values set, so they don't need to be specified by the user.
This was the Initial type, but I updated it later to the one below because there were too many optional types.
```javascript
        let token = Token.Token({
            ... 
            min_burn_amount: ?Nat;
            minting_account: ?Account; 
            permitted_drift: ?Nat;
            transaction_window: ?Nat; 
            burned_tokens: ?Nat 
        });
```
I moved the fields least likely to be specified by the user into an optional record called  `advanced_settings`.
```javascript
        let token = Token.Token({
            ... 
            min_burn_amount: Nat;
            minting_account: ?Account; 
            advanced_settings: ?{
                permitted_drift: Nat;
                transaction_window: Nat; 
                burned_tokens: Nat;
            };
        });
```

Also, it seems like motoko supports this functionality for serializing partial records encoded in candid.
https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=965353562

-------------------------

tomijaga | 2023-01-24 06:05:41 UTC | #53

Hey @nolyoi, what types of tools are you referring to?

Also, are you aware of the vscode extension the dfinity team is working on?
https://forum.dfinity.org/t/we-heard-you-motoko-vs-code-extension-improvements/15933

-------------------------

Mitch | 2023-01-25 01:59:21 UTC | #54

Auto generated CLI args. For example you write this function:

```
public shared func registerUser(handle : Text, displayName : Text) : () {
...user registration
return
}
```
Then we could run a dfx command to generate an example command line argument,  `dfx canister call Canister1 registerUser --example-cli-arg`, which could return:

`dfx canister call Canister1 registerUser '("handle" : text, "displayName" : text)'`

-------------------------

chenyan | 2023-01-25 05:06:35 UTC | #55

This is actually supported. You can use `dfx canister call Canister1 registerUser --random ''` to generate a random value of that type. You can even customize the random value, e.g., use `--random '{text = Some "name"}'` to generate a random name. The spec of the random config is here: https://github.com/dfinity/candid/blob/master/tools/didc/config.md#random-config

-------------------------

icaten | 2023-01-25 17:43:20 UTC | #56

The Motokodoc is great. Is it possible to have auto-generation/snippet hotkey that fills out each part of a function's signature as a template? And then an option to hide all unless on hover/specifically selected? 

Might be worth autolinking to the corresponding comments in the Candid file as well.

-------------------------

rvanasa | 2023-02-02 23:22:05 UTC | #57

Great idea! I'll add some doc comment snippets right now. 

Here's the source file in case anyone is interested in contributing code snippets to the VS Code extension and Motoko Playground:

https://github.com/dfinity/node-motoko/blob/main/contrib/snippets.json

-------------------------

skilesare | 2023-02-03 13:32:29 UTC | #58

I have no clue what this is....what does this do and how do you use it?

-------------------------

haida | 2023-02-09 03:11:05 UTC | #59

Avoid await when multi-container cascading queries, multi-level query waiting gives the front-end user a very poor experience.
For example container A, B
The queryinfo function of the B container is called in the A container


```
// ideal situation
     public shared query func moreInfo() : async Text {
             B. queryinfo();
     };

// Current situation
     public shared func moreInfo() : async Text {
             await B. queryinfo();
     }

```
Is there a current or planned solution for this?

-------------------------

icaten | 2023-02-09 08:46:31 UTC | #60

Idk if that is the accepted term, but it's the equivalent of Javadoc.

Originally I learned about it while looking through the invoice canister code: https://github.com/dfinity/examples/blob/kyle/invoice-canister-cleanup/motoko/invoice-canister/src/invoice/main.mo#L416

```
  // #region get_account_identifier
  /*
    * Get Caller Identifier
    * Allows a caller to the accountIdentifier for a given principal
    * for a specific token.
    */
  public query func get_account_identifier(args : T.GetAccountIdentifierArgs) : async T.GetAccountIdentifierResult {
```
It will make it so hovering over these fields will show a tooltip that looks like (similar method but with additional formatting used): 
![motokodoc_example|690x249](upload://yHDRvPaZQXuO5f9Z2VPSTESguJj.png)

I found it very useful when first working with the code, and as not as known as Motoko is every bit helps. To add such a comment, start with a `/**` and end with a `*/` where the ending `*/` must be directly above the field declaration (no vertical line spaces). In the snippet above the opening double asterisk can be separated, but I found that the beginning * of each line of comment will also appear in the tooltip. 

Syntax I know of so far:
 - the Markdown linking syntax works "["desc"]"(url) 
 - trigger a new line with a `\` as the very last character of the current line (no additional white space)
 - terminating a line with double white space will also trigger a new line
 - Double asterisk for bold
 - Single asterisk or underscore for italic 
 - code enclosed as back tick marks ` 
 - The @ sign did something once but I don't remember what specifically triggered it
 
If the Motokodoc is one line, I personally like to use: 
`/**** <One Line Comment Title Text> ***/`
to emphasis it as a header.

I've been using 80 character spaces before making a new line (since the tool tip won't autowrap), but maybe the modern max-width convention is 120 chars?

One thing to note is that the `\` new line character isn't escaped when `moc doc` is used (at least for html output) which is another task to do. 

Finally I mentioned that if it would be possible it might be useful to link one field's Motokodoc into another, so for instance "non-trivial" `Result.Result` types could automatically show their `Success` and `Error` types if (also defined) and linked. Or equally useful would be a way to import the corresponding did field's comments, since that's supposed to be the source of truth about a canister for external callers, and much of the info would likely be the same.

-------------------------

icaten | 2023-02-09 08:49:26 UTC | #61

Maybe there is a way to do this already, but how about "pretty print" for `debug_show` output in the console--specifically formatting for nested types (like records in variants in records, etc)?

-------------------------

rossberg | 2023-02-09 08:50:49 UTC | #62

[quote="haida, post:59, topic:14573"]
Avoid await when multi-container cascading queries, multi-level query waiting gives the front-end user a very poor experience.
[/quote]

Cascading message replies cause delays that add up, that is true. But that is inherent in the message-based architecture of the IC, not something Motoko can change.

-------------------------

skilesare | 2023-02-09 16:09:51 UTC | #63

My understanding is that composite queries are already in the local replica but we don't have a direct way to access in Motoko yet.  Maybe I misunderstand that concept, but I think this would make this kind of access easier...at least on the same subnet.

-------------------------

icaten | 2023-02-09 23:25:53 UTC | #64

Would it possible to add an optional (likely necessarily synchronous) callback for any declared shared method that would be "reasonably guaranteed to be enqueued/called" (except for in cases when a canister is out of cycles for instance) immediately after that method returns? 

Something like the cleanup function that exists for React's useEffect hook.

-------------------------

Seb | 2023-02-10 09:47:09 UTC | #65

What would it take to abstract way `Iter` and have an easier syntax when using `for` loops?

Being able to write something like this
```motoko
for (let i = 0; i < 5; i++) {
// Do something
}
```
Of course, the traditional way using an `Iter` would still work. It would just be an abstraction, to get a similar feeling to other languages like Python/JavaScript. 

Context: I'm asking this because during the Bootcamp I want students to be able to use `for` loops on their first day without having to introduce a more advanced concept like `Iter`.

-------------------------

rossberg | 2023-02-10 12:03:50 UTC | #66

@Seb, C-style for loops are among the most error-prone loop constructs in existence (and discouraged in many modern style guides). Motoko very intentionally does not include them. I don't think using `for (i in range(0, 5))` requires understanding the iterator protocol. For beginners not handicapped by prior Python/JS exposure, I would hope it's actually easier. ;)

-------------------------

skilesare | 2023-02-15 14:38:32 UTC | #67

As a worked example: https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app

Some of this syntax isn't intuitive, but I'd think this was pretty simple for a beginner.  Honestly, I'd forgotten that range was even in Iter.

Sometimes I wish base was just always there and I could just do base.iter.range or base.buffer or base.nat32.toNat.  Maybe the compiler could get smart enough to back fill what is actually used?

Edit:  I messed up the paste and the example is lost to history...it was basically

```

import {range} from "mo:base/Iter";

....and then later....

for(thisItem in range(1,5){
  x += thisItem;
};
```

-------------------------

nolyoi | 2023-02-10 22:18:59 UTC | #68

would it be possible to add some kind of pipe operator syntax similar to Elixir? eg:

```
String.split(String.upcase("Elixir rocks"))
```
```
"Elixir rocks" |> String.upcase() |> String.split()
["ELIXIR", "ROCKS"]
```

https://elixirschool.com/en/lessons/basics/pipe_operator

-------------------------

Gekctek | 2023-03-03 17:08:21 UTC | #69

Wrote down some thoughts
https://forum.dfinity.org/t/motoko-wishlist/18804

-------------------------

kpeacock | 2023-04-24 21:06:45 UTC | #70

I'm happy to share that we are getting started on interpolation! The language team also brought up the challenges with stringification, which we also want to tackle, but won't be in the immediate scope.

-------------------------

icaten | 2023-08-28 18:35:23 UTC | #71

Something similar came up in the context of cleaning up side effects (iirc specifically guaranteeing releasing a lock at "the end" of the function), or at least I was reminded by that when reading this article:

https://overreacted.io/algebraic-effects-for-the-rest-of-us/

Maybe something that could be used to improve Motoko?

-------------------------

