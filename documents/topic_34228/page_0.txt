jamesbeadle | 2024-08-16 19:41:56 UTC | #1

I need to update the code in one of the canisters controlled by my SNS backend.

I have the management library setup, i just need to know how i include the wasm_module, arg and sender canister version... 

```

    public func updateManagerCanisterWasm() : async () {
      let IC : Management.Management = actor (Environment.Default);
      let updateResult = await (
        IC.install_code(
          {
            mode = #upgrade(null);
            canister_id = Principal.fromText("ljxqq-4iaaa-aaaal-qjd4a-cai");
            wasm_module = wasm_module;
            arg = Blob;
            sender_canister_version = ?Nat64;
          }),
      );
    };
```

The canister file is defined as an actor class and I'm not sure how I get it to be a wasm module for upgrade since I've only ever just created a new actor class as a canister and not upgraded one.

Any help appreciated.
Thanks,
James

-------------------------

jamesbeadle | 2024-08-16 19:47:28 UTC | #2

Looking in here:

https://github.com/Web3NL/motoko-book/blob/main/src/common-internet-computer-canisters/_mo/ic-management/wasm.mo

Seems as if I need to just convert my actor class to a [Nat8], is there a tool to do this anywhere?

-------------------------

Mitch | 2024-08-17 20:46:54 UTC | #3

Can you send the wasm as an argument to `updateManagerCanisterWasm`, then handle the formatting locally? If so this thread may help you through:
https://forum.dfinity.org/t/wasm-chunking-for-install-code-method/21944

-------------------------

jamesbeadle | 2024-08-18 03:04:10 UTC | #4

So the wasm isn’t created since the canister isn’t defined in dfx.json, it’s created dynamically by the backend.

I did have a look through the solution in that thread a few times, I’m surprise this would be the way, obviously it’s a fudge, surely there is a proper way to handle this core part of the workflow, updating dynamically created canisters?

-------------------------

jamesbeadle | 2024-08-18 10:42:33 UTC | #5

I’m currently thinking the way to go is to create a new project for building dynamic canisters, add the actor class I want, build it using dfx.json then use David’s solution mentioned [here](https://forum.dfinity.org/t/install-code-easiest-way-to-convert-a-wasm-module-to-nat8/18919/2?u=jamesbeadle).

-------------------------

jamesbeadle | 2024-08-19 06:01:52 UTC | #6

If someone could confirm this is the way to go that would be great.

I don’t want to lose all the managers selections in the canister with guess on how to update it.

-------------------------

aterga | 2024-08-19 09:43:34 UTC | #7

Hi @jamesbeadle, let me try to help. 

This is the ID of the target canister you want to upgrade, right? [ljxqq-4iaaa-aaaal-qjd4a-cai](https://dashboard.internetcomputer.org/canister/ljxqq-4iaaa-aaaal-qjd4a-cai)

I can see that it's controlled by [bboqb-jiaaa-aaaal-qb6ea-cai](https://dashboard.internetcomputer.org/canister/bboqb-jiaaa-aaaal-qb6ea-cai) (OpenFPL Dapp Canister) that in turn is controlled by the SNS (which can be seen from the fact that its controller is the [OpenFPL SNS Root canister](https://dashboard.internetcomputer.org/canister/gyito-zyaaa-aaaaq-aacpq-cai)).

To upgrade `ljxqq-4iaaa-aaaal-qjd4a-cai`, you should do the following: 
1. Obtain a new WASM that you would like to upgrade your target canister to. This can be done by compiling the Motoko source code into a WASM module. To that end, either use [dfx build](https://internetcomputer.org/docs/current/developer-docs/developer-tools/cli-tools/cli-reference/dfx-build) (which requires a project file defined under dfx.json) or run `moc` directly, e.g.: `$(dfx cache show)/moc main.mo`
2. Since your target canister isn't directly controlled by the DAO, you would need to take one of the following approaches: 
   * A. Make the DAO directly control the target canister by adding SNS Root (`gyito-zyaaa-aaaaq-aacpq-cai`) as its controller. This most likely requires implementing some new (but rather simple) functionality for the current controller of your target, namely `bboqb-jiaaa-aaaal-qb6ea-cai`, making it call the API for changing canister's settings (just once would be enough). This can be done by dispatching a timer via IC-CDK.
   * B. Extend the functionality of the current controller (`bboqb-jiaaa-aaaal-qb6ea-cai`) to enable *it* to upgrade your target canister. This seems like much more involved depending on design details.

I would recommend taking approach A.

-------------------------

jamesbeadle | 2024-08-19 12:38:41 UTC | #8

[quote="aterga, post:7, topic:34228"]
$(dfx cache show)/moc
[/quote]

Hi,

Thanks for getting back to me, I'm fine with approach A, however building the canister with dfx cache show results in an error when referencing the mo:base libraries

![image|690x109](upload://cIpJSc0g7m2yIO15sdyXzMdERx2.png)

-------------------------

skilesare | 2024-08-19 13:05:06 UTC | #9

What happens if your wasm is more than 2MB in size gziped?  Is that supported via SNS upgrades?

-------------------------

skilesare | 2024-08-19 13:11:48 UTC | #10

Not sure if this is helpful, but I had to use this to upgrade via an SNS:

```
export PROPOSAL_NEURON_ID="ca0c08391b8977845642e14932a763b531ad2d0b90b2cb93645140ac685c7467"
export IC_URL="http://localhost:8000"
export WASM_PATH="/Users/afat/Dropbox/development/origyn/gitlab/snsgovapp/.dfx/local/canisters/sns_gov_app2/sns_gov_app2.wasm"
echo $WASM_PATH
./bin/quill sns make-upgrade-canister-proposal --target-canister-id "a3shf-5eaaa-aaaaa-qaafa-cai" --wasm-path $WASM_PATH $PROPOSAL_NEURON_ID --canister-ids-file sns_canister_ids.json --pem-file ~/.config/dfx/identity/default/identity.pem  > message.json 

./bin/quill --insecure-local-dev-mode send message.json
```

Now if you have an SNS canister itself that is upgrading you have a couple different paths. If it it is an actor class you can use the system upgrade stuff in motoko:

https://github.com/icdevsorg/axon/blob/bf3a5db46dccbddf5e19f73d4d6dfaaba07c064b/src/Axon/Axon.mo#L314

Not obviously this only works if you have the actor referenced in your "parent" canister and you have upgraded that canister with the new code using the quill stuff above.  And also you need to know the list of canisters...but if you have all of that you can set up a timer to loop through your list and upgrade one a round until they are all upgraded.

The second would be to do an upgrade via the management canister from the controlling canister. 
 Motoko code that also supports larger than 2MB wasm: https://github.com/ORIGYN-SA/large_canister_deployer_internal

-------------------------

jamesbeadle | 2024-08-19 13:22:20 UTC | #11

Ok so I am able to get a list of canisters from my main backend and my manager canister I would like to upgrade does have a reference to the backend canister.

Is is an actor class:

https://github.com/jamesbeadle/OpenFPL/blob/master/src/OpenFPL_backend/canister_definitions/manager-canister.mo

If you see from the project solution the actor class is referenced by the parent class as it uses it to create the canister. You can see the manager canister being created on line 1413 here:
https://github.com/jamesbeadle/OpenFPL/blob/master/src/OpenFPL_backend/composites/manager-composite.mo

-------------------------

skilesare | 2024-08-19 13:52:30 UTC | #12

[quote="jamesbeadle, post:11, topic:34228"]
https://github.com/jamesbeadle/OpenFPL/blob/master/src/OpenFPL_backend/canister_definitions/manager-canister.mo
[/quote]

If ManagerComposite is your parent and MangementCanister is your child then it should be as easy as looping through your

```
for(thisItem in uniqueManagerCanisterIds.vals()){
 let oldManagement = actor(Principal.toText())
 let newManagement = await (system ManagerCanister._ManagerCanister)(#upgrade oldManagement)();
}
```

That should upgrade all of them provided the list is complete.

Note: You MAY want to stop them all first and then start them after the upgrade depending on what kind of processes you have running on those canisters and if they make untrusted calls to other canisters or not.  I think the general best practice is to stop them.

-------------------------

jamesbeadle | 2024-08-19 14:02:49 UTC | #13

Legend I’m going to try this now, I’ll stop them thanks

-------------------------

jamesbeadle | 2024-08-19 14:21:26 UTC | #14

[quote="skilesare, post:12, topic:34228"]
```
for(thisItem in uniqueManagerCanisterIds.vals()){
 let oldManagement = actor(Principal.toText())
 let newManagement = await (system ManagerCanister._ManagerCanister)(#upgrade oldManagement)();
}
```
[/quote]

So I'm going to run this via proposal which will be triggered on the postUpgrade call of my backend:

```

    private func postUpgradeCallback() : async (){
      let managerCanisterIds = seasonManager.getManagerCanisterIds();

      let IC : Management.Management = actor (Environment.Default);
      for(canisterId in Iter.fromArray(managerCanisterIds)){
        
        await IC.stop_canister({ canister_id = Principal.fromText(canisterId); }); 
        
        let oldManagement = actor (canisterId) : actor {};
        let _ = await (system ManagerCanister._ManagerCanister)(#upgrade oldManagement)();
        
        await IC.start_canister({ canister_id = Principal.fromText(canisterId); }); 
      };
      await seasonManager.snapshotFantasyTeams();
      
}

```
Finger crossed all the managers are still there after!

```

-------------------------

skilesare | 2024-08-19 14:24:04 UTC | #15

Well...I'd certainly test it locally first. :joy:

-------------------------

jamesbeadle | 2024-08-19 14:30:36 UTC | #16

What's that?

JK, will do.

-------------------------

jamesbeadle | 2024-08-19 16:59:16 UTC | #17

Ok it all seems to work locally, upgrades the dynamically created canisters without losing anything:

![image|690x364](upload://dNSspX0jSulOU3OD6X2lIpIVcZ3.jpeg)

It looks like you're going to be spot on sir. I should be able to get everything back up now.

-------------------------

