Jesse | 2023-02-28 18:29:15 UTC | #1

I'm trying to dynamically install canister code to UI canisters. First of all, is there a mechanism for doing such a thing? I‚Äôm attempting to do so using the following function

```
ic.install_code({
            arg : Blob, 
            wasm_module : Blob,
            mode = #upgrade;
            canister_id : Principal;
        });
```

If this is the proper function to use, what value must I insert as the `arg` value when the canister that I'm installing the code to is a frontend/UI canister?

-------------------------

Jesse | 2023-03-01 22:29:00 UTC | #2

@peterparker , might you know the answer to this one? you were spot on with my last [post](https://forum.dfinity.org/t/need-help-implementing-install-code-canister-method/18313?u=jesse) regarding the `install_code()` method.

-------------------------

peterparker | 2023-03-02 06:11:33 UTC | #3

[quote="Jesse, post:1, topic:18746"]
install canister code to UI canisters
[/quote]

do you mean replace the code of a [certified asset canister](Do you mean `install_code` to a certified asset canister (https://github.com/dfinity/sdk/tree/master/src/canisters/frontend)?) provided and deployed with dfx?

not an expert, notably because I wrote and use my own custom asset canister in Juno, but I would say yes, you can `install_code` as you can `install_code` in any canister on the IC as long as you are the controller

that said, assuming you want to preserve the canister features, `install_code` replace the all code so if you want to replace its code, then you will have to use the wasm of the certified canister you have compiled but maybe your goal is to replace the wasm code with something totally different?

regarding args, as far as I can see from this piece of code https://github.com/dfinity/sdk/blob/b4a337f8ce25042894983fe47b2e3241b35cd453/src/canisters/frontend/ic-certified-assets/src/lib.rs#L374, I would say it needs no args - i.e. empty. @Severin can confirm or unconfirm this.

-------------------------

Jesse | 2023-03-02 07:20:58 UTC | #4

[quote="peterparker, post:3, topic:18746"]
do you mean replace the code of a [certified asset canister](Do you mean `install_code` to a certified asset canister ([sdk/src/canisters/frontend at master ¬∑ dfinity/sdk ¬∑ GitHub ](https://github.com/dfinity/sdk/tree/master/src/canisters/frontend))?) provided and deployed with dfx?
[/quote]

I believe the UI canister I‚Äôm referring to corresponds to the `ic-frontend-canister` file. I‚Äôm talking about the canister that you get as a result of deploying the frontend code of a project that was created using `dfx new`. Does that make sense?

-------------------------

peterparker | 2023-03-02 07:23:35 UTC | #5

[quote="Jesse, post:4, topic:18746"]
I believe the UI canister I‚Äôm referring to corresponds to the `ic-frontend-canister` file. I‚Äôm talking about the canister that you get as a result of deploying the frontend code of a project that was created using `dfx new`. Does that make sense?
[/quote]

Thanks for clearing that. In that case we were indeed speaking about the same canister.

-------------------------

Jesse | 2023-03-02 07:23:47 UTC | #6

[quote="peterparker, post:3, topic:18746"]
, I would say it needs no args - i.e. empty.
[/quote]

So i would do the following? 
```

ic.install_code({ 
            wasm_module : Blob,
            mode = #upgrade;
            canister_id : Principal;
        });

```

Just omit the `arg` property?

-------------------------

peterparker | 2023-03-02 07:29:37 UTC | #7

I think `arg` is mandatory so I meant an empty blob like `arg = Blob.fromArray([])` or something but would wait for Severin feedback.

-------------------------

Jesse | 2023-03-02 07:48:55 UTC | #8

[quote="peterparker, post:3, topic:18746"]
that said, assuming you want to preserve the canister features, `install_code` replace the all code so if you want to replace its code, then you will have to use the wasm of the certified canister you have compiled but maybe your goal is to replace the wasm code with something totally different?
[/quote]

I‚Äôm pretty sure i want to preserve the canister features. I‚Äôm not familiar with what goes on when the frontend canister code is compiled and deployed, but I‚Äôll describe the context to you so that you can derive the goal. 

Context: im creating an app that is designed to have many instances deployed to the IC. The app has a frontend canister and backend canister. So each instance of the app that is deployed to the IC will have its own frontend canister (and consequently, it‚Äôs own URL) and it‚Äôs own backend canister. 

I need a way to deliver upgrades to these many different instances of the app that are deployed to the IC. For that, I‚Äôll be using the `install_code` method to programmatically deliver the upgrades to these many different instances. When calling  `install_code` on the frontend canisters, i need to do so in a manner that does not change the canister ids that are specified within the `canister_ids.json ` file. The reason being is that each instance of the app will have canister Id‚Äôs that are unique to that particular instance. Those canister id‚Äôs are specified in the `canister_ids.json` file, therefore, that file needs to be unchanged, while the rest of the code is still delivered to the frontend canister. Will i be able to achieve this using the `install_code` method to deliver the wasm modules to the UI canister‚Äôs? Or will the  `install_code` cause the canister ids specified in the `canister_ids.json` file to be overwritten?

-------------------------

peterparker | 2023-03-02 08:01:11 UTC | #9

`install_code` replaces the wasm code of a canister without changing it's id.

e.g. if I install a wasm-v0.0.2 in a canister ID 123 that runs wasm-v0.0.1, after install code the ID is still 123 and the code is wasm-v0.0.2

so in that sense, yes installing code does not impact the canister ids.

now, if I understand what you are trying to achieve, I think there are two distinct upgrades for your target goal

1. upgrade the wasm of your frontend asset canister to stay up-to-date with the last enhancement and fix of the certified asset cansiter provided through dfx

2. update the app (JS, HTML, etc) that exists in memory of your various canister instances to propagate the last enhancement and fix that your are developing

The 1. can be achieved with `install_code` by providing a newer version of the wasm and the 2., I think, can be achieved by replicating the upload process achieved by `dfx deploy`.

I don't think 2. can be achieved by install_code out-of-the-box with that particular canister because the assets of your app aren't part of the wasm that is uploaded.

Does that help and answer your question a bit?

-------------------------

peterparker | 2023-03-02 08:08:53 UTC | #10

Personal note: for that type of architecture with multiple instances of the same apps, don't know your project but, spontaneously, I would personaly go for a solution where I would develop my own canister that does both backend and frontend - i.e. not two canisters but one.

Time consuming to develop but worth it at the end. In Papyrs I got that two canisters approach and retrospectively I think it was an incorrect decision. In Juno I went for one canister - satellite - that does everything. 

Of course it depends of the project, scalability etc. but for mine, never been so happy that way.

Just my two spontaneous cents for what is worth üòÅ.

-------------------------

Jesse | 2023-03-02 08:26:10 UTC | #11

[quote="peterparker, post:9, topic:18746"]
I don‚Äôt think 2. can be achieved by install_code out-of-the-box with that particular canister because the assets of your app aren‚Äôt part of the wasm that is uploaded.

Does that help and answer your question a bit?
[/quote]

This does help, however i have 1 clarifying question: 

If i make the updates to the JSX and HTML code of my frontend, and then call `dfx build` on the now-updated frontend code, I‚Äôll get a .wasm file as a result. Are you saying that *that* .wasm file (if installed to the other instances of frontend canisters using the `install_code` method) Would **not** result in the other frontend canisters receiving the updated JSX and HTML? But it **would** result in them receiving the other updates you describe in the 1.?

-------------------------

peterparker | 2023-03-02 09:13:52 UTC | #12

[quote="Jesse, post:11, topic:18746"]
Are you saying that *that* .wasm file (if installed to the other instances of frontend canisters using the `install_code` method) Would **not** result in the other frontend canisters receiving the updated JSX and HTML?
[/quote]

Exactly. The wasm file does not contain the JSX and HTML. These outcome are uploaded afterwards.

`dfx deploy` a frontend canister does two things my understanding:

1. upgrade wasm code
2. upload the JS and HTML

Makes sense?

-------------------------

Jesse | 2023-03-02 09:39:35 UTC | #13

Yes that makes sense. It‚Äôs unfortunate news for me because now i have no idea how to programmatically propagate updates of the JSX/HTML code to the frontend canister instances. Is there any documentation regarding the process by which the JSX/HTML code is uploaded to the canisters? That‚Äôd be a helpful starting point in this new researching arc that i must now embark on üò≠

-------------------------

Severin | 2023-03-02 10:03:33 UTC | #14

[quote="Jesse, post:13, topic:18746"]
Is there any documentation regarding the process by which the JSX/HTML code is uploaded to the canisters?
[/quote]

Not really documentation, but the entry point is [`ic-asset::sync`](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-asset/src/sync.rs#L51). If you want to run this standalone (without `dfx deploy`ing wasm), you'd use [`icx-asset sync`](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/icx-asset/src/commands/sync.rs#L13).

The reason for using this install-and-only-after-upload approach is that if we baked all frontend code into the wasm, we'd hit size limits instantly - `install_code` accepts gzipped input, but still only ~2MB. Most frontends are larger than that, so we had to choose a different approach.

I see three ways forward for you: 1) Either write your own asset canister that bakes assets into it, the same way the NNS frontend dapp does it (and you'd be limited to the 2MB total asset size). 2) Or you can write your own syncing logic in a canister so that your canisters can automatically push/pull new frontend versions. 3) Or you manually use `ic-asset::sync` from your own computer, which would require access to all of your service's canisters

-------------------------

Jesse | 2023-03-02 10:59:36 UTC | #15

[quote="Severin, post:14, topic:18746"]
2) Or you can write your own syncing logic in a canister so that your canisters can automatically push/pull new frontend versions.
[/quote]

This option sounds like the best option, but what‚Äôs stopping this option from encountering the same 2MB issue? I‚Äôm assuming some chunking would have to be written into the logic then, right? Option 1 prohibitively limited and option 3 wouldn‚Äôt be possible since i wouldn‚Äôt be the canister controller of the other canisters that are due to receive the updates. 

Now, what i need to do is understand the syncing logic and then implement it. Is there any reason why i wouldn‚Äôt be able to implement the syncing logic in Motoko? I don‚Äôt know rust at all. If necessary, I‚Äôll bite the bullet and learn it, but would rather avoid adding such a task to my To-do list.

-------------------------

peterparker | 2023-03-02 11:13:45 UTC | #16

The easiest solution is probably to have all your frontend canister within your `dfx.json` (that's possible right @severin) and create a bash script that does following pseudo-code:

```
for each canister ids of type asset declared in your dfx.json
    dfx deploy the_canister_name --network ic etc.
end
```

not the prettiest, not the most sustanable, not the cheapest, not the more secure - i.e. what if one update fails and the other not -, not the more engineered things but, can do the job

-------------------------

Severin | 2023-03-02 11:30:52 UTC | #17

The syncing/chunking logic isn't that bad. Here's the [canister interface](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/assets.did) and the [code where data gets processed](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/state_machine.rs).

I don't see any reason why it would be harder in Motoko than in Rust. In the end it's just chunking blobs and making inter canister calls.

You'll probably have to learn to read Rust if you want to copy the syncing logic, but that's not too bad. If you have any questions on specific implementation details feel free to ask here.

-------------------------

Jesse | 2023-03-16 15:37:14 UTC | #18

[quote="Severin, post:17, topic:18746"]
The syncing/chunking logic isn‚Äôt that bad. Here‚Äôs the [canister interface ](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/assets.did)
[/quote]

@Severin , I noticed that the ```commit_batch``` method (along with several others) isn't an asynchronous method. I mean to make it so that a motoko canister can call the ```commit_batch``` method of an assets canister in order to perform the upgrade for the ```JSX/HTML``` code within the asset canister. The fact that the ```commit_batch``` method isn't an async method implies that this method cannot be called from another canister, correct?

-------------------------

Severin | 2023-03-16 15:46:58 UTC | #19

Every function in any canister interface is an async method. [Here's](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-asset/src/asset_canister/batch.rs#L57-L72) how it gets called in the code that uploads assets via dfx.

If you're referring to [this function declaration](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/lib.rs#L229), then you should not think of it as 'not async', but instead as an update function because it has `#[candid_method(update)]`, which makes it callable from the outside, no matter if it is `async fn` or `fn`

-------------------------

Jesse | 2023-03-16 15:52:33 UTC | #20

Thats perfect. Thanks a bunch!

-------------------------

Jesse | 2023-03-20 09:45:39 UTC | #21

Did a bit more digging. Each day it all makes a bit more sense. Now I'm getting ready to make the helper methods that will assemble the ```operations``` that will ultimately be put into the ```commit_batch``` method as an argument. I put together a game plan for programmatically updating the assets of front end canisters. I'd like to run it by you all here before I write all the code. I'll be using the ```list({})``` method (within the asset canister)  and ```type BatchOperationKind ``` below, I've listed the function signature and the type definition: 
```
list ({}) -> ([{
                key: Key;
                content_type: Text;
                encodings: [{
                content_encoding: Text;
                sha256: ? Blob; // sha256 of entire asset encoding, calculated by dfx and passed in SetAssetContentArguments
                length: Nat; // Size of this encoding's blob. Calculated when uploading assets.
                modified: Time;
            }];
        }])
```



The ```BatchOperationKind``` is defined like so:
```
type BatchOperationKind = variant {
  CreateAsset: CreateAssetArguments;
  SetAssetContent: SetAssetContentArguments;

  UnsetAssetContent: UnsetAssetContentArguments;
  DeleteAsset: DeleteAssetArguments;

  Clear: ClearArguments;
};
```
```
type CreateAssetArguments = record {
  key: Key;
  content_type: text;
  max_age: opt nat64;
  headers: opt vec HeaderField;
  enable_aliasing: opt bool;
  allow_raw_access: opt bool;
};
```
```
type SetAssetContentArguments = record {
  key: Key;
  content_encoding: text;
  chunk_ids: vec ChunkId;
  sha256: opt blob;
};
```
```
type UnsetAssetContentArguments = record {
  key: Key;
  content_encoding: text;
};
```
```
type DeleteAssetArguments = record {
  key: Key;
};
```
```
type ClearArguments = record {};
```


The plan is as follows: 

1.) Maintain a ```master``` copy of the asset canister. this asset canister will be within my control and I will be updating it via the DFX SDK command.

2.) create a ```store``` canister. the ```store``` canister will also be a controller of the ```master``` copy asset canister, thus authorizing it to retrieve the assets data that the ```master``` copy holds. I'll be using the ```list({})``` method (within the ```master``` copy of the asset canister) to retrieve the assets data. Once the ```store``` canister retrieves the updated assets data from the ```master``` copy, it will then store that data within its stable memory. There, the updated assets data can be retrieved by any canister via a shared method.

3.) Create a ```manager``` canister for each of the asset canisters that are due to receive updates. The ```manager``` canisters will each be a controller of their own respective ```assets``` canister. The ```manager``` canister will be programmed to: first, pull the assets data from the ```store``` canister, then manipulate the data so that it conforms to the ```type BatchOperationKind```, and finally commit those updates to their respective ```assets``` canisters via the ```commit_batch``` method that exists within the ```assets``` canisters. 


is there any reason why this wouldn't work? particularly with respect to step 3? is there any reason why i wouldn't be able to use the data that I get from the ```list({})``` method's result in order to produce the ```type CreateAssetArguments``` or the ```type SetAssetContentArguments```? my worry is that ```sha256: opt blob``` may be created such that the canister for which the sha256 hash was created is the only canister that is able to interpret/decrypt it, and as a result, using it to update the assets of another canister would cause issues. @peterparker, @Severin

-------------------------

Severin | 2023-03-20 10:59:16 UTC | #22

Sounds reasonable to me. I'd like to propose another functionality for your `manager` canister: It should be able to update the asset canister's wasm as well, not just the content. Unless of course you have that functionality already through some other mechanism. We regularly release new asset canister versions and you may want to have the new functionality available as well.

You told me that you won't have that much data, but I'd like to recommend you test your `manager` canister with substantially more data. E.g. like in the test added [here](https://github.com/dfinity/sdk/pull/3000/files). That way you can make sure you don't have any mistakes with chunking larger assets in case they would ever appear in your app.

[quote="Jesse, post:21, topic:18746"]
my worry is that `sha256: opt blob` may be created such that the canister for which the sha256 hash was created is the only canister that is able to interpret/decrypt it, and as a result, using it to update the assets of another canister would cause issues
[/quote]

No need to worry. The `sha256` is not used in the asset canister itself. It's there for the service worker so that it can verify the content it received. And we can't calculate the hash for every asset in the asset canister itself because we'd run into execution limits, therefore it's supplied during the upload as part of the asset.

-------------------------

Jesse | 2023-03-20 16:10:10 UTC | #23

[quote="Severin, post:22, topic:18746"]
You told me that you won‚Äôt have that much data, but I‚Äôd like to recommend you test your `manager` canister with substantially more data. E.g. like in the test added [here ](https://github.com/dfinity/sdk/pull/3000/files). That way you can make sure you don‚Äôt have any mistakes with chunking larger assets in case they would ever appear in your app.
[/quote]

This raises another question. What does the list({}) return when one of the asset‚Äôs data is chunked? I assume the list({}) function would only return data for the first chunk of each asset and to get the rest of the data for each asset, you‚Äôd have to use the get_chunk() method. Is that a proper assumption? 

What prevents the vector returned by the list({}) function from being larger than 2MB?

-------------------------

Severin | 2023-03-21 09:26:05 UTC | #24

Side note: the argument for `list` should be `(record {})`, not `({})` in proper candid syntax in case you want to use dfx to call it manually

Anyways... I wasn't sure, so I just tested it out. If you want to test yourself, follow theses steps:

``` bash
dfx new hello
cd hello
dfx start --clean --background
dfx deploy
for a in $(seq 1 400); do dd if=/dev/urandom of=src/hello_frontend/assets/large-asset-$a.bin bs=2097152 count=1; done
dfx deploy
```

then you're ready to call `dfx canister call hello_frontend list '(record {})'`

More note to self than responding to your question: Turns out `list` does not serve the asset's content, only the sha and the length of the content. You can then fetch individual chunks with a call like `dfx canister call hello_frontend get_chunk '(record {key = "/large-asset-2.bin"; content_encoding = "identity"; index = 1; })'`. You can get `key` and `encoding` from the call to `list`, and the index you just count up from 0 until you received all bytes or until the next one traps with `chunk index out of bounds`.

If it has to be chunked it won't tell you anything special. From [this line](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-asset/src/batch_upload/plumbing.rs#L23) I would assume that any asset with a length larger than 1_900_000 bytes will be chunked.

[quote="Jesse, post:23, topic:18746"]
What prevents the vector returned by the list({}) function from being larger than 2MB?
[/quote]

Nothing. `list` itself does not have chunking - this will be a problem at some point in the future. But since it does not serve the asset content itself, it's unlikely that you would hit the limit - so far I haven't heard of anyone hitting that problem. With some guesstimating and back-of-the-napkin math I'd expect any project with <6.500 assets to be safe, if you have exclusively assets that don't get gzipped as well (non `.txt`, `.js`, `.html` according to [this](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-asset/src/batch_upload/plumbing.rs#L325)) then you can even go up to 13.000 and still be on the safe side.

-------------------------

Jesse | 2023-03-21 10:03:03 UTC | #25

@Severin i appreciate the help üôèüèæüôèüèæüôèüèæ. I‚Äôll get to work

-------------------------

Jesse | 2023-04-16 17:49:54 UTC | #26

ok @Severin . I'm in the final stretch of getting my dapp to dynamically upgrade the asset canisters. I'm attempting to programmatically upgrade the wasm module of an assets canister. I'm getting the following error message when I do so:

```
Call was rejected:
  Request ID: 19106010cdeae865d8216386d484a14fbda3740af1a6f04f4e7db92683b1fb6b
  Reject code: 4
  Reject text: Unauthorized access. Caller is not the owner.
```
i noticed that the assets canister has a `grant_permission` method and a  `take_ownership` method. I assume these will be necessary for resolving the error message I'm getting. 

I used the `grant_permission` method to grant `#ManagePermissions` to the canister that will be delivering the upgrade to the asset canister's wasm module. Then, from within the canister that will be delivering the upgrade to the asset canister, I attempted to call the `take_ownership` method of the asset canister, but I'm still getting the error message above. Is there something I'm missing?

-------------------------

Severin | 2023-04-17 08:11:02 UTC | #27

[quote="Jesse, post:26, topic:18746"]
programmatically upgrade the wasm module of an assets canister
[/quote]

This requires the caller to be a controller of the canister, which is also what the error message tries to say (but I think the wording is not that great). This refers to the list of principals you can see if you do `dfx canister info <id>`

[quote="Jesse, post:26, topic:18746"]
i noticed that the assets canister has a `grant_permission` method and a `take_ownership` method. I assume these will be necessary for resolving the error message I‚Äôm getting.
[/quote]
No, these functions are for WASM-level (you can also call it 'user space' or 'application space') defined roles/permissions. They are not powerful enough to install WASM. For that you need the protocol-level control over the canister

-------------------------

Jesse | 2023-04-17 10:29:43 UTC | #28

The canister that is attempting to install the wasm to the asset canister is indeed a controller of the asset canister. It still renders that error message though.

-------------------------

Severin | 2023-04-17 11:22:09 UTC | #29

I don't think that error comes from any DFINITY-produced code. I can't find the string `Caller is not the owner` at all in any of our code bases. Reject code 4 usually means that the canister rejected the message, usually in a guard method. Is there a chance you are running into a guard somewhere in `pre_upgrade`, `post_upgrade`, or `init`?

-------------------------

Jesse | 2023-04-17 19:41:33 UTC | #30

You were correct. It was something on my end that needed to be debugged. My last question (i hope) is pertaining to the batch operation below: 

```
public type CreateAssetArguments = {
        key: Key;
        content_type: Text;
        max_age: ? Nat64;
        headers: ? [HeaderField];
        enable_aliasing: ? Bool;
        allow_raw_access: ? Bool;
    };
```

what do I set the `enable_aliasing` variable to?

every other property, I was able to retrieve using the asset canister methods, but `enable_aliasing` appears to be the only property that I'm unable to find.

I‚Äôm not getting any errors, but the after updating the assets canister programmatically, the web page displays a blank background. I‚Äôm wondering if the `enable_aliasing` property has anything to do with that

-------------------------

Severin | 2023-04-18 07:09:05 UTC | #31

I would simply always set `enable_aliasing` to true. I don't see any case where it would break something, and I haven't heard of anyone actually disabling it

For debugging, I'd have a look at your network requests if nothing shows up in the console. I like to use the [ic-inspector](https://chrome.google.com/webstore/detail/ic-inspector/meaadkenfkhjakkkdapaallimhbdofck) extension to look at the actual requests to `http_request`. It's very hard to say what's going wrong from your description.

-------------------------

Jesse | 2023-04-25 16:23:51 UTC | #33

[quote="Jesse, post:32, topic:18746"]
I‚Äôm using the ic-inspector tool that you recommended. I‚Äôm comparing the network requests from the UI that failing to load the assets properly with network requests from a working UI canister that was created with the same configurations. I see that the requests are identical with the exception of one extra request that the failing UI is performing. the name of that extra request is ‚Äúhttp_request_streaming_callback‚Äù. whatever is causing this request to fire is probably the reason why the assets aren‚Äôt loading properly.
[/quote]

@Severin disregard this. I compared the requests from the non-working copy with those of a working copy. The issue has something to do with the some of the requests being missing. I'm noticing that all of the requests for assets that are .png file types are missing. Would you have any clue as to what could be causing requests of this type to not fire?

-------------------------

Severin | 2023-04-26 06:51:26 UTC | #34

If the request isn't firing at all then it sounds to me like a frontend issue. Do you have any idea what could stop the code from reaching the line where the request is made?

Since you mention streaming calls could it be that some of your assets are too large (>1900000 bytes IIRC) for a single message? Streaming support is mediocre at best and only works over `raw.icp0.io` for now

-------------------------

Jesse | 2023-04-26 18:20:51 UTC | #35

my /index.js asset is larger than 1900000 bytes. However, this request `http_request_streaming_callback` is executing with no problem in both the working example and in the non-working example. I ended up removing the .png files from the canister to reduce the size of the /index.js asset. Now the /index.js asset consists only one chunk, but that hasn't resolved the issue. 

the screenshot below is the error message that I'm getting in the console. Does this mean anything to you?

![Screenshot 2023-04-26 at 12.35.01 PM|690x72](upload://1TkMCrmkKpvlFmznGjBZroDYea1.png)

also, for the assets that are gzip'ed, do I need to unzip them before uploading them into the canister?

another suspicion i have is with the content_encodings. I suspect I may need to regenerated them as opposed to using the content encodings from the master copy.

-------------------------

Jesse | 2023-05-01 10:17:15 UTC | #36

@Severin , i was able to get it working successfully. The issue was that i wasn‚Äôt uploading all of the data chunks the asset canister.

-------------------------

krunalshoppiko | 2023-06-21 08:14:07 UTC | #37

hey Jesse can you share uploading code example?  i'm also working on this canister.

-------------------------

Jesse | 2023-06-21 14:31:29 UTC | #38

It was a whole process getting this stuff to work. I could upload the code, but I'm sure it make little sense. I'd be willing to jump on a call to explain it to you.

-------------------------

