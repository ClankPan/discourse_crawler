Motokoder | 2021-12-04 20:03:21 UTC | #1

I have read that there is no ternary operator for Motoko (https://forum.dfinity.org/t/ternary-operator/1792), but is there a null coalescing operator or a more succinct expression than an inline if statement?

Examples:
- https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator
- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/operators/null-coalescing-operator

-------------------------

timo | 2021-12-04 22:18:30 UTC | #2

There is a `get` function for option types documented here: https://smartcontracts.org/docs/base-libraries/Option.html

So `get(x, d)` where x is an option type returns x if x is not null or d if x is null. That is what you wanted, or?

-------------------------

Motokoder | 2021-12-04 20:53:24 UTC | #3

Yes, that is exactly what I was looking for! Thank you!

-------------------------

rossberg | 2021-12-06 07:35:59 UTC | #4

[quote="Motokoder, post:1, topic:9326"]
I have read that there is no ternary operator for Motoko ([Ternary operator ](https://forum.dfinity.org/t/ternary-operator/1792))
[/quote]

Please read that thread to the enf, @kritzcreek corrected the response: there *is* a "ternary operator" in Motoko, but it's simply called `if`:
```
let a = if b {1} else {2}
```

-------------------------

Motokoder | 2021-12-06 08:01:53 UTC | #5

Thank you for the clarification Mr. Rossberg. I read that post, but did not think that an if/else statement could be considered a ternary operator. However, I see that the inline behavior is the subtle difference that makes that variation of an if/else a ternary operator.

-------------------------

rossberg | 2021-12-06 09:48:35 UTC | #6

Strictly speaking, there are no statements in Motoko, everything is an expression. That includes things like `if` and `switch`, which can return a value:
```
let a = switch x { case null {1}; case (?y) {y} }
```

-------------------------

Motokoder | 2021-12-06 18:26:37 UTC | #7

That is very useful. Thanks again! I would love to know the influence/motivation behind that language design choice if it's possible to put in layman's terms.

-------------------------

rossberg | 2021-12-07 07:30:07 UTC | #8

It's always been standard in functional programming languages, all the way back to Lisp in 1958 and ISWIM in 1966. But even the good old procedural Algol 68 already worked that way.

The statement/expression distinction has always been an artificial and pointless restriction, and it's rather puzzling to me that it still persists in so many mainstream languages. ;)

-------------------------

Motokoder | 2021-12-07 08:36:40 UTC | #9

Thank you for raising my awareness on the history of these expressions. I am very mainstream (pays the bills), but I always look forward to learning more about Motoko after work. I really appreciate your time and assistance Mr. Rossberg!

-------------------------

