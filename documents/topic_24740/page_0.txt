saikatdas0790 | 2023-11-16 18:06:49 UTC | #1

I am using the `didc` tool to generate the consumer intended Rust types using this command `./didc bind --target rs <canister_to_call_candid_file>`.

For example:

The input candid file looks like this:
https://github.com/go-bazzinga/hot-or-not-backend-canister/blob/main/src/canister/post_cache/can.did

And this is what the generated output bindings look like:
https://github.com/go-bazzinga/hot-or-not-web-leptos-ssr/blob/219620bd75ca1eb62af557d3e0b5eacd0343db8f/src/backend_canister_bindings/post_cache.rs

The issue here is with the Service struct.

![image|690x185](upload://uEBWBm2EGLJ4d0i2aObmyqMBycC.png)

It has generated calls that use ic_cdk to make the calls internally.

- Are we supposed to be using `ic_cdk` to be making calls into the IC from an off chain hosted app? I assumed `ic_cdk` only ran inside canisters
- If not, then how are we supposed to be using these methods from the `ic_agent` that's being used in the application?
- The agent has query and update methods that look like this:
https://docs.rs/ic-agent/latest/ic_agent/struct.Agent.html#method.query
which accept canister IDs which I assume is what specifies which canister to call into in the network? So, then the above interface generated by `didc` for calling the methods are meaningless?
- On a slightly orthogonal note, if the query/update method has the canister ID specified in the method parameters, what is the [`with_effective_canister_ID` method](https://docs.rs/ic-agent/latest/ic_agent/agent/struct.QueryBuilder.html#method.with_effective_canister_id) required for?

@lwshang @chenyan Thoughts?

-------------------------

lwshang | 2023-11-16 18:19:06 UTC | #2

With latest `didc`, you can generate agent bindings using:

```
didc bind --tartget rs-agent <CANDID_FILE>
```

-------------------------

saikatdas0790 | 2023-11-16 18:30:02 UTC | #3

Got it, that worked. Thank you.

Silly me, should have noticed the other parameter ðŸ™ˆ

-------------------------

