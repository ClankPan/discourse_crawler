Jesse | 2023-11-17 13:32:10 UTC | #1

I just implemented composite queries into my motoko code. When I attempt to call the `composite query` function, I'm getting the following error message:

```
Call failed:
Canister: hxx6x-baaaa-aaaap-qaaxq-cai
Method: getCanisterCyclesBalances (query)
"Status": "rejected"
"Code": "CanisterReject"
"Message": "Canister nl6hn-ja4yw-wvmpy-3z2jx-ymc34-pisx3-3cp5z-3oj4a-qzzny-jbsv3-4qe not found"
```

here is the code thats producing this error: 

```
public composite query(msg) func getCanisterCyclesBalances() : async MainTypes.CanisterCyclesBalances{
        let backendCyclesBalance = Cycles.balance();
        let ic : IC.Self = actor "aaaaa-aa";
        let {cycles = frontendCyclesBalance } = await ic.canister_status({ canister_id = Principal.fromText(daoMetaData_v2.frontEndPrincipal) });
        return {frontendCyclesBalance; backendCyclesBalance };
    };
```


and here is the function signature for the ```ic.canister_status``` method that I'm calling:

```
public type Self = actor {
        canister_status : query { canister_id : canister_id } -> async canister_status_response;
};
```

can someone help me resolve this issue?

-------------------------

Severin | 2023-11-17 13:33:28 UTC | #2

You are asking for the canister status of `daoMetaData_v2.frontEndPrincipal`. It looks like this is the user's principal, not a canister. Canister principals are much shorter than the one in the error message

-------------------------

Jesse | 2023-11-17 13:50:11 UTC | #3

thanks for responding so fast @Severin. the principal in the error message is the Subnet's principal ID. the value of  ```daoMetaData_v2.frontEndPrincipal``` is ```fkkq7-siaaa-aaaap-qaaya-cai```. I can confirm that it *is* a canister principal. 

I believe its calling the subnet's principal because I defined the ```ic``` actor using ``` "aaaaa-aa" ```. I'm guessing that when actors are defined using ``` "aaaaa-aa" ```, the subnet's principal is used as the acting principal.

also, I *do* know that the issue isn't with *that* particular canister as I have tested other composite query functions where I make inter-canister query calls with a method from ```rkp4c-7iaaa-aaaaa-aaaca-cai``` (the  Cycles Minting Canister) as the inner async method being called, and it returned the same error with ```rkp4c-7iaaa-aaaaa-aaaca-cai``` being the canister listed as ```not found``` within the error message.

-------------------------

Severin | 2023-11-17 13:44:47 UTC | #4

[quote="Jesse, post:1, topic:24762"]
`nl6hn`
[/quote]

Ah, that's possible... Let me ask the execution/runtime people about that... Could be something with composite queries not working as expected with the mgmt canister

-------------------------

stefan-kaestle | 2023-11-17 14:25:19 UTC | #5

Hi @Jesse,

The management canister's `canister_status` is an update call. No update calls can be called from composite queries (only other composite queries and regular queries).

You can see the interface spec from the management canister [here](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-management-canister). There, you can see that the `canister_status` call is not declared a `query` (so it is implicitly an update call).

Hope this helps
 Stefan

-------------------------

Jesse | 2023-11-17 16:34:46 UTC | #6

@stefan-kaestle, I'm also getting the same error when attempting to call other known query methods- namely, the ```get_icp_xdr_conversion_rate``` method within the cycles minting canister.
```
Call failed:
  Canister: hxx6x-baaaa-aaaap-qaaxq-cai
  Method: getCanisterData (query)
  "Status": "rejected"
  "Code": "CanisterReject"
  "Message": "Canister rkp4c-7iaaa-aaaaa-aaaca-cai not found"
```

I confirmed that the method is a query method via the icp dashboard (see screenshot below)
![Screenshot 2023-11-17 at 10.31.57 AM|690x166](upload://7daCRD1NPiFGbP8B5JFNddCUrDj.png)

-------------------------

stefan-kaestle | 2023-11-17 16:54:46 UTC | #7

Could you send the code for that call as well.

One restrictions with composite queries is that they don't work across subnetworks. `rkp4c-7iaaa-aaaaa-aaaca-cai` is the [cycles miniting canister](https://dashboard.internetcomputer.org/canister/rkp4c-7iaaa-aaaaa-aaaca-cai), which is in the NNS subnetwork. So that could be the problem?

-------------------------

Jesse | 2023-11-17 16:59:33 UTC | #8

That most certainly is the problem. Thats good to know.

-------------------------

Jesse | 2023-11-17 23:54:22 UTC | #9

[quote="stefan-kaestle, post:7, topic:24762"]
One restrictions with composite queries is that they donâ€™t work across subnetworks.
[/quote]

@stefan-kaestle this raises a question. I have some canisters that are programmatically deployed by my ```main.mo ``` canister. At no point do I specify which subnet they are to be deployed to. Is a child canister guaranteed to be deployed to the same subnet as the parent canister that deployed it?

-------------------------

h1teshtr1path1 | 2023-11-18 05:59:24 UTC | #10

Yes, a canister always makes new canisters in same subnet.

-------------------------

claudio | 2023-11-24 17:11:17 UTC | #11

For this particular call, the error is that canister_status is not a query method, so you should instead declare it with this type:

```
public type Self = actor {
        canister_status : { canister_id : canister_id } -> async canister_status_response;
};
```
(omitting `query`).

(See https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-management-canister - if `canister_status` were a query, it would have a Candid `query` keyword at the end of the Candid function type.)

-------------------------

