wang | 2020-09-18 04:06:01 UTC | #1

Has anyone thought about how to enable atomic cross-canister messaging? Would be cool if there was a system-level way to do this, likely with higher fees.

This has many applications, but in the financial space there are two big ones:
- Atomic cross-canister asset swaps without a centralized custodian
- Flash loans, which allow uncollateralized loans (in Ethereum, all "loans" are permissionless but require posting 100%+ collateral). In a flash loan, borrowers receive and repay assets in one single transaction, allowing them to use the loaned asset for other profitable opportunities. If they cannot repay the debt, the whole transaction simply reverts

-------------------------

flyq | 2021-03-17 03:09:33 UTC | #3

As described [here](https://sdk.dfinity.org/docs/language-guide/actors-async.html#_using_await_to_consume_async_futures):
> A function that does not `await` in its body is guaranteed to execute atomically - in particular, the environment cannot change the state of the actor while the function is executing. If a function performs an `await` , however, atomicity is no longer guaranteed. Between suspension and resumption around the `await` , the state of the enclosing actor may change due to concurrent processing of other incoming actor messages. It is the programmerâ€™s responsibility to guard against non-synchronized state changes.

Cross-canister calls are not guaranteed. And I test three canisters: canister A call canister B and canister C in order, and successfully executed in B, asserted in C. B's state var is changed and C's is not.

 So when we code, we should check first, and modify last. Also, flash loans may be impossible

-------------------------

lastmjs | 2021-03-18 22:04:28 UTC | #4

Ah...I was really hoping inter-canister calls were atomic. Is this something the team will be able to enable in the future? This is going to make implementing transactions much more difficult, since you'll have to keep  track of state changes across canisters somehow and roll them back...I was hoping a simple panic/trap would revert all memory

-------------------------

PaulLiu | 2021-03-19 02:51:42 UTC | #5

inter-canister calls are guaranteed with either a reply or error response, which hopefully can facilitate the implementation of a cross-canister transactional semantics if so desired.

When it comes to supporting transactions, there is a tradeoff between ease of use and scalability. It is a conscious choice that atomicity is per-message and per-canister in our design. Each application is free to pick and build a semantics that suits them, rather than succumb to a system imposed one that is not scalable (e.g. EVM).

-------------------------

christian | 2021-03-19 08:55:44 UTC | #6

I could imagine that Motoko could eventually provide an "atomic async", but this would obviously require imposing a global lock on the canister. Given that all calls have a guaranteed response, this should work.

-------------------------

