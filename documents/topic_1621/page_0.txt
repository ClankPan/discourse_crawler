ThanasisNta | 2020-12-04 13:13:06 UTC | #1

Hello everyone! 

Would you please suggest an example to create admin/admins to your application?
Thank you!

-------------------------

Ori | 2020-12-04 15:22:52 UTC | #2

This is something the platform makes very easy, you can just grab the caller of a public method and run a check on it to allow admin-only access, eg:

    public shared(msg) func doSomething() {
        if (isAdmin(msg.caller)) {
    	...

`msg.caller` there is of type Principal. You could either store this Principal in an array/set of admin Principals, or you could have an admin status flag in the user's profile. The isAdmin() function above could check for either of these.

A couple of examples from project repos:
https://github.com/hansl/journey/blob/8a0e45c4dee8f3f786ff7a7880e8bc8a10811144/src/journey/main.mo#L24
Or
https://github.com/dfinity/linkedup/blob/91392e689c368ed9d941b983226c3a53990823a4/src/linkedup/utils.mo#L43

-------------------------

tobyjaguar | 2022-01-25 22:43:29 UTC | #3

Where in the LinkedUp example does an admin ever get added to the adminIds array? In the docs there is an initializer that seems to be saved for a class, but I do not see how this is used for an actor:

https://smartcontracts.org/docs/developers-guide/tutorials/access-control.html#_modify_the_default_dapp

How do you initially save the deploying principal as an admin/owner? In solidity you'd save this in the constructor.

-------------------------

Ori | 2022-01-26 02:07:45 UTC | #4

On deployment the deploying identity’s principal gets assigned to the variable “initializer” in the example you posted, you could then later just check if a caller matches this variable within your canister’s methods:
```
public shared(msg) func doSomething() {
    if (msg.caller == initializer) {
	...
```

-------------------------

tobyjaguar | 2022-01-26 03:24:10 UTC | #5

thanks for this. Does this happen with an actor as well as a class, or just a class?

for example:

```
actor my_canister {
```

vs

```
shared ({ caller = initializer }) actor class my_canister() {
```

do both have access to *initializer*?

-------------------------

tobyjaguar | 2022-01-26 17:43:42 UTC | #6

I suppose I was looking for this information:

> Simple actor declarations do not let you access their installer. If you need access to the installer of an actor, rewrite the actor declaration as a zero-argument actor class instead.

-------------------------

