dieter.sommer | 2023-12-04 16:23:12 UTC | #203

Dear WG!

Voting on ICRC-3 has been opened last week and is open only for a little longer. Can you please cast your votes so that it can be finalized and put forward to the NNS?

Please vote here:
https://github.com/dfinity/ICRC-1/issues/169

@skilesare, @levifeldman, @benji, @sea-snake, @Maxfinity, @lastmjs

-------------------------

levi | 2023-12-06 11:29:47 UTC | #204

[quote="dieter.sommer, post:200, topic:11925"]
specifies how future ICRC standards that build on top of ICRC-3 should name their `op` in order to avoid naming clashes.
[/quote]

[quote="dieter.sommer, post:200, topic:11925"]
Proposal for naming:

* Prefix is the ICRC number without the string `ICRC-` to keep it shorter.
* The actual op name must then start with a letter character.
* The following characters can be alphanumeric and ‚Äú_‚Äù and ‚Äú-‚Äù
[/quote]

[quote="dieter.sommer, post:200, topic:11925"]
What do people think about this? We need this for the NFT standards that are coming up and we should define something.

At the bare minimum, we could fix the ICRC number as prefix, followed by anything not starting with a number to keep it as unconstrained as possible.
[/quote]

Looks good to me. Simple and it works.

-------------------------

NS01 | 2023-12-06 19:49:14 UTC | #205

In the ICRC standard is there a max size for approve transactions? For example u128::Max in rust? 

Should someone be able to submit an approve transaction of this size = 115792089237316195423570985008687907853269984665640564039457584007913129639935 ?

-------------------------

skilesare | 2023-12-06 20:16:51 UTC | #206

Do you mean for the amount or for the entire transaction data?  If the transaction data were larger than 2-3MB it would be unable to archive between canisters with the current data structures, but that would be huge and likely only something we're having to deal with in NFT land.  The amount is a Nat and is theoretically unbounded, but a developer should put a check in to make sure it isn't greater than the total supply to avoid DoS(although if it is a transfer there is likely other things that would cause it fail before inclusion).

-------------------------

NS01 | 2023-12-06 22:16:36 UTC | #207

Sorry should have made that clearer. Size as in value of transaction, not size in bytes. 

The reason I ask is that block 50 on ckETH is an approve transaction with the value "115792089237316195423570985008687907853269984665640564039457584007913129639935" 

I've been converting Nat values to u128 in rust because I find it easier to use in rust. Candid guide seems to suggest that in rust Nat is equivalent to u128 (https://internetcomputer.org/docs/current/references/candid-ref) 

Our indexer and data canister for ckETH both hit the wall at block 50 (because we didn't handle the case of a number > u128::max) 

So just wondering if we should be handling the possibility of Nat values being > u128.

-------------------------

mariop | 2023-12-06 22:48:13 UTC | #208

[quote="NS01, post:207, topic:11925"]
So just wondering if we should be handling the possibility of Nat values being > u128.
[/quote]

The standard uses `nat` for tokens amount because it's up to the Ledger to decide the precision. ckETH for instance uses `u256` and therefore any client expecting `u128` will have issues eventually.

Clients should be use bigunum internally or something similar to that for amounts to maximize compatibility with Ledgers.

-------------------------

skilesare | 2023-12-07 12:45:27 UTC | #209

So if I want to be evil and make rust devs have a bad day I should launch an SNS token with 255 decimal places.üòà

But seriously, does rust have an unbounded nat data type?

-------------------------

timo | 2023-12-07 13:25:38 UTC | #210

Isn't the SNS ledger written in Rust and does it support 256 bit amounts?

-------------------------

NS01 | 2023-12-07 16:25:04 UTC | #211

It's not a massive issue. I suppose what I'm saying is the candid reference page seem to suggest Nat = u128, which isn't the case. 

From the reference page: 

Corresponding Rust type

`candid::Nat` or `u128`

-------------------------

mariop | 2023-12-07 16:52:10 UTC | #212

> But seriously, does rust have an unbounded nat data type?

Natively no but there are libraries, e.g. [biguint](https://docs.rs/num-bigint/latest/num_bigint/struct.BigUint.html) which is used by candid

[quote="timo, post:210, topic:11925, full:true"]
Isn‚Äôt the SNS ledger written in Rust and does it support 256 bit amounts?
[/quote]

The Ledger the SNS uses is the same Ledger used by ckETH and has two flavors: u64 and u256. SNSes and ckBTC use the u64 one while ckETH uses the u256 one. You can see the code that swaps between the two [here](https://sourcegraph.com/github.com/dfinity/ic@be69c3576361bf7a0c81f5e25f7d7848743afa7e/-/blob/rs/rosetta-api/icrc1/ledger/src/main.rs?L44).

[quote="NS01, post:211, topic:11925, full:true"]
It‚Äôs not a massive issue. I suppose what I‚Äôm saying is the candid reference page seem to suggest Nat = u128, which isn‚Äôt the case.

From the reference page:

Corresponding Rust type

`candid::Nat` or `u128`
[/quote]

I don't know about the reference page but `Nat` is [definitely unbounded](https://sourcegraph.com/github.com/dfinity/candid@2f70240e0fd67f31bd98e5e798c32c5b9a093588/-/blob/rust/candid/src/types/number.rs?L16).

-------------------------

skilesare | 2023-12-07 21:30:25 UTC | #213

I was poking around some ICRC1 stuff and saw this stuff about a fee_collector(I think @levi was adding a fee_collector as well as a way to update the fee on an SNS).  It look like from https://github.com/dfinity/ic/blob/310743758d41e1bead72322c6a5bf8e77c4eac12/rs/rosetta-api/ledger_core/src/block.rs#L43 that these changes may actually be added to the blockchain as blocks...and that transfers with a fee_collector may have an extra fee_collector field in their transaction.  We don't have this defined in ICRC3 as far as I know.  Do we need to add these event type blocks?  Others might be changes to the minting account, initial balances, maybe some others I'm not thinking of off the top of my head.

@mariop @dieter.sommer  @sea-snake @benji

-------------------------

dieter.sommer | 2023-12-08 07:33:14 UTC | #214

[quote="NS01, post:207, topic:11925"]
The reason I ask is that block 50 on ckETH is an approve transaction with the value ‚Äú115792089237316195423570985008687907853269984665640564039457584007913129639935‚Äù
[/quote]

The updated ICRC-1/-2 ledger that is used for ckBTC uses 256 bits for representing numbers to be compliant with Ethereum requirements (in Ethereum, all balances are modeled as 256-bit numbers). And when approving, you can approve an arbitrary amount, that's why you can see numbers larger than 128 bits in size.

[quote="NS01, post:205, topic:11925, full:true"]
In the ICRC standard is there a max size for approve transactions? For example u128::Max in rust?

Should someone be able to submit an approve transaction of this size = 115792089237316195423570985008687907853269984665640564039457584007913129639935 ?
[/quote]

The max size for numbers in the new ICRC-1/-2 ledgers is, as mentioned above, 256 bits. The only reason was really compatibility for Ether and upcoming ERC-20, but in order to be compatible here, we needed to use 256 bits with all the implications. Should maybe have been communicated better.

-------------------------

dieter.sommer | 2023-12-08 08:13:33 UTC | #215

[quote="skilesare, post:213, topic:11925"]
I was poking around some ICRC1 stuff and saw this stuff about a fee_collector(I think @levi was adding a fee_collector as well as a way to update the fee on an SNS). It look like from https://github.com/dfinity/ic/blob/310743758d41e1bead72322c6a5bf8e77c4eac12/rs/rosetta-api/ledger_core/src/block.rs#L43 that these changes may actually be added to the blockchain as blocks‚Ä¶and that transfers with a fee_collector may have an extra fee_collector field in their transaction. We don‚Äôt have this defined in ICRC3 as far as I know. Do we need to add these event type blocks? 
[/quote]

AFAIK the fee collector has been seen as implementation specific and thus is not part of ICRC-3. Any implementation of a ledger could opt for its own way of collecting fees, thus it wasn't put in the standard. There was some talk by @mariop some time back to have the fee collector defined as an additional extension, but we haven't had time so far.

I guess if this is not standardized, services seeing the blocks with fees will not be able to interpret the fees and thus not be able to recompute all account balances of the ledger. For this reason, having the fee collector extension standard defined would probably make lots of sense.

[quote="skilesare, post:213, topic:11925"]
Others might be changes to the minting account, initial balances, maybe some others I‚Äôm not thinking of off the top of my head.
[/quote]

This is something a ledger ideally supports in terms of creating blocks for configuration changes. The question is how much of this could go into a base standard. Potentially something to be considered for our NFT standard?

If my memory of the discussions is correct, we don't have this for ICRC-1 for historical reasons, i.e., this not having been implemented in the first ICRC-1 ledgers and hence also not being part of the standard. New standards ideally should track configuration change in their block log, the question is whether the is ledger specific or part of a standard.

-------------------------

mariop | 2023-12-08 08:13:27 UTC | #216

[quote="dieter.sommer, post:215, topic:11925"]
I guess if this is not standardized, services seeing the blocks with fees will not be able to interpret the fees and thus not be able to recompute all account balances of the ledger. For this reason, having the fee collector extension standard defined would probably make lots of sense.
[/quote]

A more generic problem with the standard is how to account for custom fields that do change balances. I guess we should just forbid them unless they are put in a standard.
I agree that we should standardize the fee collector. I think most ledgers will consider having a fee collector and the fields are optional so ledgers that don't want it can just skip the fields.

-------------------------

dieter.sommer | 2023-12-08 08:16:45 UTC | #217

[quote="mariop, post:216, topic:11925"]
A more generic problem with the standard is how to account for custom fields that do change balances. I guess we should just forbid them unless they are put in a standard.
I agree that we should standardize the fee collector. I think most ledgers will consider having a fee collector and the fields are optional so ledgers that don‚Äôt want it can just skip the fields.
[/quote]

Thanks for your quick response, Mario!

I could take the fee collector on the agenda of the WG for next year and drive this forward. Should be a simple and not too big effort I guess. And until it's there, people can assume that this will be a standard way of fee accounting and can already include this semantics in their clients.

-------------------------

timo | 2023-12-08 08:58:05 UTC | #218

Question about ICRC-2: what's the purpose of the spender subaccount? It isn't explained very well in the spec and the examples given there don't use it. I suppose it exists so that the owner can define multiple independent allowances for the same spender, to segregate amounts to be used for different purposes and each with their own expiration. Is that the reason?

-------------------------

NS01 | 2023-12-08 11:43:14 UTC | #219

Thanks - I'm looking at rebuilding the 221Bravo index canisters. I'll add the BigUint change in as well. üëç

-------------------------

skilesare | 2023-12-08 15:08:06 UTC | #220

[quote="mariop, post:216, topic:11925"]
A more generic problem with the standard is how to account for custom fields that do change balances. I guess we should just forbid them unless they are put in a standard.
I agree that we should standardize the fee collector. I think most ledgers will consider having a fee collector and the fields are optional so ledgers that don‚Äôt want it can just skip the fields.
[/quote]

Yeah...it pops up because I was implementing the fee collector and replacing a silent burn of the fee and I was like...what do I do here?...Do I add a transfer to the fee collector as a whole other block?  Of do I just add a fee collector field at the top level?  The second one is cleaner, but will it break ICRC1-compatible ledger readers that don't know what it is?

-------------------------

levi | 2023-12-12 05:17:50 UTC | #221

The fee collector was implemented in the ledger before I heard about it and before my work on the sns' ability to set/change the fee-collector and other ledger parameters. In one of the meetings we spoke about it for a few minutes, If I remember correct, the way it is implemented now in the ledger is that if the fee collector changes, then the fee_collector field is put into the first block created after that change, and then until the fee collector changes again, the field is not put into further blocks.

[quote="skilesare, post:220, topic:11925"]
but will it break ICRC1-compatible ledger readers that don‚Äôt know what it is?
[/quote]
It does break for ledger readers looking for how or where the fee-collector account(s) gets its balance from so thanks for bringing this up. If we do standardize it and ledger-readers do know about it, It becomes more complex for wallets to show account history because now, for a wallet to know where it's account's funds came from, it has to look at every block that the ledger creates in case the fee-collector is changed to the wallet's account. A change in the index canister could help with that though. 

For the fact that with the ledger's fee-collector feature implemented right now, it does break ledger-readers from knowing where funds are coming from, I think it might be best to turn off that feature for now until it can be standardized and thought through how a client will know where it's account's funds are coming from.

-------------------------

dieter.sommer | 2023-12-12 10:57:55 UTC | #222

The vote on the ICRC-3 token standard has been accepted by the WG.
https://github.com/dfinity/ICRC-1/issues/169

-------------------------

dieter.sommer | 2023-12-12 10:59:35 UTC | #223

The fee collector seems to be a good topic for the discussion for the WG meeting on 2023-12-12. There seems to be a clear need that we go for a standard for the fee collector in order to enable clients to properly interpret the fee information and thereby properly reconstruct balances of ledgers.

-------------------------

dieter.sommer | 2023-12-12 11:04:18 UTC | #224

[quote="timo, post:218, topic:11925, full:true"]
Question about ICRC-2: what‚Äôs the purpose of the spender subaccount? It isn‚Äôt explained very well in the spec and the examples given there don‚Äôt use it. I suppose it exists so that the owner can define multiple independent allowances for the same spender, to segregate amounts to be used for different purposes and each with their own expiration. Is that the reason?
[/quote]

There was a decision in the WG that the ICRC token standards always use the account pair `(principal, subaccount)` in a consistent manner, i.e., also for the spender. This gives a conceptually cleaner design and also enables some additional functionality compared to using only the principal in some places. As you rightly point out, using an account for the spender allows for defining independent approvals / allowances. This comes with a slightly higher complexity for the API, but we thought it's worth it. You are right that this is not really very well explained in the documents.

-------------------------

gatsby_esp | 2023-12-12 11:14:28 UTC | #225

When will he have ICRC-3 avaialble on ckEth and ckBTC?
thanks

-------------------------

dieter.sommer | 2023-12-18 08:23:50 UTC | #226

We will skip the WG meeting of December 26th due to Xmas holidays.

-------------------------

dieter.sommer | 2023-12-21 17:53:14 UTC | #227

Please find the recording and minutes of the WG Meeting of November 28, 2023 linked below:
[**Recording** ](https://drive.google.com/file/d/1N55ZqH7P3Nak8yOIGJGbEGQeiiB5_cS8/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2023-11-28)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

dieter.sommer | 2023-12-21 18:06:22 UTC | #228

Please find the recording and minutes of the WG Meeting of December 12, 2023 linked below:
[**Recording** ](https://drive.google.com/file/d/1Aqq3tJWh4ke0XPba42KX5MttYaoWFKQN/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2023-12-12)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

timo | 2023-12-28 21:20:23 UTC | #229

In ICRC-2 are allowances supposed to be deleted by the ledger when they are expired or can the ledger delete them if the implementation wishes to do that? There is no interface that let's the user explicitly delete an allowance. 

In the spec it says 

> If there is no active approval, the ledger MUST return `{ allowance = 0; expires_at = null }`

What exactly does "no active approval" mean? That there never existed one or that it is expired or that it is expired and deleted?

-------------------------

skilesare | 2023-12-29 21:55:35 UTC | #230

The implementation can actively or passively clean them up. What is important is that after the expiration that the allowance returns 0 as you indicated.

We had an #Expired error but discussed that it could be confusing and require keeping excess data around so we decided to make it such that as soon as they expire, everyone should see them the same, ie 0.

-------------------------

skilesare | 2024-01-03 22:15:30 UTC | #231

I've put up a draft for ICRC-4 that is a bit more ICRC-7y.

https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md

@benji can you create an ICRC-4 branch for the ICRC and I'll do a pull request?

-------------------------

skilesare | 2024-01-05 17:32:41 UTC | #232

I've updated ICRC 4 with some instructions for updating the GENERAL ICRC schema such that a memo is recorded as normal in the first transaction processed in the memo field and subsequent items can have a memo-block at the top level to provide a pointer for log readers that want to reference the memo without repeating the data in every block. (We may need to extend this to ICRC7/30 that have batch-level memos as well).

There are alternatives here...we could put the memo block in the core trx as the memo is provided by the user, but the block number is provided by the system.  Maybe some disambiguation is necessary @mariop .

-------------------------

timo | 2024-01-05 20:36:10 UTC | #233

[quote="skilesare, post:230, topic:11925, full:true"]
The implementation can actively or passively clean them up. What is important is that after the expiration that the allowance returns 0 as you indicated.

We had an #Expired error but discussed that it could be confusing and require keeping excess data around so we decided to make it such that as soon as they expire, everyone should see them the same, ie 0.
[/quote]

I understand this means that from the outside, for someone querying the ledger, it is indistinguishable whether an allowance never existed or whether it existed but expired.

What does that mean for the following usage pattern? Say A has created an allowance for B with amount x. Then A can query the allowance to see if B has used the allowance and how much B has used. If the returned amount is y < x then it means B has used x - y so far. But when we're getting close to the expiration date then this strategy doesn't work anymore because if we go over the expiration then the amount drops to 0 even if B hasn't used it. So that means either A has to find other ways to monitor the usage of the allowances it has granted or has to not use expiration dates. Is that correct?

-------------------------

skilesare | 2024-01-05 20:17:02 UTC | #234

Yes....I think you'd want to track that in some other way.  Ideally, you'd have an indexing canister(or track the yourself) and could query on transactions with a spender equal to the spender and from equal to the account holder.

The approval accounting should have an initial approval record that can be started at...and additional approval records if the approval is manually changed.

-------------------------

dieter.sommer | 2024-01-08 18:40:43 UTC | #235

Dear Working Group and community!

After ICRC-3 comes ICRC-4. :-)

In the upcoming meeting on Jan 9, 2024, we suggest to continue the discussion regarding ICRC-4 ( Batch Transfers for ICRC-1 Fungible Tokens) as Austin has gone through some effort and finished another iteration on it.

[ICRC-4 draft](https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md)

See also Austin's posts above on the recent ICRC-4 iteration.

Looking forward to the discussions tomorrow!

-------------------------

dieter.sommer | 2024-01-12 14:44:56 UTC | #236

Please find the recording and minutes of the WG Meeting of January 09, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/1L2lmgsyN4J3ORWVceMEOToI-XLCmTwUp/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-01-09)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings** ](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

skilesare | 2024-01-16 18:21:20 UTC | #237

I've updated the ICRC-4 spec given the discussions we've had during the NFT and Token WGs.  Please send feedback.

https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md

Most discussion seems to revolve around:

1. Do we include the transfer request with each response so that the implementation can dictate if it wants to process in order or not?  Including it allows for more options and gives more power to implementors.
2. Do we dictate or leave open how to handle processing termination?  We have removed a top level error that applies to the whole batch and allow the implementor to terminate with an error in the last entry or include entries with a null error if they are not processed due to termination.

-------------------------

dieter.sommer | 2024-01-22 10:27:03 UTC | #238

Thank you for updating ICRC-4 after our related discussions regarding NFTs.

1. This is a good question. Including it means that we guarantee that all request elements are processed and that even *before* starting any processing, it is reasonably guaranteed that processing can be at least attempted for all request items and that there is enough space in the response for responses for all request items. This is all a bit constraining and the more I think about it, the more I like the idea of giving up the ordering. See [my write up](https://forum.dfinity.org/t/call-for-participation-nft-token-standard-working-group-status-updated/16566/167) for the NFT-related transfer method (all arguments apply equally here as well). The variation of Option 2 is what reflects your option, the plain Option 2 is when removing the `transfer: TransferArg` from each response element and relying on ordering. It seems even nicer to me because of the potential simplifications of the implementation.
2. In my opinion the approach of relying on ordering of responses and allowing the implementation to terminate anywhere in the sequence, i.e., return only a prefix of all responses, is non constraining for the implementation, i.e., nice. The implementation can do parallel processing as it wants and if a batch-level error happens it does not proceed any further and caps the length of the returned prefix at the largest index it attempted to process in parallel. Elements for which processing has not yet been attempted can receive a `null` responses to save space. A special error would be semantically equivalent to the error for this case, but consume more space. Thus, doing it that way might make the implementation simpler as it makes fewer guarantees and assumptions.

In your updated API you simplified away the `TransferBatchArgs`, but you overlooked that it's still in the method signature. The method parameter should change to `vec TransferArg`.

-------------------------

dieter.sommer | 2024-01-22 13:58:20 UTC | #239

See my post on the new batch API for NFTs in [my post](https://forum.dfinity.org/t/call-for-participation-nft-token-standard-working-group-status-updated/16566/167) in the NFT working group. The intention is to align the APIs of both the ICRC-4 and NFT WGs.

* **Option 1** (for completeness) has full batch semantics and a top-level batch error.
* **Option 2** is a full batch API with a flat error structure and relying on ordering, i.e., not repeating the request elements in the response. Also, the response need not contain all request elements.
* **Variation of Option 2** is a full batch API, not relying on ordered responses, but repeating the request for each response. That is the NFT analogon of [your proposal](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/237) above.

-------------------------

vafi | 2024-01-23 09:39:07 UTC | #240

Hi, I am very interested in joining this next webinar. How may I see it live?

-------------------------

dieter.sommer | 2024-01-23 14:59:08 UTC | #241

Dear Working Group and community!

In the upcoming meeting on Jan 23, 2024, we will continue our discussion on ICRC-4 on batch transfers. The main decision to be made is the look and feel of the full-batch API, i.e., whether errors are handled as separate top-level structure or whether responses come in a flat list with per-item or per-batch errors.

[ICRC-4 draft](https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md)

[Google Calendar](https://calendar.google.com/calendar/u/0?cid=Y19jazBncjc5YmtnY29vaWNuMXA4N21vMWVyb0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t), [calendar browser link](https://calendar.google.com/calendar/u/0/embed?src=c_ck0gr79bkgcooicn1p87mo1ero@group.calendar.google.com&ctz=Europe/Zurich)

-------------------------

dieter.sommer | 2024-01-23 15:00:55 UTC | #242

In order to join, you find a Zoom link in the calendar entry for this meeting:
[Google Calendar](https://calendar.google.com/calendar/u/0?cid=Y19jazBncjc5YmtnY29vaWNuMXA4N21vMWVyb0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t), [calendar browser link](https://calendar.google.com/calendar/u/0/embed?src=c_ck0gr79bkgcooicn1p87mo1ero@group.calendar.google.com&ctz=Europe/Zurich)

The meeting is called "Ledger & Tokenization Technical Working Group" and takes places every other week on Tue, 18:00 - 19:00 UTC+1 time. Today is the next one.

See my post above on the agenda for today's meeting.

-------------------------

dieter.sommer | 2024-01-24 15:08:11 UTC | #243

@skilesare, @sea-snake, all

While writing up the discussed changes regarding the batch API for ICRC-7, my finding is to make a slight adjustment to how the API is presented:

```
type TransferResult = variant {
    Ok : nat; // Transaction indices for successful transfers
    Err : TransferError;
};

// icrc4_transfer_batch method definition
icrc4_transfer_batch: (vec TransferArg) -> async vec opt TransferResult;
```

I.e., to have a `TransferResult` instead of a `BatchTransferResult` and moving the `vec` and `opt` into the method signature. This makes the correspondence of the `TransferArg` and `TransferResult` and the optionality of the latter in the vector immediately clear. I think having the `vec opt` in the method signature helps a lot with communicating the positional parameter idea in the API.

What do you / others think?

-------------------------

skilesare | 2024-01-24 15:17:25 UTC | #244

Looks good...I'll try to mirror on ICRC4.

-------------------------

NS01 | 2024-02-05 10:10:21 UTC | #245

GM Folks. Just looking for a 2nd opinion on how to read the standards of ICRC-1. I've come across a couple of ICRC-1 canisters which have caused the 221Bravo Indexer to crash. 

The error I'm getting is that transfers are being made from new/unknown accounts. Digging into this I've found that these ledgers have a pre-mint account which is populated with a sum of tokens. This is not recorded in the ledger as a mint transaction. This means that the first transactions recorded on the ledger appear as a 'transfer' from the 'pre-mint' account. 

My understanding is that to adhere to ICRC-1 the first transaction on the ledger would ALWAYS be a mint transaction?

-------------------------

mariop | 2024-02-05 12:51:54 UTC | #246

[quote="NS01, post:245, topic:11925"]
This is not recorded in the ledger as a mint transaction.
[/quote]

There is no rule but everything that affects balances should be recorded as transaction.

-------------------------

dieter.sommer | 2024-02-06 15:54:41 UTC | #247

The next WG meeting is today, February 6, 2024. The proposed agenda is to continue discussions on ICRC-4.

[ICRC-4 draft](https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md)

[Google Calendar](https://calendar.google.com/calendar/u/0?cid=Y19jazBncjc5YmtnY29vaWNuMXA4N21vMWVyb0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t), [calendar browser link](https://calendar.google.com/calendar/u/0/embed?src=c_ck0gr79bkgcooicn1p87mo1ero@group.calendar.google.com&ctz=Europe/Zurich)

-------------------------

dieter.sommer | 2024-02-06 15:56:12 UTC | #248

Please find the recording and minutes of the WG Meeting of January 23, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/16oo3MZ9ewLzK7ndjdGZsBipXp1dj9VxL/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-01-23)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings** ](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

skilesare | 2024-02-06 16:49:13 UTC | #249

[quote="mariop, post:246, topic:11925"]
There is no rule but everything that affects balances should be recorded as transaction.
[/quote]

I'd further state that we will all be a lot better off if we get to a place where all serious IC utility canisters provide a transaction log that can be used to reconstruct current state from canister  genesis. This is harder to do than at first blush considering code upgrades, but we should at least attempt to do so. We probably need a lot more conversation about how to practically do this, and maybe even a few written out "rules" to codify it.

-------------------------

timo | 2024-02-08 11:38:30 UTC | #250

The standard ICRC-1 defines a function `icrc1_supported_standards`. I checked a couple of ledgers and for all of them this function returns only one entry:
```
(vec { record { url = "https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-1"; name = "ICRC-1" } })
```
even though they actually do have an ICRC-2 interface. I checked SNS-1, OpenChat and GLDT ledgers and it was like that for all three.

I suppose ICRC-1 intends that it is mandatory to return the correct list of supported standards.

-------------------------

dieter.sommer | 2024-02-12 08:44:58 UTC | #251

@timo, thanks a lot for your comment, this is indeed an omission in the implementation. If ICRC-2 is implemented by an ICRC-1 ledger, it is, as you suggest, mandated that it be mentioned in the response of `icrc1_supported_standards`.

> Any ledger supporting `ICRC-2` MUST include a record with the `name` field equal to `"ICRC-2"` in that list.

@mariop, can you take care of this being fixed in the implementation, please?

-------------------------

mariop | 2024-02-12 10:32:54 UTC | #252

[quote="timo, post:250, topic:11925, full:true"]
The standard ICRC-1 defines a function `icrc1_supported_standards`. I checked a couple of ledgers and for all of them this function returns only one entry:

```
(vec { record { url = "https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-1"; name = "ICRC-1" } })
```

even though they actually do have an ICRC-2 interface. I checked SNS-1, OpenChat and GLDT ledgers and it was like that for all three.

I suppose ICRC-1 intends that it is mandatory to return the correct list of supported standards.
[/quote]

SNS Ledgers do not support ICRC-2 yet and therefore `icrc1_supported_standards` doesn't return ICRC-2. The Ledger uses runtime feature flags for new features which means the endpoint exist but trap if the feature is disabled. You are not supposed to use standards that are not listed by `icrc1_supported_standards`.
The SNS Ledgers share their code with the ckBTC Ledger. Differently from the SNS Ledgers, the ckBTC Ledger has the ICRC-2 feature flag enabled. You can see the ckBTC Ledger `icrc2_supported_standards` correctly returns ICRC-2 as supported standard:

```
$ dfx canister --network ic call mxzaz-hqaaa-aaaar-qaada-cai icrc1_supported_standards
(
  vec {
    record {
      5_843_823 = "https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-1";
      1_224_700_491 = "ICRC-1";
    };
    record {
      5_843_823 = "https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2";
      1_224_700_491 = "ICRC-2";
    };
  },
)
```

The SNS team is working on enabling ICRC-2 in the SNS Ledgers.

-------------------------

mariop | 2024-02-12 11:14:55 UTC | #253

Hi,
I posted a [message](https://forum.dfinity.org/t/icrc-3-draft-v2-and-next-steps/25132/9) about ICRC-3 delay in case anybody is wondering what's going on.

-------------------------

dieter.sommer | 2024-02-20 14:48:03 UTC | #254

I made some minor comments, mostly editorial, on ICRC-4. We can go over them in the meeting later this afternoon.
https://docs.google.com/document/d/1y1YG0R2z_pZNba0TlUnO67lRySGNa4iImehlJ5Cr4OM/edit

-------------------------

dieter.sommer | 2024-02-21 08:07:49 UTC | #255

Please find the recording and minutes of the WG Meeting of February 06, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/1-oVa5VPl09cd8AMbcF2Npwnt1IUhveWG/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-02-06)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings** ](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

skilesare | 2024-02-21 11:49:42 UTC | #256

Updated icrc4 here https://github.com/skilesare/ICRC/blob/main/ICRCs/ICRC-4/ICRC-4.md

-------------------------

dieter.sommer | 2024-03-04 07:38:49 UTC | #257

Dear WG colleagues!

Do you have any proposals for discussion items for the upcoming meeting tomorrow, March 05? I have ICRC-22 on my backlog, but can't prepare it for tomorrow due to time reasons, but we can discuss it in one of the upcoming meetings after that.

If there's no proposals, I'll cancel the meeting for tomorrow.

Thanks!

-------------------------

dieter.sommer | 2024-03-05 13:07:55 UTC | #258

Dear WG!

We have a topic of broad interest for tomorrow's agenda:
* ICRC-3

Specifically, the session will be centered around the following issues discussed on the forum already, see the [original post](https://forum.dfinity.org/t/icrc-3-draft-v2-and-next-steps/25132/45) and the following discussion for details.

@mariop will be presenting and driving the discussion!

Hope to see many of you there, I know many people are waiting for ICRC-3 to be finalized and resolving those issues is a key missing piece of the puzzle.

See you tomorrow!

See the [Google Calendar](https://calendar.google.com/calendar/u/0/r?cid=Y19jZ29lcTkxN3JwZWFwN3ZzZTNpczFobDMxMEBncm91cC5jYWxlbmRhci5nb29nbGUuY29t) link for schedule and dial-in details.

-------------------------

mariop | 2024-03-05 18:02:22 UTC | #259

Please find the slides of the WG Meeting of March 5, 2024 linked below:
[slides](https://docs.google.com/presentation/d/1xQ2P8H-7D9PRuwV57lXEiK0Wzr9isMMD7AYOOEWylVA/edit?usp=sharing)

-------------------------

dieter.sommer | 2024-03-08 13:18:17 UTC | #260

Please find the recording and minutes of the WG Meeting of February 20, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/1p6QsL8cETQ8ImPNlZggCsclzJyqKCtHv/view)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-02-20)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

dieter.sommer | 2024-03-08 13:40:15 UTC | #261

Please find the recording and minutes of the WG Meeting of March 05, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/1L2lmgsyN4J3ORWVceMEOToI-XLCmTwUp/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-03-05)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

dieter.sommer | 2024-03-19 12:55:55 UTC | #262

The proposed agenda for the meeting tomorrow is as follows:
* [ICRC-3](https://github.com/dfinity/ICRC-1/pull/128): Finalize and move forward.
* [ICRC-61](https://github.com/skilesare/ICRC/tree/icrc61/ICRCs/ICRC-61): Finalize and move forward towards voting.

-------------------------

dieter.sommer | 2024-03-19 14:39:48 UTC | #263

@skilesare
Austin, can you copy the [ICRC61 draft](https://github.com/skilesare/ICRC/tree/icrc61/ICRCs/ICRC-61) into the [official ICRC repository](https://github.com/dfinity/ICRC/tree/main/ICRCs), please? It is currently still located in your personal repository.

If you are lacking permissions, please let me know so I can do it.

Thank you!

-------------------------

skilesare | 2024-03-19 15:25:41 UTC | #264

I think the last time I tried, I didn't have permissions to create a pull request. I can try as soon as I get to my computer, but you all may have to give me more permissions or create the pull request yourself.

-------------------------

skilesare | 2024-03-19 15:26:42 UTC | #265

Also, I think we were supposed to ask @benji if we could have ICRC six or 10. He has those reserved, but he may have intentions for them.

-------------------------

dieter.sommer | 2024-03-21 13:35:46 UTC | #266

Please find the recording and minutes of the WG Meeting of March 19, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/14ijVB081Bv-iyAlgq5v2uQhwHCgRNh6V/view)
[**Minutes**](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-03-19)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

mariop | 2024-03-25 16:44:15 UTC | #267

FYI the motion proposal for ICRC-3 is live https://forum.dfinity.org/t/icrc-3-draft-v2-and-next-steps/25132/78

-------------------------

mariop | 2024-04-02 16:40:20 UTC | #268

Please find the slides of the WG Meeting of April 2, 2024 linked below:
[slides ](https://docs.google.com/presentation/d/1w952b-6ZYXgToY2tAKiIoAtjSrNsChgUu-8hJ4fOkfQ/edit?usp=sharing).

The next meeting will be about the Fee Collector standard and how to solve the issues discussed today and written in the slides.

-------------------------

icnerd | 2024-04-09 00:34:49 UTC | #269

hello @dieter.sommer @skilesare 
link to the draft is broken, I also don't see the standard to moved to the official ICRC repository.
Can you share the link to the standard?

-------------------------

dieter.sommer | 2024-04-09 07:46:43 UTC | #270

Hi @icnerd 

The link to the accepted document is [here](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-3).

Note that ICRC-1,-2, and -3 are in a different repo than the others for historical reasons. They are already getting linked to heavily, thus it is likely too late to move them to the [ICRC](https://github.com/dfinity/ICRC) repository.

-------------------------

icnerd | 2024-04-09 07:50:46 UTC | #271

hello @dieter.sommer 
sorry I forgot to mentioned, that I was looking for ICRC-61

-------------------------

skilesare | 2024-04-09 09:41:03 UTC | #272

We renamed 61 to 10 because it is fairly foundational and the number had been reserved. See the pull request section for the latest version.

-------------------------

dieter.sommer | 2024-04-09 16:26:36 UTC | #273

Please find the recording and minutes of the WG Meeting of April 02, 2024 linked below:
[**Recording** ](https://drive.google.com/file/d/1xT349-RL63eThU8VvHbqpbJ8jGIKiJwC/view?usp=share_link)
[**Minutes** ](https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2024-04-02)

You can find all the recordings, chats, and slides of all meetings here:
[**All files of all meetings**](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J)

-------------------------

dieter.sommer | 2024-04-15 14:47:37 UTC | #274

Dear Working Group!

Do you have any suggestions on items to be discussed in tomorrow's meeting?

In recent meetings we had the following in mind as potential future work items:
* Presigned transactions
* ICRC-8
* Approve / transfer_from batch methods for fungible tokens
* Payment standard (on my plate, did not have time yet to work on it)

If nothing else, I'd like to get an OK on my changes to ICRC-10 to be able to have it sent to the NNS for voting.

-------------------------

skilesare | 2024-04-15 15:30:55 UTC | #275

I haven't had a chance to do the bulk approve transfer yet. Shouldn't take much time when I do, but it may be in a couple of weeks.

Presigned transactions are certainly interesting, but I think we were waiting on something from @mariop ?  ICRC8 needs to go through a round of componentization.

It might be worth taking a look at @timo 's HPL and seeing if there is anything interesting to pull from it. It is quite a departure from what we have so far, but something like confirmable payments would be a nice, short extension that might help a lot of folks and avoid things like Tornado Cash Bombs.

-------------------------

dieter.sommer | 2024-04-15 15:53:06 UTC | #276

[quote="skilesare, post:275, topic:11925"]
Presigned transactions are certainly interesting, but I think we were waiting on something from @mariop ? ICRC8 needs to go through a round of componentization.
[/quote]

Correct, and he is working on something else currently, so we need to defer this.

[quote="skilesare, post:275, topic:11925"]
It might be worth taking a look at @timo 's HPL and seeing if there is anything interesting to pull from it. It is quite a departure from what we have so far, but something like confirmable payments would be a nice, short extension that might help a lot of folks and avoid things like Tornado Cash Bombs.
[/quote]

Good idea!

-------------------------

timo | 2024-04-15 18:12:51 UTC | #277

What's presigned transactions?

-------------------------

dieter.sommer | 2024-04-16 15:19:32 UTC | #278

IIRC, with pre-signed transactions we want to realize that one can sign a transaction upfront, e.g., with an offline key for cold storage, without having to sign a transaction for each small time window and then choose the correct one when submitting. This would greatly simplify life when preparing transactions ahead of time and submitting when certain conditions are met.

@mariop would have details on how we want to realize this.

-------------------------

dieter.sommer | 2024-04-29 16:50:58 UTC | #279

Dear WG!

I do currently not have time to prepare the ICRC for payment URLs which was planned as topic for tomorrow. Also, it's not possible for me to participate in tomorrow's call. Does anyone have a topic for tomorrow they want to discuss, in which case I can open the call for you?

-------------------------

skilesare | 2024-04-29 17:19:34 UTC | #280

I had a great chat with @frederikrothenberger last week about ICRC-21.  I can walk anyone interested in it through it and I think maybe we can discuss how we might be able to provide a standard set of responses/translations/prompts for ICRC 1,2,4.

Another alternative would be to start working on the Approve/TransferFrom batch ICRC.

-------------------------

timo | 2024-04-30 15:00:39 UTC | #281

Is there any standard (being worked on) for how to deposit and withdraw from services canister? Say there is a service canister that takes ICRC-1 deposits and gives users credits to use on the service, and lets users to also withdraw. For example, the service can be an exchange, a market, or anything else. Important is that the same service can take deposits from multiple different ICRC-1 tokens (necessary for an exchange). Such a deposit and withdrawal interface is a requirement that many services have in common. Hence, to simplify frontend integration it should be standardised. Has there been any work in this direction?

And a related question: is there a list of all ICRC standards incl. ones at draft stage?

-------------------------

skilesare | 2024-04-30 16:06:35 UTC | #282

This is the most reliable list we have at the moment.  We likely need to clean things up and document these a bit better:

https://github.com/dfinity/ICRC/issues

-------------------------

skilesare | 2024-04-30 16:08:27 UTC | #283

I've personally built this a few times for a few different services, and yes, it would be awesome to standardize it.  There is a bit of a conundrum around if you want the deposit addresses to be deterministic or private. Or deterministically private? Or rotate?  If we defined the derivation and it would be fairly simple to write the component to manage it all.

-------------------------

skilesare | 2024-04-30 16:10:16 UTC | #284

Looks like I'm the only one on the call today so I'm going to drop off. Hopefully, we can get a bit more organized in next couple of weeks.  Timo's idea is interesting and we could tackle that.

-------------------------

timo | 2024-05-01 14:28:53 UTC | #285

[quote="skilesare, post:282, topic:11925"]
This is the most reliable list we have at the moment.
[/quote]

Thanks!

So if I want to make a draft I just pick any ICRC number that isn't used by any of the existing issues? Or are there numbers reserved already that don't appear in the issues?

-------------------------

skilesare | 2024-05-01 15:03:28 UTC | #286

Just create an issue with an indication of what you want to use it for and then the number is yours.(the issue number assigned)

-------------------------

dieter.sommer | 2024-05-13 12:24:58 UTC | #287

@timo 

The best is, as Austin mentioned, to create an issue here: https://github.com/dfinity/ICRC/issues
The issue number `x` you receive is your ICRC number.

Then you can create a subdirectory `icrc-x` in the `ICRCs` directory of the `https://github.com/dfinity/ICRC` repository with your initial or empty draft if you want to develop it in public.

There is some tooling available to generate a Candid file from a standard specification and lint it if you use the according markup to annotate your Candid type and method definitions. See, e.g., ICRC-7 as example. The tooling is not deployed in the ICRC repo at this point.

Hope that helps!

-------------------------

dieter.sommer | 2024-05-13 12:32:48 UTC | #288

Does anyone have suggestions for the WG call tomorrow, May 14?

-------------------------

mariop | 2024-05-13 15:11:27 UTC | #289

We could talk about https://github.com/dfinity/ICRC-1/issues/186 and potential solutions to this. The only problem is that I'm not sure I'll be able to join as I have another meeting overlapping. I'll see if I can move the other meeting so that I can join.

-------------------------

dieter.sommer | 2024-05-13 19:24:02 UTC | #290

@mariop This is a great idea, but only makes sense if you can join. Would be great if you could move your other meeting. Thanks!

-------------------------

mariop | 2024-05-14 09:12:36 UTC | #291

[quote="dieter.sommer, post:290, topic:11925"]
This is a great idea, but only makes sense if you can join. Would be great if you could move your other meeting. Thanks!
[/quote]

I will be in the WG today, the other meeting was moved. I proposed we discuss about the problem and a potential solution and its implications. I'll prepare the slides and drive the conversation.

-------------------------

dieter.sommer | 2024-05-14 16:09:42 UTC | #292

We cut the meeting short this afternoon and have the following agenda for the meeting in 2 weeks:
* The issue [ICRC-2: It is practically impossible for users to manage allowances ¬∑ Issue #186 ¬∑ dfinity/ICRC-1 ¬∑ GitHub ](https://github.com/dfinity/ICRC-1/issues/186) and potential solutions to this. @mariop is preparing the content and ideally already a concrete proposal to discuss.

-------------------------

dieter.sommer | 2024-05-27 12:54:08 UTC | #293

In tomorrow's WG meeting we will be discussing proposed improvements to ICRC-2. See https://github.com/dfinity/ICRC-1/issues/186. @bogwar will be leading the session and making a proposal.
Hope to see many of you in the meeting tomorrow!

-------------------------

sea-snake | 2024-05-28 14:12:44 UTC | #294

Can't find a link to the WG meeting, any suggestions where I can find it? Don't see any zoom link in the agenda.

-------------------------

dieter.sommer | 2024-05-28 17:12:45 UTC | #295

Hi @sea-snake, only seeing this now after the meeting. There is a Google Calendar link in the top of the topic.

[Google Calendar](https://calendar.google.com/calendar/u/0/r?cid=Y19jazBncjc5YmtnY29vaWNuMXA4N21vMWVyb0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t)

The Zoom link is in the calendar. As it may change, please import the calendar and always use the most recent link there. The current one is [this](https://dfinity.zoom.us/j/99093158767?pwd=NEhFdk9yemtmT2NoYW1Ta2VWM2VzZz09).

-------------------------

sea-snake | 2024-05-28 18:23:07 UTC | #296

If any proposal was presented in the session, is there any link I can check? The earlier issue link only describes the issue but doesn't have any links to a proposal yet.

Regarding the topic, since a wallet already needs to keep track of allowances anyway (to check if a transfer_from is allowed). I don't see why there can't be a method to return these allowances. In ICRC-37 there's also methods to get a list of approvals for similar use cases.

Relying on the index canister only seems logical for historical state, but as far as I understand, allowances are an ongoing state until they expire or reach 0, they're used and needed within the canister to do a transfer_from.

-------------------------

dieter.sommer | 2024-05-29 06:22:19 UTC | #297

Yes, a proposal was presented, @bogwar will post the slides shortly here for reference. We can continue the discussion on the forum.

-------------------------

bogwar | 2024-05-29 08:15:29 UTC | #298

Here's [the slides](https://docs.google.com/presentation/d/1MZGdAOu0c4lq9FJjcaSkM6jVxk3rxPMrst3cfdP7Y0Y/edit?usp=sharing) I've used for the discussion.

-------------------------

skilesare | 2024-05-29 13:42:36 UTC | #299

My suggestion was to grab a new ICRC Number and update the function to something like the following to follow the emerging pagination standards in ICRC 7,etc.

icrc84_list_allowances(filter: opt Account, prev: opt Allowance, take: opt nat);

There was some discussion about needing to add this to ICRC37, but as you pointed out, I think we already have icrc37_get_token_approvals and collection approval that would let a service check for approvals on owned NFTs which may be sufficient.

-------------------------

dieter.sommer | 2024-06-10 16:00:09 UTC | #300

Tomorrow, June 11, we will continue the discussion of the most recent Working Group meeting. See [here](https://drive.google.com/file/d/1mVGgbFfKyZYhQRF8mwyJKrS7PzIh3l4i/view?usp=share_link) for a link to the recording of the meeting, minutes are not available for this meeting.

-------------------------

dieter.sommer | 2024-06-25 11:35:38 UTC | #302

The proposal for the discussion for the WG meeting this afternoon is to have a look at how standards can be "extended". There is currently a concrete example available that would require an extension that is merely a clarification, but not adding new / different normative parts to the standard.

-------------------------

dieter.sommer | 2024-07-05 11:43:41 UTC | #303

Please find the slides and recordings of the recent meeting [here](https://drive.google.com/drive/u/0/folders/1TlaDISjZpAKpqJdXzYMw4hhuKj5YxZ3J).

**Meeting of 2025-05-28**
* [Slides](https://docs.google.com/presentation/d/1MZGdAOu0c4lq9FJjcaSkM6jVxk3rxPMrst3cfdP7Y0Y/edit?usp=share_link)
* [Recording](https://drive.google.com/file/d/1mVGgbFfKyZYhQRF8mwyJKrS7PzIh3l4i/view?usp=share_link)

**Meeting of 2025-06-25**
* [Slides](https://docs.google.com/presentation/d/1p4i1IfMqXS_rjuNdM8rt3TU5VmsjOgs3xvVYeoEJwyU/edit?usp=share_link)
* [Recording](https://drive.google.com/file/d/1G7rn64Lo14JkWA5K8PI-h4_rG4W7PyAa/view?usp=share_link)

-------------------------

