apotheosis | 2022-10-13 00:55:24 UTC | #1

Hey,

I am thinking about a push-to-deploy module for ICME that would allow a user to spin up
an instance of an already existing WASM application, onto the IC.

What would one need to do, to get this WASM IC ready? What are the specs needed??
If it has a frontend does it need to work within Asset canister??

Thanks!

@domwoe @lastmjs

-------------------------

paulyoung | 2022-10-13 02:51:16 UTC | #2

I think if the Wasm module targets another runtime (for example [WASI](https://wasi.dev/)) you’d need to somehow detect that and patch each system call to the equivalent on the IC.

-------------------------

rossberg | 2022-10-13 09:43:26 UTC | #3

Wasm is just a code format. An application also expects an OS.

First, you'd need to know what environment and possible glue code that Wasm app targets, because that determines what imports it expects to be available.

Then you'd probably need to implement something more or less equivalent to a POSIX emulation layer on the IC. Or at least a sizeable portion thereof, like file system, I/O system, etc., which many applications may expect.

Finally, you'd need to figure out tooling to cram all that into a single Wasm module, since the IC does not yet support on-chain linking. That may be tough before Wasm officially supports multiple memories, which are a prerequisite for being able to merge multiple modules into one in general.

-------------------------

apotheosis | 2022-10-13 06:29:04 UTC | #4

But when we are building it with undefined-undefined it should be OS independent?? 
I know we can deploy single-wasm because I commonly deploy the ledger canister as wasm locally. 

I am looking for specs that make a wasm like that ledger wasm work on the IC normally.

-------------------------

apotheosis | 2022-10-13 06:33:25 UTC | #5

Actually I think this clears it up. Thanks!

-------------------------

paulyoung | 2022-10-13 06:55:12 UTC | #6

[quote="apotheosis, post:4, topic:15868"]
But when we are building it with undefined-undefined it should be OS independent??
[/quote]

Do you mean `wasm32-unknown-unknown`?

If so, you can still produce a Wasm module that will panic at runtime if certain things are called because they aren’t available. See: https://github.com/dfinity/cdk-rs/issues/123#issuecomment-1042424271

-------------------------

paulyoung | 2022-10-13 06:55:29 UTC | #7

If you’re interested in replacing I/O and filesystem access, you could try:

https://github.com/codebase-labs/icfs

* `icfs` provides implementations of `std::io::{Read, Write, Seek}` backed by stable memory to enable the use of existing Rust code that requires implementations of these traits.
 * `icfs-fatfs` uses `icfs` to leverage the `fatfs` crate in providing a FAT file system.

-------------------------

apotheosis | 2022-10-13 07:07:00 UTC | #8

I think the WASM I was looking into will not work because there are more than one working together. Started programming in Rust a bit because the transform function was out faster for the HTTP calls.

Fun to deep dive into how Rust compiles `wasm32-unknown-unknown` with Wasmtime. Anyway! NG on this usecase.

-------------------------

