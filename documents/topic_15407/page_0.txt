lastmjs | 2022-09-14 13:11:19 UTC | #1

At Demergent Labs we've just started working on Kybra, a Python CDK for the IC.

While trying to get RustPython to compile and run within a canister, I ran into the issue with the Wasm function limit: https://forum.dfinity.org/t/wasm-module-exceeding-maximum-allowed-functions/12409

Luckily that limit is about to be raised to 50,000 functions.

I upgraded to `dfx 0.12.0-beta.2` to see if the limit was raised locally. It may have been, because I'm getting an entirely new but very troubling error: `Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module contains a function that is too complex`

What can be done about this? Keep in mind that I'm trying to incorporate a complex software project into the IC that I do not have the most direct control over, RustPython. RustPython compiles to Wasm and just as I'm trying to deploy it to the IC I keep hitting these issues.

-------------------------

lastmjs | 2022-09-13 22:42:43 UTC | #2

But I can and have forked RustPython. I would love some help tracking down which function is too complex, and I'm hoping we can remove this limitation in the future.

-------------------------

paulyoung | 2022-09-13 22:44:35 UTC | #3

The error appears to originate here:

https://github.com/dfinity/ic/blob/bc6b1eead67102f2c4cca90c623123b3ca3a6c88/rs/embedders/src/wasm_utils/validation.rs#L1016-L1035

-------------------------

abk | 2022-09-14 09:45:57 UTC | #4

@lastmjs this limit was added to protect against situations where Wasmtime would take too long to compile the canister's Wasm module. I think they've since made improvements to the compilation speed so we'll look into raising the limit.

We're also pushing out an improvement to the error message so that it reports how much the module exceeds the limit by. If you can share the module you're currently working with we can also use it to see how much of an increase in the limit would be needed, or if it can be modified in some other way to make your code work.

-------------------------

lastmjs | 2022-09-14 13:10:33 UTC | #5

That would be great! It might also be useful if the error message could give some information on which function.

I'll push some code up in a couple hours and share the link.

-------------------------

lastmjs | 2022-09-14 14:34:15 UTC | #6

How should I share the module with you? Do you want the Wasm binary?

-------------------------

abk | 2022-09-14 14:58:02 UTC | #7

Yeah just the .wasm file would be good.

-------------------------

lastmjs | 2022-09-14 20:00:47 UTC | #8

I think I've been able to track down the crate that the function originates from, it's the LALR parser generator: https://github.com/lalrpop/lalrpop

-------------------------

lastmjs | 2022-09-14 20:14:30 UTC | #9

Yep, I found it. It's an absolutely humongous function that is auto-generated

-------------------------

lastmjs | 2022-09-14 20:31:57 UTC | #10

Okay, so lalrpop is generated a Python parser used by RustPython. Part of the parser has a function that is about 6000 lines long, and it has a match with almost 900 arms.

Is the Wasm function complexity limit just based on the function body, or does it somehow follow the function statements as they call into other functions? I would guess it's just based on the function body.

I would love the limit to be raised to have this issue just disappear, but I guess I'll try manually modifying the function to pull pieces out into other functions to see if that works. If I'm headed down the wrong path I'd love some guidance. Thanks!

-------------------------

chenyan | 2022-09-14 21:24:10 UTC | #11

So the function complexity refers to the Wasm function, not the original Rust function. I've seen cases where this error appears after `wasm-opt`, probably due to function inlining. So lalrpop parser may not be the real cause (Candid parser is also using lalrpop, and it seems to work fine inside the canister).

-------------------------

lastmjs | 2022-09-14 22:57:12 UTC | #12

lalrpop's very large generated function was indeed the cause. I refactored the function and everything works now.

-------------------------

lastmjs | 2022-09-14 22:59:55 UTC | #13

This is still a problem though, because I had to manually edit a generated file. Should I try not running ic-cdk-optimizer? Our binaries with RustPython are ~7mb without optimization though.

-------------------------

lastmjs | 2022-09-14 23:01:28 UTC | #14

I would guess that the Python lalrpop generated code is more complicated than the Candid code, it's an entirely different full-featured programming language

-------------------------

chenyan | 2022-09-15 04:14:03 UTC | #15

I guess it all depends on how the rust compiler generates wasm code. Using .gz without optimizer, or tuning the compiler optimization level is also worth trying.

-------------------------

abk | 2022-09-15 07:27:24 UTC | #16

[quote="lastmjs, post:10, topic:15407"]
Is the Wasm function complexity limit just based on the function body, or does it somehow follow the function statements as they call into other functions? I would guess it’s just based on the function body.
[/quote]

Yep, it's just based on the function body.

[quote="lastmjs, post:13, topic:15407, full:true"]
This is still a problem though, because I had to manually edit a generated file. Should I try not running ic-cdk-optimizer? Our binaries with RustPython are ~7mb without optimization though.
[/quote]

It is possible that `ic-cdk-optimizer` is pushing the `lalrpop` generated code over the limit because of function inlining, and I'd be curious to see if your canister still hits the limit when you don't run it through `ic-cdk-optimizer`, but that shouldn't be our long-term solution.

-------------------------

lastmjs | 2022-09-16 18:35:51 UTC | #17

I've reached out to you on Discord and am providing the source code and Wasm binary. Hopefully you can glean what's going on. Refactoring the match in the __reduce function (the match with over 800 arms) does solve the problem.

-------------------------

paulyoung | 2022-09-16 18:53:35 UTC | #18

I’m not sure it will make any difference but I think `ic-cdk-optimizer` has been deprecated in favor of `ic-wasm`.

https://github.com/dfinity/ic-wasm

-------------------------

lastmjs | 2022-09-16 19:43:38 UTC | #19

I've been playing with that too

-------------------------

lastmjs | 2022-09-16 20:30:40 UTC | #20

So I have some new information. When I use `ic-wasm shrink`, I get the too many functions error:

```
"Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module defined 13760 functions which exceeds the maximum number allowed 10000."
```

When I use ic-cdk-optimizer I get function is too complex error:

```
"Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module contains a function that is too complex"
```

When I refactor the extremely large function and use `ic-wasm shrink` I get the too many functions error.

When I refactor the extremely large function and use `ic-cdk-optimizer` everything works.

-------------------------

Severin | 2022-09-19 08:13:47 UTC | #21

[quote="lastmjs, post:20, topic:15407"]
When I refactor the extremely large function and use `ic-wasm shrink` I get the too many functions error.

When I refactor the extremely large function and use `ic-cdk-optimizer` everything works.
[/quote]
We want `ic-wasm` to be a full replacement for `ic-cdk-optimizer` so this is an issue. I'll ping the relevant folks for that.

-------------------------

lwshang | 2022-09-19 14:26:17 UTC | #22

Hi @lastmjs,
We are deprecating `ic-cdk-optimizer`. And `ic-wasm shrink` is the replacement for reducing canister size.
That is not a 1:1 replacement. For some particular cases, people may have to still use `ic-cdk-optimizer`. It seems that currently `ic-wasm shrink` doesn't work for your case.

Let me explain a bit about why we want to make this tool migration. 
* `ic-cdk-optimizer` was built on top of `binaryen` crate which is an incomplete wrapper over the C library. The dependency crate is not actively maintained and it's hard to tune it for our usage for IC. 
* `ic-wasm` is built on top of `walrus` crate which is native Rust. It enables `ic-wasm` not only to reduce WASM size, but also do more kinds of WASM module surgery. We envision it to be a versatile tool to process IC Canister WASM.

We will keep working on `ic-wasm` so that it can satisfy more and more use cases. Could you share your WASM module? So that we can start investigating if we can make `ic-wasm shrink` work for you.

-------------------------

lastmjs | 2022-09-19 14:44:40 UTC | #23

I've shared it with [abk](https://forum.dfinity.org/u/abk), if you'd like it directly from me can we chat on Discord or Telegram?

-------------------------

abk | 2022-09-19 15:13:07 UTC | #24

No worries @lastmjs. I can pass it on to @lwshang.

-------------------------

abk | 2022-09-19 15:26:45 UTC | #25

In regards to the original request, it looks like we can lift this limit enough for the optimized `RustPython` code to work.

-------------------------

lastmjs | 2022-09-19 16:10:41 UTC | #26

That would be fantastic

-------------------------

paulyoung | 2022-09-24 23:19:03 UTC | #27

[quote="lastmjs, post:1, topic:15407"]
I upgraded to `dfx 0.12.0-beta.2` to see if the limit was raised locally. It may have been
[/quote]

I just tried it and it doesn't appear to have been changed from 10,000.

-------------------------

lastmjs | 2022-09-24 23:33:28 UTC | #28

You're right, I believe it was the difference between ic-wasm and ic-cdk-optimizer that obscured the bug. I was trying a lot of different things.

-------------------------

paulyoung | 2022-09-25 04:22:15 UTC | #29

@abk do you know when we might see a version of dfx that reflects the increased limit?

-------------------------

Severin | 2022-09-26 06:40:08 UTC | #30

We would like to cut a (likely beta) release this week, but we have a couple blockers to clear before that

-------------------------

Severin | 2022-09-27 17:01:31 UTC | #31

Latest beta is available. Install command:
```
DFX_VERSION=0.12.0-beta.3 sh -ci "$(curl -fsSL https://smartcontracts.org/install.sh)"
```

-------------------------

dymayday | 2022-09-28 11:35:00 UTC | #32

`ic-wasm` never worked for me : the "shrinked" output is the same size as the original one.
I wonder what I am missing here :thinking: 

Here is the command I am using :

> ic-wasm main.wasm -o main.ic-wam.wasm shrink

`wasm-opt` is working fine though.

-------------------------

lastmjs | 2022-09-28 18:03:03 UTC | #33

I just tried switching to `dfx 0.12.0-beta.3` and from `ic-cdk-optimizer` to `ic-wasm` for Kybra, and whereas in `ic-cdk-optimizer` everything is working, I now get:

```bash
Installing canisters...
Creating UI canister on the local network.
The UI canister on the "local" network is "ryjl3-tyaaa-aaaaa-aaaba-cai"
Installing code for canister query, with canister ID rrkah-fqaaa-aaaaa-aaaaq-cai
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'query'.
      Failed to install wasm in canister 'rrkah-fqaaa-aaaaa-aaaaq-cai'.
        Failed to install wasm.
          The Replica returned an error: code 5, message: "Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module contains a function at index 0 with complexity 10116 which exceeds the maximum complexity allowed 10000"
```

-------------------------

paulyoung | 2022-09-28 18:35:07 UTC | #34

Is it worth creating environment variables for these function and complexity limit values so that anyone running into them for the first time isn’t immediately blocked on local development?

-------------------------

Severin | 2022-09-28 19:19:00 UTC | #35

[quote="lastmjs, post:33, topic:15407"]
I just tried switching to `dfx 0.12.0-beta.3`
[/quote]

That's really weird I thought beta.3 contains the change already. @abk can you point me to the commit, please?

And @lastmjs unlikely, but possible problem: did you change the dfx version in dfx.json as well? It could have started the old version if you specify an older version.

-------------------------

lastmjs | 2022-09-28 19:40:43 UTC | #36

I didn't specify a version in the dfx.json, I never do usually so I'm pretty sure it was the right version. Also notice that the error was for complexity this time and not for the number of functions, not sure if that makes a difference. What was the complexity limit raised to?

-------------------------

abk | 2022-09-29 15:47:15 UTC | #37

Here's the commit: https://github.com/dfinity/ic/commit/ac4ed94de1b526e70518e677e754d7d894291afa

The limit was increased by 50% to 15,000.

-------------------------

Severin | 2022-09-30 08:30:18 UTC | #38

Looks like the limit increase was committed not quite half a day after the latest replica update... Will be included with the next replica update for sure

-------------------------

lastmjs | 2022-10-03 21:21:22 UTC | #39

So the complexity limit should soon be `15_000` and the function limit should soon be `50_000`? @severin do we know yet what version of dfx these changes will be in? I'm running into these limits again locally.

-------------------------

lastmjs | 2022-10-03 21:24:04 UTC | #40

Okay it looks like `dfx 0.12.0-beta.3` has the function limit increase from what I can tell. Just waiting on complexty I suppose, I am unblocked for now though which is nice.

-------------------------

Severin | 2022-10-04 08:34:03 UTC | #41

I hope we release 0.12.0-beta.4 soon as we had a bug in `dfx generate`. I'm trying to get the complexity limit into that as well.

-------------------------

lastmjs | 2022-11-02 15:57:55 UTC | #42

I just tried out `dfx 0.12.0-beta.4` and it looks like the complexity limit is included. I've been able to switch over to `ic-wasm` from `ic-cdk-optimizer`. I'm still using a modified version of RustPython, which had the original limit on the number of functions. I will eventually try to get back to the upstream version of RustPython and then hopefully this entire problem for me has been resolved.

Thanks for all of the work you've been putting in.

-------------------------

lastmjs | 2022-11-02 16:11:00 UTC | #43

Update: I still can't use `ic-wasm`, as the optimization in Wasm binary size is not as good as `ic-cdk-optimizer`.

For a simple Kybra (Python) canister that I'm using to test with:

When using `ic-cdk-optimizer`, my original Wasm binary is 9.8MiB, which is then optimized to 5.4MiB, which is then gzipped to 1.8MiB, which can be successfully deployed.

When using `ic-wasm shrink`, my original Wasm binary is 9.8MiB, which is then optimized to 8.7MiB, which is then gzipped to 2.2MiB, which cannot be successfully deployed.

Is there something I'm missing in my usage of `ic-wasm`?

-------------------------

chenyan | 2022-11-02 16:43:40 UTC | #44

`ic-wasm shrink` only performs dead code elimination, so it's expected that `wasm-opt`/`ic-cdk-optimizer` can shrink the wasm size much further. The only problem with `wasm-opt` is that it also removes the canister metadata from wasm module, and there doesn't seem to have an easy way to disable it. Well, we could store the metadata before wasm-opt and then save them back after the optimization...

-------------------------

lastmjs | 2022-12-09 20:42:12 UTC | #45

I just wanted to confirm that the `Wasm module contains a function that is too complex` issue has been resolved for us as of `dfx 0.12.0`. All of our Kybra tests are passing without the hack we had to do in RustPython to get around this issue.

-------------------------

lastmjs | 2023-04-14 16:05:35 UTC | #46

Hey, we just updated our Rust Python interpreter in Kybra to the latest, and we now are unable to deploy because there is a function (I'm not sure which) with a complexity of `16_722`. Is there hope of further increasing the complexity limit in dfx?

-------------------------

diegop | 2023-04-14 17:09:57 UTC | #47

Let me ping sdk folks @lastmjs

-------------------------

lastmjs | 2023-04-14 19:06:19 UTC | #48

A `20_000` limit would be nice. The complexity comes from the same code as before, `RustPython` uses `lalrpop` to generate its parser, and that auto-generated code is extremely complicated. There is a function called `__reduce` that is almost 9,000 lines long. Because the complexity limit is too low, in our fork of RustPython (which we're trying to eliminate), we have to check in this extremely large generated file and hard-code a split-up of that `__reduce` function. It would be so nice to not have to do this.

-------------------------

ericswanson | 2023-04-14 21:23:45 UTC | #49

[quote="lastmjs, post:45, topic:15407"]
Wasm module contains a function that is too complex
[/quote]

Is it one of these two errors? https://github.com/dfinity/ic/blob/master/rs/types/wasm_types/src/errors.rs#L113

> "Wasm module contains a function at index {} with complexity {} which exceeds the maximum complexity allowed {}"
> "Wasm module contains a function at index {} of size {} that exceeds the maximum allowed size of {}"

-------------------------

lastmjs | 2023-04-14 21:29:20 UTC | #50

Yes I believe it's similar to or that exact error you linked to. It's specifically the complexity of the function, which is 16_722, and the complexity limit I believe is now set to 15_000.

-------------------------

lastmjs | 2023-04-14 21:32:26 UTC | #51

```
Wasm module contains a function at index 0 with complexity 16722 which exceeds the maximum complexity allowed 15000
```

```
Deploying all canisters.
All canisters have already been created.
Building canisters...
Executing 'python -m kybra query src/main.py src/main.did'

Building canister query

[1/3] 🔨 Compiling Python... 5.0s
[2/3] 🚧 Building Wasm binary... 115.2s
[3/3] 🚀 Optimizing Wasm binary... 52.41s

🎉 Built canister query at .kybra/query/query.wasm.gz

Done in 172.93s.
Installing canisters...
Installing code for canister query, with canister ID rrkah-fqaaa-aaaaa-aaaaq-cai
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'query'.
      Failed to install wasm in canister 'rrkah-fqaaa-aaaaa-aaaaq-cai'.
        Failed to install wasm.
          The Replica returned an error: code 5, message: "Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module contains a function at index 0 with complexity 16722 which exceeds the maximum complexity allowed 15000"
```

-------------------------

ericswanson | 2023-04-14 21:36:10 UTC | #52

Okay.  I've asked if we can increase the limit further.  This validation comes from the replica, not dfx, so even if it is feasible it will take some time before we will have a replica that we can package into a dfx update.

-------------------------

lastmjs | 2023-04-14 21:39:49 UTC | #53

Our workaround will hold for a while, but would love to have this addressed as soon as feasible, thank you!

-------------------------

pramitgaha | 2023-07-05 04:24:15 UTC | #54

@lastmjs 
those animations looks pretty cool.
can you contribute something similar to that for rust-cdk too?

-------------------------

alexeychirkov | 2024-01-24 06:49:34 UTC | #55

Are there any news regarding increased complexity limit? Thanks

-------------------------

berestovskyy | 2024-01-24 08:14:43 UTC | #56

Do you still face this issue? It seems it was addressed a few months ago. The allowed complexity should be 1M now.

-------------------------

alexeychirkov | 2024-01-24 16:49:04 UTC | #57

Well, we are using dfx 0.12.1 in one of our projects... Which is the minimal version to get higher than 15000?

-------------------------

berestovskyy | 2024-02-06 08:43:06 UTC | #58

The `[9e220fc7a] Runtime: Expand complexity limit` was released in **[rc--2023-08-23](https://github.com/dfinity/ic/tree/rc--2023-08-23_23-01)** (64016bcd) and [was included](https://github.com/dfinity/sdk/blob/master/CHANGELOG.md#0150) in the `dfx 0.15.0`.

-------------------------

