zensh | 2024-05-10 18:03:15 UTC | #1

I am applying for a $5k Developer Grant for [idempotent-proxy](https://github.com/ldclabs/idempotent-proxy).

The idempotent-proxy is a reverse proxy service written in Rust with built-in idempotency support.
When multiple requests with the same idempotency-key arrive within a specific timeframe, only the first request is forwarded to the target service. The response is cached in Redis, and subsequent requests poll Redis to retrieve and return the first request's response.
This service can be used to proxy HTTPS Outcalls for ICP canisters, enabling integration with any Web2 service. It supports returning only the necessary headers and, for JSON data, allows response filtering based on JSON Mask to return only required fields, thus saving cycles consumption in ICP canisters.

Please review my application and discuss! See DFINITY's directions for becoming a registered reviewer [here](https://addlink.com). They will be collected by DFINITY. When one week passes, DFINITY will release them and they will appear as a new section on this post.

Please review my application and discuss! If you would like to submit an official review, then please use the links below to register, see the rubric, and submit a review. 

I'm looking forward to everyone's input! 

[Reviewer Registration](https://airtable.com/app9yb0aqQ3yOkjWO/pagQ35ZwCQ8hMWY0S/form) | [Rubric for Evaluating](https://forum.dfinity.org/t/introducing-public-developer-grants/28863) | [Submit a Review](https://airtable.com/app9yb0aqQ3yOkjWO/pagKHnmIWd99ssVbe/form)

MY APPLICATION:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrFHizkCKfH7EIxG?backgroundColor=cyanDusty&viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

REVIEWS:
<iframe class="airtable-embed" src="https://airtable.com/embed/app9yb0aqQ3yOkjWO/shrLVbERfoYhwmonP?backgroundColor=cyanDusty&viewControls=on" frameborder="0" onmousewheel="" width="100%" height="533" style="background: transparent; border: 1px solid #ccc;"></iframe>

-------------------------

qwertytrewq | 2024-05-11 23:47:35 UTC | #2

`Idempotency-Key` is a superfluous idea for our use case (outcalls on IC).

Really, idempotency can be determined by hash of the request (headers and body). The hash is always the same for the same outcall. Reversely, if the hash is the same, the returned information by the logic of the outcalls should be the same. So, hash of the outcall body and headers can play the role of `Idempotency-Key`, rendering `Idempotency-Key` useless.

Well, suppose, we ask an oracle for a price of crypto. Then two requests should have different answers in the case if they are done at different time. But if we set caching period low, they will have different answers, anyway. So, I think, in this case `Idempotency-Key` is also of no much usefullness. Moreover, if the client indeed provides a header with a random value, then it will change the hash (without proxy having special support for namely this header), rendering `Idempotency-Key` totally useless.

Also, it should be `X-Idempotency-Key` rather than `Idempotency-Key` accordingly HTTP standard.

-------------------------

zensh | 2024-05-12 02:22:33 UTC | #3

[quote="qwertytrewq, post:2, topic:30624"]
Well, suppose, we ask an oracle for a price of crypto. Then two requests should have different answers in the case if they are done at different time. But if we set caching period low, they will have different answers, anyway.
[/quote]
If you're aware of the $LUNA price crash, you would know not to make such assumptions.

[quote="qwertytrewq, post:2, topic:30624"]
Also, it should be `X-Idempotency-Key` rather than `Idempotency-Key` accordingly HTTP standard.
[/quote]

I'm not particularly concerned about whether to use X-Idempotency-Key or Idempotency-Key. I try to follow https://datatracker.ietf.org/doc/html/rfc6648, and Stripe also uses Idempotency-Key.

-------------------------

qwertytrewq | 2024-05-12 04:36:04 UTC | #4

Loosely copied from another thread:

If we pass `Idempotency-Key` in the headers, it changes the hash of the request data, so no need to specify the particular header for this usage. It is however useful to have a configurable list of headers to be removed from the request. If we observe the hash and remove `Idempotency-Key`, this will have exactly the same effect as handling `Idempotency-Key` expolicitly.

-------------------------

zensh | 2024-05-12 12:28:14 UTC | #5

Here is another similar Developer Grant application initiated by @qwertytrewq, which we have discussed:
https://forum.dfinity.org/t/a-proxy-joining-multiple-http-requests-into-one/30541

-------------------------

qwertytrewq | 2024-05-13 04:34:40 UTC | #6

The app should use tECDSA pub key retrieved from an IC canister to verify the Bearer token, not a key stored in an environment variable.

Usage of plain ECDSA token is almost as unsafe (against hacked canister hardware) as using a fixed secret.

I am writing my own implementation of a similar proxy with tECDSA support in a [competing grant](https://forum.dfinity.org/t/a-proxy-joining-multiple-http-requests-into-one/30541), which will contain reliable (tECDSA) authentication.

Not that [there](https://forum.dfinity.org/t/a-proxy-joining-multiple-http-requests-into-one/30541/18?u=qwertytrewq) there is a complex algorithm that I discontinued in regard of more robust and simple usage of tECDSA for the canister.

-------------------------

zensh | 2024-05-26 10:34:24 UTC | #7

Idempotent Proxy allows canisters to integrate with any Web2 service that provides an HTTP API through HTTPS Outcalls.

For example, similar to the recently launched [evm-rpc-canister](https://github.com/internet-computer-protocol/evm-rpc-canister), we can use Idempotent Proxy to proxy requests to an EVM RPC Provider for EVM integration. This method is equally secure and reliable but more cost-effective and flexible in terms of the APIs it can use. Similarly, Idempotent Proxy can proxy requests to a BTC RPC Provider, making integration with the Bitcoin network simpler.

![image|690x489](upload://muk9IbH0mEiGKJi63VDbQJzdTsO.png)

-------------------------

zensh | 2024-05-26 11:28:37 UTC | #8

I don't like arguing, but I want to point out that qwertytrewq has some misunderstandings about ICP and Idempotent Proxy technical details. I'm glad to see he's starting to recognize some misconceptions in his thread.

-------------------------

domwoe | 2024-05-29 09:07:54 UTC | #9

Hi @zensh,

Would you consider adding a light version to this proposal that doesn't depend on Redis and could be deployed as a cloud worker/function?

-------------------------

zensh | 2024-05-29 09:55:45 UTC | #10

That's a great suggestion. I'll implement it.

-------------------------

zensh | 2024-06-03 17:20:59 UTC | #11

Implemented an Idempotent Proxy as a Cloudflare Worker using TypeScript, a first-class language for Cloudflare Workers. If written in Rust, it would run through the WASM virtual machine. Next steps include improving testing and providing canister integration examples.

https://github.com/ldclabs/idempotent-proxy/tree/main/src/idempotent-proxy-cf-worker

-------------------------

qwertytrewq | 2024-06-09 09:06:13 UTC | #12

Meanwhile, yesterday I released a beta of my competing product [Join Proxy](https://github.com/vporton/joining-proxy-rust).

My proxy features validation of the call by callback to IC, what warrants that calls can't be made even by a malevolent replica. Zensh didn't address this issue what makes my product clearly superior.

I provide full automated testing in Docker.

So, apparently, the only drawback of my product compared to zensh's one is that I don't provide Redis support. But I provide pluggable API, what makes adding Redis support easy.

> I want to point out that qwertytrewq has some misunderstandings about ICP and Idempotent Proxy technical details.

Concerning Zensh claims about my misunderstandings, I really had some security misunderstanding, but after some thinking provided this callback-based reliable verification.

Where I had misunderstandings, Zensh had no understanding: he didn't provide any secure way to validate this with blockchain-grade security, while I did.

-------------------------

qwertytrewq | 2024-06-09 09:18:46 UTC | #13

[quote="qwertytrewq, post:12, topic:30624"]
So, apparently, the only drawback of my product compared to zensh’s one is...
[/quote]

Oh, I also didn't provide CloudFlare version, only Rust standalone server.

-------------------------

qwertytrewq | 2024-06-09 10:17:50 UTC | #14

[quote="qwertytrewq, post:12, topic:30624"]
Concerning Zensh claims about my misunderstandings, I really had some security misunderstanding, but after some thinking provided this callback-based reliable verification.
[/quote]

To be precise, Zensh's software allows to a malignant replica to steal OpenAI tokens, for example. Mine doesn't.

-------------------------

zensh | 2024-06-09 13:26:15 UTC | #15

[quote="qwertytrewq, post:14, topic:30624"]
To be precise, Zensh’s software allows to a malignant replica to steal OpenAI tokens, for example. Mine doesn’t.
[/quote]

Idempotent Proxy hides sensitive information like keys by defining constants such as `URL_xxx` or `HEADER_xxx` on the server side. For example:

https://github.com/ldclabs/idempotent-proxy?tab=readme-ov-file#proxy-request-example-with-header_-constant-defined

Sensitive information is included in `URL_HTTPBIN` and `HEADER_TOKEN` constants in the proxy server's `.env` file, which are used directly when calling APIs from the canister:

```sh
curl -v -X GET 'http://localhost:8080/URL_HTTPBIN' \
  -H 'idempotency-key: idempotency_key_001' \
  -H 'authorization: HEADER_TOKEN' \
  -H 'content-type: application/json'
```

This mechanism not only hides sensitive data but also makes updates easier without needing to modify and redeploy the canister.

Idempotent Proxy uses the `proxy-authorization` header to verify the requester's identity. Public keys can be added in the `.env` file using `ECDSA_PUB_KEY_xxx` or `ED25519_PUB_KEY_xxx` constants. The canister generates a `proxy_token` using `ecdsa::sign_with_ecdsa` to call the proxy service, which then verifies the `proxy_token` with the public keys.

```sh
curl -v -X GET 'http://localhost:8080/URL_HTTPBIN' \
  -H 'idempotency-key: idempotency_key_001' \
  -H 'proxy-authorization: Bearer 6LduPbIpAAAAANSOUfb-8bxxx...xxxU45eilZFSmlSguN5TO' \
  -H 'authorization: HEADER_TOKEN' \
  -H 'response-headers: content-type,content-length' \
  -H 'x-json-mask: args,url' \
  -H 'content-type: application/json'
```

Apologies for the sparse documentation of Idempotent Proxy, which makes it difficult for developers to see these details. I will update the documentation as soon as possible.

-------------------------

zensh | 2024-06-09 13:37:06 UTC | #16

I am developing [ckDOGE](https://github.com/ldclabs/ck-doge), which will communicate with Dogecoin chain nodes through an Idempotent Proxy. Here is the agent definition for ck-doge-canister accessing the proxy:

https://github.com/ldclabs/ck-doge/blob/main/src/ck-doge-types/src/canister/agent.rs

The relevant Dogecoin JSON-RPC API definitions are here:

https://github.com/ldclabs/ck-doge/blob/main/src/ck-doge-types/src/jsonrpc.rs

-------------------------

qwertytrewq | 2024-06-09 15:13:55 UTC | #17

`.env` file can be read by a malignant replica. Your code isn't secure enough.

-------------------------

zensh | 2024-06-09 16:29:20 UTC | #18

[quote="qwertytrewq, post:17, topic:30624, full:true"]
`.env` file can be read by a malignant replica. Your code isn’t secure enough.
[/quote]

I'm not sure what you mean by "malignant replica." The `.env` file is used by the proxy service and is a part of Web2 infrastructure. If you're using Cloudflare Worker, you can store the keys in Cloudflare Worker's secrets. However, you should be aware that no regular Web2 infrastructure can be absolutely secure, and the confidentiality requirement for an OpenAI API key is not that high.

-------------------------

qwertytrewq | 2024-06-09 16:41:45 UTC | #19

[quote="zensh, post:15, topic:30624"]
Idempotent Proxy hides sensitive information like keys by defining constants such as `URL_xxx` or `HEADER_xxx` on the server side.
[/quote]

I understanad this, but a malignant replica can forge a request to the server, causing it to use `URL_xxx` or `HEADER_xxx` without the owner of the canister requesting this. So, a malignant replica can steal OpenAI tokens.

-------------------------

qwertytrewq | 2024-06-09 16:45:53 UTC | #20

In the supposition that the part of Web2 infrastructure that we manage ourselves is without compromises:

- A hacker that owns a replica (I call it a malignant replica, for short) can cause additional requests to your server (that it may forward to OpenAI and so tokens are stolen), if we use your software.
- With my software there is no such security vulnerability.

> the confidentiality requirement for an OpenAI API key is not that high.

That's not an argument.

-------------------------

zensh | 2024-06-10 00:50:32 UTC | #21

[quote="qwertytrewq, post:19, topic:30624"]
So, a malignant replica can steal OpenAI tokens.
[/quote]


I believe there isn't sufficient incentive for a malignant replica to steal OpenAI tokens.

If a scenario with enough incentive does arise, it can be addressed by upgrading the `proxy_token` mechanism, such as:
1. Regenerating the `proxy_token` for each proxy service request, without caching it in the canister;
2. Strictly limiting the resource boundaries that each `proxy_token` can access;
3. Ensuring that each `proxy_token` can only be used once by the proxy service.

-------------------------

zensh | 2024-06-13 07:36:44 UTC | #22

The Idempotent Proxy will play a crucial role in the CK-Doge project:
https://github.com/ldclabs/ck-doge
![ck-doge-diagram|690x420](upload://obT3wXitF0ibvKeZwG8IByQdV3G.webp)

-------------------------

domwoe | 2024-06-13 07:48:40 UTC | #23

Hey @zensh,

The usage of the idempotent proxy is concerning for a project that controls user funds. Aren't there no public RPC providers or block explorers that support IPv6? 

Or are you doing on-chain light client verification of the data you are fetching via the idempotent proxy?

-------------------------

zensh | 2024-06-13 10:42:25 UTC | #24

[quote="domwoe, post:23, topic:30624"]
Aren’t there no public RPC providers or block explorers that support IPv6?
[/quote]
The currently deployed Idempotent Proxy and Dogecoin node are for local testing only. When deploying the testnet version online, IPv6 will be added to the Idempotent Proxy. For the mainnet deployment, we plan to integrate well-known, trusted public RPC providers for dual verification of the block tip.

[quote="domwoe, post:23, topic:30624"]
Or are you doing on-chain light client verification of the data you are fetching via the idempotent proxy?
[/quote]
The CK-Doge canister will also perform hash chain validation on the block data it fetchs.
https://github.com/ldclabs/ck-doge/blob/main/src/ck-doge-canister/src/store.rs#L334

Furthermore, CK-Doge could be a highly influential project. It aims to integrate Dogecoin, a cryptocurrency with a market cap of $20 billion, into the third-generation blockchain, ICP. This could bring new vitality to Dogecoin's consensus, as Dogecoin nodes have not been updated for a long time and seem difficult to update.

-------------------------

domwoe | 2024-06-14 06:42:21 UTC | #25

[quote="zensh, post:24, topic:30624"]
For the mainnet deployment, we plan to integrate well-known, trusted public RPC providers for dual verification of the block tip.
[/quote]

But will you still be using the idempotent proxy in between the canister and these RPC providers?
This would still mean that the proxy would need to be trusted.

[quote="zensh, post:24, topic:30624"]
The CK-Doge canister will also perform hash chain validation on the block data it fetchs.

https://github.com/ldclabs/ck-doge/blob/main/src/ck-doge-canister/src/store.rs#L334
[/quote]

It doesn't seem to validate proof of work. This would make it much harder for a malicious proxy or RPC provider to feed invalid blocks.

-------------------------

zensh | 2024-06-14 07:46:07 UTC | #26

[quote="domwoe, post:25, topic:30624"]
It doesn’t seem to validate proof of work. This would make it much harder for a malicious proxy or RPC provider to feed invalid blocks.
[/quote]

In the current implementation, trust in the RPC provider is indeed necessary.

The CK-Doge canister maintains `tip_height` and `tip_blockhash`. It reads the next block hash from `tip_height`, and then retrieves block data using the block hash.
The CK-Doge canister verifies that the block’s hash matches the expected value and that its `prev_blockhash` equals the hash of the previous block (`tip_blockhash`).

If the RPC provider gives CK-Doge canister forged block data, it would need to consistently provide forged data for continued operation. External observers can detect an attack on the CK-Doge canister by examining the `tip_height` and `tip_blockhash`.

Thus, `tip_height` and `tip_blockhash` is crucial for verifying the authenticity of the blocks. If CK-Doge canister retrieves block data from multiple RPC providers, it can validate the data by comparing the `tip_blockhash` from each provider.

I will continue to explore better solutions.

-------------------------

