dfx-json | 2022-04-29 16:00:12 UTC | #1

Hello everyone!

My name is Jason, I am the Engineering Manager of the SDK team at DFINITY. I’d like to announce an exciting change we’re bringing to dfx!

Previously, when running Internet Computer locally, dfx would use a configuration called the System Subnet to deploy canisters and execute their code. This has worked well for the most part, but we have heard from developers that many were faced with challenges when they were ready to migrate to mainnet.

This is because the System Subnet configuration is much more lenient:

* No cycles accounting is done
* Function calls have more generous limits
* There is a higher maximum limit on canister .wasm size

The result is that once code developed locally gets deployed to mainnet, many users hit errors such as “cycles limit exceeded” with no clear indication as to why.

We’re happy to introduce two new subnet types to dfx - `Application` and `VerifiedApplication`. Here, we’ll focus on the `Application` subnet type. This subnet configuration is much more strict - apart from a few bells and whistles, it is essentially the same configuration that is used in mainnet. You should now see errors much earlier in your development lifecycle, and that should lead to fewer errors in production!

Moving forward, this is the default behavior when using dfx. You can always revert to the old behavior if you encounter any issues with the new configuration. The subnet type can be configured using the `defaults.replica.subnet_type` key in `dfx.json`. The possible values are `system`, `application`, and `verifiedapplication`.

You may also now encounter a point where you must top up your canisters when running Internet Computer locally. This makes for a fine opportunity to learn how to deal with these types of errors _before_ promoting your code to mainnet.

To top up your canisters locally, you can leverage the “fabricate-cycles” command, providing an amount in ICP or cycles:
```
dfx canister fabricate-cycles
```

So to recap, the application subnet introduces the following changes to your local development experience:

* The same instruction limits for messages
* Proper cycles accounting

This is available as of [version `0.10.0-beta.1`](https://github.com/dfinity/sdk/releases/tag/0.10.0-beta.1). Try it out for yourself and let us know what you think! As always, if you encounter any issues, please let us know by dropping a line here in the forum or flagging an issue in our GitHub and we will get right on it.

We’re excited about what this change brings, and we hope you will be too. Let’s build!

-------------------------

lastmjs | 2022-04-29 16:08:10 UTC | #2

This is excellent! About `Proper cycles accounting`, does this mean we can measure cycle usage locally? I am very interested in benchmarking my code, I want to be able to call a query or update method and have returned to me the exact cycles usage during that call. Is this possible?

-------------------------

dfx-json | 2022-04-29 18:45:06 UTC | #3

Hi @lastmjs. This functionality is not available yet, but we are working on it! It's queued to enter our SDK roadmap.

-------------------------

chenyan | 2022-04-29 18:48:16 UTC | #4

You could check the cycle balance before and after the call to know the cycle usage. 

We also have an CLI tool to instrument the canister similar to how we profile cycles in the Playground: https://github.com/dfinity/ic-wasm/#instrument-experimental. But it needs more tooling support to make it user friendly.

-------------------------

lastmjs | 2022-04-29 18:48:20 UTC | #5

Great to hear! If it helps to know how to prioritize it, benchmarking is something I want for Azle (TypeScript CDK) and Kybra (Python CDK) before releasing a 1.0 for both.

-------------------------

Maxfinity | 2022-04-29 18:50:18 UTC | #6

[quote="dfx-json, post:1, topic:12527"]
To top up your canisters locally, you can leverage the “fabricate-cycles” command, providing an amount in ICP or cycles:

```

```
[/quote]

Hey Jordan, we have been developing a really useful Rust CDK for canisters. I would love to discuss it with you, as there may be some interesting use cases for your CDKs.

-------------------------

lastmjs | 2022-04-29 19:04:00 UTC | #7

Awesome, could you DM me on OpenChat, Telegram, or Twitter? @lastmjs

-------------------------

Fulco | 2022-04-29 20:07:08 UTC | #8



-------------------------

skilesare | 2022-04-30 04:03:19 UTC | #9

Any chance we could get a god mode subnet type with a massive wasm size and massive cycle limit.  This is necessary for testing. You have to reference classes and instantiate them from test runners and you quickly get above the 3.7MB size limit for wasm.  It would be great if there we a place to configure that.

-------------------------

nomeata | 2022-04-30 09:40:07 UTC | #10

[quote="chenyan, post:4, topic:12527"]
We also have an CLI tool to instrument the canister similar to how we profile cycles in the Playground:
[/quote]

Is this kept up to date as the execution team updates the costs of various system calls etc?

Also, can this (be made to) replace https://github.com/dfinity/motoko/tree/master/wasm-profiler so that we don't maintain multiple copies of the same idea?

-------------------------

jzxchiang | 2022-05-02 05:18:43 UTC | #11

This is really exciting! It seems like 0.10.0 will be a big release.

-------------------------

chenyan | 2022-05-02 16:31:05 UTC | #12

Once the replica implements `ic0.performance_counter`, we can make sure the cost are in sync.

I hope eventually we can replace `wasm-profiler`, but we probably won't implement support for WASI API, as this library is for canister only.

-------------------------

nomeata | 2022-05-03 07:07:04 UTC | #13

I am not sure if using `ic0.performance_counter` will be as good as what we have now: With `wasm-profiler`, the code that does the profiling and printing/storing of values is not profiled; if we use `ic0.performance_counter` the profiling code will itself be included. _Maybe_ the overhead can be somehow be measured and subtracted again, though. We’ll see.

-------------------------

chenyan | 2022-05-03 18:56:42 UTC | #14

Good point, especially with storing logs in stable memory, the recorded cost can be high. We can let users to choose which approach to use. The only benefit of using `performance_counter` is that we can stay in sync with the cost table used by the replica.

-------------------------

Severin | 2022-05-04 06:22:07 UTC | #15

dfx 0.10.0 is ready for manual installation and testing. You can upgrade to/install it with `DFX_VERSION="0.10.0" sh -ci "$(curl -fsSL https://smartcontracts.org/install.sh)"`

-------------------------

nomeata | 2022-05-04 06:40:58 UTC | #16

[quote="chenyan, post:14, topic:12527"]
The only benefit of using `performance_counter` is that we can stay in sync with the cost table used by the replica.
[/quote]

Now that `ic` is public, maybe there is a hope that the instrumentation code can be it's own crate, and flexible enough so that your `ic-wasm` tool can simply depend on it as a library? The `wasm-profiler` initially was a copy of the instrumentation in the `replica`, so maybe that’s possible?

Until, of course, the instrumentation and cost accounting is no longer a pure function and starts to depend on subnet configurations etc, then things become more messy.

-------------------------

jzxchiang | 2022-05-05 21:20:15 UTC | #17

I noticed in the dfx 0.10.0 release notes that:

> New feature: Install arbitrary wasm into canisters
> You no longer need a DFX project setup with a build task to install an already-built wasm module into a canister ID. The new --wasm <path> flag to dfx canister install will bypass project configuration and install the wasm module at <path>. A DFX project setup is still recommended for general use; this should mostly be used for installing pre-built canisters. Note that DFX will also not perform its usual checks or API/ABI/stable-memory compatibility in this mode.

Do I still need to specify the canister name in `dfx.json` to install the canister using this flag? I'm not quite sure what the purpose of this flag is. If I reference the wasm in my `dfx.json` with some name (e.g. `Foo`), can I then import it from my other (Motoko) canister using the `import Foo "canister:Foo"` syntax?

-------------------------

skilesare | 2022-05-06 00:07:47 UTC | #18

It was mentioned on the call that ingress message size was a limitation of Wasm. But I know that an application subnet we can install a binary is up to 3.7 MB. What is the actual top limit that the wasm can take in a single ingress message?

-------------------------

AdamS | 2022-05-06 17:36:22 UTC | #19

You only need the canister name in dfx.json in order to use the short name; you can use a principal whenever you like. The purpose of this flag is to allow you to do things like install II with a single command instead of it being part of your project setup. There are a couple more features before that exact workflow becomes a reality but --wasm should still be useful in its present form.

-------------------------

jzxchiang | 2022-05-12 21:17:47 UTC | #20

Is there a way to fabricate cycle *deductions*? I'd like to drain all of my canister's cycles to test error handling.

-------------------------

Severin | 2022-05-13 06:31:05 UTC | #21

We don't have any functions for that. You can use the `--with-cycles` flag when deploying and only adding a few cycles so it'll run out sometime soon. It takes a few minutes of fiddling until you find the right amount, but it should work for some crude testing.

-------------------------

GLdev | 2022-05-13 06:32:21 UTC | #22

You could call_with_cycles() another canister and "drain" your test canister this way.

-------------------------

rudy | 2022-05-28 00:36:46 UTC | #23

What about the rest of benchmarking? Is it similar in a local environment vs mainnet? For example:

- does the local artificial consensus delay (i.e. an update call vs a query call) include a simulation of network effects that mainnet nodes would have?
- in mainnet, there is a limit for the length of the incoming messages queue, and ingress messages maybe be rejected/ignored. Is there a similar limit on the local environment?

-------------------------

ulan | 2022-05-31 17:16:47 UTC | #25

> * does the local artificial consensus delay (i.e. an update call vs a query call) include a simulation of network effects that mainnet nodes would have?
> * in mainnet, there is a limit for the length of the incoming messages queue, and ingress messages maybe be rejected/ignored. Is there a similar limit on the local environment?

I didn't test it, but the consensus parameters and the message limits should be the same as on the mainnet.

-------------------------

willguest | 2022-10-19 12:11:09 UTC | #26

I just ran out of cycles in local deployment for the first time and arrived here. Using dfx 0.11.2, the command to top these up is now coming from the ledger command instead of canister:

> dfx ledger fabricate-cycles --all

-------------------------

