Samer | 2024-01-29 01:40:43 UTC | #1

A concept that deserves more attention is that of the canister that is fully owned by the user.

In this post I want to open the discussion around "user friendly fully owned canisters" (perhaps UFFOCs or FOCs), their security risks and implementation strategies. I will also share some achievements so far with my little pet project web3disk.app

## Problem
Enabling the end user to create, own and fully control a single canister assuming the user only wants to use a frontend in a browser and II authentication. 

Currently, fully owning a canister requires technical knowledge and isn't straight forward from only a frontend in a browser. 

## Full ownership risks
If the canister serves its own frontend and is only controlled by an II principal, then the domain at which the canister is accessed is a central point of failure. Furthermore, if the frontend breaks or isn't accessible for whatever reason, access and control of the canister is lost. 

### Challenges
1. A single canister that serves its own frontend is preferable for simplicity

2. The only controlling principals of the canister should be solely owned by the user.

3. The user needs to be able to charge their canister via the frontend with cycles.

4. The user needs to be able to upgrade their canister

5. Canister creation should be user friendly and not require technical knowledge. 

### Possible solutions
1. The canister needs to serve its own certified frontend assets via query http_request to provide a UI for the canister in the browser.
 
2. Ownership should be fully controlled by the user and thus the minimal approach is that
- The canister is controller of itself
- User II principal at CANISTER_ID.ICPDOMAIN is a controller
- The user may add their NNS frontend principal as an extra controller under "my canisters"
- The user can add and remove any controller via the UI 

If the user for some reason has issues accessing the canister via its frontend UI, they could use a user friendly service or tool to (temporarily) authenticate to the canister using its domain as the "derivation origin" and perform emergency actions like upgrading their canister. 

**This off course only works if the user consciously chose beforehand to add this "backup" service to their canister's "alternative origins" list.** 

3. This one is trivial and possible through the frontend UI and the canister backend itself. 

4. This is only possible through the frontend because a canister cannot upgrade itself. Therefore, the frontend needs to fetch an updated wasm from a trusted source and upgrade the canister. 
Since an upgrade either succeeds or fails, the user can't 'get stuck' in the upgrade process and will always be able to reload the frontend, be it from the old version or the new one.  

5. See below

### Ownership means responsibility
After canister creation, the user will have full responsibility over the canister, its cycle balance and whatever functionality it offers. 

Even if the user used a service or tool to create the canister, the service is not responsible for what the user does with his/her canister. 

## Implementation
Web3Disk.app is a blockchain storage solution that enables fully owned secure e2e encrypted storage accessed in the browser and controlled by an II.

Anyone can create a Web3Disk and own it in seconds (free of charge) using the Web3Disk Service. A user creates and takes ownership of his/her canister by authenticating to the Web3Disk Service first and then to their own canister by using its domain as the 'derivation origin'. 

**The service then grants full ownership to the user.** The user then can access and manage their canister at its domain.

This all happens in a easy-to-use UI without any technical knowledge required by the user.

### Next steps
Launching an early version for initial feedback.

Implementing vetKey e2e encryption would make web3disk a serious alternative to secure online storage for small data sizes. The focus would be on security and less so on advanced file management and large data features. 

Open sourcing. Then technical users could build and deploy their own Web3Disk without using any service. 

Looking forward to hear your thoughts!

Canister creation via Web3Disk Service
![image|282x500](upload://i0Lwo1IN3LOQd1vzTXUeQ71fdnr.png)

Fully owned user canister
![image|300x500](upload://pVlHTdINsFXXuI5FoLhH3cn42WO.png)

Minimal frontend deps for robust and reliable frontend
![image|350x200](upload://ocuyCu9qW9tHZlekMWg3EM7TMUQ.png)

-------------------------

icpp | 2024-01-30 02:45:34 UTC | #2

Interesting!
Is it available in a github repo?

And how would I store and retrieve data?

-------------------------

Kjae | 2024-01-30 04:03:44 UTC | #3

Is this Account Abstraction?

-------------------------

Kjae | 2024-01-30 04:14:33 UTC | #4

Are kubernetes allowed?

-------------------------

Samer | 2024-01-31 11:17:22 UTC | #5

It is not open source yet.

Uploading files initially one by one or in batch. I'm, also looking at [File System Access API](https://wicg.github.io/file-system-access/) in the longer term for directory sync feature from the browser

-------------------------

Samer | 2024-01-31 11:22:41 UTC | #6

[quote="Kjae, post:3, topic:27070"]
Account Abstraction
[/quote]

No, not really. 

Web3Disk is not a wallet or DeFi service of any kind. The storage part is as boring as any other online storage.

The exciting part is that the owner fully owns the Web3Disk storage canister and controls it with an Internet Identity only at its frontend domain in the browser.

-------------------------

Samer | 2024-02-22 10:02:35 UTC | #7

The [cycles-ledger](https://forum.dfinity.org/t/improving-the-cycle-management-experience/19895/31?u=samer) opens up new possibilities for Fully Owned Canisters.

A ***service*** could serve a frontend that enables the user to:

-> Login with II and obtain a principal valid at the service frontend
-> Direct the user to deposit ICP or cycles
-> Create their own canister
-> Install a wasm that also serves certified frontend assets (and most importantly, has the service domain listed in the `/.well-known/alternativeOrigins` file)

-> And finally, ***take full ownership of the canister*** by obtaining a principal through II again, with this time the new canister domain as the `derivationOrigin`. 

This allows the service frontend to update the controllers of the canister to only the user II principal (and the canister itself should also be a controller of itself)

I'm also working out some safety mechanisms to allow the user ownership options ranging from 'full paranoid mode' to shared ownership with the service used.

-------------------------

Samer | 2024-02-22 10:13:36 UTC | #8

Also, lately I've been marketing this as follows:

***"Allow users to own a piece of the Internet"***

A full User Owned Canister serving its own frontend is like a little piece of software hosted by the Internet and fully owned and managed by user without any technical knowledge, through easy UI.

-------------------------

Severin | 2024-02-22 10:29:05 UTC | #9

[quote="Samer, post:7, topic:27070"]
I’m also working out some safety mechanisms to allow the user ownership options ranging from ‘full paranoid mode’ to shared ownership with the service used.
[/quote]

The asset canister that's shipped with dfx for example has multiple permission levels defined in user space. You could e.g. only give the user controller rights over the canister and then give some other system some other level of access

-------------------------

Samer | 2024-02-22 10:36:55 UTC | #10

That is in fact exactly what I was doing with Web3Disk, which was a fork of the assets canister.

There are good reasons for forking the asset canister, one of them being permissions built in, the other being certified assets and batch uploading system.

But it does make the project heavy because of the whole sdk repo as a dependency (custom build of the asset canister)

I'm slowly moving towards an NPM lib and Rust crate that have all you need to develop a FOC service

-------------------------

Samer | 2024-02-22 12:52:16 UTC | #11

Canister wallets, another name for fully owned canister or wapp is a clear rrend on IC

https://twitter.com/danostrovsky/status/1760381473981444397?t=05zKNdrke9jYIf9XsL4nGQ&s=19

-------------------------

Samer | 2024-03-01 18:51:50 UTC | #12

If the idea of Wapps / Fully Owned Canisters / NFID Vaults catches on, it could 10.000x IC usage very quickly. 

Perhaps it could be marketed as "owning a piece of the internet"

What do you think?

-------------------------

Samer | 2024-04-01 10:30:52 UTC | #13

Update:

1.
The initial setup for this project included a backend service provided by me. This was a solution to create a canister for the user before granting ownership.

With the new cycles ledger, the process of creating a canister on behalf of the user can be improved. The user now only needs to rely on a frontend that creates, manages and grants ownership to the created canisters.

No developer service required

2.
Also, Web3Disk depended on the certified asset canister and had to pull in the whole dfinity sdk repo. This will be deprecated as well, making the project more light weight.

3.
The project is also moving away from the specific use case of file storage to a more general framework of user owned canisters. 

Currently Im thinking of a NPM package and Rust crate that together provide everything you need to develop services that could be installed and owned by the user

-------------------------

dfisher | 2024-04-02 07:13:39 UTC | #14

Sameer, this is the future. Thanks for your efforts. 

Canister wallets are more convenient, offer better security, and will be the majority of all wallets in the future.

-------------------------

Samer | 2024-04-02 14:25:06 UTC | #15

Full ownership and verifiable onchain AI.

Only on IC!

-------------------------

cryptoschindler | 2024-04-22 07:17:45 UTC | #16

If you serve the service interface from a canister anyways, you can achieve your functionality without the cycles ledger as well. You can seen an example of a canister factory that creates user owned canisters on demand [here](https://github.com/letmejustputthishere/icrc7_launchpad).

To my understanding in your scenario the service frontend canister would need to list the newly spun up user canister as an alternativ origin, not the other way around. It also seems like there is a limit of 10 alternative origins and a number of other caveats in the the [spec](https://internetcomputer.org/docs/current/references/ii-spec/#alternative-frontend-origins). But maybe @frederikrothenberger can share his thoughts on this approach.

You could maybe
1. log into the service interface with II to create a new canister owned by that principal
2. log into the user owned canister with II, copy the principal
3. through the service interface, transfer ownership to the principal from step 2.

-------------------------

Samer | 2024-04-22 08:48:16 UTC | #17

[quote="cryptoschindler, post:16, topic:27070"]
you can achieve your functionality without the cycles ledger as well
[/quote]
Correct. There are several ways now including sending ICP to CMC and then `notify_create_canister`.

[quote="cryptoschindler, post:16, topic:27070"]
You can seen an example of a canister factory that creates user owned canisters on demand [here](https://github.com/letmejustputthishere/icrc7_launchpad).
[/quote]
I could not immediately find the code that spawns canisters in that starter example. Can you give a more specific link?

Nice starter btw! The stack of the future :slight_smile: 

[quote="cryptoschindler, post:16, topic:27070"]
It also seems like there is a limit of 10 alternative origins
[/quote]
Correct. The ability to set an `alternative origin` allows one to manage their canister from another frontend domain. This might be important in case the frontend breaks for whatever reason.

**Security**
It's important to consider the risks when creating canisters for the user that serve their own frontend. The `icp0.io` domain is a central point of failure for instance. 

Several security policies can be implemented ranging from 'super paranoia mode' to 'I trust the developer more than I trust myself'.

In any case, the user should be well informed about these possibilities

-------------------------

cryptoschindler | 2024-04-22 09:27:32 UTC | #18

[quote="Samer, post:17, topic:27070"]
I could not immediately find the code that spawns canisters in that starter example. Can you give a more specific link?
[/quote]

https://github.com/letmejustputthishere/icrc7_launchpad/blob/main/backend/factory.mo

-------------------------

Samer | 2024-04-22 13:27:01 UTC | #19

[quote="cryptoschindler, post:16, topic:27070"]
You could maybe

1. log into the service interface with II to create a new canister owned by that principal
2. log into the user owned canister with II, copy the principal
3. through the service interface, transfer ownership to the principal from step 2.
[/quote]

Yes, this is possible, but it also means:
- Its a bit less user friendly because the user needs to copy and paste a principal
- A (possibly irrevocable) error can be introduced if the user accidently pastes another principle.

-------------------------

cryptoschindler | 2024-04-23 06:14:43 UTC | #20

Maybe you can come up with a more user-friendly flow :thinking: Like scanning a QR code or smth

-------------------------

Samer | 2024-04-23 10:11:59 UTC | #21

The current flow is to use II auth at an alternative origin. This solves both challenges mentioned above

-------------------------

cryptoschindler | 2024-04-23 10:17:19 UTC | #22

Maybe I'm misunderstanding you but afaik you cannot use unlimited alternative origins at your service frontend canister, so how would that work? I don't think you're able to set the alternative origin on the "wapp" canister, only the other way around.

-------------------------

Samer | 2024-04-23 12:00:04 UTC | #23

[quote="cryptoschindler, post:22, topic:27070"]
I don’t think you’re able to set the alternative origin on the “wapp” canister
[/quote]

As I understand, (and have implemented and tested in the current setup) the 'wapp canister' or in this case the Web3Disk that is spawned for each user, should have an `alternativeOrigin` listed in its `/.well-known/alternativeOrigins`

That alternative origin could be the spawning service and indeed up to 10 entries. 

I was thinking of having these alternative origins listed:
`spawning_service.com` domain
`spawining_canister_id.icp0.io`
`user_added_domain.com` backup domain added by user
`user_added_alternative_canister_id.icp0.io` backup domain added by user

Then at any of these alternative domains, we could `authClient.login` with `derivationOrigin` set to the user owned 'wapp' canister at `user_owned_canister_id.icp0.io`

The alternative origins can be set by the user. If for any reason the user can't acces his user owned canister at `user_owned_canister_id.icp0.io` they could use another origin from which they can manage and possibly reinstall their canister wasm.

The user only needs to auth with II. Never copy a principal. In fact never even see their principle.

-------------------------

cryptoschindler | 2024-04-23 15:48:06 UTC | #24

Then you can derive the same Principal from the wapp canister on the service canister, but not the other way around. So how would that flow look like if you first need to sign into the service canister with II to be able to spawn the wapp canister in the first place?

-------------------------

Samer | 2024-04-23 16:12:51 UTC | #25

You create another instance of `authClient` with custom storage.

After the principal is obtained and used by the spawning service, we drop the principal from browser storage.

-------------------------

cken | 2024-04-24 21:15:19 UTC | #26

I’ve been working on a similar idea. I think IC is a great concept for small applications that can be completely owned by the user and require minimal storage and processing on the server side.

A big problem with crypto applications does always seem to be recovery. I wonder if some kind of DAO could be established that uses multisig keys to provide a knowledgeable recovery option for these types of containers, so no single individual has superuser capability over the canister but you could request a restore from several if necessary.

I like to think of it like notaries in the USA. Trusted individuals that buy into the system to provide the service of proof of identity in exceptional cases.

-------------------------

Samer | 2024-04-25 09:27:40 UTC | #27

[quote="cken, post:26, topic:27070"]
A big problem with crypto applications does always seem to be recovery
[/quote]

I agree. And a DAO may be able to solve some of the issues related to canister recovery if there is a community to support it. A more simple intermediate solution may also be a 'blackholed' canister that is publicly known. 

Consider these recovery related problems:
1. A user spawned a canister and forgot their canister id and thus the URL at which to access it
2. A user wants to use a (stand alone) frontend that spawns canisters without storing any info about the canister creation event. 

Both could be solved with a publicly known blackholed registry canister. 

1. During canister creation, the user may choose to register their canister id with the blackholed registry. The blackhole will only reveal this canister id to the owner after auth with II. 

2. This is subtle but there exists a time window where the canister is created with user principal at spawning domain, but not fully owned by user principal at new canister domain. To take full ownership of a canister with II at its own `icp0.io` domain, one must know the canister id in advance, thus the canister needs to exist. If for whatever reason, the creation process is interrupted after canister creation and before full ownership, the user may loose ICP / cycles and not able to recover the freshly spawned canister. The spawning application must then rely on browser storage to temporarily remember this new canister, which we want to avoid. A blackholed registry can solve this.

Another solution to this might be a fresh empty canister buffer in the blackholed registry. Each new user could immediately take ownership of a pre existing canister owned by the blackholed registry. The user will also cover the creation fee to fill the canister buffer with a new canister plus a small fee to keep the blackhole funded.

-------------------------

Samer | 2024-05-16 13:07:22 UTC | #28

![Screenshot_20240516_150546_Brave|690x318](upload://wNINwtyL194aD6gqFnXsBrfxCiO.png)

From the new [roadmap](https://internetcomputer.org/roadmap)

Curious to learn more!

-------------------------

