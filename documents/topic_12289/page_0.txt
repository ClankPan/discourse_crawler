Jesse | 2022-04-19 22:36:28 UTC | #1

This question comes as a result of conducting further research to resolve the issue that I'm having in [this thread](https://forum.dfinity.org/t/reject-text-ic0302-canister-has-no-update-method-readwallettransaction/12260/2). I think the cause of the issue that I'm having is that I'm upgrading a canister class that is dynamically created from within my main.mo file- making my backend canister a controller of each of the child canisters that it created, but I'm not a controller. 

I'm not the controller of those child canisters, so I'm unable to upgrade them. so how do I upgrade them? is there an upgrade function that I can call from within the parent canister that can initiate the canister upgrade for the child canister class? I've seen threads with similar questions but they're all from months ago with no clear resolutions.

-------------------------

claudio | 2022-04-20 00:45:08 UTC | #2

There is currently no language or library support for doing this though I agree there should be.

Some (hopefully not dead-end) suggestions for now:

The parent actor could be upgraded to add additional controllers to its children, which you could then manually upgrade using dfx. 

Alternatively, add a carefully locked down helper method to the parent  that, given a new binary as blob, uses the IC ManagementCanister to install the new binaries for each child.

Any other suggestions are most welcome.

-------------------------

jzxchiang | 2022-04-20 05:14:30 UTC | #3

Is this easier done in Rust than in Motoko, or do they both face the same obstacles?

-------------------------

GLdev | 2022-04-20 07:30:26 UTC | #4

In rust it's just a matter of passing an arg when calling canister_install and you read it in the init() function of the child canister.

I've done exactly this in the scaling quickstart bounty. [Sending here](https://github.com/GLicDEV/quickstart_scaling/blob/e258cc8ca513b04f3b2fa970f100e7bbef263c3b/src/quickstart_scaling_index/src/businesslogic.rs#L252) and receiving the args [here](https://github.com/GLicDEV/quickstart_scaling/blob/e258cc8ca513b04f3b2fa970f100e7bbef263c3b/src/quickstart_scaling_bucket/src/lifetime.rs#L34).

-------------------------

peterparker | 2022-04-20 08:16:14 UTC | #5

You can upgrade the child canister through your main canister.

You -> send bytes to main -> main send bytes to child.

At least it what I do in my project, seems to work so far ;)

In motoko it starts there (your "main" is my "manager"): https://github.com/papyrs/ic/blob/09b7731800210f7273de11526c7d65ad4e88f84b/canisters/src/manager/manager.mo#L184

In nodejs: https://github.com/papyrs/ic/blob/main/scripts/ic.installcode.mjs

(I still got in plan to release some blog posts about interacting from NodeJS with Motoko canisters, hopefully will have the time soon to write about it)

-------------------------

Jesse | 2022-04-21 02:06:25 UTC | #6

@peterparker , I think this was exactly what i need. I'm attempting to implement it but am getting an error with the `loadWasm()` method that you have here https://github.com/papyrs/ic/blob/09b7731800210f7273de11526c7d65ad4e88f84b/scripts/ic.installcode.mjs#:~:text=const%20loadWasm%20%3D%20(type,%7D%3B

The error that I'm getting is: 

```
Uncaught (in promise) File not found
```

here is my code:


```
import {readFile} from 'fs-web';

const loadWasm = async (type) => {
        console.log("Working Directory: ",`${process.cwd()}.dfx/ic/canisters/${type}/${type}.wasm`);
        
        const buffer = await readFile(`${process.cwd()}.dfx/local/canisters/dtc/dtc.wasm`);
        return [...new Uint8Array(buffer)];
    };
```

I'm assuming the issue is with the file path. when I call `process.cwd()` its just returning `/`. Is that what it should be returning? Could you share with me what your `process.cwd()` returns so that i can compare it to your file structure to get the correct file path?

-------------------------

peterparker | 2022-04-21 05:09:21 UTC | #7

`process.cwd()` is a NodeJS built-in command. You can replace it with an absolute directory path to your file if it blocks you.

> The `process.cwd()` method returns the current working directory of the Node.js process.

https://nodejs.org/api/process.html#process_process_cwd

-------------------------

Jesse | 2022-04-21 05:29:43 UTC | #8

Do you have an example of what the absolute path looks like when the app is deployed to the IC as opposed to when it’s deployed locally? I’ve tried every file path i Can think of. Still seeing this error.

-------------------------

peterparker | 2022-04-21 06:03:01 UTC | #9

Oh I see. My script works locally or on the server side - i.e. on a NodeJS environment not in the browser. It needs to be able to access the file system to read the wasm that has been compiled. Does that answer your question?

-------------------------

Jesse | 2022-04-21 06:16:09 UTC | #10

Not quite. My question is a two-parter. 1.) can you confirm that it is indeed possible to access the wasm files from the front end? And 2.) if it is the case that this is possible, how should the file path be defined?

-------------------------

peterparker | 2022-04-21 06:21:48 UTC | #11

[quote="Jesse, post:10, topic:12289"]
1.) can you confirm that it is indeed possible to access the wasm files from the front end?
[/quote]

Yes and no 😉

No: you cannot program a script that runs in the browser which would for example read a file from a local or server path like `/my/machine/local/something.wasm` automatically and directly

Yes: you can use the Filesystem web api or an `<input type="file">` that load a file but this would need a user interaction

-------------------------

Jesse | 2022-04-21 06:38:44 UTC | #12

```
<input type=“file”> 
```

Looks like the best option right now. I didn’t know it was possible to set up a NodeJs server that runs on the IC. I’ll have to look into setting one up.

-------------------------

peterparker | 2022-04-21 06:41:12 UTC | #13

[quote="Jesse, post:12, topic:12289"]
I didn’t know it was possible to set up a NodeJs server that runs on the IC. I’ll have to look into setting one up.
[/quote]

No no that's not possible. I was just mentioning to answer your question.

Let me know if it works out with the input.

-------------------------

Jesse | 2022-04-21 06:53:04 UTC | #14

What server is it that you have set up that allows you to call the fs.readFileSync function within your project?

-------------------------

peterparker | 2022-04-21 07:30:06 UTC | #15

I run the script locally 😅

Any server or CI that has NodeJS and a filesystem context can execute `fs.readFileSync`.

-------------------------

Jesse | 2022-04-21 07:35:28 UTC | #16

Ahhh. That makes sense. Thanks for explaining 🙏🏾.

-------------------------

peterparker | 2022-04-21 07:44:28 UTC | #17

My pleasure, keep me posted

-------------------------

Jesse | 2022-04-22 00:20:40 UTC | #18

ok. I think I screwed something up. Now I'm getting this error in the browser console:

```
index.js:2 Uncaught (in promise) Error: Call was rejected:
  Request ID: b7118a33259f089463a9c200c6d6e3223bb1f03043d8600f665f6549fc614b09
  Reject code: 5
  Reject text: Canister cxi6d-5iaaa-aaaap-qaaka-cai trapped explicitly: IDL error: too few arguments v(Nr(date:t,draft:b,emailOne:t,emailThree:t,emailTwo:t,entryTitle:t,file1MetaData:6=r(fileName:t,fileType:t,lastModified:I),file2MetaData:!6,location:t,lockTime:I,read:b,sent:b,text:t,unlockTime:I))r(dedications:t,dob:t,name:t,pob:t,preface:t)
```

This comes after I updated the child canisters using the strategy that you suggested @peterparker. Any idea why I would be getting a `too few arguments` error? and how I'd resolve this? The canisters did upgrade without throwing any errors. But now, when I try to call the backend to retrieve the data within the canister, this error pops up.

My code:
as I previously mentioned, I decided to create an interface on my frontend that allows me to upload the wasm file and press a button that takes that wasm file and performs the necessary procedures. 

**front end:**

```
import { IDL } from "@dfinity/candid";


const handleUpgrade = async () => {

        let promises =[];

        const wasmModule = await loadWasm();

        const principalsList = await actor.getPrincipalsList();

        principalsList.forEach((principal) => promises.push(upgradeJournalData(principal, wasmModule)));

        await Promise.all(promises);

        console.log("wasm module: ",wasmModule);
    };
```
```
const upgradeJournalData = async (principal, wasmModule) => {

        console.log(`Upgrading: ${principal.toText()}`);
        const arg = IDL.encode([IDL.Principal], [principal]);
        await actor.installCode(principal, [...arg], wasmModule);
        console.log(`Done: ${principal.toText()}`);

    };
```

function that takes the wasm file buffer and returns a Uint8Array from it.
```
const loadWasm = async () => {

        const buffer = await getArrayBuffer(inputRef.current.files[0]);
        return [...new Uint8Array(buffer)];
    };
```

function that takes the wasm file and returns the buffer from it:

```
const getArrayBuffer = (inputFile) => {
        const reader = new FileReader();

        return new Promise((resolve, reject) => {
            reader.onload = () => {
                resolve(reader.result);
            }
            reader.readAsArrayBuffer(inputFile)
        
        });
    }; 
```

**Back end**

```
public shared(msg) func installCode( userPrincipal: Principal, args: Blob, wasmModule: Blob): async() {
        let callerId = msg.caller;

        let profile = Trie.find(
            profiles,
            key(callerId),
            Principal.equal
        );

        switch(profile){
            case null{
                throw Error.reject("Unauthorized access. Caller is not an admin.");
            };
            case ( ? existingProfile){

                if (Option.get(existingProfile.userName, "null") == "admin") {

                    let theUserProfile = Trie.find(
                        profiles,
                        key(userPrincipal),
                        Principal.equal
                    );

                    switch(theUserProfile){
                        case null{
                            throw Error.reject("No profile for this principal.");
                        };
                        case ( ? existingProfile){
                            let userJournal = existingProfile.journal;
                            let journalCanisterId = Principal.fromActor(userJournal);

                            await ic.install_code({
                                arg = args;
                                wasm_module = wasmModule;
                                mode = #upgrade;
                                canister_id = journalCanisterId;
                            });

                        };
                    };

                } else {
                    throw Error.reject("Unauthorized access. Caller is not an admin.");

                }

            };

        };
    };
```


The canister Id that I passed into the `ic.install_code` function is the principal of the user's canister actor. when the users' canisters are created from the actor class, their principal is passed in as an argument.

-------------------------

peterparker | 2022-04-22 05:33:34 UTC | #19

[quote="Jesse, post:18, topic:12289"]
```
const arg = IDL.encode([IDL.Principal], [principal]);
await actor.installCode(principal, [...arg], wasmModule);
```
[/quote]

Does your child canister as a principal as parameter or more parameters?

In above piece of code you path one principal as argument for the install code operation. This matches for example the definition in Motoko of a child actor such as 

```
actor class DataBucket(owner: Principal) = this {
};
```

So if you have more or less arguments, that's maybe the root cause of the issue?

-------------------------

Jesse | 2022-04-22 07:58:21 UTC | #20

my child canister class has the following signature:

```
shared(msg) actor class Journal (principal : Principal) = this {}
```
Maybe the `shared ` keyword needs to be accounted for in the `IDL.ecode()` function? If so, how would i do that?

Also, the wasm module that i passed into the install_code() method is the wasm module i retrieved by taking my code, and deploying it to another canister on the IC. The code works just fine on the IC if it’s a newly deployed canister. So i took the backend canister’s wasm module module of the newly deployed canister and used that to pass into the install_code function to upgrade the child canisters of my already-deployed canisters running on the IC

-------------------------

peterparker | 2022-04-22 08:04:11 UTC | #21

[quote="Jesse, post:20, topic:12289"]
Maybe the `shared ` keyword needs to be accounted for in the `IDL.ecode()` function? If so, how would i do that?
[/quote]

Not sure but I would say probably not.

[quote="Jesse, post:20, topic:12289"]
i took the backend canister’s wasm module module of the newly deployed canister
[/quote]

Did you select the `main.mo` or the `Journal.mo` wasm code to install the code (`wasmModule`)?

-------------------------

Jesse | 2022-04-22 08:10:03 UTC | #22

Good question. I wasn’t aware that the Journal.mo had its own wasm file. Where do i find it?

In the `.dfx/ic/canisters` Directory, i see three folders: one for my backend, one for my front end and one titled “idl”. The one titled is empty, and the the folder for my backend has only one wasm file. That’s the wasm file i used

-------------------------

peterparker | 2022-04-22 08:13:28 UTC | #23

also in `.dfx` in a folder next to your `main.mo` wasm code

however it might not always present and not always up-to-date with the last build depending of the settings. there is probably a nice way to generate it with a `dfx` command line but I am not big with the command line, so I generate it with a workaround.

1. temporarly, in `dfx.json` add the `Journal.mo`
2. `dfx build` or `dfx deploy`
3. above command error will ends in error but it's alright
4. you have the wasm code

don't forget to revert the change in `dfx.json` when finished.

with `1.` I mean for example following. this is my original config

```
"canisters": {
    "manager": {
      "main": "canisters/src/manager/manager.mo",
      "type": "motoko"
    }
  }
```

then I add my child canister just to generate the wasm code

```
"canisters": {
    "manager": {
      "main": "canisters/src/manager/manager.mo",
      "type": "motoko"
    },
    "child": {
      "main": "canisters/src/child/child.mo",
      "type": "motoko"
    }
  }
```

again there is probably a way to do this by dfx but above generate the wasm code but also the did files what is often handy.

-------------------------

Jesse | 2022-04-22 08:14:16 UTC | #24

Gonna give this a try now

-------------------------

Jesse | 2022-04-22 08:27:45 UTC | #25

@peterparker , you're my hero. It worked! i can finally go to bed. its 3:30 AM where I am :smiling_face_with_tear:

-------------------------

peterparker | 2022-04-22 08:35:40 UTC | #26

awesome, happy to hear that 👍

3:30 am, such a dedication! sleep well

-------------------------

claudio | 2022-04-23 02:28:28 UTC | #27

Just to clary, the wasm for an imported actor class is actually embedded in the wasm of the importing code. 

Adding the additional compilation target to the dfx.json, (thus compiling the imported class on its own) has the side-effect of producing the wasm of the imported class as a separate, non-embedded thing.

As far as I know, that's the only way to do this just now.

I've considered making the wasm of an imported class programmatically accessible as a blob somehow, or, alternatively, providing additional functions to perform manual installation/upgrade with all IC parameters exposed in the imported library (in addition to the class constructor), but they all seem like hacky solutions and are difficult to make type safe.

-------------------------

peterparker | 2022-04-22 16:48:23 UTC | #28

Thanks for the explanation Claudio 👍

About the "hacky solutions", no rush for me, I can live with my current "hacky" solution 😉.

-------------------------

icme | 2022-04-27 07:06:04 UTC | #29

Are there any breaking/differing behavior or "got-yas" once a canister is upgraded in the way @peterparker has outlined?

For example, if I would imagine that if I upgrade each of the canisters independently in this way, I would also need to redeploy the main canister as well so that it also has the new correct child canister wasm embedded in it in order to allow the main canister to continue dynamically spawning more child canisters.

Are there any additional side effects to keep in mind when updating settings, uninstalling, stopping, or deleting canisters through the main canister after such an upgrade of all the child canisters?

-------------------------

wusualis | 2022-11-11 17:34:38 UTC | #30

Hello Claudio! 
I was blocked when installing wasm module.
If I install wasm file using ic-install_code interface, such as the following
```
let install_result = await IC_actor.install_code({
            arg = Blob.toArray(some_args));
            wasm_module = Blob.toArray(wasm);
            mode = #reinstall;
            canister_id = new_canister_id;
        });
```

This canister will trapped
```
trapped explicitly: Custom(Trailing value after finishing deserialization
```
when i call a function which inputs is an nested data.

Well,if i install this wasm and specific a candid file using dfx command with `dfx.json` config, it works fine. 
What should i do when using ic-install_code interface? 
Seems it's a type problem.

-------------------------

claudio | 2022-11-11 23:37:07 UTC | #31

Not sure, but can you show me:
* the Candid or Motoko type of the argument to the installed code? 
* the way in which you obtain the blob for the arguments?
* the dfx command that works?

-------------------------

wusualis | 2022-11-12 08:07:57 UTC | #32

Here I have collect something:
1. the Candid or Motoko type of the argument to the installed code
	just normal init arguments, it can be `null` type. It does not affect the call operation.

2. the way in which you obtain the blob for the arguments
wasm load function with node js:
```Node js
import {readFileSync} from 'fs';
​
const loadWasm = () => {
  const localPath = 
     `${process.cwd()}/.dfx/local/canisters/bucket/bucket.wasm`;
  const buffer = readFileSync(localPath);
  return [...new Uint8Array(buffer)];
};
```

3. the dfx command that works
The succeed command
```shell
dfx --identity NFT_trader_E canister call tlwi3-3aaaa-aaaaa-aaapq-cai mint '(principal "ome-principal",    7328:nat, vec { 
    record { "image"; variant { TextContent = "0.jpg" } }; 
    record { "tokenId"; variant { TextContent = "0" } }; 
    record { "name"; variant { TextContent = "Corn #0" } }; 
    record { "description"; variant { TextContent = "Corn #0" } } 
} )'
```

The failed command
```shell
dfx --identity NFT_trader_E canister call tlwi3-3aaaa-aaaaa-aaapq-cai mint '(principal "some-principal",    7326:nat, vec { 
    record { "image"; variant { TextContent = "0.jpg"}   };
    record { "tokenId"; variant { TextContent = "0"}   };
    record { "name"; variant { TextContent = "Corn #0"}   };
    record { "description"; variant { TextContent = "Corn #0"}   };
    record { "attributes"; 
        variant { 
            NestedContent = vec { 
                record { "Background"; variant { TextContent = "light"}   };
                record { "Name"; variant { TextContent = "Chon"}   } 
            } 
        } 
    } 
} )'
```

4. The type about mint:
```
type GenericValue = variant {
  Nat64Content : nat64;
  Nat32Content : nat32;
  BoolContent : bool;
  Nat8Content : nat8;
  Int64Content : int64;
  IntContent : int;
  NatContent : nat;
  Nat16Content : nat16;
  Int32Content : int32;
  Int8Content : int8;
  FloatContent : float64;
  Int16Content : int16;
  BlobContent : vec nat8;
  NestedContent : Vec;
  Principal : principal;
  TextContent : text;
};

type Vec = vec record {
  text;
  variant {
    Nat64Content : nat64;
    Nat32Content : nat32;
    BoolContent : bool;
    Nat8Content : nat8;
    Int64Content : int64;
    IntContent : int;
    NatContent : nat;
    Nat16Content : nat16;
    Int32Content : int32;
    Int8Content : int8;
    FloatContent : float64;
    Int16Content : int16;
    BlobContent : vec nat8;
    NestedContent : Vec;
    Principal : principal;
    TextContent : text;
  };
};

mint : (principal, nat, vec record { text; GenericValue }) -> (Result);
```

5. The error info
```
Error: Invalid vec record {text; variant {Nat64Content:nat64; Nat32Content:nat32; BoolContent:bool; Nat8Content:nat8; Int64Content:int64; IntContent:int; NatContent:nat; Nat16Content:nat16; Int32Content:int32; Int8Content:int8; FloatContent:float64; Int16Content:int16; BlobContent:vec nat8; NestedContent:μrec_2.vec record {_0_:text; _1_:variant {Nat64Content:nat64; Nat32Content:nat32; BoolContent:bool; Nat8Content:nat8; Int64Content:int64; IntContent:int; NatContent:nat; Nat16Content:nat16; Int32Content:int32; Int8Content:int8; FloatContent:float64; Int16Content:int16; BlobContent:vec nat8; NestedContent:rec_2; Principal:principal; TextContent:text}}; Principal:principal; TextContent:text}} argument: "vec { record { \"image\"; variant { TextContent = \"1.jpg\" } }; record { \"tokenId\"; variant { TextContent = \"1\" } }; record { \"name\"; variant { TextContent = \"Corn #1\" } }; record { \"description\"; variant { TextContent = \"Corn #1\" } }; }"
```

-------------------------

claudio | 2022-11-15 23:13:11 UTC | #33

I can't see the error, but spacing out your error message I see:

```
Error: Invalid
vec record {
    text;
    variant {
       Nat64Content:nat64;
       Nat32Content:nat32;
       BoolContent:bool;
       Nat8Content:nat8;
       Int64Content:int64;
       IntContent:int;
       NatContent:nat;
       Nat16Content:nat16;
       Int32Content:int32;
       Int8Content:int8;
       FloatContent:float64;
       Int16Content:int16;
       BlobContent:vec nat8;
       NestedContent:μrec_2.vec record {
         _0_: text;
         _1_: variant {
	     Nat64Content:nat64; Nat32Content:nat32;
	     BoolContent:bool; Nat8Content:nat8; Int64Content:int64;
	     IntContent:int; NatContent:nat; Nat16Content:nat16; Int32Content:int32; Int8Content:int8;
	     FloatContent:float64; Int16Content:int16; BlobContent:vec nat8; NestedContent:rec_2;
	     Principal:principal; TextContent:text}
       };
       Principal:principal;
       TextContent:text
   }
} argument:
"vec { record { \"image\"; variant { TextContent = \"1.jpg\" } }; 
       record { \"tokenId\"; variant { TextContent = \"1\" } }; 
       record { \"name\"; variant { TextContent = \"Corn #1\" } };
       record { \"description\"; variant { TextContent = \"Corn #1\" } }; 
}"
```
@chenyan can you see anything wrong with this? I rarely use candid values directly.

-------------------------

chenyan | 2022-11-16 00:04:49 UTC | #34

So the `install_code` call does succeed, and the problem is only when calling the mint method, right?

I think what's happening is that `dfx` call with canister_id (instead of a project name specified in dfx.json) doesn't fetch the candid file when making calls. Therefore, some of the type isn't inferred properly. Can you try `dfx canister call tlwi3-3aaaa-aaaaa-aaapq-cai mint '...' --candid your_candid_file.did` and see if it works?

-------------------------

