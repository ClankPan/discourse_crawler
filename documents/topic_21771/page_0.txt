domwoe | 2023-11-27 08:36:25 UTC | #1

## Overview

Status: Completed
Project Type: Cooperative/Contest - Multiple workers can submit work and the bounty is shared
Time Commitment: Days - weeks
Experience Level: Intermediate/Advanced
Size: USD 5'000 in ICP (at time of distribution)
Deadline: -

## Description

The Internet Computer can be used to create Bitcoin wallets, where the private key never exists physically, but signatures are generated by a secure multi-party computation among the nodes of a fiduciary subnet. However, for some very high-value custody applications, we might want to increase the security even further.

Bitcoin Script allows to require multiple signatures to spend a UTXO. Hence, we can create a wallet (or even a version of ckBTC) that consists of multiple canisters running on different fiduciary subnets, requesting signatures derived from different master keys  (Currently, we only have two master keys deployed, `key_1` and `test_key_1`).

Hence, the node providers of multiple subnets would need to collude to steal assets.

## Requirements

- The wallet should be able to generate P2WSH addresses to send funds to.
- No single canister (or subnet) should be able to transfer funds.
- The wallet should have a user interface
- It is ok (for now) that a single user principal can orchestrate the transfer of funds.

## Acceptance Criteria

- Service deployed to the Internet Computer
- Proper Readme, see [here](https://github.com/dfinity/grant-rfps/blob/main/repo-checklist.md#blue_book-create-an-informative-readme)
- Video Pitch/Demo (max. 4min)
- Open Source license (MIT or Apache-2.0)

## Evaluation Criteria

- Functionality
- Code quality
- Design/UX

## How to participate?

Post your submission in this thread.
Please be aware that [Terms and Conditions](https://support.dfinity.org/hc/en-us/articles/4401932915860-DFINITY-DEVELOPER-GRANT-PROGRAMS-TERMS-AND-CONDITIONS) of the DFINITY Developer Grants Program apply.

## References

- [Threshold ECDSA](https://internetcomputer.org/docs/current/developer-docs/integrations/t-ecdsa/)
- [Bitcoin Integration](https://internetcomputer.org/docs/current/developer-docs/integrations/bitcoin/)

-------------------------

b3hr4d | 2023-07-28 18:09:37 UTC | #2

Hello everyone,

I'm excited to see the new bounty introduced by DFINITY! It's an excellent opportunity for developers to explore the fascinating world of Bitcoin wallets on the Internet Computer.

As some of you may know, I've been working on a project called [B3Wallet](https://github.com/B3Pay/b3-wallet), a decentralized multi-chain wallet that leverages the power of the Internet Computer. With B3Wallet, the private key never physically exists, and signatures are generated through secure multi-party computation among nodes of a fiduciary subnet.

In addition to B3Wallet, I've also developed a set of libraries called b3_utils, which provide useful functionalities to make wallet creation on the Internet Computer easier and more efficient. You can find the libraries on [docs.rs/b3_utils](https://docs.rs/b3_utils/latest/b3_utils/) and use them as a starting point for your own implementations.

Now, with this new bounty, we have the opportunity to take security to the next level. By creating a wallet that consists of multiple canisters running on different fiduciary subnets and requiring multiple signatures to spend a UTXO, we can enhance the security even further. The node providers of multiple subnets would need to collude to steal assets, making it an incredibly robust solution.

If you're interested in contributing to this exciting project or want to collaborate, I invite you to explore B3Wallet and the libraries that you can find in the project. Let's work together to build innovative and secure Bitcoin wallets on the Internet Computer!

Looking forward to seeing your submissions and contributions.

Happy hacking!

Best regards, 
Behrad

-------------------------

sardariuss | 2023-09-21 16:01:53 UTC | #3

Hey @b3hr4d I was curious to know if you continued working on this bounty and planned to submit something soon or not. I could give it a hand to make it happen on the B3Wallet, but I'm a quite a noob in rust. Otherwise I might just give it a try in Motoko in my own.

@domwoe since there is no submission yet, is the deadline for this bounty also open?

-------------------------

b3hr4d | 2023-09-21 17:31:49 UTC | #4

I believe this bounty has come to a close. However, you can still create your own Bitcoin wallet, as there are always bounties available to be claimed, thanks to Dfinity's generosity.

-------------------------

domwoe | 2023-09-22 09:39:38 UTC | #5

Yep, since there were no submissions, we are still open to submissions.

-------------------------

sardariuss | 2023-11-20 22:12:00 UTC | #6

Hello @domwoe ,

I would like to submit my work for this bounty. The website is here: [Multi-subnet BTC wallet](https://o3zgr-waaaa-aaaap-abr2q-cai.raw.icp0.io/). I just made a short demo [video](https://www.youtube.com/watch?v=C_oW2RCjHKM).

This wallet uses two canisters to generate 2x2 multisig P2SWH bitcoin addresses. The main canister is written in rust and contains all the logic to generate the addresses and build the transactions. The second canister is written in Motoko and only serves as an intermediate to generate the second public key and signature. The principal of the user is used as the derivation path in order to have a specific address and signature for each user. You can find more information on how this works in the [readme](https://github.com/sardariuss/ic_btc_multisig/blob/main/README.md).

Hope you'll like it!

-------------------------

domwoe | 2023-11-21 07:58:33 UTC | #7

Great job! We'll review until the end of the week!

-------------------------

domwoe | 2023-11-24 07:38:56 UTC | #8

Thank you for the extensive readme with flow diagrams!

With the current design, wouldn't it be enough to compromise the subnet the wallet canister is on? It seems the wallet canister is able to request both signatures. One directly, and the other by calling the fiduciary canister/

-------------------------

sardariuss | 2023-11-24 15:00:51 UTC | #9

Oopsie. Yeah that's what I've done indeed. But you made me realized that if a subnet is compromised, not only the signatures can be generated on that subnet, but the code of the canister itself can be changed...

So what if I orchestrate the transfer of funds in my front-end instead:
- Frontend->Canister Subnet 1: generate transaction and sighashes, generate first signature
- Frontend->Canister Subnet 2: generate second signature, send the transaction on the btc network

-------------------------

domwoe | 2023-11-24 15:42:17 UTC | #10

[quote="sardariuss, post:9, topic:21771"]
So what if I orchestrate the transfer of funds in my front-end instead:

* Frontend->Canister Subnet 1: generate transaction and sighashes, generate first signature
* Frontend->Canister Subnet 2: generate second signature, send the transaction on the btc network
[/quote]

I think this is a valid approach and I thought along the same lines when I wrote the requirements:

[quote="domwoe, post:1, topic:21771"]
* It is ok (for now) that a single user principal can orchestrate the transfer of funds.
[/quote]

-------------------------

sardariuss | 2023-11-24 15:51:21 UTC | #11

Great thank you, I will do the change and come back when it's done.

-------------------------

sardariuss | 2023-11-27 03:43:30 UTC | #12

Hi @domwoe, just to let you know I've implemented the discussed changes.

-------------------------

domwoe | 2023-11-27 08:39:12 UTC | #13

Thank you! I've sent you PM to claim the bounty.

-------------------------

