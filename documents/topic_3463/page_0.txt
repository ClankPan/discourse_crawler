heldrida | 2021-05-12 17:44:31 UTC | #1

Hi,

While navigating the CanCan project, I found some unit tests, which is great! 
Seems that there's `ic-repl`, interesting!

Is there a good read to understand how to properly write unit tests for Motoko? Or maybe share where to learn about the `ic-repl`

Thank you!

-------------------------

heldrida | 2021-05-12 18:16:18 UTC | #2

For anyone else interested in writing tests, here's the repo for ic-repl ( https://github.com/chenyan2002/ic-repl ) and has some examples. Also, under testing in the list here https://github.com/dfinity/awesome-dfinity

-------------------------

chenyan | 2021-05-12 18:30:38 UTC | #3

We are still experimenting with the best way to test Motoko and canisters. There are several tools around today that can help with unit testing:
* Built-in assert: see examples from the base library: https://github.com/dfinity/motoko-base/tree/master/test
* The Motoko matcher library: https://github.com/kritzcreek/motoko-matchers. It's best to test with library code, i.e. without service actors.
* ic-repl: https://github.com/chenyan2002/ic-repl. This is designed at the canister level, so that you can use the tool to call canisters written in different languages. It's also useful if you want to seed data or write scripts.

-------------------------

heldrida | 2021-05-12 18:26:22 UTC | #4

Thank you very much! I'll test them starting with the `ic-repl` :slight_smile:

-------------------------

jzxchiang | 2021-09-18 05:11:42 UTC | #5

Great response, thanks.

Quick question about `ic-repl`: I'm guessing we have to make sure to tear down any objects we create in our `ic-repl` test scripts? I don't see it done explicitly in any of the examples (unless they are non-stable variables, in which case the next canister deploy should clear out any test data).

-------------------------

chenyan | 2021-09-18 05:23:26 UTC | #6

`ic-repl` is testing at the canister level, there are no objects. The script can handle deployment as well, so that the testing script can deploy a new canister, test method calls, and then delete the canister. As an example, see motoko playground's upgrade test: https://github.com/dfinity/motoko-playground/blob/main/service/pool/tests/upgrade.test.sh

-------------------------

jzxchiang | 2021-09-18 05:30:33 UTC | #7

Hm, interesting.

I don't think I see the canister deletion logic though? I see this:
```
fail call ic.install_code(
  record {
    arg = encode (init);
    wasm_module = file "../../../.dfx/local/canisters/backend/backend.wasm";
    mode = variant { upgrade };
    canister_id = S;
  },
);
```
But that seems to upgrade the canister, not delete it.

-------------------------

chenyan | 2021-09-18 17:29:02 UTC | #8

Right, I don't need canister deletion in my test. I always start a local replica and create a new canister for the test.

You can call `ic.delete_canister` to delete the canister if you want.

-------------------------

infu | 2021-10-08 19:47:53 UTC | #9

After checking most of these...
ic-repl - wasn't for me. Doesn't have the features I need and feels rigid. 
deploying and running a canister which tests another canister - pretty slow

The fastest approach (using motoko compiler - moc) - instantly shows results when I click file save:
```moc -r `vessel sources` test/something.mo ```

If you are on macos this script will monitor your src and test directories and run the test after every change
```
#!/bin/sh
fswatch -o src test | xargs -n1 -I{} moc -r `vessel sources` test/something.mo
```

Limitations I have found so far:
Wont work -  Debug.print(Principal.toText(Principal.fromActor(this)))

-------------------------

nomeata | 2021-10-09 08:44:51 UTC | #10

In addition to the approaches listed by @chenyan above, there is also the approach to use the `ic-hs` IC simulator as a library, and use Haskell to script the testing of the compiled canister. As it works with the compiled wasm, it works with both Motoko and Rust canisters. This is the approach chosen by the Internet Identity project:

https://github.com/dfinity/internet-identity/tree/main/backend-tests

-------------------------

heldrida | 2021-10-09 10:17:24 UTC | #11

That's a good option! Thanks for sharing!

I end up finding Rust easier to build with, which includes tests, then Motoko and the current dev experience.

-------------------------

heldrida | 2021-10-09 10:28:19 UTC | #12

Thanks for sharing! 

Your skills are highly appreciated, had a quick thought on this, and I made an assumption: 

- On the Haskell approach, I wouldn't have to start a local replica and deploy the Canister.
- Makes the iterations on implementing code changes and testing faster, then let's say test via bash or agentjs as it's require to deploy to a local replica (slow).

Is this correct?

-------------------------

nomeata | 2021-10-09 13:02:19 UTC | #13

Yes, these are some of the benefits. Also you get to use an expressive programming language to describe your tests, re-use testing libraries (tasty, quickcheck) and your tests are statically typed, has Haskell can import the Candid type of your canister into it's own type system. This way, if you change your canister interface, the Haskell compiler will tell you which tests to update. You also have better control over the IC, e.g. you can change the canister's time easily.

The downsides are that you need to know Haskell and that not all behavior of the IC is faithfully represented by ic-hs (e.g. no cycle accounting).

-------------------------

heldrida | 2021-10-09 13:23:36 UTC | #14

I'd guess that basic understanding of Haskell be enough for common assertions when writing tests? As in it being a client call versus the actual implementation.

-------------------------

nomeata | 2021-10-10 08:38:53 UTC | #15

For some value of ‚Äúbasic‚Äù, certainly :-) . I mean, you still have to set the dev environment up, deal with the syntax, and if you use record or variants in the Candid interface, these map to [`row-types`](https://hackage.haskell.org/package/row-types) data types, which are probably no longer basic use of Haskell. But give it a try, maybe you‚Äôll like it and will happily learn what‚Äôs missing, if anything!

-------------------------

heldrida | 2021-10-10 09:09:31 UTC | #16

Ok thanks! So, it's not trivial and that's a pity.

Unfortunately, I won't have the time to get into Haskell anytime soon (months, or years).

-------------------------

nomeata | 2021-10-10 15:10:11 UTC | #17

Too bad, it's worth it :-)

-------------------------

heldrida | 2021-10-21 00:18:06 UTC | #18

With all the respect, I did take some time to look into Haskell.

For any other readers interested, if you spend a few minutes looking into this subject, you'll find @nomeata work on Haskell everywhere, here's a good start:
https://haskell-via-sokoban.nomeata.de/

Or, maybe start by doing some music / live coding to learn some basics (this one I remember seeing here in London when I was interested in Algorave a few years ago, a pity didn't pick it up):
https://tidalcycles.org/

üòÖ A bit off-topic but thought about sharing

-------------------------

levi | 2021-11-04 00:24:28 UTC | #19

For the test of the canister-api another way is to use this dart library if you are on a linux or if you want to run this with dart in the browser: https://pub.dev/packages/ic_tools . Dart is a simple language to pick up. To start with dart, make a main folder, put in it a pubspec.yaml file (simple well documented config) and a folder: 'lib' and a file main.dart within the lib folder. 
 - pubspec.yaml
 - lib/main.dart

next in the main folder: run the command: `dart pub add ic_tools`
Then follow the ic_tools readme to set the lib up.
in the main.dart file you can call your canisters, and run `dart lib/main.dart` heres a sample:
```dart
import 'dart:typed_data';
import 'package:ic_tools/ic_tools.dart';
import 'package:ic_tools/candid.dart';

Future<void> main() async {
    Canister ledger = Canister(Principal('ryjl3-tyaaa-aaaaa-aaaba-cai'));
    String icp_id = 'ecedd9b3595d88667b78315da6af8e0de29164ef718f96930e0459017d5d8a04';
    Record record = Record.oftheMap({ 'account': Text(icp_id) });
    Uint8List sponse_bytes = await ledger.call( calltype: 'call', method_name: 'account_balance_dfx', put_bytes: c_forwards([record]) );
    Record icpts_balance_record = c_backwards(sponse_bytes)[0] as Record;
    Nat64 e8s = icpts_balance_record['e8s'] as Nat64;
    double icp_count = e8s.value / 100000000; 
    print(icp_count);
}
```

Im happy to help if you have some questions on it.

-------------------------

