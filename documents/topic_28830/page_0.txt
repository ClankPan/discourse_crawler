vdve1997 | 2024-03-24 16:21:59 UTC | #1

Hello Dfinity Community,

I'm currently working on a Vue.js project that interfaces with the Internet Computer, and I've encountered a challenge that I hope some of you might have tackled before.

**The Challenge:** We need to perform dynamic queries to fetch data from different canisters based on the user's navigation. Our project is structured such that each view in the Vue.js router corresponds to a different canister on the IC.

The crux of the issue is that DFX does not automatically adapt to the Vue router, and hence, we must manually trigger queries for each canister ID upon routing. We aim to make this process as dynamic as possible.

**Current Approach:** We have a router guard that checks the path and is supposed to trigger a query based on the canister ID related to that path. However, we need a more scalable and dynamic solution than hard-coding the canister logic for each route.

**Example Snippet:**

```
router.beforeEach(async (to, from, next) => {
  // TODO: Create auto query to all routes
  if (to.path === '/') return next({ name: 'Dashboard', query: canisterImpl })
  else if (to.path === '/auth') return next({ name: 'Login', query: canisterImpl })
  // ... and so on for other routes
  next()
})
```

**The Ask:** Has anyone developed a middleware or a pattern for dynamically managing canister queries in sync with Vue.js routing? Any pointers, code snippets, or shared experiences would be highly beneficial.

I'm looking for best practices or recommendations on how to efficiently map routes to canister queries that ensure a smooth user experience while keeping the codebase maintainable.

Thank you in advance for your time and help. Looking forward to some enlightening discussions!

-------------------------

vdve1997 | 2024-03-24 16:24:57 UTC | #2

One way we thought of is something like this:


```
// Example of a mapping object
const canisterQueries = {
  '/dashboard': {
    name: 'Dashboard',
    query: () => {
      // Logic to perform the query for the dashboard canister
    }
  },
  '/auth': {
    name: 'Login',
    query: () => {
      // Logic to perform the query for the auth canister
    }
  },
  // ... other paths
};

router.beforeEach(async (to, from, next) => {
  // Check if the current path has a corresponding canister query
  if (canisterQueries.hasOwnProperty(to.path)) {
    // Execute the query for the canister
    await canisterQueries[to.path].query();
    // Redirect to the named route with the query result if needed
    return next({ name: canisterQueries[to.path].name, query: /* query result */ });
  } else {
    // If there's no specific canister logic, just go to the next route
    next();
  }
});
```

-------------------------

