peterparker | 2021-07-23 10:51:05 UTC | #1

My users are able to create data once they signed in in my app with their Internet Identity. I want to set rules on the backend side to allow them to only edit their own data.

"user A can edit his/her data, user B can edit his/her data, user A cannot edit user B data".


*****

1. On the client side, the `HttpAgent` has to be created with the signed in user identity or is it optional`?

`const agent = new HttpAgent()` // as generated by the sdk

or 

`const agent = new HttpAgent({identity})` // identity is the one of the signed in user through authclient

*****

2. On the backend (Motoko) side, is it correct to say that the function's caller is the identification of the end user (the user who use the app and signed in with the internet identity)?

```
public shared({ caller }) func who: async() {
    // the caller == the end user?
}
```

*****

3. How should I save the data with the end user information?

```
public shared({ caller }) func set(obj : MyObj): async() {
    // TODO: save obj with caller
}
```

I was trying to set the `principal.toText` in my object on the client side and comparing it in the backend but, it does no work out.

Client:

```
await set({...myObject, user: authClient.getIdentity().getPrincipal().toText()}); 
```

Backend:

```
public shared({ caller }) func set(obj : MyObj): async() {
    if (Principal.toText(caller) != obj.user) {
       // => Always true => does not work for my use case
    }
}
```

I am not that successful, therefore would appreciate any help to solve some these questions.
Thanks in advance.

-------------------------

peterparker | 2021-07-23 11:42:05 UTC | #2

I guess I can answer questions 2. and 3. with the [linkedup](https://github.com/dfinity/linkedup) example.

2. yes most probably the `shared({ caller })`  is the signed in user

3. the (all) user should be save within the data in the collection and it should not be provided by the frontend but only handled on the backend side. the entry point for such statement is the function [hasAccess](https://github.com/dfinity/linkedup/blob/488236e24bed0d05f09fa8ed7c7c76c188321e7d/src/linkedup/utils.mo#L50) of the linkedup example.

-------------------------

claudio | 2021-07-23 12:08:52 UTC | #3

In Motoko, caller will be the principal of the immediate caller of the shared function - so in a recursive call from the canister, it will be the principal of the calling canister, and in a external call from the frontend, it should (I believe) be the principal of the user (authenticated or anonymous).

If you haven't seen already read it, maybe this would help https://kyle-peacock.com/blog/dfinity/integrating-internet-identity/.

(I've alerted the II team to your query...)

-------------------------

peterparker | 2021-07-23 12:19:52 UTC | #4

Thanks Claudio!

Glad to hear your feedback about the caller. I hope you are right.

Regarding Kyle's blog post, I had a look, but, I am confused about my 1. question because the code displayed in the article does not match the one automatically generated by the SDK.

In the article, the `{identiy}` is provided to create an `httpAgent` but, in the automatic code, the agent is generated without (see `createActor` and related comment).

```
export const createActor = (canisterId, options) => {
    const agent = new HttpAgent({...options?.agentOptions});

   ...

/**
 * A ready-to-use agent for the decks canister
 * @type {import("@dfinity/agent").ActorSubclass<import("./decks.did.js")._SERVICE>}
 */
export const decks = createActor(canisterId);
````

Maybe I should just understand the automatic generated code as a sample one and not the proper actor to be used.

-------------------------

claudio | 2021-07-23 12:50:48 UTC | #5

I believe the argument is optional, and will default to using  the anonymous identity when omitted.
 
https://github.com/dfinity/agent-js/blob/main/packages/agent/src/agent/http/index.ts#L110

-------------------------

peterparker | 2021-07-23 13:08:23 UTC | #6

It confirms the blog post is correct, the identity of the signed in users need to be provided to the http agent and the `createActor` in the automatically generated code should be considered as a sample code.

-------------------------

kpeacock | 2021-07-23 13:37:38 UTC | #7

Iâ€™ll update the blog post and example code to 0.8.0 today. Iâ€™d been focused on official doc updates over my blog

-------------------------

peterparker | 2021-07-23 13:57:59 UTC | #8

Awesome! Looking forward to it.

-------------------------

peterparker | 2021-07-26 08:32:50 UTC | #9

I gave a try to the your updated [auth-client-demo](https://github.com/krpeacock/auth-client-demo) for v0.8.0 but did not manage to pass the local sign-in.

The local anonymous identity provider redirect to the Internet Identity but, after successful authentication, it does not redirect to `localhost:8000`.

I face the exact same problem with my app too.

Something is buggy or is missing in your demo?

> git clone https://github.com/krpeacock/auth-client-demo
> cd auth-client-demo
> npm ci && npm i @dfinity/identity @dfinity/candid @dfinity/auth-client @dfinity/authentication --save-dev
> dfx start --background
> dfx deploy
> find local internet identity canister id in .dfx/local/wallets.json
> update webpack.config.js with this canister id for `LOCAL_II_CANISTER`
> dfx deploy
> open browser localhost:8000?canisterId=web_app_canister_id
> click sign in
> open new tab localhost:8000?canisterId=local_idenity_canister_id
> click "Authenticate"
> redirect to identity.ic0.app
> click "Authenticate" and process
> => no redirect to localhost:8000!

-------------------------

kpeacock | 2021-07-26 14:29:56 UTC | #10

Oh, I bet it's the II URL - do you have the `#authorize` hash at the end?

-------------------------

peterparker | 2021-07-26 14:53:24 UTC | #11

Yes. As I said I tried with your [auth-client-demo](https://github.com/krpeacock/auth-client-demo) and did not change the [url](https://github.com/krpeacock/auth-client-demo/blob/9b7ed50b74979b14b3fbf05f75105d6d9caae324/webpack.config.js#L8) beside updating the canister id with the one I found locally in `wallets.json`.

Note that there is a redirect when I access the anonymous local identify provider.

When I click "Log in" in your app, it does open a new tab with `http://localhost:8000?canisterId=...#authorize` but, it is shortly redirected to `http://localhost:8000/authorize?canisterId=...`, not sure that's the expected behavior.

-------------------------

kpeacock | 2021-07-26 18:30:44 UTC | #12

Yeah, that redirect seems weird to me. If you have chrome available, try going to `http://<canister-id>.localhost:8000#authorize`

-------------------------

peterparker | 2021-07-26 19:20:16 UTC | #13

Oh I think I get it. It probably doesn't work because I did not had deployed a local [internet identity](https://github.com/dfinity/internet-identity). I thought it was already deployed. Anyway, I think we can therefore consider the topic as closed, thanks for the support.

-------------------------

peterparker | 2021-07-26 19:45:47 UTC | #14

Regarding my original questions, summarized and tested:

1. yes the `identity` of the sign in users (the users of the web app) has to be use to instantiate a `new HttpAgent({identity})`

see my function [ic.utils.ts](https://github.com/deckgo/deckdeckgo/blob/feat/internet-computer/studio/src/app/utils/core/ic.utils.ts)

2. yes it is correct to say that the functionâ€™s caller is the identification of the end user (the signed in user of the web app)


3. the data can be saved as in [linkedup](https://github.com/dfinity/linkedup/tree/master/src/linkedup). Next to the data, the user principal can be saved. Upon any request, the corresponding element should be read from the collection, for example a Trie, and both msg.caller and saved user can be compared to check if it matches or not.

See the function [getDeck](https://github.com/deckgo/deckdeckgo/blob/3b8f97201e3b95f8ccfa9625640237488876ca8f/studio/src/backend/decks/decks.mo) in my implementation.

To with my user identity I signed in in my web app and created a data. On my friend's laptop, with his internet identity, we tried to fetch the data which was rejected by the check I have build. Therefore it practically validated that the user identity on the data level was valid ðŸ¥³.

Thank you for your answers and help!

-------------------------

