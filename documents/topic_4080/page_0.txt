flyq | 2021-05-20 16:08:42 UTC | #1

The Account Identifier is used in Ledger Canister, so it's important to get the account identifier in motoko for those canisters integrating with Ledger Canister.
![image|690x236](upload://zCLZg9RZNd2Qt0bs4X0yKVCa9Fq.png)

I find the source code of get account identifier in golang:
https://github.com/dfinity/keysmith/blob/master/account/account.go#L22-L33

the blob (Principal's bytes format)  is `principal.NewSelfAuthenticatingId(der).Bytes()`, and to convert to account identifier, it involves complex functions such as sha224.

How to get the Account Identifier from Principal in Motoko.

-------------------------

kpeacock | 2021-05-20 16:13:23 UTC | #2

In Motoko, here's all you should need - this is the `whoami` logic we use for testing:

```
actor {
    public shared (msg) func whoami() : async Principal {
        msg.caller
    };
};
```
All you need is to check the argument's caller

-------------------------

prithvi | 2021-05-20 17:30:26 UTC | #3

@flyq You can find a sha256 implementation here: https://dfinity.github.io/vessel-package-set/ 
This isn't enough for your use case however, as to generate an AccountIdentifier from a principal, sha224 is used. Unless that is added it may not be possible to generate AccountIdentifiers in mo

-------------------------

claudio | 2021-05-20 17:52:16 UTC | #4

Wikipedia suggests there's few changes needed to the sha256  implementation to calculate sha244 instead (assuming that implementation is based on the wikipedia algorithm)

https://en.wikipedia.org/wiki/SHA-2

-------------------------

flyq | 2021-05-21 04:03:17 UTC | #5

@prithvi @claudio Thanks for your useful information.
according to this: 
https://golang.org/src/crypto/sha256/sha256.go
The difference between sha224 and sha256 is few, so I will try it.

-------------------------

flyq | 2021-05-21 16:04:06 UTC | #6

https://github.com/flyq/motoko-sha224

-------------------------

claudio | 2021-05-21 22:50:37 UTC | #7

Good stuff, thanks for contributing!

-------------------------

dpdp | 2021-05-22 09:15:28 UTC | #8

For the ones who want a version in Python; here is a gist

https://gist.github.com/davidp94/12fa68490f5edfca278be8491728c391

-------------------------

stephenandrews | 2021-05-22 14:57:16 UTC | #9

Damn I must have started my lib an hour before you posted this, and only just checked in now to post it. It's the same as yours (change IV and skipped the last block in the sum stage).

I'll move onto working on the AccountIdentifiers now. The python gist makes it easy to follow

-------------------------

dpdp | 2021-05-22 15:03:15 UTC | #10

I am not sure what are subaccount; for now it's hardcoded to bytearray of zeroes.

The original rust code is here: https://github.com/dfinity/ic/blob/024de2fc73d7f6f5df5a92edf9675851f9ebbf59/rs/rosetta-api/ledger_canister/src/account_identifier.rs#L56

-------------------------

stephenandrews | 2021-05-22 15:06:17 UTC | #11

The sub account can be any Nat256, allowing for sub accounts from the same principal. E.g. in NNS if you add a new account I believe it's just the next account number (so the second one would be 1 as a 32byte blob)

-------------------------

flyq | 2021-05-22 15:49:49 UTC | #12

The problem is not solved perfectly, Account Identifier is CRC-32(X) + X, in which X is  currently available in motoko, but CRC-32 is not. So the next work is to implement CRC32 in motoko.

-------------------------

stephenandrews | 2021-05-22 15:52:40 UTC | #13

Yep, I'm currently working on a CRC32 implementation, but I think they one they use is a little bit harder.

-------------------------

stephenandrews | 2021-05-22 16:35:19 UTC | #14

Could you post the output for that principal ID in your gist? I dont have python handy to run it. Trying to see if I can get my motoko script to generate the same thing.

Currently have a working crc32, which should be the same as the one from the binascii python library so hoping it should match

-------------------------

dpdp | 2021-05-22 16:37:23 UTC | #15

Yes sure

```
m7b5y-itxyr-mr2gt-kvadr-2dity-bh3n5-ff7bb-vvm2v-3ftew-5wjtg-2qe -> 15a32831331d752b5c4cff5b9351bea8015d90f2c3831c6f3fca9c5287a4dbff

kb4lg-bqaaa-aaaab-qabfq-cai -> 22c138e9ab7156bf99a09fb4edabb12a35cae06ed162577ab6479d3dfd2f26c6

gmk2m-oiaaa-aaaab-qaaja-cai -> 17506366cdd9f3478b35944a6eed621f6fe14176abd1dfa26720e31785ab8462
```

-------------------------

stephenandrews | 2021-05-22 23:13:43 UTC | #16

Awesome, so my accountid script is working, using the sha224 lib and a custom crc32 motoko lib:

![d40689c8-39e8-40d8-8bbf-70b4c03269fb|667x147](upload://bFtHA3uJdDHryab16hjOw7Eqhbu.png)

Currently this is hard coded for the sub account (SUBACCOUNT_ZERO), I'll add the ability for custom sub accounts and then complete some more testing locally and get something uploaded today.

It's a bit unusual though, both CRC32 and SHA224 are pretty non-standard, and unlikely to be re-used much. Does it make sense to condense all of this into a single library?

-------------------------

paulyoung | 2021-05-22 23:18:35 UTC | #17

I think it makes sense to contribute them to these libraries:

* https://github.com/enzoh/motoko-crc
* https://github.com/enzoh/motoko-sha

-------------------------

stephenandrews | 2021-05-23 00:37:23 UTC | #18

I added my crc32 lib to the CRC package here: https://github.com/stephenandrews/motoko-crc

I've uploaded a library for the AccountIdentifiers: https://github.com/stephenandrews/motoko-accountid - this seems to hold true for the examples posted above, and I will continue with a few more.

This will allow us to communicate with the ledger canister directly for transfers etc. I am currently working on a wrapping canister as well.

-------------------------

kevinli | 2021-12-27 08:11:04 UTC | #19

What is the hex library you mentioned? I tried a couple and they both seem outdated

-------------------------

dpdp | 2021-12-27 08:21:46 UTC | #20

[quote="kevinli, post:19, topic:4080"]
hex
[/quote]

Maybe this https://github.com/enzoh/motoko-hex ?

-------------------------

kevinli | 2021-12-27 09:25:52 UTC | #21

I think I tried that but I'm getting some errors like it doesn't recognize `Word8` and can't find `Prim.word8toNat`. Am I doing something wrong?

-------------------------

dpdp | 2021-12-27 10:05:08 UTC | #22

Just checked the PR from @crusso

https://github.com/enzoh/motoko-hex/pull/4/files

Maybe this one would work? https://github.com/crusso/motoko-hex/tree/0.6

-------------------------

kevinli | 2021-12-27 12:10:23 UTC | #23

This seems more like it, thanks!

-------------------------

flyq | 2021-12-28 14:41:18 UTC | #24

https://github.com/flyq/test_icp/blob/master/motoko/src/motoko/main.mo#L64

-------------------------

