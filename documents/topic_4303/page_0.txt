paulyoung | 2021-05-25 00:58:52 UTC | #1

I brought this up here but that thread has gotten long and there are multiple conversations happening:

https://forum.dfinity.org/t/can-we-somehow-achieve-or-build-a-canister-with-a-interface-bahaving-like-a-classic-web-server/1257/46?u=paulyoung

I would like to request that appropriate HTTP request methods are mapped to `update` calls instead of `query`.

I think at least `POST`, `PUT`, `PATCH`, and `DELETE` would be a great start.

I could make a PR to `agent-rs` to do this but it would need the equivalent support in replicas.

-------------------------

nomeata | 2021-06-04 05:50:23 UTC | #2

[quote="paulyoung, post:53, topic:1257, full:true"]
I think these are both feature requests for the replica though.
[/quote]

Actually, the HTTP handling is done by the `icx-proxy` component in the `agent-rs` repo, which already is open source, so a feature request there is not inappropriate.

Turning `POST` into an update call is certainly a possibility. I think we have hesitated because maybe not every `POST` should be an update call? Imagine an image transcoding service ‚Äì you probably upload the file with `POST`, but maybe still want the performance of a query call. Also, despite best intentions in the HTTP spec, in practice you might want state modification on `GET` as well in some cases.

So tying it to the method seems a bit too rigid.

In my prototype, a query call is done first, and but it can tell the proxy to upgrade to an update call, but it‚Äôs also not clear if that‚Äôs ideal.

If you don‚Äôt mind having an URL that is _not_ `*.ic0.app`, at least for experimentation, you can run a patched `icx-proxy` on your own infrastructure, and use that. The HTTP handling sits nicely on top of the core IC, instead of being a feature you can‚Äôt extract.

-------------------------

paulyoung | 2021-05-25 15:58:09 UTC | #3

[quote="nomeata, post:2, topic:4303"]
Actually, the HTTP handling is done by the `icx-proxy` component in the `agent-rs` repo, which already is open source, so a feature request there is not inappropriate.
[/quote]

This is great news. Since I‚Äôm going to do this anyway I‚Äôll probably make a PR and then it can be debated there üòÑ

In one of my use cases I could possibly run a forked version but it would be a lot neater not to.

[quote="nomeata, post:2, topic:4303"]
in practice you might want state modification on `GET` as well in some cases.
[/quote]

My plan was to make the mapping configurable but with some defaults that match the intentions of the HTTP spec.

That way, different instances of the proxy could be configured differently on start up. It could even be as granular as mapping a specific route to a certain call rather than the entire request method.

[quote="nomeata, post:2, topic:4303"]
Imagine an image transcoding service ‚Äì you probably upload the file with `POST` , but maybe still want the performance of a query call.
[/quote]

Could you help me understand how that would work? I thought an `update` call is the only way to modify state.

-------------------------

nomeata | 2021-05-25 16:10:19 UTC | #4

[quote="paulyoung, post:3, topic:4303"]
[quote="nomeata, post:2, topic:4303"]
Imagine an image transcoding service ‚Äì you probably upload the file with `POST` , but maybe still want the performance of a query call.
[/quote]

Could you help me understand how that would work? I thought an `update` call is the only way to modify state.
[/quote]

That‚Äôs what I mean with a image transcoding: You `POST` a `.gif`, it returns a `.jpg`, but doesn‚Äôt actually store anything. Not saying it‚Äôs a great example for an on-IC-app, but maybe still can serve as an example for a `POST` call that you want to get query-called.

-------------------------

paulyoung | 2021-05-27 09:20:09 UTC | #5

[quote="paulyoung, post:3, topic:4303"]
[quote="nomeata, post:2, topic:4303"]
Actually, the HTTP handling is done by the `icx-proxy` component in the `agent-rs` repo, which already is open source, so a feature request there is not inappropriate.
[/quote]

This is great news. Since I‚Äôm going to do this anyway I‚Äôll probably make a PR and then it can be debated there :grinning_face_with_smiling_eyes:
[/quote]

I forked `agent-rs` and ran it locally, with the change I proposed at the top of this thread.

I encountered 2 problems:

1. Without a `query` annotation on `http_request`, I get `Replica Error (3): "IC0302: Canister rrkah-fqaaa-aaaaa-aaaaq-cai has no query method 'http_request'"`

2. When making an update call via `http_request` I get `500 Internal Server Error` on the client and see `WARN Internal Error during request: CertificateVerificationFailed` on the server.

It looks like #1 would require a change to the replica code to allow `http_request` to have a `shared` annotation.

I haven't been able to figure out #2 yet.

-------------------------

nomeata | 2021-05-27 12:14:29 UTC | #6

Re #1: I suggest that your fork uses a different method name (`http_update_request`). It can have the same implementation, but the system (rightfully) rejects query calls to methods that aren‚Äôt marked query.

The `replica` is not involved here, this is a higher level feature (e.g. you can tell that https://sdk.dfinity.org/docs/interface-spec/index.html doesn't mention it).

Re #2: You probably have to call [`fetch_root_key`](https://agent-rust.netlify.app/ic_agent/agent/struct.agent#method.fetch_root_key) in the right spot.

-------------------------

paulyoung | 2021-06-04 05:50:23 UTC | #7

https://github.com/dfinity/agent-rs/pull/195

-------------------------

paulyoung | 2021-12-28 09:18:16 UTC | #8

My first PR was closed because `icx-proxy` moved to its own repo.

The most relevant PR now is:

https://github.com/dfinity/icx-proxy/pull/6

-------------------------

paulyoung | 2022-01-11 02:23:55 UTC | #9

The above PR was merged today :slight_smile:

-------------------------

diegop | 2022-01-11 02:44:50 UTC | #10

Hallelujah! It is merged! Yay!

-------------------------

skilesare | 2022-01-11 16:15:28 UTC | #11

I'm trying to better understand what this PR does.  Will this allow me to send POST/PUT method calls to the IC via HTTP and have them converted into update calls that go to http_request_update?  Or is that still a ways off?

Am I correct in saying that http_request only supports GET requests at the moment? Or it handles everything, but if you try to update something it will fail because http_request interface endpoint is a query?

-------------------------

paulyoung | 2022-01-11 18:58:11 UTC | #12

Canisters can handle HTTP requests by providing a `http_request` function. However, `http_request` only allows making `query` calls.

With my PR, canisters can now also provide a function called `http_request_update` that allows making `update` calls.

When handling a HTTP request inside of `http_request`, if it‚Äôs necessary to make an `update` call, `http_request` can now return a response including the field `upgrade` with a value of `true`. This results in `http_request_update` to be called instead.

Whether any of this happens due to HTTP methods like `GET` or `POST` (or other aspects of the request) is left entirely up to the canister. I had originally inferred whether to ‚Äúupgrade‚Äù from `query` call to `update` based on the HTTP method but allowing the canister to determine that explicitly is more flexible.

-------------------------

nomeata | 2022-01-11 22:33:29 UTC | #13

Is this live already? If not, what is the ETA? I'm eager to migrate my telegram bot to this interface and disable my own AWS-Bounday-Node (which had this feature for a year now‚Ä¶ ;-))

-------------------------

paulyoung | 2022-01-12 04:25:40 UTC | #14

@Daniel-Bloom might know.

-------------------------

paulyoung | 2022-01-24 03:25:47 UTC | #15

@diegop do you know anything?

-------------------------

diegop | 2022-01-24 03:26:48 UTC | #16

No, I‚Äôll ask around.

-------------------------

faraz.shaikh | 2022-01-24 05:20:24 UTC | #17



 I am fairly certain this hasn‚Äôt been rolled out. I checked the update logs and I know for sure about an unrelated issue blocking production upgrades. 

I will pull the built binary to ic stop gap repo. & update this thread when prod is up. (This week)

-------------------------

heyuanxun | 2022-02-11 07:44:46 UTC | #18

I use this code(https://github.com/dfinity/agent-rs/pull/195 ) and icx-proxy (https://github.com/dfinity/icx-proxy) to test at local environment.
i try $curl -v -X POST -H "Content-type: application/json" -H "Accept: application/json" -d '{}' 'http://localhost:8000?canisterId=ai7t5-aibaq-aaaaa-aaaaa-c'

But it return : Response to POST request (query)

would you tell where i get worng

-------------------------

paulyoung | 2022-02-12 01:24:25 UTC | #19

That code at the top of the PR is out of date.

Basically, if `http_request` returns `upgrade: true` then `http_request_update` is called.

-------------------------

heyuanxun | 2022-02-12 07:28:55 UTC | #20

i just wanna know why your [code](https://github.com/dfinity/agent-rs/pull/195) can return Response to POST request ( update)
but i use you code at my computer return  Response to POST request (query)

-------------------------

heyuanxun | 2022-02-12 07:29:44 UTC | #21

the problem is the http_requset_update didn't work

-------------------------

paulyoung | 2022-02-13 03:42:26 UTC | #22

When I posted that code sample, the code in the PR inferred which function to call based on the HTTP method.

The code that eventually got merged requires explicitly opting-in by providing `upgrade = true;` in the response.

-------------------------

mymikemiller | 2022-02-14 19:49:39 UTC | #23

Great to see that this is available now! I just got a grant (thanks DFINITY!) to finish Videate, my video podcast hosting platform. It needs to track users' downloads, so requests for the video files will need to be upgraded to record the fact that the user downloaded a video. Looking forward to implementing this!

-------------------------

nomeata | 2022-02-14 20:59:10 UTC | #24

So the same request will update the counter _and_ return the video? Not sure if returning large volumes of data via update calls is a good idea, but the current interface doesn't allow ‚Äúreturn this data from a query, and also perform an update‚Äù.

A nice way out is to upgrade to an update call, then return a HTTP redirection, and then serve the data with a query call. You can protect the redirected URL using a magic cookie (based on a hash of a secret and a timestamp) to prevent people from using the query-URl directly.

-------------------------

mymikemiller | 2022-02-14 21:06:18 UTC | #25

I haven't been able to get IC streaming of large files working (see [this thread](https://forum.dfinity.org/t/simplest-example-of-http-streaming-chunks-in-motoko/)), so my plan is to redirect the user to the file on an external CDN after making the update on the IC.

You're right, though. Either way I'll have to look into a solution like  a magic cookie to prevent unwanted downloads. Not sure how I'd do that with an external CDN...

-------------------------

lastmjs | 2022-02-14 23:25:54 UTC | #26

[quote="nomeata, post:24, topic:4303"]
uest will update the counter *and* return the video? Not sure if returning large volumes of data via update calls is a good idea, but the current interface doesn‚Äôt allow ‚Äúreturn this data from a query, and also perform an update‚Äù.
[/quote]

What are your issues with streaming large files? Is it 206 partial responses? If so see this thread: https://forum.dfinity.org/t/boundary-node-http-response-headers/10747

Basically in the long run the platform should be able to provide partial response capabilities for us (through the boundary nodes), but once they allow `Range` headers to pass through the boundary node whitelist I have a fork of the `certified-assets` canister that implements range requests.

I'm waiting on this for podcast audio hosting on the IC to work better (though it works now if users download the podcasts).

-------------------------

HelloRickey | 2022-03-15 10:36:22 UTC | #27

Hey @paulyoung, I'm really looking forward to `http_request_update`. How is it currently, can I use it on mainnet?

-------------------------

HelloRickey | 2022-03-15 11:18:56 UTC | #28

Hey @paulyoung,I see it has been merged into icx-proxy. But I use the following method to deploy on the main network, but it doesn't work. Do I need to do anything else? Or must it only be used in icx-proxy?
```
  public query func http_request(request : HttpRequest) : async HttpResponse {
    {
      status_code = 200;
      headers = [];
      body = Text.encodeUtf8("Response to " # request.method # " request (query)");
      streaming_strategy = null;
    };
  };

  public shared func http_request_update(request : HttpRequest) : async HttpResponse {
    {
      status_code = 200;
      headers = [];
      body = Text.encodeUtf8("Response to post" # request.method # " request (update)");
      streaming_strategy = null;
    };
  };
```

-------------------------

paulyoung | 2022-03-16 00:03:58 UTC | #29

@HelloRickey this was the last I heard:

https://forum.dfinity.org/t/feature-request-map-appropriate-http-request-methods-to-update-calls/4303/17?u=paulyoung

So, it may be live but I haven‚Äôt gotten around to trying it myself yet.

The response you return from `http_request` needs to include `upgrade = true;` in order for `http_request_upgrade` to be called.

-------------------------

HelloRickey | 2022-03-16 03:58:08 UTC | #30

@paulyoung thanks for your reply,If it is live,the correct way to call is to add the HttpResponse in http_request,***upgrade = true***, then when I use post request, will receive the content of post request in http_request_update?


```
   public query func http_request(request : HttpRequest) : async HttpResponse {
     {
       upgrade = true; //enable http_request_update to take effect
       status_code = 200;
       headers = [];
       body = Text.encodeUtf8("Response to " # request.method # " request (query)");
       streaming_strategy = null;
     };
   };


```

-------------------------

paulyoung | 2022-03-16 04:00:47 UTC | #31

Yes, but not necessarily for a POST request; for any request where you initially responded with `upgrade = true;`

-------------------------

HelloRickey | 2022-03-17 04:09:33 UTC | #32

Hey @faraz.shaikh , Do you know the latest developments in **HTTP request methods to update calls**?

-------------------------

faraz.shaikh | 2022-03-24 03:47:01 UTC | #33

Hey, 

Apologies for the delayed response on this one.  The latest boundary node deployment was done on March 1st 2022.   The production deployment now reflects the state of the `icx-proxy` repo on 1st March.

So this feature is live in production. Please report if something is amiss.

cc: @Daniel-Bloom 

Thanks
Faraz

-------------------------

nomeata | 2022-03-24 11:36:25 UTC | #34

Exciting! I will try to port my telegram bot when I find the time, and will report back.

-------------------------

HelloRickey | 2022-03-24 12:47:35 UTC | #35

Can it be used in canister? I found that **http_request_update** still did not take effect.

-------------------------

nomeata | 2022-03-25 06:05:44 UTC | #36

@paulyoung, I assume you didn't change the service worker, just `icx-proxy`, right?

This means that this feature only works on the raw URLs for now, not the certified ones where the service worker locally translates HTTP to IC calls. Just a heads up for people testing this feature.

(Maybe it was a mistake to use the agent in the service worker, and it should instead go via `raw` HTTP, to separate concerns more cleanly, and also benefit from caching on the boundary nodes?)

-------------------------

paulyoung | 2022-03-25 06:18:02 UTC | #37

[quote="nomeata, post:36, topic:4303"]
@paulyoung, I assume you didn‚Äôt change the service worker, just `icx-proxy` , right?
[/quote]

I didn‚Äôt. I think at first it hadn‚Äôt been open-sourced. I‚Äôm not sure if it had at the time of merging but I wasn‚Äôt getting much input on how to go about it.

I tried to call attention to it here: https://github.com/dfinity/icx-proxy/pull/6#issuecomment-1005205703

and later left a note for myself here: https://github.com/dfinity/icx-proxy/pull/6#issuecomment-1034032494

-------------------------

nomeata | 2022-03-26 22:18:34 UTC | #38

I did a quick test with the Motoko playground:

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3165629505

And it works! If you go to https://y4oop-liaaa-aaaab-qacha-cai.raw.ic0.app/ it loads kinda slowly (yay for consensus) and keeps counting the requests. Probably the canister will disappear after a while. Maybe I should host the demo permanently‚Ä¶

-------------------------

skilesare | 2022-03-26 22:30:09 UTC | #39

Thanks for the example! This is huge! Quick question, is there a way to pass in authentication headers so that message.caller set?

-------------------------

skilesare | 2022-03-26 22:39:21 UTC | #40

Something like return_and_upgrade would be great for tracking statistics.

-------------------------

paulyoung | 2022-03-27 00:17:25 UTC | #41

[quote="skilesare, post:39, topic:4303"]
is there a way to pass in authentication headers so that message.caller set?
[/quote]

I‚Äôm pretty sure you can set whatever headers you like and check for them in either of the http request functions.

-------------------------

paulyoung | 2022-03-27 00:19:35 UTC | #42

[quote="skilesare, post:40, topic:4303, full:true"]
Something like return_and_upgrade would be great for tracking statistics.
[/quote]

Both http functions already return a `HttpResponse`. Is that not sufficient?

-------------------------

skilesare | 2022-03-27 01:38:38 UTC | #43

I was thinking of a guaranteed way of calling an update after returning the fast query.  I want the client to get the query response quickly, and the I want to record an Incerement of a served asset in an update. I could have the client do it, but it would be hackable. If the service worker did it as part of the protocol it would be cool and allow us to do gated assets.

-------------------------

skilesare | 2022-03-27 02:00:22 UTC | #44

This feature also begs the question of how the thing actually works. I assume there is some Kind of replay protection built into the protocol and the request has to be signed, so I‚Äôm guessing that these http requests are always anon principal. There is no problem processing the http_request_update because it is anon and thus replay is expected. If you wan to prevent replay I guess you have to do it yourself?

If I put a sig in the header that sig is going to need some kind of nonce that I handle in canister or a malicious node could replay it? Or is there something else at work that would prevent that?

-------------------------

paulyoung | 2022-03-27 02:18:10 UTC | #45

[quote="skilesare, post:43, topic:4303"]
I was thinking of a guaranteed way of calling an update after returning the fast query.
[/quote]

That seems doable but with the caveat that once the client making the HTTP request gets a response (the result of the query) it has no way of being informed of the result of the update call (success, failure, etc.)

For use cases like the one you mentioned that might be fine.

I think this whole feature deserves a proper specification. One may even exist somewhere in private. @nomeata might know more.

-------------------------

skilesare | 2022-03-27 02:22:22 UTC | #46

Yep....that would be fine.  There are a whole host of applications that would be facilitated by being able to know that a query was served without having to have the client wait for consensus.

Decentralized AdWords.

-------------------------

paulyoung | 2022-03-27 06:39:00 UTC | #47

[quote="skilesare, post:44, topic:4303"]
I assume there is some Kind of replay protection built into the protocol and the request has to be signed
[/quote]

I encourage you not to make such assumptions üôÇ

As far as I can tell none of the above is true.

-------------------------

skilesare | 2022-03-27 12:30:29 UTC | #48

üßê So if I send a transfer function to a token canister and it is rejected due to insufficient funds, a node provider could hold on to that request and resubmit it once I have funds in my account? Is a reject or throw handles differently than if I returned a Result#err?

Is that how send_dfx?

-------------------------

paulyoung | 2022-03-27 14:12:09 UTC | #49

Are we still talking about `http_request` and `http_request_update`?

I was speaking about those specifically and meant that as far I can tell at that layer any incoming request will be handled and it would be up to the application to decide what to do. Given that there‚Äôs little documentation on this feature it‚Äôs hard to tell so if I‚Äôm going to make assumptions I‚Äôm assuming the worst for now üôÇ

I think you‚Äôre posing great questions and it would be good to know the answer both in the context of HTTP and outside of it.

Perhaps @diegop can help direct these questions to the right people.

-------------------------

nomeata | 2022-03-27 15:56:28 UTC | #50

I could try to answer them, but preferably on a dedicated thread :-)

-------------------------

skilesare | 2022-03-27 18:38:36 UTC | #51

Totally understand the difference and would love clarity. My assumption is that http_request acts differently, but it would be great to have documentation about exactly *how* differently.

-------------------------

nomeata | 2022-03-29 18:08:59 UTC | #52

I [updated](https://github.com/nomeata/ic-telegram-bot/commit/4dc4f78c84f76bf825109eaf45143f10d8b58b8c) my telegram bot code to use the official HTTP gateway, worked smoothly. So we now have canisters serving Telegram chat bots without any extra infrastructure!  Try it:

https://t.me/InternetComputerBot

Maybe I‚Äôll write a separate post later, we‚Äôll see.

-------------------------

HelloRickey | 2022-03-31 07:18:34 UTC | #53

thanks a lot, it worked, i forgot to add` upgrade: Bool;` to HttpResponse

-------------------------

HelloRickey | 2022-03-31 07:37:12 UTC | #54

Last reply about http_request_update. I think http_request_update is a milestone update. It makes canister's http request function more possibilities. This allows canister to be used as a serverless, or a cloud database, and many more interesting features.
@paulyoung  thank you very much for your great contribution, can you message me with your ICP wallet address? I would very much like to pay 1 ICP for you a cup of coffee‚òïÔ∏è.

-------------------------

skilesare | 2022-03-31 15:01:51 UTC | #55

Relevant: https://forum.dfinity.org/t/show-and-tell-a-telegram-bot-on-the-internet-computer/11795/5?u=skilesare

-------------------------

paulyoung | 2022-03-31 21:01:39 UTC | #56

[quote="HelloRickey, post:54, topic:4303"]
@paulyoung thank you very much for your great contribution, can you message me with your ICP wallet address? I would very much like to pay 1 ICP for you a cup of coffee‚òïÔ∏è.
[/quote]

Thank you for your generosity, but that‚Äôs not necessary.

Please build something and use it for cycles instead üôÇ

-------------------------

jzxchiang | 2022-04-22 06:20:09 UTC | #57

Yeah, I just verified... seems like `http_request` is called with the anonymous Principal.

-------------------------

