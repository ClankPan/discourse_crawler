mariop | 2023-01-26 14:18:56 UTC | #1

Hi community,

I'm happy to announce that the ICP Ledger has been upgraded to support the [ICRC-1 Fungible Token Standard](https://github.com/dfinity/icrc-1)! The upgrade went live today. You can use the ICP Ledger [canister UI](https://dashboard.internetcomputer.org/canister/ryjl3-tyaaa-aaaaa-aaaba-cai) to see the new methods.

This is a major step forward for the ecosystem because it means that developers can interface with the **ICP Ledger**, all the **SNSes Ledgers**, the **ckBTC Ledger** and many more Ledgers using a single standard interface defined by the  [Ledger&Tokenization Working Group](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925). Next we will work on the implementation of the ICRC-2 standard for all our Ledgers.

At the same time I'm happy to announce that our frontend team has published the first version of a **javascript library that supports ICRC Ledgers**. You can find it on npm as [@dfinity/ledger](https://www.npmjs.com/package/@dfinity/ledger).

Let me use this opportunity to thank every contributor to the [Ledger&Tokenization Working Group](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925) and all the people that contributed in the discussion on the token standard.

Best,
Mario

-------------------------

gatsby_esp | 2023-01-26 14:49:53 UTC | #2

Does this mean that a block explorer can now track transactions? Its a key point for DEFI kick-off on ICP so please promote it. BTW tokens released on a ICRC1 standard will me automaticaly upgraded to ICRC2 once released. I mean.. I don't see thepoint on releasing a token on ICRC1 standard if it is going to get deprecated once ICRC2 is released.
You should guys communicate better on this matter.

-------------------------

Severin | 2023-01-26 14:39:35 UTC | #3

[quote="gatsby_esp, post:2, topic:18194"]
I donâ€™t see thepoint on releasing a token on ICRC1 standard if it is going to get deprecated once ICRC2 is released.
[/quote]

ICRC-2 is an extension of ICRC-1 ([source](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md)). No need to deprecate the ICRC-1 version.

-------------------------

blabagastered | 2023-01-26 15:27:05 UTC | #4

I think he means applications (eg DEXs) might be built on the assumption that ICRC-2 is implemented, not supporting ICRC-1-only tokens for practical reasons. Hence a non-upgradable ICRC-1 token launched today could be excluded from the ecosystem in practice.

-------------------------

blabagastered | 2023-01-26 15:28:08 UTC | #5

[quote="mariop, post:1, topic:18194"]
the ICP Ledger has been upgraded to support the [ICRC-1 Fungible Token Standard](https://github.com/dfinity/icrc-1)
[/quote]

A bit of a basic question but does this (only) mean that the protocols are now compatible, or that ICRC-1 token canisters' transaction history will automatically or with some configurable setting be stored by the ICP Ledger without the need for ad-hoc implementation of archives and transaction storage systems and resources to sustain them on a token-by-token basis?

Either way, great feature.

-------------------------

jorgenbuilder | 2023-01-26 15:38:58 UTC | #6

Very cool! ðŸ¤¯ Thanks for the update Mario

-------------------------

mariop | 2023-01-27 09:08:05 UTC | #7

[quote="gatsby_esp, post:2, topic:18194, full:true"]
Does this mean that a block explorer can now track transactions?
[/quote]

Block explorers can track ICP transactions but this was true since before ICRC. The ICP Ledger always exposed transactions so that you can verify what's going on. You can check [our dashboard](https://dashboard.internetcomputer.org/transactions) for example. DFINITY provides an application called [rosetta node](https://internetcomputer.org/docs/current/developer-docs/integrations/rosetta/) which creates a database with all the transactions in the ICP Ledger and can be used to provide something like a block explorer.

[quote="gatsby_esp, post:2, topic:18194, full:true"]
Its a key point for DEFI kick-off on ICP so please promote it. BTW tokens released on a ICRC1 standard will me automatically upgraded to ICRC2 once released. I meanâ€¦ I donâ€™t see thepoint on releasing a token on ICRC1 standard if it is going to get deprecated once ICRC2 is released.
You should guys communicate better on this matter.
[/quote]

ICRC-2 is an extension of ICRC-1. In other words, ICRC-1 is a requirement to implement ICRC-2. ICRC-1 won't be deprecated. For instance, [icrc1_metadata](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_metadata-), [icrc1_balance_of](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_balance_of) and [icrc1_supported_standard](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_supported_standards) are all relevant regardless of which transfer primitives one decides to use.

The support for ICRC-1 in the ICP Ledger is important because it means that developers don't have to write custom code for the ICP Ledger anymore :slight_smile:. If your app works against ICRC Ledgers then it will work for the ICP Ledger, all the SNS Ledgers, the ckBTC Ledger... It's a major simplification and it's an important one because ICP is an important token to support.

-------------------------

mariop | 2023-01-27 09:09:48 UTC | #8

[quote="blabagastered, post:4, topic:18194"]
a non-upgradable ICRC-1 token launched today could be excluded from the ecosystem in practice.
[/quote]

All out tokens can be upgraded and we will do our best to support all the core extensions that the working group deems necessary.

-------------------------

mariop | 2023-01-27 09:14:43 UTC | #9

[quote="blabagastered, post:5, topic:18194"]
A bit of a basic question but does this (only) mean that the protocols are now compatible, or that ICRC-1 token canistersâ€™ transaction history will automatically or with some configurable setting be stored by the ICP Ledger without the need for ad-hoc implementation of archives and transaction storage systems and resources to sustain them on a token-by-token basis?
[/quote]

I'm not sure I fully understand the question. I can try to answer but feel free to elaborate if you think my answer is not correct or satisfying.

ICRC-1 is focused on ledger primitives and does not concerns transaction history. The ICP Ledger transaction history is not affected by this change and will continue to work as before.

-------------------------

blabagastered | 2023-01-27 10:25:07 UTC | #10

Yes, all good at the standards level. What I think he/she meant is at the individual token level, meaning, if today a community project deploys a token that only adheres to the ICRC-1 standard and not to the ICRC-2 or other standards, and you make that deployed canister unapgradable for security or other reasons (many defi tokens in crypto have "ownership renounced" or are "non-upgradable" for security reasons), then that token would run into problems down the line if it turns out that for practical reasons, the defi ecosystem in the IC does requires ICRC-2 endpoints in their apps (eg because they don't want to make a DEX without a icrc2_approve() function because it just turns too complicated or insecure to develop internal DEX logic without it).

In that sense, and I don't know but that's how I understood the above comment by gatsby, people could be in trouble if they deploy an (only) ICRC-1, (non-ICRC-2, 3, 4) token today.

-------------------------

blabagastered | 2023-01-27 10:49:50 UTC | #11

Thanks. I probably have too may category confusions around it because I've not looked into ICP Ledger at all, or into transaction archives: I only have some experience with ICRCs and more precisely this Motoko implementation: https://github.com/NatLabs/icrc1

To rephrase the question in a less technical way: today, if I deploy an ICRC-1 token with eg this example code, https://github.com/NatLabs/icrc1/blob/main/example/icrc1/main.mo

Do I as a deployer / maintainer / holder of such a token need to worry about creating archival logic, spinning out archive canisters to store transactions, feed them cycles, etc, or is all that handles automatically / only requires feeding the base token canister cycles? 

It would seem from lines like these https://github.com/NatLabs/icrc1/blob/main/src/ICRC1/lib.mo#L338

that that's all taken care of (except keeping canisters's cycles topped up?)?

And in what way does ICP Ledger come into the picture from the perspective of an ICRC-token deployer / maintainer / user? Many dots to join for me still.

Reading my own reply I see it pretty much turned into a question about that other repo, so if you're familiar with it perhaps just reduce it to the last question.

-------------------------

alejandrade | 2023-01-27 21:02:45 UTC | #12

when icrc2 methods? TransferFrom is pretty important for defi

-------------------------

mariop | 2023-01-28 10:50:55 UTC | #13

[quote="alejandrade, post:12, topic:18194, full:true"]
when icrc2 methods? TransferFrom is pretty important for defi
[/quote]

That's going to be the next big upgrade of the Ledgers. We are working on it right now.

-------------------------

mariop | 2023-01-28 10:50:41 UTC | #14

[quote="blabagastered, post:11, topic:18194"]
Do I as a deployer / maintainer / holder of such a token need to worry about creating archival logic, spinning out archive canisters to store transactions, feed them cycles, etc, or is all that handles automatically / only requires feeding the base token canister cycles?
[/quote]

I can speak only for the [ICP Ledger](https://github.com/dfinity/ic/tree/master/rs/rosetta-api/icp_ledger/ledger) and [ICRC-1 Ledger](https://github.com/dfinity/ic/tree/master/rs/rosetta-api/icrc1/ledger). Both Ledgers automatically create archive nodes but leave the cycles management to you. I suggest to have a look at services that can top up your canisters automatically or write a simple script that does it for you.

[quote="blabagastered, post:11, topic:18194"]
And in what way does ICP Ledger come into the picture from the perspective of an ICRC-token deployer / maintainer / user? Many dots to join for me still.
[/quote]

The ICP Ledger doesn't really affect ICRC tokens maintainers. The new upgrade of the ICP Ledger mainly affects developers of services that need to integrate with Ledgers because now they can integrate the ICP Ledger using the same code they use to integrate with the ICRC Ledgers.

-------------------------

blabagastered | 2023-01-28 11:26:35 UTC | #15

Thanks, I get it now.

-------------------------

skilesare | 2023-05-24 22:27:21 UTC | #16

@roman-kashitsyn This file still says that subaccount is a blob:  https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md

But the ledger did file is [Nat8](at least the candid on ICScan is https://icscan.io/canister/ryjl3-tyaaa-aaaaa-aaaba-cai).

Just checking to make sure I'm not going crazy and that it is in fact, [nat8].

-------------------------

timo | 2023-05-25 04:53:31 UTC | #17

In candid blob is merely a shorthand for vec nat8.

https://github.com/dfinity/candid/blob/master/spec/Candid.md#shorthand-blobs

-------------------------

skilesare | 2023-05-25 09:47:52 UTC | #18

I thought this was the case for candid...It can make programming motoko maddening though when .did file swap them out randomly.

Since the did file reports Nat8 for the ICP ledger, shouldn't we update the icrc1 docs to match?

As a random aside, did we ever get a canonical toText motoko function that the working group agreed on?

-------------------------

timo | 2023-05-25 16:21:31 UTC | #19

There shouldnâ€™t be any problem because blob and vec nat8 are equivalent. You can write either in the did file. It doesnâ€™t effect the Motoko side. Motoko can deserialize either to [Nat8] or Blob. 

But maybe I donâ€™t understand what you mean because you wrote Nat8 not nat8. In a did file there can only be the latter.

-------------------------

skilesare | 2023-05-25 16:29:40 UTC | #20

Sorry...I was just implying that if in motoko you have account as { owner : Principal; subaccount : ?[Nat8]} and, say your to text function takes  { owner : Principal; subaccount : ?Bob} the cast is annoying.

I wrote a helper function:

```
public func fromBytesAccount(item: BytesAccount) : Account{
    {
      item with
      subaccount = switch(item.subaccount){
        case(null) null;
        case(?val) ?Blob.fromArray(val);
      };
    };
  };

....in another module....


return {
        principal = host;
        account_id_text = Hex.encode(to);
        account_id = Blob.fromArray(to);
        icrc1_text = ICRC_Text.toText(
          ICRC_Text.fromBytesAccount(account)
        );
        account = account
    };

```

-------------------------

