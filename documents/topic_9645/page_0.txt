mparikh | 2021-12-14 01:54:00 UTC | #1

The use case is that I would like to call async functions from heartbeat. 

It is possible to change update (and I presume query) to async and thereby allow async functions to be made from them. https://forum.dfinity.org/t/condvar-wait-not-supported/9052

However the heartbeat function appears to be sync.  When I try to add async to heartbeat function definition, I get the following error:

The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Wasm module of canister sbzkb-zqaaa-aaaaa-aaaiq-cai is not valid: Wasm module has an invalid function signature. Expected return type [] for 'canister_heartbeat', got [I32]

-------------------------

nomeata | 2021-12-14 08:23:57 UTC | #2

Rust or Motoko?

(This question is too short for the forum)

-------------------------

mparikh | 2021-12-14 13:17:57 UTC | #3

In rust.

(The answer is too short for forum)

-------------------------

levi | 2021-12-14 19:13:32 UTC | #4

Just based on your error message, is your heartbeat function returning an i32? Try it without a return type.

-------------------------

mparikh | 2021-12-15 02:36:07 UTC | #5

The heart beat function is not returning a i32

if I have the function **without async**, 

> #[export_name = "canister_heartbeat"]
> fn heartbeat_fn () {
>     ic_cdk::print("nice");
> }

works fine.

However **with async**, not so.

> #[export_name = "canister_heartbeat"]
> async fn heartbeat_fn () {
>     ic_cdk::print("nice");
> }
...
Installing code for canister dfx_hello, with canister_id tzq7c-xqaaa-aaaaa-aaamq-cai
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Wasm module of canister tzq7c-xqaaa-aaaaa-aaamq-cai is not valid: Wasm module has an invalid function signature. Expected return type [] for 'canister_heartbeat', got [I32].

-------------------------

lastmjs | 2022-01-27 22:20:02 UTC | #6

Did you ever get this sorted? I am trying to get a `canister_heartbeat` function working right now and I'm hoping to do cross canister calls from it, I hope this works

-------------------------

mparikh | 2022-01-27 22:36:15 UTC | #7

I was not able to. It would be very useful to have this heartbeat in an async context.

-------------------------

lastmjs | 2022-01-27 23:23:21 UTC | #8

You should at least be able to do ic_cdk::spawn

-------------------------

jzxchiang | 2022-01-28 22:43:09 UTC | #9

At least in Motoko, the `heartbeat` system function can definitely make and await on calls to other canisters.

See the [docs](https://smartcontracts.org/docs/language-guide/heartbeats.html):

> As an async function, Alarm's hearbeat function is free to call other asynchronous functions (the inner call to ring() above is an example), as well as shared functions of other c

That would be strange if it worked in Motoko but not in Rust...

-------------------------

senior.joinu | 2022-01-29 12:36:21 UTC | #10

```rust
#[heartbeat]
fn tick() {
  ic_cdk::block_on(async_function());
}
```

or 

```rust
#[heartbeat]
fn tick() {
  ic_cdk::block_on(async {
    async_function_1().await;
    async_function_2().await;
  });
}
```

-------------------------

lastmjs | 2022-01-29 14:49:35 UTC | #11

This definitely works, but you want to use `ic_cdk::spawn` now as `ic_cdk::block_on` was a misnomer and is deprecated.

-------------------------

