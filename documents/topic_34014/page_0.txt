DRE-Team | 2024-08-09 07:04:35 UTC | #1

Hello there!

We are happy to announce that voting is now open for [a new IC release](https://github.com/dfinity/ic/tree/release-2024-08-08_07-48-base).
The NNS proposal is here: [IC NNS Proposal 131697](https://dashboard.internetcomputer.org/proposal/131697).

Here is a summary of the changes since the last release:

Release Notes for [**release-2024-08-08\_07-48-base**](https://github.com/dfinity/ic/tree/release-2024-08-08_07-48-base) (94fd38099f0e63950eb5d5673b7b9d23780ace2d)
===================================================================================================================================================================

This release is based on changes since [release-2024-08-02\_01-30-base](https://dashboard.internetcomputer.org/release/3d0b3f10417fc6708e8b5d844a0bac5e86f3e17d) (3d0b3f10417fc6708e8b5d844a0bac5e86f3e17d).

Please note that some commits may be excluded from this release if they're not relevant, or not modifying the GuestOS image. Additionally, descriptions of some changes might have been slightly modified to fit the release notes format.

To see a full list of commits added since last release, compare the revisions on [GitHub](https://github.com/dfinity/ic/compare/release-2024-08-02_01-30-base...release-2024-08-08_07-48-base).

Features:
---------

* [`23af050fb`](https://github.com/dfinity/ic/commit/23af050fb) Crypto,Interface(crypto): Support key derivation in ic\_crypto\_ecdsa\_secp256k1 ([#706](https://github.com/dfinity/ic/pull/706))
* [`951e895c7`](https://github.com/dfinity/ic/commit/951e895c7) Execution,Interface: Handle stable\_read/write with Wasm64 heaps and testing infrastructure ([#781](https://github.com/dfinity/ic/pull/781))
* [`07786ecc4`](https://github.com/dfinity/ic/commit/07786ecc4) Execution,Interface: add allowed\_viewers to canister log visibility management canister types ([#606](https://github.com/dfinity/ic/pull/606))
* [`f116e5713`](https://github.com/dfinity/ic/commit/f116e5713) Execution,Interface: Limit number of snapshots stored per canister ([#726](https://github.com/dfinity/ic/pull/726))
* [`78dca2f91`](https://github.com/dfinity/ic/commit/78dca2f91) Execution,Interface: add support on canister manager for get block headers ([#381](https://github.com/dfinity/ic/pull/381))
* [`c0373c673`](https://github.com/dfinity/ic/commit/c0373c673) Execution,Interface,Message Routing: Parallel dirty page copying for page allocator ([#733](https://github.com/dfinity/ic/pull/733))
* [`2e6584c42`](https://github.com/dfinity/ic/commit/2e6584c42) Interface(nns): Implement the execution of UpdateCanisterSettings proposals ([#731](https://github.com/dfinity/ic/pull/731))
* [`168e5cc2f`](https://github.com/dfinity/ic/commit/168e5cc2f) Interface(ckerc20): NNS proposal to add ckWSTETH ([#612](https://github.com/dfinity/ic/pull/612))
* [`71838e9c1`](https://github.com/dfinity/ic/commit/71838e9c1) Interface,Message Routing: Checkpointing for canister snapshots ([#702](https://github.com/dfinity/ic/pull/702))
* [`2bf9d4463`](https://github.com/dfinity/ic/commit/2bf9d4463) Interface,Message Routing: State layout of canister snapshots ([#645](https://github.com/dfinity/ic/pull/645))

Bugfixes:
---------

* [`799cf9f94`](https://github.com/dfinity/ic/commit/799cf9f94) Consensus,Interface(types): Remove serde derive from ThresholdSigInputRefs ([#760](https://github.com/dfinity/ic/pull/760))
* [`e8a163fda`](https://github.com/dfinity/ic/commit/e8a163fda) Execution,Interface: Fix the return type of some System APIs ([#785](https://github.com/dfinity/ic/pull/785))
* [`82c76c1bb`](https://github.com/dfinity/ic/commit/82c76c1bb) Execution,Interface: Fix a debug assertion in update\_socket\_timeout ([#779](https://github.com/dfinity/ic/pull/779))
* [`8db01a49c`](https://github.com/dfinity/ic/commit/8db01a49c) Execution,Interface: Update heap delta debit and estimate when handling snapshots ([#727](https://github.com/dfinity/ic/pull/727))
* [`83b0fa536`](https://github.com/dfinity/ic/commit/83b0fa536) Execution,Interface,Message Routing: Consider canister snapshots when calculating available subnet memory ([#753](https://github.com/dfinity/ic/pull/753))

Chores:
-------

* [`0a12c4b66`](https://github.com/dfinity/ic/commit/0a12c4b66) Crypto,Interface(crypto): Annotate where parallelism can be used in NIDKG ([#671](https://github.com/dfinity/ic/pull/671))
* [`dae6bbe95`](https://github.com/dfinity/ic/commit/dae6bbe95) Interface: Update visibility of dfn\_\* libraries ([#804](https://github.com/dfinity/ic/pull/804))
* [`80ebdebe5`](https://github.com/dfinity/ic/commit/80ebdebe5) Interface: Update gz references ([#701](https://github.com/dfinity/ic/pull/701))
* [`fc4f2e385`](https://github.com/dfinity/ic/commit/fc4f2e385) Interface(IDX): specify which NNS canisters to use via env vars ([#675](https://github.com/dfinity/ic/pull/675))
* [`b0f4527a2`](https://github.com/dfinity/ic/commit/b0f4527a2) Interface,Networking(http-handler): Only log every 10 second in the call-v3 handler ([#717](https://github.com/dfinity/ic/pull/717))
* [`44a966ec6`](https://github.com/dfinity/ic/commit/44a966ec6) Interface,Networking(http-handler): Add a 1 second timeout when creating a subscriber in call-v3 handler ([#716](https://github.com/dfinity/ic/pull/716))
* [`0bd54a27f`](https://github.com/dfinity/ic/commit/0bd54a27f) Interface,Node: Remove obsolete set-node-id command ([#778](https://github.com/dfinity/ic/pull/778))
* [`4b51b1e23`](https://github.com/dfinity/ic/commit/4b51b1e23) Node: Update Base Image Refs [2024-08-06-0146] ([#765](https://github.com/dfinity/ic/pull/765))

Refactoring:
------------

* [`12e89bb81`](https://github.com/dfinity/ic/commit/12e89bb81) Interface: Migrate more type dependencies to use ic\_nns\_governance\_api ([#628](https://github.com/dfinity/ic/pull/628))

Tests:
------

* [`1a5c96918`](https://github.com/dfinity/ic/commit/1a5c96918) Consensus,Interface(consensus): Add exhaustive serialization->deserialization test for ConsensusMessage ([#795](https://github.com/dfinity/ic/pull/795))
* [`d5511c98e`](https://github.com/dfinity/ic/commit/d5511c98e) Interface,Message Routing: more complex input queues scenario for queue compatibility tests ([#745](https://github.com/dfinity/ic/pull/745))

Documentation:
--------------

* [`192fc1e12`](https://github.com/dfinity/ic/commit/192fc1e12) Node: fix upgrade-install documentation ([#786](https://github.com/dfinity/ic/pull/786))

# IC-OS Verification

To build and verify the IC-OS disk image, run:

```
# From https://github.com/dfinity/ic#verifying-releases
sudo apt-get install -y curl && curl --proto '=https' --tlsv1.2 -sSLO https://raw.githubusercontent.com/dfinity/ic/94fd38099f0e63950eb5d5673b7b9d23780ace2d/gitlab-ci/tools/repro-check.sh && chmod +x repro-check.sh && ./repro-check.sh -c 94fd38099f0e63950eb5d5673b7b9d23780ace2d
```

The two SHA256 sums printed above from a) the downloaded CDN image and b) the locally built image, must be identical, and must match the SHA256 from the payload of the NNS proposal.

-------------------------

Lorimer | 2024-08-10 00:27:43 UTC | #2

Thanks for this proposal @DRE-Team

Can I ask why/how this commit has been omitted from the change log? -> [refactor: Use ic_cdk::api::time for ingress message validator crate (… · dfinity/ic@00dc67f (github.com)](https://github.com/dfinity/ic/commit/00dc67f)

Isn't the ingress message validator a GuestOS component (and an important one)?

-------------------------

Lorimer | 2024-08-11 20:23:22 UTC | #3

Similarly, can I ask why/how this commit has been omitted from the change log? -> [chore: update default dkg-interval-length to use 499 for all subnets … · dfinity/ic@5b07641 (github.com)](https://github.com/dfinity/ic/commit/5b07641a3)

This commit makes the default `dkg-interval-length` 499 instead of 199, which is inline with recent subnet management proposals ([131699](https://dashboard.internetcomputer.org/proposal/131699) is currently the last open proposal that needs to be executed for all subnets to have a `dkg-interval-length` of 499).

I believe this commit affects GuestOS given that it alters the initialisation of [SubnetConfig](https://github.com/dfinity/ic/blob/master/rs/prep/src/subnet_configuration.rs#L212) which is utilised by GuestOS, and therefore should have been included in this proposal's change log - unless I'm mistaken.

-------------------------

sat | 2024-08-12 10:14:39 UTC | #5

[quote="Lorimer, post:3, topic:34014"]
Similarly, can I ask why/how this commit has been omitted from the change log? → [chore: update default dkg-interval-length to use 499 for all subnets … · dfinity/ic@5b07641 (github.com) ](https://github.com/dfinity/ic/commit/5b07641a3)
[/quote]

Checking with Luka, since he was the last to modify the release notes generation automation, so he's most familiar with the code.

-------------------------

Luka | 2024-08-12 09:54:54 UTC | #6

[quote="Lorimer, post:2, topic:34014"]
Can I ask why/how this commit has been omitted from the change log? → [refactor: Use ic_cdk::api::time for ingress message validator crate (… · dfinity/ic@00dc67f (github.com) ](https://github.com/dfinity/ic/commit/00dc67f)
[/quote]

this one is indeed not used in replica and therefore removed. i checked both bazel and cargo dependency paths and verified with developers.

-------------------------

Luka | 2024-08-12 10:11:28 UTC | #7

[quote="Lorimer, post:3, topic:34014"]
Similarly, can I ask why/how this commit has been omitted from the change log? → [chore: update default dkg-interval-length to use 499 for all subnets … · dfinity/ic@5b07641 (github.com) ](https://github.com/dfinity/ic/commit/5b07641a3)
[/quote]

from what i can tell this doesn't modify replica directly (again checking bazel and cargo dependency tree). it seems ic-admin uses this when proposing new subnets: https://github.com/dfinity/ic/blob/master/rs/registry/admin/src/create_subnet.rs#L12

-------------------------

Lorimer | 2024-08-12 19:00:07 UTC | #8

[quote="Luka, post:6, topic:34014"]
this one is indeed not used in replica and therefore removed. i checked both bazel and cargo dependency paths and verified with developers.
[/quote]

It's interesting that a modification to the ingress message verifier was recently included in a GuestOS proposal (this commit -> [b029bf49b](https://github.com/dfinity/ic/commit/b029bf49b) on this proposal change log -> [124487](https://dashboard.internetcomputer.org/proposal/124487)). Ingress message verification/validation is surely a responsibility of GuestOS, 🤔 but it perhaps no longer uses this component (whereas it once did...) is that right, or am I still misunderstanding?

[quote="Luka, post:7, topic:34014"]
from what i can tell this doesn’t modify replica directly (again checking bazel and cargo dependency tree)
[/quote]

Thanks for looking into this other case. There appear to be numerous source files under `/rs/execution_environment/` that utilise this object ([/rs/execution_environment/benches/lib/src/common.rs](https://github.com/dfinity/ic/blob/master/rs/execution_environment/benches/lib/src/common.rs) is an example). The [CODEOWNERS](https://github.com/dfinity/ic/blob/master/.gitlab/CODEOWNERS#L127) file indicates that these files are the responsibility of the `execution-owners` and `runtime-owners` team, which are both recognised as [replica teams](https://github.com/dfinity/dre/blob/main/release-controller/release_notes.py#L20).

There are no shortage of examples where bazel recognises components as GuestOS dependencies even when they have no chance of modifying GuestOS behaviour (and can therefore arguably be wrong, *in real terms*). Is it conceivable that under certain circumstances bazel could fail to recognise certain dependencies and/or filter them out for some reason?

-------------------------

Luka | 2024-08-13 07:24:17 UTC | #9

[quote="Lorimer, post:8, topic:34014"]
It’s interesting that a modification to the ingress message verifier was recently included in a GuestOS proposal (this commit → [b029bf49b](https://github.com/dfinity/ic/commit/b029bf49b) on this proposal change log → [124487](https://dashboard.internetcomputer.org/proposal/124487)). Ingress message verification/validation is surely a responsibility of GuestOS, :thinking: but it perhaps no longer uses this component (whereas it once did…) is that right, or am I still misunderstanding?
[/quote]

I think it was never used and it was just included in previous changelog because we didn't qualify bazel targets properly before [this change](https://github.com/dfinity/dre/commit/3d4273047bda33447202b69ba8b9ebcd9bc3eff1).

[quote="Lorimer, post:8, topic:34014"]
There are no shortage of examples where bazel recognises components as GuestOS dependencies even when they have no chance of modifying GuestOS behaviour (and can therefore arguably be wrong, *in real terms*). Is it conceivable that under certain circumstances bazel could fail to recognise certain dependencies and/or filter them out for some reason?
[/quote]

The former is quite easy to occur. One could just add a random dependency to GuestOS even if no code ever called that dependency and then bazel would have to say that package is a dependency. The opposite I cannot imagine. It would mean that Bazel is somehow utilizing that code to build the GuestOS but saying it's not. Due to sandboxing in bazel, this would be impossible (i.e. only packages that are explicitly added as dependencies can be used to build the target). It's still possible if we have bugs in the code that's querying Bazel and we obviously had bugs as we've seen above. That of course wouldn't be fault of Bazel.

-------------------------

Lorimer | 2024-08-13 18:19:03 UTC | #10

[quote="Luka, post:9, topic:34014"]
I think it was never used and it was just included in previous changelog because we didn’t qualify bazel targets properly before [this change](https://github.com/dfinity/dre/commit/3d4273047bda33447202b69ba8b9ebcd9bc3eff1).
[/quote]

Thanks for taking a look. I've had a peek at the change to `release_notes.py`. There's various refactoring, such as making the bazel query an argument of `bazel_query` rather than defined within the function (but ultimately the query looks the same). It's not immediately clear to me what the 'qualify bazel targets properly' fix aspect of this commit is.

Interesting that a hardcoded list of [bazel_packages_all](https://github.com/dfinity/dre/commit/3d4273047bda33447202b69ba8b9ebcd9bc3eff1#diff-4e639e2eea660e3f49e79cadccffc2d3c836713e77551ae307a769b64c07ac71R231) is added (this looks a little brittle, how is this kept up-to-date? 🤔).

In any case, I gather that bazel recognised the ingress message verifier commit as modifying a GuestOS dependency. You're saying it should have been filtered out as a 'hard' or 'soft' exclusion by the release notes generator - is that correct? Otherwise I'm not sure how it was considered for inclusion in the first place.

---------------

[quote="Luka, post:9, topic:34014"]
One could just add a random dependency to GuestOS even if no code ever called that dependency and then bazel would have to say that package is a dependency. The opposite I cannot imagine. It would mean that Bazel is somehow **utilizing that code to build the GuestOS but saying it’s not**
[/quote]

Thanks @Luka, ~~this comment got me thinking (more generally, rather than specifically about this release)... If I were a DFINITY engineer or an external contributor (in a hopeful future where IC-OS modifications from external contributors may occur), and I wanted to try and slip some GuestOS changes under the wider community's radar. Couldn't I just do this:~~
- ~~Modify a source code file or set of files~~
- ~~Reset the file metadata so that the modification timestamps are unchanged~~
- ~~Wait, knowing that these sneaky changes will likely go unnoticed by bazel (assuming checksum caching), and therefore also likely unnoticed by the wider community~~
- ~~Much later, to action my sneaky changes, I make a simple, justifiable, and unrelated change to those same files, simply to trigger bazel to rebuild GuestOS with those updated files (now including my old sneaky changes as well that were previously ignored)~~

~~Aren't the above steps a conceivable way of modifying GuestOS without those commits being included in the GuestOS change log that's published with the proposal?~~

^ **sorry this was a brain fart!** 😅 The build wouldn't be reproducible, because the file modification timestamp would be set for others based on when the changes were pulled from origin.

Nevertheless, there do appear to be documented cases where bazel has failed to acknowledge changes (just sharing as a matter of potential interest) -> [Error with external dependencies: some change are not seen · Issue #1525 · bazelbuild/bazel (github.com)](https://github.com/bazelbuild/bazel/issues/1525)

-------------------------

Luka | 2024-08-14 07:28:39 UTC | #11

[quote="Lorimer, post:10, topic:34014"]
Thanks for taking a look. I’ve had a peek at the change to `release_notes.py`. There’s various refactoring, such as making the bazel query an argument of `bazel_query` rather than defined within the function (but ultimately the query looks the same). It’s not immediately clear to me what the ‘qualify bazel targets properly’ fix aspect of this commit is.
[/quote]

This is important part of the change: https://github.com/dfinity/dre/commit/3d4273047bda33447202b69ba8b9ebcd9bc3eff1#diff-1f7aab386ded523747c8629f1efdbf0d55e4bac7ad2d33146ee965c0ca809105R308-R312

We previously tried to assign a file change to a package based on guestos dependencies list, instead of all. so some file changes were assigned to incorrect packages.

[quote="Lorimer, post:10, topic:34014"]
Interesting that a hardcoded list of [bazel_packages_all](https://github.com/dfinity/dre/commit/3d4273047bda33447202b69ba8b9ebcd9bc3eff1#diff-4e639e2eea660e3f49e79cadccffc2d3c836713e77551ae307a769b64c07ac71R231) is added (this looks a little brittle, how is this kept up-to-date? :thinking:).
[/quote]

this is unfortunate limitation of testing this. i didn't figure out how to run bazel binary within bazel test so i had to hardcode it. but this is just a test, and test is pinned to a specific commit, so it should be fine.

[quote="Lorimer, post:10, topic:34014"]
In any case, I gather that bazel recognised the ingress message verifier commit as modifying a GuestOS dependency. You’re saying it should have been filtered out as a ‘hard’ or ‘soft’ exclusion by the release notes generator - is that correct? Otherwise I’m not sure how it was considered for inclusion in the first place.
[/quote]

specifically, we wrongly assigned lots of file changes to `rs` package, whereas it should've been some subpackage. and since `rs` package is in dependency list of guestos, we ended up not hard excluding lots of commits.

[quote="Lorimer, post:10, topic:34014"]
Nevertheless, there do appear to be documented cases where bazel has failed to acknowledge changes (just sharing as a matter of potential interest) → [Error with external dependencies: some change are not seen · Issue #1525 · bazelbuild/bazel (github.com)](https://github.com/bazelbuild/bazel/issues/1525)
[/quote]

any software can have bugs of course :) 
i think in this specific case our notes changelog wouldn't be affected but maybe building the guestos would. proper dependency and sanbdoxing is a core feature of bazel, so any bugs like this seem highly unlikely to happen in the future and seems like a bad use of effort to engineer changelog generation accounting for bazel build bugs. correct changelog with a wrong build doesn't make much sense.

-------------------------

Lorimer | 2024-08-15 16:48:43 UTC | #12

[quote="Luka, post:11, topic:34014"]
specifically, we wrongly assigned lots of file changes to `rs` package, whereas it should’ve been some subpackage. and since `rs` package is in dependency list of guestos, we ended up not hard excluding lots of commits.
[/quote]

Understood, thanks for explaining further :)

-------------------------

