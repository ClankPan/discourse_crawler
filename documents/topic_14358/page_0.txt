skilesare | 2022-07-16 14:58:53 UTC | #1

```
debug { D.print("a thing i need to debug")};
```

The above gets taken out of your code by the compiler at build time if you use the release flag.  The Motoko team has the flags, so I'll let them document, but this enables a much better local development debug pattern like:

```
let debug_channel = {
   feature1 = true;
   feature2 = false;
};

...later

public shared func test() : async Bool{
    debug{ if(debug_channel.feature1){D.print("my function was called");};
};
```

Also only for local debugging because it will trap, but a godsend for testing:

```
   let #ok(myresult) = await myservice.function(); //throws if not an #ok variant
   let something = myresult.without_unwrapping;
```

Again...don't use this in your main actor code, but if you are writing motoko tests, this is going to save me **hundreds** of lines of code.

-------------------------

rossberg | 2022-07-16 21:04:53 UTC | #2

[quote="skilesare, post:1, topic:14358"]
```
   let #ok(myresult) = await myservice.function(); //throws if not an #ok variant
   let something = myresult.without_unwrapping;
```
[/quote]

Drive-by: in fact, you can pattern-match this in one line:
```javascript
let #ok({without_wrapping = something}) = await myservice.function();
```
Or, if you don't need to rename the field:
```javascript
let #ok({without_wrapping}) = await myservice.function();
```

-------------------------

claudio | 2022-07-18 06:42:14 UTC | #3

There has always been some basic doc here  

https://internetcomputer.org/docs/current/developer-docs/build/languages/motoko/language-manual#debug

But we should add something more prominent elsewhere.

-------------------------

