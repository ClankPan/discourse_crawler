groovee | 2020-10-23 01:39:55 UTC | #1

I heard more than once that MySQL is now dead, after Dfinity. So - if I have tabular-type of data that I had to run SQL queries on previously, how do I do that now, on Dfinity? How do I store the data, and how do I query it?

-------------------------

alexa.smith | 2020-10-23 16:17:49 UTC | #2

Hey @groovee! You might find [this course on data structures](https://github.com/DFINITY-Education/data-structures) to be helpful, and a few of the repos from one of language researchers, including [Motoko CRUD](https://github.com/matthewhammer/motoko-crud), [Motoko Sequence](https://github.com/matthewhammer/motoko-sequence), and [Motoko Graph](https://github.com/matthewhammer/motoko-graph). A community member is also doing some very interesting work with [GraphQL](https://github.com/lastmjs/graphql-icp). Hope this is a good start! :rocket:

-------------------------

groovee | 2020-10-23 18:23:34 UTC | #3

Ummm.... will these be of any use until I actually KNOW Motoko? (I'm already familiar with data structures to begin with.....)

-------------------------

groovee | 2020-10-23 18:25:35 UTC | #4

Btw, the links on the GraphQL page lead nowhere.....

-------------------------

Ori | 2020-10-23 19:19:00 UTC | #5

Those links came from an older version of the sdk, you’ll find that content (and more) here now: [Quick Start](https://sdk.dfinity.org/docs/quickstart/quickstart.html), [SDK Developer Tools](https://sdk.dfinity.org/docs/developers-guide/sdk-guide.html), [Motoko Programming Language Guide](https://sdk.dfinity.org/docs/language-guide/motoko.html) and [Motoko Language Quick Reference](https://sdk.dfinity.org/docs/language-guide/language-manual.html)

-------------------------

Ori | 2020-10-23 19:28:31 UTC | #6

Just dive in with the Motoko learning, run through the course Alexa linked and you’ll pick it up as you go, if you need to clarify anything specific in there just ask!

-------------------------

Ori | 2020-10-23 19:30:40 UTC | #7

If you go up a level on the repo you’ll find other courses too: https://github.com/DFINITY-Education

-------------------------

PaulLiu | 2020-10-25 18:30:24 UTC | #8

Just to throw in a different idea. If you really want relational data schema and SQL for its succinct query syntax, you can always build Sqlite in Wasm (with memory backed tables not files) and compile your application with it. Not that I've tried this, or implying it is easy, but it is something that people have tried in js and browser land.

-------------------------

groovee | 2020-10-26 13:33:40 UTC | #9

Umm.. to repeat, after GPT-3 and low/no-code dev platforms, is it any *point?*

-------------------------

morrolan | 2020-10-26 17:30:07 UTC | #11

It feels naive to think any of these 'no-code' platforms will, anytime soon, provide a way to create applications which is both more concise and as maintainable as modern programming languages. Unlike they manage to do that, I doubt they'll find a lot of adoption in professional software development. It's the WYSIWYG editors of website design all over again. ;)

Summing up - there definitely is a reason to learn an actual proper language, still.

-------------------------

groovee | 2020-10-28 20:03:19 UTC | #12

I will do *exactly* jack SHIT. Javascript compiles to WebAssembly just fine (https://www.nectar-lang.com), so where is there a need to learn another  language?? What does Motoko have that JS does not?? You wouldn't happen to be trying to do to the open web what Google did to the smartphone, are you?? (doesn't help that the Google Wasm guy now works for you). Explain to me how a non-profit is worth $9.5 BILLION, that too, even BEFORE the **launch** of their damn product?!! If that IS what you're trying to do, stop  now, It Won't Work. Also, explain to me CLEARLY how hosting on whatever this "canister" is, is different from good ol' Apache? If it doesn't let you run one app across 2 CPUs, then what DOES it do?!! Make it long and make it Good. Get started.

-------------------------

Ori | 2020-10-28 20:38:58 UTC | #13

Thoughts are of course welcome groovee, but please do try and keep the discussion civil in these channels.

-------------------------

alexa.smith | 2020-10-28 20:44:05 UTC | #14

Agreed, thanks @Ori! As a reminder @groovee, this forum is first and foremost meant to provide a safe, productive space for developers and community members to collaborate and ideate with one another. More on our guidelines [here](https://forum.dfinity.org/t/welcome-to-the-dfinity-developer-forum/7).

-------------------------

alexa.smith | 2020-10-29 16:45:29 UTC | #15

@groovee now back to your actual questions :) On Motoko, we fully understand the frustration around introducing and learning a new programming language, but in order to unlock some of the unique capabilities of the Internet Computer, we thought it was helpful to our community of Internet Computer enthusiasts to create Motoko. More on the rationale here: https://stackoverflow.blog/2020/08/24/motoko-the-language-that-turns-the-web-into-a-computer/

On canisters, [this video and write-up](https://medium.com/dfinity/software-canisters-an-evolution-of-smart-contracts-internet-computer-f1f92f1bfffb) from the Sodium launch event provides a really great overview of canisters, specifically discussing them as an evolution of smart contracts.

Hope these are a good start and looking forward to continuing the discussion.

-------------------------

groovee | 2020-10-30 02:53:13 UTC | #16

[quote="alexa.smith, post:15, topic:1516, full:true"]
Hope these are a good start and looking forward to continuing the discussion.
[/quote]

Oh, me too - how about that $9.5 billion? I'd like to know that before I watch any videos. Hey - if this thing IS something cool, no one will be happier than me :) I'd like to know if this thing has an OPINION on WHAT websites get hosted? ("governance" blah blah...). If I'm buying time on these servers, ALL of which payment goes back to the data centers, then how come I'm not just...paying them directly??

-------------------------

Ori | 2020-10-30 11:49:05 UTC | #17

I’d recommend reviewing some of the videos and articles groovee, they do cover a lot of good ground while explaining the various choices made.

-------------------------

Gabriel | 2020-11-02 21:47:28 UTC | #18

>Oh, me too - how about that $9.5 billion? 

First of all not even sure from where did you get that evaluation. Sentiment? We are all waiting for the mainnet and the token to be released but there's no need to be that vocal. 

Second this is a technical forum but to answer your question about GPT-3 have a look here (also plenty of threads on reddit about this) https://medium.com/@maxitech/will-gpt-3-replace-the-coders-783bf5adbfa2 from a beta tester.

> Q: Do you think GPT-3 will replace the coders?
A:  No, the work that most engineers don’t want to do will be replaced. When I copy and paste code from Stackoverflow to build an authentication flow for Google accounts, I always question why I am doing this in 2020. Millions of people do the same thing.
What will happen is that 90% of the boring tasks will be done very fast. However, like any engineer, who reads this, knows that the devil is in the details and in the last 10%.
Soon engineers will focus on the real details and do more creative work. As a result of this trend, general software will be further commoditized and subfields will continue to emerge.
This trend of developers concentrating on more value-added work started about a decade ago. The number of low-code and no-code products have increased significantly in recent years. Their software production capability has also improved. We expect GPT-3 to accelerate this trend.

Dfinity is not some state of the art super machine but they have one of the best teams of devs in the world and I'm pretty sure they're using what's best at this point in time. Maybe in the future AI will replace all coders but I think we're pretty far away. Also Dfinity solution to replace in memory persistance (not talking about orthogonal persistance  but that's not new as well) is not new (check neo4j ) In order to store it/query it you can use an DAG https://en.wikipedia.org/wiki/Directed_acyclic_graph and some patterns for search like in cypher query language. 

I'm working on  this for a separate project but @matthewhammer is working as well. It's the link @alexa.smith posted above. eg: Motoko-Graph 

No offense but I can tell you're not a seasoned developer based on your questions on this forum. Each and every programming language have been created with a special purpose to solve one or many issues others couldn't but it's not like NASA is going to trust (not soon anyway) an AI for a big project. 

In some sense I agree there are way too many programming languages around but you don't have to learn all of them. If you have some experience behind you it won't take long before you can grasp the basic concepts of a new one (unless you move from OOP to functional, in that case maybe a bit more longer huh) 



As @morrolan said it's WYSIWYG all over again. They've been on the market for plenty of years now and it's not like companies are firing devs to use those platforms.

-------------------------

matthewhammer | 2020-11-03 02:12:06 UTC | #19

[quote="groovee, post:12, topic:1516"]
Javascript compiles to WebAssembly just fine ([https://www.nectar-lang.com ](https://www.nectar-lang.com)), so where is there a need to learn another language??
[/quote]

Perhaps you could say more about the (JS?) programs that you'd like help running in Wasm (e.g., as a canister on the IC)? (regardless of whether you've done any aspect of that Wasm compilation already, with NectarJS or not.)

Personally, I'm less interested in any one language as much as I am in human-(computer)-human communication.  Motoko and Candid are simply tools to facilitate this communication, and (hopefully) help streamline human-to-human communication over the Internet Computer in the future.

Admittedly, I'm not familiar with NectarJS, but their page seems to admit that the solution may in fact still be a WIP and unfinished itself ("NectarJS is not finished yet and need more development."?)

Motoko is very young, and there is much left to do, but it already compiles into Wasm that runs on the IC platform.  If you can already compile your JS into Wasm somehow (with NectarJS or something else), that's what matters.  The Motoko language is happy to call, and by called by, any code that can do that once all are deployed onto the IC.  As you may know, we use another simpler, common language (Candid) to describe data between calls on the IC, each being something that compiles to Wasm, but perhaps not Motoko.  Motoko is not meant to be the only language, but just one of many.  JS is welcome, too, of course.

-------------------------

groovee | 2020-11-03 03:12:06 UTC | #20

What I would like to KNOW, instead of the stuff above, is that once all web becomes Dfinity, whether Motoko will be the only language we can write for that web in. Which might become Pay, and Costly, at any point!!! **THAT** is what I would like to **KNOW**. Not the 101 pluses and minuses OF the thing.

Can someone answer my question on this thing having an opinion on what sites get hosted, please?

-------------------------

cryptoschindler | 2020-11-03 08:17:19 UTC | #21

[quote="matthewhammer, post:19, topic:1516"]
Motoko is not meant to be the only language, but just one of many.
[/quote]

The answer is no, Motoko is not the only language.

-------------------------

groovee | 2020-11-07 08:13:24 UTC | #22

Ah, now THAT is Good To Know :)

And what about my question on this thing's opinion on sites??

-------------------------

groovee | 2020-11-07 08:18:33 UTC | #23

And btw, as I said before - if you guys're doing something cool, and *really* breaking up BigTech, then God Bless You Guys :) More power to you!

-------------------------

cryptoschindler | 2020-11-07 09:27:44 UTC | #24

Ultimately the IC itself doesn’t have an opinion.  But the people that own ICP have. There is an onchain government mechanism installed called ‘network nervous system’. If people participating in governance decided your site hurts the IC (and therefore the value of the tokens they stake) they can vote it off.

-------------------------

groovee | 2020-11-10 01:40:38 UTC | #25

No, that's Not Acceptable. As I just said in my other post, if we are to use Dfinity, they must change this - take that part of the code out of it.

-------------------------

cryptoschindler | 2020-11-10 06:43:31 UTC | #26

I personally really like the idea of it, i think it makes the platform more appealing to enterprises in comparison to ethereums “code is law” approach (although i don’t know if that changes with eth 2.0) and also makes it possible to vote out stuff like child porn platforms and the like. I like the idea of a free, open internet but I also like the idea of being able to shape it as a community of users in consesus without central censorship. With technology available now adays there’s no need to go for an all or nothing approach. Why don’t you want the NNS?

-------------------------

groovee | 2020-11-11 14:24:33 UTC | #27

No, I like the idea of all the porn stuff being kicked out too, but the sheer idea of *someone else* telling me what websites I can and can't put up is Unthinkable!

-------------------------

wang | 2020-11-12 04:42:14 UTC | #28

Amazon can censor your content if it violates their policies.
China can censor your content if it violates their policies.
Twitter can censor your content if it violates their policies.

Users have no say.

Censorship in our current ecosystem is unilateral. Moving to a more democratic and fair model seems beneficial, no?

-------------------------

groovee | 2020-11-12 13:45:02 UTC | #29

What is this "more democratic and fair model" of which you speak?

...and talking of which, how come ICANN doesn't delete the DNS entry of porno people in the root servers? Anybody figure that out??

-------------------------

wang | 2020-11-13 04:09:50 UTC | #30

We don't have details on how exactly governance works, but I would guess that ICP stakers can make proposals to eg. block a canister from being accessed. If some threshold of stakers vote in favor of this proposal, it is executed.

ICANN makes money from selling domains, their primary legal obligation is to store some identity information for each domain and make it publicly available. What the domain owners do with their domains is not of concern to ICANN.

-------------------------

factorlive | 2020-11-14 08:23:35 UTC | #31

> "SQL queries" - Yes, that's exactly what I expect to read in this thread. 🤪

I like the way how this thread first starts off with a wasm sqlite db and then dives into politics about the point of ICP at all.

-------------------------

matthewhammer | 2021-06-02 17:23:51 UTC | #33

I have some minor updates to this now-stale thread.  I still believe the original topic to be important, and a natural question to wonder when one finds either the Internet Computer or Motoko and wants to builld services with them.

First, the CanCan source code is now open and available to be cloned and forked:

  https://github.com/dfinity/cancan/

Regarding SQL and CanCan --- the CanCan backend is an intentionally-simple Motoko canister (a single one, for now).  To be as simple as possible, but no simpler, it does not support any query languages, per se, but it does represent (binary) relations and permit similar kinds of questions and answers to what one wants from a query language over tables.

In the Motoko CanCan backend, these relations represent mathematical relationships between users, their videos and their behavior.

For instance, [this (binary) relation](https://github.com/dfinity/cancan/blob/4e082836978024196e1fcab084d159f5cb41e6f0/backend/State.mo#L157) relates the "x follows Y" relation across users.  It permits questions of the form "who follows X?" and "who is followed by Y?" (in other words, bidirectional questions).

Notably, a (general) binary relation is distinct from a 1-1 mapping, which has additional constraints, and a simpler representation.  1-1 mappings are commonly used to relate objects with their hashes.  A hashtable represents one direction of such a mapping, but is not sufficient to represent a binary relation on its own.  Most relations are not 1-1, such as who follows who in a social network.  Under the hood, a general relation typically needs multiple inter-related maps (e.g., each a hashmap) to provide an efficient API for the (general) relation.

[`RelObj` is an OO adaptation of `Rel`, which itself implements purely-functional binary relations using the base library's `Trie` module](https://github.com/dfinity/cancan/blob/4e082836978024196e1fcab084d159f5cb41e6f0/backend/RelObj.mo#L13). These modules are simple, but already give enough for [all of the stateful relations in CanCan](https://github.com/dfinity/cancan/blob/4e082836978024196e1fcab084d159f5cb41e6f0/backend/State.mo#L19), including [access control management and checks](https://github.com/dfinity/cancan/blob/4e082836978024196e1fcab084d159f5cb41e6f0/backend/Access.mo#L13).

CanCan serves many other purposes than demonstrating data management patterns in canisters, including demonstrating a real professional mobile frontend, and a social media Dapp, with rewards system and distributed moderation story, etc.

To isolate the data management patterns from the rest of the project and focus on them, I recently distilled those of the backend architecture from the rest of the CanCan story, and created a [separate open source project, Candid Spaces](https://github.com/matthewhammer/candid-spaces).

Unlike CanCan, which shows an end-user facing Dapp, Candid Spaces is aimed at developers.  It aims to host data lakes of candid data, for general purposes yet to be determined, but initially to benefit developers that want to share IC data from their canisters, log what their canisters do as they do it, or back it up their bulk state into a separate, searchable (general) data store, for candid data.

It is a work in progress, but shows another instance of the CanCan architecture, for another use case.

Happy to answer questions here, or in other threads on the forum.

-------------------------

Chris | 2021-06-02 18:34:12 UTC | #34

I would recommend giving Motoko a chance before bashing it, if your looking for more of a high level technical explanation of 'why', this video featuring Andreas Rossberg [one of the key developers of Web Assembly] that is hidden 2hrs and 23 minutes into the Genesis launch event is the most concise I have seen

https://www.youtube.com/watch?v=xiupEw4MfxY&t=8603s

On the conceptual level, it aims to bring all the functionality and the canister-as-an-actor model to the coder as concisely as possible... 

... to understand why this is such a powerful concept running on the Internet Computers network of distributed nodes you should read up on the Actor Model and some of the original manifestations of parallel computing that inspired it...

https://en.wikipedia.org/wiki/Actor_model

-------------------------

Chris | 2021-06-02 18:47:28 UTC | #35

... web Assembly is a compilation target with better/more performant access to low-level functionality of the device than is available with javascript, ... it allows for more native-like apps to run in browsers without having to install anything.

Motoku is there to abstract away all the boilerplate that you would have if you used something like Rust... Using it, Can Can was written in ~ 1000 lines of  code.



Next little chunk of money I make where I can escape the day to day rat race for a bit I plan on taking some time to try and build a little mock social media platform on it

-------------------------

wole | 2021-12-04 15:51:19 UTC | #36

[quote="Ori, post:5, topic:1516"]
Motoko Programming Language Guide
[/quote]

@alexa.smith I'm just seeing the reference to the (very good) data structures course (yeah, 1 year late). This is literally the first thing I would have wanted to study after "hello world", and yet there's nothing about this anywhere on sdk.dfinity.org . If it's there it's well hidden. Can this be given more prominence? The issue of "how best to migrate all my SQL to Motoko?" is fundamental to thousands of devs...

-------------------------

alexa.smith | 2021-12-06 18:55:46 UTC | #37

@wole thanks for flagging this, I've sent along to the team. We're in the process of making some significant updates to our dev docs and will work to incorporate this feedback. Thanks again!

-------------------------

