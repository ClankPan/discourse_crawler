avi | 2021-11-26 10:00:46 UTC | #1

When I recorded the consumption of cycles, I found a very strange problem.
Motoko is a reactor model, should there be no concurrency problems? Or maybe it appears?

[https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3143301081](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3143301081)

This is my demo code,
Execute after I deploy the code
If I click call once and wait for the result to execute, the result is what I want
![image|690x361](upload://o2DHHNhjJ5RiNjNPAiDMLcrRbTn.png)

But when I clicked it multiple times quickly, the result was the same as the picture.
There are fewer cycles before the execution of the loop than after the execution of the loop

-------------------------

avi | 2021-11-26 07:49:39 UTC | #2

@nomeata @stephenandrews help me?

-------------------------

avi | 2021-11-26 10:06:52 UTC | #3

When I use async await to get the data and hashmap to store the sh. A more amazing problem occurs, I can't even get my cycles。

![image|690x396](upload://r7BuOdLMEeo2uDj4auVXdzpWctW.png)

[https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3662302706](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3662302706)

-------------------------

stephenandrews | 2021-11-26 11:44:09 UTC | #4

Yeah await drops atomicity, so you need to handle that in your code

-------------------------

avi | 2021-11-26 13:44:03 UTC | #5

[https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3143301081](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3143301081)
This is my demo without async await

-------------------------

peterparker | 2021-11-26 13:58:41 UTC | #6

[quote="stephenandrews, post:4, topic:9089, full:true"]
Yeah await drops atomicity, so you need to handle that in your code
[/quote]

@avi yeah looks good I think if you move the demo's `await` before `Array.append`

![Capture d’écran 2021-11-26 à 14.56.52|690x450](upload://j5hS4TJhh0PPDT5z8b3GGLQBk7A.jpeg)

-------------------------

avi | 2021-11-26 16:37:36 UTC | #7

I modified it, but it still appeared.

![image|690x438](upload://d6dco8z8hmJUDy0HB2I7psMxsX.png)



In my case, I quickly clicked call 10 times within 3 seconds.
![image|690x310](upload://UgbMk8IUDI1nFk89cLfUcwZ665.png)

-------------------------

chenyan | 2021-11-26 19:46:10 UTC | #8

This is expected. You lose atomicity after await. So you cannot assume the global state is the same when the async calls reply back. See Joachim's [blog post](https://www.joachim-breitner.de/blog/788-How_to_audit_an_Internet_Computer_canister) about inter-canister calls.

-------------------------

avi | 2021-11-27 00:45:45 UTC | #9

Is motoko not single threaded?

-------------------------

avi | 2021-11-27 02:15:02 UTC | #10

![image|690x307](upload://sGUZ5TNjgzp7E0eREdkJQakDP4q.png)

-------------------------

rossberg | 2021-11-29 09:45:53 UTC | #11

Atomicity is only guaranteed between awaits – otherwise an await could block your canister indefinitely. See [this section of the manual](https://smartcontracts.org/docs/language-guide/actors-async.html#_using_await_to_consume_async_futures) (especially the warning box).

-------------------------

