Ori | 2020-08-29 18:34:10 UTC | #1

For the developers! We’re always learning...

“At DFINITY, we believe in giving developers the tools and guidance to help them utilize the Internet Computer’s superpowers to create next-generation apps and services. To help ensure that building on the Internet Computer is as simple as possible, we’re excited to introduce a new video series to our Developer Center.

https://medium.com/dfinity/these-videos-teach-the-basics-of-building-on-the-internet-computer-78e47654845b

“Building on the Internet Computer: Fundamentals condenses the most important concepts for programming on the platform into 10 short videos. The series gives viewers a clear understanding of what the Internet Computer is, why developers should be excited about it, and how to get started creating apps.”

It’s an amazing resource and there’s something for everyone in here—The full series and related tutorials can be found at the Developer Center:

https://sdk.dfinity.org/docs/videos-tutorials.html

-------------------------

atom | 2020-08-29 18:43:39 UTC | #2

Thank you for sharing this with us! I will give it a try after finishing the classical tutorials. :slight_smile:

-------------------------

4johnny | 2020-10-04 09:47:10 UTC | #3

One problem I have following along with these videos (esp. #5 Introducing Motoko, a language designed for the Internet Computer) is that the Motoko extension for VSCode (MacOS) does not highlight compiler errors, nor show anything in the "Problems" tab of the VSCode Terminal window.  It does seem to show syntax colour.

Is the extension not configured right somehow?

-------------------------

Ori | 2020-10-04 14:03:28 UTC | #4

It will do, but you need to keep an eye on a couple of things:

You need to choose which canister to run the extension on, you see the dialog when you open the project in VSCode, or press ctrl-shift P and type Motoko to find the restart language server command.

You need to make sure you’re importing files you’re working on from your main. Motoko discovers files as it chases your imports.

Also, it tends to hide other errors if one shows up earlier in the checks, so fixing errors in main should make the next highlight in turn etc. Commenting out blocks helps if you need to work on the other files first.

(Summarised from this thread: https://forum.dfinity.org/t/vscode-motoko-extension-only-works-in-one-file/906)

-------------------------

