avi | 2021-11-04 10:39:53 UTC | #1

Nat subtraction overflow problem
0-1 in motoko will report an error Natural subtraction underflow
But in solidity 0-1 will return 115792089237316195423570985008687907853269984665640564039457584007913129639935
This will cause a lot of procedural problems

-------------------------

avi | 2021-11-04 10:43:05 UTC | #2

I know because in solidity, the maximum is uint256 int256, so you can use the maximum value to subtract,
In motoko, nat int has no upper limit precision, so there is no way to deal with it, but is there really a scene with unbounded precision? Can motoko nat int have a maximum accuracy of 64? Can it be used in all scenarios?

-------------------------

nomeata | 2021-11-04 13:00:43 UTC | #3

If you really want wrap-around arithmetic, you can use `Nat64` with the `-%` operator. But are you sure you want that?

-------------------------

avi | 2021-11-04 13:12:26 UTC | #4

Yes, I need it, but the precision of nat64 is not enough for my data calculation.

-------------------------

nomeata | 2021-11-04 13:40:43 UTC | #5

Then use `Int` and wrap your operations in ` ‚Ä¶ % 2**256` maybe?

-------------------------

avi | 2021-11-04 15:48:53 UTC | #6

Has motoko considered giving more nat formats based on more scenarios? nat128-256 Int 128-256 format to make writing programs more convenient?

-------------------------

nomeata | 2021-11-04 16:58:50 UTC | #7

There has been discussion. Back then the reasoning for not providing more was ‚Äúwhere do we stop‚Äù and then ‚Äúlets just stick what's natively provided my WebAssembly‚Äù. But then we were explicitly not building a blockchain back then, but a decentralized cloud, so ü§∑‚Äç‚ôÇÔ∏è

-------------------------

