skilesare | 2024-02-12 09:25:27 UTC | #1

# PDF Utility Canister - Rust - #37

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification: (01/09/2023) 
* Open for application: (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2023/01/09/37-PDF-Utility-Canister-Rust.html)

## Bounty Details

* Bounty Amount: $6,000 USD of ICP at award date.
* ICDevs.org Bounty Acceleration: For each 1 ICP sent to 860bd56f4c8a9d40f26462e51e2a4dd4e27cf0e1463372a1179df089695bfd63, ICDevs.org will add  .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Team
* Opened: 01/09/2023
* Time Commitment: Weeks
* Project Type: Canister
* Experience Type: Intermediate - Rust;

## Description

The PDF Utility canister will allow other canisters on the IC to generate PDF documents.

Requirements:

1. Use https://github.com/dabega/genpdf-rs to expose PDF generation functionality.
2. Allow a canister to push images/fonts/text blocks into the canister(Must support >2MB files, perhaps implement pipelinify schema - https://github.com/skilesare/pipelinify.mo)
3. Create a candid object notation for describing a PDF using the features supported by genpdf-rs.
4. Ability to references named, pushed files/fonts.
5. Provide performance tests and explanations of the limits of the canister's ability to generate a PDF given cycle limits.
6. If the library requires multiple rounds to generate a reasonable PDF, consider implementing pipelinify with timers to automate the task across multiple rounds.

The canister should be created such that it can be deployed and assigned an allow list of callers.

It should also work as a library for other rust canisters that want to include the functionality as a part of another canister without compile errors.

With this version of a the canister, the user that wants PDF generation should deploy their own Utility canister so that they can manage their own cycles. 

Upon completion of this bounty the developer will be auto qualified to implement any future bounty that may include an attempt to wrap the service as a broader utility complete with its own tokenomincs and potentially and eventual deployment via SNS or other DAO structure.


This bounty gives the opportunity to

* learn about pdf generation
* learn about pipelinify.mo
* learn how Implement a Utility canister on the IC.

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 860bd56f4c8a9d40f26462e51e2a4dd4e27cf0e1463372a1179df089695bfd63.  ICDevs will match the bounty $40:1 ICP for the first 125 ICP out of the DFINITY grant and then 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification: (01/09/2023)

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

fyrex | 2023-01-18 23:42:59 UTC | #2

Hi @skilesare !

We are Fyrex, a software agency specialized in web3 development. We would like to develop this canister.

Our team has proven experience in open source projects. We contributed to the following GitHub repos:

* Psychedelic/dab
* Psychedelic/plug
* miguelToscano/w3ns-dev

We also contributed to many others closed source projects.

Let us know if you are interested.

-------------------------

skilesare | 2023-01-19 03:26:01 UTC | #3

Sounds amazing. Looks like you've done some good work.

-------------------------

fyrex | 2023-01-20 23:38:24 UTC | #4

Are you interested in us taking care of the development of this canister?

If so, what would it be the next step?

-------------------------

skilesare | 2023-01-21 04:07:49 UTC | #5

Yes. Next step is to lay out what your plan of implementation is and start work. Good luck! Looking forward to it.

-------------------------

skilesare | 2023-01-30 14:26:02 UTC | #6

Any updates on this Bounty.

-------------------------

fyrex | 2023-02-03 02:43:31 UTC | #7

Hi @skilesare. We've been investigating this and it seems like the `genpdf` crate has some dependencies that cant run on the IC runtime. Did you get a chance to import this crate on a canister yourself? We havent been able to.

The error: `"Wasm module of canister rrkah-fqaaa-aaaaa-aaaaq-cai is not valid: Wasm module has an invalid import section. Module imports function '__wbindgen_describe' from '__wbindgen_placeholder__' that is not exported by the runtime."`

-------------------------

domwoe | 2023-02-03 07:45:18 UTC | #8

The crate needs access to the filesystem to render PDFs to a file. This is not available on the IC. You should have a look if you can disable that feature or otherwise patch the library.

-------------------------

skilesare | 2023-02-03 13:22:43 UTC | #9

You'd need to find the rust code that writes to disc and write to memory instead.

-------------------------

fyrex | 2023-02-07 20:06:46 UTC | #10

We've spent some time researching possible solutions and came across with the following problems:
- The `genpdf` crate doesnt have an architecture that encapsulates filesystem accesses. Changing that requires a lot of reverse engineering effort.
- The crates which `genpdf` is built on also have the problem mentioned above.
- We tried other crates that also present this incompatibilities (`mdbook-pdf` and `printpdf`).
- The `dfx` tool doesnt give enough feedback to guarantee that filesystem access is the only incompatibility with the IC runtime.

We're sorry to say that the required effort to solve them surpasses the amount of resources we currently have available and we won't continue with the development of this bounty.

-------------------------

bitdivine | 2023-02-08 01:41:44 UTC | #11

I will note that writing raw postscript isn't hard and PDF is just a fancy postscript with lots of options, most of which you don't need most of the time.  If you can minimise your requirements you might well find that there is a tractable solution, be it writing the PDF directly or using a minimal pdf library.

I personally don't have time to address this but I used to quite a bit of work on low level file formats, including lots of ps and a bit of pdf so I know that, depending on your needs, it may be easier than you think.  (If you are comfortable with the programming model.)

-------------------------

bitdivine | 2023-02-08 01:51:13 UTC | #12

Apropos cycle limits, one nice thing about pdf is that it is built around pages in a way that ps is not.  Maybe generating a page at a time is a natural unit.  So maybe you could start with say a Rust version of minipdf. https://coolbutuseless.github.io/2019/08/14/introducing-the-minipdf-package-for-writing-raw-pdfs/

-------------------------

ovictor | 2023-02-08 02:04:17 UTC | #13

Maybe I'll get this one. @skilesare , I'm allowed to fork genpdf-rs and change it to load the font and save the PDF in the canister memory as needed?

-------------------------

mparikh | 2023-02-08 03:14:30 UTC | #14

I think forking is the only way to go currently.

Patching though is another story because either (a) you will need to maintain two forks or (b) convince two separate reps to accept your patches. 

Please be aware that you're likely going to have patch printpdf as well ; as that is a dependency as well as mentioned by @fryex

Also , while not likely, after you resolve the file dependency,  you might come up against other dependencies as well.


The surgery may be extensive; because the crates have embedded file trait semantics as well (such as write).

-------------------------

skilesare | 2023-02-22 20:38:01 UTC | #15

Yes...if you want to take a swing..that would be fine.

-------------------------

skilesare | 2023-03-07 18:46:15 UTC | #16

@ovictor Are you still interested?

-------------------------

pramitgaha | 2023-04-17 05:21:56 UTC | #17

I want to try working on this bounty, but I couldn't understood the task properly. The smart contract will be like a file editor and when user asks for the pdf I've to generate a pdf with all data aligned as user has specified/added?

-------------------------

ovictor | 2023-06-05 03:59:07 UTC | #18

[quote="fyrex, post:7, topic:17890"]
wbindgen_placeholder
[/quote]
Sorry for the delay, I had some time off. I could not get rid of bindgen placeholder problem. I will try take a look again next week, but probably not.

-------------------------

skilesare | 2023-09-28 17:11:06 UTC | #19

This Bounty has been Retired.  More bounties soon!

-------------------------

Isaque | 2023-10-30 20:00:22 UTC | #20

Hi @skilesare  that means is finished and we can find the crate to use or not at all?

-------------------------

