skilesare | 2021-09-10 02:50:08 UTC | #1

I want to do something like the following. Is it possible?  age : Nat is listed on the pattern matching page at https://sdk.dfinity.org/docs/language-guide/pattern-matching.html but it doesn't seem to work/compile here.  I tried just using the type, but that didn't work either.  Is there any way to programmatically deduce the type used in a generic?

```
public func test<T>(x : T) : async Text {
      switch(x){
          case(x : Nat){
              return Nat.toText(x);
          };
          case(x : Text){
              return x;
          };

      };
  };
```

-------------------------

paulyoung | 2021-09-10 06:21:27 UTC | #2

I don’t think so. You could create a variant with cases for Nat and Text though, if that’s acceptable for your use case.

Something like:

```
type TextConvertible = {
  #nat: Nat;
  #text: Text;
};

public func toText(x : TextConvertible) : Text {
  switch (x) {
    case (#nat(nat)) {
      return Nat.toText(nat);
    };
    case (#text(text)) {
      return text;
    };
  };
};
```

The call it with `toText(#nat(42))` or `toText(#text(“Hello”))`

Alternatively you could take the approach described in this blog post by @nomeata: https://www.joachim-breitner.de/blog/398-Making_dictionary_passing_explicit_in_Haskell

I did something experimental along those lines in Motoko a while back. It could get quite verbose at times though.

Unfortunately I think it’s in a private repo somewhere.

-------------------------

paulyoung | 2021-09-10 06:45:59 UTC | #3

A more ergonomic approach might be to have your function accept any type with a `toText` method as its argument, and then create your own wrapper classes for `Nat`, `Text`, and so on that implement that interface.

Something like this:

https://forum.dfinity.org/t/idea-for-crud-types-feedback-appreciated/1054/2?u=paulyoung

Or in your case:

```
type ToText<A> = {
  toText : A -> Text;
};

func toText(x : ToText) : Text {
  return x.toText();
};
```

This example seems a bit pointless but it can be quite powerful when you implement multiple interfaces in a single type and then deal with abstract values.

I’m not sure if Motoko supports something like `func toText<A : ToText, OtherInterface>(x : A) : Text {` these days but that would make it more practical.

I was resorting to this hack in the past but it doesn’t help with accepting function arguments that are super types of multiple types or “implement multiple interfaces”:

https://forum.dfinity.org/t/idea-for-crud-types-feedback-appreciated/1054/3?u=paulyoung

-------------------------

claudio | 2021-09-10 17:10:24 UTC | #4

The short answer is no. Motoko's polymorphism is parametric, and there is by design no way to test the identity of a type parameter.

Type annotations on patterns are not dynamic type tests:
https://sdk.dfinity.org/docs/language-guide/language-manual.html#pat-anno

In Haskell, people use type classes to work around this limitation in some cases - though expressible in Motoko, it quickly gets ugly without Haskell style inference of dictionaries:

https://github.com/dfinity/motoko/blob/master/test/run/ott-typeclasses.mo

Your best bet is to have the call site pass in the desired `toText` function as an extra argument `test`.

-------------------------

skilesare | 2021-09-10 17:30:51 UTC | #5

[quote="paulyoung, post:2, topic:7112"]
```
type TextConvertible = {
  #nat: Nat;
  #text: Text;
};
```
[/quote]

This is exactly the thing I'm trying to get a value out of. I was hoping to have a getRawValue<T>(x : TextConvertable) : T{} that would unwrap that value but it looks like there is little to no reflection capability.

I wonder if a typeOf() function is possible in motoko that returns the type.  Seems like a reasonable thing to add(edited because claudio says it isn't reasonable as the language just doesn't support it.).

-------------------------

AVOlight | 2022-11-14 21:33:29 UTC | #6

Thank you for providing so many great examples on this forum :grin:

Originally I was quite frustrated with all these custom objects but now I see that they are so helpful for all these undocumented canisters services; the more public input and output data guidance there is directly on the API the better.

-------------------------

paulyoung | 2022-11-14 21:41:32 UTC | #7

[quote="claudio, post:4, topic:7112"]
In Haskell, people use type classes to work around this limitation in some cases - though expressible in Motoko, it quickly gets ugly without Haskell style inference of dictionaries
[/quote]

I tried this a long time ago but revisited it recently and it’s definitely an improvement thanks to some recent language features.

https://github.com/paulyoung/motoko-type-classes/blob/15cc7d14d42b334e1585ed9f03c9396c7af31f6d/Main.mo#L12-L16

-------------------------

