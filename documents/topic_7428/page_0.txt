avi | 2021-09-20 15:50:41 UTC | #1

How Motoko uses the ‘~’ bitwise negation operator
Nat and Int did not find a corresponding method

I need to use it in my program.
Is there an alternative.

For a language, there is no such basic support, which surprised me

-------------------------

quint | 2021-09-20 16:03:43 UTC | #2

Hey @avi. You can only use `~` on `Nat64` (and lower), not on `Nat` directly.
So you'll have to convert them first (i.e. `Nat64.fromNat(n)`)

-------------------------

avi | 2021-09-20 16:31:00 UTC | #3

Nat64 When I am using a very large value, an error occurs

-------------------------

quint | 2021-09-20 17:32:57 UTC | #4

Yes, you can only use this for values under `18446744073709551615`.
You'll have to write your own logic, afaik there is no package that supports this atm.

-------------------------

avi | 2021-09-20 17:51:41 UTC | #5

Although I know that this can only be done, shouldn’t this be something that should be considered at the very beginning of a design language?

-------------------------

claudio | 2021-09-20 20:23:39 UTC | #6

Nat and Int are arbitrary precision and have morallly infinite bitwidth. Does it actually make sense to support bitwise negation for them? I'm pretty sure it does not, but am happy to be educated otherwise.

-------------------------

rossberg | 2021-09-20 20:38:22 UTC | #7

@claudio, I think you could define it for Int, but not for Nat.

-------------------------

nomeata | 2021-09-21 14:53:47 UTC | #8

Yes, two-complement works for infinite bitwidths as well; negative numbers have all the infinite number of high bits set. See for example the `Bits` instance of `Integer` in Haskell.

-------------------------

claudio | 2021-09-22 02:03:32 UTC | #9

Opened an issue https://github.com/dfinity/motoko/issues/2799 for triage/tracking.

-------------------------

