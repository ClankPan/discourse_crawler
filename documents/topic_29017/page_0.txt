domwoe | 2024-05-14 19:42:48 UTC | #1

Status: Complete
Project Type: Cooperative/Contest - Multiple workers can submit work and the bounty is shared 
Time Commitment: Days
Experience Level: Intermediate
Size: Up to USD 10'000 in ICP (at time of distribution) - Up to 5k per worker.
Deadline: Extended (TBD)


## Overview

Runes are a new protocol to create and transfer fungible tokens on Bitcoin. The protocol was designed by Caset Rodamor, the inventor of Ordinals, to be more efficient than prior popular meta protocols like BRC-20. Runes protocol messages are stored in `OP_RETURN` transaction outputs and thus don't lead to the bloat of the UTXO set, i.e. of the Bitcoin state.

Runes come into existence by being etched. Etching creates a rune and sets its properties. Once set, these properties are immutable, even to its etcher. 

In this bounty, your task is to create an etching or launchpad service inside a canister.

## Acceptance Criteria

- Frontend and backend implemented on ICP
- Option to connect/pay with Bitcoin Wallet or with ckBTC
- Uses threshold ECDSA and Bitcoin API
- Allows to set parameters according to [spec](https://docs.ordinals.com/runes/specification.html#runestones)
- Open source code under MIT or Apache-2.0 license on Github
- Proper [README](https://github.com/dfinity/grant-rfps/blob/main/repo-checklist.md#blue_book-create-an-informative-readme)
- Short Video Demonstration

## Evaluation Criteria

- Design/UX
- Functionality
- Code quality

## Potential Followons

- Create a wrapped version of Runes and use liquidity bootstrapping, i.e. bonding curve to sell the pre-mine allocation and establish a price

## How to participate?

Post your submission here in the thread. Please introduce yourself early on if you plan to participate.
Please be aware that [Terms and Conditions](https://support.dfinity.org/hc/en-us/articles/4401932915860-DFINITY-DEVELOPER-GRANT-PROGRAMS-TERMS-AND-CONDITIONS) of the DFINITY Developer Grants Program apply.

## References

- [Runes Specificatation](https://docs.ordinals.com/runes.html)
- [Bitcoin API Docs](https://internetcomputer.org/docs/current/developer-docs/multi-chain/bitcoin/overview)

-------------------------

domwoe | 2024-04-15 15:32:01 UTC | #2

The original deadline passed yesterday. Is anyone working on this bounty?

-------------------------

icnerd | 2024-04-15 17:26:43 UTC | #3

hello @domwoe 

I'm working on it, here is my code so far: [etcher](https://github.com/pramitgaha21/etcher.git)

-------------------------

domwoe | 2024-04-15 17:41:09 UTC | #4

Would you mind making the code public?

We'll extend the deadline. I'll give an update in the next couple of days.

-------------------------

icnerd | 2024-04-15 17:44:32 UTC | #5

I've made the code public!

-------------------------

icnerd | 2024-04-15 18:40:35 UTC | #6

@domwoe 

here is the missing thing:
* Conversion of name into base26 number.
I had problem understanding how it works. As the docs said: `A` is 0, `B` is 1, .... and `BA` is 52. I wasn't able to figure out how `BA` would be 52. It took 2 days to understand thisðŸ˜…
* Test using the CKBTC as payment option. I wasn't able to build n deploy `CKBTC minter` locally.
Here is my flow, that I'm thinking to achieve.
![Screenshot 2024-04-16 at 00.18.03|689x397](upload://dHYVsxXMWRbtUdDLL5BKdoxF88e.png)

Also the last thing,
I wasn't able to find any testnet faucet with good balance.

-------------------------

Zedonboy | 2024-04-16 20:08:54 UTC | #7

@domwoe 

Here's the Rune launcher repo

https://github.com/Zedonboy/icp_rune_launcher

It works, its tested and trusted

-------------------------

cymqqqq | 2024-04-17 03:09:34 UTC | #8


Hello there, I want to note that the runes now only support taproot addresses currently, and it needs to be signed with schnnor signature. But now the ICP only supports t-ecdsa signature.(For the wpkh address)
For the runes, we need a commit transaction and reveal transaction, so we need a reveal script which needs to insert tapscript to the reveal transaction.
So we need a lot of work to do. :slight_smile:

-------------------------

domwoe | 2024-04-17 07:23:53 UTC | #9

[quote="cymqqqq, post:8, topic:29017"]
For the runes, we need a commit transaction and reveal transaction, so we need a reveal script which needs to insert tapscript to the reveal transaction.
[/quote]

Yep, this is true. There are a couple of workarounds though, for example:

- Just use a Scnorr key in the canister or https://github.com/domwoe/schnorr_canister until tSchnorr is available. You can also immediately transfer any premined tokens to a PWSH address.
- Generate the commit transaction in the canister, but let the reveal transaction be signed by a user wallet.

-------------------------

domwoe | 2024-04-17 07:26:16 UTC | #10

@icnerd @Zedonboy 

We are planning to extend the deadline until Sunday. Would that work for you?

Please make sure that you meet all the points in the acceptance criteria until the deadline.

-------------------------

cymqqqq | 2024-04-17 07:35:34 UTC | #11

`You can also immediately transfer any premined tokens to a PWSH address.`
Do you mean we can use Schnnor key in the canister to sign the segwit v1 transaction with a p2wsh address and send the transaction to bitcoin network?(If we send the transaction from ICP to bitcoin network, can we track it in the mempool or blocksteam?)

-------------------------

domwoe | 2024-04-17 10:17:23 UTC | #12

This needs to be verified by someone looking into the spec in detail, but I assume you can essentially allocate the runes to a normal PSWH output already with the reveal transactions. If that's not possible you'd need one additional transaction.

[quote="cymqqqq, post:11, topic:29017"]
If we send the transaction from ICP to bitcoin network, can we track it in the mempool or blocksteam?
[/quote]

Yes, sure. These are all regular Bitcoin transactions that get submitted to the Bitcoin network.

-------------------------

icnerd | 2024-04-17 15:01:29 UTC | #13

[quote="cymqqqq, post:8, topic:29017, full:true"]
Hello there, I want to note that the runes now only support taproot addresses currently, and it needs to be signed with schnnor signature. But now the ICP only supports t-ecdsa signature.(For the wpkh address)
For the runes, we need a commit transaction and reveal transaction, so we need a reveal script which needs to insert tapscript to the reveal transaction.
So we need a lot of work to do. :slight_smile:
[/quote]

hello @cymqqqq , didn't knew there were such specifications for rune, could you share the link/resources to learn more about these?
in the rune's documentation, I didn't see any such things being mentioned.

I would like to learn more about this!

-------------------------

domwoe | 2024-04-17 15:06:37 UTC | #14

From the Specification: https://docs.ordinals.com/runes/specification.html#executing-the-runestone

> To prevent front running an etching that has been broadcast but not mined, if a non-reserved rune name is being etched, the etching transaction must contain a valid commitment to the name being etched.
> 
> A commitment consists of a data push of the rune name, encoded as a little-endian integer with trailing zero bytes elided, present in an input witness tapscript where the output being spent has at least six confirmations.
> 
> If a valid commitment is not present, the etching is ignored.


To fulfill this bounty, we expect a demo that shows the runes showing up in the ord indexer.

-------------------------

cymqqqq | 2024-04-17 16:31:42 UTC | #15

You can not find it in the rune's documentation, because it doesn't exist in the doc, and there are a lot of details that you need to read the source code and I can not post here(very complicated). I have read all of the rune source code since last year, so I know a lot of fundamentals about how to etch runes, how to mint runes, how to build commit transactions, how to build reveal transactions, and so on. So if you want to know more things about the runes, you can go to the rune source code.

-------------------------

cymqqqq | 2024-04-17 16:34:29 UTC | #16

Personally, I think it's difficult to implement the demo now because the runes source code is still under development. And if we want to do this, we need to write a lot of infra code to build Bitcoin transactions.

-------------------------

domwoe | 2024-04-17 18:30:35 UTC | #17

[quote="cymqqqq, post:15, topic:29017, full:true"]
You can not find it in the runeâ€™s documentation, because it doesnâ€™t exist in the doc, and there are a lot of details that you need to read the source code and I can not post here(very complicated). I have read all of the rune source code since last year, so I know a lot of fundamentals about how to etch runes, how to mint runes, how to build commit transactions, how to build reveal transactions, and so on. So if you want to know more things about the runes, you can go to the rune source code.
[/quote]

I'd be really curious to see the code which shows that currently only P2TR outputs would be considered in the Runes protocol. 

If that indeed be the case, we could change the bounty to use the [schnorr canister](https://github.com/domwoe/schnorr_canister).

For reference, here's a project that uses quite a bit of code from ord to inscribe ordinals using (an outdated version of) the schnorr canister and sends it to P2PKH address controlled by a canister: https://github.com/domwoe/inscription_canister.

-------------------------

cymqqqq | 2024-04-18 01:36:41 UTC | #18

I have read the bitcoin_wallet module in this repo, so there is a commit transaction and a reveal transaction signed by schnnor key that is used to build an inscription transaction, and a p2pkh transaction signed by t-ecdsa key.
For the rune protocol, we need to bind each rune with a native utxo(Not an address), it is based on inscription but different from inscription. First, you need an outpoint with the satoshi on your address, then you inscribe an inscription. Next step, you etch a rune based on your inscription id. then you mint a rune with one of your outpoints. Like this:
![image|690x144](upload://wTA9fQrOajJuUSFvqXsaRM0i2eS.png)

Now I'm building a native bitcoin asset protocol based ICP network, and it can use ICP bitcoin light node to update utxo set, and I will opensource it later, I also want this bounty but maybe it's not the right time for me. :slight_smile: 
I advise the Dfinity Team can develop an interface that can fetch raw transactions from bitcoin network by txid(transaction hash), it will help us do a lot of things.

-------------------------

domwoe | 2024-04-18 09:26:16 UTC | #19

[quote="cymqqqq, post:18, topic:29017"]
I advise the Dfinity Team can develop an interface that can fetch raw transactions from bitcoin network by txid(transaction hash), it will help us do a lot of things.
[/quote]

I agree that this would be useful but it's also not strictly necessary. The first step that is being worked on is to make block headers available via the Bitcoin API, see https://github.com/dfinity/interface-spec/pull/298.

You can fetch raw transactions (+ merkle proofs) from an untrusted source and verify that they are indeed part of the Bitcoin blockchain. If you're interested in building such a utility canister, please apply for a grant. But this discussion is not necessary for this bounty/thread.

-------------------------

Zedonboy | 2024-04-20 21:05:35 UTC | #20

ICP Rune Launch Pad Submission
Video: https://youtu.be/Fs2eSnXuJLk?si=TiX3e7TttOcmQlMw
Repo: https://github.com/Zedonboy/icp_rune_launcher

-------------------------

bob11 | 2024-04-21 04:51:18 UTC | #21

As far as I know:
1. Etching (deploying a token) where you pick your own name requires a commit and a reveal. In this case, you need p2tr.
2. Etching (deploying a token) where you add an image for your ticker requires inscribing an ordinal, meaning you need p2tr.
3. Etching (deploying a token) where you don't do either of those things, may not require p2tr (strictly op_return). In this case, you can pick a symbol but no image, and you are assigned a random reserved name.
4. Minting tokens does not require p2tr. Just op_return. 
5. Transferring tokens does not require p2tr. Just op_return.

This is my current understanding. Digging a bit deeper now to see what else I can find.

-------------------------

cymqqqq | 2024-04-21 05:51:43 UTC | #22

Both mint and transfer need to put your token to the first op return output, then you can point to a specific address that you want to send as the non-op-return output.

-------------------------

bob11 | 2024-04-21 06:24:52 UTC | #23

Yeah, mint and transfer, in either case, just needs op_return. All edicts (transfer instructions) show up in the op_return. All minting instructions show up in the op_return. No additional data, scripts, or signatures are needed anywhere else.

Go search the Bitcoin mempool right now and you'll see 10-20% of all runes transactions right now are valid runes transactions that are not p2tr.

-------------------------

cymqqqq | 2024-04-21 09:42:28 UTC | #24

But, basically, we need a t-schnnor signature.

-------------------------

bob11 | 2024-04-21 13:40:22 UTC | #25

No you don't. Not for mint or transfer. Any old op_return BTC transaction is fine. tECDSA can be used for any Bitcoin transaction type other than p2tr.

-------------------------

domwoe | 2024-04-21 15:52:24 UTC | #26

Thank you @Zedonboy.

Could you demonstrate that the rune token is etched and can be minted using `ord` ?
I can't find any reference to the commit/reveal transactions used to reserve the name.

-------------------------

domwoe | 2024-04-21 15:53:10 UTC | #27

[quote="bob11, post:21, topic:29017"]
Etching (deploying a token) where you donâ€™t do either of those things, may not require p2tr (strictly op_return). In this case, you can pick a symbol but no image, and you are assigned a random reserved name.
[/quote]

Do you know how that would work? How is the assignment done?

-------------------------

bob11 | 2024-04-21 17:57:01 UTC | #28

There are a set of reserved names (27 characters and 28 characters). When you etch without commit/reveal, the protocol takes your block number and your etching number (the 1-based index of your etch in a block) and it converts those to base26 -> letters and that becomes the automatically assigned ticker.

-------------------------

icnerd | 2024-04-28 22:02:02 UTC | #29

Hello everyone,

I'm very excited to share out my work.
I was finally able to etch a runestone.

Here is the link to my repo: [etcher](https://github.com/pramitgaha21/etcher)

I do some some works left, but I'm facing trouble with them.
i: To be a valid runestone, runestone's name must be below than a runestone, that is calculated with the help of block number. I couldn't find a way to get the blocknumber.
ii. I was also trying to add in the CKBTC payment feature, I had created a local CkBTC test setup, but it didn't worked out. ( If someone would help me understanding the CkBTC thing, I can complete this too)

I'll be sharing a video tutorial out soon.
And I'll also be deploying the app on mainnet with Bitcoin's Testnet blockchain.

-------------------------

icnerd | 2024-04-28 22:03:51 UTC | #30

Also thanks to @domwoe , without his schnorr canister repo and inscription canister repo. I wouldn't have been able to complete the task.

-------------------------

domwoe | 2024-04-29 07:29:02 UTC | #31

Great progress @icnerd!


[quote="icnerd, post:29, topic:29017"]
i: To be a valid runestone, runestoneâ€™s name must be below than a runestone, that is calculated with the help of block number. I couldnâ€™t find a way to get the blocknumber.
[/quote]

If you receive a BTC payment, you can get the block height, i.e. block number via the the `bitcoin_get_utxos` API. But I'd say it's also fine to submit the current block height from the frontend or use an HTTPS outcall to some Bitcoin blockexplorer etc.

[quote="icnerd, post:29, topic:29017"]
ii. I was also trying to add in the CKBTC payment feature, I had created a local CkBTC test setup, but it didnâ€™t worked out. ( If someone would help me understanding the CkBTC thing, I can complete this too)
[/quote]

There's no need to setup the entire ckBTC system. ckBTC is just an ICRC-1 token. You don't need to setup a minter and KYT canister. You can use the same setup as in the ckBTC PoS sample dapp:
https://internetcomputer.org/docs/current/references/samples/motoko/ic-pos/

-------------------------

icnerd | 2024-04-29 10:58:29 UTC | #32

[quote="domwoe, post:31, topic:29017"]
Thereâ€™s no need to setup the entire ckBTC system. ckBTC is just an ICRC-1 token. You donâ€™t need to setup a minter and KYT canister. You can use the same setup as in the ckBTC PoS sample dapp:
[/quote]

Don't I need to convert the CkBTC to Bitcoin for the runes transaction?

-------------------------

domwoe | 2024-04-29 12:32:46 UTC | #33

Ah, you're correct, that'd be very useful and would require the minter. However, it would be ok if this flow would only be possible on an ICP mainnet deployment.

-------------------------

icnerd | 2024-05-01 08:51:42 UTC | #34

Hello,

here is the video tutorial of showing [how to etch rune locally](https://www.youtube.com/watch?v=EbCmAyiYuJo)

I've also deployed the application on mainnet with testnet support.
[link to the frontend](https://kho2y-sqaaa-aaaag-qjuta-cai.icp0.io/)

-------------------------

Mico | 2024-05-01 14:25:37 UTC | #35

Have you seen the omnity networks rune dex tool? Seems like it is along the lines of this.

-------------------------

domwoe | 2024-05-06 16:00:48 UTC | #36

Nice! Could you add some explanation to the readme of the repo about the different fields (cap, height, offset...) and buttons (premine, turbo mode)?

-------------------------

domwoe | 2024-05-06 16:06:56 UTC | #37

[quote="Mico, post:35, topic:29017, full:true"]
Have you seen the omnity networks rune dex tool? Seems like it is along the lines of this.
[/quote]

Yes. This is great. However, there is no launchpad (yet) and, as of now, the code is not open source.

-------------------------

icnerd | 2024-05-07 07:18:06 UTC | #38

[quote="domwoe, post:36, topic:29017, full:true"]
Nice! Could you add some explanation to the readme of the repo about the different fields (cap, height, offsetâ€¦) and buttons (premine, turbo mode)?
[/quote]

I've updated the frontend and readme file too.

-------------------------

icnerd | 2024-05-10 03:22:51 UTC | #39

Hello everyone, I've updated the code again.

I've added the CkBTC payment.
I've updated the frontend.

Here is the link to the new tutorial: [LINK](https://youtu.be/Ovr51pHfNts)

-------------------------

icnerd | 2024-05-14 04:34:35 UTC | #40

Hello @domwoe ,
I found out that, reveal transaction can be send after 5 blocks, So I have change the timer check from 1 hour to 50 mins. I have also added about this thing in the `README` file.

-------------------------

domwoe | 2024-05-14 19:44:11 UTC | #41

Thank you @icnerd.

It took a bit longer, but great work. We are happy to award you the 5k bounty :tada:

Launchpad: https://kho2y-sqaaa-aaaag-qjuta-cai.icp0.io/
Code: https://github.com/pramitgaha21/etcher
Video: https://youtu.be/Ovr51pHfNts

@Zedonboy Unfortunately, we can't accept your submission as it doesn't properly etch runes (as it misses the commit/reveal scheme to register a ticker), nor does it include the ckBTC payment logic.

-------------------------

