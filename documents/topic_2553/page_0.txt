avi | 2021-04-21 16:10:18 UTC | #1

Hello,
//Hello,
When I was updating the container code, I encountered some problems,
```
//run
dfx deploy --network=ic
//or
dfx canister --network=ic install --all --mode=install
```
```
//error
The Replica returned an error: code 5, message: "Canister moi4t-aqaaa-aaaaa-qbbra-cai trapped explicitly: An error happened during the call: 5: Canister mjj2h-niaaa-aaaaa-qbbrq-cai cannot be installed because the canister is not empty. Try installing with mode='reinstall' instead.
```

The data in this container is needed and cannot be cleared, so you cannot use ```reinstall``` to re-overwrite the installation, but I guarantee that the owner is correct,

Try to use
```
dfx canister --network=ic install --all --mode=upgrade
```
To try to upgrade the container,
```
The Replica returned an error: code 5, message: "Canister moi4t-aqaaa-aaaaa-qbbra-cai trapped explicitly: An error happened during the call: 5: Canister mjj2h-niaaa-aaaaa-qbbrq-cai exceeded its allowed memory allocation"
```

What should I do? There are too many users of this project at present, and ```reinstall``` cannot be used.

help me! ! ! !

-------------------------

Ori | 2021-04-22 02:00:35 UTC | #2

You can try installing using the --memory-allocation flag, set to a higher value (the default is 8):

[https://sdk.dfinity.org/docs/developers-guide/cli-reference/dfx-canister.html#_dfx_canister_install](https://sdk.dfinity.org/docs/developers-guide/cli-reference/dfx-canister.html#_dfx_canister_install)

-------------------------

avi | 2021-04-22 01:00:31 UTC | #3

The official document says that a maximum of 256TB is allowed, but when I try to call the command set to be greater than 8GB, cli reports an error:

```
//run 
dfx canister --network=ic install --all --memory-allocation=16GB --mode=upgrade
```
```
The Replica returned an error: code 5, message: "Canister moi4t-aqaaa-aaaaa-qbbra-cai trapped explicitly: An error happened during the call: 5: MemoryAllocation expected to be in the range [0..8589934592], got 16000000000"
```

-------------------------

kpeacock | 2021-04-22 01:15:17 UTC | #4

To be fair, `network=ic` points to the sodium alpha network, and won't be pointed to mercury until Genesis. Can't say I've personally tried allocating a terabyte of space on mercury yet though

-------------------------

keivn | 2021-04-22 01:59:56 UTC | #5

The Replica returned an error: code 1, message: "Canister zsrsb-paaaa-aaaab-abbva-cai with memory allocation 10MiB cannot be installed because the Subnet's remaining memory capacity is 0MiB"

-------------------------

ililic | 2021-04-22 02:23:40 UTC | #6

Hey Avi,

I opened a bug report [here](https://github.com/dfinity/docs/issues/416). The upper limit certainly isn't 256TB for Sodium or Mercury. We'll find the actual limit and update the documentation. Thanks for pointing this out.

-------------------------

avi | 2021-04-22 03:03:01 UTC | #7

Can I have any other suggestions? Currently I need to push the code into the container, but the cli always prompts smart reinstall. I still need the container content data, so I can’t use reinstall.

Is there any good way

-------------------------

avi | 2021-04-22 03:13:33 UTC | #8

If you try deploy many times, it will be deployed.

-------------------------

avi | 2021-04-22 03:27:06 UTC | #9

:handshake:
Hello 
Is there any other way to upgrade the container jar? At present, I need to try to upgrade the container to try to deploy the code. Debug my problem

-------------------------

kpeacock | 2021-04-22 03:44:14 UTC | #10

I'm pretty sure mode=reinstall won't wipe your state, but I also don't want to recommend something that would hurt your app.

In your shoes, I'd try testing an upgrade on your local network.

Long-term I think there's an some strategic way you could provision a new canister and migrate the data, but that's really far outside my wheelhouse

-------------------------

avi | 2021-04-22 04:16:44 UTC | #11

Okay, I will try it on the local network, thanks

-------------------------

avi | 2021-04-22 12:24:30 UTC | #12

When I use ```reinstall``` in the local network, the data in the container is lost, so I can't use ```reinstall```, and the function of ```reinstall``` is still the same as stated in the official document Are consistent, the container will be reinitialized

-------------------------

claudio | 2021-04-22 14:25:02 UTC | #13

Hi Avi,

I am almost certain that, contrary to what you were told above, `--mode=reinstall` does wipe the state - it essentially recycles the old canister id for new code, starting from clean state.

 `--mode=upgrade` is probably what you want, provided your code is written to make use of stable storage.

I'm not sure how to help you with the allocation question, unfortunately, but perhaps some other engineer can help. Is it possible that your upgrade code is allocating too many resources and another version could be written to avoid that? I can't even tell if this is Motoko or Rust code.

-------------------------

claudio | 2021-04-22 14:23:28 UTC | #14

You can also selectively upgrade single canisters (perhaps only the code and interface of one has evolved) not just all of them, if that helps avoid the resource exhaustion.

-------------------------

avi | 2021-04-22 14:44:16 UTC | #15

Thank you for your help,

When I upgrade the interface container as you said
```
dfx canister --network=ic install --mode=upgrade icp_forms
```
cli error
```
The Replica returned an error: code 5, message: "Canister moi4t-aqaaa-aaaaa-qbbra-cai trapped explicitly: An error happened during the call: 5: Canister mjj2h-niaaa-aaaaa-qbbrq-cai exceeded its allowed memory allocation"
```
I am thinking, is it caused by too much data in my interface container?



But when I upgrade the front-end container,
```
  dfx canister --network=ic install --mode=upgrade www
```
Is successful
```
Installing code for canister www, with canister_id m4olk-maaaa-aaaaa-qbbsa-cai
Authorizing our identity (icpFarms) to the asset canister...
Uploading assets to asset canister...
```

-------------------------

avi | 2021-04-22 14:51:43 UTC | #16

The interface container in the project code uses MoToKo

-------------------------

avi | 2021-04-22 14:56:00 UTC | #17

At present, I see the error of --mode=upgrade, test whether the container on the Internet is hard-coded and only allows a fixed space to be allocated. If the application mechanism is allowed to expand the container according to the document, perhaps this problem of mine can be solved

-------------------------

claudio | 2021-04-22 14:56:06 UTC | #18

[quote="avi, post:15, topic:2553"]
`Canister moi4t-aqaaa-aaaaa-qbbra-cai trapped explicitly: An error happened during the call: 5: Canister mjj2h-niaaa-aaaaa-qbbrq-cai exceeded its allowed memory allocation"`
[/quote]

That could be, but I'm little confused by the two canister ids in the error message. Is the code of the canister available to read anywhere?

-------------------------

avi | 2021-04-22 15:01:34 UTC | #19

```
//This is the interface container
mjj2h-niaaa-aaaaa-qbbrq-cai
```
```
//This is the front-end container
m4olk-maaaa-aaaaa-qbbsa-cai
//Front-end container --mode=upgrade is successful
```

The problem is the interface container


At present, the data in the interface container is too large and important to our project, so it cannot be discarded.

-------------------------

Ori | 2021-04-22 15:39:31 UTC | #20

There’s still a third canister id there though, the one that traps: `moi4t-aqaaa-aaaaa-qbbra-cai` ?

-------------------------

avi | 2021-04-22 15:50:43 UTC | #21

Oh, sorry, I just found out, I took the code of my own test jar,
This problem only appeared
```
//This is the interface container
mjj2h-niaaa-aaaaa-qbbrq-cai
```
```
//This is the front-end container
m4olk-maaaa-aaaaa-qbbsa-cai
```

Sorry, it was my mistake


Thanks for pointing out

-------------------------

claudio | 2021-04-22 16:39:50 UTC | #22

Sorry, I'm still rather confused. 
Either the source or some abstraction of the source would help to debug. Is there a change of representation involved during upgrade, i.e. converting a hashmap to an array of entries or something like that? 

If you are, for example, using an operation like Array.append in a loop, then you could easily wind up allocating a quadratic amount of memory before the garbage collector has a chance to run.
But it's very hard to tell without seeing some abstraction or explanation of the code.

Do you have any idea if the error is happening while the previous canister is saving its state for the new one, or while the new canister is trying to create its state from the stored state of the previous canister?

-------------------------

avi | 2021-04-23 16:24:50 UTC | #23

Hello, sorry because I am in utc-8 time zone, please forgive me for taking so long to reply to you.

When I checked the newly deployed container today, I was trying to push my newly modified code, and found that the new container also prompted'Container is not empty and needs to use --mode=reinstall' mode to install. . Why is the current state of the subnet container so unstable? This unstable state does not meet the standards of a public project?

The new container mentioned here is not ```moi4t-aqaaa-aaaaa-qbbra-cai```, sorry, it may be a mess of container id for you.

Is it convenient to tell me the status of the current test subnet?
Or how can I get the latest status of the subnet?

-------------------------

avi | 2021-04-25 14:15:54 UTC | #25

I am very helpless. Until now, I still cannot find a solution to deal with my problem. All services in the current subnet cannot be deployed with containers, and I don't know the status of the current subnet. I cannot get this information.

-------------------------

