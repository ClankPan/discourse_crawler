jaesharma | 2023-10-12 16:10:08 UTC | #1

I've encountered an issue with a specific block, number 80543, within the ckBTC canister (nbsys-saaaa-aaaar-qaaga-cai). This block does not seem to align with the current IDL definition of icrc1. I've attached a screenshot from the DFINITY dashboard displaying the error message:

```
Canister nbsys-saaaa-aaaar-qaaga-cai trapped explicitly: failed to decode block 161086: failed to decode a block: Semantic(None, "invalid type: integer `1696594164110199924`, expected struct TimeStamp")
```
this issue is unique to block 80543; other blocks from ckBTC can be fetched without any problems.

Also, this issue is occurring when using the DFINITY agent library in JavaScript.

I'm looking for insights on the root cause of this error and suggestions on how to resolve it. Has anyone encountered a similar problem or can provide guidance on addressing this issue?

![Screenshot 2023-10-12 at 9.33.51 PM|690x355](upload://iLb57dNBOCBuZzMJUsxZ2iMXpeA.png)

-------------------------

peterparker | 2023-10-12 16:14:37 UTC | #2

[quote="jaesharma, post:1, topic:23715"]
Also, this issue is occurring when using the DFINITY agent library in JavaScript.
[/quote]

Hi, regarding the start of your message, I think one of my colleague will be more useful than me but, I'm curious about the JS part. Can you tell me which library exactly and version?

-------------------------

mariop | 2023-10-12 16:18:55 UTC | #3

Hi @jaesharma ,

We had to change the IDL definition of Approve blocks because it wasn't matching the incoming ICRC-3 spec. The `expires_at` field written by the ckBTC Ledger was a struct instead of what it should be, that is a number. We still need to upgrade the libraries to follow the new schema.

-------------------------

jaesharma | 2023-10-12 16:23:00 UTC | #4

@mariop 
can you point me where i will find updated IDL file? I can use @dfinity/agent library with updated IDL to query this block then.

-------------------------

jaesharma | 2023-10-12 16:23:50 UTC | #5

sure, @peterparker i'm using     "@dfinity/agent": "0.11.2",

-------------------------

peterparker | 2023-10-12 16:28:01 UTC | #6

Ahhhhh thanks for the answer. Any particular reason why you do not use [@dfinity/ledger-icrc](https://github.com/dfinity/ic-js/tree/main/packages/ledger-icrc)?
It contains an up-to-date did files regarding that matters.

-------------------------

jaesharma | 2023-10-12 16:31:24 UTC | #7

was not familiar with this library. i'll check. thanks.

-------------------------

peterparker | 2023-10-12 16:38:26 UTC | #8

Great. In the same repo there is also in a `@dfinity/ckbtc` library. All these libs are used notably in NNS dapp. We keep those up-to-date. Let me know if you have any questions.

-------------------------

jaesharma | 2023-10-16 14:50:42 UTC | #9

Hello @peterparker ,
I'm experiencing difficulties in retrieving blocks using the "@dfinity/ledger-icrc" library. Here's the code I'm attempting to run:

```js

import { IcrcIndexCanister } from "@dfinity/ledger-icrc";

const agent = await createAgent({
  identity: id,
  host: "https://ic0.app",
});

const { getTransactions } = IcrcIndexCanister.create({
  agent,
  canisterId: "mxzaz-hqaaa-aaaar-qaada-cai",
});

const tx = await getTransactions({
  start: 0,
  length: 20,
});
```

Unfortunately, I'm encountering this error:
```
TypeError: Cannot destructure property 'owner' of 'undefined' as it is undefined.
```

I've also explored the "@dfinity/ckbtc" library, but I wasn't able to find any solutions that would allow me to retrieve a specific block from Ckbtc. Can you provide any guidance or assistance on this matter? Thank you.

-------------------------

peterparker | 2023-10-16 15:52:34 UTC | #10

[quote="jaesharma, post:9, topic:23715"]
`TypeError: Cannot destructure property 'owner' of 'undefined' as it is undefined.`
[/quote]

You do not use TypeScript I guess?

I think it's because you don't supply the account.

```
const tx = await getTransactions({
  start: 0,
  length: 20,
  account: {owner: etc...} // <---- This is missing
});
```

Params: [https://github.com/dfinity/ic-js/blob/main/packages/ledger-icrc/src/types/index.params.ts#L4](https://github.com/dfinity/ic-js/blob/main/packages/ledger-icrc/src/types/index.params.ts#L4)

-------------------------

jaesharma | 2023-10-16 15:55:12 UTC | #11

@peterparker 
if i supply account id then get another error.
this is updated code i'm trying to execute:
```js
const tx = await getTransactions({
  max_results: 20,
  account: {
    owner: id,
  },
});
```

in this case i get this error:
```
                      ^

Error: Invalid record {max_results:nat; start:opt nat; account:record {owner:principal; subaccount:opt vec nat8}} argument: 

field account -> Invalid record {owner:principal; subaccount:opt vec nat8} argument: 
```

looking for answers of these questions:
1. why we need to supply owner here?
2. cause of this error? in javascript how to change nat8 or nat64 in nat type.

-------------------------

peterparker | 2023-10-16 16:13:34 UTC | #12

[quote="jaesharma, post:11, topic:23715"]
`field account -> Invalid record {owner:principal; subaccount:opt vec nat8} argument: `
[/quote]

Type definition of the parameter:

```
export interface IcrcAccount {
  owner: Principal;
  subaccount?: Subaccount;
}
```

Are you sude your `id` is a `Principal` and not a string or something else?

[quote="jaesharma, post:11, topic:23715"]
why we need to supply owner here?
[/quote]

You are looking to query the transactions. Those transactions are attached to an account. An account can be a user, a canister, or else. Anything or anyone that hold transactions through an account.

-------------------------

jaesharma | 2023-10-16 16:22:35 UTC | #13

So this method will return transactions of that specific account only?

-------------------------

peterparker | 2023-10-16 16:26:34 UTC | #14

Yes, that's correct.

-------------------------

jaesharma | 2023-10-23 14:25:21 UTC | #15

Hello @peterparker ,
I'm continuing my efforts to find a solution for this issue, but I'm still unable to resolve it. I've also double-checked on the DFINITY dashboard, and the error there remains the same.

Could you please provide an update on the current status of this issue? Additionally, it would be greatly appreciated if you could direct me to the most recent version of the IDL  for the ledger canister, which I can use to access transaction **80543** of the ckbtc token.

-------------------------

peterparker | 2023-10-23 15:19:29 UTC | #16

[quote="jaesharma, post:15, topic:23715"]
Could you please provide an update on the current status of this issue?
[/quote]

Which issue, the `expires_at` field? Don't know much about this, @mariop knows best.
Or are you speaking about another issue?

[quote="jaesharma, post:15, topic:23715"]
Additionally, it would be greatly appreciated if you could direct me to the most recent version of the IDL for the ledger canister, which I can use to access transaction **80543** of the ckbtc token.
[/quote]

I updated `@dfinity/ledger-icrc` last [week](https://github.com/dfinity/ic-js/commits/main/packages/ledger-icrc). You can find the related did files in the [repo](https://github.com/dfinity/ic-js/tree/main/packages/ledger-icrc) or use the `next` version of the library (`npm i @dfinity/ledger-icrc@next`). Is this what you are looking for?

-------------------------

jaesharma | 2023-10-23 15:39:28 UTC | #17

I'm currently working on resolving this problem:
![Screenshot 2023-10-23 at 9.06.17 PM|690x413](upload://sh24igtghuGmJyReAmZsGdar1F6.png)

My goal is to obtain transaction details using the '@dfinity/agent' library. I'm avoiding the use of the '@dfinity/icrc-ledger' library because it requires supplying an account owner, which doesn't align with my current requirements. I attempted to utilize the ledger canister IDL from the 'ledger-icrc' repository, but I'm still encountering the same error when dealing with this specific transaction.

-------------------------

peterparker | 2023-10-23 16:09:55 UTC | #18

I don't think it's different but, you can try your luck with the did files from the IC main repo: https://github.com/dfinity/ic/tree/master/rs/rosetta-api/icrc1/ledger/ledger.did

-------------------------

jaesharma | 2023-10-23 16:28:39 UTC | #19

I've given it a shot, but I'm still encountering same error. I'm finding it a bit challenging to grasp why this particular block is proving difficult to decode. If there have been any changes to the block or transaction definitions, I'm curious why this information (IDL or the part which got change for that specific transaction) hasn't been made public yet. Additionally, it seems that the dashboard hasn't been updated with the latest IDL, if there's been any update at all. 

Please keep me posted in this thread if you come across any updates or solutions.

-------------------------

peterparker | 2023-10-23 17:36:27 UTC | #20

Thanks for the trying and for the feedback! I'm also a consumer of the ledger rather than an actor so, I forwarded your question to the team. They'll comeback with updates.

-------------------------

mariop | 2023-10-24 15:37:25 UTC | #21

@jaesharma we found out that there is a small bug in the ckBTC archive canister that causes a decoding issue. We made the proposal https://dashboard.internetcomputer.org/proposal/125331 to fix this. Apologies for the inconvenience and thanks for reporting the issue.

-------------------------

jaesharma | 2023-10-25 08:38:58 UTC | #22

no worries, thanks for the update.

-------------------------

