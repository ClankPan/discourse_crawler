paulyoung | 2022-09-18 05:25:38 UTC | #1

https://twitter.com/py/status/1571367115894165504

-------------------------

infu | 2022-09-18 07:40:52 UTC | #2

I am not sure what the goal is, but you can also generate auth keys inside the client. Then send the public key to the canister where it gets signed and returned. To verify, we make a call with the auth keys and the signature - chain. Then the canister can do the chain verification or the IC. Bonus: private key never leaves the client and doesn't travel through the network.

-------------------------

paulyoung | 2022-09-18 15:15:10 UTC | #3

My motivation for writing this is to figure out if this is a viable authentication method to use for existing Git clients that want to talk to Codebase. Since I don‚Äôt control the client at all I‚Äôm looking at solutions they support.

It wasn‚Äôt much work, and I thought having something concrete to talk to would help move things forward.

For example, @bjoern pointed out:

https://twitter.com/bjoerntm/status/1571446699545235457

-------------------------

paulyoung | 2022-09-18 15:29:02 UTC | #4

Also, @oss asked:

https://twitter.com/ozwaldorf_/status/1571487478980268033

-------------------------

infu | 2022-09-18 18:04:21 UTC | #5

This will need max security. Someone being able to inject malicious code into repositories will be pretty dangerous. I won't mind running a localhost daemon gateway to avoid that. Then a canister will rely on the caller principal for auth.

-------------------------

paulyoung | 2022-09-18 20:38:33 UTC | #6

Of course.

I think it‚Äôs been helpful to poke holes in all the ways auth tokens fall short so I can later refer back these points and say ‚Äúthis is why we need to do this other thing instead of what people normally do‚Äù

-------------------------

bjoern | 2022-09-20 10:02:51 UTC | #7

I think running a gateway locally on the developer machine as suggested by @infu may be a great solution, as we can probably expect developers to do such a thing whereas the same may be difficult for arbitrary users. Something like: use a custom protocol between gateway and canister for writes, have the gateway use proper IC ingress/query messages and the canister depend on the authenticated caller principal. The plain HTTP protocol may still be nice for cloning publicly accessible repositories without authentication.

I really love your project @paulyoung and I am sitting on the waitlist, eager to try it out!

-------------------------

paulyoung | 2022-09-20 15:36:26 UTC | #8

The first lines of code I wrote for Codebase were for a local proxy server to serve as a remote for Git to interface with üôÇ

I moved on from that once `http_request` seemed viable.

In addition to helping with authentication there are some other benefits to having a local server such as it being a mechanism to address certain concerns, e.g. limitations with HTTP uploads that sounded like they [might get addressed](https://forum.dfinity.org/t/boundary-node-http-response-headers/10747/43?u=paulyoung) with the help of boundary nodes

There‚Äôs definitely a trade-off though; it‚Äôs more work for myself and for end users.

With some insight from @domwoe I think Codebase can easily support verifying signed commits. That doesn‚Äôt help with authentication in general though.

-------------------------

bjoern | 2022-09-26 10:42:36 UTC | #9

Yeah ... a proxy obviously isn't ideal since it's another component that has to be kept functional and there's again a question of storage of private keys ‚Äì although here one probably doesn't have to care too much about backup since there's always some fallback authentication via the UI.

Unfortunately, a lot of Web2 security is based on (unnecessarily) sending secret stuff from A to B ‚Äì that has never been a good idea even in Web2 but it really breaks apart fundamentally in Web3.

-------------------------

paulyoung | 2023-01-10 23:32:49 UTC | #10

Here‚Äôs where I ended up with this:

https://twitter.com/py/status/1608749309427879936

https://twitter.com/py/status/1608749699980464129

https://twitter.com/py/status/1612955233965178880

-------------------------

