Chris | 2021-06-20 16:29:13 UTC | #1

For code highlighting and completion it seems the only native plugin to date is for Visual Studio Code. Is this the main IDE that the internal team is using currently, and if so why? 

(sell me on it)

-------------------------

Chris | 2021-06-20 17:44:07 UTC | #2

I will say the interactive playground that it suggests on install has taught me things I didn't even know I was missing (like Emmet Abbreviation)

I'm sure vscode isn't the only IDE it's in, but it's the only IDE that made it a point to show me in an interactive way.

I think I can get used to it, just wondering if this is the primary IDE being used internally and by most Internet Computer / Motoko developers and if so, why.

... also just hit me that Microsoft also maintains TypeScript which has similar type checking syntax and functionality, so maybe it's a good fit for Motoko as well on that note.

-------------------------

paulyoung | 2021-06-20 17:57:23 UTC | #3

If I remember correctly, VS Code is the most popular editor so it makes sense to target that first.

I haven‚Äôt tried it myself recently but Motoko provides a language server that is compatible with editors that support the Language Server Protocol.

https://langserver.org isn‚Äôt the official site but I think it does a great job of explaining why LSP makes sense. It also lists language server implementations for different languages, and LSP clients for different editors.

It should be possible to find your editor near the bottom of that page and get it to talk to the Motoko language server.

-------------------------

nomeata | 2021-06-20 17:56:48 UTC | #4

@kritzcreek 's VS plugin is mostly a wrapper around the mo-ide tool he wrote, which is a Language Server Protocol (LSP) server for Motoko. This means that it should be relatively easy to add that support to other editors. That would make a great community project!

-------------------------

wang | 2021-06-21 00:16:50 UTC | #5

Does anyone have candid syntax highlighting for vscode? I know the highlightjs definition exists.

-------------------------

peterparker | 2021-07-22 14:47:09 UTC | #6

For Webstorm/Jetbrains users, go for an upvote üëâ https://youtrack.jetbrains.com/issue/IDEA-274257

-------------------------

skilesare | 2021-07-29 18:26:22 UTC | #7

Any suggestions for kicking the language server to actually do error highlighting in VS Code. Sometimes i work and then sometimes the red lines just disappear.  I'm using Motoko language support v 0.3.9 in vs code.

This working reliably would save a ton of time where I'm dfx build'ing and waiting for everything to build.

I've tried manually pointing to my test canister(which should at least ref every other canister) and disabling and enabling the extension.

Any tips would be appreciated.

-------------------------

Ori | 2021-07-29 18:51:29 UTC | #8

There‚Äôs a restart Motoko language server command, pressing Ctrl Shift P and typing Motoko should find it.

-------------------------

jzxchiang | 2021-07-29 21:11:53 UTC | #9

When will be able to do "Go to Definition" and "Find References" in Motoko with VSCode? That would be a game changer.

-------------------------

skilesare | 2021-07-29 23:06:17 UTC | #10

This worked for a bit...but then sometimes it just stops...I tried turning on the trace in settings...any idea where to view that so I  can see if it is erroring out somewhere?

-------------------------

skilesare | 2021-07-30 15:55:06 UTC | #11

And now it seems to be really mad about my import myCanister "canister:myCanister"; statements when the canisters are clearly defined in my dfx.json file and dfx build works just fine.ü§∑üèª‚Äç‚ôÇÔ∏è

Happy to help debug, but I need to know where to look.

-------------------------

claudio | 2021-07-30 16:15:40 UTC | #12

Unfortunately our LSP man has joined another team to predominantly work on Internet Identity.

https://github.com/dfinity/motoko/tree/master/src/languageServer 
https://github.com/dfinity/motoko/tree/master/src/lsp
https://github.com/dfinity/motoko/blob/master/src/exes/mo_ide.ml

is probably the place to look.

IIRC, Go To Definition (but not References) should actually work on references to library members (but not on local definitions).

-------------------------

claudio | 2021-07-30 16:20:18 UTC | #13

For me, Go To Definition works going from main to a library, but not across libraries.

-------------------------

