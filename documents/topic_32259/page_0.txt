peterparker | 2024-06-21 14:57:51 UTC | #1

What are the expected interfaces of generic functions that are called through SNS proposals of type `ExecuteGenericNervousSystemFunction`?

- Can the methods be `query`, or should they only be `update`?

- Should the generic function return a `Result<(), String>`, or is the only way to communicate that a function fail by trapping?

- If the latter, is there a common pattern or solution to persist a state within the canister targeted by the custom function while still reporting to the SNS governance that the proposal failed?

-------------------------

levi | 2024-06-21 16:52:34 UTC | #2

[quote="peterparker, post:1, topic:32259"]
Can the methods be `query`, or should they only be `update`?
[/quote]
The methods can be either one, because they are called through the sns-governance-canister so it will be an inter-canister-call which can be either update or query. However as of now the sns-governance-canister does not save the response into the proposal.

[quote="peterparker, post:1, topic:32259"]
Should the generic function return a `Result<(), String>`, or is the only way to communicate that a function fail by trapping?
[/quote]

[quote="peterparker, post:1, topic:32259"]
If the latter, is there a common pattern or solution to persist a state within the canister targeted by the custom function while still reporting to the SNS governance that the proposal failed?
[/quote]

As of now the generic function can return anything as long as it replies with something, it is considered a success, even if it replies with Err(String). [This comment](https://github.com/dfinity/ic/blob/1b4573ab65bd7b3786522140b6adb75bb4a3799f/rs/sns/governance/src/canister_control.rs#L310) in the sns-governance-canister-code says more. It looks like there was an idea to do as you suggest but it is not implemented. 

There is a way to communicate that the function fails without trapping, and that is to use the `ic0.msg_reject` system api, read about it in the interface spec [here](https://internetcomputer.org/docs/current/references/ic-interface-spec/#responding). This can be used to persist state while still returning a canister-error and thus reporting to the governance canister that the function failed. In the Rust cdk, you can do this using the `ManualReply` https://docs.rs/ic-cdk/latest/ic_cdk/api/call/struct.ManualReply.html. In the query or update macro, you'd need to set `manual_reply = true` like this: `#[update(manual_reply = true)]` then set the return type of the method to `ManualReply<YourActualReturnTypeHere>`, then in the method you can return a success with `return ManualReply::one(YourActualReturnTypeHere);` or return a canister-reject (while still persisting state) with `return ManualReply::reject("your reject message here");`.

-------------------------

peterparker | 2024-06-21 16:59:22 UTC | #3

Absolutely awesome answer, particularly the `ManualReply`, which I did not know about and which is exactly what I need. Thanks a ton @levi! :pray:

-------------------------

