icaten | 2023-02-14 20:18:57 UTC | #1

I've just completed work on updating the invoice canister for the BNT-2 bounty. 

The most significant upgrade is support for the ICRC1 token standard, which I did by extending the work and motivation of Kyle's original implementation and hope it will be just as helpful. To that end, while not specifically a part of the bounty's tasks, I thought it might be worthwhile to update the use of the conventional hash-map as since the original release date of the invoice canister, there's more options for a stable memory mapping collection if anyone has any input on what might suitable for a project in the official Dfinity examples repo. Or I can just leave it as is so that a developer can easily swap it out to their preference. Thanks for your time.

-------------------------

matthewhammer | 2023-02-15 19:18:37 UTC | #2

[quote="icaten, post:1, topic:18485"]
I thought it might be worthwhile to update the use of the conventional hash-map as since the original release date of the invoice canister, thereâ€™s more options for a stable memory mapping collection
[/quote]

Totally agree.

[quote="icaten, post:1, topic:18485"]
...if anyone has any input on what might suitable for a project in the official Dfinity examples repo
[/quote]

Depending on what data structures the app uses, there is (at least) a stable buffer and a couple of "stable BTrees" (which could each replace uses of a hash map, with some adjustments) as well as a stable hash map:

- [ZhenyaUsenko's stable hash map
](https://github.com/ZhenyaUsenko/motoko-hash-map)

 - [Sardariuss' stable BTree (in stable memory)](https://github.com/sardariuss/MotokoStableBTree)
- [CanScale's stable BTree in (heap memory and in `stable` vars)](https://github.com/canscale/StableHeapBTreeMap)

My sense is that these are but only three options of many, and other people may have more.

Relatedly, there's also [this table of performance results](https://dfinity.github.io/canister-profiling/collections/#map) that compares different map options, though most of them are not "stable".

-------------------------

icaten | 2023-02-16 05:16:26 UTC | #3

Thank you, this is particularly important as I just learned trapping in the preupgrade hook can put a Motoko canister into an irrecoverable state.

-------------------------

