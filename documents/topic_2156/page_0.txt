sberreth | 2021-03-11 10:03:44 UTC | #1

In what way is persisted data protected from being obtained e.g. by a malicious actor breaking into my datacenter and gaining physical access to the nodes running in my racks? It might sound like a far fetched scenario, but i'm eager to understand the underlying mechanics of how secrecy is ensured with the way orthogonal persistence is implemented.

-------------------------

m1rose28 | 2021-03-11 16:50:39 UTC | #2

This is a good point.  And this is also a tough problem. I think to compete with the large service providers. persisted data would need to be encrypted so if someone got access to the canister all they would get is encrypted data.

-------------------------

tritium | 2021-03-11 18:46:25 UTC | #3

Well Dominic did mention multiple times they will be using SEV-ES  so this bodes well for confidential computation and data at rest capabilities that would prevent even someone with physical access to the hardware to snoop on the data.
https://twitter.com/dominic_w/status/1364726491431374851
https://twitter.com/dominic_w/status/1364753844907900928

-------------------------

pie-silo | 2021-03-13 23:54:14 UTC | #4

SEV-ES gives some guarantees that the machine is running the intended code and that the machine operator or anyone with physical access can't peek at the contents of the encrypted VM. In theory it gives you both *Integrity* and *Confidentiality*.

Different users may feel more or less confident in the degree of protection from SEV features. (There have been quite a few CPU vulnerabilities in recent years.) Even aside from CPU flaws, this will need a lot of new software from Dfinity that may have bugs, and that has no track record. 

But apparently Dom feels confident it will prevent data leaks.

The thing that confuses me is this: if Dfinity trust that SEV protects against malicious DCs, why do they need the expensive consensus mechanism? You could just run the code on any one machine, and if you trust SEV then you have a guarantee that the code is executed correctly.

Dom *seems* to be taking the position that SEV can be trusted for confidentiality but not for integrity, which is hard to understand. If you don't control the software that sees the plaintext state, how do you know it keeps it confidential?

-------------------------

renny | 2022-08-25 02:50:39 UTC | #5

So is this question resolved, or still outstanding? I need complete confidentiality.

-------------------------

pie-silo | 2022-08-25 13:24:32 UTC | #6

As far as I can tell there are no confidentiality guarantees. Whichever anonymous operator is running the node where your canister happens to get scheduled can read your data. 

It gets even more crazy with badlands introducing many more amateur operators.

-------------------------

renny | 2022-08-25 14:30:40 UTC | #7

Wow - that is BAD!

This could stop me from using IC for the project.

Have you or anyone else had a chance to think of a solution to this situation?

Sounds like this is not even being considered by anyone?

-------------------------

renny | 2022-08-25 14:42:53 UTC | #8

So it seems like this problem has not been addressed and solved yet, is this correct?

So is the solution to encrypt the data yourself before it is persisted?

Maybe there is another solution?

-------------------------

pie-silo | 2022-08-25 15:57:01 UTC | #9

I don't work on IC or for Dfinity. I agree it's a huge concern about using it for anything but very low value services or serving public data.

-------------------------

renny | 2022-08-25 16:34:58 UTC | #10

Yes, very difficult for me, because I like the IC and wanted to use it, but cannot for this project.

But I will be able to use IC for a different project later, not so confidential as this one.

I left a tweet on Dom's tweet about SEV-ES, I'll post the response here if he replies.

-------------------------

lastmjs | 2022-08-25 16:49:30 UTC | #11

I think deeply about these topics and have discussed them in many places. DM if you need help

-------------------------

dymayday | 2022-08-25 20:12:33 UTC | #12

The only path right now is implementing your end to end encryption yourself.
There is the [encrypted-notes-dapp](https://github.com/dfinity/examples/blob/master/motoko/encrypted-notes-dapp/README.md) example in the Dfinity repo that shows one way to do it.

-------------------------

skilesare | 2022-08-25 21:00:57 UTC | #13

Your inputs and outputs are on the subnet log as well. You need to do end to end encryption. One method to rule this out would to be to have some kind of multiparty compute that behaves like t-ecdsa that can operate in encrypted data or in an enclave.

I’d say we are a couple years from that.  In the mean time there is lots of tooling to build.

-------------------------

pie-silo | 2022-08-27 17:07:56 UTC | #14

e2e encryption is great for the limited situations where it works, although obviously it precludes most interesting server side processing.

In this example it seems IC is just used as dumb untrusted storage. That works, but wouldn't it work equally well on a public cloud?

-------------------------

pie-silo | 2022-08-27 17:46:59 UTC | #15

@lastmjs I did skim and search your huge post history but could not find a previous answer. Would you be so kind as to link to the posts where you address this?

-------------------------

lastmjs | 2022-08-28 01:53:32 UTC | #16

I'll just post from a DM since it would probably be useful to all:

If you need extreme levels of certainty, then the IC probably won't work for your use-case yet. Even with secure enclaves, there is the possibility of the node operators breaking in. And consider that each subnet ideally has many independent node operators, so you run the risk of each node operator breaking in independently of the others.

A few technologies may help in the future:

1. Node shuffling/rotation
2. Secure enclaves
3. Secure multi-party computation
4. Homomorphic encryption

Only the first two are likely to be implemented ant time soon. 3 and 4 are still developing technologies in general.

So, you have to consider the risks in light of the current architecture. On AWS you have two main legal entities that have access to data, yourself and Amazon. Legal agreements I believe are in place that would help prevent abuse by Amazon, but technically they can peek in many cases.

On the IC canisters don't have individual legal agreements with node operators. They may be a legal agreement between DFINITY and node operators, but I'm not sure if that will remain in the future.

You can encrypt data client-side, but the main difficulty there is storing the encryption key securely and with a good UX. Where do you put the encryption key? And if the data is encrypted inside of the canisters, it's very difficult to compute on the data. So you break many use cases.

-------------------------

senior.joinu | 2022-08-28 11:25:07 UTC | #17

There is actually an another way of making your data hidden from individual malicious node operators.
This is not like some proven algorithm with publication papers and stuff - so, please, take it with a grain of salt. And it does not prevents node operators from reading your data, but it makes it much harder to do. With this protocol applied, node operators now have to cooperate in order to read your data.

Imagine you have a data entry, and a set (a cluster) of K canisters providing identical functionality. All of these canisters implement the two following functions:
```
#[update]
fn upload_chunk(chunk: Chunk, chunk_id: ChunkId) {
  // persists the chunk, indexing it with the provided chunk id
}

#[query]
fn get_chunk(chunk_id) -> Chunk {
  // returns the chunk
}
```

When you want to upload some data (a file, for example), first you split this data in N chunks. Then, you apply an erasure code function (e.g. Reed-Solomon or Fountain Codes) to these chunks. This function will return you two sets of chunks: original chunks and parity chunks. The idea is to only use parity chunks (so in case of Reed-Solomon you want to generate N of them; in case of Fountain Codes, you want to skip first N of what it will generate). 

These parity chunks are special. Each such chunk tells nothing about your original data, but if you collect N of them, (with high probability) you will be able to reconstruct the original data. If you can't collect all N parity chunks, then you won't be able to reconstruct your data.

So, once you have these parity chunks, you split them in K groups and send each group to some distinct canister in the cluster (so each canister will only receive N/K chunks from you). In order to generate chunk ids you just use random values. Ofc, you have to remember what chunk ids represent the file you've just uploaded (you can store this index locally for maximum security, but it is also possible to create a separate "indexing" canister, where users store these indices).

___________________________________________

In total what do we have:
* you stored the file to a cluster of canisters (that is distributed and stored in different subnets, on different physical machines);
* canisters only store parity chunks and these chunks are mangled with the erasure code algorithm, so there is no way for a node operator to even partially understand what's inside the chunks they hold in their subnet;
* since you know chunk ids and canisters ids where each of these chunks are, you can fetch them back and reconstruct your data locally.

Now, no individual node provider can access the information you've stored. In order to reconstruct it back they would need to obtain all N chunks. In other words, they would need to cooperate with other subnets. The more canisters you have in the cluster, the more malicious nodes would have to cooperate together in order to reconstruct your data, the harder the problem is.

Yes, this is still possible to do, but it is much-much harder now, especially if subnet/canister shuffling and/or hardware encryption will be implemented. From this point it is no more a question of "can a node operator access my data?", but instead "does my data cost more than the cost of identifying and cooperating with K-1 other malicious node operators?". 

___________________________________________
The only problem that I see with this solution is that there are also boundary nodes, which can be malicious and can accumulate different chunks, until they are able to reconstruct the data. This can be fixed, if the channel between the user and the subnet node is encrypted - honestly I don't know if that's true.

-------------------------

renny | 2022-08-28 19:53:33 UTC | #18

This is an interesting idea and helpful input to the process of solving the problem. At some point, this problem must be solved so we can use the IC with maximum confidence in data privacy.

-------------------------

JaMarco | 2022-08-28 20:02:42 UTC | #19

Why is data privacy necessary on IC? You don't get complete data privacy on other blockchains or traditional clouds.

-------------------------

skilesare | 2022-08-28 21:33:32 UTC | #20

It is necessary for certain applications. If you want to build a decentralized system for X and X is any industry where competitors might use the system then you need a solution to convince CTOs that there is little to 0% chance of others gaining access to their data.  Without solving the problem you are stuck with the use cases you already have on todays blockchain. Basically DeFi and maybe some social networks where all data is public.

-------------------------

renny | 2022-08-28 22:57:49 UTC | #21

Yes - this is the reason (is this 20 characters).

-------------------------

tsetse | 2022-08-29 03:30:39 UTC | #22

Once decentralized node onboarding becomes possible, should we expect a bunch of malicious node providers to join the network and make private data public as a way to undermine the IC? Or is there a way to counter this?

-------------------------

skilesare | 2022-08-31 04:23:54 UTC | #23

Because the wasm code is part of ingress messages to the ic and function calls are ingress messages and intercanister calls are part of the subnet message log, you reallly should not consider any data private on the IC.  Theoretically, with access to the logs, you could reconstruct anyones datastate from the logs. Dfinity hasn’t made these public yet, but I know there have been talks to do so.

If you want your data to be private you should encrypt it before sending it to the IC.

Hopefully there is a future where we can send encrypted transactions to enclaves that have a much higher security level. Likely you would want a higher level of kyh (know your host) for this kind of subnet that could drastically reduce the risk of having the data be exposed.

-------------------------

renny | 2022-08-31 16:21:06 UTC | #24

Great info (plus 20 characters).

-------------------------

PeID | 2022-09-24 03:36:55 UTC | #25

Thanks for your post! KYH.

White bordering a PoC and MVP Use Case, the eIDAS2 EU mandate on eID schemes offers a potential public-private partnership. A Subnet of 31 EU-Digital Single Market member states interfaced boundary-nodes interoperable with EBSI distributed nodes.

If feasible, could it then be possible to offer a higher LoA (end-to-end encryption) privacy-preserving DID channel?

 [EU-DSM](https://ec.european.eu/eurostat/cache/infographs/ict/bloc-4.html)

-------------------------

apotheosis | 2022-10-29 01:37:31 UTC | #26

Has anyone been able to store data encrypted on the IC? Without needing to encrypt it first, or store the key in browsers?

This seems like it should be high priority as b2b users need to know their data is not viewable.

-------------------------

skilesare | 2022-10-29 04:19:06 UTC | #27

Not yet. DFINITY has been talking about enclaves since 2018 so it’s on the roadmap.  There may be cool crypto schemes in the horizon as well. Everyone wants to get there.

-------------------------

paulyoung | 2022-10-29 07:29:25 UTC | #28

Can threshold ECDSA be used to encrypt canister data?

(Ignoring concerns around potential node provider collusion, etc. for now)

-------------------------

domwoe | 2022-10-29 08:40:12 UTC | #29

[quote="paulyoung, post:28, topic:2156"]
Can threshold ECDSA be used to encrypt canister data?
[/quote]

No, it can only be used to sign data.

-------------------------

lastmjs | 2022-10-29 13:49:19 UTC | #30

Threshold encryption is now on the roadmap, under Upcoming: https://internetcomputer.org/roadmap/

"Enable threshold encryption on the IC by allowing canisters to call a threshold decryption interface. The interface would enable canisters or individual users to encrypt messages under the public key of the subnet, and decrypt the ciphertexts under the corresponding decryption key that is secret-shared among the replicas. Threshold encryption will enable canisters to store end-to-end encrypted user data (e.g., storage, messaging, social networks) without having to rely on browser storage for user-side secrets, as well as enabling transaction privacy within canisters (e.g., closed-bid auctions, front-running prevention)."

-------------------------

aiv | 2022-10-30 03:29:14 UTC | #31

@skilesare, @lastmjs, & @domwoe,

I could really use your help with this regarding ntagle.

The entire usage of ntagle rests on being able to securely store symmetric encryption keys.

Users will need to login, so I can have them sign messages before sending them to the canister.

What I need to know is:
1. If the secrets are plaintext while the logic is actively running internally within the canister, would this still basically be public and viewable by a bad node provider? If so this really means nothing about data can be secret with the network, which is hugely disappointing.

2. Could I use the ECDSA feature to encrypt keys with the public key before storing them to state, then then decrypt the keys when needed for the authentication logic? I assume only the canister can call the usage of the secret key? Would I be able to safely store any data I'd need for generating these calls to the ECDSA functions (like, could a node provider replicate my canister's ECDSA calls and get back the original data)?

3. @skilesare basically said inter-canister calls can all be revealed from the logs. I guess this includes the ECDSA calls too?

@domwoe when we talked you mentioned there may be some advantage to splitting up sensitive data across multiple subnets. Do you think this is the best approach to pursue? If so, how could I help make the necessary inter-canister calls secure?

-------------------------

lastmjs | 2022-10-30 03:23:06 UTC | #32

Are you asking about signing or encrypting? These are two distinct cryptographic operations, and you might be conflating the two. I assume you're most interested in encrypting data.

1. The safest assumption is that any data you store in a canister is viewable by the node provider. The nodes seem pretty locked down from what I've learned, but a motivated node provider I believe would be able to get all data stored in all canisters on its subnet. This is hugely disappointing. But, you can client-side encrypt data before sending it to the IC. This would help because node operators wouldn't have the decryption keys. But the problem is, where would the user store these keys? It's a hard UX problem. That's where threshold encryption comes into place. I think it might be exactly what you're looking for. This allows you to store the encryption/decryption key on the IC distributed across multiple nodes. A user can then request the key, I assume based on regular IC authentication, and encrypt and decrypt data on their own devices.
2. ECDSA is only for signing data, not for encrypting or decrypting data.
3. I don't know about this

-------------------------

apotheosis | 2022-10-30 03:48:58 UTC | #33

Thanks for this! Who would have thought to look at the roadmap :rofl:
Should I be concerned that it is all blacked out? 

@domwoe This might mean it was in planning but no longer?

I am thinking of ways to onboard companies to certain features in the IC. Privacy is always a rebuttal for data storage; and we need to be able to tell the truth about current state.

![Screen Shot 2022-10-30 at 12.46.32|324x500](upload://8aBp29W9HIWrYC9rkr8Fb6qXCEE.png)

-------------------------

FranHefner | 2022-10-30 14:52:07 UTC | #34

It is in the process of launching.

https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152/245?u=franhefner

-------------------------

Zane | 2022-10-30 14:53:24 UTC | #35

That one is a different feature

-------------------------

skilesare | 2022-10-30 21:36:31 UTC | #36

Looks like it is being explored, but I’d imagine threshold encryption is a way off. I have some ICDevs bounties that need it. They are in the freezer for now.

-------------------------

skilesare | 2022-10-30 21:54:23 UTC | #37

Do your tags have an encryption feature or just a signing feature?  If the tag can sign then the tag probably has an enclave.

What you want is an enclave in the dfinity nodes. We don’t have those yet, but research is being done.

Signing should be enough in your tag to prove the presence of the tag. The signing algo likely reports a public key which isn’t secret and sends a signature of a payload back(random number, time stamp) that only having the private key would possibly be able to produce.

-------------------------

aiv | 2022-10-30 23:00:21 UTC | #38

The tags generate unique URLs with a CMAC parameter  based on the scan count using AES-128.

Unfortunately, since it's all symmetric encryption this typically means the Secure Dynamic Messaging server (in this case an SDM canister) must hold the secret keys for each tag.

One option would be for the encoder to generate a huge list of valid CMAC messages (perhaps the first 100,000 scans), hash the values, and then upload that data to the canister. We don't have a CMAC library for Motoko yet, so that's already similar to what I'm currently doing.

The transfer code will change between each tag owner (it's a random string encoded statically to the tag in plaintext by the current owner when they "unlock"the tag for transfer), so even the original encoder won't have all the necessary information to transfer ownership of the digital assets associated with the tag.

For the transfer code, I'm going to need a creative solution to make sure that information is stored, transmitted, and validated securely.

-------------------------

skilesare | 2022-10-30 23:54:28 UTC | #39

I’m not enough of a crypto expert to know if this is viable, but nu-cypher has some tech that lets a node re-encrypt without knowing the actual code and a few other multi party compute schemes.  I’d love to see if any of these could be put inside of canisters to create a multi canister encryption scheme. It would be “slow” but might dove some problems.  

https://github.com/orgs/nucypher/repositories?type=all

https://www.nucypher.com/proxy-re-encryption

-------------------------

apotheosis | 2022-10-31 00:09:36 UTC | #40

Interesting parts -> https://github.com/nucypher/rust-umbral/tree/master/umbral-pre-wasm
https://github.com/nucypher/rust-umbral

It seems that Alice would need to use her secret key and Bob's public key to generate the re-Encryption for the capsule.. 😂 jargon aside - a canister would need to store a secret key to do this.

-------------------------

skilesare | 2022-10-31 00:26:39 UTC | #41

Yes, but if someone gets that key, the worst they can do is encrypt encrypted data.(I think…I may be misinterpreting this).

Where this gets i is, I think, other libraries they have involve some basic multiparty compute.  So you can apply basic logic without having to see the data.  I saw a demo one…it was like 3 years ago. Looked like cool tech.

-------------------------

apotheosis | 2022-10-31 00:52:52 UTC | #42

Just looking at the code - they need the original private key for round #2. 
Bob is the only person who does not need it. Translation: our middle-man canister proxies would need it.

i.e. Node provider gets the key used in 1 and in 2 so they can undo the whole thread back to original text.

-------------------------

apotheosis | 2022-10-31 02:12:34 UTC | #43

Anyone know people at Dmail? 

'VRF (measurable random function) + BLS (non-interactive threshold signature) + Container.'

https://dmail.ai/Dmail_litepaper.pdf look in Distributed storage.
Or https://www.dfinitycommunity.com/dmail-network-decentralized-email-for-the-web-3-generation/ in DMAIL Message.

They were thinking about using a token to do this.

-------------------------

ais | 2022-11-01 13:43:20 UTC | #44

Hey! This was a little easter egg that I placed on the roadmap - there was a way to 'decrypt' if you somehow collaborated with the page, but indeed it looked confusing. I made the text 'normal' now, so you can read. This is a feature currently in discussion - will start a forum thread in the coming days :heart:

-------------------------

apotheosis | 2022-11-01 22:11:13 UTC | #45

:rofl: I copy and pasted it to read it. What was the desired way to decrypt?

Also - super excited for this feature as it is a major blocker to b2b coming to the IC with $$ for devs.

-------------------------

ais | 2022-11-02 08:29:21 UTC | #46

This is great to hear! we are super interested to know what have been the main blockers to could be solved with this, so keep them coming. Looking forward to kicking off the discussion!

-------------------------

paulyoung | 2022-11-14 15:50:44 UTC | #47

Sharing for visibility 🙂

https://forum.dfinity.org/t/threshold-key-derivation-privacy-on-the-ic/16560?u=paulyoung

-------------------------

