saikatdas0790 | 2023-11-14 09:58:37 UTC | #1

Here is the error I'm seeing when I add ic-agent to a Axum project:
![image|638x500](upload://2BefNMsrdfr75Qdx3lA0530NbyB.png)

The intent is to be able to call into the IC as a data layer from an off-chain server.

Here is a minimal reproduction:
https://github.com/saikatdas0790/minimal-reproduction-add-agent-rs-to-cargo-leptos-project

Thoughts?

-------------------------

lwshang | 2023-11-14 14:45:45 UTC | #2

Just checked the source code [here](https://github.com/dfinity/agent-rs/blob/3cb1c46a4bf951060f97eb10d5347058a5b364bf/ic-agent/src/agent/mod.rs#L684-L705).

We have conditional compilation for the match pattern `Some(duration)`:
* If the target is not `wasm`
* If the target is `wasm` **AND** the `wasm-bindgen` feature is **on**

There can be a case that is not covered: the target is `wasm` **AND** the `wasm-bindgen` feature is **off**.

Are you embedding Rust agent in Wasm? If so, turning on `wasm-bindgen` feature should make it work.

P.S. IMO, this is indeed a Rust agent issue. It should compile for wasm when the feature is off.

-------------------------

saikatdas0790 | 2023-11-14 15:41:56 UTC | #3

@lwshang 

For the above error, I just added the crate to a Leptos project.

I haven't imported/added any `use` statements for the error to show up.

I'm not completely sure about this

[quote="lwshang, post:2, topic:24671"]
Are you embedding Rust agent in Wasm?
[/quote]

From what I'm aware, Leptos compiles to 2 different outputs, an Axum server binary that is run on the server and performs SSR and another WASM bundle that is used when hydrating on the client browser and takes over interactivity. The agent will be used in both places is what I intend to do to fetch data from the IC and prerender pages on the server and serve to clients for fast initial page loads and then use the agent for further data loading on the client for subsequent interactivity

Here's some more context from the Leptos repo
https://github.com/leptos-rs/cargo-leptos#build-features

> When building with cargo-leptos, the frontend, library package, is compiled into wasm using target `wasm-unknown-unknown` and the features `--no-default-features --features=hydrate` The server binary is compiled with the features `--no-default-features --features=ssr`

The cargo build parameters look something like this when building:
![image|608x397](upload://nw6y4wBEIJLgepVsyC9pA7oYjTo.png)

Let me know if that was helpful or if there's any more context I can provide :slight_smile:

-------------------------

lwshang | 2023-11-14 16:23:52 UTC | #4

In your `Cargo.toml`, change the line of `ic-agent` into:
```toml
ic-agent = { version = "0.30.0", features = ["wasm-bindgen"] }
```

-------------------------

saikatdas0790 | 2023-11-14 16:34:07 UTC | #5

Yes, I believe that worked. Thank you so much

-------------------------

