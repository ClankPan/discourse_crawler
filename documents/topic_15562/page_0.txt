rbirkner | 2022-09-21 08:45:27 UTC | #1

The boundary nodes are the gateway to the Internet Computer (IC), which allow users to seamlessly access the canister smart contracts running on it: through stock browsers users are served web-content fully from the chain. To this end, the boundary nodes translate the users’ requests into API canister calls, route these calls to the subnet running the canister and load balance among the subnet’s replica nodes. In addition, boundary nodes provide caching and other services for improved performance.

At the end of last year, the NNS community adopted a [motion proposal](https://dashboard.internetcomputer.org/proposal/35671) outlining the long-term research and development directions for the boundary nodes. In this post, we provide an update and provide an outlook on the future of the boundary nodes.

We just completed a major milestone by moving the boundary nodes to the same platform as the replica nodes. More specifically, boundary nodes now use the same host- and guest-OS architecture as the replica nodes, which is based on standard Ubuntu and often referred to as “IC-OS”. Thanks to this change, we can build on existing best practices and prepare the boundary nodes to be community-managed via the Network Nervous System (NNS). This is a key precondition to further decentralize the deployment and management of boundary nodes. 

In the following, we present the target architecture we aim for and highlight the main features we will work on to reach this target.

# Future Boundary-Node Architecture

## Design Goals

The design goals for the boundary node target architecture are: 

* **No single point of trust:** users can interact with the IC without having to trust a single entity. Besides significantly reducing trust assumptions, this requirement increases the IC’s availability as there is no single point of failure.  
* **Useability:** users can conveniently access the IC using stock browsers as it is already possible today, i.e. standard web browsers with no additional modifications or add-ons.
* **Censorship resistance and legal compliance:** individual boundary node owners are able to independently comply with local legal frameworks, e.g., blocking gambling services in a particular geography, without restricting other boundary nodes. This requirement ensures that boundary nodes do not have to comply with the least common denominator globally.
* **Open:** anyone can run a boundary node and we aim to maximize the functionality  managed by the  IC community  through the NNS.

## HTTP Gateways and API Boundary Nodes

To understand the new architecture, we first have to look at today’s boundary nodes, which serve mainly two roles: (1) they act as HTTP gateways and (2) they serve as endpoints for API canister calls.

The future boundary architecture foresees the decomposition of today’s boundary nodes into two different kinds of nodes, each assuming one of these roles.

* **HTTP gateways:** provide an endpoint to the users that terminates TLS, serves the service worker and translates the users’ HTTP requests to API canister calls.
* **API boundary nodes:** provide an endpoint that handles API canister calls by routing them to the correct subnet and replica node, and provides caching and rate-limiting to protect the IC.

This decomposition is motivated by different trust assumptions. HTTP gateways require users’ trust as they terminate TLS and serve the service worker, which contains the IC’s public keys. In contrast, API boundary nodes come with significantly lower trust assumptions.

The following figure depicts the new architecture using HTTP gateways and API boundary nodes. Next, we will explain how this architecture achieves the design goals.

![Boundary Node Roadmap (1)|690x332](upload://Aepia0uL01GBs2MeCY2Kf8V3ZOz.png)

## Community-owned Boundary Nodes

In order to achieve the “no single point of trust” goal, boundary nodes must be owned and controlled by multiple parties:

* **HTTP gateways** will be self-managed, which means that anyone can run an HTTP gateway under their own domain with their own policies without NNS-approval. Then, DFINITY will just be one of many HTTP gateway owners and users can choose the gateway they trust most and through which they access the IC. Hence, there will be no “single point of trust” and we achieve the “censorship resistance and legal compliance” design goal.
* **API boundary nodes** will be managed and rewarded through the NNS akin to the replicas today (shaded blue area). The vast majority of the API boundary nodes will be provided by third parties (green) and a few by DFINITY (pink).

In summary, community members will both run HTTP gateways and API boundary nodes.

## Access Paths

Depending on a user's tech-savviness and usability preferences, this architecture allows to access the IC through different paths:

* **Stock browser:** A user can choose their trusted HTTP gateways by picking the corresponding domain. Thereby we achieve the “useability” design goal. While this path comes with a choice of a HTTP gateway, it still requires the trust in a single gateway owner.
* **IC-native clients** contain the IC’s public keys and can access the API boundary nodes directly (red arrows). In the future, there will be many different native clients such as mobile applications and web-extensions. We also plan to develop a web-extension for the browser, which translates HTTP requests for the IC into API canister calls directly in the browser allowing users to completely bypass the HTTP gateway.

In conclusion, for convenience, users will rely on HTTP gateways but if they choose a native client, they don’t need HTTP gateways. API boundary nodes are always part of the path from a client to a replica node but they are truly decentralized and under the control of the NNS.

## DNS

Ultimately, we plan to further reduce the required trust by building a decentralized DNS infrastructure directly on the IC. However, we haven’t worked out a concrete architecture yet.

# Upcoming Features

In addition to the new boundary node architecture, we are working on improving the user experience and the security of the IC. In particular, we are working on:

* **Search engine optimization (SEO):** By the end of September, we will rollout an update to the boundary nodes allowing search engines to index canisters on ic0.app and enabling previews on social media (e.g., Twitter cards). We achieve that by letting crawlers and bots bypass the service worker similar to raw.ic0.app.
* **Asset caching:** In November, we will release an update that enables asset caching as introduced in DFX 0.11.1. This update allows the browser and service worker to cache static assets and therefore improve the load times experienced by dapp users.
* **Custom domains:** After that, we will start working on bringing custom domains to the IC. While it is already possible today, it requires extra developer effort by handling the SSL certificate and a server to host the service worker (see [Documentation](https://internetcomputer.org/docs/current/developer-docs/deploy/custom-domain/)). Our goal is to seamlessly integrate the domains into the existing boundary nodes, in the future HTTP gateways, such that developers can use friendly domain names with minimal effort – only the DNS record of the domain has to be adapted.

In the longer term, we focus on increasing privacy and integrity to improve the overall security. We aim to seal the boundary nodes and provide means for users to validate their integrity. To this end, we use hardware-based trusted execution, specifically, we are relying on AMD SEV-SNP, and allow users to remotely attest the authenticity of the boundary nodes’ hard- and software. In addition, we are working on an enhanced response certification that prevents malicious replicas and boundary nodes from modifying the HTTP responses.

# Next Steps & Roadmap

### Q4 2022:

* The boundary nodes team focuses on the useability features:
  * enabling SEO (ETA: end of September)
  * asset caching (ETA: November)
  * supporting custom domains (no specific ETA, but the intent is to finish by the end of the year)
* The order of magnitude: months.

### Q1 2023:

* The team starts implementing the new boundary node architecture that decomposes boundary nodes into “HTTP gateways” and “API Boundary Nodes”.
* As of today, there is no specific ETA for this decomposition (it could go into Q2 for example), but decomposing will include:
  * Anybody being able to run an HTTP gateway (no NNS approval needed)
  * Anybody being able to run an API Boundary node (NNS approval needed) and get rewarded for it.
* The order of magnitude: months.
* As the team knows more, the team will update on this thread.

We hope this post addresses a lot of the questions the community has raised about boundary nodes in the past months. We look forward to your feedback on how we plan to strike a balance between decentralization, useability, and security.

-------------------------

Seb | 2022-09-21 10:29:29 UTC | #2

Thanks the update, those are really exciting plans!

Could you expand on how you plan to design the reward scheme for the API boundaries nodes, will it depend on the number of API calls & if so how can we keep track of this metric in a trustless manner ?

-------------------------

rbirkner | 2022-09-21 12:00:29 UTC | #3

Hi Seb, the exact reward scheme is part of the overall redesign of the boundary node architecture. We are working on that and will provide more details as soon as we have them!

-------------------------

JaMarco | 2022-09-21 14:50:53 UTC | #4

Is there any plans for building a decentralized CA/TLS infrastructure on IC?

-------------------------

cryptoschindler | 2022-09-21 16:06:44 UTC | #5

[quote="rbirkner, post:1, topic:15562"]
**Open:** anyone can run a boundary node and we aim to maximize the functionality managed by the IC community through the NNS.
[/quote]

Extremely excited about the progress being made here! Can't wait to hear what final design for integrating boundary nodes with the NNS will look like.

-------------------------

skilesare | 2022-09-22 13:36:38 UTC | #6

[quote="rbirkner, post:1, topic:15562"]
**Asset caching:** In November, we will release an update that enables asset caching as introduced in DFX 0.11.1. This update allows the browser and service worker to cache static assets and therefore improve the load times experienced by dapp users.
[/quote]

Is this documented anywhere?  Is it by default or configurable?  We have assets that appear static but can be updated via the http_qurey_upgrade functionality....how does this interact with that?

-------------------------

skilesare | 2022-09-22 13:37:57 UTC | #7

[quote="rbirkner, post:1, topic:15562"]
To this end, we use hardware-based trusted execution, specifically, we are relying on AMD SEV-SNP, and allow users to remotely attest the authenticity of the boundary nodes’ hard- and software. In addition, we are working on an enhanced response certification that prevents malicious replicas and boundary nodes from modifying the HTTP responses.
[/quote]

This is awesome!  Great work all around.

-------------------------

skilesare | 2022-09-22 13:39:12 UTC | #8

How does, or does this, work interact with the ICx proxy that is currently used?  We use a fork of that want to be prepared for any architectural changes.

-------------------------

jzxchiang | 2022-09-23 06:20:33 UTC | #9

[quote="rbirkner, post:1, topic:15562, full:true"]
## DNS

Ultimately, we plan to further reduce the required trust by building a decentralized DNS infrastructure directly on the IC. However, we haven’t worked out a concrete architecture yet.
[/quote]

I think this will be really powerful, as it would let HTTP gateways (not just API boundary nodes) be managed by the NNS. I thought the timeline for this would be earlier, to be honest.

By the way, I'm assuming DFINITY will provide the IC-OS for both the HTTP gateways and the API boundary nodes in the future. All the user has to do is run the gateway server and register its DNS.

-------------------------

jzxchiang | 2022-09-23 06:26:17 UTC | #10

Actually, perhaps I misspoke: wasn't there a plan for decentralized SSL certificates at some point, especially now that threshold ECDSA is released? I think this would be the enabler for NNS-managed HTTP gateways.

-------------------------

raymondk | 2022-09-23 14:16:53 UTC | #11

@skilesare today the asset canister is only certifying the body of the response. We have an idea for an enhancement that will allow us to certify the headers as well.
With certified headers in place, it would allow the service worker to trust cache control headers and cache certified assets in a secure way.

-------------------------

raymondk | 2022-09-23 14:23:11 UTC | #12

[quote="skilesare, post:8, topic:15562, full:true"]
How does, or does this, work interact with the ICx proxy that is currently used?  We use a fork of that want to be prepared for any architectural changes.
[/quote]

Hey @skilesare, can you elaborate on how you are using the icx-proxy fork? A little context could help me tell you how you might be impacted by some of those changes.

-------------------------

skilesare | 2022-09-23 14:26:36 UTC | #13

We use it to host a custom URL. We also have some extra code that handles range requests for video streaming for safari and some redirect code for handling content on storage canisters with more grace(without changing the URL).

-------------------------

rbirkner | 2022-09-25 21:41:06 UTC | #14

Yes, we will make all the relevant code available such that anyone can run an HTTP gateway on their own infrastructure. The API boundary node code will also be public like the replica code today.

-------------------------

cryptoschindler | 2022-09-29 16:09:55 UTC | #15

Is there going to be an economic incentive to run a HTTP Gateway?

-------------------------

diegop | 2022-09-29 16:22:23 UTC | #16

I *believe* the current intent is "NO", but API-boundary nodes will. 

The intent is that the NNS accepts the API-boundary nodes so the community can keep control on the minting rate. Since HTTP gateways are not regulated by the NNS, they also do not receive ICP from the NNS.

Of course, if it turns out this is a problem, then I can imagine, there will be new iterations (just like decomposing the functionality of boundary nodes is itself an iteration).

-------------------------

cryptoschindler | 2022-09-30 07:18:32 UTC | #17

Thanks! 
Just wondering why someone would run a HTTP Gateway if not out of pure kindness 🤔

-------------------------

Severin | 2022-09-30 09:26:49 UTC | #18

One incentive would be to keep access to your (IC-based) site available - just like some companies contribute to OpenSource projects they would have an interest in keeping the IC alive

-------------------------

rdobrik | 2022-12-21 14:18:24 UTC | #19

We are working on something similar, not sure if we should also call it boundary node. It's Java/JVM based node that can open connection from/to canister to different proprietary systems like Kafka or DBs (Oracle, MySQL). I assume such nodes will mainly run on private networks, such systems are using non HTTP protocols to connect and they are not typically exposed to public internet. Yeah, we can call it Oracles even if I do not like much that term. Maybe rather integration nodes. With our IC Apache Camel integration and Apache Karavan VS Code plugin we really want to minimize development (no code or minimal code) and deployment to internal Kubernetes/Docker infrastructure. Such components can be even pre build, to connect to existing IC services. Just trying to figure out the best terminology, to make it easy to understand. I am going to work on short video, to demonstrate dev/deployment experience.

-------------------------

benjmanable | 2022-12-25 14:49:11 UTC | #20

[quote="rbirkner, post:1, topic:15562"]
In the longer term, we focus on increasing privacy and integrity to improve the overall security. We aim to seal the boundary nodes and provide means for users to validate their integrity. To this end, we use hardware-based trusted execution, specifically, we are relying on AMD SEV-SNP, and allow users to remotely attest the authenticity of the boundary nodes’ hard- and software. In addition, we are working on an enhanced response certification that prevents malicious replicas and boundary nodes from modifying the HTTP responses.
[/quote]

Is there any status / timeline for adoption of AMD SEV-SNP? Or is it already implemented?

-------------------------

rbirkner | 2022-12-28 08:26:14 UTC | #21

Hi benjmanable,

we are working on SEV-SNP enabled boundary nodes, but we don't have a fixed timeline yet. 

We have a first working prototype of requesting and creating the certificates and corresponding private keys such that the keys never leave the boundary node. The next step is turning this prototype into production-ready code.

However, we also need the right hardware, which supports AMD SEV-SNP. Right now, we are in the process of procuring the machines, which takes time due to the supply chain problems/chip-shortage.

-------------------------

rbirkner | 2022-12-28 08:29:05 UTC | #22

Hi rdobrik

It's great to hear that you are working on nodes to enable the use of other services. I think calling these nodes, as you suggest, integration nodes is a great idea as they integrate other/external systems/services in the IC.

-------------------------

Julianchuk | 2023-01-23 17:54:58 UTC | #23

[quote="rbirkner, post:1, topic:15562"]
**Censorship resistance and legal compliance:** individual boundary node owners are able to independently comply with local legal frameworks, e.g., blocking gambling services in a particular geography, without restricting other boundary nodes. This requirement ensures that boundary nodes do not have to comply with the least common denominator globally.
[/quote]

I think brand safety should be set to a minimum (child pornography and a couple of unacceptable things), but if we are not against censorship and/or violence imposed at the whim of governments (such as gambling) What makes us different from AWS?

-------------------------

Mr_Burkes | 2023-01-24 23:42:12 UTC | #24

[quote="Julianchuk, post:23, topic:15562"]
I think brand safety should be set to a minimum (child pornography and a couple of unacceptable things), but if we are not against censorship and/or violence imposed at the whim of governments (such as gambling) What makes us different from AWS?
[/quote]

I agree. The current rules are too restrictive, and the rules should be set by the community and BN operators, not some dude at DFINITY.

@rbirkner @diegop What is the status on community-owned Boundary Nodes? BNs and nodes that can't be onboarded by anybody in a decentralized way makes the IC little better than a slower, more restrictive, AWS.

-------------------------

shayaaa | 2023-01-25 18:39:48 UTC | #25

Is it technically possible to add a VPN or other encryption to canister that doesn't register the location of the user or puts them all geographically in the least restrictive country/area?

-------------------------

Severin | 2023-01-26 07:57:06 UTC | #26

[quote="shayaaa, post:25, topic:15562"]
add a VPN or other encryption to canister
[/quote]

This is not how it works. The canister has no say in this. It is done by the boundary nodes, which are the servers that route requests to the right nodes which then run the correct canister code for that request.

You can read up on how the boundary nodes work on [this page](https://internetcomputer.org/how-it-works/boundary-nodes/)

-------------------------

rbirkner | 2023-01-27 12:24:22 UTC | #27

Hi @Julianchuk, 
@diegop provided a quite detailed overview in the following post: https://forum.dfinity.org/t/content-filtering-via-boundary-nodes/18196

-------------------------

rbirkner | 2023-01-27 12:28:52 UTC | #28

Hi @Mr_Burkes 

after wrapping up the custom domains, the team will start working on the new Boundary Node architecture. @diegop provided a bit more detail under point 2.7 of his post: https://forum.dfinity.org/t/content-filtering-via-boundary-nodes/18196/3#h-27-how-close-is-the-ic-to-the-new-architecture-10

-------------------------

Mr_Burkes | 2023-01-29 15:34:05 UTC | #29

@rbirkner Thank you for the update!

-------------------------

Julianchuk | 2023-02-01 08:53:46 UTC | #30

Thank you for a highly professional and very well structured response, also congratulations for doing social listening efficiently and finally for tackling difficult issues head on with the community.

-------------------------

NathanosDev | 2023-04-03 13:16:36 UTC | #31

Something to note here is that community owned boundary nodes will still be responsible for the content that's served through their domains. Ultimately the decision to block canisters is out of the hands of the boundary node operators, unless they are willing to deal with law enforcement, spam lists, certificate authorities and TLD operators. Having the community decide what should or should not be served through a boundary node is very dangerous for the boundary node operator.

You are also free to host your own service worker for a canister: https://internetcomputer.org/docs/current/developer-docs/production/custom-domain/#custom-domains-using-your-own-infrastructure. If you do this, then you are responsible for the content that's served on that domain.

Unfortunately, there's not much that can be done about this by the IC in the short term since internet infrastructure itself is very centralized.

-------------------------

cymqqqq | 2023-06-05 03:33:24 UTC | #32

Hi all, any updates on “HTTP gateways” and “API Boundary Nodes"?

-------------------------

rbirkner | 2023-06-05 07:24:23 UTC | #33

Hi @cymqqqq 

The team has started to work on the new architecture. We are currently focusing on building the API Boundary Nodes. However, it will still take in the order of months until we can fully rollout the new architecture: bringing the API Boundary Nodes under the management of the NNS and deploying them in data centers of different node providers is a major undertaking.

We will keep you posted as we make progress!

-------------------------

CoolPineapple | 2023-07-06 10:11:33 UTC | #34

HTTP gateways are a subset of all gateways and we might want to think about how the architecture can support *gateways* which expose protocols other than HTTP. For example supporting event and messaging paradigms such as XMPP or MQTT. Even a shift in terminology or diagrams to indicate the possibility of 3rd party gateways that support other protocols might be useful in terms of encouraging innovation in this area.

-------------------------

rbirkner | 2023-07-06 11:15:03 UTC | #35

Hi @CoolPineapple 

That's a very good point! HTTP Gateways are just one gateway that maps an existing protocol to Internet Computer API calls. One could, for example, also think of a DNS Gateway. 

I will update the figure in the coming days accordingly!

-------------------------

icarus | 2023-07-06 12:03:41 UTC | #36

Is there a standard or minimum server hardware specification for the IC Boundary Node architecture under development? Or if nothing specific as yet it would be interesting to know what server platform the engineering team is using to develop the node architecture

-------------------------

rbirkner | 2023-07-06 12:57:32 UTC | #37

Hi @icarus,

we don't have a specification yet, but I can tell you what the specs of the current boundary nodes roughly are: 8 core CPU, 32 GB of memory and ~500GB of disk.

-------------------------

ritvick | 2023-07-06 17:32:45 UTC | #38

Anyone aware of the estimated timeline, the community could participate and operate boundary nodes ?

-------------------------

rbirkner | 2023-07-06 17:58:42 UTC | #39

Hi @ritvick 

The timeline is not fixed yet. We probably start deploying the new API boundary nodes towards the end of the year. Once we get closer to it, we will provide updates with all the information.

-------------------------

infu | 2023-07-06 17:58:54 UTC | #40

[quote="rbirkner, post:35, topic:15562"]
DNS Gateway.
[/quote]

Sounds great. Are you planning on letting 3rd party developers create modules for boundary nodes? I assume the boundary node admin will be selecting which modules they want to install, like SMTP, DNS, etc. But it will be great if devs can create modules/docker images, which provide all kinds of servers/ gateways, why not a real-time game server that communicates with canisters and also provides quick responses? An SNS DAO could be publishing these modules. 
Anyway, I want to get into the queue for boundary nodes and experiment with them, if there is such functionality. Probably even if there isn't, the boundary node software is running inside a container and nothing stops the admin to launch more containers that use the boundary node to connect to IC?

-------------------------

rbirkner | 2023-07-06 18:07:20 UTC | #41

Hi @infu 

The boundary nodes will be split into two parts: the API Boundary Nodes that serve only the Internet Computer API endpoints (query, call, read state, status) and the Gateways (currently only the HTTP Gateways) that map between a protocol and the Internet Computer API (e.g., in the case of HTTP Gateways between HTTP(S) and API calls such that browsers can directly access dapps hosted on-chain). Anyone is free to run any gateway. You could do that already now and point your Gateway to the API endpoints on the existing Boundary Nodes. Ultimately, the Boundary Nodes today are VMs and you can start based on them.

-------------------------

infu | 2023-07-06 19:00:35 UTC | #42

Very interesting. I think a lot of developers will want to build gateways. @skilesare @borovan Would I be able to use my own hardware and run the new boundary nodes, I suppose using 4th gen Epyc processors so attestation works the same way? We will probably need some libraries to make everything easier.
I assume Dfinity boundary node hardware will be lean and use 16core and if someone wants to add a lot of gateways they should probably get higher spec.

-------------------------

rbirkner | 2023-07-06 19:21:36 UTC | #43

DFINITY will provide a reference implementation/image of the HTTP Gateway. Anyone can take it and run it 1:1 or use it as a starting point and modify it according to their needs.

We are also planning to run HTTP Gateways using TEE such that anyone can check that the gateway is actually running what it is supposed to run.

Since the Boundary Nodes are actually not doing much computation and simply forwarding requests to the IC, the hardware requirements are not that high.

-------------------------

ritvick | 2023-07-06 21:33:43 UTC | #44

I wonder what the benefits will be for the boundary node runner. Is this something actively been worked upon ?

Will it be a voluntary service or rewarded?

-------------------------

rbirkner | 2023-07-10 08:31:46 UTC | #45

Hi @CoolPineapple 

I just tried to update the initial post, but unfortunately, editing is only allowed for a certain and then the post is "frozen". So, I post my update here:

Here is the updated figure:
![Boundary Node Roadmap - NNS Managed (1)|690x331](upload://2aPWUXjwHuh1yr2wdzffnlDD2jG.png)

The important point is that the API Boundary Nodes are managed by the NNS and expose the Internet Computer API endpoints (`query`, `call`, read_state`, and `status`) as defined in [the Interface Specification](https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-call-overview). Anybody can run an application in front of these API Boundary Nodes. So far, we here at DFINITY have been focusing on HTTP gateways to enable browser access. However, there is room for many different gateways: for example, DNS gateways that allow hosting your DNS records on-chain ([see here for more information](https://forum.dfinity.org/t/technical-working-group-naming-system/21236)) or an SMTP/XMPP/MQTT gateway for emails/messaging. This just shows the versatility of the Internet Computer: through gateways ("adapters"), we can connect web2 to web3.

-------------------------

dfisher | 2023-08-20 19:06:27 UTC | #46

Hey Boundary Node Team,

What’s the latest update? Still targeting year end to roll out the new architecture?

-------------------------

rbirkner | 2023-08-21 14:58:34 UTC | #47

Hey everyone,

Thanks @dfisher for asking for updates. You picked the right moment as I have just been putting together a post with an update on the progress, the latest design choices, and an outlook of what is ahead.

__Context:__

As part of the long term R&D plan for the boundary nodes, which has been adopted by the NNS through [motion proposal #35671](https://dashboard.internetcomputer.org/proposal/35671), we are working on a new boundary node architecture to address decentralization. The new architecture splits today’s boundary nodes into API boundary nodes, which will be fully managed by the NNS like the Replica Nodes, and into HTTP Gateways, which will be operated by different entities.

We decided to first work on the API boundary nodes, while keeping today’s boundary nodes fully operational. Then, we will propose to the NNS to roll out the API boundary nodes. Once they stand the test, we will start rolling out the HTTP gateways and retiring today’s boundary nodes. As part of the roll out of the HTTP gateways, we will also provide a reference implementation that enables anyone in the community to run their own HTTP gateway with minimal effort.

__Progress:__

The team is currently fully focused on the API boundary nodes. The work is split into two main topics: (1) replacing nginx with a custom router, which we call ic-boundary, and (2) preparing the registry and the orchestrator to support the API boundary nodes.

_ic-boundary_

As part of the boundary node redesign, we decided to do away with nginx as it is just not made for our use-case. Up until now, we have simply added custom modules to enable our use-cases, which is far from ideal as we are still quite limited in what is supported and testing is complex.

Therefore, we decided to write our custom router, which handles all the API endpoints of the Internet Computer: status, query, call, and read_state. ic-boundary forwards all incoming requests to the right subnet and replica, and applies rate-limits where necessary. In the future, we intend to extend ic-boundary to also perform caching.

The team is close to finishing the first iteration of ic-boundary and we plan to extensively test it within the existing boundary nodes before proposing to deploy under the NNS.

_Preparing NNS-management_

In order to bring the API boundary nodes under the management of the NNS, we are working on creating the necessary records and tooling in the registry. We are close to being done with that.

To simplify operations, we suggest integrating ic-boundary directly into the existing replica nodes. Like that, a node can be either a Replica Node or an API boundary node. The orchestrator is checking in the registry whether it is assigned to a subnet or turned into an API boundary node, and starts then either the ic-replica or the ic-boundary binary. Following this approach, we can reuse a lot of the existing infrastructure and efforts.

__Outlook:__

We are planning to run production tests of ic-boundary in the coming month and afterwards start the work of integrating the API boundary nodes into the Internet Computer core. This will be a longer process as it involves many teams and the Node Providers.

We will keep you posted on the progress and are looking forward to your feedback!

-------------------------

ilbert | 2023-08-21 15:57:03 UTC | #48

Thanks for the update!
I have a couple of questions.

[quote="rbirkner, post:47, topic:15562"]
The orchestrator is checking in the registry whether it is assigned to a subnet or turned into an API boundary node, and starts then either the ic-replica or the ic-boundary binary.
[/quote]
In the case the node is turned into an API boundary node, how's its reward calculated?
Does this also mean that the same node hardware will be dedicated "only" for running the *ic-boundary* binary?

---
Also, in the scenario with multiple independent API Boundary Nodes, how does an HTTP choose the API boundary node to route the requests to?
How can I trust a service worker fetched from a third-party HTTP gateway?

-------------------------

dfisher | 2023-08-21 16:14:51 UTC | #49

Thanks so much for the update. Is it more realistic to think it will all be complete by the end of 2024?

-------------------------

rbirkner | 2023-08-22 08:54:55 UTC | #50

Hey @ilbert, 

You raise some very good points:

>In the case the node is turned into an API boundary node, how’s its reward calculated?

At the moment, node rewards are fixed and independent of whether a node is active in a subnet or waiting for its turn as unassigned node. Hence, there are quite some nodes that are unassigned and being rewarded. We propose to reuse several of them as API boundary nodes. That means that initially there will be no extra costs for the IC. In a later stage, we think it would be worthwhile to look at rewarding nodes according to the actual work done (i.e., requests served in the case of API boundary nodes).

> Does this also mean that the same node hardware will be dedicated “only” for running the *ic-boundary* binary?

Yes, initially, we propose to use unassigned nodes as API boundary nodes. It might seem like an overkill in terms of hardware, but as explained above, there are unassigned nodes, which are being rewarded and currently not used and in the future, the API boundary nodes should take on more and more responsibilities that might require "beefier" machines (e.g., running read-only replicas for edge caching). Also, it is important to note that our proposal to integrate _ic-boundary_ into the replica image doesn't mean that it needs to run on the same hardware as a replica. It just means that the qualification process and maintenance gets simpler, as we don't have to duplicate work.

> Also, in the scenario with multiple independent API Boundary Nodes, how does an HTTP choose the API boundary node to route the requests to?

This is a very good point: As part of the boundary node decentralization, we will provide a client-side library that discovers all API boundary nodes based on a seed and then routes the requests to one of these API boundary nodes.

> How can I trust a service worker fetched from a third-party HTTP gateway?

We have a project to use trusted execution for the HTTP gateways. This allows the user to attest first that the HTTP gateway is actually running the software it should be running. However, we can just provide that as a reference implementation. Whether third-parties use that is up to them. For "power-users", we have the [IC HTTP Proxy](https://github.com/dfinity/http-proxy) (currently, it is still a proof-of-concept, but works well), which runs the HTTP gateway protocol locally on your machine and directly connects to the API endpoints of the boundary node today, and to the API boundary nodes in the future. You don't need to trust anyone with the IC HTTP Proxy as you can verify its source code.

-------------------------

rbirkner | 2023-08-22 08:59:46 UTC | #51

Hey @dfisher, I am not very good at estimating, but end of 2024 seems a bit far far away and I would really hope we finish it much sooner. I see several "workpackages": creating ic-boundary and testing it, integrating ic-boundary into the existing replica, rolling out API boundary nodes, creating the client-side routing library, and creating the HTTP gateway reference implementation.

We are close to being done with the first to items: creating ic-boundary and testing it, and integrating ic-boundary into the existing replica.

The item that in my opinion will take the longest is rolling out the API boundary nodes. This is however mostly an operational task that involves node providers and the release team. The boundary node engineers can already focus on the other items.

-------------------------

Ozkangurhan | 2023-09-04 08:01:02 UTC | #52

[quote="rbirkner, post:50, topic:15562"]
At the moment, node rewards are fixed and independent of whether a node is active in a subnet or waiting for its turn as unassigned node. Hence, there are quite some nodes that are unassigned and being rewarded. We propose to reuse several of them as API boundary nodes. That means that initially there will be no extra costs for the IC. In a later stage, we think it would be worthwhile to look at rewarding nodes according to the actual work done (i.e., requests served in the case of API boundary nodes).
[/quote]

Any thoughts on how to adjust the current NP rewarding scheme accordingly?

-------------------------

rbirkner | 2023-09-05 07:52:48 UTC | #53

Hi @Ozkangurhan 
as we are initially proposing to use unassigned nodes as API boundary nodes, the rewards should stay the same. Once, we look into specific hardware for the API boundary nodes, we will start a discussion on the rewarding scheme along the lines of the existing node rewards.

-------------------------

josephgranata | 2023-09-11 17:14:03 UTC | #54

Noble goals for the boundary nodes for sure.

I wanted to add a request I made on the forum regarding the VPN Blocking that is happening via the Boundary Nodes. Here is an excerpt of what I wrote on the Forum:

> Could DFINITY disable VPN Blocking to the IC controlled domains enforced by the boundary nodes?
There are many good reasons for people to use VPNs, in Canada for example there are several recent restrictions on YouTube, and Social Media so people use VPNs to be able to access censored sources of news. Outside of Canada many use VPNs to avoid censorship regimes.

@sea-snake commented that probably the Boundary Nodes do the blocking to stop spam bots, which I can understand, but in that case a CAPTCHA could be used to verify that the person visiting is a human being and not a bot, or perhaps a login to II. As it stands now nothing works because the page is blocked completely, it does not work and a failed to load message is displayed.

Again, please consider this alternative to avoid blocking of legitimate users of VPNs.

Thanks!

P.S. As you might have guessed I am a concerned Canadian citizen.

-------------------------

rbirkner | 2023-09-11 18:13:11 UTC | #55

Hi @josephgranata 

I have replied in the original thread. Boundary nodes do not perform any VPN blocking or similar. It would be great if you could work with us to understand what is happening and to ultimately resolve it.

-------------------------

rbirkner | 2023-11-28 21:06:08 UTC | #56

Hello everyone,

I am excited to share some recent updates from the Boundary Node team.

**Progress:**

We've completed the development of our custom router `ic-boundary` and successfully integrated it into the existing boundary nodes. Currently, our focus is on finalizing everything necessary to put the API boundary nodes under the NNS.

*ic-boundary*

After extensive testing, we have deployed `ic-boundary` to all production boundary nodes. This means that all API requests (status, query, call, and read_state) are now handled by `ic-boundary`. The deployment has been smooth, and the robustness of the boundary nodes improved significantly. Previously encountered memory peaks with nginx, leading to occasional out-of-memory issues, have been resolved, resulting in stable memory consumption.

The decision to replace nginx with a custom router appears to be a successful one. This transition has also enabled us to implement highly requested improvements, such as automatic retries in case of errors from the replica. These enhancements will be rolled out in the upcoming days as we apply the final touches and address any remaining small bugs.

*Preparing NNS-management*

Our primary focus is on preparing for the deployment of the first NNS-managed API boundary nodes. However, there are a few projects we need to complete before achieving this milestone:

* *Orchestrator:* Collaborating with the consensus team, we are extending the orchestrator to start `ic-boundary` when a node becomes an API boundary node and properly shut it down if the node becomes unassigned. Additionally, we are enhancing the orchestrator's firewall service to apply the right configuration (i.e., open up HTTP(S) to the public) depending on the node type.
* *IPv4-enabled Nodes:* To ensure API boundary nodes can serve everyone, they require an IPv4 address. We are working with the node team on a general feature allowing any IC node to have an IPv4 address, making it suitable for API boundary nodes or inclusion in an IPv4-enabled subnet.
* *Discovery Library:* We are developing a library to assist IC clients in discovering existing API boundary nodes and routing their traffic to them. The library consists of two parts: discovery and routing. The discovery component involves obtaining a full list of API boundary nodes from the NNS in a certified manner, starting with a seed list. The routing component determines the optimal API boundary node from the list for directing all API requests. The library offers various ways to select a suitable node, such as any healthy node or the one with the lowest latency.

**Outlook:**

With the successful deployment of `ic-boundary` in the production boundary nodes, we are approaching the deployment of the first fully NNS-managed API boundary node. There are still a few items to address on our checklist, and we anticipate rolling them out early in 2024.

In the near future, we will begin exploring ic-gateway (working title), the counterpart of ic-boundary, implementing the HTTP gateway protocol and serving as the core of the HTTP gateways.

We will continue to keep you updated on our progress and look forward to hearing your feedback and addressing any questions you may have!

-------------------------

ilbert | 2023-11-29 09:30:01 UTC | #57

> In the near future, we will begin exploring ic-gateway (working title), the counterpart of ic-boundary, implementing the HTTP gateway protocol and serving as the core of the HTTP gateways.

Considering the IC infrastructure, where will the *ic-gateway* run?
Will it also be controlled by NNS?
Will it be possible to integrate an [ic-websocket-gateway](https://github.com/omnia-network/ic-websocket-gateway) inside it?

-------------------------

NathanosDev | 2023-11-29 11:43:11 UTC | #58

In the short term, we unfortunately don't have any way to host an HTTP Gateway in a decentralized way, due to how DNS and SSL certificates work.

So there will be gateways run on Dfinity infrastructure and community members will be free to host their own gateways, either specifically for their own canisters or as a general gateway that can serve any canister.

I think having different types of gateways working together would be awesome though, to make it very easy for someone to setup both an HTTP and WS gateway for their canister.

-------------------------

JaMarco | 2023-11-29 13:52:14 UTC | #59

[quote="NathanosDev, post:58, topic:15562"]
In the short term, we unfortunately don’t have any way to host an HTTP Gateway in a decentralized way, due to how DNS and SSL certificates work.
[/quote]
Is there are way the IC can make a decentralized DNS and CA/SSL?

-------------------------

ilbert | 2023-11-29 14:47:23 UTC | #60

[quote="NathanosDev, post:58, topic:15562"]
So there will be gateways run on Dfinity infrastructure and community members will be free to host their own gateways, either specifically for their own canisters or as a general gateway that can serve any canister.
[/quote]

So, I think something like what we proposed in:
https://forum.dfinity.org/t/proposal-enable-canisters-to-pay-in-icp-for-external-services/24459

would help in making the community able to spin up new gateways and pay for them directly from their canisters.

-------------------------

NathanosDev | 2023-11-29 15:21:39 UTC | #61

There's [CNS](https://forum.dfinity.org/t/technical-working-group-naming-system/21236) as an initiative to decentralize name resolution, and when the [local HTTP Proxy](https://forum.dfinity.org/t/try-out-the-ic-http-proxy-a-leap-towards-decentralized-http/20357) integrates with CNS, that would be an e2e decentralized solution.

This requires additional software to be installed on a user's computer though and we still need to cater for the scenario of a user encountering a Dapp on the IC without any pre-installed software. I think in the long run, having native browser integrations will be the best solution, but we're probably quite a bit away from that right now.

For CS/SSL, there's [DANE](https://en.wikipedia.org/wiki/DNS-based_Authentication_of_Named_Entities), which would work very well with CNS, but this would require browsers to support it.

-------------------------

NathanosDev | 2023-11-29 15:23:42 UTC | #62

I agree, something like this could be very cool! Without some kind of monetary incentive, it's hard to imagine that there would be many (if any at all) groups willing to run general gateways that would serve any canister. Without solving that problem, it would end up as Dfinity running a general gateway and a few dapps running their own individual gateways. If there's a monetary incentive, we can make the situation much more federated.

-------------------------

timo | 2023-12-08 08:40:06 UTC | #63

Are there still going to be or can there be community owned boundary nodes? Or are the NNS controlled boundary nodes replacing community owned ones?

-------------------------

rbirkner | 2023-12-08 11:47:13 UTC | #64

Hey @timo 

It depends on what you mean by a boundary node. At a high level, today's boundary nodes consist of two parts: the API endpoints (`query`/`call`/`status`/`read_state`) and the HTTP gateway (which translates browser requests to API calls).

The API boundary node will only handle the API endpoints. These nodes form the edge of the IC and mostly take care of routing the API calls to the right replica nodes. These API boundary nodes will be handled the same way as replicas today: nodes are provided by node providers and the NNS decides, which node will be turned into an API boundary node and what version it runs.

The HTTP gateway (and many other gateways) are like an additional layer around the IC that translate one protocol into API calls. These gateways will be community operated. Our goal is to provide a HTTP gateway reference implementation that can then be run in different forms (e.g., as a container, VM, or as a Cloudflare worker).

Does that answer your question?

-------------------------

ritvick | 2023-12-10 01:12:11 UTC | #65

Is there an earlier version which we can get our hands on ?

We would like to do a POC to read on-chain data at a very high frequency with zero downtime or timeouts.

-------------------------

tomvictor | 2023-12-31 20:41:45 UTC | #66

Hi Boundary Node and Gateway Team,

I wonder is there any possibility of writing custom TCP based protocols in the ICP echo system. What all are the options currently to send/receive sensor data from IoT devices. Where should I start if I want to implement a MQTT on the ICP? Or is this a too high expectation now :slight_smile: 

Thanks

-------------------------

Metaicp | 2023-12-31 21:25:26 UTC | #67

Sorry new to this forum. How can I run a node? Do I need to hold ICP to run a node?

-------------------------

rbirkner | 2024-01-04 09:43:27 UTC | #68

Hi @tomvictor 

At the moment, you would have to create a gateway, some external service that translates between whatever protocol you want and the IC API.

The guys from Omnia Networks (@massimoalbarello and @ilbert) have built a websocket gateway and are interested in IoT as well. It's probably good to chat with them. They have a [discord server here](https://discord.com/invite/yBaGTkSvZ8).

-------------------------

rbirkner | 2024-01-04 09:44:27 UTC | #69

Hey @Metaicp 

You can find more information about becoming a node provider on the [Internet Computer Wiki](https://wiki.internetcomputer.org/wiki/Node_Provider_Documentation).

-------------------------

hshadab | 2024-01-04 17:45:56 UTC | #70

See https://www.google.com/search?q=how+to+become+an+icp+node+provider&oq=how+to+become+an+icp+node+provider&gs_lcrp=EgZjaHJvbWUyBggAEEUYOTIHCAEQIRigAdIBCDQ5NzRqMGo3qAIAsAIA&sourceid=chrome&ie=UTF-8

-------------------------

daijianlin | 2024-01-19 07:10:23 UTC | #71

Hey, the trading of NFTs are very slow for years (on entrepot.app), I was talked that's because there are very limited boundary nodes, is it? Can you guys solve the slow issue asap?

-------------------------

rbirkner | 2024-01-19 08:13:38 UTC | #72

Hello @daijianlin 

I replied in your original thread: https://forum.dfinity.org/t/trading-is-very-slow-is-it-the-issue-of-limited-boundary-nodes/26805/2

-------------------------

HomerShillson | 2024-02-04 11:31:10 UTC | #73

Whats up to date? Boundary nodes once again not sustain traffic when motoko claim happened. What is on the roadmap to make them more resilient when high traffic happens on the boundary nodes?

-------------------------

lastmjs | 2024-03-05 15:13:27 UTC | #74

What is the latest on the boundary node roadmap? Has the distinction between HTTP Gateway and API node been fully realized? Can community members now independently run an HTTP Gateway?

-------------------------

rbirkner | 2024-03-06 10:16:35 UTC | #75

Hello everyone,

Thanks @lastmjs for reminding me to provide an update. It has been long overdue :)

**Progress:**

The beginning of the year looked a bit different than planned. Due to (or rather thanks to) periods of increased load on the boundary nodes, we dedicated significant effort on improving the current boundary nodes, eliminating bottlenecks, and tackling tech debt.

Besides that, we have been working on the decentralization of the boundary node: the API boundary nodes.

*Boundary Node Performance*

As many of you might have noticed, there were multiple instances in the past two months during which the boundary nodes reached capacity. While this underscores the popularity of the IC, it's detrimental to user experience.

Step-by-step, we improved the boundary nodes and removed a lot of tech debt. I will just highlight a few examples here:

* Switched all boundary node internal communication from TCP sockets to UNIX sockets (e.g., nginx to icx-proxy, or nginx to ic-boundary).
* Improved our logging infrastructure to use less CPU.
* Eliminated all njs-modules in nginx (Yes, nginx supports JavaScript and they are inefficient).

At the moment, we are in the process of benchmarking the boundary nodes to better quantify the improvements. We will post an update once that is done.

*Preparing for the API BN rollout*

Besides the performance improvements, we have been continuously working on the boundary node decentralization. I am happy to report that almost all work is done and we are getting closer to making an NNS proposal to deploy the first API boundary node.

* *IPv4-enabled Nodes:* The code is complete and released. The first node providers have already onboarded node machines with IPv4 addresses assigned. The focus is now on the rollout and we are encouraging all node providers to add IPv4 support to some of their nodes.

* *Discovery Library:* All the code to enable clients to discover all API boundary nodes in a certified manner has been merged and is in the process of being rolled out. This will most likely be fully functional with the next replica and agent release (for now only agent-rs).

* *Orchestrator:* We are currently working on wrapping things up. The last bigger work item is the configuration of the firewall.

*HTTP Gateway*

As we are nearing the rollout of the API boundary nodes, we are starting to pick up the work on the HTTP gateway. The goal is to build one binary, similar to `ic-boundary`. However, to get something “working” as fast as possible, we are at the moment working on an “interim” HTTP gateway. This will come in the form of a docker container, which is easily deployable, allowing anyone to run their own HTTP gateway.

**Outlook:**

We have a few tasks left before the first API boundary nodes can be deployed under the management of the NNS. Once that is done, we will shift our focus to building the HTTP gateway, `ic-gateway`.

We will continue to keep you updated on our progress and look forward to hearing your feedback and addressing any questions you may have!

-------------------------

massimoalbarello | 2024-03-06 13:32:34 UTC | #76

Looking forward to the HTTP gateway image!

How many replicas are you proposing to turn into API Boundary Nodes?

-------------------------

rbirkner | 2024-03-06 14:44:38 UTC | #77

We don't have a clear number yet, but most likely in the same order as we have boundary nodes today and then adapt that according to the needs.

-------------------------

w3tester | 2024-04-18 09:12:03 UTC | #78

The IPv4 function is pretty important for us. Could you please elaborate how our canister can access the IPv4 boundary nodes?

-------------------------

rbirkner | 2024-04-19 07:17:06 UTC | #79

Hey @w3tester 

What is your use-case and what do you mean with "how our canister can access the IPv4 boundary nodes". IPv4 on the API boundary nodes is only used for incoming connections (i.e., clients can connect to the IC using IPv4). If you are thinking about HTTP outcalls with IPv4, then this will not (yet?) be enabled by the API boundary nodes.

-------------------------

w3tester | 2024-04-19 07:33:26 UTC | #80

Hello @rbirkner, our use case is to pull twitter API data within a canister. They only support IPv4 access atm. It seems this update will not help us then...

-------------------------

rbirkner | 2024-05-29 16:02:28 UTC | #81

Hello everyone,

It's time for another update from the boundary nodes team. With the new [roadmap](https://internetcomputer.org/roadmap), boundary nodes have their own milestone: "SOLENOID." This milestone encompasses the new boundary node architecture and its building blocks. Here’s where we stand today:

**Progress:**

*First API Boundary Node Incoming*

Most aspects of the API boundary nodes are complete. `ic-boundary` has been running in production for over six months, there are enough nodes with IPv4 connectivity, and the integration into the NNS and guestOS is finished. We just have some final touches left and are awaiting the final green light from the security review.

Once approved, we will propose adding firewall rules to allow metric and log scraping, followed by a proposal to deploy the first node. We aim to complete this in June, so keep an eye out for the proposal and be ready to vote!

*Discovery Library*

We are finalizing the implementation of the discovery library and gradually integrating it into agent-rs. This library is crucial for all IC-native clients that need to communicate directly with the API boundary nodes. For example, the HTTP gateway will be a key user of this library.

*`ic-gateway`*

We have made significant progress on the HTTP gateway core service. After some testing, we plan to integrate it into the current boundary nodes to "battle-test" it and gather insights just as we did with `ic-boundary`. Gradually, we will transition to the new HTTP gateways and retire the existing boundary nodes.

We will continue to keep you updated on our progress. We look forward to your feedback and are here to address any questions you may have!

-------------------------

rbirkner | 2024-06-07 10:43:42 UTC | #82

Crossposting for completeness :slight_smile: :
https://forum.dfinity.org/t/deploying-the-first-api-boundary-nodes/31629/

-------------------------

nikolay.komarevskiy | 2024-06-20 12:27:27 UTC | #83

We are thrilled to announce that the decentralization steps within [the SOLENOID milestone](https://internetcomputer.org/roadmap#Platform%20Decentralization-Solenoid) are making steady progress. With the adoption of the [proposal 130337](https://dashboard.internetcomputer.org/proposal/130337), the first two API boundary nodes (API BNs) came up live under the management of the NNS and became an integral part of the protocol. Now for the first time ever, IC clients can route their API canister calls directly through these nodes.

While this marks the first big step of the SOLENOID milestone, we are still in the early stages. Below we explain how one can discover the API BNs and send http requests through them.

**How can I discover existing API Boundary Nodes?**

As API BNs are now part of the IC, they are [marked in the registry](https://sourcegraph.com/github.com/dfinity/ic/-/blob/rs/protobuf/def/registry/api_boundary_node/v1/api_boundary_node.proto?L5) canister and are also exposed in the [system state tree](https://internetcomputer.org/docs/current/references/ic-interface-spec#state-tree-api-bn). The [following example](https://sourcegraph.com/github.com/dfinity/ic/-/blob/rs/boundary_node/discower_bowndary/examples/fetch_api_bns.rs) in Rust allows to fetch all existing API boundary nodes:

```
/ic$ cargo run --bin fetch_api_bns ic0.app

API Boundary Nodes in the State Tree: [
    ApiBoundaryNode {
        domain: "br1-dll01.aviatelabs.co",
        ipv6_address: "2001:920:401a:1710:6801:94ff:fe18:6b54",
        ipv4_address: Some(
            "213.246.205.106",
        ),
    },
    ApiBoundaryNode {
        domain: "bc1-dll02.blockchaindevlabs.com",
        ipv6_address: "2001:438:8000:1d:6801:c1ff:feac:bc9",
        ipv4_address: Some(
            "208.184.66.5",
        ),
    },
]
```
Internally a read state call to `https://ic0.app/api/v2/subnet/subnet_id/read_state` is made asking for the path `/api_boundary_nodes` in the state tree. All API BNs with their domain names, IPv6 addresses and optional IPv4 addresses are listed under this path.

In the following, we show how one can make use of this information and send requests to an API BN directly.

**What can I do with these API boundary nodes?**

Now as we've discovered the current set of API BNs, we can send API canister calls directly to the IC, thus avoiding the centralized DNS-based routing via `ic0.app`. Run the previous example with an API BN domain name instead:
```
/ic$ cargo run --bin fetch_api_bns br1-dll01.aviatelabs.co
```
The response should of course remain identical. However, now we talk to the IC directly via one of the API BNs `https://br1-dll01.aviatelabs.co/api/v2/subnet/subnet_id/read_state`.

**What’s next?**
Soon we’ll extend [agent-rs](https://github.com/dfinity/agent-rs) with the ability to automatically discover API BNs and dynamically route traffic to them based on some predefined strategies (e.g., minimizing latency). This would mark another important step towards decentralization.

-------------------------

icarus | 2024-06-20 09:40:23 UTC | #84

Excellent news!
 There is a lot more to say in the way of praise and encouragement and forward planning but "excellent" will do for now 🙂

-------------------------

ilbert | 2024-06-23 08:48:54 UTC | #85

This is exciting!

However, I'm having some issues with communicating with one of the API BNs.

[quote="nikolay.komarevskiy, post:83, topic:15562"]
`/ic$ cargo run --bin fetch_api_bns br1-dll01.aviatelabs.co`
[/quote]
This command works fine, returning the result after ~2 seconds.

[quote="nikolay.komarevskiy, post:83, topic:15562"]
`/ic$ cargo run --bin fetch_api_bns br1-dll01.aviatelabs.co`
[/quote]
This command instead, after ~10 seconds, returns:
```bash
Error: An error happened during communication with the replica: error sending request for url (https://br1-dll01.aviatelabs.co/api/v2/status)
```

Although, this command works, returning the result after ~2 seconds:
```bash
/ic$ cargo run --bin fetch_api_bns bc1-dll02.blockchaindevlabs.com
```

So, I believe there's something that doesn't work properly on the API BN at `br1-dll01.aviatelabs.co`.

-------------------------

rbirkner | 2024-06-23 09:29:18 UTC | #86

Hey Luca,

yes, the one node unfortunately is having some issues (unrelated to being an API boundary node). You can see the status here: https://dashboard.internetcomputer.org/node/ag4ro-4ihpg-ozp6d-lbwac-5pksl-3wany-aaayw-ibvuw-uh7wj-lbav5-qae

We have already submitted a proposal to remove this node [here](https://dashboard.internetcomputer.org/proposal/130711) and another proposal to add two more API boundary nodes ([here](https://dashboard.internetcomputer.org/proposal/130714)).

Sorry for the hiccups.

-------------------------

nikolay.komarevskiy | 2024-06-24 06:35:15 UTC | #87

Hey Luca and thanks for your message! In the world of decentralized API boundary nodes, the health of each individual node is indeed the responsibility of the respective node provider. This time, you encountered an unhealthy node by interacting with it directly. In the near future we'll extend the [agent-rs](https://github.com/dfinity/agent-rs) to route traffic through all dynamically discovered API BNs. The `agent` will also monitor API BNs health and select the node with minimal latency, thus substantially reducing the probability of dispatching requests to unhealthy nodes. If a request for a certain node still fails by some reason, the `agent` will automatically retry it with another node, ensuring an overall smooth user experience.

-------------------------

rbirkner | 2024-08-16 12:04:37 UTC | #88

Hello everyone,

Right before the end of the week, we are back with some news from the boundary node team.

**Progress:**

*API Boundary Nodes*

Since the beginning of June, we have now several API boundary nodes running on mainnet. So far, they have not received much traffic because everything is still routed through the “old” boundary nodes, but that will change. We have mostly just made sure everything runs smoothly: the API boundary nodes come up healthy, they automatically obtain the necessary certificates from Let’s Encrypt and successfully route the traffic. Also, they have already undergone several upgrades.

*Discovery Library*

The implementation of the discovery library has been wrapped up and we are close to integrating it into agent-rs (here you can find the [feature branch](https://github.com/dfinity/agent-rs/tree/dynamic_route)). We have already been testing it ourselves and had no issues so far.

*HTTP Gateway*

Probably the biggest news is the open sourcing of `ic-gateway`, the core service of the HTTP gateways. You can find the code in the [dfinity/ic-gateway repository](https://github.com/dfinity/ic-gateway). This marks again a major milestone in our work towards the new boundary node architecture. As of now, we are not yet working on “stand-alone” HTTP gateways, but we have replaced `nginx` and `icx-proxy` with `ic-gateway` in the old boundary nodes (see the [following PR for details](https://github.com/dfinity/ic/pull/342)). We have had a canary out for testing for almost two weeks now (see the forum post) and we are gradually switching traffic over to the `ic-gateway` boundary nodes.

**Outlook:**

As we are getting closer to having all the pieces of the new boundary node architecture in place, we are focusing on getting it ready for production by making sure we have all the monitoring, all the dashboards, all the alerts set up and also have the necessary processes for disaster recovery in place.

We will continue to keep you updated on our progress and look forward to hearing your feedback and addressing any questions you may have!

-------------------------

