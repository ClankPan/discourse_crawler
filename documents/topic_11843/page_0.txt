AnonymousCoder | 2022-04-01 21:43:44 UTC | #1

Hello!

I've been thinking about this for some time now and have come to some conclusion (which I yet need to test out and see if it works the way I imagined it to), but I am not sure if it's the only and / or best way to do so and would like your opinion on it.

I would like to have an app that is able to allow users to purchase whatever (let's say NFT's) that are listed for sale. But I did not find any other way of possibly doing so right now than using a combination of the following (this is my current plan):
1. Through javascript, there would be a call made to ledger canister (i have one deployed locally for testing) by importing a ledger canister, then calling it's `send_dfx` method to transfer funds to my smart contract canister (ie: user sends ICP to my smart contract canister by calling ledger canister directly)
2. If that call was a success (this would need to be checked in JS I guess after the async method is completed) I can then make another call to the ledger canister to notify it of the transfer so that it invokes the `transaction_notification` method in my canister (to which the user has sent the payment in step 1). In that method in my SC i would then do checks to see if the address matches the user's address, price matches token price etc.. Then, I would send him the item he bought

Is this the way to do this (the only / best way currently) ? Are there any drawbacks to this method (other than if a user leaves the page before the second when the call to ledger notify method is made) ?

Or is there something a lot more simple that would allow me to do what I want?

-------------------------

jzxchiang | 2022-04-02 00:21:31 UTC | #2

I think @kpeacock was working on something related to this.

-------------------------

AnonymousCoder | 2022-04-02 08:16:08 UTC | #3

Thank you :) I hope he gets to see this eventually and posts his own thoughts or solution :) In the meantime, there must be a way people are currently doing this, as there  are services like Entrepot for example which already have this implemented

-------------------------

AnonymousCoder | 2022-04-03 16:47:01 UTC | #4

bump to see if anyone has anything more to add.

-------------------------

skilesare | 2022-04-03 17:02:30 UTC | #5

Send_dfx to the canister, then have a deposit function that takes a block and processes the payment. Add the block to a tracker so it can’t be used again, Check the block, make sure it matches the deposit, then credit the user for the payment and take action. If it didn’t match, remove the block from the tracker.

-------------------------

AnonymousCoder | 2022-04-03 18:12:22 UTC | #6

Alright, so pretty much what I had in plan already then? Is there a need to send a second tx to ledger from the client to trigger the `transaction_notification` in my canister where I would handle fulfillment logic (ie sending NFT to the user), or would just a callback once a successful async call to ledger for `send_dfx` was made do? Is it safe to assume a tx was successful if a call to `send_dfx` was made, so we could go straight to a method in the canister that assigns whatever has been bought to the user, or is that vulnerable if not checked in `transaction_notification` hook callback?

Thank you very much for this, I really appreciate it ! :) Needed to get a confirmation from someone who has done it or tested it like yourself to be sure it's the way to go!

-------------------------

skilesare | 2022-04-04 16:29:51 UTC | #7

The issue with notify was that a malicious canister could hang your ledger by never returning a value. Thus it is being deprecated.  get_block has a similar ddos vector, but at least the attacker has to pay cycles for it. I would not assume that your send_dfx works perfectly. Check the block and make sure.

Some of the checking logic can be found at https://github.com/aramakme/aramakme_nft_auction/blob/f0ca7fb629814dc24a90ad84c7d024a49390e38b/main.mo#L1142. <- uses a proxy canister to check blocks because it used to(maybe still is) only available to protobuff

-------------------------

kpeacock | 2022-04-04 16:58:57 UTC | #8

My solution is mostly done - we haven't announced it yet as I resolve some final security / scaling considerations, but that's what I'll be working on this sprint! News should be coming before much longer

-------------------------

AnonymousCoder | 2022-04-04 17:40:15 UTC | #9

Thank you both for providing help on this matter :) It gives me something to work with until @kpeacock is done with his solution (which I hope would perhaps provide a more streamlined approach and ease up this kind of app flow).

-------------------------

simdi.jinkins | 2022-05-30 14:54:20 UTC | #10

Hey @kpeacock  was wondering how your solution looks currently ? Working on ICP payments too.

-------------------------

AnonymousCoder | 2022-05-30 15:39:31 UTC | #11

If I am correctly informed, it got dropped unfortunately and the replacement for it will come out only some time in 2023...

-------------------------

simdi.jinkins | 2022-05-30 16:02:07 UTC | #12

Wow, you know why that happened ?

-------------------------

AnonymousCoder | 2022-05-30 16:05:14 UTC | #13

I believe they said that "it's not as important as other things" and pushed it further away down the backlog.

-------------------------

simdi.jinkins | 2022-05-30 16:11:27 UTC | #14

Thanks, how did you solve this at the end ?

-------------------------

AnonymousCoder | 2022-05-30 16:12:04 UTC | #15

I didn't yet. But I think the only way (or the best way) of doing it is what I had in mind initially.

-------------------------

Severin | 2022-05-31 06:31:26 UTC | #16

[quote="simdi.jinkins, post:12, topic:11843, full:true"]
Wow, you know why that happened ?
[/quote]

https://forum.dfinity.org/t/payments-invoice-canister-design-review/9843/47

-------------------------

paulyoung | 2022-05-31 08:36:38 UTC | #17

Cross-posting…

https://forum.dfinity.org/t/payments-invoice-canister-design-review/9843/48?u=paulyoung

-------------------------

