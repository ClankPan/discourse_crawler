senior.joinu | 2021-05-25 19:29:39 UTC | #1

Let's say I have two `Nat`s: `A` and `B`
By definition `A` is always bigger than `B`

How can I calculate `X: float32` which is `B / A`?

-------------------------

chenyan | 2021-05-25 19:35:00 UTC | #2

Motoko doesn't have `float32`, only `Float`, which is 64-bit.
```
import Float "mo:base/Float";
Float.fromInt(B) / Float.fromInt(A)
```
`fromInt` works for `Nat`, because `Nat` is a subtype of `Int`.

-------------------------

senior.joinu | 2021-05-25 19:36:35 UTC | #3

Yea... sorry for misleading. I'm looking for a rust solution.

Thanks for your answer!

-------------------------

senior.joinu | 2021-05-25 19:47:09 UTC | #4

Will something like this work?
```rust
use num_traits::ToPrimitive;
...
result.0.to_f32();
```

UPD: no it won't :frowning:

-------------------------

senior.joinu | 2021-05-25 19:47:50 UTC | #5

I've figured out your example won't work also if `A` and `B` are both bigger than 64 bits.

-------------------------

chenyan | 2021-05-25 20:35:11 UTC | #6

Yes, but since you are losing precision anyway, you can truncate `Nat` to 64 bits before converting to `Float`.

For Rust, you may need infinite precision fraction as well, for example https://docs.rs/fraction/0.8.0/fraction/

You can also decode a Candid `Nat` to `u128` in Rust (decoding will fail if the value is more than 128bit). Might be easier to convert u128 to f32.

-------------------------

