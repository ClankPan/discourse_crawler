marcpp | 2024-06-17 18:33:13 UTC | #1

Hi all,

Here's what I'm planning to do for my subscription-based app.

- User A wants to subscribe to the app
- User A clicks on "Subscribe"
- This calls the `icrc2_approve` method, giving approval to canister C to transfer on behalf of user A
- Monthly, canister C transfers the subscription amount from A to the app vault (user B?)

Does this sound ok?

Here's where I'm a bit puzzled:

1/ Giving approval to a canister feels weird because: can't the canister principal change ? I'm guessing the principal doesn't change upon being upgraded, but what if for instance at some point I want to split my canister into 2 for technical reasons. That would require me to destroy my canister and recreate new ones. I would then lose all the approvals !

2/ Also, what's the best way to get a canister's principal? Can this be done from the canister id ?

Any help appreciated :) 

Cheers!

-------------------------

b3hr4d | 2024-06-17 22:01:14 UTC | #2

Hi,

Your plan for the subscription-based app seems solid. Here are a couple of suggestions based on your questions:

1) You can create a Ledger Canister to handle all approval and transfer operations. This way, your other canisters can verify transaction correctness and provide services based on the user principal interacting with your application.

2) To get a canister's principal, you can use on rust `ic_cdk::id()` inside your canister logic, and for Motoko follow this [post](https://forum.dfinity.org/t/how-to-get-the-canister-identifier-in-the-motoko-code/2195).

-------------------------

Severin | 2024-06-18 07:41:18 UTC | #3

[quote="marcpp, post:1, topic:32068"]
what’s the best way to get a canister’s principal? Can this be done from the canister id ?
[/quote]

'canister id' and 'canister principal' are synonyms. The ID is the principal

-------------------------

marcpp | 2024-06-18 07:45:15 UTC | #4

Noted :+1: 

What about this:
[quote="marcpp, post:1, topic:32068"]
what if for instance at some point I want to split my canister into 2 for technical reasons. That would require me to destroy my canister and recreate new ones. I would then lose all the approvals !
[/quote]
Any workaround?
If I build an app for the next 10 years, how can I know I won't have to change its canister id..?

-------------------------

Severin | 2024-06-18 07:48:52 UTC | #5

You can't be sure. But if you use @b3hr4d's suggestion and create a minimal canister that is only responsible for proxying ledger calls it can always be done with that canister's principal. The other option is if you have to split your canisters to split in such a way that the canister that does ledger calls will stay in the same ID

-------------------------

marcpp | 2024-06-18 19:47:26 UTC | #6

Thanks @b3hr4d and @Severin. As you guys suggested, I split my backend canister into 2, with 1 canister specifically for handling approvals and transfers. It feels much cleaner and it lowers the chances of having to split even further.

-------------------------

