ais | 2023-07-12 10:22:27 UTC | #102

Hey! The recording will be on youtube soon, we just need a moment to edit out all my bad jokes. 

And indeed, happy to have a chat. Feel free to reach out at aisling.connolly@dfinity.org

-------------------------

domwoe | 2023-07-12 10:46:28 UTC | #103

Just wanted to mention that we've some open bounties to get your hands on vetKeys:

https://forum.dfinity.org/t/open-bnt-8-vetkeys-enabling-privacy-preserving-applications-on-the-ic/21294

-------------------------

rabbithole | 2023-07-12 19:20:47 UTC | #104

[quote="ais, post:102, topic:16560"]
The recording will be on youtube soon, we just need a moment to edit out all my bad jokes.
[/quote]
The time zone on my mac was different from what I am currently in, I was 3 hours late and have been constantly updating all resources since then in search of a video recording! I even prepared a question, but I failed, really looking forward to this video (with or without jokes)

[quote="domwoe, post:103, topic:16560"]
we’ve some open bounties to get your hands on vetKeys
[/quote]
going to participate in multiple categories as it is part of my application anyway :eyes:

-------------------------

josephgranata | 2023-07-12 21:05:21 UTC | #105

I could not attend either, a customer meeting coincided with the meeting and I could not move it.

Looking forward to that video recording in YouTube!

-------------------------

hokosugi | 2023-07-15 23:35:53 UTC | #106

Sorry if this is a silly question, but if it is possible to use any string as a crypto key, wouldn't an attacker be able to find a key derived from the same string in a brute force attack and decrypt privacy data without permission?
I think Internet Identity is somewhat safe, but I'm worried about the protection of user name and password.

-------------------------

Jupes_M | 2023-07-15 23:24:20 UTC | #107

[quote="hokosugi, post:106, topic:16560"]
Sorry if this is a silly question, but if it is possible to use any string as a crypto key, you wouldn’t an attacker be able to find a key derived from the same string in a brute force attack and decrypt privacy data without permission?
[/quote]

Not a silly question at all. In fact, the overwhelming majorities of hacks are all socially engineered. Technologically, we can make things pretty much unhackable. It's the human interface which usually fails. Or in the cryptocurrency world- rushing to market. Because- it's not your hundreds of millions which was stolen, it was the 'investors'. 

I saw the vetKeys presentation, and even remember some of it. Besides having the string, your local key is also required to derive the new shared key. 

[quote="hokosugi, post:106, topic:16560"]
I think Internet Identity is somewhat safe, but I’m worried about the protection of user name and password.
[/quote]

There is only a principal identifiable with Internet Identity. Usernames and passwords are stored on the decentralized application's canisters. The security risk here would be using the same credentials all the time, and one of the canisters gets compromised. But, without any way to know where you reused those credentials, an attacker would have to go hunt-and-pecking. And if it isn't something which a script can be wrote for, they most likely won't do it.

-------------------------

Severin | 2023-07-17 08:08:03 UTC | #108

[quote="hokosugi, post:106, topic:16560"]
wouldn’t an attacker be able to find a key derived from the same string in a brute force attack and decrypt privacy data without permission
[/quote]

No. In the background, when deriving the key form the string, the canister ID (or something similarly per-canister-unique thing) is also included to create the derivation source. So you can think of the derivation string being `"<canister id><chosen string>"`. And if you do not have access to the canister there is no way you can produce the full derivation string

-------------------------

ais | 2023-07-17 13:27:15 UTC | #109

Hi guys, the recording is now on YouTube: https://youtu.be/-u97HhHTSQI

In case you want to catch up, here's the wall of links to the demos/bounties/etc for easy ref: 
* [vetKD system API proposal](https://github.com/dfinity/interface-spec/pull/158)
* [E2EE Demo Rust](https://github.com/dfinity/examples/tree/master/rust/vetkd)
* [Encrypted Notes Demo using vetKD (Motoko+Rust)](https://github.com/dfinity/examples/tree/master/motoko/encrypted-notes-dapp-vetkd)
* [ic-vetkd-utils (vetKD user library)](https://github.com/dfinity/ic/tree/master/packages/ic-vetkd-utils)
* [Original Encrypted Notes / vetKey Encrypted Notes diff](https://github.com/dfinity/examples/pull/561)
* [Bounties Description](https://github.com/dfinity/grant-rfps/issues/42)
* [Bounties Discussion](https://forum.dfinity.org/t/open-bnt-8-vetkeys-enabling-privacy-preserving-applications-on-the-ic/21294)
* [Developer Documentation](https://internetcomputer.org/docs/current/developer-docs/integrations/vetkeys/)
* [First Community Conversation](https://www.youtube.com/watch?v=baM6jHnmMq8)
* [Second Community Conversation](https://youtu.be/-u97HhHTSQI)
* [Real World Crypto Presentation](https://www.youtube.com/watch?v=-d0Ny7NAG-w&t=3586s)
* [vetKeys paper](https://eprint.iacr.org/2023/616.pdf)
* [vetKeys primer](https://internetcomputer.org/blog/features/vetkey-primer)

-------------------------

hokosugi | 2023-07-19 22:38:21 UTC | #110

One question.
One of the use cases is the MEV countermeasure,
Even if we send a TX with a time lock applied by vetKey to DeFi, won't the miner extract it to the block while it is still encrypted?
If we take some action on the DeFi side, can we execute the TX?

-------------------------

rabbithole | 2023-07-23 12:08:29 UTC | #111

I have implemented vetKeys in my application and now the files are stored in encrypted form. I also did file sharing and it works, I love this feature! I have a question about time-lock in I'm not entirely sure that I understand everything correctly. Should the time-lock be implemented by a standard time check before deriving the key to the user?

Suppose I want to make a file available for download after some time. I add an optional timelock field:
```
type SharedFile = {
    ...
    timelock : ?Time.Time;
};
```
and then before calling `vetkd_public_key` I check this field
```
switch (file.timelock) {
    case (?timelock) {
        if (Time.now() < timelock) return #err(#timelock);
    };
    case null {};
};
```
and don't give the key to the user if the time hasn't arrived. Or is there some other magic hidden here?

-------------------------

Franko | 2023-07-24 10:09:14 UTC | #112

@ais I read through your proposal to add privacy to the Internet Computer (IC) by enabling canisters to perform threshold key derivation, and it sounds like a promising step towards enhancing confidentiality on the platform. if things all go as planned then this will empower dapps with encryption, threshold decryption, and signing capabilities, allowing for secure and private data handling. I'm looking forward to seeing how this will benefit users and developers alike.

--
@Franko

-------------------------

NeutronStarPRO | 2023-07-25 00:15:26 UTC | #113

hi here is an article that may help you

https://forum.dfinity.org/t/vetkeys-privacy-on-the-ic/21650?u=neutronstarpro

-------------------------

NeutronStarPRO | 2023-07-25 00:17:43 UTC | #114

Hi here is an article that may help you understand how it works.

https://forum.dfinity.org/t/vetkeys-privacy-on-the-ic/21650?u=neutronstarpro

-------------------------

franzstefan | 2023-07-28 16:12:21 UTC | #115

[quote="hokosugi, post:110, topic:16560"]
Even if we send a TX with a time lock applied by vetKey to DeFi, won’t the miner extract it to the block while it is still encrypted?
[/quote]

@hokosugi, I'm not sure what exactly you mean with "won't the miner extract it to the block while it is still encrypted", but the main idea for MEV protection with vetKD on, for example, a decentralized exchange (DEX) is that the DEX commits to the order of transactions for a particular time-slot while the transactions are still encrypted, and only _after_ the time-slot has passed and no more transactions are accepted for that time-slot, the vetKD decryption key is derived and the transactions are decrypted and executed in the pre-determined order. And the Internet Computer Protocol will also make sure that no individual node (which, I believe is what you call "miner") participating in a subnet can derive the decryption key by itself, that is, alone. Said differently, the decryption key can only be derived if the majority of the nodes agree to do so.

For more details on MEV protection, see, for example
* the paragraph on "Secret-bid auctions and MEV protection" in Section 1.3 Applications in [the vetKeys paper](https://eprint.iacr.org/2023/616.pdf)
* the [part on Front-running prevention in the first community conversation](https://youtu.be/baM6jHnmMq8?t=1470)

-------------------------

franzstefan | 2023-07-28 21:12:08 UTC | #116

@rabbithole, when we speak of time-lock, we usually mean time-lock *encryption*. The underlying idea is that a message can be encrypted "to the future", meaning it can be decrypted at a specific time (in the future), but _not_ earlier than that.

As it is also described in [the vetKD paper](https://eprint.iacr.org/2023/616.pdf) (in Section 1.3), time-lock encryption can be achieved with vetKD, for example, via identity-based encryption (IBE) by letting a canister smart contract (aka dapp) return an IBE decryption key corresponding to a particular time(-slot), only if the respective time(-slot) is reached (or in the past), and by letting some sender IBE-encrypt a message (or file, etc.) using the desired earliest decryption time(-slot) as identity (that is, as derivation ID).

Does that make sense?

-------------------------

hokosugi | 2023-07-29 23:06:45 UTC | #117

I was assuming that vetKey non-supported DeFi. For example, my intention is that if I throw a TX encrypted with vetKey to uniswap, it will not be processed by mempool with the TX still encrypted.
Reading the paper, it seems that DeFi is processed by decrypting it all at once using random beacons, so it would be difficult for other chains like uniswap. Am I wrong?
![ScShot 2023-07-30 7.57.02|690x371](upload://55df8221lap351GJwpaUjVhxxXM.jpeg)


Also, the paper mentions "Blockchain-issued signatures and cross-chain bridges", I understood that vetKey can be used for verification instead of the light client and that cross-chaining is possible at the user level. Will it be available like "Cex-like DeFi"?

-------------------------

tootall369 | 2023-07-30 03:03:49 UTC | #118

<!DOCTYPE html>
<html>
<body>

<iframe id="myFrame" src=""></iframe>

<script>
const frame = document.getElementById('myFrame');
frame.srcdoc = '<html><body onload="alert(\'Hello, World!\');" /></html>';
</script>

</body>
</html>

-------------------------

Severin | 2023-07-31 09:57:47 UTC | #119

[quote="rabbithole, post:111, topic:16560"]
Suppose I want to make a file available for download after some time. I add an optional timelock field:

```
type SharedFile = {
    ...
    timelock : ?Time.Time;
};
```

and then before calling `vetkd_public_key` I check this field

```
switch (file.timelock) {
    case (?timelock) {
        if (Time.now() < timelock) return #err(#timelock);
    };
    case null {};
};
```

and don’t give the key to the user if the time hasn’t arrived. Or is there some other magic hidden here?
[/quote]

I had the same question and yes, this is the way to do this. No other magic. And AFAIK there is also no other way to do this - cryptography can't access time

-------------------------

rabbithole | 2023-07-31 10:52:12 UTC | #120

[quote="Severin, post:119, topic:16560"]
And AFAIK there is also no other way to do this - cryptography can’t access time
[/quote]
as I understood from [the answer](https://forum.dfinity.org/t/threshold-key-derivation-privacy-on-the-ic/16560/116?u=rabbithole) above, time-lock is done by creating a `derivation_id` based on the time. But I don't think that we can get the same encryption key if the time condition is met, because the `derivation_id` will be unique on each call.
```
let lockUtil = Time.now() + 60_000_000_000; // in 1 minute
derivation_id : Blob = Text.encodeUtf8(Nat.toText(lockUtil));
```

-------------------------

Severin | 2023-07-31 10:55:14 UTC | #121

That matches my understanding. But the canister can always en/decrypt for arbitrary derivation ids, no matter what the system time says. If the canister only hands out the keys if the time is right, then you have the time-locked access control. But what I meant is that nothing stops a malicious canister from handing out the keys too early since it can always generate the string/derivation id for a future timestamp

-------------------------

franzstefan | 2023-07-31 13:47:00 UTC | #122

> But I don’t think that we can get the same encryption key if the time condition is met, because the `derivation_id` will be unique on each call.

What you could do is store the time (`lockUtil` in your example) together with the thing (e.g., file, note, etc.) that you time-lock encrypt. And when you want to decrypt, you ask the backend for a decryption key for exactly this time. That is, the backend would take the time for which you want a decryption-key as parameter. And the critical thing here is that the backend hands out the respective key _only_ if the respective time (passed as parameter) has already passed (that is, is now or in the past), but it would _not_ hand out the respective key if the time is in the future.

-------------------------

andrea | 2023-08-08 16:51:06 UTC | #123

Thanks for the question @hokosugi. In order to get MEV protection, defi dapps need to build on top of this new functionality, for example as @franzstefan sketched in his answer. So existing defi dapp, possibly built on other chains, won't just get MEV protection for free. The idea is that users can send encrypted transactions so that these are ordered while still encrypted, and only *later* the defi dapp decrypts them and execute them in order. So if the defi dapp does not support a compatible decryption mechanism then it won't be possible to leverage this new functionality. 

Note that with the upcoming ethereum integration it would totally be possible to have defi dapp entirely on Ethereum, for example, which only leverage the IC to enable decryptability in the dapp.

Hope this makes sense!

-------------------------

conorseed | 2023-08-11 07:56:44 UTC | #124

Hey all :smile: I'm hoping this isn't a stupid question 😅 Apologies if it is!

Is it possible to use the `vetkd_public_key` to encrypt data, and later decrypt using a derived `vetkd_encrypted_key`? Or does it only work to encrypt and decrypt using the derived key? 

**Use case:** I'm needing the ability for anonymous users to send encrypted data to the canister, and then have only authorised users be able retrieve and decrypt the data. 

Correct me if I'm wrong but, in this use case, if we use the derived key to encrypt and anyone (including anonymous calls) can make the call to derive it, that pretty much defeats the purpose of encrypting it in the first place. So I wondered if we could use the public key to encrypt instead. Or is there another way around this that I'm totally missing?

-------------------------

lastmjs | 2023-08-11 14:34:01 UTC | #125

[quote="Severin, post:119, topic:16560"]
cryptography can’t access time
[/quote]

But what if it could?? Sorry, I was just thinking about this the other day, and feel it would be a powerful capability.

-------------------------

hokosugi | 2023-08-12 10:30:55 UTC | #126

I have a question again, on page 4 of the [vetKey paper](https://eprint.iacr.org/2023/616.pdf), there is a section titled "Blockchain-issued signatures and cross-chain bridges."
How does this work? Is the bridge established by using vetKey as a signature for the verification process?
Also, if vetKey's characteristics can be utilized, would it be possible to create anonymous bridges?

-------------------------

NathanosDev | 2023-08-14 09:16:20 UTC | #127

You can use the IBE scheme for this: https://github.com/dfinity/examples/pull/604

You can use whatever you want as the `derivation_id` for the private key derivation, so in your case you could use the canister ID and then use access control rules to determine who is allowed to derive it.

-------------------------

conorseed | 2023-08-14 09:50:22 UTC | #128

Thank you 🙏 exactly what I was looking for. Appreciate your help!

-------------------------

ais | 2023-08-18 10:16:34 UTC | #129

Hi guys! @NathanosDev beat me to the punch a bit, but the demo has been **extended to include IBE**, and is now merged in [motoko](https://github.com/dfinity/examples/tree/master/motoko/vetkd) and [rust](https://github.com/dfinity/examples/tree/master/rust/vetkd).

Two small reminders:

* The bounty deadline is coming up at the end of August - if you have questions about anything don't hesitate to shout [here](https://forum.dfinity.org/t/open-bnt-8-vetkeys-enabling-privacy-preserving-applications-on-the-ic/21294) or to share progress. 
* If you have any feedback on the API, let us know so that we can refine. (I know there have been some questions around derivation id / path, so suggestions there are particularly useful). 

We're slowly winding back up after some vacation, and look forward to see the discussion, questions, submissions, and whatever else may come.

-------------------------

andrea | 2023-08-22 12:40:20 UTC | #130

In the IC this is not needed, since there is a built-in certification mechanism, which means that any dapp can get blockchain-issued (threshold) certificates, e.g. on data stored in the dapp, even without vetkeys. 

On other chain chains where such certification mechanism is not present, adding support to vetkeys could enable dapp-issued certificates. With this in place you could build some bridging protocol where dapps living on different chains can verify the authenticity of each other statements by verifying their signatures. Of course this is only part of a bridging protocol, since you also need a mechanism to deliver such messages.

-------------------------

andrea | 2023-08-22 12:47:51 UTC | #131

As everybody else said, IBE would be the easiest way for doing this since you only need the verification key to encrypt, and the canister can then do access control to decide who can get the corresponding decryption key.

There is another way, which I wouldn't recommend, which I am adding just for completeness. The `vetkd_encrypted_key` can be used to derive a (standard) public and private key-pair. So with some additional interaction, entities can derive a public key for their own, publish it (e.g. in the canister), and then anybody can encrypt using the public key. The user who can access the `vetkd_encrypted_key` can then access the private key and decrypt the messages. 

IBE is of course much simpler since it removes the need to generate and publish individual keys, anybody can just derive the public key.

-------------------------

ais | 2023-09-29 14:33:54 UTC | #132

gmgm reviving this thread for a moment with a question! 

I'm preparing to present vetKeys at ETH Milan next week. I'll likely include the MEV protection ideas, but would love to hear if you guys have some ETH-centric applications where vetKeys could be an awesome addition. Let me know!

-------------------------

senior.joinu | 2023-10-02 17:27:19 UTC | #133

Seed phrase backup, via II and Vetkeys.
If you lost access to your Metamask, you could restore the phrase, if you still somehow have access to your II.

This is something we want to include in our MetaMask snap based IC wallet.

-------------------------

lastmjs | 2023-10-03 03:06:31 UTC | #134

Is there an update on timelines?

Also I'm starting to come to a concrete use case and hoping that vetKD will be sufficient. Essentially I want to create a canister that can publish packages to npm. To do this it would need to have the full auth token available to it unencrypted. vetKD could allow for the encryption, and the canister would act as the client and gather the keys. Unfortunately I don't think this is secure enough...but combined with AMD-SEV enclaves perhaps it would be.

This could be extended to general passwords perhaps, where the canister can temporarily hold the decrypted key in memory inside of an AMD-SEV enclave, and then perform HTTP requests to external services.

AMD-SEV may be on mainnent ~Q1 2024, any rough quarter estimate for vetKD?

-------------------------

andrea | 2023-10-03 08:09:14 UTC | #135

Hi @lastmjs, we recently started thinking again about integration, we should be able to give an update in the next weeks.

If I understand your use case, you mainly need an encryption key to transfer the token to the canister, since you then rely on SEV-SNP for storing the secret. One thing to notice is that the canister has to generate some (ephemeral) transport key pairs to get the encrypted key from the nodes running vetkd. So you could as well use the transport key to transfer the token to the canister directly, without relying on vetkd. The main advantage I see with vetkd is in the simplification of the key management on the canister: the canister does not need to generate and announce the long term public keys (it only generates some ephemeral keys), long term encryption keys for the canister could be computed publicly from a master public key.

-------------------------

lastmjs | 2023-10-03 21:49:04 UTC | #136

[quote="andrea, post:135, topic:16560"]
If I understand your use case, you mainly need an encryption key to transfer the token to the canister, since you then rely on SEV-SNP for storing the secret.
[/quote]

Not exactly. I want to store the secret encrypted at all times, except when actually needed to perform the outgoing http request to npm. I don't see SEV-SNP as adequate for long-term storage of secret material.

I'm hoping that the enclave will provide a safe enough location to temporarily decrypt the npm token.

So I want to get the token into the canister securely, encrypted. I want it to stay in the canister always encrypted, and only be retrieved and decrypted temporarily inside of the enclave to perform the http request. I'm also hoping that the request is encrypted with TLS inside of the enclave so that once the request leaves the enclave that the token is safe.

-------------------------

lastmjs | 2023-12-05 19:22:49 UTC | #137

Hey, can we get an updated general timeline for how long vetKeys will take?

-------------------------

dfisher | 2023-12-06 02:05:42 UTC | #138

https://x.com/dominic_w/status/1723037509607649364?s=20

Can the team confirm the 6 month timeline Dom outlined above?

-------------------------

andrea | 2023-12-06 16:51:33 UTC | #139

Hey guys, sorry for the late update! Some of our resources have been strategically reallocated to other high-impact projects, such as multi-chains integration. Moreover, we have to balance our efforts with other competing features like threshold Schnorr. So the timeline for VetKeys is not very clear at this point. If there is substantial demand from the community on this feature, then it could be prioritised higher, potentially making a six months timeline a realistic goal. So let us know what you plan to use this feature for, and if you have any prototypes you are interested to turn into products. Your feedback is very valuable in helping us prioritise and use our resources more effectively!

-------------------------

hokosugi | 2023-12-06 21:30:15 UTC | #140

I believe that integration into OpenChat and DSCVR and MEV will help us gain more users.

I understand that Threshold Schnoer Signatures can earn TPS compared to ECDSA, but I think the use cases are few because it can only be utilized for BTC. I would like to see vetKey prioritized if possible.

-------------------------

dfisher | 2023-12-06 23:22:29 UTC | #141

Please do it all. Yesterday. Thank you 😂

-------------------------

hude | 2023-12-12 00:49:45 UTC | #142

Compared to the Schnorr signature, the range of applications for vetKeys is incomparable. Can you prioritize vetKeys?

-------------------------

patnorris | 2024-01-07 17:08:27 UTC | #143

Hi @andrea , thank you for the insight about the current timeline. VetKeys came up on Thursday during the Decentralized AI Working group call and based on that I wanted to provide the feedback in this thread that there are several DeAI projects interested in using it for their prototypes and products. These are use cases around private training and inference data as well as storing outputs (e.g. user chats with the AI service) with maximum privacy. So vetKeys could be a great enabler here and also a differentiating factor for DeAI on the IC compared to traditional AI services. Please let us know if we can help in any way with the potential prioritization of vetKeys.

-------------------------

Severin | 2024-01-09 15:26:14 UTC | #144

We have an internal working group that takes a look at the feedback board every two weeks and we put quite a bit of emphasis on the most-upvoted feature requests (7/10 of the most upvoted requests are in the works or scheduled very soon for work to start).

I just noticed we don't have vetKeys in the list yet so we don't get reminded often enough of how much demand there actually is so I went ahead and created a feature request for it: https://dx.internetcomputer.org/topic/208

My hope is that with a fair amount of upvotes on this feature we can get it some more priority.

TLDR: upvote [this](https://dx.internetcomputer.org/topic/208) please :slightly_smiling_face:

-------------------------

ais | 2024-01-11 13:28:53 UTC | #145

Hello! 

Thanks a lot @Severin for making the ticket, and thanks everyone for the upvotes - it helps to keep it front of mind. 

Thanks also @patnorris for the use case motivation. Definitely would be good for the output privacy, but we should be careful to remember that it may not be so useful in the training context as we cannot do private computation with vetKeys.

As an update about prioritisation, it's certain now that threshold Schnorr will happen first (as it is much faster to integrate) and vetKeys will happen after. 
I'll send updates as and when we have them.

-------------------------

Vitaliy.Klepka | 2024-01-25 11:11:12 UTC | #146

Hello,
Thanks @Severin for pushing this topic forward, many projects are waiting vetKeys to be completely done. I'm just curious, is there a features-list or public roadmap for vetKeys? just to have more clean understanding on feature state, like what is completely done and what has to be done according to the Dfinity vision.

-------------------------

Severin | 2024-01-25 12:29:12 UTC | #147

AFAIU the research is done and the preview canister developed, but the implementation has not received much attention yet. From what I heard there is a lot of work left to do, which is also why tSchnorr was put before vetKeys

-------------------------

Vitaliy.Klepka | 2024-01-25 13:25:59 UTC | #148

thanks for the clarification :+1:

-------------------------

domwoe | 2024-02-07 18:34:55 UTC | #149

Hey everybody,

If you are interested in leveraging vetKeys in your projects, please fill out this quick survey.

https://dfn.typeform.com/to/D4RxWoy1

Thank you :pray:

-------------------------

Muffin2021 | 2024-03-28 16:57:20 UTC | #150

this is definitely an intruguing idea and concept.

-------------------------

Mercury | 2024-04-11 12:06:40 UTC | #151

Is this survey still ongoing?

-------------------------

domwoe | 2024-04-11 14:15:10 UTC | #152

We've evaluated a while ago, but there are still responses incoming and we'll keep it open for now as new projects are exploring vetKeys.

-------------------------

patnorris | 2024-05-14 18:10:01 UTC | #153

Hi @ais , I wondered if you might have any news to share on the vetKeys roadmap; do you know when there might be an update available? I'd love to include it in our dApp (and also optimistically have put this into our grant milestones) Thank you :)

-------------------------

ais | 2024-05-15 08:16:07 UTC | #154

Word on the street is that the new ICP roadmap will be out this week, keep an eye out for it 👀

-------------------------

patnorris | 2024-05-15 10:29:39 UTC | #155

That's exciting, will sure do, thanks :slight_smile:

-------------------------

patnorris | 2024-05-17 08:52:15 UTC | #156

found it :) great that it's included and really looking forward to it :muscle:
![image|628x500](upload://cChpXpBeYCgP3E8c8QMSazUmqcp.png)

-------------------------

Mercury | 2024-05-19 17:29:23 UTC | #157

No due date mentioned.

-------------------------

ais | 2024-05-20 12:34:51 UTC | #158

No specific date, but this is the roadmap for year 4, so it should be safe to expect it within the year. 
Schnorr has a date, and vetkeys starts right after that.

-------------------------

da5id | 2024-07-24 21:40:52 UTC | #159

There was a project mentioned way back in the RWC talk about a group working on a digital inheritance implementation using vetKeys. I heard it as 'IC Crypt'? But obviously that term is quite hard to search. Is that project still going, and does anyone know where I could hook up with them, as I am interested to see the progress and perhaps help out.

-------------------------

ais | 2024-07-26 13:37:06 UTC | #160

I'm not sure if they had a webpage, but I'll forward your message on some internal channels we had!

-------------------------

