ehsan6sha | 2021-07-05 02:49:01 UTC | #1

Hi
I am new to Dfinity and building an application in expo (React native)+typescript. I am trying to do a simple call to internet identity (https://identity.ic0.app), but I get this error in the very first step:
ReferenceError: Can't find variable: BigInt

Any ideas? Here i the code I have. ultimately my question is, how can I use internet identity in a react native app? Can I use simple http calls?

```
import { AuthClient } from "@dfinity/auth-client";
export const login = async() => {
    const authClient = await AuthClient.create();
}
```

-------------------------

neeboo | 2021-07-05 10:17:47 UTC | #2

React Native use JScore as javascript engine. Which does not support BigInt natively

-------------------------

ehsan6sha | 2021-07-05 14:53:12 UTC | #3

I understand. Any polyfills or workarounds that has been tested?

-------------------------

jzxchiang | 2021-07-05 19:34:32 UTC | #4

See my answer here: https://forum.dfinity.org/t/making-http-calls-from-mobile-apps/5192/21?u=jzxchiang

-------------------------

jzxchiang | 2021-07-05 19:35:18 UTC | #5

Actually, I think the latest iOS's JSC has BigInt. But Android doesn't AFAIK.

-------------------------

kpeacock | 2021-07-06 15:24:39 UTC | #6

It sounds like there's a polyfill for Android [here](https://github.com/facebook/react-native/issues/28492):

```
if (typeof BigInt === 'undefined') global.BigInt = require('big-integer')
```

-------------------------

kpeacock | 2021-07-06 16:13:05 UTC | #7

And if it turns out that BigInt is untenable, I'm open to abstracting the codebase to a Nat64 interface that can accept implementations other than BigInt to improve compatibility

-------------------------

ehsan6sha | 2021-07-06 17:46:47 UTC | #8

I tried this.  for BigInt adding this to the top of my code does not work(At least for expo) and it still givs the same error. I had to add this to the @dfinity module files directly, which would probabely break on each update would be nice to have it added in main branch, unless there is a reason not to.
I added it to this file:
...\node_modules \ @dfinity\agent\lib\cjs\agent\http\transforms.js

-------------------------

ehsan6sha | 2021-07-21 23:12:44 UTC | #9

For some reason I am blocked from posting the whole solution and could not post what worked for me. So I put it here:

[github.com/functionland/photos/issues/59#issuecomment-880370283]

From all responses here, and the helpful insights in this topic I gathered it for expo(react -native)

-------------------------

adrian-d-hidalgo | 2024-03-14 21:01:17 UTC | #10

I use this solution:


```
/**
 * Polify BigInt.toJSON for react-native
 * @returns {number}
 */
BigInt.prototype.toJSON = function () {
  return Number(this.toString());
};

if (typeof BigInt === "undefined") global.BigInt = require("big-integer");
```

-------------------------

kpeacock | 2024-03-14 21:27:51 UTC | #11

React Native (including Expo) supports BigInt now! We're also going to be replacing the BLS verification soon, so we'll finally have a simple React Native example ready to go

-------------------------

