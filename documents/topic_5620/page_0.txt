HelloRickey | 2021-07-01 14:37:13 UTC | #1

When I use the playground on the official website to run
`import Random "mo:base/Random";`
It will prompt this error, is it because of a version problem?
![截屏2021-07-01 下午10.28.05|690x257](upload://7f5025LNpWIO7lC68qIev5cHtkr.png)
btw, which Homie knows how to use Random, can anyone provide some code examples?

-------------------------

chenyan | 2021-07-01 16:40:11 UTC | #2

`Random` depend on the `raw_rand` system API, which is not implemented in the interpreter, so you are getting an `assertion failure`.

You can check this example for random usage: https://github.com/dfinity/examples/tree/master/motoko/random_maze

-------------------------

HelloRickey | 2021-07-03 15:48:11 UTC | #3

Hi @chenyan 
Thanks for your reply, I have a question, please help.

I know that the range of the return value in [rangeFrom](https://sdk.dfinity.org/docs/base-libraries/random#rangeFrom) is determined by the parameter p, the return value of rangeFrom: [0 .. 2^p-1], if p is 3, then the range of the random number is [0..8].
If the random number range I want to obtain is [0..99] or [5..10], how should I determine this parameter p first.For example, I expect to get a random number from 0 to 99, but I need to know what p is first.
Thanks

-------------------------

claudio | 2021-07-03 17:02:20 UTC | #4

I think this code should almost do what you want:

https://github.com/dfinity/examples/blob/f1e0a6afa052aeec6adea3433d7a75bcfb937239/motoko/random_maze/src/random_maze/main.mo#L41

(or set p to be the binary logarithm of the range, draw a number, if in range, return it + mix, otherwise reject and try again)

-------------------------

HelloRickey | 2021-07-06 05:30:19 UTC | #5

Hey @claudio , I am trying to get a random number between [0..`max`) according to the code example you sent me.
But when I call the getMax function, the returned result is (opt 0).  Is there any solution?
This is my code, thanks 🙏
```
func bit(b : Bool) : Nat {
    if (b) 1 else 0;
};

func chooseMax(f : Random.Finite, max : Nat) : ? Nat {
    assert max > 0;
    do ? {
      if (max == 1) return ? 0;
      var k = bit(f.coin()!);
    
      var n = max / 2;
      while (n > 1) {
        k := k * 2 + bit(f.coin()!);
        n := n / 2;
      };

      if (k < max)
        return ? k
      else chooseMax(f, max) !; // retry
    };
  }; 

public func getMax(max:Nat):async ?Nat{
  let entropy = await Random.blob(); 
  var f = Random.Finite(entropy);
  var result= chooseMax(f,max);
  return result;
};
```

-------------------------

LightningLad91 | 2023-01-09 02:52:44 UTC | #6

@claudio @chenyan can one of you please DM me. I have an issue related to this problem. Thank you.

-------------------------

claudio | 2023-01-09 12:08:45 UTC | #7

Oh dear, I'm sorry I never replied to your message - I must have overlooked a notification. 

Turns out there is a bug in Random.mo that probably explains why you were seeing this behaviour.

https://github.com/dfinity/motoko-base/issues/499

Thanks to @LightningLad91 for investigating and prompting me again.

-------------------------

