cryptoschindler | 2022-12-21 09:02:12 UTC | #1

is this the correct way of doing this or is there a more elegant solution @tomijaga 
https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=11814075

-------------------------

paulyoung | 2022-12-22 05:04:23 UTC | #2

I think you can use `JSON.parse` from [`json.mo`](https://github.com/aviate-labs/json.mo)

That will parse to a `JSON` value, and from there you could do something like:

```

import Array "mo:base/Array";

let keys: ?[Text] = switch (json) {
  case (#Object kvs) {
    ?Array.map<(Text, JSON), Text>(kvs, func ((k, _v)) {
      k;
    });
  };
  case (_) null;
};

```

-------------------------

tomijaga | 2022-12-23 04:43:20 UTC | #3

To extract the keys, you need to parse the data into a variant structure like in @paulyoung's example.
There isn't a public function in the serde library for doing this for JSON text, but I can add a `toCandid` function that does that.

I use the same JSON library internally, so this is the best option for parsing and extracting the keys.

I've made some updates to the above code so that it extracts keys from nested arrays and objects
https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2920646036

-------------------------

cryptoschindler | 2022-12-23 08:20:07 UTC | #4

Thanks for both of your inputs, but for what I wanted to do I actually still like my solution more :smiley:

-------------------------

