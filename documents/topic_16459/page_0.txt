saikatdas0790 | 2022-11-09 10:26:50 UTC | #1

![image|530x220](upload://4rKafpxHhbpLoYIxDF5oamZRaI3.png)

Used to work fine till v0.11.2

Thoughts?

-------------------------

harshbaz | 2022-11-09 10:30:21 UTC | #2

Running into the same thing after upgrading.

-------------------------

Severin | 2022-11-09 10:37:22 UTC | #3

What canister type are you using? There shouldn't have been any changes that make wasms larger... Unlikely, but are you using `"shrink" : false,` in your dfx.json?

-------------------------

saikatdas0790 | 2022-11-09 10:49:03 UTC | #4

Not using `"shrink": false`.

Here's a screenshot of running the exact same install script now downgraded to v0.11.2

![image|539x296](upload://yJZqT7KIUqzolI92ao2o3i6gC2E.png)

Works fine and completes installing canisters

Can also confirm that shrink ran when running the install script on dfx v0.12. Here's a screenshot:
![image|527x247](upload://xmgPA6n581jrWSLgzOPe1pFU13J.png)

-------------------------

saikatdas0790 | 2022-11-09 10:51:43 UTC | #5

Didn't set any canister type specifically.

Here's the steps that I did:
- ran `dfx upgrade`
- upgraded successfully
- `rm -rf` the `.dfx` and `target` folders in my project directory
- removed the `"networks"` entry from `dfx.json`
- ran `dfx start` and successfully started replica
- ran the canister install script to get the attached error

-------------------------

Severin | 2022-11-09 10:55:03 UTC | #6

Thanks for the details. Since you mention the `target` folder: Is it a Rust project?

-------------------------

saikatdas0790 | 2022-11-09 10:55:50 UTC | #7

Yes, it's a rust project

-------------------------

lwshang | 2022-11-09 16:18:33 UTC | #8

Have you inspected the canister wasm modules before and after `dfx` upgrade?
Did `dfx v0.11.2` produce much smaller wasm than `dfx v0.12.0`?

-------------------------

saikatdas0790 | 2022-11-09 17:04:51 UTC | #9

I just checked.

Here's with dfx v0.11.2
![image|613x293](upload://yELvXIrnJ5LvrNk4jlxxwKozcY2.png)

Here's with dfx v0.12.0
![image|618x291](upload://xWErTt0at47yIxmmV96UNVb5RTN.png)

This is in the `/target/wasm32-unknown-unknown/release` folder

@lwshang

-------------------------

lwshang | 2022-11-09 17:20:30 UTC | #10

In short, for wasm size optimization, `dfx v0.11` ran `ic-cdk-optimzer` while `dfx v0.12` ran `ic-wasm shrink`. The later one currently could not produce the same optimization as before.

This is a known limitation of `ic-wasm shrink`. We want to improve it to unblock more use cases like yours.

For a short-term workaround, could you either keep using `dfx v0.11` or change your canister to `custom` type and run `ic-cdk-optimizer` in build script?

-------------------------

saikatdas0790 | 2022-11-09 17:30:03 UTC | #11

Yes, we have currently downgraded to v0.11.2.

But eagerly waiting to upgrade to v0.12 to try out the juicy new things like `dfx nns` and all ðŸ˜…

-------------------------

saikatdas0790 | 2022-11-12 06:12:30 UTC | #12

Any updates on this?

We have just started running into the wasm size limitation on dfx v0.11.2 as well, as our canisters grow further. 

Are there any plans to enable canisters larger than 2MB to be uploaded on the IC?

![image|690x112](upload://ymBDrfaVvEpBbDWE8fqcuMSz6q6.png)

Looks like we are currently 1kb over the size limit

-------------------------

Gabriel | 2022-11-12 17:27:34 UTC | #13

We have the same issue, unfortunately the only thing I can recommend for now is to gzip your wasm before uploading. it reduces the wasm size 2-5/3 times in size.

-------------------------

saikatdas0790 | 2022-11-13 06:38:34 UTC | #14

This works on dfx v0.11.x as well?

-------------------------

Gabriel | 2022-11-13 06:53:53 UTC | #15

if your question is to gzip, then yes :)

-------------------------

saikatdas0790 | 2022-11-13 11:21:00 UTC | #16

Thank you for the inputs @Gabriel 

What do the steps look like on your end?

My build steps look like this
```sh
dfx canister create --no-wallet backend_canister
dfx build backend_canister
dfx canister install backend_canister
dfx generate backend_canister
```

There are steps in between but this is the simplified version.

And my dfx.json has an entry like this:

```json
"backend_canister": {
  "type": "rust",
  "package": "backend_canister",
  "candid": "./canister/backend_canister/can.did",
  "declarations": {
    "output": "./web-client/declarations/backend_canister"
  }
}
```

Any changes required here?

Appreciate the inputs :slight_smile:

-------------------------

Gabriel | 2022-11-16 12:33:41 UTC | #17

Hey, sorry for the late answer

You can use this https://github.com/dfinity/sdk/issues/2357

I don't have a full example yet but working on it, I'll share as soon as possible.

-------------------------

saikatdas0790 | 2022-11-16 15:55:11 UTC | #18

No worries, I figured it out. It's quite straightforward.

For future readers, the way to do it is to run gzip right after the build step. DFX picks it up automatically. Like this:

```sh
dfx build <canister_name>
gzip -f -1 ./target/wasm32-unknown-unknown/release/<canister_name>.wasm
```

-------------------------

Gabriel | 2022-11-16 16:08:03 UTC | #19

oh, that's a neat way, but I would rather have dfx automatically gzip instead of running an extra command that I might forget about it hah.

Also, did gzip fixed your issue?

-------------------------

saikatdas0790 | 2022-11-16 16:32:43 UTC | #20

Yeah, they are significantly smaller now. I was even able to upgrade to dfx v0.12 due to this. These are my wasm sizes now
![image|611x283](upload://xbbcKXB64TnPFaqPj9JWclVQsUN.png)

-------------------------

