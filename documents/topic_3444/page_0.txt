heldrida | 2021-05-12 15:43:53 UTC | #1

Hi,

Looking at the CanCan example typyings.d.ts ( https://github.com/dfinity/cancan/blob/main/src/utils/canister/typings.d.ts ), was it generated programmatically or was it written by hand? Is there a way to do it automatically?

Thank you!

-------------------------

heldrida | 2021-05-12 15:52:42 UTC | #2

Interesting. So, I found the d.ts files in the .dfx directory; but why would the CanCan project have the .d.ts in the source directory if  this exists in the .dfx directory?

-------------------------

heldrida | 2021-05-12 15:56:10 UTC | #3

So, opened both files and noticed that they are indeed, different. Wonder in which use-case they're suitable for.

-------------------------

Ori | 2021-05-12 17:22:20 UTC | #4

It was a binding generated using the candid tool didc, which now has compiled releases here:
[https://github.com/dfinity/candid/releases](https://github.com/dfinity/candid/releases)

You can use the tool to do the same for your own projects, passing in the .did file generated by dfx. Eg:
```
didc bind hello.did -t ts
```

Docs for this here:
[https://github.com/dfinity/candid/tree/master/tools/didc](https://github.com/dfinity/candid/tree/master/tools/didc)

-------------------------

kpeacock | 2021-05-12 16:45:26 UTC | #5

There are some situations where it's applicable. It's necessary if you have an app that serves the frontend and the backend from the same canister, which is what we do in the Internet Identity project.

Manually generating your files can also make it possible to rely on less configuration in webpack, tsconfig, jest, and so on

We have a planned feature to add a simple command for it to dfx so you don't have to independently download `didc`.

-------------------------

heldrida | 2021-05-12 17:24:09 UTC | #6

Thank you! The cmd in the `dfx` sounds good and is going to be very useful :slight_smile:

-------------------------

heldrida | 2021-05-12 17:24:21 UTC | #7

Thank you very much @Ori !

-------------------------

