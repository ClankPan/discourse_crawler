lwshang | 2024-04-09 17:10:28 UTC | #1

In the original forum post [[RFC] Canister Metadata Standard](https://forum.dfinity.org/t/rfc-canister-metadata-standard/16280/1), many community CDK authors showed interests in adding `cdk:name` in the Canister Metadata Standard  so that tools like Canister Explorers can fetch and analyze the data.

We, the Dfinity SDK team, did receive the message. The requesting feature is about to land.

We adopted a very different design which accommodated community suggestions. Please check the final [design](https://forum.dfinity.org/t/rfc-tech-stack-canister-metadata-standard-extension/28692/9).

<details>
  <summary>Outdated design</summary>

To make this feature more versatile and future-proof, I named the new JSON object in the `dfx` metadata as `tech_stack`. The work is in this [draft PR](https://github.com/dfinity/sdk/pull/3670). 

## Example

```json
{
  "tech_stack": {
    "rust": "1.76.0",
    "ic-cdk": "0.13.0",
    "wasm-tools": null
  }
}
```

As you can see, the tech stack includes but not limit to the programming languages, CDKs, libraries, tools.

## `dfx.json` configuration

The above metadata JSON object was generated from the `dfx.json` configuration below.

```json
{
  "canisters": {
    "foo": {
      "type": "custom",
      "tech_stack": [
        {
          "name": "ic-cdk",
          "version": "0.13.0"
        },
        {
          "name": "rust",
          "version_command": "rustc --version | cut -d \" \" -f 2"
        },
        {
          "name": "wasm-tools"
        }
      ]  
    }
  }
}
```

For each tech stack item, the canister author can:
* set no version
* set the version directly
* set the version using a command

Please check the [document page](https://github.com/dfinity/sdk/blob/lwshang/sdk-1406/docs/concepts/tech-stack.md) for more details.
</details>

-------------------------

lastmjs | 2024-03-21 00:37:51 UTC | #2

How would you say the name of the CDK?

How would you set the supported languages?

CDK name has no version. Languages have no version.

-------------------------

lastmjs | 2024-03-21 00:41:27 UTC | #3

I don't know, I would like to deliberate on this more. CDK name, languages, etc seemed pretty simple and I liked it.

-------------------------

lastmjs | 2024-03-21 00:42:20 UTC | #4

Just azle: null, kybra: null, typescript: null, etc? Or with versions?

-------------------------

lastmjs | 2024-03-21 00:45:42 UTC | #5

Maybe we should call it something else? Dependencies? It almost seems like a list of dependencies.

Also what if you want to add more information than just a version?

I would love to see this be more general-purpose, can we have more arbitrary name/value pairs instead of just name and version?

What if I want to add an ICP or Ethereum address to a dependency for example? Cycle compensation is a feature I hope is incorporated into the protocol in the future where cycles are not only burned but distributed to canister dependencies, this metadata might be the best place to put the information required to get that to work.

-------------------------

lastmjs | 2024-03-21 00:48:08 UTC | #6

It would be nice to be able to still say name: cdk, value: azle for example. Or name: languages, value: JavaScript, TypeScript

This will make it easier for those reading the metadata to grab what they are interested in, rather than having uncategorized fields

-------------------------

Dylan | 2024-03-21 01:28:36 UTC | #7

I can see where @lastmjs is coming from. I think that the [suggestions](https://forum.dfinity.org/t/rfc-canister-metadata-standard/16280/5) in the original thread seem more helpful for generating stats such as these:
![image|554x500](upload://bJtlMiqMi41ldg1B337ZWHfCQJW.png)

With the `tech_stack` approach described above, it's just an array of key-value pairs with no context as to what each one represents, making it a bit more challenging for consumers to decipher.

-------------------------

lwshang | 2024-03-25 19:34:17 UTC | #8

I just updated the design and implementation of this feature.

PTAL
- [PR](https://github.com/dfinity/sdk/pull/3670)
- [doc](https://github.com/dfinity/sdk/blob/lwshang/sdk-1406/docs/concepts/tech-stack.md)


cc @Dylan

P.S. The new design was inspired by the [ProducersSection](https://github.com/WebAssembly/tool-conventions/blob/main/ProducersSection.md) of the wasm standard.

-------------------------

lwshang | 2024-04-09 17:05:44 UTC | #9

## Feature complete
A more concise design was adopted and the [PR ](https://github.com/dfinity/sdk/pull/3670) was merged!

```json
{
  "tech_stack": {
    "language": {
      "rust": {
        "version": "1.75.0"
      }
    },
    "cdk": {
      "ic-cdk": {
        "version": "0.13.0"
      }
    },
    "lib": {
      "ic-cdk-timers": {},
      "ic-stable-structures": {}
    },
    "other": {
      "bitcoin": {
        "address": "bcrt1qfe264m0ycx2vcqvqyhs0gpxk6tw8ug6hqeps2d"
      }
    },
    "tool": {
      "dfx": {}
    }
  }
}
```

Please check the [documentation](https://github.com/dfinity/sdk/blob/master/docs/concepts/tech-stack.md) for more details of the final design.

---

## State of the Art

In the same PR, I added corresponding support for canister types known by `dfx`.

* For [Rust](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/src/lib/models/canister.rs#L182-L193) and [Motoko](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/src/lib/models/canister.rs#L199-L203) canisters, `dfx` sets `tech_stack` if they don't define `tech_stack` explicitly in `dfx.json` . 
* For [Azle](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/assets/project_templates/azle/dfx.json-patch#L12-L19) and [Kybra](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/assets/project_templates/kybra/dfx.json-patch#L12-L19) projects created with `dfx new`, the corresponding `tech_stack` configuration will be added to `dfx.json` by default. (cc @lastmjs )

For CDKs not yet known by `dfx` (e.g., @icpp), the CDK providers can add this `tech_stack` section in `dfx.json` of the project templates.

For Canister Explorers (e.g. icp.zone by @ZenVoich), it's expected that more canisters will have a public metadata with key "dfx", in which there is a "tech_stack" object.

---

## What's Next?

We don't envision that canister developers will define these values in `dfx.json` by themselves.

Upcoming work will enable CDK providers to set `tech_stack` fields for their users.

-------------------------

icpp | 2024-04-10 10:12:01 UTC | #10

Awesome!

Can you also define the exact details of the custom section that is added to the wasm?

I can then implement adding it by default to C++ wasm as well.

-------------------------

lwshang | 2024-04-11 00:26:19 UTC | #11

In this [PR](https://github.com/dfinity/sdk/pull/3705), I added `dfx schema --for dfx-metadata` which display the schema of the "dfx" metadata JSON.

The generated statical JSON schema file can be found [here](https://github.com/dfinity/sdk/blob/3e79fc3525f5553377f71f7e81405cfba9237842/docs/dfx-metadata-schema.json).

----

You can also refer to the dfx.json of [Azle](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/assets/project_templates/azle/dfx.json-patch#L12-L19) and [Kybra](https://github.com/dfinity/sdk/blob/321f404f6fe20be48dd799375286c48699c758f8/src/dfx/assets/project_templates/kybra/dfx.json-patch#L12-L19) templates.

-------------------------

lastmjs | 2024-04-11 11:54:37 UTC | #12

Thanks for all of this work. I do have a concern about the process of this RFC though.

It seems you at DFINITY are just making the final decision and merging PRs without waiting for the community members involved to also agree on the final standard. Can we improve this?

If it's an RFC I would expect final decisions to involve those requested to comment more. For example the OP begins with `The requesting feature is about to land.` This happened without allowing community members to review the new design (at least that's what I felt).

Then I and others came in after the fact to request changes.

So for example I would expect something like: Here's the PR to comment on or comment here in the forum thread. We'll leave it open until this date if there is no further deliberation, then we'll merge it if there's agreement. Something more like how some of the working groups have been working.

-------------------------

lwshang | 2024-04-11 13:55:52 UTC | #13

Thank you for taking the time to provide this valuable feedback. We genuinely appreciate your input and recognize the importance of involving the community in the decision-making process for RFCs. Your concerns have been duly noted, and we are committed to improving our approach to ensure greater transparency and inclusivity in the future.

Finding the right balance between speed and process integrity is crucial, and your feedback helps us to better navigate this challenge. 

When I was assigned this task, I initially perceived it as less critical compared to the more serious ICRC standards, so I leaned towards prioritizing speed over a more comprehensive RFC procedure. However, I was also keen on maintaining community involvement, especially since I was designing a metadata standard intended for use by a third-party canister explorer rather than being consumed directly by `dfx` . Therefore, gathering input from the eventual users was crucial to ensure that the metadata would be genuinely useful.

-------------------------

lastmjs | 2024-04-23 14:13:23 UTC | #14

Question: `For Azle and Kybra projects created with dfx new, the corresponding tech_stack configuration will be added dfx.json by default.`

Can you guide me to where the tech_stack will be created for Azle and Kybra with dfx new? I am now integrating tech_stack into the Azle and Kybra dfx extensions, and I would like to ensure that they are all universal.

In fact, it's probably best that dfx new simply remove tech_stack for Azle and Kybra, as the dfx extension will soon be released and will cover this.

I am also curious on people's opinions of including the version of libraries in this information, do you think it could be a security vulnerability?

-------------------------

lastmjs | 2024-04-23 14:19:03 UTC | #15

I'm having trouble actually reading the metadata, how do I do it?

Here's the dfx extension I am playing with:

```
{
    "name": "azle",
    "version": "0.21.1",
    "homepage": "https://github.com/dfinity/dfx-extensions",
    "authors": "",
    "summary": "",
    "categories": [],
    "keywords": [],
    "canister_type": {
        "defaults": {
            "candid": ".azle/{{canister_name}}/{{canister_name}}.did",
            "candid_gen": "http",
            "build": "npx azle {{canister_name}}",
            "wasm": ".azle/{{canister_name}}/{{canister_name}}.wasm",
            "gzip": true,
            "metadata": [
                {
                    "name": "candid:service",
                    "path": ".azle/{{canister_name}}/{{canister_name}}.did"
                }
            ],
            "tech_stack": {
                "cdk": {
                  "azle": {}
                },
                "language": {
                  "typescript": {},
                  "javascript": {}
                }
            }
        }
    }
}
```

And I'm trying to run commands like `dfx canister metadata async_await techstack:cdk`

-------------------------

lastmjs | 2024-04-23 14:21:05 UTC | #16

Something else that is strange to me, why is `tech_stack` a stand-alone property? Why isn't it defined inside of the already-existing `metadata` property?

-------------------------

lastmjs | 2024-04-23 14:31:19 UTC | #17

Okay so it is `dfx canister metadata [canister_name] dfx`. This seems a very strange and unexpected place to put this. What does `dfx` have to do with it really besides automatically putting it in?

I was expecting `dfx canister metadata [canister_name] tech_stack`, and also `dfx canister metadata [canister_name] tech_stack:cdk`, `dfx canister metadata [canister_name] tech_stack:lanuage`, etc

-------------------------

lastmjs | 2024-04-23 14:32:03 UTC | #18

So two biggest issues I see are:

1. Why isn't this defined inside of the `metadata` property that already exists?
2. Why is it at the `dfx` metadata property?

-------------------------

lwshang | 2024-04-23 14:33:18 UTC | #19

The "tech_stack" object is a part of the existing "dfx" metadata. So you should do:
```
dfx canister metadata async_await dfx
```

> Something else that is strange to me, why is `tech_stack` a stand-alone property? Why isn’t it defined inside of the already-existing `metadata` property?

"tech_stack" and "pullable" are the configurations for dfx usage which will be assembled into the "dfx" metadata.

In the "metadata" section, you define some metadata with specified key, value, visibility.

-------------------------

lastmjs | 2024-04-23 14:36:02 UTC | #20

I'm suggesting that it makes more sense to have a `tech_stack` metadata top-level property, and to just define tech_stack inside of metadata. Just make it a standard metadata property, like I felt the original intention of the RFC was.

I would be interested to know why `dfx` makes sense as the top-level metadata property. dfx might be the tool that's placing the metadata in the binary, but that's not even necessary. I could use ic-wasm or edit the Wasm in another way.

I feel like these things should be revisited.

-------------------------

lwshang | 2024-04-23 14:39:49 UTC | #21

> I was expecting `dfx canister metadata [canister_name] tech_stack`, and also `dfx canister metadata [canister_name] tech_stack:cdk`, `dfx canister metadata [canister_name] tech_stack:lanuage`, etc

There is a limit on the number of metadata sections. So in dfx, we deliberated to group all dfx-specific metadata into a "dfx" metadata which has a JSON content.

Then the clients can get the JSON content and extract interesting value from it.

In CLI, you can:
```sh
dfx canister metadata [canister_name] dfx | jq ".tech_stack.cdk"
```

-------------------------

lastmjs | 2024-04-23 16:21:24 UTC | #22

For anyone reading @lwshang and I had a call, and the situation is not perfect but due to the various constraints on Wasm metadata, the current solution should work fine.

I still think a name other than `dfx` would be nice, but at least we have a standard that should work well. We can always create our own custom metadata sections and standards if we'd really like to, but this is fine for now.

-------------------------

icpp | 2024-05-15 00:22:24 UTC | #23

FYI, icpp-pro 3.15.3 was released, which adds the custom section dfx.tech_stack to the .wasm file according to the standard spec.

I am not using dfx to do this addition, but just add it to the wasm as part of the build process, using LLVM.

-------------------------

lastmjs | 2024-05-16 11:14:22 UTC | #24

The next versions of Azle and Kybra will both have this implemented, waiting on releases, possibly waiting for a stable version of dfx extensions with custom canister type.

-------------------------

