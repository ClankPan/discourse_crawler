Hazel | 2022-05-03 14:56:45 UTC | #1

I'm writing up some inter-canister 2PC code. For now, I need to guarantee that the message sent via `ic_cdk::call` is enqueued at the destination canister for processing. Can `ic_cdk::call` panic or trap? Or, is the full range of failures captured by the [RejectionCode](https://github.com/dfinity/cdk-rs/blob/4ff72359407cd6e26df36328f405fab03459c9d3/src/ic-cdk/src/api/call.rs#L146)? 

Is there a way to not necessarily await a result. But, be assured that my message is enqueued?

-------------------------

PaulLiu | 2022-05-04 06:35:55 UTC | #2

[quote="Hazel, post:1, topic:12687"]
Is there a way to not necessarily await a result. But, be assured that my message is enqueued?
[/quote]

Your target canister may be on another subnet, and there are many reasons that a message could get sent but end up getting rejected eventually, e.g., not enough cycles, queue too full, etc.

If you want delivery guarantee, the only way to do it is await a result.

-------------------------

Hazel | 2022-05-04 13:44:32 UTC | #3

[quote="PaulLiu, post:2, topic:12687"]
Your target canister may be on another subnet, and there are many reasons that a message could get sent but end up getting rejected eventually, e.g., not enough cycles, queue too full, etc.
[/quote]

Gotcha. Can the call trap or panic?

-------------------------

PaulLiu | 2022-05-04 17:47:51 UTC | #4

Making a call could trap [according to the spec](https://smartcontracts.org/docs/current/references/ic-interface-spec#inter-canister-method-calls) if there is insufficient cycle.

A couple things to note:
1. when the callee explicitly rejects, it is not a trap (callee state will persist), and the caller will receive a reject message.
2. when the callee traps, callee state will rollback, and the caller will receive a reject message.
3. the caller after receiving the reject message will be executing the callback it previously registered for this call, and it may choose to return to its caller by another reject or reply, or trap.

Hope it helps!

-------------------------

