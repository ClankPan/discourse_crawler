diegop | 2021-12-07 01:34:42 UTC | #1

## 1. Summary

This is a motion proposal for the long-term R&D of the DFINITY Foundation, as part of the follow up to this post: [Motion Proposals on Long Term R&D Plans](https://forum.dfinity.org/t/motion-proposals-on-long-term-r-d-plans/9261) (Please read this post for context).

Chain Key cryptography facilitates consensus among IC nodes. Through an extension of the Chain Key cryptography, the IC will be able to directly interact with the Ethereum network. Smart contracts on the IC will be able to submit transactions on Ethereum. Additional work areas include supporting the Ethereum Virtual Machine (EVM) on the Internet Computer, and more. 

## 2. Discussion lead

Dieter Sommer

## 3. How this R&D proposals are different to previous types

Previous motion proposals have revolved around specific features and tended to have clear, finite goals that are delivered and completed. They tended to be measured in days, weeks, or months.

These motion proposals are different and are defining the long-term plan that the foundation will use, e.g., for hiring and organizational build-out. They have the following traits and patterns:

1. Their scope is years, not weeks or months as in previous NNS motions
2. They have a broad direction but are active areas of R&D so they do not have an obvious line of execution.
3. They involve deep research in cryptography, networking, distributed systems, language, virtual machines, operating systems.
4. They are meant to match the strengths of where the DFINITY foundation’s expertise is best suited.
5. Work on these proposals will not start immediately.
6. There will be many follow-up discussions and proposals on each topic when work is underway and smaller milestones and tasks get defined.

An example may be the R&D for “Scalability” where there will be a team investigating and improving the scalability of the IC at various stages. Different bottlenecks will surface and different goals will be met.

## 3. How this R&D proposal is similar to what we have seen

We want to double down on the behaviors we think have worked well. These include:

1. Publicly identifying owners of subject areas to engage and discuss their thinking with the community
2. Providing periodic updates to the community as things evolve, milestones reached, proposals are needed, etc...
3. Presenting more and more R&D thinking early and openly.

This has worked well for the last 6 months so we want to repeat this pattern.

## 4. Next Steps

[ ] Developer forum intro posted
[ ] 1-pager from the discussion lead posted
[ ] NNS Motion proposal submitted

-------------------------

diegop | 2021-12-07 01:37:33 UTC | #2

## 5. What we are asking the community

* Ask questions
* Read 1-pager 
* Give feedback
* Vote on the motion proposal

Frankly, we do not expect many nitty-gritty details because these are meant to address projects that go on for long time horizons.

The DFINITY foundation’s only goal is to improve the adoption of the IC so we want to sanity-check the projects we see necessary for growing the IC by having you (the ICP community) tell us what you all think of these active R&D threads we have.

## 6. What this means for the existing Roadmap or Projects

In terms of the current roadmap and proposals executed, those are still being worked on and have priority. 

An intellectually honest way to look at this long-term R&D project is to see them as the upstream or “primordial soup” from which more baked projects emerge from. With this lens, these proposals are akin to asking, “what kind of specialties or strengths do we want to make sure DFINITY foundation has built up?”

Most (if not all) projects that the DFINITY foundation has executed or is executing are borne from long-running R&D threads. Even when community feedback tells the foundation, “we need X” or “Y does not work”, it is typically the team with the most relevant R&D area that picks up the short-term feature or project.

-------------------------

diegop | 2021-12-07 04:01:21 UTC | #3

**Please note:** 

Some folks gave asked if they should vote to "reject" any of the Long Term R&D projects as a way to signal prioritization. The answer is simple: "No, please, ACCEPT" ;) 

These long-term R&D projects are the DFINITY's foundation's thesis at R&D threads it should have across years (3 years is the number we sometimes use internally). We are asking the community to ACCEPT (pending 1-pager and more community feedback of course). Prioritization can come at a separate step.

-------------------------

jzxchiang | 2021-12-07 05:46:40 UTC | #4

Very important so thanks for creating this.

I've read in Terabethia's Medium [article](https://medium.com/terabethia-bridge/terabethia-bridging-contracts-assets-across-ethereum-and-the-internet-computer-dc45797de1dd) that the IC <> ETH integration will allow IC canisters to hold ETH assets on ETH but "won't actually enable Ethereum assets to exist on the IC". Hopefully the one-pager clears up any confusion about what this integration will actually do.

In general, I'd love to get some high-level thinking on how this integration will fit into the burgeoning L2 rollup ecosystem. How do you hope ETH developers view the IC? As another rollup? If so, along the lines of an optimistic rollup, a zero-knowledge rollup, or something completely different? How do you envision the IC to co-exist with these other rollups and/or ultimately win over the ETH market?

> These long-term R&D projects are the DFINITY’s foundation’s thesis at R&D threads it should have across years (3 years is the number we sometimes use internally).

I hope this won't take 3 years... that's a lifetime in web3 land haha

-------------------------

dieter.sommer | 2021-12-14 10:46:00 UTC | #5

Dear Internet Computer Community!

I am Dieter Sommer, member of the DFINITY research team. I am responsible for this motion proposal and I am looking forward to having exciting discussions and working with you on this topic!

-------------------------

dieter.sommer | 2021-12-14 10:49:56 UTC | #6

## 1. Objective

This motion proposal is about the efforts of integrating the Internet Computer (IC) with Ethereum, which comprises the following items:

* **Ethereum blockchain integration:** Integrating the Internet Computer blockchain with the Ethereum blockchain in a trustless manner, i.e., without using any trusted intermediaries such as bridges. This will enable smart contracts on the Internet Computer to call smart contracts on Ethereum and vice versa.

* **EVM support on the IC:** Providing an Ethereum execution environment (EVM) on the Internet Computer to run Solidity-/EVM-based smart contracts on the IC.

This proposal, being one of the R&D roadmap proposals, is different to our usual motion proposals for individual features that have been launched so far because it covers a multi-year strategic roadmap of R&D activities in a specific domain and likely results in multiple features on which we will have separate motion proposals. The proposal expresses the current thinking and intends to trigger a discussion process with the community to refine it towards the work on the individual features of the proposal.
The integration with the Ethereum blockchain and the EVM support on the IC must be aligned with each other in order to reap the most benefits from this strategic line of work.

## 2. Background
Smart contracts on blockchains like the Internet Computer or Ethereum can call other smart contracts on the same blockchain they are running on, but not on different blockchains. A blockchain is a walled garden in some way that is per se not openly connected with other systems and specifically other blockchains. The reasons behind this are technical and based on how blockchains work: It is not straightforward to deliver calls from a blockchain to another target blockchain and the results back in a trustless manner. Particularly, signing transactions for other blockchains is difficult given the trust model that any single node can be compromised and thus cannot hold private key material required to sign a transaction for the other blockchain it wants to interact with.
Regarding the other problem domain, most of today's smart contracts are written in Solidity as they have originally targeted Ethereum and the language and surrounding ecosystem are well known by the community. However, Ethereum has become prohibitively expensive for running smart contracts at scale (especially ones with lots of data) due to its lack of scalability and massively increased demand in recent years. Thus, authors of smart contracts are looking for alternative blockchains with lower transaction, storage, and compute costs and possible other advantages like fast transaction finality and high throughput. It is crucial that Solidity-based smart contracts be portable with little effort and without major changes, because those contracts often have been running successfully and have been thoroughly audited and every change may introduce exploitable bugs and should therefore be avoided.

## 3. Why this is important
The interoperability between different blockchains is of increasing importance: As there is an increasing number of blockchains, the world's smart contracts are distributed across those blockchains: So far, Ethereum has been the chain with most of the contracts running, but increasingly they have been moving to Layer-2 chains or other Layer-1 chains for lower operational cost. Now that contracts are spread over a diverse landscape of chains, the capability to make inter-blockchain calls and receive back the responses is becoming increasingly important for the world's future open blockchain ecosystem. A particularly important aspect of integration between different blockchains is the transfer of value between the chains. This is also getting increasingly important now that liquidity is spread over a growing number of blockchains: Ideally, people can hold liquidity on a particular chain and easily transfer it to another chain and utilize it there to earn interest on the tokens. Take as an example Ether, Ethereum's native currency, and the plurality of other ERC-20 tokens on Ethereum, e.g., those that are wrapped tokens of other cryptocurrencies that have been bridged to Ethereum. All those can be made available on the IC in a trustless manner with the integration between the IC and Ethereum. That is, token holders on Ethereum or on other chains that are bridged to Ethereum could benefit by using their tokens in a wrapped form on the IC and the IC would benefit in terms of a massive potential of liquidity influx from other blockchains. This would leverage the properties of the IC of being massively scalable, having very fast finality, and offering extremely cheap computation compared to other blockchains.
EVM support on the IC is the other aspect of the Ethereum integration that can provide substantial value to both the community and the IC. The IC, once offering an EVM integration, will be the best-suited platform for running Solidity-/EVM-based smart contracts due to its very low cycles cost, fast finality, and unbounded scalability. This will allow smart contract authors to bring their contracts over to the IC and benefit from all those properties the IC offers. This can be done without major modifications to the contracts, i.e., without the risk of introducing bugs or invalidating the audits that have been done.

## 4. Topics under this project
**Ethereum blockchain integration**
The basic idea of the integration with the Ethereum blockchain is to perform a trustless integration between the IC and Ethereum blockchains analogous to the Bitcoin integration with the Internet Computer. This integration enables smart contracts on Ethereum to call smart contracts on the Internet Computer and receive the call result as a response and vice versa. This integration will comprise a fully functional cross-chain integration between the Internet Computer and Ethereum, allowing smart contracts on one blockchain to call smart contracts on the respective other chain and thereby create substantial innovation potential. Particularly, Ether will be transferable to smart contracts on the IC and be wrappable for DeFi applications. The same will be true for any ERC-20 token due to the generality of the approach. The integration will leverage threshold cryptography to achieve our trust properties.

**EVM support on the IC**
The Ethereum Virtual Machine (EVM) is the first VM, in addition to our default Wasm execution environment, that we want to deploy on the IC and an important part of this motion proposal.
EVM support will make it possible to deploy EVM-based smart contracts on the Internet Computer. Having EVM support brings about multiple benefits for the community, such as low cycle costs for running smart contracts, low finalization latency, and network effects of being able to deploy readily-available, time-tested, audited Solidity-based smart contracts, avoiding the liquidity bootstrapping process.
The main technical challenge in this area will be addressing the impedance mismatch between the asynchronous architecture of the Internet Computer and the synchronous EVM.

## 5. Key milestones 
As this is a multi-year R&D motion proposal, it is at the current time not possible to give detailed milestones. We expect that each of the features resulting from this R&D motion proposal will have similar milestones reflecting our engineering process: System design, MVP implementation, extensions to the MVP. The detailed milestones will be defined once the individual features will be worked on.

 ## 6. Discussion leads
Dieter Sommer (@dieter.sommer) is driving the proposal, and will be joined by Thomas Locher (@THLO) and Timo Hanke (@timo) for the forum discussions.

## 7. Why the DFINITY Foundation should make this a long-running R&D project
The functionalities we target with this motion proposal are not straightforward to implement and will likely be developed and rolled out in a staged fashion, starting with an MVP and adding additional functionality in multiple rounds later. We intend to roll out an MVP that provides value as quickly as possible so that our community can benefit from this. We think this is absolutely crucial due to the fast moving domain, particularly in the area of EVM-compatible blockchains. Advanced functionality will be added later on and provide additional value. This approach fits well into a multi-year R&D proposal: It will require original research to tackle the hard problems that are open in terms of their solution,whereas work on problems that merely require significant engineering efforts can be tackled sooner. We also intend to work tightly with our community w.r.t. the features associated with this motion proposal.

## 8. Skills and Expertise necessary to accomplish this
What we intend to provide as outcome of this motion proposal requires people with a plurality of different advanced skills:
* System design
* System-level and software engineering
* Algorithms, complexity theory
* Probability theory
* Cryptography
* Deep understanding of the IC and Ethereum
* Deep understanding of Internet Computer consensus
* API design

The following teams have been identifier of being involved:
* Research
* Networking
* Consensus
* Message Routing
* Execution
* NNS
* Security
* SDK

## 9. Open Research questions
We have already identified some of the research questions, the list will likely grow further during the work on the features:
* Trustless blockchain integration between the IC and Ethereum
* Consensus protocol extensions for the trustless integration
* Threshold cryptography
* Security modeling of the system
* Proving security of the system
* Questions related to the advanced system design
* Testing and providing a testing infrastructure for the users of the feature
* Addressing the impedance mismatch between the asynchronous IC and synchronous EVM

## 10. Examples where community can integrate into project
* Review proposals
* Provide feedback on the dev forum
* Submit NNS proposals
* Review technical designs
* Contribute to technical designs
* Review code
* Contribute code
* Participate in workshops on the initiative or its features
* Help us prioritize for the best benefit of the community

We intend to work closely with the community, particularly on some parts of the source code.

## 11. What we are asking the community
* Review comments, ask questions, give feedback
* Vote accept or reject on NNS Motion

-------------------------

Malefizer | 2021-12-20 09:34:07 UTC | #7

Is the integration with the current Ethereum 1.0 chain the priority or integration with Ethereum 2.0?
Maybe there should be two teams for each version. Since Eth2 is still in development there can be more cooperation with the Eth2 and influence to go to a certain direction, it has a political touch. Eth1 is more a classic integration effort without moving parts and requires only technical skills.

-------------------------

diegop | 2021-12-20 19:26:28 UTC | #8

Proposal is live! https://dashboard.internetcomputer.org/proposal/35635

-------------------------

dieter.sommer | 2021-12-23 19:08:23 UTC | #9

[quote="Malefizer, post:7, topic:9382"]
Is the integration with the current Ethereum 1.0 chain the priority or integration with Ethereum 2.0?
[/quote]

Good question! According to current thinking, we will first tackle Ethereum 1 which will likely also solve a part of a future Ethereum 2 integration. Ethereum 2 will likely still take some time until it will arrive in production.
You are completely right that Ethereum 2 has still many moving parts. How much influence on it do you think we could have in the light of an integration?

-------------------------

Zane | 2021-12-23 23:11:05 UTC | #10

With the upcoming BTC/ETH integration will it be possible to use IC as a L2? Will it be possible to do transactions using layer 2 solutions such as lightning network too or will it be limited to L1?

-------------------------

marrymosss | 2021-12-28 09:00:53 UTC | #11

I'm wondering how easy it will be to integrate into existing platforms such as WordPress, Shopify? Will there be special plugins created for such platforms?

-------------------------

dieter.sommer | 2022-02-22 13:10:40 UTC | #12

@marrymosss : Welcome to the forum and apologies for the (very) late response!

Platforms such as WordPress or Shopify are "traditional" HTTP(S)-based services. We are building a first version of the feature currently that will allow for an integration with HTTP(S)-based services: https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670

Have a look at this and participate in the discussions over there!

-------------------------

lastmjs | 2022-02-24 14:30:16 UTC | #13

Yes it should be possible to use the IC as both a sidechain and a place for L2s to be implemented. For example, rollup sequencers and validators, lightning nodes, really any scaling solution that is not built on the base layer blockchain itself I imagine could eventually be implemented on the IC to support the other blockchain.

-------------------------

NickM | 2022-03-09 17:50:56 UTC | #14

Hi, I don't know where to post this idea, but as it relates to ETH... here it is:

What if... what if we could create a sort of reverse ii token, ie publish an NFT (on any other chain, but obviously ETH first) containing a cryptographic hash of a GUEST Principle-ID that would provide access to Nuance, or any content for that matter, on the IC?

Might this reduce barriers to content hosted on the IC?

-------------------------

dieter.sommer | 2022-04-04 07:31:20 UTC | #15

[quote="NickM, post:14, topic:9382"]
What if… what if we could create a sort of reverse ii token, ie publish an NFT (on any other chain, but obviously ETH first) containing a cryptographic hash of a GUEST Principle-ID that would provide access to Nuance, or any content for that matter, on the IC?
[/quote]

Hi Nick!

I don't fully understand your idea, could you elaborate on it a bit more?

Thank you!

-------------------------

NickM | 2022-04-06 09:10:02 UTC | #16

Disclaimer ( :slight_smile: ) I am non-technical!

What I am thinking... there is no doubt that ETH, Matic, SOL, Palm, etc have well established communities, most of which use Metamask and ERC20, etc tokens. These communities are clearly crypto-centric, but also chain-loyal. 

Chain Loyalty in itself is a barrier to accessing other chains... my own experience is that I am 100% more likely to explore new chains that work with my existing Metamask than I am to spin up another wallet, e.g. Keplr, TronLink, Polkadot{js}, because asset management is so much easier if they are all under one login - I am a Grumpy Old Password Peep.

Let's take the idea one step further... mint ii Profile Tokens on every MetaMask compatible chain, and use these tokens to log in to OpenChat, DSCVR, DISTRIKT, ICEVENT, NUANCE etc... these tokens  will give MetaMask Peeps access to the IC stack (compute, storage, wallet, DeSo, DeFi, NFTs, etc.) WITHOUT asking them to sacrifice chain-loyalty. 

The original idea was to have a general token, which the above IC Dapps could publish on these other chains in order to bring content to these other chains - again, without asking these other-chain-peeps to spin up a new wallet. 

Reduce Barriers. Provide Access. Drive Adoption.

Edited grammar a bit.

**Final Edit: as an example ... here is my new ICNS landing page... every Crypto Peep would die for one of these IF they could get access VIA their chosen chain!**

https://nickmyers.icp.page/

THIS IS A WONDERFUL THING!

-------------------------

cryptoschindler | 2022-04-07 11:30:21 UTC | #17

very cool idea, there was a similiar example called "the wall" where you could login via metamask.

https://forum.dfinity.org/t/try-new-version-of-the-wall-out-now/6966?u=cryptoschindler

-------------------------

NickM | 2022-04-07 13:58:37 UTC | #18

Thanks for providing the link. That is a very cool proj of which I was unaware!

-------------------------

dieter.sommer | 2022-05-09 13:11:45 UTC | #19

Yes, indeed a really cool idea, along the lines of the "The Wall" project that @cryptoschindler mentions! Have discovered this myself only now because of asking around in the team regarding your idea (Many thanks to @alexa.smith for pointing this out to me!). Allowing people to login with MetaMask might get many folks try out the Internet Computer who would not do so otherwise, so might be a good catalyst for growing our customer base.

I discussed this already with the Internet Identity (II) team and we think that technically / architecturally that could be realized. However, II folks would prefer to have a mechanism in place to denote the authentication strength as it will be different when logging in with MetaMask when compared to the standard biometric login via WebAuthn as is default for Internet Identity currently. Then dApps could use this authentication strength to decide on the authorization granted at their discretion.

To preserve this idea, I just created a feature for authenticating with MetaMask to the Internet Computer in our internal backlog.

-------------------------

dieter.sommer | 2022-05-10 13:03:08 UTC | #20

Here's the original forum post and discussion related to "The Wall" mentioned above: https://forum.dfinity.org/t/the-wall-a-crossover-eth-ic-demo-dapp-next-js-rust-canisters/2738

And here's the link for those who haven't yet read through the "The Wall" posts: https://rivyl-6aaaa-aaaaf-qaapq-cai.raw.ic0.app/

-------------------------

dieter.sommer | 2022-05-10 13:54:50 UTC | #21

There's another project that allows to login on the IC with an Ethereum wallet. Thanks to @domwoe for pointing this out!

https://astrox.me/

-------------------------

neeboo | 2022-05-13 04:47:49 UTC | #22

Thanks for mentioning our project, and we shall find a better approach of interacting with other blockchain on IC.

-------------------------

dieter.sommer | 2022-05-13 07:43:13 UTC | #23

That sounds great, cannot await to see this demo!
It's really cool to see interoperability things being worked on by the community!

-------------------------

cryptodriver | 2023-01-12 07:31:22 UTC | #24

How is this going now? Anybody can share us with some new information?

-------------------------

dieter.sommer | 2023-01-12 09:01:19 UTC | #25

There's been silence here on this topic for quite some time as we have been focussing on getting the integration with Bitcoin out of the door. We have started discussions on how an Ethereum integration should look like. We have two important building blocks already that can help facilitate an Ethereum integration:
* Threshold ECDSA: required for any reasonable form of secure Ethereum integration
* HTTPS outcalls: may be a building block for Ethereum integration, depending on the architecture.

For now, you can definitely use the threshold-ECDSA and HTTPS outcalls features to roll your own Ethereum integration based on Ethereum cloud nodes.

Discussion on Ethereum integration is to start here soon!

-------------------------

WalterCheung | 2023-01-12 23:51:05 UTC | #26

Any update for this one?
* Addressing the impedance mismatch between the asynchronous IC and synchronous EVM

-------------------------

dieter.sommer | 2023-02-14 20:34:45 UTC | #27

Dear colleagues!

Following up on our discussions of last week's ICP.Lab in Zurich, which some of you have attended, let me summarize the outcome of the sessions related to Ethereum integration.

We decided to go for a 2-Phase approach, to have tangible results within weeks, not months.
* Phase 1: Short-term integration based on HTTPS outcalls to Ethereum cloud nodes
  * Low-effort for implementation
  * Available within a few weeks
  * Compromise w.r.t. trust model due to using cloud-based nodes
  * Limited throughput
* Phase 2: Full Ethereum integration in the protocol stack
  * Substantial effort due to integration with the IC protocol stack
  * Will take 4+ months to design and implement
  * Strong trust model due to not adding extra assumptions besides the IC and Ethereum trust assumptions
  * Good throughput

Both Phases will build on the already-available chain-key ECDSA signatures, based on threshold ECDSA.

We have created a Discord channel for the discussions: https://discord.com/channels/748416164832608337/1075067736285266130
Anyone interested in the subject is invited to join the discussion!

Let me tag the attendees from the ICP.Lab meeting whose user ids I could find:
@brutoshi, @simpson, @cryptoschindler, @Maxfinity, Michael, Bruce, Punk, Olliver, Paul, @zire, @lomesh, @benji, @domwoe, @TimHermann, @Manu

Discussions can be had here on the forum or in the Discord channel. The forum lends itself better for longer (technical) posts with dense content, Discord for the more interactive discussions.

Further details and materials from the ICP.Lab will be posted shortly.

-------------------------

dieter.sommer | 2023-02-14 17:59:29 UTC | #28

These discussions may, among others, also be interesting for @lastmjs, @skilesare, @diegop, @Zane, @jzxchiang, @timo.

-------------------------

dieter.sommer | 2023-02-14 19:04:16 UTC | #29

Here are the slides with some ideas regarding Phase 1:
https://docs.google.com/presentation/d/1K5TcPIj7nm3zZTbU6Jymx3BI-6K0dmGQWhvcEdNhqk8/edit#slide=id.g126651c955a_0_790

**Next steps:**
* Refine and agree upon the design for Phase 1
* Put together the available code mentioned at the ICP.Lab
* Decide who will help in building this

-------------------------

dfisher | 2023-02-14 21:59:29 UTC | #30

Amazing! Glad to see Dfinity has made it a high priority. 

For the ckEth tokens, do we need to wait for the full integration or can that be done with the intermediary solution?

-------------------------

lastmjs | 2023-02-15 02:25:59 UTC | #31

The basic ideas here are fantastic. I especially like that there's no immediate rush to deploy the integration canister or ck canisters under the NNS. Publishing the code and letting the community decide what to do with these is great.

-------------------------

domwoe | 2023-02-15 07:30:34 UTC | #32

As part of the Developer Grants program, we'll provide a USD 5k bounty (paid in ICP) for the implementation of Phase 1.

-------------------------

ccyanxyz | 2023-02-15 09:15:16 UTC | #33

Hi everyone, we are Rocklabs and have been exploring this direction for a while now, would love to provide some input here:

Project Omnic basically implemented Phase 1, which enables message passing between EVM chains and the Internet Computer, the pic below shows how it works:
![Screen Shot 2023-02-15 at 16.48.23|690x379](upload://4JiwFJlYmw5yF4bGwTeDf0zL6Pg.png)

There are 3 major components:
1. On each EVM chain, there is a gateway contract, responsible for receiving crosschain message requests from application contracts, message hashes are inserted into a Merkle tree. On the other hand, gateway contract is responsible for receiving crosschain messages from other chains, and notify application contracts on the local chain about the message. Gateway contracts are controlled by the Omnic Proxy Canister on the IC via threshold ECDSA, only Proxy Canister can instruct gateway contracts to process crosschain messages.
2. Offchain relayer fetches crosschain messages from EVM chains, and generate a Merkle proof for each message, then submit the message with merkle proof to the Omnic Proxy Canister. The relayer is completely permissionless, which means everyone can run a relayer, this is because the Proxy canister will verify every message so we don't have to trust the realyer.
3. Omnic Proxy Canister is the core, responsible for verifying and handling crosschain messages, the proxy canister controls several gateway canisters on the IC, each EVM chain has a dedicated gateway canister responsible for periodically fetching crosschain message merkle tree root via canister HTTP outcalls, the merkle root is then used for crosschain message verification.
If a crosschain message & proof submitted by the relayer passed the verification, then proxy canister will route the message to the destination chain, if the destination is IC, it'll call the application canister to notify the message, if the destination is another EVM chain, it'll send a tx to the destination chain, instruct the gateway contract on the destination chain to notify the application contract about the message.

**Trust issue**: the root of trust in this system is the validity of the merkle tree root hash in the gateway canister, to prevent single point of failure, gateway canister will choose several RPC providers from a RPC pool, then fetch the root hash from these multiple different RPC providers and compare the result to ensure the validity of the root hash.
**Why not directly fetch crosschain messages via canister HTTP outcall**: in the above design, we use an offchain relayer to submit crosschain messages and proofs, then verify messages in canister, the main reason is cycle cost issue, fetching crosschain messages via HTTP outcall can be expensive, especially if you want to eliminate the single point failure issue you have to fetch a crosschain message from multiple RPC providers, the cycle cost can be expensive.

The implementation repo is here: https://github.com/rocklabs-io/omnic, and we've already built a token bridge on top of Omnic, users will be able to bridge token from EVM chains to the IC.
Internal test version of the token bridge: https://test.omnic.network, explorer: https://scan.omnic.network, currently supporting Ethereum Goerli Testnet and Polygon Mumbai Test. We'll announce the official public testnet soon, the data in the internal test version will be cleared by then.

Note: Omnic is for crosschain message passing, if you only want to query data from or send transactions to EVM chains, we have a library called ic-web3: https://github.com/rocklabs-io/ic-web3

We welcome comments and suggestions from the community! We'd love to provide help on the Ethereum Integration direction!

-------------------------

dieter.sommer | 2023-02-15 10:21:47 UTC | #34

[quote="dfisher, post:30, topic:9382"]
For the ckEth tokens, do we need to wait for the full integration or can that be done with the intermediary solution?
[/quote]

In my opinion this can already be done with the intermediate solution. The idea would be that in few weeks, when the Phase-1 solution is there, one can start building ckETH and launch it. Both should be acceptable with the Phase-1 solution.

[quote="ccyanxyz, post:33, topic:9382"]
Project Omnic basically implemented Phase 1, which enables message passing between EVM chains and the Internet Computer
[/quote]

@ccyanxyz: Thanks for providing all this information on Omnic and related work! :-)

Everyone: Would (parts of) this solution be something to use instead of implementing Phase 1 as planned? Need to look into this in some more detail.

-------------------------

ccyanxyz | 2023-02-15 11:16:58 UTC | #35

Omnic is more for the needs of generalized crosschain dApp, ckETH can be one application built upon it, in fact, the Omnic token bridge already did this.

-------------------------

JaMarco | 2023-02-15 15:12:49 UTC | #36

[quote="dieter.sommer, post:34, topic:9382"]
@ccyanxyz: Thanks for providing all this information on Omnic and related work! :slight_smile:

Everyone: Would (parts of) this solution be something to use instead of implementing Phase 1 as planned? Need to look into this in some more detail.
[/quote]

Yea it seems like Omnic solution already handles phase 1.

-------------------------

Roman | 2023-02-15 22:15:29 UTC | #37

Dear @dieter.sommer, 

Sorry about my question if it is dumb, but see this as a non dev question : 

Since the ckBTC functionality is described as « built upon the native Bitcoin integration », if a CkETH is launched before the native Ethereum integration, will we keep it even once the Ethereum integration achieved ? Or will we « update » this CkETH by eliminating the need for intermediaries as a CkETH issued and redeemed through canister smart contracts built upon the native Ethereum integration itself ?

I guess the answer is here :
[quote="dieter.sommer, post:27, topic:9382"]
Both Phases will build on the already-available chain-key ECDSA signatures, based on threshold ECDSA.
[/quote]

But preferred to ask ! Because we had chain-key ECDSA signatures before the bitcoin native integration too and yet did not launch CkBTC before the native Bitcoin integration.

-------------------------

benji | 2023-02-16 14:15:55 UTC | #38

tECDSA and bitcoin integration are 2 different things. Bitcoin integration uses the tECDSA feature.

ETH integration will happen in 2 forms, an HTTPS one, and a native one. Apps are free to choose whichever that suits their needs. We will aim for a maximally compatible interface between the 2 implementations.

-------------------------

Roman | 2023-02-16 15:33:42 UTC | #39

Thanks a lot for your answer @benji 🙏

[quote="benji, post:38, topic:9382"]
tECDSA and bitcoin integration are 2 different things. Bitcoin integration uses the tECDSA feature
[/quote]

I got that. And as I read it, the tECDSA is a building block of the native BTC integration and will be one of the native ETH integration. 

But my misunderstanding was : as the ckBTC functionality [is described as built upon the Bitcoin integration](https://wiki.internetcomputer.org/wiki/Chain-key_Bitcoin), I was thinking that the ckETH functionality would be built upon the Ethereum integration. So if we launch CkETH before such a native integration, I was thinking that it would not obey to the same logic as CkBTC did (wait for the native integration of X to base upon it CkX) and by consequence would not be to ETH what CkBTC is to BTC.

-------------------------

Maxfinity | 2023-02-17 01:35:48 UTC | #40

Hi ccyanxyz, do you have any plans to continue Omnic? I think we could be very interested to work with you and use your solution.

-------------------------

ccyanxyz | 2023-02-17 08:21:10 UTC | #41

Thanks for being interested in Omnic!
Yeah, we will continue to improve the solution and maintain the project.
You can contact me at ccyanxyz@gmail.com to discuss your needs.

-------------------------

dieter.sommer | 2023-02-18 12:49:07 UTC | #42

Dear community!

We have meanwhile followed up on the [post by @ccyanxyz from Rocklabs](https://forum.dfinity.org/t/long-term-r-d-integration-with-the-ethereum-network/9382/33) to see how their products could be used. The outcome is, in short, that a lot that is needed for Phase 1 is there already as part of their [ic-web3 library](https://github.com/rocklabs-io/ic-web3).

Let me first reiterate what the goals of Phase 1 and 2 are. Phase 1 is intended to bring a temporary Ethereum integration API to the community upon which products can be built. Phase 1 realizes an Ethereum integration based on HTTPS outcalls to Ethereum cloud services such as Infura. Phase 2 provides the same (or a very similar) API, but implements it via a native, i.e., trustless, integration with the Ethereum network. Phase 2 may take 4-6 months, so it is important to have something for the community earlier, therefore we all need Phase 1.

# What would the API look like?

Current thinking is that the following APIs should be made available:

* Ethereum JSON RPC API (Raw API): This is the main API the Phase 2 integration will expose. It essentially is an Ethereum JSON RPC API accessible on chain, that looks and feels as if it were offered by an on-chain full Ethereum node. The raw API is exposed by the management canister and implemented as part of the Internet Computer blockchain.
* Managed API: The managed API is an API that manages the submission of Ethereum transactions. This is not an easy task when doing off chain Ethereum transactions, and harder on chain due to extra latency, e.g., through t-ECDSA and XNet communication with the Ethereum subnet. The managed API helps automate a lot of the tasks behind successfully submitting Ethereum transactions, where its clients only specify a policy on how quickly / costly they want the tx to be submitted. The managed API can either be implemented as part of the management canister API or as a library in user space. A management canister implementation seems much more powerful as it needs to repeatedly interact with Ethereum for a single submission, which is hard to achieve transparently in a library. Recommendation: part of system implementation
* User-space APIs: The right abstraction for many use cases is something like a [web3](https://web3js.readthedocs.io/en/v1.8.2/) or [ethers](https://docs.ethers.org/v5/) API. This API is provided by a user-space library and is clearly not part of the system-provided API.

![Ethereum_APIs_Phase_1_and_2|690x381](upload://yJ2wc8ynalbx7zeYncgTHPY2Dl.png)

![Phase_1_Deployment_options|690x379](upload://xTfy9rA92EbeWk5c4TLnwhYaf90.png)

# Implementing Phase 1

Rocklabs have built the [ic-web3](https://github.com/rocklabs-io/ic-web3) library which builds on the [rust-web3](https://github.com/tomusdrw/rust-web3) library and enables HTTPS outcalls as transport for communication to Ethereum cloud nodes like Infura. This already does a lot of what was discussed as goals for Phase 1.

**Tasks / required changes**

* The ic-web3 library offers a web3 API out of the box. This is a nice addon, but it also needs to expose the JSON RPC API to its clients to address our use case of having the same API as is planned for Phase 2.
* A managed API for tx submission is likely not part of an initial release, but should be added on top to be on par of what we plan to have for Phase 2. Code for this may be reusable for our Phase 2 implementation and we can shorten the time to market for Phase 2 by working on this already now.
* The handling of the API key in transit should be improved: Currently, the API key is part of the URL. It is preferred to have it as a header for various reasons related to information security and http protocol best practices.
* The way the API key is provided to the library should be adapted as currently it is embedded in the source code and thus trivially visible to anyone and up for being used by others, possibly resulting in the quota depletion or DoS. A preferable, yet simple, approach is that an authorized principal can provide the API key via a canister method to the canister that runs the library. Currently, subnet blocks are not public, so this is a viable approach to protect the API key as best as we can. Compromised node providers will still see the API key as it is in the canister's storage.
* Building a canister that offers the JSON RPC API to other canisters and uses the library internally. Everyone can deploy their own version of this canister. The canister offers a mechanism to set an API key and Ethereum cloud provider.
* Optional: Extension of the library and canister to use multiple Ethereum cloud providers to reduce trust assumptions on a single party.
* Define cycles charging for the different RPC endpoints for the library and canister.
* For Phase 2: Provide an "IC message" transport implementation of ic-web3 that uses the native implementation of Phase 2 instead of HTTPS outcalls. This can be used as web3 library in canister projects. Explore also the user of the Rust ethers library as another option. Motoko: out of scope for now, t.b.d. separately

# Differences between Phase 1 and Phase 2 API

The idea is that the API of Phase 1 and Phase 2 are as similar as possible. However, due to the differences in implementation, there may be some (subtle) differences. A non-exhaustive list of currently-known differences is presented next:
* Pricing is likely different.
* Latency is likely different, which can have an effect on tx submission and gas pricing.
* Under bad subnet conditions, the Phase 1 API may not behave as expected for calls that are in general not deterministic, Phase 2 will offer stronger mechanisms here.
* There may be a difference on which RPC endpoints are exposed in Phase 1 and 2. This should not affect the majority of use cases, though.

# Next steps

* As the ic-web3 library is a perfect fit for for what we need, we propose to move ahead with the Rocklabs team to adapt the library so that it fulfills Phase 1 requirements and build a canister around it to have a standalone deployment of the API. A bounty / bounties will be available for supporting the work.
* Rocklabs & the overall community & DFINITY work together to make this happen.

Do you see any requirements we may have missed or do you think the API should be different?
If so, please let us known now before implementation starts.

-------------------------

lastmjs | 2023-02-18 18:00:49 UTC | #43

[quote="dieter.sommer, post:42, topic:9382"]
Ethereum JSON RPC API (Raw API): This is the main API the Phase 2 integration will expose. It essentially is an Ethereum JSON RPC API accessible on chain, that looks and feels as if it were offered by an on-chain full Ethereum node. The raw API is exposed by the management canister and implemented as part of the Internet Computer blockchain.
[/quote]

I think it's extremely important to consider offering a query version of this API. This will be very beneficial for frontend and backend canister applications that just want to query the Ethereum blockchain. Composite queries and client http queries would then have a rock-solid always-available Ethereum API, which would be fantastic.

Of course for actually submitting transactions the update API would be necessary, and for ensuring the highest level of security when querying the data.

-------------------------

mparikh | 2023-02-18 18:06:56 UTC | #44

Would this query api be materially different than https://thegraph.com/en/?

-------------------------

lastmjs | 2023-02-18 18:08:01 UTC | #45

[quote="dieter.sommer, post:42, topic:9382"]
Managed API: The managed API is an API that manages the submission of Ethereum transactions. This is not an easy task when doing off chain Ethereum transactions, and harder on chain due to extra latency, e.g., through t-ECDSA and XNet communication with the Ethereum subnet. The managed API helps automate a lot of the tasks behind successfully submitting Ethereum transactions, where its clients only specify a policy on how quickly / costly they want the tx to be submitted. The managed API can either be implemented as part of the management canister API or as a library in user space. A management canister implementation seems much more powerful as it needs to repeatedly interact with Ethereum for a single submission, which is hard to achieve transparently in a library. Recommendation: part of system implementation
[/quote]

For phase 1 I can see this as being implemented in a canister with the same API that the management canister will eventually expose. This canister would communicate with the tECDSA subnet and use http outcalls to submit the final signed transaction to Ethereum.

-------------------------

lastmjs | 2023-02-18 18:10:22 UTC | #46

Yes it would be quite different in that it's just exposing the raw standard Ethereum JSON-RPC API but callable as a query and not an update. That being said, there's also an official (I believe, Geth exposes it and there's an EIP if I remember correctly) GraphQL API for Ethereum, and it would also be fantastic to expose that.

The Graph goes far beyond the basic JSON-RPC/GraphQL Ethereum APIs and provides GraphQL APIs to indexed blockchain data. Phase 1/Phase 2 wouldn't be doing any kind of blockchain indexing, just offering the raw capabilities. We could then build things like The Graph on top quite easily, and probably even more easily with Sudograph.

-------------------------

lastmjs | 2023-02-18 18:13:52 UTC | #47

The GraphQL EIP is not standard yet: https://eips.ethereum.org/EIPS/eip-1767 and Geth seems to be the only major client with an implementation. It would be nice, but understandable if left out.

The main point is making the JSON-RPC API queryable.

-------------------------

lastmjs | 2023-02-18 18:18:45 UTC | #48

[quote="dieter.sommer, post:42, topic:9382"]
through t-ECDSA and XNet communication with the Ethereum subnet
[/quote]

What is this Ethereum subnet? I think we should consider not having special subnets for these types of operations. IMO having a tECDSA subnet is a disappointing design decision, as essentially the tECDSA subnet is its own blockchain and all traffic must be routed through it. I much prefer the idea of each subnet having its own specific Ethereum functionality, allowing canisters within the subnet to not have to rely on the security of another subnet or any other implications of xnet operations.

-------------------------

lastmjs | 2023-02-18 18:23:40 UTC | #49

[quote="dieter.sommer, post:42, topic:9382"]
the Ethereum subnet
[/quote]

Maybe I'm behind on the Bitcoin integration architecture. In early designs I know that each replica was connected to Bitcoin and each subnet would come to consensus on the relevant state of the Bitcoin blockchain. Has this architecture changed? Is there one Bitcoin subnet now? Or does each subnet have its own Bitcoin canister?

-------------------------

dfisher | 2023-02-18 22:58:58 UTC | #50

Hi @dieter.sommer, Roman asks an interesting question which I also had. 

If we can build ckETH using Phase 1, once Phase 2 is complete will there be a migration of the old ckETH to the new and improved ckETH? Or will it somehow replace it? How does this work?

-------------------------

hokosugi | 2023-02-19 11:30:50 UTC | #51

I had expected Ethereum integration to be a light client or full node built client method rather than a JSON RPC API method. Are there any plans to implement these client methods in the future?

-------------------------

dieter.sommer | 2023-02-19 17:22:21 UTC | #52

[quote="Roman, post:37, topic:9382"]
Since the ckBTC functionality is described as « built upon the native Bitcoin integration », if a CkETH is launched before the native Ethereum integration, will we keep it even once the Ethereum integration achieved ? Or will we « update » this CkETH by eliminating the need for intermediaries as a CkETH issued and redeemed through canister smart contracts built upon the native Ethereum integration itself ?
[/quote]

[quote="dfisher, post:50, topic:9382"]
Roman asks an interesting question which I also had.

If we can build ckETH using Phase 1, once Phase 2 is complete will there be a migration of the old ckETH to the new and improved ckETH? Or will it somehow replace it? How does this work?
[/quote]

This is an excellent question and I cannot give you a definitive answer here. In my opinion it is the community that would need to decide whether a chETH canister running in production would be shifted over from the Phase-1 to the Phase-2 implementation. The amount of ETH in such canister is probably a guiding light for this as well as how many cloud providers we have queried for each ETH balance check. Regardless of this, implementation of ckETH and the like can already be started soon, there will be a testnet phase etc., so the proposed approach can in any case help cut time to market for this.

Would like to hear what your opinions on your own questions would be.

[quote="lastmjs, post:43, topic:9382"]
I think it’s extremely important to consider offering a query version of this API.
[/quote]

This would be nice, however, the use of HTTP outcalls curently prevents the use of queries. The responses of HTTP outcalls inherently need to go through consensus.

[quote="hokosugi, post:51, topic:9382"]
I had expected Ethereum integration to be a light client or full node built client method rather than a JSON RPC API method.
[/quote]

The light client API of Ethereum is currently still worked on heavily and also the trust model of a light client is weaker than that of a full client which we are building on in Phase 2. A full Ethereum node built on chain currently exceeds what a single canister can do and thus would be too large of an engineering effort. Thus, both of those approaches are not suitable for a reasonably fast go to market. Note, however, that there is a bounty out regarding a [design for an on-chain Ethereum light client](https://github.com/dfinity/grant-rfps/issues/25). We think that the light client approach might be interesting once the light client APIs are settled and thus would like to have this explored.
@hokosugi Can you share what your concerns are with the approach proposed for Phase 2? It's completely trustless and probably the most scalable design.


[quote="lastmjs, post:48, topic:9382"]
What is this Ethereum subnet? I think we should consider not having special subnets for these types of operations.
[/quote]

An Ethereum subnet is a subnet that gets enabled w.r.t. Ethereum integration, i.e., runs Ethereum nodes next to IC nodes. This is something we want to have on one or a few subnets, but not on every subnet. The overhead of an Ethereum subnet is quite considerable. I understand your concerns that you now need to trust multiple subnets, but multi-subnet dapps are one of the guiding principles behind the IC in my opinion. But to make it clear, you could enable Ethereum integration on many subnets if you really wanted to.

-------------------------

dfisher | 2023-02-19 18:29:36 UTC | #53

Thanks for the thoughtful response.

I am pretty sure most people (including myself) would like the Phase 1 ckETH to be migrated over to the Phase 2 ckETH. From a user perspective, it would be great to abstract away as much as possible the transition from Phase 1 to Phase 2.

We want to be able to announce an Eth integration now and then the tech improves over the course of the year. It will be fairly disruptive to have multiple types of ckETH and people will get confused between Phase 1 and Phase 2, particularly newcomers to the IC.

Is it possible to just have all the stuff happen in the background?

-------------------------

Roman | 2023-02-22 11:28:55 UTC | #54

Thank you a lot for answering @dieter.sommer 🙏

My opinion will be unpopular, without a doubt. 

But to facilitate your reading and save your time, here is my question at the end of my post : *"Could you tell us if you see some advantages to bypass phase 1 and start with phase 2, taking the time, and after this only implement CkETH following the same order as for CkBTC ? Or for you, there is none dilemma and you are 100% to start with phase 1 ?"*

Now, my opinion : 

I would prefer that the phase 2 become the phase 1 and that only once this phase accomplished, CkETH be built upon this native integration. This, in order to follow the same founded logic behind BTC integration and CkBTC development. And currently, I don’t see any good reason to not follow the same order. 

Even if it was possible to launch a first CkETH before Phase 2, and after this, « refresh  » the CkETH by building it again relying on the phase 2 development, it : 
1) could look disordered and make people wondering « why did they reverse the order in the first place ? » ;
2) could look inconsistent with BTC/CkBTC order launch ;
3) would add complexity to the whole process of integration and cost much more resources to Dfinity than if they just had kept the same order that for BTC/CkBTC. 

I feel like we put the cart before the horse here. 

The BTC integration is a marvel and the CkBTC a promising success built upon it. Dfinity took the time yes, but they did well, because it has been launched once only, following a well justified order : technically and marketingly justified and understandable by everyone, even the non dev public (very important). Given this success, why don’t we just respect the same order even if it takes more time ? 

In my humble opinion, here is why, but if I am wrong, please tell me.

People have been waiting for BTC integration for a long time. During that whole time, Dfinity have been heavily pressured and even harassed. We were in a fuddy environment, IC was attacked everywhere by everyone and you were being daily bullied by some hysterical people on Twitter and here. My point is I am afraid that this past is being determining Dfinity about the ETH integration and CkETH timeline and by consequence their order. 

Maybe I am wrong, but I feel as if the ETH integration had been very quickly announced after the BTC integration in Twitter messages. People were even surprised by this proximity. We were told « it will be quickly out (in march), we could do it very soon, let’s do it all together. Help us people, you are welcome. Take it, this integration will be yours ». 

My whole point is in these announcements : I am afraid that Dfinity have been like traumatized by the « accusations » of being slow, being centralizing the chain (by owning the process of the integration), being prioritizing BTC integration rather than doing other stuff presumed more important things by some fellows, etc. 

Personally I have disagreed with each one of these accusations, and we are blessed that Dfinity prioritized the BTC integration and that they took the proper time to sort it out in due time and in due shape (even if I noted the acceleration in the last days, maybe to reassure the market and reward the patience of people). When I read that other devs could have done this while Dfinity should have done other stuff, we are forced to recognize that none dev did and maybe no one would have done it. We will never know.   

Today, I see a sort of acceleration to integrate ETH in a way or another, and the fastest possible, so much that CkETH would come firstly and the native integration after only. At least,, I would be like @dfisher in favor of finally having a proper CkETH developed with the same logic that CkBTC’s, so by not keeping the first version of CkETH which would be launched before the native integration. But ideally, i would be to start with phase 2 bypassing phase 1 and being patient to do things orderly and properly. How could we justify that a first CkETH would have been launched before being properly launched, « proper » meaning « following the same logic that CkBTC : waiting for the native BTC integration for well founded reasons ». 

This is why I would prefer that Dfinity keep the same state of mind that they had for BTC integration, because it is clearly a success. Yes it took time, but now it is done and properly done. I feel uncomfortable with the narrative of the ETH launch, being divided in phases looking like starting with the end and finishing with the beginning. Etc. And I am afraid that it creates confusion, complexity and confusion, notably to the newcomers and the haters. 

I would prefer that the native ETH integration come first, and once sorted out, that the CkETH is built upon it. 

We have plenty of time before the next BTC halving. The bear market is still here. And anyway, Dfinity should stay the master of the clocks (« Rester maître des horloges ») by not being in a hurry, not being dictated the rythme and the order. This integration is too important to be « improvised ». We will have plenty of chains/tokens to integrate to let non Dfinity dev to operate their magic, but the first two ones are too important to improvise whereas a crowned success happened under Dfinity lead. 

To summary : this integration should be driven EXACTLY as BTC’s. We should see the enthusiasm about BTC integration and CkETH to do exactly the same thing with ETH. There is no rush. The only rush is to do things properly. As a researcher myself (other domain), the main strength of IC is that its team is constituted of searchers, listening to the time of the research, not the contingencies of the markets. And it is for the best. Some doers will bring another and complementary spirit to IC, but Dfinity must stay as they are, keeping their searchers state of mind, doing things taking the necessary time rather than listening the time that the investors can psychologically handle.

**Could you tell us if you see some advantages to start with phase 2, taking the time, and after this implement CkETH ? Or for you, there is none dilemma and you are 100% to start with phase 1 ?**

I genuinely probably miss a point, so don’t hesitate to tell for which technical reasons you don’t proceed just like with BTC/CkBTC. But if it is only political or « marketingal », you should be in warrior mode like you did, for our greatest happiness.

-------------------------

dfisher | 2023-02-19 21:20:46 UTC | #55

To be clear, I think we should do Phase 1 quickly and then Phase 2 later, but for ckETH I think the user shouldn’t notice the difference when the migration happens (if that’s possible).

-------------------------

lastmjs | 2023-02-20 13:50:55 UTC | #56

[quote="dieter.sommer, post:52, topic:9382"]
This would be nice, however, the use of HTTP outcalls curently prevents the use of queries. The responses of HTTP outcalls inherently need to go through consensus.
[/quote]

Would this not be possible in phase 2? Does phase 2 include a full Ethereum archival node? What type of node will phase 2 enable on the IC?

-------------------------

lastmjs | 2023-02-20 14:00:41 UTC | #57

I would think this is very possible. Basically phase 1 has certain security properties and trade-offs, and phase 2 has most likely better security properties and trade-offs. If the community wants to build and maintain ckETH it should be a seamless integration, and behind-the-scenes phase 2 will simply increase the security.

If ckETH is an ICRC1 then the interface shouldn't ever have to change, assuming the NNS or some other mechanism can upgrade the ckETH canister(s).

That being said, I have issues with the NNS having write access to these canisters, but perhaps that's another topic for another time.

I think I've got the general idea correct here, but @dieter.sommer please correct me if I got anything wrong.

-------------------------

domwoe | 2023-02-22 12:20:06 UTC | #58

[quote="lastmjs, post:56, topic:9382"]
Would this not be possible in phase 2? Does phase 2 include a full Ethereum archival node? What type of node will phase 2 enable on the IC?
[/quote]

I don't think that we are targeting an archival node, but probably a full node that prunes transaction history regularly. 

On queries: AFAIK, we are currently thinking to use the HTTPS outcalls implementation internally, but each replica will route the request to its co-located Ethereum node. So queries wouldn't be directly possible, but you could in principle cache (some part of the) ETH state in a canister to make it available as a query (at least on the same subnet for composite queries).

-------------------------

heyuanxun | 2023-02-25 05:22:16 UTC | #59

Does phase 1 complete?
Any Update?

-------------------------

Maxfinity | 2023-02-25 09:31:15 UTC | #60

[quote="Roman, post:54, topic:9382"]
To summary : this integration should be driven EXACTLY as BTC’s. We should see the enthusiasm about BTC integration and CkETH to do exactly the same thing with ETH. There is no rush. The only rush is to do things properly. As a researcher myself (other domain), the main strength of IC is that its team is constituted of searchers, listening to the time of the research, not the contingencies of the markets. And it is for the best. Some doers will bring another and complementary spirit to IC, but Dfinity must stay as they are, keeping their searchers state of mind, doing things taking the necessary time rather than listening the time that the investors can psychologically handle.
[/quote]

We are increasingly living in a cross-chain world. As such, we should aim to not just integrate with the Ethereum network, but design this integration from the ground up to target all possible EVM-compatible networks. It's not just enough to provide an Ethereum integration, there's Arbitrum, Polygon, Optimisim, Coinbase's L2, Binance Smart Chain, etc. Most DeFi activity is taking place beyond the confines of Ethereum. And once the Ethereum integration is complete, the community will naturally ask for further integrations.  From this perspective, it would be great to use HTTP outcalls to accommodate as many different networks as possible. Let's be driven by pragmatic business decisions. 

Before we start building this on the IC, we should review the design decisions of other oracle networks, for instance ChainLink. With ChainLink deployments, you set up your own network of nodes, each node runs something similar to a docker container and has access to its own private state, e.g. can privately access its own API keys. 

From this perspective, it is easy to see what is missing for both HTTP outcalls and the ETH integration, we need a way to direct different API keys and/or state to different nodes. As a user I should be able to set API key 1 to a subset of nodes, API Key 2 to another subset etc. With this feature cross-chain integrations like Omnic, used for bridging tokens, become secure; without it, I predict we will have major outages and DOS attacks on bridged tokens in the future.  Currently, our scheme is not decentralised as a single node provider can DOS most HTTP outcalls that use an API key.

@dieter.sommer @Manu @benji @domwoe

-------------------------

dieter.sommer | 2023-02-27 10:38:00 UTC | #61

@Roman, @dfisher, @lastmjs, all: Thanks a lot for your thoughts, and taking the time to write them down! Apologies for my late response, I am still recovering from a virus infection.

@Roman: My interpretation of your thoughts, at a high level, is that we should do the Ethereum integration diligently, do things properly, and not unnecessarily rush the integration. In other words, repeat the good things of the BTC integration. That's the high-level semantics I get out of your arguments, abstracting from the concrete ckETH discussion. Please correct me if this interpretation is wrong. I could not agree more to this interpretation actually!

Now let's discuss the proposal of Phase 1 and Phase 2 of the Ethereum integration. Phase 1 is thought of as an instrument to quickly make a first implementation of the API available to everyone in the community who wants to use it. The integration builds on HTTPS outcalls to one or more Ethereum cloud services like Infura, or QuickNode, thus has clearly a weaker trust model as Phase 2, but still is a solid implementation of an integration — just not trustless. For Phase 1, much of what is needed is there already in the form of the [ic-web3 library](https://github.com/rocklabs-io/ic-web3) by Rocklabs, which is already open source. The idea for Phase 1 now is to issue a grant to Rocklabs to retrofit the library to offer the same API, or one the is very close to the one for the Phase-2 integration. People will be able to build already on the API of Phase 1 early on. From this perspective, Phase 1 is analogous to the developer preview of the Bitcoin integration which was launched early on with the API close to the final one so that people could already build on it. The Bitcoin developer preview, however, did not do a real integration yet, so was less powerful than a Phase 1 of the Ethereum integration, which gives people more options on what they can do with it.

Your forum post was focussing on ckETH as application case for Ethereum integration. In my opinion, ckETH is only one use case, granted, a very important one, but there are many more: ckUSDC, ckUSDT, NFTs etc. One of your main assertions is that we should not launch ckETH before Phase 2 is complete. Thus, we should not transition ckETH from a weaker trust model of the integration (Phase 1) to a stronger one (Phase 2), but only launch with the strong one when Phase 2 is available. This definitely has some very valid points, e.g., avoid the reduced trustworthiness of the ckETH state acquired through Phase 1 integration vs Phase 2. From this perspective, your argument makes a lot of sense and ckETH's strategy needs further discussion.

Continuing the ckETH discussion, a ckETH implementation will not be ready tomorrow: Someone needs to build an ERC-20-based minter, ideally customizable to any ERC-20 token, the code needs to go through a thorough security review, needs to run in beta phase on an Ethereum testnet for a while, and only thereafter can be launched for Ethereum Mainnet. Also, the question is whether DFINITY should build the ckETH minter canister, as it did for ckBTC, or the community should do it? That's also something that is not yet clear, at least to me. Thus, for me, the ckETH question is not even the most important and most pressing one, it is one use case of many and its own timing dictates in many ways when it can be launched in production. Now to the concrete question: If ready, should it launch before Phase 2 is ready? I don't know, this is actually a really tough question. Having a clean trust model without a migration to Phase 2 vs. a shorter time to market and our DEXs being able to use it earlier. An alternative is to have a preliminary chain-key Ethereum implementation that can bridge the gap towards the final launch. We had this for Bitcoin also in the form of icBTC by ICLighthouse.

My thinking goes into a direction that a community-launched chain-keyed Eth, lets call it icETH for now, based on Phase 1 might be a great idea. That is, Phase 1 is built and launched quickly so that everyone can start integrating their dapps with Ethereum. The API will stay (almost) the same for the Phase 2 launch. Then a first iteration of chain-key Ethereum in the form of icETH can be started with as well. And dapps can start integrating with icETH already. All of this helps reduce the time to market for the Phase 2 and Phase-2-based ckETH without severe drawbacks. The decisions are left to the individual community members on whether to adopt an early version of chain-key Ethereum as soon as possible and build upon it or whether to wait for the Phase 2 and a final ckETH to be ready. In any case, Phase 1 is an accelerator that does not cost us much, but helps a lot in getting the final API out so that our community can start building upon it. So it's in many ways the most decentralized approach where everyone can do what they deem best for their projects. No one imposes anything on anyone. All we do now is to work with the community to enable this flexibility and shortening of the time to market.

@Roman, @dfisher, @lastmjs, all, I would really appreciate your feedback on this line of thinking.

[quote="Roman, post:54, topic:9382"]
To summary : this integration should be driven EXACTLY as BTC’s. We should see the enthusiasm about BTC integration and CkETH to do exactly the same thing with ETH. There is no rush. The only rush is to do things properly.
[/quote]

[quote="Roman, post:54, topic:9382"]
Could you tell us if you see some advantages to start with phase 2, taking the time, and after this implement CkETH ? Or for you, there is none dilemma and you are 100% to start with phase 1 ?
[/quote]


I agree to that in that we should repeat everything that was good from the Bitcoin integration, not unnecessarily rush, and do things properly. But not be slower than we could be while doing things properly. Also let's improve it where possible. E.g., offer people a means to start coding their dapp integrations as soon as we can with a close-to-final interface and also giving people a choice whether to run something in beta or production before Phase 2 is ready. I think there is no drawback of running any dapp, also ckETH, in beta with Phase 1. Also note that Phase 1 is not some insecure mess, but uses well-vetted cloud service providers as integration points to Ethereum. This will give us a lot of advancement in terms of time to market. For this reason, I don't see a dilemma to start with Phase 1 — it's a powerful accelerator for the community to build dapps using Ethereum. The question whether to launch the "official" ckETH with Phase 1 is a specific one that needs lots of thought. But considering that building ckETH also takes time, this might not even be a relevant question as ckETH needs time to be built, time to be reviewed, and time to be run in beta with an Ethereum testnet — it might not be ready that long before Phase 2 is ready. Considering this, I would see doing Phase 1 as outlined to be only an advantage to the community.

So, yes, DFINITY needs to take its time to build Phase 2 and ckETH, but we should support the community to start building their dapps as soon as possible. Whether individual dapps are launched in production with Phase 1 or only Phase 2 is up to the discretion of each project — we definitely don't want to impose anything on anyone here.

[quote="dfisher, post:55, topic:9382, full:true"]
To be clear, I think we should do Phase 1 quickly and then Phase 2 later, but for ckETH I think the user shouldn’t notice the difference when the migration happens (if that’s possible).
[/quote]

@dfisher, I hope this has been answered with the above response. Just note that Phase 2 has started in parallel to the Phase-1 efforts. Phase 2 is not delayed or otherwise impaired by Phase-1 efforts — on the contrary, it benefits from the thinking w.r.t. the concrete API we want to offer.

[quote="lastmjs, post:57, topic:9382"]
I would think this is very possible. Basically phase 1 has certain security properties and trade-offs, and phase 2 has most likely better security properties and trade-offs. If the community wants to build and maintain ckETH it should be a seamless integration, and behind-the-scenes phase 2 will simply increase the security.
[/quote]

[quote="lastmjs, post:57, topic:9382"]
If ckETH is an ICRC1 then the interface shouldn’t ever have to change, assuming the NNS or some other mechanism can upgrade the ckETH canister(s).
[/quote]

@jordan, I fully agree that this is technically possible without doubt. @Roman's main concern is that Phase 1 and Phase 2 have different trust models and switching the main ckETH implementation from one to the other is, at least theoretically, not very clean. It's definitely something that deserves further discussion. We are currently pursuing Phase 1 and Phase 2 in parallel, according to the approach outlined above.

And, yes, ckETH should definitely be an ICRC1!

[quote="lastmjs, post:57, topic:9382"]
I think I’ve got the general idea correct here, but @dieter.sommer please correct me if I got anything wrong.
[/quote]

I think you have got the general idea correct here.

[quote="lastmjs, post:56, topic:9382, full:true"]
[quote="dieter.sommer, post:52, topic:9382"]
This would be nice, however, the use of HTTP outcalls curently prevents the use of queries. The responses of HTTP outcalls inherently need to go through consensus.
[/quote]

Would this not be possible in phase 2? Does phase 2 include a full Ethereum archival node? What type of node will phase 2 enable on the IC?
[/quote]
@lastmjs: For context, you are referring to queries to the Ethereum interface here. In theory, this is possible as an IC node could just query its collocated Ethereum node in Phase 2. However, XNet queries are not available yet, so there are things that would need to be built to have this. And, you are right, query support for Ethereum would be really great, but there are currently still some blockers for it.

@ all: I hope that my argument for doing a Phase 1 now can appeal to everyone, as its adoption is left to the community in a completely decentralized way. We only help the community getting Phase 1 built. This does not dilute our efforts for Phase 2 and it helps a lot in sharpening the final API for Phase 2 as we need to think about it very concretely. Also having dapps build on Phase 1 will help detect any issues, e.g., with the API, early on and reduce delays and time to market for Phase 2.

Looking forward to hearing your opinions!

-------------------------

dieter.sommer | 2023-02-27 11:07:57 UTC | #62

[quote="domwoe, post:58, topic:9382"]
[quote="lastmjs, post:56, topic:9382"]
Would this not be possible in phase 2? Does phase 2 include a full Ethereum archival node? What type of node will phase 2 enable on the IC?
[/quote]

I don’t think that we are targeting an archival node, but probably a full node that prunes transaction history regularly.
[/quote]

Indeed, we are targeting a pruned full node comprising a consensus and execution client as of now to be collocated to each IC replica on one subnet. An archival node would not be of much additional value for most of the user cases we see currently and would consume an excessive amount or resources of the IC machines.

[quote="domwoe, post:58, topic:9382"]
On queries: AFAIK, we are currently thinking to use the HTTPS outcalls implementation internally, but each replica will route the request to its co-located Ethereum node. So queries wouldn’t be directly possible, but you could in principle cache (some part of the) ETH state in a canister to make it available as a query (at least on the same subnet for composite queries).
[/quote]

Exactly, the idea is to use HTTP outcalls to localhost, which would then be directed to the respective collocated Ethereum full node that sits on the same physical machine as the IC replica.

[quote="Maxfinity, post:60, topic:9382"]
We are increasingly living in a cross-chain world. As such, we should aim to not just integrate with the Ethereum network, but design this integration from the ground up to target all possible EVM-compatible networks. It’s not just enough to provide an Ethereum integration, there’s Arbitrum, Polygon, Optimisim, Coinbase’s L2, Binance Smart Chain, etc.
[/quote]

The blockchain world is indeed increasingly becoming a X-chain world! There are dozens of chains, and a handful of chains you mention that are most interesting. Now the first question is: Can we do a native integration with all of them within a year's time frame? Probably not. The second question is: Which of the EVM chains is the most important one? This is easily answered with "the Ethereum blockchain." For this reason we are currently designing the Phase 2 for a native performant Ethereum integration, not requiring API keys to be managed securely. Our current design with having a subnet with collocated Ethereum full nodes that are accessed using HTTP outcalls to localhost. This is a trustless integration and does not need any additional trust assumptions besides the ones of the IC and Ethereum.

Ethereum, as a base chain to all the Layer-2 chains, secures all assets used in Ethereum and its Layer 2s. This means that an Ethereum integration allows for tapping into the liquidity of all those chains either directly or indirectly. Thus, my argument is that a native Ethreum integration is the best step we can do as a next step and provides tremendous value to the IC.

Coming back to an integration with the other EVM chains (and possibly other chains in the future): I'd love to have such integrations available, but this will take time. There are different ways on how such integrations can be done, some examples of approaches being presented next:

* Native as for Bitcoin
  * Running a full node of the target chain on chain
  * Strongest trust model
  * Hard for chains that have more state than the Bitcoin network
* Native as for Ethereum
  * Runs collocated full nodes of the target chain in one subnet
  * Strongest trust model (essentially like running a full node on chain)
  * Requires lots of resources
* Using on-chain or collocated light clients (particularly the collocated option is interesting as it could reuse a lot of what is done now for Ethereum)
  * Light-client trust model, weaker than a native integration, but still good
  * Requires few resources to run
  * Implementation effort differs a lot based on concrete architecture
* Using HTTPS outcalls to cloud nodes
  * Weaker trust model: Trusting a quorum of cloud nodes
  * Easiest to realize,; would benefit from additional protection of the API keys
  * Good approach for larger number of integrations with different, but not for the key integrations with the major chains

[quote="Maxfinity, post:60, topic:9382"]
From this perspective, it is easy to see what is missing for both HTTP outcalls and the ETH integration, we need a way to direct different API keys and/or state to different nodes. As a user I should be able to set API key 1 to a subset of nodes, API Key 2 to another subset etc.
[/quote]

The Phase 2 of the Ethereum integration does not need API keys, but other integrations built on HTTPS outcalls do. And for those we should definitely think about an approach to allow different API keys to be used for different nodes as you suggest. This would also immediately allow for observing if a node leaks and misuses an API key. That's a discussion that should be have when considering integrations with further blockchains using the HTTPS outcalls feature following the Ethereum integration. We should, however, not think about this for Phase 1 of the Ethereum integration as this is a stop-gap solution towards Phase 2 that is obsoleted once Phase 2 launches.

Opinions?

-------------------------

lastmjs | 2023-02-28 00:25:37 UTC | #63

[quote="dieter.sommer, post:61, topic:9382"]
My thinking goes into a direction that a community-launched chain-keyed Eth, lets call it icETH for now, based on Phase 1 might be a great idea. That is, Phase 1 is built and launched quickly so that everyone can start integrating their dapps with Ethereum. The API will stay (almost) the same for the Phase 2 launch. Then a first iteration of chain-key Ethereum in the form of icETH can be started with as well. And dapps can start integrating with icETH already. All of this helps reduce the time to market for the Phase 2 and Phase-2-based ckETH without severe drawbacks. The decisions are left to the individual community members on whether to adopt an early version of chain-key Ethereum as soon as possible and build upon it or whether to wait for the Phase 2 and a final ckETH to be ready. In any case, Phase 1 is an accelerator that does not cost us much, but helps a lot in getting the final API out so that our community can start building upon it. So it’s in many ways the most decentralized approach where everyone can do what they deem best for their projects. No one imposes anything on anyone. All we do now is to work with the community to enable this flexibility and shortening of the time to market.
[/quote]

Seems very reasonable to me.

-------------------------

lastmjs | 2023-02-28 00:33:29 UTC | #64

Trying to integrate every blockchain (with a native integration at least) could get out of hand very quickly and become a large time-drainer, I think this would be a big mistake.

But perhaps tEDdsa combined with a phase 1 template would allow many integrations to flourish, while only the most important chains get native integrations (like Bitcoin and Ethereum). Objective criteria could be applied to determine which native integrations deserve to be created.

I fear this could easily run away and become something that wastes a lot of time while other important protocol tasks remain undone. Demergent Labs has a list of tasks we need from the protocol just as a few examples.

-------------------------

dieter.sommer | 2023-02-28 09:30:27 UTC | #65

@lastmjs, I fully agree with you that only the most important integrations should be done natively, i.e., Bitcoin and Ethereum for now. The Phase-1 implementation can indeed help integrate any chain the API of which is available through one, ideally multiple, cloud API providers. Anyone can then use t-ECDSA and the Phase 1 integration to roll their own integration with any blockchain. I think this is a very realistic way forward for integrations with many more chains quickly.

One can think about few other important chains to receive thought about a native-style integration into the system, but it should be few of them, and only once Ethereum has bee integrated. Anyway, Ethereum captures probably most of the value by far already and is by a huge margin the most important chain to integrate with.

-------------------------

Maxfinity | 2023-02-28 09:45:48 UTC | #66

[quote="dieter.sommer, post:65, topic:9382"]
One can think about few other important chains to receive thought about a native-style integration into the system, but it should be few of them, and only once Ethereum has bee integrated. Anyway, Ethereum captures probably most of the value by far already and is by a huge margin the most important chain to integrate with.
[/quote]

I think that it is important to integrate all EVM chains, including Ethereum. Ethereum may have the lion's share of TVL, but for DeFI activity and trading this is not the case. Anyway, the API key attack needs to be addressed for both bridging and oracles, so it would be good if the Foundation could put resources on this, otherwise as soon as the Foundation gets any serious kind of TVL a bad actor will hack it.

-------------------------

JaMarco | 2023-02-28 20:06:14 UTC | #67

[quote="dieter.sommer, post:65, topic:9382"]
One can think about few other important chains to receive thought about a native-style integration into the system, but it should be few of them, and only once Ethereum has bee integrated.
[/quote]
Currently the only other chain I think is important enough for a native integration is Cosmos.

-------------------------

dieter.sommer | 2023-03-03 14:25:14 UTC | #68

Here is a document summarizing the efforts planned for Phase 1: https://docs.google.com/document/d/108dDhu_W4G3qjhHDKJZA15Hm6-TBW4D-sJIuxj4m6E8/edit#

Have a nice weekend!

-------------------------

lastmjs | 2023-03-03 15:29:07 UTC | #69

Quick question, does phase 1 allow for connecting with multiple Ethereum cloud providers? I think this would be very helpful for the security of phase 1.

For example, we could allow the service performing the http outcalls to Ethereum cloud providers to accept any number of cloud providers URLs and API keys, and allow setting a threshold on how many responses need to come back and agree.

So perhaps you use 5 Ethereum cloud providers and expect at least 3 to always agree perfectly. This could be important for overcoming network failures as well, making the phase 1 fault tolerant.

The phase 1 design might already have this, but here's the idea explained: https://twitter.com/lastmjs/status/1556058841208455168

And here's the code using an old version of Azle with generators: https://github.com/demergent-labs/ic_chainlink_data_feeds/blob/main/canisters/data_feeds/latest_answers.ts

In Rust I assume it's easy to fire off multiple asynchronous requests and wait on all of them, the example above waited for each in sequence because of the limitations of generators.

-------------------------

dieter.sommer | 2023-03-03 15:37:10 UTC | #70

[quote="lastmjs, post:69, topic:9382"]
Quick question, does phase 1 allow for connecting with multiple Ethereum cloud providers? I think this would be very helpful for the security of phase 1.
[/quote]

Good question, currently it is something we consider optional, but it's definitely an important feature for security reasons.

Thank you for your further thoughts about this, need to look into the links you have sent.

[quote="lastmjs, post:69, topic:9382"]
In Rust I assume it’s easy to fire off multiple asynchronous requests and wait on all of them, the example above waited for each in sequence because of the limitations of generators.
[/quote]

Yes, this should be easy, so not increasing the latency when querying >1 providers.

-------------------------

Roman | 2023-03-07 00:20:08 UTC | #71

Dear Dieter, 

It is my turn to beg pardon for the delay of response.

Thank you very much for your answer and for your rigor, the same one and only one we find among researchers. This is exactly why I invested in ICP : for the Dfinity's team’s scientificity. So thanks again.

[quote="dieter.sommer, post:61, topic:9382"]
@Roman: My interpretation of your thoughts, at a high level, is that we should do the Ethereum integration diligently, do things properly, and not unnecessarily rush the integration. In other words, repeat the good things of the BTC integration. That’s the high-level semantics I get out of your arguments, abstracting from the concrete ckETH discussion. Please correct me if this interpretation is wrong. I could not agree more to this interpretation actually
[/quote]

Your interpretation is right yes !

[quote="dieter.sommer, post:61, topic:9382"]
Continuing the ckETH discussion, a ckETH implementation will not be ready tomorrow: Someone needs to build an ERC-20-based minter, ideally customizable to any ERC-20 token, the code needs to go through a thorough security review, needs to run in beta phase on an Ethereum testnet for a while, and only thereafter can be launched for Ethereum Mainnet. **Also, the question is whether DFINITY should build the ckETH minter canister, as it did for ckBTC, or the community should do it?**
[/quote]

In my opinion, probably idiosyncratic : yes Dfinity should. In the future, Dfinity could let developers build such minters for other blockchains, but not for the CkETH. This is too decisive to summon the decentralization argument or ideal, all the more given the context (we are still early in the ICP blockchain and in a bear market, so the decentralization has not to be thought yet as it will have to be thought eventually). The decentralization is not a target *per se* : it has to be reached when it is the best for the ecosystem, but the best for the ecosystem is not everytime the decentralization, all the more now.

[quote="dieter.sommer, post:61, topic:9382"]
Thus, for me, the ckETH question is not even the most important and most pressing one, it is one use case of many and its own timing dictates in many ways when it can be launched in production.
[/quote]

Can't agree more !

[quote="dieter.sommer, post:61, topic:9382"]
Now to the concrete question: If ready, should it launch before Phase 2 is ready? I don’t know, this is actually a really tough question. Having a clean trust model without a migration to Phase 2 vs. a shorter time to market and our DEXs being able to use it earlier. An alternative is to have a preliminary chain-key Ethereum implementation that can bridge the gap towards the final launch. We had this for Bitcoin also in the form of icBTC by ICLighthouse.
[/quote]

It is only my opinion of course, but for me : if ready, it should not launch before Phase 2 is ready ; as I defended the necessity to reach the simplest model, without having to pace up and down from a first CkETH to a second one, taking the risk of some confusion and some bad influence of the CkETH 1.0 on the CkETH 2.0 ; "bad influence" meaning a sort of difficulty or reluctance to migrate because we would have developed a lot around the 1.0 and would want to save the ecosystem which would have developed within the timeline between CkETH1.0 and CkETH 2.0. To say it differently, I am afraid that we are currently underestimating how much we will tie our hands to CkETH1.0 and the fact that we won't be able to get rid of it when we will want.

Still, if it has to be launched, that we can't wait, I could not agree more with each one of your lines below :

[quote="dieter.sommer, post:61, topic:9382"]
My thinking goes into a direction that a community-launched chain-keyed Eth, let's call it icETH for now, based on Phase 1 might be a great idea. That is, Phase 1 is built and launched quickly so that everyone can start integrating their dapps with Ethereum. The API will stay (almost) the same for the Phase 2 launch. Then a first iteration of chain-key Ethereum in the form of icETH can be started with as well. And dapps can start integrating with icETH already. All of this helps reduce the time to market for the Phase 2 and Phase-2-based ckETH without severe drawbacks. The decisions are left to the individual community members on whether to adopt an early version of chain-key Ethereum as soon as possible and build upon it or whether to wait for the Phase 2 and a final ckETH to be ready. In any case, Phase 1 is an accelerator that does not cost us much, but helps a lot in getting the final API out so that our community can start building upon it. So it’s in many ways the most decentralized approach where everyone can do what they deem best for their projects. No one imposes anything on anyone. All we do now is to work with the community to enable this flexibility and shortening of the time to market
[/quote]

If we truly can't wait, such a distinction between icETH (or iETH like ICLighthouse's iBTC) and CkETH would be necessary and the best way to give the opportunity to flexibly play already with ETH, but not confusing people with a CkETH which could be perceived at least inconsistent or at worse "messy". 

[quote="dieter.sommer, post:61, topic:9382"]
I agree to that in that we should repeat everything that was good from the Bitcoin integration, not unnecessarily rush, and do things properly. But not be slower than we could be while doing things properly. Also let’s improve it where possible. E.g., offer people a means to start coding their dapp integrations as soon as we can with a close-to-final interface and also giving people a choice whether to run something in beta or production before Phase 2 is ready. I think there is no drawback of running any dapp, also ckETH, in beta with Phase 1. Also note that Phase 1 is not some insecure mess, but uses well-vetted cloud service providers as integration points to Ethereum. This will give us a lot of advancement in terms of time to market. For this reason, I don’t see a dilemma to start with Phase 1 — it’s a powerful accelerator for the community to build dapps using Ethereum. The question whether to launch the “official” ckETH with Phase 1 is a specific one that needs lots of thought. But considering that building ckETH also takes time, this might not even be a relevant question as ckETH needs time to be built, time to be reviewed, and time to be run in beta with an Ethereum testnet — it might not be ready that long before Phase 2 is ready. Considering this, I would see doing Phase 1 as outlined to be only an advantage to the community.
[/quote]

Even if I think that the best is the simplest and that the simplest is not the quickest and that on the contrary the quickest is often what brings a lot of complexifications, I trust you and feel reassured about launching a phase 1 as you presented it above even if I'd prefer a start with the phase 2.

-------------------------

dieter.sommer | 2023-03-15 09:19:23 UTC | #72

@Roman 
Excellent, it seems the two of us have some roughly similar view here, with some differences, but not material ones.

Regarding ckETH, it is probably the best approach that DFINITY builds this. Also with the latest developments in the ckBTC domain that we will need to perform some form of checks on the incoming tokens to ensure they are not from illicit origin, which is currently being solved for the ckBTC canister. The same approach can be taken then for ckETH.

Also, there is only the need for a single ERC-20 minter, which can handle any ERC-20 token. It should be parameterizable for any token so that deploying a new ckABC token just requires deployment of the parameterized minter and a corresponding ledger. This way, it will be streamlined to roll out further ERC-20 chain-key tokens in the future.

[quote="Roman, post:71, topic:9382"]
It is only my opinion of course, but for me : if ready, it should not launch before Phase 2 is ready
[/quote]

And if a ckETH is launched before Phase 2 is ready, it would need to remain the same ckETH with Phase 2 in the view of its users, just with a change of trust model, which users don't need to care about. Security has increased. Yes, this is not as clean as one starting with Phase 2, but might make sense in case there is not too much liquidity in it yet during Phase 1, so effectively the initial liquidity in it is based on a different trust model. There are people who want to move forward with this approach. This is surely still an important discussion to be had in more depth and I hope you will participate in it.

[quote="Roman, post:71, topic:9382"]
If we truly can’t wait, such a distinction between icETH (or iETH like ICLighthouse’s iBTC) and CkETH would be necessary and the best way to give the opportunity to flexibly play already with ETH, but not confusing people with a CkETH which could be perceived at least inconsistent or at worse “messy”.
[/quote]

I think there are parties interested in building some other chain-key ETH with Phase 1, so this is likely to happen.

-------------------------

cymqqqq | 2023-03-15 10:04:55 UTC | #73

[quote="dieter.sommer, post:72, topic:9382"]
This way, it will be streamlined to roll out further ERC-20 chain-key tokens in the future.
[/quote]
do you mean we will have both icrc-1 chain key token and erc-20 chain-key token?

-------------------------

dieter.sommer | 2023-03-15 10:53:05 UTC | #74

The chain key tokens on the IC have the ICRC-1 interface and  they bring ERC-20 tokens into the IC ecosystem. The ledger being used likely also supports ICRC-2, which brings ERC-20's approve / transfer_from semantics to the IC. There will not be an ERC-20 interface offered on the IC as the IC uses ICRC-1 as token standard. Does this answer your question?

-------------------------

Roman | 2023-03-15 11:14:06 UTC | #75

[quote="dieter.sommer, post:72, topic:9382"]
@Roman
Excellent, it seems the two of us have some roughly similar view here, with some differences, but not material ones.

Regarding ckETH, it is probably the best approach that DFINITY builds this. Also with the latest developments in the ckBTC domain that we will need to perform some form of checks on the incoming tokens to ensure they are not from illicit origin, which is currently being solved for the ckBTC canister. The same approach can be taken then for ckETH.

Also, there is only the need for a single ERC-20 minter, which can handle any ERC-20 token. It should be parameterizable for any token so that deploying a new ckABC token just requires deployment of the parameterized minter and a corresponding ledger. This way, it will be streamlined to roll out further ERC-20 chain-key tokens in the future
[/quote]

This sounds just perfect dear @dieter.sommer ! Thank you for your answer.

-------------------------

dieter.sommer | 2023-03-15 14:00:29 UTC | #76


# Phase 1 update

Meanwhile, our community has been working on Phase 1 of the Ethereum integration. First results are now available to the public and can help people build their projects that integrate with the Ethereum network.

## JSON RPC API canister via HTTPS outcalls to API providers

Rocklabs has been working on the following, which is now ready in a first version:
* An extended ic-web3 library that offers an HTTPS outcalls transport for calls to Ethereum full nodes that offer the JSON RPC API.
  * The library offers the JSON RPC API now besides the web3 API.
  * The `max_response_bytes` for the HTTPS outcalls transport can now be set to a user-defined value so that the cost of the calls is dramatically lower as with the default value.
* A canister building on the updated ic-web3 library is available as part of the examples section of the library codebase.
  * The canister offers an endpoint for the JSON RPC API and uses the ic-web3 library to invoke an Ethereum JSON RPC API provider via HTTPS outcalls.
  * Each call can define an RPC API provider URL including API key in the format used by API providers.
  * Each call can define its own `max_response_bytes` value for the HTTPS outcall that is made to be set to a user-defined value to reduce cycles cost.

Anyone can now deploy this canister that exposes a JSON RPC API and with this run their own Ethereum integration. What is needed in addition is an API key of one, or, preferably, several API providers. It is recommended to use multiple API providers for each state query that decisions are based on, such as minting chain-key tokens. There are also API providers that do not require API keys, e.g.,  The source code is available as open source in its [GitHub repository](https://github.com/rocklabs-io/ic-web3).

The API envisioned for the Phase-2 Ethereum integration worked on by the DFINITY Foundation will offer a subset of the Ethereum JSON RPC API, however, there will be slight differences:
* The HTTPS-outcalls-based Phase-1 solution offers users the option to set a maximum response. This is not required for Phase 2 as the Ethereum canister there is trusted and there is no attack vector of it consuming substantially more ingress bandwidth than is paid for.
* There may be slight differences in the exact behaviour of the API due to the different ways of integration based on how the asynchronous nature of the interoperating blockchains is addressed.

## Ethereum helper canister

Community member @stopak has built, as an ICDevs bounty by Austin, an Ethereum helper canister that provides essential Ethereum-related functionality to Motoko users because the Motoko ecosystem does not have those libraries as of yet. The canister is built in Rust and offers those essential Ethereum functionalities as services to its callers. Anyone doing their project in Motoko can spin up this canister on the same subnet their project canisters reside on and call its endpoints with low latency intra-subnet inter-canister calls. Some examples of functionality the canister offers are given next:
* RLP encoding
* Creating a transaction from its inputs
* Parsing a transaction into its constituent fields
* Verifying a Merkle proof
* Keccak256 hashing
* Signature validation
* Derive an Ethereum address from a public key

The library is available as open source in its [evm_utils_ic GitHub repository](https://github.com/icopen/evm_utils_ic).

With this, the main building blocks are now available so that any Rust or Motoko project can start building their project using a Phase-1 Ethereum integration.
* The project deploys their own canister based on the extended ic-web3 lib.
* The project deploys the Ethereum helper canister for accessing relevant Ethereum calls.

Interested community teams, please have a look and let us know whether this is enough for the first steps to get started or whether things are missing.

-------------------------

dieter.sommer | 2023-03-17 09:17:37 UTC | #77

# Technical Working Group Meeting on Ethereum Integration

Let me suggest to start having a first Working Group call related to Ethereum integration to get more involvement of the community members. There has been good progress in Phase 1 and we need to see what is missing to get where we want to be. Further calls could be, following demand, either regular or scheduled on an as-needed basis whenever we have items to discuss.

As there are people interested in this subject from all major geographies, the time choice would be suggested as follows (summer time where available). The rationale behind this proposal is that we have many interested people from China and thus would put them into a more convenient time and have US and Europe early or late in the day.
- West coast (PDT): 22:00
- Europe (CEST): 7:00
- China (CST): 13:00

**UPDATE:**
The first meeting is still in CET time in Europe:
- West coast (PDT): 23:00
- Europe (CEST): 7:00
- China (CST): 14:00

The first meeting is scheduled for the upcoming Wednesday, March 22, at the above time slot.

Public WG calendar ([Google Calendar](https://calendar.google.com/calendar/u/0?cid=Y19jazBncjc5YmtnY29vaWNuMXA4N21vMWVyb0Bncm91cC5jYWxlbmRhci5nb29nbGUuY29t))
Public WG calendar ([browser link](https://calendar.google.com/calendar/u/0/embed?src=c_ck0gr79bkgcooicn1p87mo1ero@group.calendar.google.com&ctz=Europe/Zurich), (no google account required)

**Please like this post if you plan to attend such WG meetings.**

Let's see what the level of interest in this is and proceed accordingly.

-------------------------

dieter.sommer | 2023-03-16 15:18:29 UTC | #78

See [here](https://forum.dfinity.org/t/technical-working-group-blockchain-integrations/18964) for a new forum topic on a Technical Working Group for Blockchain Integrations.

-------------------------

dfisher | 2023-03-16 16:26:47 UTC | #79

Hi @dieter.sommer the Google Calendar link isn't working for me. It takes me to Google Calendar but not the event on Google Calendar.

-------------------------

dfisher | 2023-03-16 16:28:26 UTC | #80

I would be super excited to see a ckETH built on Phase 1 that happens faster, and then it can migrate to Phase 2 later. What kind of time frame would we be looking at for that?

-------------------------

dieter.sommer | 2023-05-03 05:42:33 UTC | #81

As our app subnets currently only have IPv6 connectivity, I went through the tedious process of checking all Ethereum RPC API providers I could find for IPv6 connectivity. The table below shows my findings: most of the providers only support IPv4, but there are some that support IPv6 also. Hope this is useful for those who intend to use the Phase 1 integration on an IC app subnet.

| RPC API Provider | HTTPS Endpoint                        | IPV6 Support |
|------------------|---------------------------------------|--------------|
| CloudFlare       | https://cloudflare-eth.com            | yes          |
| AllNodes         | https://ethereum.publicnode.com       | yes          |
| Alchemy          | https://eth-mainnet.g.alchemy.com/v2/ | yes          |
| FlashBots        | https://rpc.flashbots.net             | yes          |
| BlastAPI         | https://eth-mainnet.blastapi.io       | yes          |
| Flux             | https://ethereumnodelight.app.runonflux.io | yes |
| NowNodes | https://eth.nownodes.io/ | yes |
| ankr | https://rpc.ankr.com/eth_goerli | yes |
| Gateway | https://rpc.eth.gateway.fm | yes |
| Infura           | https://mainnet.infura.io/v3/ | no |
| GetBlock         | https://eth.getblock.io/mainnet/ | no |
| 0X | https://api.0x.org/ | no |
| Figment | https://erigon-mainnet--rpc.datahub.figment.io | no |
| ArchiveNode | https://archivenode.io/ | no |
| Amazon Managed Blockchain | https://nd-6eaj5va43jggnpxouzp7y47e4y.ethereum.managedblockchain.us-east-1.amazonaws.com/ | no |
| Chainstack | URL not found | yes |
| NodeReal | https://eth-mainnet.nodereal.io/v1 | no |
| Kriptonio | URL not found | n.a. |
| Chainbase | https://ethereum-mainnet.s.chainbase.online/ | no |
| LlamaNodes | https://eth.llamarpc.com | no |
| All That Node | https://ethereum-mainnet-rpc.allthatnode.com | no |
| ZMOK | https://api.zmok.io/mainnet/ | no |
| LinkPool | https://main-light.eth.linkpool.io | no |
| Crypto APIs | https://api.mycryptoapi.com/eth | no |
| Ava Labs | https://mainnet.eth.cloud.ava.do | no |
| Pocket Network | https://eth-mainnet.gateway.pokt.network/v1/ | error |

-------------------------

dieter.sommer | 2023-03-16 20:41:19 UTC | #82

[quote="dfisher, post:79, topic:9382"]
the Google Calendar link isn’t working for me. It takes me to Google Calendar but not the event on Google Calendar.
[/quote]

Just tried it, indeed the behaviour is that it takes you to your Google Calendar, if you are logged in, and shows the Working Group calendar as well. You need to look for the first meeting, it is on March 22, 7AM CEST. Hope that helps!

[quote="dfisher, post:80, topic:9382, full:true"]
I would be super excited to see a ckETH built on Phase 1 that happens faster, and then it can migrate to Phase 2 later. What kind of time frame would we be looking at for that?
[/quote]

For Phase 1, the community has put together some open source code already that allows you to roll your own Ethereum integration based on HTTPS outcalls. Available now, still needs to be tested in practice and possibly tweaked. See above in this topic for further details.

-------------------------

lastmjs | 2023-03-18 15:12:06 UTC | #83

I have a concern about any of the ck Canisters operated by the NNS.

These concerns are both about the security and legality of these canisters. As DFINITY maintains effective voting control over the topics that update these canisters, DFINITY can update them at any time at will in practice. This of course is a central point of failure, and brings up the question of whether or not DFINITY is operating these canisters.

It seems system canisters like ckBTC (I believe it's a system canister, though I recall some distinction earlier?) and ICP are not held to the same decentralized autonomous smart contract standards as on Ethereum.

I think we should consider the trade-offs of deploying truly autonomous canisters without controllers, or otherwise restricting the unilateral ability to update the Wasm binary.

-------------------------

JaMarco | 2023-03-19 00:29:42 UTC | #84

[quote="lastmjs, post:83, topic:9382"]
As DFINITY maintains effective voting control over the topics that update these canisters, DFINITY can update them at any time at will in practice.
[/quote]

Yea but they only have the ability to do this because they majority of stakeholders have given it to them.

-------------------------

lastmjs | 2023-03-18 23:25:54 UTC | #85

I wonder how much of the voting power they have comes from the default situation at launch, and how much of the voting power has the ability to follow someone else at will.

Besides that, I think we need more than just a simple liquid democracy vote for such important things as protocol code and system canisters. Deterministic decentralization is not being applied to voting.

That might be a separate topic.

-------------------------

cymqqqq | 2023-03-25 06:21:24 UTC | #86

Hi there, any updates on this post? :grinning:

-------------------------

theguy | 2023-03-28 12:35:37 UTC | #87

These are some good points 

Is it substantial effort to implement other chains like COSMOS, MATIC etc? 

I picture, natively trading all these coins against one another can be a huge selling point for ICP 

Currently in Uniswap, you can swap any coin to any coin, but you could face multiple jumps in the middle, meaning the fees would add up 

On ICP, the same can be done but faster and with Negligent fees. Not to mention, adding ckTech - it would mean all tokens backed 1:1 

It would be worth considering a streamline of work to onboard multiple big chains

-------------------------

cymqqqq | 2023-03-29 11:04:29 UTC | #88

yes, you can build your own ckX token

-------------------------

dieter.sommer | 2023-04-14 07:58:04 UTC | #89

Regarding my [earlier post](https://forum.dfinity.org/t/long-term-r-d-integration-with-the-ethereum-network/9382/81) on Ethereum API providers, I'd like to provide a follow-up.

We had a really interesting discussion with [gateway.fm](https://gateway.fm/), a startup from Scandinavia that provides APIs for Ethereum and some other chains. They were quite open towards adding functionality to allow API calls to be authorized with subnet signatures instead of API keys. This would solve, at least for this API provider, the problem of API keys being exposed if data of one IC node of the subnet the canister holding the API key is on is exposed.

From what I have seen so far, gateway.fm seems a great option for an API provider for the Phase 1 of the Ethereum integration. They do not have IPv6 (yet), but they may be adding this in the future. I'd recommend to keep an eye on this provider for integrating with Ethereum.

Gateway's API for Ethereum is available at https://rpc.eth.gateway.fm.

-------------------------

dieter.sommer | 2023-04-14 08:32:34 UTC | #90

[quote="theguy, post:87, topic:9382"]
Is it substantial effort to implement other chains like COSMOS, MATIC etc?
[/quote]

Was on vacation and offline, that's why the response is so late.

EVM chains can be integrated rather easily using the approach taken for Phase 1. However, this does not provide the strongest possible trust model. The approach taken in Phase 2 provides essentially the strongest trust model, but is a substantial effort for each chain. When getting the architecture right, one can integrate further chains more easily than the first, which is Ethereum.

-------------------------

lastmjs | 2023-04-15 23:49:15 UTC | #91

This sounds really cool, though I hope whoever deploys a phase 1 integration never relies on just one provider.

-------------------------

dieter.sommer | 2023-04-17 14:46:20 UTC | #92

[quote="lastmjs, post:91, topic:9382"]
though I hope whoever deploys a phase 1 integration never relies on just one provider.
[/quote]

Indeed, when doing something with more value involved, it is recommended to use multiple independent API providers for each request.

-------------------------

skilesare | 2023-04-17 20:22:29 UTC | #93

I mentioned this to a guy at stripe as well....I think dfinity should propose an industry wide standard that all api providers could adopt.

-------------------------

dieter.sommer | 2023-04-18 08:17:24 UTC | #94

> I think dfinity should propose an industry wide standard that all api providers could adopt.

This would indeed be a great idea. Main challenge is that the IC is currently the only chain capable of talking to API providers directly. Also, the standard would need to be open for different signature schemes. We should definitely follow up on this once we start this work item. Thanks for the idea!

-------------------------

domwoe | 2023-04-18 10:54:47 UTC | #95

[quote="dieter.sommer, post:89, topic:9382"]
We had a really interesting discussion with [gateway.fm ](https://gateway.fm/), a startup from Scandinavia that provides APIs for Ethereum and some other chains. They were quite open towards adding functionality to allow API calls to be authorized with subnet signatures instead of API keys. This would solve, at least for this API provider, the problem of API keys being exposed if data of one IC node of the subnet the canister holding the API key is on is exposed.
[/quote]

How would the flow work here? Would they fetch requests from the canister? With HTTPS outcalls you have the issue that the certificate is only available in query calls. If you'd want to use HTTPS outcalls it would be simpler to allow authentication with tECDSA signature, wouldn't it?

-------------------------

Icdev2dev | 2023-04-18 14:42:32 UTC | #96

[quote="dieter.sommer, post:94, topic:9382"]
This would indeed be a great idea. Main challenge is that the IC is currently the only chain capable of talking to API providers directly.
[/quote]

So is it our fault?  :slight_smile: 

I think this standardization is a great idea.

-------------------------

dieter.sommer | 2023-04-26 09:29:14 UTC | #97

The API provider Gateway.fm now supports IPv6 for the Ethereum mainnet API! A big shout out to the gateway.fm team for making this happen for the IC community! :tada: :rocket: :partying_face:

Definitely worth trying out if you want to connect to Ethereum using HTTPS outcalls!

-------------------------

skilesare | 2023-04-26 11:24:17 UTC | #98

Does the key share have a witness to prove it is a part of the subnet key?  If so this could be handled at the replica level where the calling node signs and provides a witness that they are currently part of the signing group and have rights to call the api.  Maybe this exposes the api to attack?

Update calls don't have access to signatures, but is there any reason the replic can't have access after the call is complete?  Outcalls are sync anyway.  If the requesting contract injects the witness into the header, the replica could inject the root header before sending the outcall?

-------------------------

domwoe | 2023-04-26 18:50:10 UTC | #99

[quote="skilesare, post:98, topic:9382"]
Update calls don’t have access to signatures, but is there any reason the replic can’t have access after the call is complete? Outcalls are **a**sync anyway. If the requesting contract injects the witness into the header, the replica could inject the root header before sending the outcall?
[/quote]

That's an interesting thought. Not my expertise, but I think this could work.

-------------------------

dieter.sommer | 2023-05-03 05:44:12 UTC | #100

[quote="domwoe, post:95, topic:9382"]
How would the flow work here? Would they fetch requests from the canister? With HTTPS outcalls you have the issue that the certificate is only available in query calls. If you’d want to use HTTPS outcalls it would be simpler to allow authentication with tECDSA signature, wouldn’t it?
[/quote]

The details have not yet been defined, this is very early thinking and also not a high priority.

[quote="skilesare, post:98, topic:9382"]
Update calls don’t have access to signatures, but is there any reason the replic can’t have access after the call is complete? Outcalls are sync anyway. If the requesting contract injects the witness into the header, the replica could inject the root header before sending the outcall?
[/quote]

Austin's thinking here is quite spot on I think. A solution might go into this direction.

-------------------------

