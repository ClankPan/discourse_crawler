Samer | 2024-04-30 20:14:43 UTC | #1

Opening another thread to draw attention to what I believe is a very important narrative that should be communicated to blockchain users and the general public more broadly.

I feel it only takes one good narrative at the right time for the IC to explode in terms of usage and development. Is this the one or is there a better one?

Currently, this is how I presonally think about this.

As a user I should understand that the online services I use are developed, owned and maintained by the company providing the service to me.

As a user I should understand it's going to be possible to use similar services developed by an open source community in a way I fully control and own

As a user I should understand that on the IC its possible to use many online services without any counterparty

As a user I should understand that with that ownership and level of control, there's also a responsibility for paying for the resources I use

I should also be aware that I don't have to maintain or develop the service. I must also upgrade to new versions for new features if I want.

I should understand that not all services are well suited for this new paradigm.

And finally, and perhaps most important:

As a user I should understand that whatever I own, I could also trade. This means that the services I fully own and use, could acrue value over time in many different ways in a new digital economy called Web3

All this is possible with a the most convenient self sovereign Identity and without any technical knowledge

-------------------------

cken | 2024-05-03 02:30:41 UTC | #2

This seems like a novel use case for the platform to me as well.

Ideally, a user should be able to entirely own an application that behaves like a software-as-a-service app, in that they don’t have to worry about data loss, hardware loss, and passive processes can run independently of their own hardware in the “cloud”.

Can we provide a strong guarantee for an application completely owned by the user to still be running 50 years from now? As long as I have a web browser, an Internet Identity, and know the canister ID or some DNS equivalent?

This makes me think of someone like George RR Martin that still uses DOS based Wordstar for writing from the 1980s.

-------------------------

Samer | 2024-05-04 19:39:56 UTC | #3

[quote="cken, post:2, topic:30188"]
Ideally, a user should be able to entirely own an application that behaves like a software-as-a-service app, in that they don’t have to worry about data loss, hardware loss, and passive processes can run independently of their own hardware in the “cloud”.
[/quote]

Totally agree. 

The IC provides all the puzzle pieces to do this securely. And more features like vetKeys are on the horizon that would extend the possibilities. 

HTTP certification v2 allows for tightly integrated backends and frontends with web security best practices. 

The user experience could be in the form of a PWA with performance indistinguishable from web2.

**The killer self owned app will be a miniOS with app store and market that is used to access the Web3 dapp universe!**

-------------------------

cken | 2024-05-05 02:33:21 UTC | #4

The app store concept is something that needs some serious innovation as well, which I think a decentralized app economy is also perfect for.

We essentially have a bunch of walled gardens that play pixel real estate games to continue promoting the largest players.

**How do we decouple discovery from content hosting and publishing?**

Maybe a system of curators where people can follow some known entity to recommend content, apps, books, etc.

Content creators could directly pay for their own hosting and compute to serve that content. If the system is seamless enough and low cost, you might be able to compete with the freemium models of existing ecosystems that ultimately trap people into subscription-hiking, and bait and switch games with the content.

-------------------------

cken | 2024-05-06 19:03:58 UTC | #6

I think you're right that the word "own" is misleading for various reasons. What's a good analogy for a user that cares very little about the implementation details?

Traditional software-as-a-service is something like leasing a car (except SaaS will change the usage agreements at random), where you're paying X amount to use it but there's nothing to stop them from increasing the price once your lease contract expires. Versus owning a car (paid 100% cash) where you're still responsible for gas and maintenance, but those costs are fairly predictable quantities. No one will try to change which car you're driving against your will, and they can't arbitrarily charge you more or remove features.

Is the selling point of a platform like IC that you can explicitly pay for the computational cost of the resources you're using, and there are no incentives for anyone to trap you into arbitrarily paying more?

It may not quite be 100% ownership, but what is a better elevator pitch for someone that doesn't care about the implementation details?

-------------------------

Samer | 2024-05-06 20:27:46 UTC | #7

[quote="cken, post:6, topic:30188"]
It may not quite be 100% ownership, but what is a better elevator pitch for someone that doesn’t care about the implementation details?
[/quote]

Yes, I struggle with this also. I also don't feel 100% confident with terms `own` and `ownership`, but I'm not sure how to emphasize the level of control and sovereignty that the user can enjoy on the IC.


[quote="cken, post:6, topic:30188"]
Is the selling point of a platform like IC that you can explicitly pay for the computational cost of the resources you’re using, and there are no incentives for anyone to trap you into arbitrarily paying more?
[/quote]

Paying for the resources as a user is one economic model that may work in many cases. Indeed it gives you the freedom to use services at their bare minimum cost without being locked in.

But a successful service that makes a revenue, would perhaps pay for cycles to a degree for user canisters if that grows their product and user base.

The possibilities are truly endless, but the first success hits have yet to emerge.

-------------------------

Samer | 2024-05-06 20:30:52 UTC | #8

[quote="cken, post:6, topic:30188"]
What’s a good analogy for a user that cares very little about the implementation details?
[/quote]

Lets crack this one! Where are the marketing folks when you need them? :joy:

-------------------------

kpeacock | 2024-05-06 22:14:54 UTC | #9

One user motivation I point to is the shutdowns of websites, game servers, and app stores. If a service is valuable to you, you should be able to keep paying to keep it running indefinitely. It shouldn't have to be "profitable enough" to a company to keep something running, when the value add is to the users themselves at the end of the day.

An Internet Computer app store could let developers sell their software sustainably for the foreseeable future

-------------------------

cken | 2024-05-09 20:58:48 UTC | #10

That’s a good framing of user aligned incentives, so long as the user is the sole controller of that canister so that it’s unable to be shutdown by any other entity.

@Samer seems to be thinking a lot about how to accomplish this in a durable way. Have you heard of any other Internet Computer developers working towards this goal?

A forking model would be interesting. Maybe software is initially controlled by the developer if you want a freemium model, and then it can be forked to user control at any point if they want to takeover the costs or run a particular version forever.

-------------------------

Samer | 2024-05-09 23:42:43 UTC | #11

[quote="cken, post:10, topic:30188"]
how to accomplish this in a durable way.
[/quote]

In this [post](https://forum.dfinity.org/t/wapps-aka-fully-owned-canisters/27070) i mention risks for fully owned canisters.

Low dependency, robust, frontends are important. Maybe avoid a modern frontend framework all together.

A user should be able to manage alternative orgins from which they can auth to their canister. That would mitigate the risk somewhat.

The domain name at which canister is accessed remains single point of failure.

Currently working on libs that resolve most of the issues while allowing users to own their online services without technical skills, only II

-------------------------

