skilesare | 2023-01-06 19:00:39 UTC | #1

# Motoko ICRC-1 Motoko - #26

## Current Status: Discussion

* Discussion (08/14/2022)
* Ratification
* Open for application
* Assigned
* In Review
* Closed

[Official Link](https://icdevs.org/bounties/2022/08/14/ICRC-1-Motoko.html)

## Bounty Details

* Bounty Amount: $5,000 USD of ICP at award date - $5000 USD of ICP Match Available
* ICDevs.org DFINITY Foundation Grant Match Available: $5000 USD of ICP at award time - (For every ICP sent to 4dc0678d04c632921a7e5b913a4e3f185a3b48e2da6cba71f4be1e86272a789b, ICDevs.org will add $40 USD of ICP at award date to the bounty, up to the first 125 ICP donated, After 125 ICP, donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)
* Project Type: Team
* Opened: 09/04/2022
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Intermediate - Motoko;

## Description

This smart contract is a base implementation of an ICRC-1 fungible token.
This bounty gives the opportunity to

* learn motoko
* learn about fungible tokens
* learn about actors and archiving data
* learn about ICRC-1

This bounty seeks to have a Motoko version of an ICRC-1 token built and available to the community.

Requirements:

* Must implement all ICRC-1 functions
* Must provide an archive scheme similar to the ICP ledger for active archiving and scalability. This includes building the archive node and implementing a query_blocks schema even though it hasn't been finalized by the working group yet.
* The constructor should allow for easy configuration of the metadata, name, symbol, and total supply. It should also be able to set up a minting account that can mint by sending from and burn by sending to the address.
* The token should expose any functions needed by the DFINITY Rosetta implementation such that a rosetta node can be populated from the server.

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates. Code commits count as updates if you link to your branch/fork from the bounty thread. We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work. We will review and award the bounty reward if the terms have been met. If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it. We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 4dc0678d04c632921a7e5b913a4e3f185a3b48e2da6cba71f4be1e86272a789b. ICDevs will match the bounty $40:1 ICP for the first 125 ICP out of the DFINITY grant and then 0.25:1 after that. All donations will be tax deductible for US Citizens and Corporations. If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org. More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).

## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty. Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post. The council will consider these as they come in and propose a vote to award the bounty to one of the applicants. If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

# Matches

DFINITY Foundation Grant: - $5000 USD of ICP at award date

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

LightningLad91 | 2022-10-11 13:44:28 UTC | #3

I would like to take on this bounty if it hasn't already been assigned.

I don't have any public work to share just yet. If that's a deal breaker I understand.

-------------------------

skilesare | 2022-10-11 14:08:10 UTC | #4

@tomijaga os working on it and has made good progress. Perhaps you can help?

-------------------------

LightningLad91 | 2022-10-11 14:21:14 UTC | #5

No worries! I was building a canister for @Pwoseidon so I figured I‚Äôd ask. Glad to know someone is working on a formal template.

-------------------------

tomijaga | 2022-10-11 15:12:47 UTC | #6

Here's the repo with the implementation: https://github.com/NatLabs/icrc1

There are still a few things I haven't implemented: like the archive canister's capacity management. 

It could be a good starting reference for the canister you are building. There is also a link to the typescript implementation in the readme. If you find anything that you would like improved, let me know.

-------------------------

LightningLad91 | 2022-10-11 15:37:52 UTC | #7

Awesome! Thank you. I'll take a look this evening; and I will definitely reach out if I have any feedback.

-------------------------

mparikh | 2022-10-12 05:58:04 UTC | #8

Is there a reason why applicants don't apply publicly on forum; but through sideways and get accepted, seemingly, non-transparently?

-------------------------

skilesare | 2022-10-12 11:46:56 UTC | #9

The lack of book keeping is really just an issue of capacity. I‚Äôm currently exploring a funding mechanism that would allow ICDevs to hire a community manager to get that all cleaned up a bit.

In this particular case @tomijaga had already completed another bounty and expressed interest through the forum(pm) and I just didn‚Äôt update the public thread.

-------------------------

Pwoseidon | 2022-10-12 23:35:59 UTC | #10

Since canisters can now make HTTP calls, archive canisters could easily use Arweave for cheap long term storage.

Could be an interesting option to the long term storage issue

-------------------------

Iceypee | 2022-10-13 01:28:15 UTC | #11

Hey @tomijaga , just trying to "reverse engineer it" to figure out what youre doing and I was wondering, you have an archive canister for unlimited transaction history but the balance counts stored in STmap of your utils.mo, it is limited to whatever storage one canister gives you. Is this correct?

![image|690x312](upload://1cZ1elWVwF1lkSnhMlC8RjYRrcc.png)

-------------------------

skilesare | 2022-10-13 17:53:29 UTC | #12

Why use arweave when ICP storage is so cheap?  1GB of transaction data is a lot and to keep it native and accessible to other IC canisters is only $5/year.

-------------------------

skilesare | 2022-10-13 17:57:39 UTC | #13

This is how the current ICP ledger works as well.  Balances are kept on the 'head' canister and 'old' transactions get moved to an archive canister that can fill up and then a new one is created.

If you look at the ICP code there is a limit on the number of accounts that can hold ICP if it gets over a (very large number) it actually deletes the smallest balances.

https://github.com/dfinity/ic/blob/eb5edd65b7926d66260db0658eb948d9b7d2e78d/rs/rosetta-api/ledger_canister_core/src/ledger.rs#L192

-------------------------

Pwoseidon | 2022-10-13 18:37:28 UTC | #14

Arweave costs about the same, but you‚Äôll get storage for ‚Äúminimum 200 years‚Äù.

Who knows if it would survive 200 years, but if your 1 GB is stored 2 years for $5, that‚Äôs cheaper than spending $10 for 2 years 

ü§∑üèΩ‚Äç‚ôÇÔ∏è

-------------------------

skilesare | 2022-10-13 18:45:37 UTC | #15

The ability to look up and verify an old transaction is likely necessary for most tokens.  There are a number of payment flows that work by verifying that info.  The ICP canister only holds the 2000 latest transactions, so if you have any kind of async workflow you need access to retrieve the transaction.  Even if you had a dependable HTTP gateway to arweave that you could use HTTP outcalls to you'd be looking at cycle costs on the order(total estimate here) of at least 100,000x the cycle cost of a cross canister call and likely a number of rounds of consensus.

There are likely scenarios where storing data off chain on arweave or ipfs might be ok, but in most cases, you are severely limiting composability.  It should be an anti-pattern for the IC. If you can store the data on the IC, and the unit economics come anywhere close to working in the medium term, you should store it on the IC.  You leave yourself open to serendipity and use cases that you can't imagine now.  Moving it off the IC severely limits that capability.

-------------------------

Pwoseidon | 2022-10-13 19:04:58 UTC | #16

I hope this is only relevant specifically for token transaction history, otherwise the high cost sounds like a major issue. It would force IC to be a closed system, pretty much making it pointless to have outbound HTTP calls if they‚Äôre  so expensive 

(I just looked it up and it‚Äôs 2.275 USD to store 1 GB on Arweave. Def a good deal for some use cases)

-------------------------

Pwoseidon | 2022-10-13 19:17:14 UTC | #17

I‚Äôm confused dude ‚Äî I thought the IC supports HTTP calls, but based on what you‚Äôve said here, it sounds extremely inefficient and costly =\

Hmmmm‚Ä¶

-------------------------

LightningLad91 | 2022-10-13 19:46:04 UTC | #18

[quote="Pwoseidon, post:16, topic:14868"]
(I just looked it up and it‚Äôs 2.275 USD to store 1 GB on Arweave. Def a good deal for some use cases)
[/quote]

Probably important to remember that this is base cost to store on Arweave. After that you have to figure out what you‚Äôre going to do with it. Does Arweave offer any sort of computation capability? If not, what chain do you go to for that and how much cost to make it work.

-------------------------

skilesare | 2022-10-13 19:47:01 UTC | #19

I imagine it will be very expensive relative to a cross-canister call.  Instead of just routing a message across a subnet you will have 13 computers make an outgoing HTTP call and then process whatever result is returned, then run a program to sync the responses and ensure a cohesive answer.

https://forum.dfinity.org/t/enable-canisters-to-make-http-s-requests/9670/106?u=skilesare


According to https://internetcomputer.org/docs/current/developer-docs/deploy/computation-and-storage-costs/ a cross net call's flat fee is 260,000.  So an HTTP out call is 1,538x for just the flat fee.  The per byte for HTTP out calls is 100M per byte, but the xcanister is 1,000 per byte. So your bytes are 100,000x more expensive.  Perhaps @dieter.sommer can give us an update on what the final costs ended up being as this was rolled to production...these were numbers from a beta discussion.

-------------------------

Pwoseidon | 2022-10-13 20:27:05 UTC | #20

Yea good point ‚Äî I think it‚Äôs primarily for storage but it can do some cool things too haha

üôèüèΩ‚ò∫Ô∏è

-------------------------

Iceypee | 2022-10-14 17:50:05 UTC | #21

Ahh I see, that is interesting. Yea I understand that numbers extremely massive. Now thats in rust with very little canister instruction limit right? On a motoko canister, if one were to do some operations on every single balance atomically the actual limit of balances would be limited, no?

-------------------------

tomijaga | 2022-10-16 05:10:06 UTC | #22

It's interesting that the ledger accounts delete balances that are not zero. Does it only choose the account balances below a certain number of decimals?

@Icypee I think the balances are in the main canister because an account balance requires less bytes than a transaction. And transactions tend to grow more than the number of new accounts that buy a token. 

The max size of a transaction is about 196 bytes, and an account balance is about 76 bytes.
Assuming the max size of a canister is 4 GB, it's possible to store 56M account balances in a single canister and only about 21M transactions. 

![Screen Shot 2022-10-16 at 12.37.53 AM|690x432](upload://3CoQzcZC3YXJu1PKGH55vzKUY5D.png)
The screenshot above is of the USDT token, one of the top tokens on the ethereum network with about 4M holders and 160M transactions .

Using this example, we can see that the main canister can store 14x the number of account balances but will need to upgrade to multiple archive canisters to store all the transactions.

-------------------------

skilesare | 2022-10-16 14:03:25 UTC | #23

[quote="tomijaga, post:22, topic:14868"]
It‚Äôs interesting that the ledger accounts delete balances that are not zero. Does it only choose the account balances below a certain number of decimals?
[/quote]

Nope‚Ä¶it just orders them and deletes the smallest balances until it gets to the desired number.

-------------------------

Iceypee | 2022-10-18 17:32:05 UTC | #24

Ahh I see, thats a good point. Yea in reality and esp. with I think canister now moving to 32 gb storage its almost unlikely that another canister is needed. However, my question was more of a thought excercise to see if there was a way to have multi canister balances for one token and keep evertyhing consistent. I come from a education background where we always test with extremas for both 0 and as the limit goes to infinity so having storage limits like this where I can see a potential to scale to infinity keeps me up at night to solve it even if its almost never needed  :sweat_smile:

-------------------------

skilesare | 2022-10-18 19:06:28 UTC | #25

Timo has talked about multi-canister ledgers before, but that is really the only discussion I've seen about it.  As far as motoko ICRC-1 goes...I think we just need to pressure-test it and see how much the performance differs from rust. I'm not expecting that much of a difference given the recent streaming upgrade upgrade.

-------------------------

sardariuss | 2022-12-19 16:39:18 UTC | #26

Is this bounty finished or has ICDev or Dfinity reviewed this implementation of the ICRC1 standard?

Also am I right to think that a canister that uses this library (e.g. https://github.com/NatLabs/icrc1/blob/main/example/icrc1/main.mo) can be used as the ledger canister for a SNS ? In order to be able to kick off a project creating the token first, and maybe later give the control to a SNS governance.

-------------------------

skilesare | 2022-12-19 20:13:00 UTC | #27

@tomijaga , @Iceypee any status updates? I think the last things we were waiting for were the Rosetta integrations.

-------------------------

Iceypee | 2022-12-19 21:29:09 UTC | #28

Oh @skilesare  I wasnt assigned this bounty. Was just asking questions and learning.

-------------------------

tomijaga | 2022-12-26 02:49:29 UTC | #29

Hey, @sardariuss I haven't been keeping up with the developments of SNS but if it supports the icrc1 standard then you should be able to use this library. Maybe @skilesare can tell you for sure if it does. I've implemented all the functions for the icrc1 token standard but I would suggest waiting till the library has been reviewed by the IcDev org before using it in production. 

#### Rosetta Integration
This is the function for the Rosetta API integration. 

https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/txlog.did#L100-L102

The `GetTransactionsResponse ` type for this function has a field, `archived_transactions ` that has a `callback` fn embedded in it. The problem with this is fns are considered shared types in motoko and shared functions are only allowed as public fields in actor classes for now so I keep getting errors when I implement a solution for this type.

https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/txlog.did#L37-L48

I wrote this piece of [code](https://github.com/NatLabs/icrc1/blob/9d8f97481581a188adea1ceba30e34bd8a36711d/src/ICRC1/Canisters/Rosetta.mo#L78-L97) for the `get_transactions` fn but it returns an error: 
``` bash
Stderr:
/Users/dire.sol/Documents/dev/icp/icrc1/src/ICRC1/Canisters/Rosetta.mo:84.111-88.18: type error [M0077], a shared function is only allowed as a public field of an actor
  (This is a limitation of the current version.)
```
Is there any way to return a shared function from an actor without getting this error?

-------------------------

skilesare | 2022-12-23 05:59:29 UTC | #30

Cc @claudio  can you take a look?

-------------------------

claudio | 2022-12-23 23:09:28 UTC | #31

On mobile, but try to define function 'callback' as a public shared function at the same level as, and similarly to, for example, 'get_transactions' instead of locally within 'get_transactions'.

You may want to protect this public function being called by any old caller by checking the caller id appropriately, if that makes sense here.

In Motoko programs targeting the IC, shared functions can only refer to public methods of actors, not locally declared or anonymous functions.

-------------------------

tomijaga | 2022-12-24 16:33:14 UTC | #32

Thanks for your help @claudio!
I understand how to use shared functions better now.
I was able to assign the archive canister's public `get_transactions` function to the `callback` field and return the response without any errors. 
https://github.com/NatLabs/icrc1/blob/main/src/ICRC1/lib.mo#L364-L366

@skilesare The rosetta implementation is done and ready for a full review. Let me know if there is anything else that needs to be done.

-------------------------

blabagastered | 2023-01-07 13:07:22 UTC | #33

Thanks to all involved in creating this. I'll be using it soon and as a critical piece.

I have a basic question regarding ICRC and their interaction with canisters here, in case any of you know: https://forum.dfinity.org/t/how-to-get-a-canisters-address-to-send-icrc-tokens-to-and-generate-further-subaccounts-to-do-the-same/17840

I'll paste it here for ease:

> I have a canister I need to send an ICRC token to. (The aim is for the canister to receive and hold an ICRC token balance).
> 
> How do I, as owner of the canister,
> 
> (a) get the canister‚Äôs default address to send ICRC tokens to, and
> 
> (b) generate additional addresses (not sure if they‚Äôre called subaccounts, whatever they are) controlled by the same canister to send ICRC tokens to?
> 
> Actually, does the ICRC-1 standard distinguish between such subaccounts (I don‚Äôt know if that‚Äôs the term), or does it only recognise one account per canister?

-------------------------

skilesare | 2023-01-07 15:00:41 UTC | #34

ICRC-1 uses the following type for accounts:

```
type Subaccount = blob;
type Account = record { owner : principal; subaccount : opt Subaccount; };
```

So the default accounts is just:

```
let canister account = {
   owner = Principal.fromActor(this);
   subaccount = null;
};
```

Additional accounts can be created by using the subaccount. You theoretically have infinity subaccount.

If you wanted to create an account that was specific for one of your users you would do:

```
let canister account = {
   owner = Principal.fromActor(this);
   subaccount = Principal.toBlob(msg.sender);  //maybe add some magic and hash for more privacy: see: https://github.com/ORIGYN-SA/origyn_nft/blob/99b9460eab0f841eb621deee7863d926d30421ae/src/origyn_nft_reference/utils.mo#L162
};
```

-------------------------

blabagastered | 2023-01-07 21:18:36 UTC | #36

Thanks. Does this mean that if you want to send ICRC tokens to a canister‚Äôs subaccount, you have to separately specify both the principal and the subaccount?

I want to tell the user just: ‚Äútransfer ICRC tokens to SOME_SINGLE_STRING because that‚Äôs the address of the account associated uniquely with you controlled by this canister.‚Äù

A bit like the deposit address centralized exchanges give you. It‚Äôs a single address, and if someone sends money to it, it is used to credit your account in the centralized exhange.

How do I get such SOME_SINGLE_STRING? Ideally I don‚Äôt want the user to deal with two distinct pieces. Just one place to send their tokens to.

```
type Account = record { owner : principal; subaccount : opt Subaccount; };
```

In other words, is it possible to represent the Account type above, in the case of a non-empty subaccount, as a single string address that I give the user for him to just send to that string? How do I do that?

-------------------------

Dylan | 2023-01-07 21:44:14 UTC | #37

The [textual representation of accounts](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#textual-representation-of-accounts) is part of the ICRC-1 spec.

-------------------------

blabagastered | 2023-01-07 22:10:47 UTC | #39

Thank you. Does that mean that every developer who wants to display or read the textual representation of an account has to manually encode and decode the accounts with functions inside the dapp?

Ideally I‚Äôm looking for something along the lines of `Account.toTextualRepresentation()` that I can just use without implementing anything manually.

If there needs to be a dedicated implementation in every dapp, has anyone written the Motoko code to encode and decode them?

-------------------------

inviscidpixels | 2023-01-07 22:58:24 UTC | #40

https://github.com/dfinity/ICRC-1/blob/main/ref/Account.mo

-------------------------

blabagastered | 2023-01-07 23:13:38 UTC | #41

Thanks. I think it clicked in my head now.

-------------------------

blabagastered | 2023-01-08 18:34:58 UTC | #42

[quote="skilesare, post:34, topic:14868"]
`owner = Principal.fromActor(this);`
[/quote]

Do you know why I'm getting 

`unbound variable this`

in this context?:

```
type Account = {
    owner : Principal;
    subaccount : Subaccount;
  };

public shared (msg) func create_user() : async User {
    // Get caller principal
    let callerId = msg.caller;

    let repayment_account : Account = {
      owner = Principal.fromActor(this);
      subaccount = Principal.toBlob(msg.sender);
    };
```
That's all inside my backend canister actor. It's an actor class, not sure if that makes a difference.

-------------------------

skilesare | 2023-01-08 20:16:41 UTC | #43

When you declare your actor you can set this:

shared (deployer) actor class Nft_Canister(__initargs : Types.InitArgs) = this {

}

-------------------------

blabagastered | 2023-01-09 11:36:53 UTC | #44

Thank you. I only added ` = this` to the actor class line, and I'm now getting back a valid Principal but not the right one (browser console):


```
1. owner: Principal

  1. _arr: Uint8Array(10) [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, buffer: ArrayBuffer(10), byteLength: 10, byteOffset: 0, length: 10, Symbol(Symbol.toStringTag): 'Uint8Array']
  2. _isPrincipal: true
```

How do I get "this" to embody the backend canister's Principal?

`      subaccount = Principal.toBlob(msg.sender);` is returning as expected.

[quote="skilesare, post:43, topic:14868"]
__initargs : Types.InitArgs
[/quote]

If it's to do with this part, how do I integrate __initargs to my project?

-------------------------

blabagastered | 2023-01-09 15:53:27 UTC | #45

False alarm, it seems.

`Principal.toText(Principal.fromActor(this));` decodes to `"rrkah-fqaaa-aaaaa-aaaaq-cai"` , which is indeed my backend canister id.` 

`[0, 0, 0, 0, 0, 0, 0, 1, 1, 1]` It's probably the correct [Nat8] representation of the principal. It's probably just the principal of the first canister deployed to the replica.

-------------------------

blabagastered | 2023-01-09 19:57:40 UTC | #46

https://github.com/dfinity/ICRC-1/blob/main/ref/Account.mo#L22

I'm using a canister's principal, blob size 10, as owner, and the assertion is failing (line 22) because it requires a Principal of blob size 32.

Is this a bug? If not, what's going on?

-------------------------

skilesare | 2023-01-09 20:20:08 UTC | #47

@roman-kashitsyn This looks like some legacy stuff from back when canisters couldn't hold ICP.

Actually...now that I look at it, this may be an old implementation from back before the new textual encoding was being discussed.

I think the actual encoding is more like:

```
//note: does not consider crc check on the blob bytes
account_icrc1_text = Principal.toText(Principal.fromActor(this)) # ":" # Conversion.valueToText(#Bytes(#frozen(hash)));
```

Decoding should be pretty straight forward if you just split on ":" and use something like https://github.com/aviate-labs/encoding.mo to decode the second part.

See https://forum.dfinity.org/t/icrc-1-account-human-readable-format/14682/42
and https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/53?u=skilesare

We do really need to tie down the final format. I think we're very close and if you go with principal:bytesinhexwithtruncated0s I think you'll be ok.  If it is intercanister you can ignore the CRC check anyway as no one will be copy/pasting it.

-------------------------

blabagastered | 2023-01-09 20:38:14 UTC | #48

Do you mean the ICRC-1 standard is not finalised yet? The textual encoding at least?

I'll tell you what I'm trying to do:

I need my backend canister to give each authenticated user a unique string for them to send ICRCs to, so that the user can do that from any wallet, and so that when ICRCs arrive there, the canister owns them and knows which user they belong to.

The approach I was taking is 

```
let user_account : Account = {
      owner = Principal.fromActor(this);
      subaccount = ?Principal.toBlob(callerId);
    };
```

and then 

`let text_user_account = Account.toText(user_account);`

That's when I hit that line 22 error.

If I understand correctly I need a Motoko function to get that `Principal.toBlob(callerId)` into a subbacount form that is compatible with `Account.toText()` from https://github.com/dfinity/ICRC-1/blob/main/ref/Account.mo

-------------------------

blabagastered | 2023-01-09 20:47:08 UTC | #49

[quote="skilesare, post:47, topic:14868"]
```
account_icrc1_text = Principal.toText(Principal.fromActor(this)) # ":" # Conversion.valueToText(#Bytes(#frozen(hash)));
```
[/quote]

Though this doesn't seem to include any referece to the subaccount. What is a textual representation for the case where the subaccount is present, and I want that subaccount to uniquely represent a user's principal, so that the text end result is unique to the user.

-------------------------

skilesare | 2023-01-09 20:54:50 UTC | #50

We'll you've got the right idea. Check out https://forum.dfinity.org/t/a-christmas-hack-minimum-viable-approvals/17668.  When we get this finalized the principal will be the canister and the sub-account will be the hash of something that you can use to uniquely assign that sub-account to one of your users(or in the example an approver/transferer pair).

I don't think many wallets have ICRC-1 integrated yet, so your best way to do this to initiate the transaction from your dapp and have your back-end canister take {owner; subaccount;}. Your UI can take care of displaying to the user(show textual encoding if desired).  Your dapp can call something like getApprovalAccount in the example to get the proper subaccount to use.

Basically: You shouldn't really ever have to have an update call take a text string...let the wallet/dapp handle that for you.

-------------------------

blabagastered | 2023-01-09 21:10:23 UTC | #51

Yes, I'm definitely not using the string for the backend, but I want to give the user a single string where funds can be send from anywhere in the IC and everything will work out as expected.

What I tried just now, given the error due to blob size, is turning the user's principal blob into an account identifier with this function here: https://github.com/dfinity/examples/blob/433dd4afc1b1bba2c190993eaee44db33a1a237b/motoko/ledger-transfer/src/ledger_transfer/Account.mo#L27

And then use that as the subaccount here:

```

let user_account : Account = {
      owner = Principal.fromActor(this);
      subaccount = ACCOUNT_IDENTIFIER;
    };
```

and passing 


```
let user_account_provisory : Account = {
      owner = Principal.fromActor(this);
      subaccount = ?Principal.toBlob(callerId);
    };
```

to `accountIdentifier()`

where 

`ACCOUNT_IDENTIFIER = accountIdentifier(user_account_provisory)`

Then I do get back a string that I think and hope is both unique and functional. If you see problems with this approach please let me know.

-------------------------

skilesare | 2023-01-09 21:07:50 UTC | #52

Well...I just think that that particular code you are using is wrong now.  We actually have a meeting tomorrow to hopefully finalize the human-readable encoding:  https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/83?u=skilesare

-------------------------

blabagastered | 2023-01-09 21:14:10 UTC | #53

Alright. Yes, we need to get this done. Textual encoding is very important partly because it allows third parties to send tokens to an account id or controlled by apps they have not had direct contact with / have had no business in producing. 

I may turn up tomorrow if time allows.

-------------------------

dieter.sommer | 2023-01-11 16:07:32 UTC | #54

[quote="skilesare, post:52, topic:14868"]
We actually have a meeting tomorrow to hopefully finalize the human-readable encoding: [Announcing "Token Standard" as topic of the first meeting of the Ledger & Tokenization Working Group - #83 by dieter.sommer ](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/83)
[/quote]

We did not get to this agenda item in yesterday's meeting and will now discuss in the meeting of January 24th. New contributors are of course warmly welcomed! :slight_smile:

-------------------------

blabagastered | 2023-01-13 21:50:26 UTC | #55

If anyone happens to have tips or advice regarding deploying this Motoko ICRC repo as a canister that's not in the readme do share.

I'll probably start tinkering tomorrow.

-------------------------

tomijaga | 2023-01-20 03:22:24 UTC | #56

There was a recent issue on the GitHub page regarding the custom Result type used by the [ICRC-1 reference implementation](https://github.com/dfinity/ICRC-1/blob/main/ref/ICRC1.mo#L97) which capitalizes the first letter of the `#ok` and `#err` variants.

https://github.com/NatLabs/icrc1/issues/3

I'm curious why the Token Standard uses this type instead of the one in the base library.

-------------------------

tomijaga | 2023-01-24 06:12:49 UTC | #57

I've updated the icrc1 lib to use the `TransferResult` type from the standard ([@7af28bb](https://github.com/NatLabs/icrc1/commit/7af28bbfa7d41a20297ff6e349ee0374f9d1b576)) and published a release version to [github](https://github.com/NatLabs/icrc1/releases/tag/0.0.1) and [mops](https://mops.one/icrc1)

-------------------------

skilesare | 2023-01-24 13:25:14 UTC | #58

[quote="tomijaga, post:57, topic:14868"]
github
[/quote]

I was looking last night and I thought that there was a rosetta implementation, but I didn't see any http_request in the Token.mo.  Have you done this yet or is it just the function that exists and it is up to the user to build the http_request pipeline?  I may have been looking in the wrong place!

-------------------------

tomijaga | 2023-01-25 20:55:50 UTC | #59

Hey @skilesare, sorry about the confusion, but this library does not contain an implementation of the rosetta API. It only implements the `get_transactions()` function needed by the [ic-rosetta-server](https://github.com/dfinity/ic/tree/master/rs/rosetta-api).
I was under the impression that exchanges/users could run the server, connect it to an ICRC-1 token and make requests through it using the rosetta API standard instead of interacting with the coin directly via HTTP requests.
If this is the case, I don't think it would be necessary to add the `http_request()` function in `Token.mo` or for token creators to implement it themselves.

-------------------------

skilesare | 2023-01-25 21:32:19 UTC | #60

[quote="tomijaga, post:59, topic:14868"]
ry to add the `http_request()` function in `Token.mo` or for token creators to implement it themselves.
[/quote]

I think you are right.  DFINITY indicated to me that they will likely rewrite the rosetta node to support ICRC-1 in the coming month.  This makes it harder to use an ICRC-1 token to go to a CEX, but we will hopefully get there eventually.

-------------------------

ZenVoich | 2023-01-26 12:08:16 UTC | #61

Hi @tomijaga, I tried to use this library as an interface to interact with the SNS-1 container and found that the subaccount type is `Blob` unlike the SNS-1 canister, which has  `[Nat8]` type. Also ICP ledger canister uses `[Nat8]` for subaccounts.

[ICP ledger candid](https://dashboard.internetcomputer.org/canister/ryjl3-tyaaa-aaaaa-aaaba-cai)
[SNS-1 candid](https://dashboard.internetcomputer.org/canister/zfcdd-tqaaa-aaaaq-aaaga-cai )

-------------------------

skilesare | 2023-01-26 12:13:25 UTC | #62

Nat8 and Blob are aliases for each other in candid. They should be interchangeable.

-------------------------

ZenVoich | 2023-01-26 12:31:05 UTC | #63

The inconvenience starts when you want to use the same subaccount data types as for the ICP ledger

```
type error [M0096], expression of type
  {owner : Principal; subaccount : ?Subaccount}
cannot produce expected type
  {owner : Principal; subaccount : ?Subaccount__1}
```

-------------------------

skilesare | 2023-01-26 12:46:00 UTC | #64

The official type is Blob which puts the SNS out of compliance with the standard. https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md

This is odd. @roman-kashitsyn any idea why this is the case?

Blob.toArray(x) blob.fromArray(x) should get rid of the errors.

-------------------------

roman-kashitsyn | 2023-01-27 13:06:44 UTC | #65

[quote="skilesare, post:64, topic:14868"]
This is odd. @roman-kashitsyn any idea why this is the case?
[/quote]

It appears to be a Motoko-specific problem, or rather the problem with generating Motoko bindings for .did files. Both the ICP ledger and the SNS-1 implementation are implemented in Rust and use the same Account type. The interface files for these ledgers specify that the subaccount is a blob:
https://sourcegraph.com/github.com/dfinity/ic@c790f6d033be1c943e0a068333c9ffc6f8e2de36/-/blob/rs/rosetta-api/icrc1/ledger/icrc1.did?L2

-------------------------

skilesare | 2023-02-28 15:44:11 UTC | #66

I submitted a pull request today updating this library to use aync* which really helps with batch transfers.



https://github.com/NatLabs/icrc1/pull/6

-------------------------

sardariuss | 2023-04-05 22:07:35 UTC | #67

The ICRC-1 standard specifies:

> The caller pays the `fee`. If the caller does not set the `fee` argument, the ledger applies the default transfer fee. If the `fee` argument does not agree with the ledger fee, the ledger MUST return `variant { BadFee = record { expected_fee = ... } }` error.

 - What does "agree" mean here ? I suppose they agree if the argument fee is greater than the ledger fee ?

 - In the current ICRC-1 implementation, which seems to differ from the spec:
    - if the argument fee is set to null (and the ledger fee is >0), the error BadFee is returned
    - whatever fee is passed as argument, it is always the ledger fee that is burnt

Another fee related issue:
https://github.com/NatLabs/icrc1/issues/8

-------------------------

roman-kashitsyn | 2023-04-06 09:55:55 UTC | #68

[quote="sardariuss, post:67, topic:14868"]
I suppose they agree if the argument fee is greater than the ledger fee ?
[/quote]

They "agree" if the client fee and the ledger fee are exactly equal.

-------------------------

