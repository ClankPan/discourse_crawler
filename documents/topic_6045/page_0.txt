peterparker | 2021-07-22 15:29:26 UTC | #1

Given following Motoko code:

```
actor Deck {
    private type DeckData = {
        header: ?Text;
    };
}
```

The SDK (v0.7.7) generates following type declaration:

```
export interface DeckData {
  'header' : [] | [string],
}
```

Isn't that incorrect?

Shouldn't be `header?: string` or `header: string | null`?

-------------------------

cryptoschindler | 2021-08-03 07:32:39 UTC | #2

The optional value JS binding is defined this way:
https://sdk.dfinity.org/docs/candid-guide/candid-types.html#type-opt

-------------------------

peterparker | 2021-08-03 07:48:28 UTC | #3

> The `opt t` type contains all the values of type `t` , plus the special `null` value. It is used to express that some value is optional, meaning that data might be present as some value of type `t` , or might be absent as the value `null` .

Yes, that's why I don't get why it generates Typescript declaration with arrays `[] | [t]` instead of  `t | null`

-------------------------

claudio | 2021-08-03 08:02:04 UTC | #4

I suspect its because the your suggested translation doesn't work as intended for nested option types.

?? T would also translate to T* | null, conflating the two source null values.

But that doesn't mean there isn't a better translation that's possible.

-------------------------

peterparker | 2021-08-03 09:21:11 UTC | #5

[quote="claudio, post:4, topic:6045"]
suggested translation
[/quote]

(noob question) do you mean, in my example, `header: ?Text;`?

-------------------------

kpeacock | 2021-08-03 14:27:03 UTC | #6

I also think there's a better approach for these bindings, but I haven't done a formal proposal on them yet. Optional arguments are the least JavaScriptey design of them all now, though

-------------------------

peterparker | 2021-08-03 14:33:25 UTC | #7

All clear. Go for it, I would really not mind more JavaScript-like optional bindings.

Like I am looking forward to remove my helper ðŸ˜‰.

```
const fromNullable = <T>(value: [] | [T]): T | undefined => {
  return value?.[0];
}
```

-------------------------

jzxchiang | 2021-11-28 01:03:26 UTC | #8

Yeah, it's better to return `T | undefined` instead of `T | null`, because the JavaScript `null` can also represent the Motoko` ()`, so if you had to return `?()` in Motoko, that would map to `null | null` in JS, which wouldn't work.

-------------------------

jzxchiang | 2021-11-28 01:51:49 UTC | #9

Do you know if and when the TS types for Optional will ever be changed to be `T | undefined` by default when `dfx build` is run? Also, is there an easy way for devs to override that locally until it's officially changed?

I'm curious why it wasn't done like that in the beginning.

-------------------------

