blabagastered | 2023-01-15 18:12:31 UTC | #1

Reading up on what the derivation path actually is https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels, it seems really only 2 indices out of the 5 can be modified to construct different valid bitcoin addresses, namely "account", and "address index".

In a Nat8 context, required by at least the Bitcoin Example code, that would reduce the number of valid bitcoin addresses controlable by a single canister in practice to only 255^2 = 65 025.

I believe I read somewhere that one canister can control up to around 2^31 ~= 2 billion addresses.

How many valid and real bitcoin addresses can a canister control in practice? What I mean by that is addresses that:

- won't show "invalid address" when searched for in a traditional bitcoin block explorer,

- won't flag "invalid address" in many bitcoin wallets or from many centralised exchanges when attempting a withdrawal and/or prevent transfers to it,

- will just work with the existing bitcoin network ecosystem without causing headaches for users.

-------------------------

Icdev2dev | 2023-01-13 02:54:50 UTC | #2

As noted from the other topic
[quote="timo, post:6, topic:17939"]
each byte string (blob) in the `derivation_path` must be a 4-byte big-endian encoding of an unsigned integer less than 2^31
[/quote]

Further it is 4 btyte bee encoding...four Nat8s

-------------------------

blabagastered | 2023-01-15 15:10:53 UTC | #3

But it would seem from the bitcoin repo's documentation that if you use all those, most of the generated address will not be considered valid by most existing wallets and block explorers?

[bips/bip-0044.mediawiki at master · bitcoin/bips · GitHub](https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels)

-------------------------

mparikh | 2023-01-15 17:07:18 UTC | #4

[quote="timo, post:3, topic:17939"]
map the principals to *consecutive* Nats (0,1,2,…).
[/quote]

From the quoted article above, use consecutive nats

-------------------------

blabagastered | 2023-01-15 17:13:58 UTC | #5

How is that related to the number of valid bitcoin addresses derivable?

The official consensus format appears to disallow many of those numbers.

Eg, coin type appears to be fixed, etc.
 
![image|690x186](upload://6FlUs7rjSLF8bfQVHxUCmBHghhZ.png)

-------------------------

mparikh | 2023-01-15 17:48:00 UTC | #6

Yes. Bip32 is as you quote it. If you want to follow that standard, then you should foĺlow that standard...meaning that, in context of TECSDA,  leave the hardened paths alone.. work at address_index level?

-------------------------

blabagastered | 2023-01-15 18:12:43 UTC | #7

I'm trying to understand how many usable, real life bitcoin addresses each canister can control. What I mean by that is addresses that:

- won't show "invalid address" when searched for in a traditional bitcoin block explorer,

- won't flag "invalid address" in many bitcoin wallets or from many centralised exchanges when attempting a withdrawal and/or prevent transfers to it,

- will just work with the existing bitcoin network ecosystem without causing headaches for users.

If the answer is only 231 (address_index), or only 231^2 (address_index + account), that is an insufficiently small number for many applications, and would require a substantially different architecture of many such applications.

That's what I mean by *how many **valid and real** bitcoin addresses can a canister control in practice*, which is admittedly not the best wording for the question. I'm editing it.

-------------------------

THLO | 2023-02-01 15:03:50 UTC | #8

[quote="blabagastered, post:7, topic:17945"]
I’m trying to understand how many usable, real life bitcoin addresses each canister can control.
[/quote]

The number of usable Bitcoin addresses is practically unbounded.

It is important to understand that there is no way to tell if a Bitcoin address adheres to the BIP-32 (or a related) standard, so there are no "receiver-side checks".

If you don't care about BIP-32 compliance, you can use arbitrary byte arrays as the derivation path as specified [here](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-ecdsa_public_key).

If you want to follow the BIP-32 standard, you are free to create as many derivation levels as you wish, giving you up to 2³¹ addresses *per level* (the highest-order bit must be 0 because hardened derivation is not supported).

-------------------------

blabagastered | 2023-02-01 15:28:12 UTC | #9


[quote="THLO, post:8, topic:17945"]
The number of usable Bitcoin addresses is practically unbounded.
[/quote]

meaning satisfying these?:

* won’t show “invalid address” when searched for in a traditional bitcoin block explorer,
* won’t flag “invalid address” in many bitcoin wallets or from many centralised exchanges when attempting a withdrawal and/or prevent transfers to it,
* will just work with the existing bitcoin network ecosystem without causing headaches for users.

-------------------------

THLO | 2023-02-02 11:09:20 UTC | #10

The short answer is "yes".

The longer answer: the derivation gives you a derived public key. It only matters that a valid signature can be computed for this public key, which is exactly what the [sign_with_ecdsa](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-sign_with_ecdsa) function does.
You can get an "invalid address" error if there is an error in how you compute the Bitcoin address (encoded in Base58 or Bech32) from the derived public key.
The only other scenarios that I can think of: The destination (for example, an exchange) does not support the address format or the Bitcoin address was blacklisted for whatever reason (which is improbable if it is a freshly derived address).

-------------------------

