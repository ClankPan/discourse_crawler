Cakeday | 2023-10-30 23:19:56 UTC | #1

Hey everyone,

I've been poring over this forum + the docs + the wiki site for how I could accomplish the (seemingly) simple goal of serving a multi-page website from a canister. 

To give an example, how would I go about serving an index.html that renders a page with <a href="/linked">Go to Linked Page</a>, which links to another html page (linked.html, for instance; excuse my pedantry)?

To take the example up a notch, would I be able to use an HTML templating library to render dynamic, arbitrary HTML and send that back to the user? Would I be able to handle multipart/form POST requests to modify state in a canister? PATCH and DELETE requests? This approach would enable the classic web server approach to building applications, but with the benefits of running on the internet computer -- not to mention that this is basic web technology.

Long story short, I would love to somehow build a canister that responds to http requests and returns http responses (in my case, HTML, though JSON etc would fit the bill as well... I'm wanting an HTMX, HATEOAS approach to building frontends). 

My understanding is that the HTTP Gateway Protocol is implemented by Boundary Nodes, which essentially bridge HTTP <---> ICP. However, IIUC, canister devs do not have access to these gateways in the sense that we develop our code to run on them. I saw some icx-proxy related discussions, but I'm a bit lost on the discussion (especially since the repo is now archived). My understanding of the static asset canister is that it can only serve SPA's via a single index.html entrypoint specified in a dfx.json, meaning front ends have to built with client-side-rendered applications such as React, Vue, etc. So, I'm guessing that a canister has to be created manually to handle what I'm talking about.

Would anyone happen to have a Rust proof-of-concept laying around?

-------------------------

Cakeday | 2023-10-30 23:45:54 UTC | #2

Is it as simple as implementing http_request and http_request_update on various fn's defined in my lib.rs, and returning HTML in the response body? 

(also for more context, I'm wanting to see if there is an approach that doesn't involve JS at all)

-------------------------

miadey | 2023-10-31 01:03:30 UTC | #3

Currently working on something similar here (POC), an MVC like structure with HTMX. You can have a look a this.
https://github.com/miadey/thai-stack
but facing some CORS issue on inter-canister http calls, probably one of my last hurdle. Tried to tweak the .ic-assets.json without succes.  Next step was to document the process's and implement a light templating engin.

-------------------------

Severin | 2023-10-31 08:14:31 UTC | #4

[quote="Cakeday, post:1, topic:24264"]
My understanding of the static asset canister is that it can only serve SPA’s via a single index.html entrypoint specified in a dfx.json, meaning front ends have to built with client-side-rendered applications such as React, Vue, etc. So, I’m guessing that a canister has to be created manually to handle what I’m talking about.
[/quote]

Yes, all correct

[quote="Cakeday, post:1, topic:24264"]
To take the example up a notch, would I be able to use an HTML templating library to render dynamic, arbitrary HTML and send that back to the user? Would I be able to handle multipart/form POST requests to modify state in a canister? PATCH and DELETE requests? This approach would enable the classic web server approach to building applications, but with the benefits of running on the internet computer – not to mention that this is basic web technology.
[/quote]

For this you probably would have to implement something like Kyle's [certified-cache](https://github.com/krpeacock/certified-cache). It's in Motoko, but probably could be ported to Rust relatively easily

[quote="Cakeday, post:2, topic:24264"]
Is it as simple as implementing http_request and http_request_update on various fn’s defined in my lib.rs, and returning HTML in the response body?
[/quote]

If you're willing to go through `raw`, then yes. Otherwise it's a much more involved process because you have to do asset certification. Reason being that otherwise, because `http_request` is a query call and gets answered by a single replica, a malicious replica could respond with arbitrary, malicious code without anyone detecting it.

If you want to do certification (please only handle v2, deprecating v1 is already floating around as an idea), you can use [this folder](https://github.com/dfinity/sdk/tree/master/src/canisters/frontend/ic-certified-assets/src/asset_certification) to copy/paste a lot of the implementation. We plan to turn it into a proper crate soon(TM), but it'll probably be a while until it's done. To test your implementation you can do it [like this](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/tests.rs#L85-L89) in unit test. If it passes this verification step then it'll also pass on mainnet. The boundary nodes use the same crate under the hood

-------------------------

7flash | 2024-05-19 01:39:56 UTC | #5

Here is my solution: https://github.com/galaxydo/ic-sw-starter

-------------------------

