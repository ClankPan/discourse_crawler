lastmjs | 2021-08-09 15:12:32 UTC | #1

Has anyone run into this runtime error in Rust? `time not implemented on this platform`.

Just pointing out that it would be nice for the Rust CDK or the Wasm environment to implement these basic functionalities, time, randomness, etc for wasm32-unknown-unknown on the IC

-------------------------

GLdev | 2021-08-09 15:32:55 UTC | #2

Yes, I hinted about this on the other topic. I hit the same thing, and luckily there's an api for that in the sdk! Here's an example that I've tested, and works:

```
use ic_cdk::api::time;

#[update(name = "greetUpdate")]
fn greet_u(name: String) -> String {
    let greeting_store = storage::get_mut::<GreetingStore>();

    let message = format!("Updated Message: {}!", name);
    let timestamp = time();
    let p = ic_cdk::api::caller().to_text();

    let g = Greeting {
        message: message.clone(),
        timestamp,
        principal: p,
    };

    greeting_store.push(g);

    message
}
```

-------------------------

lastmjs | 2021-08-09 15:58:04 UTC | #3

Awesome, yes I have independently used the ic-specific time functionality, but it would be nice to use `std::time::Instant::now()`, which my dependency was using. I just commented their code out, and yes I could probably use the ic-specific code, but it would be nice to not have to rewrite all of the already-existing libraries that will probably use `std::time`

-------------------------

botch | 2021-08-09 22:42:54 UTC | #4

Yes, I've had to fork some libs to support ic time().

Mostly like:

```
pub fn u64_to_datatime(time: &u64) -> DateTime<Utc> {
    let sys_time = UNIX_EPOCH + Duration::from_nanos(time.clone());
    DateTime::<Utc>::from(sys_time)
}

```

If you are doing scheduling, time is constant within a single call. You could use an inter-canister model! I agree if there is support for native std::time that would save lots of time

-------------------------

lastmjs | 2021-08-11 16:22:40 UTC | #5

@botch and @gldev thanks for the examples, helped me solve a separate but related issue.

-------------------------

