mymikemiller | 2024-04-26 20:04:55 UTC | #1

My project is currently written entirely in Motoko. There is an [SDK](https://docs.rs/aws-sdk-s3/latest/aws_sdk_s3/) I would like to use (specifically the [presigned](https://github.com/awsdocs/aws-doc-sdk-examples/blob/ba0952741c695382a500505d654e37475ddfb1af/rustv1/examples/s3/src/bin/put-object-presigned.rs#L50) function, to [generate a presigned URL](https://docs.aws.amazon.com/AmazonS3/latest/userguide/example_s3_Scenario_PresignedUrl_section.html) so my users can upload files directly to CDNs that support the S3 Object Storage interface), but the SDK isn't available in Motoko. There is a Rust version, however. 

I would like to avoid setting up a lambda on AWS just to generate this URL, so I'm thinking I could create a Rust canister that uses the SDK, add it to my project alongside my Motoko canisters, and have my Motoko canister call into that Rust canister directly when it needs to generate the URL. 

Is this the right way to go about things? Are there examples you could point me to where a Motoko canister communicates with a Rust canister in the same project?

-------------------------

Gekctek | 2024-04-26 22:56:34 UTC | #2

It's something that is being investigated, how to integrate Motoko with Rust code
But right now the way to do it is just separating the motoko and rust canisters and make calls between them

-------------------------

skilesare | 2024-04-27 02:03:01 UTC | #3

It is a bit more subtle than that. See this thread https://forum.dfinity.org/t/exploration-calling-rust-functions-from-motoko/27913.

If you use this and composite queries, because if the way motoko works, it is *like* it is on your canister. Performance should be roughly the same unless you are passing a ton of data across.

-------------------------

mymikemiller | 2024-05-22 19:35:06 UTC | #4

Reading through the thread linked above, it looks like the best way for me to proceed, at least at the current time, is to use [Canpack](https://github.com/rvanasa/canpack). I'm getting node errors running the `canpack` command, so I've filed [an issue](https://github.com/rvanasa/canpack/issues/6) there, but I'm reaching out to this community to see if anyone has had success lately using Canpack to expose a Rust crate's functions to a Motoko canister, or if there's an alternative best-practice by now.

-------------------------

rvanasa | 2024-05-27 18:49:30 UTC | #5

Resolved the issue in [this PR](https://github.com/rvanasa/canpack/pull/7). The most common approach is to create a separate Rust canister and then call methods from Motoko. Canpack is essentially a wrapper which generates the Rust canister from a config file. Note that this only works for libraries which export a top-level `canpack!` macro. Here is [more information](https://github.com/rvanasa/canpack?tab=readme-ov-file#rust-crates) for anyone reading this who is interested.

-------------------------

