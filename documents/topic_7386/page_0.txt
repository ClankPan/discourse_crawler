C-B-Elite | 2021-09-19 06:31:56 UTC | #1

Canister.mo :
```
shared(installer) actor class canister() = this{
    public query func test() : async Text{
        "test canister"
    };
};
```

test.mo  :
```
private type interface = actor{
    test : query() -> async Text;
};

public shared func test() : async (){
    let canister = await Canister.canister();
    let principal = Principal.fromActor(canister);
    let text = Principal.toText(principal);
    let c = actor text : interface;
}

```
The code of test.mo is wrong at :
```
let c = actor text : interface;
```
How can I call a canister from  canister's principal in a canister ?
&
other use case of "this" beside :
```
shared(installer) actor class canister() = this { ······ }; 
···
Principal.fromActor(this)
···
```

-------------------------

nomeata | 2021-09-21 07:30:41 UTC | #2

Blind guess (on the phone right now), but try `actor (text)`, else the completer might think you are defining a new actor named text here.

-------------------------

C-B-Elite | 2021-09-21 07:37:42 UTC | #3

Perfect answer, I have solved it !
example code :

canister.mo
```
shared(installer) actor class canister() = this{
    public query(msg) func test() : async Text{
        "test canister"
    };
};
```

main.mo
```
import Debug "mo:base/Debug";
import Principal "mo:base/Principal";
import c "canister";
actor {
    private type testCanister = actor{
        test : query() -> async Text;
    };
    public func test() : async (){
        var canister = await c.canister();
        var principal = Principal.fromActor(canister);
        var text = Principal.toText(principal);
        let canister_ = actor (text) : testCanister;
        Debug.print(await canister_.test())
    };
};

```

-------------------------

cyberowl | 2022-01-30 03:29:42 UTC | #4

[quote="C-B-Elite, post:3, topic:7386"]
```
    private type testCanister = actor{
        test : query() -> async Text;
    };
```
[/quote]

I am guessing we have to define the type otherwise we get `type error [M0058], no type can be inferred for actor reference`. Edit. Yup that seems to be the case.

-------------------------

