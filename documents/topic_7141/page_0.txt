ayazgv | 2021-09-10 15:16:12 UTC | #1

Hello Dears!

How to pass arguments when creating canister programmatically like below?
May I wrongly formatting arguments
Or is there any other way to pass arguments when initialization canister programmatically?

```
let install_config = CanisterInstall {
    mode:InstallMode::Install,
    canister_id: canister_id.clone(),
    wasm_module: wasm_module.clone(),
    args: b"(arg1, arg2)".to_vec()  // What is the argument's format?
}
api::call::call(Principal::management_canister(), "install_code", (install_config,)).await...
```

-------------------------

nomeata | 2021-09-10 15:17:31 UTC | #2

[quote="ayazgv, post:1, topic:7141"]
What is the argument's format?
[/quote]

That depends on your canister code in `wasm_module` :-)

-------------------------

ayazgv | 2021-09-10 15:20:39 UTC | #3

Here is the init function args
`fn init(name: String, symbol: String, decimals: u64, total_supply: u64)`
how to pass these arguments?

-------------------------

nomeata | 2021-09-10 15:41:41 UTC | #4

I assume this means that the init function is expecting Candid encoded arguments? (I donâ€™t know the Rust CDK well).

In that case, encode your arguments as well using [the Candid library](https://docs.rs/candid/0.7.7/candid/). Something like `Encode!(&(arg1, arg2))` or so.

-------------------------

ayazgv | 2021-09-10 15:42:54 UTC | #5

Yep, I will try this

-------------------------

ayazgv | 2021-09-12 07:21:37 UTC | #6

I used `encode_args()` for arguments like this:

```
use ic_cdk::export::candid::{encode_args};

let canister_args_result = encode_args(("MyName", "MN", 18 as u64, 0 as u64));
let canister args = match canister_args_result {
    Ok(res) => res,
    _ => Vec::new()
};
```
And it works!
Thank you @nomeata

-------------------------

