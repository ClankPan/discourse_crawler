diegop | 2021-09-22 15:48:26 UTC | #1

**Summary**

ECDSA signatures are widely used in the blockchain industry. This feature will enable Canisters to have an ECDSA public key and to sign with regard to it. The corresponding secret key is threshold-shared among the nodes of the subnet holding the Canister. This is a prerequisite for the integration of the Internet Computer with Bitcoin and Ethereum.

**Status** 
Discussing

**What you can do to help**

* Ask questions
* Propose ideas

**Key people involved** 
 
Jens Groth (@JensGroth),  @Jan , Dieter Sommer (@dieter.sommer ), Victor Shoup (@victorshoup ), Manu Drijvers (@Manu), Andrea Cerulli

## Timelines
- [x] 1-pager posted on the forum for review: *September 10, 2021*
- [x] Community Conversation with Victor Shoup: *September 16 2021*
- [x] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/21340) (to approve design + project) submission:  *September 20, 202115:00 UTC*  
- [x] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/21340)  (to approve design + project) expiration: *September 22,2021, 15:00 UTC* 
- [ ] If NNS Motion Proposal passes, implementation + deploy would take months: *Q4 2021.*


## Description

ECDSA signatures are widely used and will be a feature of the Internet Computer. The most important use case is the integration of the Internet Computer with the Bitcoin and Ethereum blockchains. On those blockchains transactions are ECDSA signed with respect to a public key that represents the assets holder. In order to fully integrate with those external blockchains, canisters on the Internet Computer should be able to have Bitcoin or Ethereum public keys and create ECDSA signatures to authorize transactions.

It is clearly not acceptable that any node on the Internet Computer holds and thus learns a private signing key, because the trust model of the Internet Computer is defined such that up to a third of the node machines hosting a canister may be arbitrarily faulty. The solution is to have private keys secret shared among all node machines running a canister and create the signature through threshold cryptography. That is, if a threshold of the nodes participates in and completes the signing protocol correctly, the output of this protocol is a valid signature. On the other hand, a few nodes that do not meet the threshold cannot sign an unauthorized message by themselves.

The main challenges in this feature are to define and implement a secure multi-party computation protocol to realize the threshold ECDSA signature scheme and to integrate it with the Internet Computer protocol stack. Further challenges around the core protocol are the secure distributed key generation protocol as well as a secure key backup and recovery scheme for the private signing keys.

Goal: canisters and users can ask the IC to create ECDSA keys and signatures

To reach scoped status: we need an MVP spec giving assurance the goal is achievable and on which we can estimate engineering steps and effort

Draft plan: ECDSA calls will be IC Management canister calls
- Story (Execution and Bitcoin integration): write spec for ECDSA methods offered by IC Management canister, they will only be available on dedicated subnets
- Story (Execution): decide on ECDSA cycle cost and billing
- Epic (Message Routing): store ECDSA requests in an appropriate place for Consensus-ECDSA module to read them + store deterministic replicated state for ECDSA protocols
- Epic (Consensus): poll MR (*Message Routing Layer*, the layer between Consensus and Execution) for new and state of existing ECDSA operations
- Epic (Consensus): return responses to ECDSA requests to MR + agree on any intermediate state that is replicated across all participating nodes and return it to MR
- Epic (Consensus/P2P/Crypto?): store state that is individual to nodes and not replicated

-------------------------

flyq | 2021-08-17 03:19:17 UTC | #3

https://github.com/ZenGo-X/multi-party-ecdsa
They have been worked a lot in TSS

-------------------------

cryptoschindler | 2021-08-20 06:57:09 UTC | #4

Hi Diego,
thank you for writing this up, very insightful! I have two questions:

- Is it possible for canister to request multiple ECDSA public keys?

- What does MR refer to?

-------------------------

diegop | 2021-08-20 18:29:36 UTC | #5

[quote="cryptoschindler, post:4, topic:6152"]
* Is it possible for canister to request multiple ECDSA public keys?
[/quote]
I am not sure, I think Victor or @Manu  may best suited to answer this. They are wrapping up some work, so I expect this thread to be more active next week.

[quote="cryptoschindler, post:4, topic:6152"]
* What does MR refer to?
[/quote]
This refers to "message routing." This is the layer *between* Consensus and Execution. It is responsible for routing messages to the right smart contract canisters. I will update this in the summary.

-------------------------

Maxfinity | 2021-08-20 19:24:54 UTC | #6

Will a threshold signature scheme work for ECDSA? I thought BLS could be aggregated easily without many rounds of interactivity, but the same was not true for ECDSA. How does the team propose to solve this and improve on the work of Goldfeder and others?

-------------------------

Manu | 2021-08-25 07:31:40 UTC | #7

[quote="cryptoschindler, post:4, topic:6152"]
* Is it possible for canister to request multiple ECDSA public keys?
[/quote]

Yes, we are planning to support that! Ideally we'll do something like BIP32 to allow canisters to derive many public keys.

-------------------------

cryptoschindler | 2021-08-25 09:54:39 UTC | #8

Cool, thank you! 

How are access rights being checked? E.g. how to make sure that only the canister that "owns" the public key is able to request a signature?

-------------------------

victorshoup | 2021-08-25 10:12:16 UTC | #9

You are right that while BLS is relatively easy to implement as a threshold scheme, ECDSA is quite a bit more challenging. This paper ("A Survey of ECDSA Threshold Signing", by  Aumasson, Hamelink, and Shlomovits, see eprint 2020) surveys the state of the art for threshold ECDSA protocols (as of last year). Unfortunately, none of these protocols really satisfy all of our design constraints: they either assume a synchronous network or they allow a single faulty node to prevent signatures from being issued (i.e., they do not guarantee output delivery) or both.

We have designed new protocols that work in an asynchronous setting and which guarantee a signature is produced when requested, even if some nodes are faulty (but we do assume that less than one third are faulty, as usual in all of our protocols). Our new protocols rely on our consensus protocols. They also perform pre-computations that will ensure that when a signing request comes in, it should be satisfied with just a single round of communication (no consensus needed).

We are writing a couple of papers that detail our protocols and their security analysis. We hope to make these public soon!

-------------------------

victorshoup | 2021-08-25 10:16:09 UTC | #10

Hi all, I'm Victor and I'm on the threshold ECDSA team. I'll do my best to answer any questions that you may have.

-------------------------

dpdp | 2021-08-25 11:31:05 UTC | #11

I can see some progress being made already: https://github.com/dfinity/ic/commit/35dd8f93dec82662ed4df35664a9c0be6dbf203a#diff-3aa982ee5d10c8cd2c1edc62a94f2fc95c666e1daba82a47ca63d52b3aa38f58R1

:fire:

-------------------------

Manu | 2021-08-25 12:34:56 UTC | #12

Access to the ECDSA signing key is controlled through some "system API". Canisters can call this API in a way that is very similar to how they can call other canisters. In the system API, we simply keep track of which canister makes the signing request, and then the replicas of the subnet will collaboratively sign with that canister's key. Does that make sense?

-------------------------

Maxfinity | 2021-08-25 12:55:47 UTC | #13

Ooh, sounds exciting!

-------------------------

skilesare | 2021-08-25 16:00:19 UTC | #14

What is the probability that we end up not ever getting canister ability to hold ICP and it is instead implemented with this api where the canister has to instantiate an ephemeral key for access?  It isn't a terrible idea...but I also don't want to wait. :grimacing:

-------------------------

cryptoschindler | 2021-08-25 17:01:29 UTC | #15

Yes that makes sense, thank you! So you only need one "main" key that signs for derived public keys too?

-------------------------

diegop | 2021-08-25 17:44:27 UTC | #16

[quote="victorshoup, post:10, topic:6152, full:true"]
Hi all, I’m Victor and I’m on the threshold ECDSA team. I’ll do my best to answer any questions that you may have.
[/quote]

I thought folks would find it helpful to get some context on Victor's background:

a. https://en.wikipedia.org/wiki/Victor_Shoup
b. https://scholar.google.com/citations?user=H4cQsHAAAAAJ&hl=en

-------------------------

diegop | 2021-09-04 14:36:50 UTC | #17

**Update** : Now that Increased Canister Storage has gone through community-wide voting, this is the next project (1 of multiple concurrently) that will go through a similar open design process and voting.

-------------------------

nomeata | 2021-09-04 11:33:54 UTC | #18

[quote="Manu, post:12, topic:6152"]
Canisters can call this API in a way that is very similar to how they can call other canisters.
[/quote]

I assume these operations are mostly asynchronous, right? So I assume it wouldn't be exposed via the System API directly, but rather via a virtual canister that you call asynchronously, like the existing access to secure randomness?

-------------------------

Manu | 2021-09-05 09:43:26 UTC | #19

> I assume these operations are mostly asynchronous, right? So I assume it wouldn’t be exposed via the System API directly, but rather via a virtual canister that you call asynchronously, like the existing access to secure randomness?

Hey Joachim! Yes you're exactly right, thanks for clarifying that.

-------------------------

skilesare | 2021-09-09 11:58:57 UTC | #20

Copied from the Bitcoin thread:

I was listening to @Manu's explanation on the podcast this morning and a question occurred to me.

The IC is secure because the subnets can refresh the public key and switch it out for a new key via a zk generation of a key portion. They can do this a bunch so bad actors have limited time to coordinate(I don’t know how often this actually happens…would be great to know).

With BTC and ETH integrating, we need to control addresses and contracts from a specific identity. Once these are generated and on chain, you can’t really swap them out(unless the contract you are interacting with supports it). So will these keys be inherently less secure? If I ask the subnet to generate an address for me, I’m guessing all nodes have a bit of the key. If >2/3 decide I have too much at my address they could collude to take it? And they have infinity amount of time to do this because I can’t change the key on the remote chains?

What if more than 1/3 of the original nodes that generated your key portions go offline permanently? The IC can just add new nodes and generate a new public key…ETH and BTC won’t be able to do this.

I’m probably missing something here, but I think it is worth understanding.

Edit: I’m sure on ETH you could overcome this by always sending requests through a wallet-like contract that has the functionality for swapping out keys…not sure about BTC.

-------------------------

nomeata | 2021-09-09 12:31:09 UTC | #21

I thought subnets refresh their _private_ key shares, but the public key doesn't change. Does that resolve your worries?

-------------------------

skilesare | 2021-09-09 14:48:52 UTC | #22

That might resolve things. I'm guessing there are a large set of potential portion combinations that can be shuffled or reselected to keep the public key the same.  Does it invalidate the old keys?  I think that is the issue...if there are a set of previously available keys floating around or that eventually fall into the wrong hands then a bad actor could reconstitute.  Of course, there are probably some cryptographic schemes that would allow for a very distributed set of portions....but I'm not sure how to deal with historic portions.  Perhaps I need to go back and watch those key-sharing videos from the launch!

-------------------------

lastmjs | 2021-09-09 18:25:15 UTC | #23

My understanding is that the main innovation of chain key technology is that there is an eternal public key that has a corresponding "private key" maintained by a dynamic set of participants who hold secret key shares. When I looked into the paper, I believe a core component was that the secret key shares were safe against compromise because of the property of forward secrecy. Past shares can't be used to compromise the key pair.

That's my understanding, hopefully someone with actual expertise could back that up.

-------------------------

skilesare | 2021-09-09 18:33:24 UTC | #24

[quote="lastmjs, post:23, topic:6152"]
Past shares can’t be used to compromise the key pair.
[/quote]

Fantastic....if we can get this confirmed it eliminates my concerns.

-------------------------

victorshoup | 2021-09-10 00:05:54 UTC | #25

That's right: both for the existing "chain key technology" and the upcoming threshold ECDSA protocols, even though a public keys live forever, the sharing of the corresponding private keys (among the replicas in a subnet) is periodically refreshed, with old shares being erased. This is a concept known as "proactive security" (not exactly the same thing as "forward secrecy", BTW, but certainly related). So as long as not too many shares leak in any short interval of time, the long-term security of the private key is assured.

-------------------------

LightningLad91 | 2021-09-10 00:05:59 UTC | #26

Hi! I believe this video by Jens Groth may help. Skip to 16:40. 

https://m.youtube.com/watch?v=gKUi-2T7tdc

-------------------------

diegop | 2021-09-10 00:07:57 UTC | #27

**Update**: we should have a 1-pager for the community to read tomorrow Friday September 10th. We will post then.

-------------------------

diegop | 2021-09-10 00:12:36 UTC | #28

[quote="diegop, post:1, topic:6152"]
* 1-pager posted on the forum for review: September 10, 2021, 15:00 UTC
* Community Conversation - Threshold ECDSA: *Week of september 13th*
* NNS Proposal submission: September 15,15:00 UTC
* NNS Proposal expiration September 17, 2021, 15:00 UTC
[/quote]

Hi folks, I updated the main description with the latest timeline.

-------------------------

diegop | 2021-09-10 13:40:23 UTC | #29

[quote="diegop, post:1, topic:6152"]
## imelines

* 1-pager posted on the forum for review: *September 10, 2021*
* Community Conversation - Threshold ECDSA: *Week of september 13th*
* NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*
* NNS Motion Proposal (to approve design + project) expiration: *September 17, 2021, 15:00 UTC*
* If NNS Motion Proposal passes, implementation + deploy would take months: *Q4 2021.*
[/quote]

Hey folks,

I just updated the timeline for this feature based on what we currently see as potential engineering scope (within an order of magnitude, and it will get clearer as we get more info).

-------------------------

Manu | 2021-09-10 14:58:03 UTC | #30

Hi all!

In this post we’ll share a more concrete design on how we can integrate threshold ECDSA signatures into the internet computer. Please give us feedback! Similarly to the proposal for “increased canister storage”, we plan on submitting an NNS motion proposal for the community to vote on whether the final version of this design should be implemented.

# NNS Proposal: threshold ECDSA signatures

## Objective

We want canisters to be able to hold BTC, ETH, and for them to create Bitcoin and Ethereum transactions. Since those networks use ECDSA, a canister must be able to create ECDSA signatures. We do not want the corresponding secret key to be part of the replicated canister state, so instead the secret key will be shared among the replicas of the subnet, and they must be able to collaboratively create threshold ECDSA signatures whenever a canister makes a signature request.

## Proposal

### Canister interface

* Requesting a signature: Canisters will be able to request a signature using the following method. When the derivation_path is set, the message is signed with the corresponding private key derived from the canister key.


```
sign_with_ecdsa : (record {
    message_hash : blob;
    derivation_path : opt blob;
}) -> (record {
    signature : blob
});
```

* Retrieving the public key: Canisters will ask for their public keys via the following API. When the derivation_path is set, the corresponding public key is returned.


```
get_ecdsa_public_key : (record {
    derivation_path : opt blob;
}) -> (record {
    public_key : blob
});
```

### Creation of ECDSA signatures

Every subnet will have a single ECDSA key pair for efficiency reasons. From that, we can apply standard key derivation mechanisms to derive per-canister keys. Canisters can then further derive many keys using BIP32 key derivation.

### Creating the requested ECDSA signatures

Threshold ECDSA signatures are much more difficult to construct than threshold BLS signatures, which we already use on the Internet Computer. Threshold BLS signatures only require one secret key shared among the replicas. For ECDSA, we also need a secret key shared among the replicas, but additionally, we need several more shared values, and those values can only be used for a single signing request. This means that we will need to do many distributed key generations to be able to answer signing requests. For efficiency reasons, we will use an interactive DKG protocol (unlike the non-interactive DKG we use for BLS), as the interactive version is computationally more efficient. The full cryptographic details of the interactive DKG and threshold ECDSA signing will be published in a paper that should appear in the following weeks.

The consensus layer will orchestrate these interactive DKGs: blocks are extended with some extra payload indicating

* which tuples of shared secrets are available for signing requests,
* which signature requests are paired with a tuple or shared secrets and are ready for threshold signing,
* Information about which interactive DKGs should be ongoing, which adds new shared secrets from which we can replendish the set of available tuples.
* Completed signatures that can be delivered back to the canister

A separate component for threshold ECDSA will handle most of the real work based on the information in the block chain:

* It creates & gossips the interactive DKG messages
* It creates & gossips ECDSA signature shares
* It creates & gossips completed ECDSA signatures by aggregating sufficiently many ECDSA signature shares

This component builds on the crypto component, and the consensus/crypto interface will be extended with methods to create dealings/validate interactive DKG messages, create/validate signature shares, and aggregate/validate ECDSA signatures.

## Risks

* Subnets cannot tolerate more than 1/3rd of the replicas being malicious. The threshold ECDSA feature also builds on that assumption: if a subnet has too many colluding malicious parties, they can create signatures on a canisters behalf without a canister’s approval.

## Alternatives considered

* Non-interactive DKG: for BLS signatures, we currently use a non-interactive distributed key generation algorithm, which has the advantage that it’s simpler conceptually and easier to integrate into the blockchain. This however requires computationally intensive zero-knowledge proofs. Since ECDSA signatures require many DKGs per signature, we believe we need a more efficient solution, and therefore prefer an interactive DKG.

## Testing & Quality Assurance

This is a highly security-critical feature of the Internet Computer as substantial value in terms of Bitcoin and Ether will be secured with it in the future. Thus, the implementation of the feature needs to be covered by accordingly stringent automated testing. Clearly, unit tests and integration tests will be used to assure the correctness of individual methods and components, respectively.

System tests will help ensure that the feature as a whole works as intended and does not interfere with the behaviour of the Internet Computer in unintended ways. System tests are written using a Rust-based framework and spin up testing subnets for the feature in a testing environment. Production tests likewise end-to-end test the feature, however in an environment that is as close as possible to the future production environment. For example, our production testing framework will spin up a test Internet Computers with node machines in geographically distributed data centers to run our end-to-end tests for the feature. An area where production tests can give helpful insight is the identification of performance bottlenecks.

One specific example of a production test that we intend to write is that of a replica leaving the subnet while it is responsible for making a signature.

In addition to testing, we will perform a thorough security review of the threshold ECDSA implementation towards the end of the project, ensuring that the implementation truthfully and securely implements the protocol.

## Rollout plan

This feature will be steered by a feature flag in the subnet record in the registry. That means that via proposals this feature can be enabled/disabled. Initially, we’ll disable this on all subnets, and we can via NNS proposals enable this feature on specific subnets.

We will mark the exposed API of the feature as experimental at initial launch. Once we have gained sufficient experience with the feature in a real-world production setting and its use by the community, we will mark it as no longer being experimental.

## Timeline

Given the complexity of the feature and requirements for a rigorous quality assurance, we anticipate multiple months of engineering and testing effort. Optimistically we aim to complete this feature in 2021, but we clearly cannot compromise on quality and correctness of the implementation.

-------------------------

nomeata | 2021-09-10 15:14:24 UTC | #31

Have you considered
```
    derivation_path : blob;
```
i.e. instead of having a “special” key (`derivation_path = null`) and then many named keys, conceptually just have one set of named keys per canister.

This avoids questions like: Is `derivation_path = null` and `derivation_path = opt blob ""` the same thing?

-------------------------

egeyar | 2021-09-10 16:59:58 UTC | #32

Hi Joachim
Nice to hear from you. Thank you for the suggestion. We could do that as well.
Cheers!

-------------------------

nomeata | 2021-09-10 17:54:24 UTC | #33

(Not constructive comment:)
I can’t help but notice that if the Internet Computer application model would have a first class notion of capability, then “the right to ask the subnet to sign with a given private key” woudldn’t be eternally rigidly tied to a single canister, but could be moved around and shared. And the API would actually be easier (derivation path only relevant when creating the key and capability, but not further on). Maybe next time ;-)

(More constructive question:)
How will this interact with a hypothetical feature of moving canisters transparently from one subnet to another? Or splitting subnets? For example, the routing table is designed to allow that to happen; would canister-bound ECDSA signatures prevent that?

-------------------------

skilesare | 2021-09-10 19:19:50 UTC | #34

[quote="Manu, post:30, topic:6152"]
Subnets cannot tolerate more than 1/3rd of the replicas being malicious. The threshold ECDSA feature also builds on that assumption: if a subnet has too many colluding malicious parties, they can create signatures on a canisters behalf without a canister’s approval.
[/quote]

Seems like another risk is the subnet becoming corrupted somehow.  If you lose the subnet, you lose the keys.  If you're going to go BIP32, what if the whole network used the same key? That way all subnets would have to fail.  Maybe it is a bigger security risk because all nodes have a share of the key and collusion could be easier?

-------------------------

ComputerInternetMan | 2021-09-10 20:49:35 UTC | #35

They had me at ‘consensus/crypto’ interface. Seriously tho’ skilesare think a comment u made on a previous thread that ‘present security’ applies is apropos. So if using zero knowledge proofs to decrypt my encryption (what’s in the box) is the heavy lifting now …ECDSA requires several more shared values which can only be used for a single signing request…. A symphony of communication orchestrated by a conductor beacon begets Perpetual Public Keys (FTW.  😎)   Am sure that the stress testing will be front and center for all us. Will offer a comment and am happy to hear, down the road, if your results match , I think that u can push the non-malicious down to 60% from 66%. If there is such a thing as a faster time frame in this asynchronous platform ( the arrow of time putting the Tok after Tik ) u might be able to go to 30%. Again just a theory , there to be disproven. Looking forward to your seminal documentation.

-------------------------

victorshoup | 2021-09-10 22:07:42 UTC | #36

Good point! Indeed, the current plan is that there will be a single master key that will be deployed in several subnets. Individual canisters will derive subkeys (as in BIP32) from this master key (we have been analyzing other derivation procedures, but for compatibility reasons, we will likely stick with BIP32). This means we can do disaster recovery as you suggest, unless all subnets on which the master key is deployed fail simultaneously. To protect the secrecy of the master key, any subnet that deploys the master key will have to meet certain security requirements (meaning, at the very least, it is "large enough").

We have longer term plans to implement other disaster recovery strategies as well, but this is the initial plan.

-------------------------

mparikh | 2021-09-12 09:37:43 UTC | #37

Shouldn't security requirements be "large enough" AND "distributed enough"?

The distributed enough means that a nation actor cannot expose a master-key deployed in a subnet with collusion with similar-minded nation actors.

-------------------------

victorshoup | 2021-09-12 11:42:55 UTC | #38

Yes, good point! That's why I said "at the very least" :-)

-------------------------

mparikh | 2021-09-12 15:52:25 UTC | #39

Thanks, Victor. 

This is an actual proposal with target dates. The community is banking on this proposal being implemented and deployed within ROM of time as projected out. In other words, this is, hopefully, no longer theoretical.

We know that setting up nodes/node providers take time. Therefore isn't it time to fix what are the exact security requirements?

 What is the exact definition of "large enough "? 17 nodes? 29 nodes? ....

What is the exact definition of "distributed enough"? Do we think that we have an requirement of having node providers in Africa/South America prior to go live of this features? 

Are there other such security features?

I fear that unless we fix these(and other) constraints, we will find that this proposal will get delayed by a lot. Additionally BTC/ETH integration has this proposal as a pre-requisites.

The community stands ready, I believe,  to help. But we need you/dfinity to lead with open discussions about what are the key security considerations; so that we can provide constructive critiques(as many have done already).

-------------------------

victorshoup | 2021-09-12 16:34:06 UTC | #40

Fair enough! Part of the issue is that I’m not certain what level of detail is appropriate for this particular forum, or even for the NNS proposal. That’s mainly on me... I’m kind of a noob when it comes to these communication process issues. 

In terms of the precise parameters for allowable subnet configs in this setting, I’ll get back to you on that soon.

-------------------------

mparikh | 2021-09-13 00:02:18 UTC | #41

Thanks, Victor, for your candid response. 

I believe that you/dfinity should think about the technical details embedded in the forum or the NNS proposal in the following ways (as two ends of a pendulum); especially for threshold signatures.

(WAY-1) 

The theory: The algorithms are way too complicated for a regular reader of the forum/nns proposal to even understand. Posting a couple of papers which virtually nobody will understand will cause additional FUD for threshold signatures. The community should trust us/dfinity as the cryptographic experts on the algorithm and the implementation of the algorithm. Besides we don't want to "open source" this critical piece of tech at this point in ICs dev ; so as not to give a leg up to our competition.

The practice: Assuming the correctness of the algorithm and its implementation, it still must be deployed on the IC. The key consideration of security and other requirements of such powerful technology will take substantial time to document and engage with the community; further delaying the deployment of powerful technology. The community in any event relies on us/dfinity to be the experts and we can always explain post-facto.

(WAY-2)
The theory: The algorithms are pretty complicated. They might have some hidden bugs/issues; which given enough eyes might lead to be surfaced. Besides the community would see this technology as pretty critical for them to trust IC with BTC/ETH. Let's release the papers and implementation as soon as possible so as to get the public review started asap.

The practice: Assuming the correctness of the algorithm and its implementation, it still must be deployed on the IC. The community should be completely aware about the different tradeoffs (security and others) that we are making on the deployment of this powerful technology. They will then understand better the risk that they are taking on these tradeoffs. Perhaps they can convince us/dfinity that certain tradeoffs are not good enough and we can change our minds. Therefore let's release this as well asap.

The truth, of course, will be in shades of gray. That said, I think that being transparent about what decision paths are being taken along these or similar dimensions would be extremely beneficial for the community at large.

-------------------------

mparikh | 2021-09-13 00:18:28 UTC | #42

Please see discussion (https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152/39) on some additional requirements that MIGHT percolate up for system and integration testing.

-------------------------

egeyar | 2021-09-13 07:54:36 UTC | #43

[quote="mparikh, post:39, topic:6152"]
What is the exact definition of "large enough "? 17 nodes? 29 nodes? …
[/quote]

Hi @mparikh !
The current plan is to enable this ability per subnet via an NNS proposal. That is why I believe whether a subnet meets the criteria could be discussed separately later, since the implementation of a project of this extent will take many months.

-------------------------

mparikh | 2021-09-13 08:17:51 UTC | #45

Do we have an ball park of what is large enough? I think this question will also be tied to “decentralized enough”. For example, is it a legitimate security threat if all the 17/29/… nodes belong to the same node provider?

Also I think we are way underestimating the amount of lead time required to establish node providers in other regions of the world.

Currently the projection is that threshold signature will be implemented in Q4, 2021. IF the requirements for a subnet is to be “decentralized enough” so that subnet will need node providers in South America & Africa, not sure about the time frame that that will take.

-------------------------

diegop | 2021-09-13 17:12:16 UTC | #46

[quote="diegop, post:1, topic:6152"]
* NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*
[/quote]

Hey folks, looks like questions are still coming in. Do folks prefer we push back the NNS motion to let more questions/iterations come in?

I want to make sure we strike a balance of moving fast but letting people have their say.

-------------------------

mparikh | 2021-09-13 17:53:52 UTC | #47

At one level, the NNS Motion Proposal is asking for community's approval on the design and project of threshold signature features.
 
My previous posts on this topic have pointed questions on both the design and project.

A. What is the core of the design based on? We have been promised a couple of papers in a few week from now that detail the new async protocols and relevant security analysis.

B. Nowhere is it mentioned how do we(the community) sees the entire implementation of the core design. Ie how does the implementation stack up against the design?

C. What are the exact requirements (security and otherwise)through which deployment would be handled? This should form the basis of a project plan.

D. How does an actual deployment testbed look like? How will the testbed manifest itself?

E. What are the actual test cases both from a unit test case standpoint as well as integration standpoint that are going to be executed?

I actually don't expect that some of these questions will be answered; prior to this NNS proposal passing. But I think reasoning it out in context of why certain questions will not be answered; even if they seem reasonable in design and project setting ;would be very useful. I have given an handwavy methodology of how to think about addressing these in a previous post.

I believe that given a little more effort, it may be possible to stick to the deadlines with the relevant information being passed in this topic.

-------------------------

diegop | 2021-09-13 17:59:52 UTC | #48

It sounds like you are saying (and correct me if I am wrong): 

"*I would like to have the following questions answered before an NNS Motion process makes sense to me."*

If so, it sounds like you ARE saying, "*yes, we should move the submission so the team in this project should provide more info.*" 

For context, I was thinking of giving them an extra day or so (not weeks). Because of the global remote nature of communication across timezones.

**Would capturing your questions and pushing the proposal by a day meet your intent @mparikh or did I misunderstand?**

Clearly, we are still iterating and working with each team to get a handle on the appropriate level of detail as per Victor's message:

[quote="victorshoup, post:40, topic:6152, full:true"]
Fair enough! Part of the issue is that I’m not certain what level of detail is appropriate for this particular forum, or even for the NNS proposal. That’s mainly on me… I’m kind of a noob when it comes to these communication process issues.

In terms of the precise parameters for allowable subnet configs in this setting, I’ll get back to you on that soon.
[/quote]

-------------------------

mparikh | 2021-09-13 18:04:36 UTC | #49

Yes, the intent is to capture the questions and attempt to answer as many of them as we can (with rationale about questions that cannot be answered). If it takes some more material time , that's ok for me.

-------------------------

diegop | 2021-09-13 18:16:30 UTC | #50

Makes sense. That is, after all, the entire goal of this process: improve the design + process + communication by seeing what works, what does not, how much detail is too much or too little, how much time to let conversations flow, etc...

-------------------------

egeyar | 2021-09-14 15:06:36 UTC | #51

[quote="mparikh, post:47, topic:6152"]
I actually don’t expect that some of these questions will be answered; prior to this NNS proposal passing. But I think reasoning it out in context of why certain questions will not be answered; even if they seem reasonable in design and project setting ;would be very useful.
[/quote]

Hello again @mparikh !
It is nice to see how much you care about the project. Let me try to answer your points as much as I can. One of the reasons behind such proposals is to see if the community support a project before the foundation invests further in it. The paper, that is the answer to your question A above, is still being worked on by our cryptographers. We have an initial plan and the corresponding security proof. However, we are considering multiple optimizations on top of that, each of which requires the security proof to be reworked. 

As you most probably know, every time we update the nodes, that happens through NNS proposals. What we propose currently is to invest further time into this project: in its implementation, testing plan, validation and verification. That time is also what we need to answer some of your questions, such as how the implementation needs to be tested.

Once we have an implementation, then, the community can decide whether to deploy it or not. In fact, specifically for this project, we can say that the deployment is not the critical moment; because according to what we propose now, ecdsa signatures won't be supported by any subnet by default. Once the implementation is deployed, then we will have separate proposals (one per subnet) to enable this feature on subnets.

Once the implementation is ready, it will end up here with the rest of the code: https://github.com/dfinity/ic . As I said, it will be completely inactive by the time it is first deployed. The unit tests would be there too. By then, we can also provide further information on integration tests too.

When the first NNS proposal to enable this feature for a subnet comes, the voters can check the corresponding subnet on the dashboard before voting: https://dashboard.internetcomputer.org/subnets . If you click on any subnet's identifier, you can see how distributed it is. You are right that this information is especially relevant for this project. 

In short, I am trying to explain in this message that any actual change to the IC goes in with other NNS proposals. This current proposal is to get feedback about whether we should further invest in this project, which would for sure involve getting the answers to the questions you asked as well. 

I hope this helps!

-------------------------

mparikh | 2021-09-14 15:34:18 UTC | #52

Thank you very much for your reply. It helps the community understand your perspective better.

I had misunderstood the purpose of this proposal. Since the explicit goal was "to approve design and project", it didn't even cross my mind that you were actually asking whether to continue work in this proposal or not. 

If that is the sole intent of this proposal, then , of course, some of the deployment questions posed by me are irrelevant in context of this proposal. Perhaps the initial wording of the proposal could have been different.

-------------------------

diegop | 2021-09-15 04:24:03 UTC | #53


[quote="diegop, post:1, topic:6152"]
* ~~NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*~~
* NNS Motion Proposal (to approve design + project) submission: *September 20,15:00 UTC*
* NNS Motion Proposal (to approve design + project) expiration: *September 22,2021, 15:00 UTC*
[/quote]

Ahoy folks,

I think the proposal and thinking is becoming clearer as we iterate and converse, but I would like to let the conversation brew a bit more (this is clearly a subjective gut feeling that I have from sensing the "clarity temperature" in the virtual room). I also want to allow the team to reword any areas which were not clear (as evident from the questions). So I am moving the NNS Motion proposal to **Monday September 20**. 

Note: we have two NNS Motion proposal being submitted in 10 hours, so I want to make sure we allow folks the time to digest the information.

-------------------------

dieter.sommer | 2021-09-15 13:08:00 UTC | #54

> mparikh:
> Yes, the intent is to capture the questions and attempt to answer as many of them as we can (with rationale about questions that cannot be answered). If it takes some more material time , that’s ok for me.

After submission of our proposal for the threshold ECDSA feature, there has been a discussion going on aspects such as the availability of the detailed protocol specification, the implementation matching up the design, security properties and testing. We will try to provide an as-comprehensive response as possible in the given time frame, i.e., before the NNS proposal will be launched on Monday, in addition to what has been already responded to by Ege and others. We hope that we can provide further details for people interested in this proposal. Much of the information provided in this post addresses quality assurance, i.e., goes beyond the core of this proposal, but helps understand the broader picture of what we need to do for having high assurance of correctness of the implementation of the feature.

Regarding the question on the research paper regarding the cryptographic protocols: We also need to perform an internal security review before we can publish the results to the wider community. Thus, we ask you for a bit more patience here as we are, as Ege mentioned, still in the process of finalizing the proofs for the optimizations we have performed. Once released, everybody will have the opportunity to scrutinize our work w.r.t. the cryptographic protocols and provide their valuable feedback.

You have asked some questions around the topics of criteria we need to meet for deployment of the feature as well as our approach towards testing. We think those are excellent questions of high importance and therefore let us try to give some more detail already now in addition to what has been said by Ege already. This will also give you some insight into the engineering process at DFINITY. Further details on this feature become available once we proceed with the implementation.

This feature is a security-critical feature of the Internet Computer as substantial value, e.g., in the form of bitcoins, will be safeguarded through it. For this reason we consider quality assurance a primary concern throughout the lifecycle of the feature. What makes this feature particularly interesting (i.e., challenging) in terms of security is that it involves highly non-trivial research work in cryptographic multi-party protocols. Let us outline next how our project plan considers security end-to-end for this feature throughout the whole process, starting with the research side of things.

* Internal peer reviews: The research results on the protocol we intend to implement is being conducted in-house. We will run a first peer review round internally with DFINITY's cryptographers. This will be done before publishing the protocol specification to a wider audience in order to provide our community with a result we have high confidence in.
* Review by our community: Once we have released the first version of our paper, interested cryptographers in the community can review the result and provide us with valuable feedback. This can be seen as the scientific review process, just within a completely open community of interested specialists. After the community feedback process, we expect to have a broadly accepted protocol specification of which both us (DFINITY) and the community are convinced of its correctness and fitness for its intended purpose.

At the engineering side, quality assurance is of paramount importance as well. For a complex feature such as the threshold ECDSA feature, there are multiple high-level goals to achieve here, e.g.:

* Specification-conformance of the implementation;
* Service level objectives being met for the feature, e.g., throughput, latency and availability goals;
* The Internet Computer protocol stack not suffering from the integration of this new feature in unintended ways.

These relate to some of the crucial acceptance criteria from a systems perspective. Of course, there is also a set of specific security-related criteria which govern the correctness and liveness of the protocol. These will become clear from the research paper to be published in the near future.

We want to stress for everybody that it is not possible to guarantee the correctness of the protocol at the implementation level. The best we can do in engineering is to provide a sufficiently high degree of assurance that the feature has been implemented according to the specification, which will have an underlying formal security proof, and does not interfere with our protocol stack in unintended ways.

Achieving this requires (1), an effective code review process, (2) sufficient automated testing coverage and (3) the protocol researcher closely working with the engineers as quality assurance measures. For this feature Victor, who is leading the cryptographic research for threshold ECDSA, is working closely with the engineering team to help the knowledge transfer and ensure things are implemented as intended.

#### Code reviews

Code reviews are an integral part of the engineering process at DFINITY. Both researchers and other engineers perform code reviews. Through this we attempt to obtain a high degree of assurance that the protocol specification has been implemented as intended. Critical components, like the ones for this feature, are subjected to a more stringent review process to raise the level of assurance provided. The complexity of some of our protocols, including threshold ECDSA, is considerable, and it would be extremely challenging to implement those protocols without the researcher's close and direct support of the engineers.

#### Automated testing

Automated testing is a crucial aspect of our engineering process. At DFINITY we have 4 different classes of tests we employ for gaining sufficient assurance that our source code does what it is supposed to do at different levels. Not all functionality / code is tested at all levels and with the same rigor, but we need to ensure that we have an overall sufficiently high test coverage. This balance is found based on judgment of our engineers and researchers on where to spend our (limited) efforts to obtain the most effective test suite for a given feature. Let me next outline the different levels of tests we employ for our source code.

* Unit tests:
Unit tests are the most focused of our automated tests, testing just a single file. Unit tests are, as standard in Rust, white box tests that can access internal variables and interfaces. Unit tests use stubs, fakes or mocks in order to avoid external dependencies and test the functionality under test in an isolated manner. With unit tests we will test our individual primitives making up the implementation, e.g., our cryptographic building blocks.
* Integration tests:
With our integration tests, we gain assurance of correctness of a whole module's implementation, that is, we test the interfaces provided to other modules in a more black-box fashion.
* System and production tests:
Those classes of tests test the feature at the integrated level, i.e., the interplay between the different components making up the feature and the Internet Computer codebase at large. System tests are essentially Continuous Integration tests and are part of the development pipeline and govern merging of changes. Those are the more efficient tests in terms of resource consumption and execution time as they are being executed frequently. System tests run on a single test machine and test the code of the feature in a holistic manner. Production tests are the most comprehensive and integrative tests and take up substantial resources and time to run. They are Continuous Delivery tests that govern the rollout of changes to our staging and production environments. Production tests spin up their own Internet Computer instance including NNS, with machines distributed throughout data centers around the globe. The idea is to run the tests in an environment that is as close as possible to our real-world production environment.
System and production tests are the most interesting ones to discuss here in that our test framework is specifically designed for the requirements of testing the Internet Computer, whereas unit and integration tests are more standard. For example, our test framework allows us to define how many replicas in the subnet running a specific test should behave maliciously, which we need to test the feature's resilience against (Byzantine) faults in a real-world setting.

As already mentioned by Ege, we will be working out the concrete testing plan as we go along with the implementation. Here are some ideas of what we might specifically want to test in our system and production tests:

* Replicas leaving / crashing during the signing process: In such a scenario, we do not want the signing process to abort, but still be able to succeed, without the faulty node. This is a crucial property of our protocol, which differentiates it from much of the available cryptographic literature on the topic.
* Testing the feature under the boundary conditions of the largest allowed number of nodes having failed / being dishonest.
* Performing a large number of signing operations, also together with high regular load on the subnet, to test the feature under heavy load conditions.

We hope that this gives you a more concrete view of what we are planning to do in terms of making sure the feature is implemented in a secure manner. Hope that helps!

-------------------------

diegop | 2021-09-15 18:10:55 UTC | #55

Ahoy folks:

**Community Conversation - Threshold ECDSA Signatures**

🗓️**Sept 16, 2:30 PM PT / 11:30 PM CET**

Victor Shoup discusses the threshold ECDSA signatures vote, and the cryptographic techniques used to reach the objectives of the proposal.

Register👇

https://dfinity.zoom.us/webinar/register/WN_IOD9Qeq-T5mgGRwKCThCyg


Source: https://twitter.com/dfinity/status/1438202145396776962?s=21

-------------------------

mparikh | 2021-09-16 01:38:22 UTC | #56

Thank you very much for providing much needed details on the process of implementing the threshold ECDSA feature. In my mind, this is currently, without doubt, the most important feature for IC.

 It's successful implementation will signify a feat of research, implementation and community support that will be unparalleled in crypto-world. As we proceed further on implementation, we need to think through how to deploy in steps(not all at once). Very rarely in history of computer science, we have gotten it right first time; especially with software of such import. We shouldn't make the "this time is different" mistake that is littered with disasters.

I can understand the tremendous pressure that the dfinity team would be under to implement such a feature. But we also are getting more of sense about the caliber of people involved in this project/feature. This became a little bit more apparent, for instance, in the mature response to icpunk debacle about 10 days ago. This is what we bought into with 5+ years of solid team foundation and $100m+ in funding.

-------------------------

jzxchiang | 2021-09-16 06:36:50 UTC | #57

[quote="mparikh, post:56, topic:6152, full:true"]
But we also are getting more of sense about the caliber of people involved in this project/feature. This became a little bit more apparent, for instance, in the mature response to icpunk debacle about 10 days ago. This is what we bought into with 5+ years of solid team foundation and $100m+ in funding.
[/quote]

This is the key. Why the Internet Computer has such loyal supporters is not only because of the unprecedented technology—it's also because of the people and the thoughtfulness they put into their work and communication with the community.

What is transpiring in this and similar recent threads on various feature proposals is absolutely historic. An organization that wrote and deployed a piece of software is consulting with the community on what and how changes should be made to that software. Why? Because this piece of software is no longer owned solely by that organization and is instead owned jointly with the community. Mindblowing.

-------------------------

lastmjs | 2021-09-16 13:44:56 UTC | #58

The quality of internal review and testing seems excellent!

What about external audits? As a best practice, and to have a higher level of assurance guaranteed by individuals not part of the behemoth that is the Foundation (group think, conflicts of interest, etc are problems), I would think it useful to engage outside auditors to ensure the correctness of the implementation of the protocols.

There are professionals dedicated to auditing this type of code, many working in blockchain directly. Can the Foundation put resources (money) towards hiring these types of independent auditors?

-------------------------

diegop | 2021-09-16 20:41:15 UTC | #59

[quote="diegop, post:55, topic:6152"]
Ahoy folks:

**Community Conversation - Threshold ECDSA Signatures**

:spiral_calendar: **Sept 16, 2:30 PM PT / 11:30 PM CET**

Victor Shoup discusses the threshold ECDSA signatures vote, and the cryptographic techniques used to reach the objectives of the proposal.

Register👇

https://dfinity.zoom.us/webinar/register/WN_IOD9Qeq-T5mgGRwKCThCyg
[/quote]

This is happening in 50 minutes!

-------------------------

diegop | 2021-09-16 20:45:12 UTC | #60

[quote="lastmjs, post:58, topic:6152"]
There are professionals dedicated to auditing this type of code, many working in blockchain directly. Can the Foundation put resources (money) towards hiring these types of independent auditors?
[/quote]

Great minds think alike. I believe the security team is starting to work with independent auditors this Fall. I have asked them if we can make any such work public and they agreed it makes sense. 

Stay tuned!

-------------------------

lastmjs | 2021-09-16 20:50:59 UTC | #61

Fantastic news, thanks so much!

-------------------------

diegop | 2021-09-20 16:30:32 UTC | #62

**The proposal is live!**

https://dashboard.internetcomputer.org/proposal/21340

-------------------------

dieter.sommer | 2021-09-21 08:20:27 UTC | #63

Dear community!

As there have been some discussions going in this thread related to security (protocol review, testing, QA in general etc.), let me point out to you this new discussion thread that may be of interest, at least to some of you: https://forum.dfinity.org/t/security-sandboxing-community-consideration/7438

With this thread, we have just started a community discussion on *security sandboxing*. It would be great if those of you interested in the topic would join the discussion there.

As security has had so much resonance in the ECDSA, Bitcoin, and other feature discussions, we would like to follow an approach of having a community discussion as a first step of the whole process in order to get *your* requirements and thoughts on security sandboxing.

We are listening.

-------------------------

diegop | 2021-09-21 23:15:26 UTC | #64

Watch the community conversation on threshold ECDSA with Victor Shoup.

https://youtu.be/MulbKPwv6_s

-------------------------

diegop | 2021-09-22 15:47:59 UTC | #65

**Motion passed:** :white_check_mark:


https://dashboard.internetcomputer.org/proposal/21340

-------------------------

Alixthe | 2021-09-27 10:34:04 UTC | #66

Congratulations @diegop ! Sorry 1 silly question: I [read this article](https://seekingalpha.com/article/4450212-the-bitcoin-taproot-upgrade-is-bigger-than-you-think) recently regarding Taproot upgrade for the Bitcoin network due in November where it will change its crptographical method from ECDSA to Schnorr. I'm wondering how this change will affect the integration work that is being done by Dfinity at this stage. Thanks.

-------------------------

diegop | 2021-09-28 03:21:27 UTC | #67

Good question.

@Manu wrote a great answer to this question on r/dfinity, so instead of copy/pasting, I will instead link to it: 

https://www.reddit.com/r/dfinity/comments/pu3x6o/taproot_vs_btc_integration/

-------------------------

Trevor | 2021-09-28 03:57:09 UTC | #68

Thanks for reposting this!


I honestly only vaguely understood taproot. This was a very clear explanation. Very excited for direct integration.

-------------------------

Alixthe | 2021-09-28 08:26:55 UTC | #69

Thanks @diegop ~ much appreciated and excellent post by Manu! 

Not sure if I missed his comments but I cannot seem to find Manu's comments about the IC planning to implement Schnorr in line with how BTC is switching to Schnorr (and discarding use of ECDSA unless I am completely wrong on this one). In this regard, I would presume Dfinity is on top of this and as long as the IC's implementation of ECDSA works fine with BTC (once Schnorr is turned on) then this is probably a non-issue (and my sincere apologies for unnecessarily bringing this issue up).

-------------------------

Manu | 2021-09-28 08:48:25 UTC | #70

Thanks @Alixthe!

> Not sure if I missed his comments but I cannot seem to find Manu’s comments about the IC planning to implement Schnorr in line with how BTC is switching to Schnorr (and discarding use of ECDSA unless I am completely wrong on this one). In this regard, I would presume Dfinity is on top of this and as long as the IC’s implementation of ECDSA works fine with BTC (once Schnorr is turned on) then this is probably a non-issue (and my sincere apologies for unnecessarily bringing this issue up).

That's a very good question. I think the article you linked above makes it seem like Schnorr will completely replace ECDSA, and there will be no ECDSA in bitcoin anymore after taproot. This is not the case, addresses currently protected by ECDSA signatures will continue to work as before. Schnorr is just a new option that will additionally be supported. Does that answer your question?

-------------------------

Alixthe | 2021-09-28 09:00:46 UTC | #71

Yes ~ perfect thanks @Manu ~ much appreciated. Sorry but I must have misinterpreted the articles I have read so far which make it seem like Schnorr is going to replace ECDSA when I guess it is in addition to ECDSA.  All good! 👍

-------------------------

diegop | 2021-10-06 16:25:42 UTC | #72

I thought this thread would be interested in the update about project scope and design on the Sandboxing project tread: https://forum.dfinity.org/t/security-sandboxing-community-consideration/7438/3?u=diegop

-------------------------

victorshoup | 2021-10-06 22:59:33 UTC | #73

Just in case anyone here is interested. Jens Groth and I released a paper on the security of several variations of ECDSA, which is available as Cryptology ePrint Archive: Report 2021/1330. While this paper is not specifically on threshold ECDSA. In fact, variations considered are directly motivated by our current design for threshold ECDSA, and the analysis in this paper form the theoretical foundations for the security of our threshold protocol.

-------------------------

diegop | 2021-10-06 23:11:56 UTC | #74

Link for the lazy like me :slight_smile: : https://eprint.iacr.org/2021/1330

-------------------------

victorshoup | 2021-10-06 23:46:11 UTC | #75

I tried to insert a link, but it wouldn’t let me.

-------------------------

diegop | 2021-10-06 23:48:12 UTC | #76

That happens to me 1/3 of the time, I cannot figure out why or how. there seems to be no rhyme or reason to why discourse (the platform) does this.

-------------------------

dieter.sommer | 2021-10-31 11:22:32 UTC | #78

Dear community!

Here's an update on our progress w.r.t. the implementation efforts for the threshold ECDSA feature.

We have implemented a good part of the "foundation" for the feature such as data types, the artifact pool for t-ECDSA artifacts, creating and validating dealings etc., so far all with mock crypto. Some cryptographic primitives have been implemented in parallel, but not yet integrated with consensus so far.

The next big milestone is to get the integration between consensus and crypto for the 4-tuple generation working by around November 20. This is the core part of the protocol and a pretty complex part for consensus. We plan to get this done with some substantial "shortcuts" to get this core part of the feature working end to end. The shortcuts comprise, for example, skipping encryption, zero-knowledge proofs, and complaints. Once we are there, we will implement the functionality we have shortcut in the first iteration and remove the shortcuts one after the other. This agile way of addressing this pretty challenging implementation is the most efficient path towards a fully-working protocol implementation.

We will keep you posted on implementation progress more regularly in the future!

-------------------------

dieter.sommer | 2021-11-05 18:34:19 UTC | #79

Dear community!

Let me close the week with some information on the timeline of the threshold ECDSA feature: 

After setting our next milestone as mentioned in my earlier post this week, we realized that it is highly likely that the feature will only be final next year. It is hard to give a good estimate right now when in Q1 we would be able to release. This will become clearer when more of the implementation will be available. We will keep you posted on this and the implementation progress!

But now let's get to some great news: We had our first "Bitcoin Community Developer Workshop" yesterday with key folks from DFINITY working on the threshold ECDSA and Bitcoin features and quite a notable number of our dear forum participants. See https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/101 for some of the main outcomes of this workshop. Minutes to follow!

I wish you all a great weekend!

-------------------------

lastmjs | 2021-11-10 14:52:53 UTC | #80

I haven't thought to ask this yet, but what about ECDSA threshold encryption? Will this be possible?

I'm thinking about possible implications for social recovery, proxy reencryption perhaps, stuff like that. It could be useful to encrypt data from within a canister

-------------------------

lastmjs | 2021-11-10 17:46:44 UTC | #81

It looks like ECDSA stands for "Elliptic Curve Digital Signature Algorithm", so it probably only does signatures :)

-------------------------

dieter.sommer | 2021-11-10 22:06:37 UTC | #82

Dear community!

The minutes of the community workshop of November 4, 2021 have been made available:
https://drive.google.com/file/d/1hGPJHKol1fHzGgLt9dZVUZUhIraF7Znl

Thanks again for the great discussions and input at the workshop!

-------------------------

dieter.sommer | 2021-11-12 11:38:00 UTC | #83

@lastmjs

> It looks like ECDSA stands for “Elliptic Curve Digital Signature Algorithm”, so it probably only does signatures :slight_smile:

Yes, indeed, this feature will "only" do threshold ECDSA signatures. ;-)

Threshold decryption could be implemented as well using multi-party computation algorithms, but this would be a different feature. That is, the private key (decryption key) would be held in a secret-shared manner by all the replicas in the subnet and replicas could jointly decrypt a ciphertext. Do you have concrete use cases where this would be useful?
We have been looking at threshold decryption for backing up threshold ECDSA keys at some point in time.

-------------------------

dieter.sommer | 2021-11-12 13:04:43 UTC | #84

Progress update:
The crypto and consensus engineering teams are currently intensively working on the milestone of a first integration between consensus and the cryptographic primitives to generate the 4-tuples required for threshold ECDSA signatures. This is the core of the implementation of the actual threshold signing protocol and not a particularly easy implementation task. We have set a (very, very aggressive) deadline at the end of the coming week for this milestone. We have been making good progress so far, but there's still a lot of work to be done to accomplish it. We'll keep you posted on the progress at the end of next week.

-------------------------

dieter.sommer | 2021-11-19 17:38:28 UTC | #85

Progress update:
We have made good progress towards the abovementioned milestone for Nov 20, however, we are not fully there yet. We hope to reach the milestone by next week and show the quadruple generation in an internal demo.

-------------------------

Evanfeenstra | 2021-11-21 22:54:23 UTC | #86

This is super interesting… hopefully the canister API that will be exposed will be low-level enough to enable signing of any kind of UTXO spending condition? If it will support all the Bitcoin Script op codes, this will make BTC canisters just as flexible as ETH contracts

-------------------------

dieter.sommer | 2021-11-22 08:22:42 UTC | #87

@Evanfeenstra 

The API of threshold ECDSA that will be exposed to canisters will be a signing API which you can make use of for any use case you intend, be it Bitcoin or something else. The Bitcoin API allows for obtaining the UTXO set for a specific Bitcoin address and to submit Bitcoin transactions.

-------------------------

dpdp | 2021-11-22 11:19:12 UTC | #88

This would be awesome; I can imagine an open source canister that is a virtual multi-chain wallet;

I can see ECDSA is used on many of the top-100 cryptocurrencies ( http://ethanfast.com/top-crypto.html )

-------------------------

dieter.sommer | 2021-11-22 11:35:41 UTC | #89

@dpdp

Exactly, a general threshold signing API is the foundation for a large number of cool use cases that anybody in the community can implement solutions for.

-------------------------

jzxchiang | 2021-11-24 07:00:05 UTC | #90

Great table, thanks for sharing. I think they should update that table. They are missing a very important blockchain platform on there.

-------------------------

jzxchiang | 2021-11-24 07:03:23 UTC | #91

This is a dumb question, but my understanding is that the IC first and foremost uses BLS signatures.

But [here](https://smartcontracts.org/docs/interface-spec/index.html#ecdsa) in the interface spec it says that Ed25519 and certain types of ECDSA signatures are also supported. Are these signatures used in different contexts than the BLS signatures?

-------------------------

nomeata | 2021-11-24 14:00:03 UTC | #92

Ed25519 and ECDSA are supported as the signatures from users on ingress messages, i.e. _incoming_ signatures. BLS is used for signatures _produced_ by the system.

-------------------------

dpdp | 2021-11-24 14:24:19 UTC | #93

- How complex would it be to implement Threshold EdDSA Signatures? As it's the second signature algorithm used by top 100 (incl. IC for ingress messages);

- Could canister sends ingress-messages to other canisters? (so a virtual wallet calling another canister)

-------------------------

nomeata | 2021-11-24 18:51:16 UTC | #94

[quote="dpdp, post:93, topic:6152"]
Could canister sends ingress-messages to other canisters? (so a virtual wallet calling another canister)
[/quote]

It could certainly _sign_ such messages, but I think you'd still need an external (untrusted) service that takes the message from the canister and feeds it into the IC. 

With that, the Internet Computer has even solved the problem of making secret keys transferrable: you can now transfer control of such keys via canisters! I wonder if that is a first out there? Or are there other decentralized services that offer ECDSA threshold signatures?

(Amusingly, it renders attempts to prevent canisters from holding ICPs or to prevent neurons from being transferrable more or less futile.)

-------------------------

mparikh | 2021-11-24 23:09:27 UTC | #95

[quote="nomeata, post:94, topic:6152"]
Amusingly, it renders attempts to prevent canisters from holding ICPs or to prevent neurons from being transferrable more or less futile
[/quote]

So that a future DeFi SmartContractDAO could give you back a percentage of ICP held in your neuron (assuming that the neuron is a staking neuron) as a loan till the loan is repaid through the rewards earned in the neuron? Many assumptions would of course need to be baked in.

-------------------------

dpdp | 2021-11-25 01:41:57 UTC | #96

I don't think anyone out there provide this kind of tech to developers; It's usually more a core component of some protocol (Thorchain...);

Adding some threshold encryption as a next step would allow to build not only a wallet; but a virtual decentralized KMS/HSM; (signature & encryption);

-------------------------

dieter.sommer | 2021-11-26 17:20:36 UTC | #97

**Milestone accomplished!** :partying_face:

The milestone of having an integration of the consensus functionality and cryptographic primitives for the presigning protocol has been reached this week. In addition to what has been originally planned for the milestone, encryption has been implemented already for this milestone. Presigning is the most complex part of the implementation of the threshold ECDSA feature and is working now end to end with some shortcuts that we still need to "iron out".

Paul from our consensus team has given an internal demo of this on Wednesday in our company-wide team meeting. To make the presigning more tangible, the functionality has been visualized via a Grafana dashboard showing metrics related to the computation of the quadruples via DKGs on a size-4 subnet. These operations are executed besides the regular subnet operation to fill up a pool of quadruples to be consumed by instances of the threshold ECDSA signing protocol. See the screenshot from the internal demo session for the visualization: You can see the quantities of various related operations and the actual number of quadruples (limited to 8 for this test) in the pool.

![Screenshot 2021-11-26 at 17.36.45|690x392](upload://aR2am6vMMOv2OtPFQKFXiRMhG9l.jpeg)

We have, as mentioned previously, taken some "shortcuts" in the implementation to get the core of the protocol working end to end. For those shortcuts we still need to implement the full functionality which will be done once the signing protocol has been implemented.

The next upcoming milestone is the implementation of the signing protocol that consumes a quadruple generated in the presigning protocol for each threshold ECDSA signature. It is simpler than the presigning protocol and is being worked on right now.

This has been a great joint effort of multiple dedicated teams and its nice to see how everything has come together after lots of hard work!

-------------------------

flyq | 2021-11-27 03:12:05 UTC | #98

When users want to transfer their btc to ic, they transfer btc to a btc address controlled by a canister, but how do they tell ic their principal id or need to use the transferred btc address to generate a signature?

-------------------------

flyq | 2021-11-27 03:15:36 UTC | #99

Found below the document

[quote="dieter.sommer, post:82, topic:6152"]
https://drive.google.com/file/d/1hGPJHKol1fHzGgLt9dZVUZUhIraF7Znl/edit
[/quote]

![image|690x344, 75%](upload://96ee4Pa4guAmhR4fViY0nmbNaqB.jpeg)

-------------------------

hhanh00 | 2021-11-29 00:49:09 UTC | #100

Hi all, now that Taproot is activated, would it be possible to use schnorr signatures?
And if so, could we then use [Frost](https://crysp.uwaterloo.ca/software/frost/)?

-------------------------

dieter.sommer | 2021-11-29 18:59:17 UTC | #101

Taproot and threshold Schnorr signatures could be a next step after threshold ECDSA, but there's no firm decision on this yet. When implementing threshold Schnorr, we can definitely leverage synergies from the work on threshold ECDSA, however, we still would need to define the protocol specification incl. a key derivation scheme, proof it secure, create a system design (lots of synergies) and implement it. So this is not something that can be done quickly.
Threshold ECDSA will also have other use cases, e.g., letting the IC act as a CA to issue security certificates in a decentralized manner, so we want to get it done anyway.
So, the plan is to get threshold ECDSA out and then think about Taproot and threshold Schnorr if this fits the priorities.

Regarding FROST, I have not had the time to look into it and do not know whether it would fit our requirements in terms of threshold etc. At least the key derivation scheme we require for our setting to derive canister keys and further keys per canister would need to be added to the protocol I think.
Maybe @victorshoup can give you a response on the viability of FROST. In case it would fit our needs, the integration in consensus would be a decent-sized project that we could only launch after completing threshold ECDSA.

Hope that answers your question sufficiently.

-------------------------

skilesare | 2021-12-03 04:57:01 UTC | #102

[quote="dpdp, post:93, topic:6152"]
How complex would it be to implement Threshold EdDSA Signatures? As it’s the second signature algorithm used by top 100 (incl. IC for ingress messages);
[/quote]

I'll repeat the question because I don't think it got an answer yet.  Is EdDsa on the agenda or is there something in chain key tech that makes it more difficult or impossible?

Use case:  Investors/Projects question the IC and ask why we don't integrate with other chains. We get to counter that soon "all the chains will be IC chains" and we explain the ECDSA tech...everyone gets excited once they understan....but Solona, Cardano,  Monero, and a few others use EdDSA and then our friends are sad again.  It would be nice to tell them the same story even if they have to wait a bit longer than the ECDSA chains.

-------------------------

Manu | 2021-12-03 09:17:24 UTC | #103

Our current target is threshold ECDSA, so that's what we focus on right now. Once threshold ECDSA is available, threshold Schnorr / EdDSA (which is essentially Schnorr) should be relatively simple, I imagine we could reuse a lot of the work we're doing for ECDSA now. But I don't think it's clear how this would be prioritize against all the other plans, so I wouldn't want to make claims wrt a possible timeline.

-------------------------

