Jesse | 2024-01-13 14:16:03 UTC | #1

I just finishing building some code that takes a canister's principal ID and uses it to derive the canister's self-authenticating Principal. I want to verify that the self-authenticating principal that I'm getting from the function is the correct principal. To do that, I need a known canister ID and its corresponding self-authenticating principal. Does anyone have a canister ID and its self-authenticated principal that have been verified as correct? I can use them to check that my function produces the right self-authenticating principal.

-------------------------

Samer | 2024-01-13 16:12:01 UTC | #2

Im not quite sure what you are trying to do, but judging from your other post, it seems to me that what you are doind is not common practice.

https://forum.dfinity.org/t/how-do-i-derive-a-self-authenticating-principal-from-a-public-key-in-motoko/26559

To your question: you can deploy a canister as you like with dfx, either locally, to mainnet or perhaps in your case to the playground (usedfx deploy --playground)

But calling another canister, like NNS gov or any other, is usually done by means of an intercanister call

Care to share what you are trying to achieve with the HTTP outcall and the ecdsa key?

-------------------------

Jesse | 2024-01-13 16:51:52 UTC | #3

[quote="Samer, post:2, topic:26600"]
Care to share what you are trying to achieve with the HTTP outcall and the ecdsa key?
[/quote]

I'm attempting to have a canister claim a neuron as it's controller. I would typically achieve this via an inter-canister call except neurons can only be claimed by self-authenticating principals. So the plan instead is to derive a self-authenticating principal from the canister's public key, and then make an HTTP call to claim the neuron, with the canister's self-authenticating principal as the sender of the HTTP call.

-------------------------

