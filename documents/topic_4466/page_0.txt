stephenandrews | 2021-05-28 02:15:41 UTC | #1

We put up a repo showing how we can use wrapped ICP cycles as a token that can be converted back to cycles in future. This also provides an easier way for canister owners to add cycles to their canisters - buy WIC from an exchange and then use the simple "burn" call to add these cycles to an canister that the user wants to (as long as it has the accept_cycles call added to it).

https://github.com/Toniq-Labs/wrapped_cycles

-------------------------

hackape | 2021-05-28 04:56:59 UTC | #2

I think you need to address the balance and allowance persistency. They’re not `stable`, you’d lose data after upgrade canister code.

-------------------------

stephenandrews | 2021-05-28 05:14:17 UTC | #3

This would be a non-upgradeable contract - I believe there's meant to be a way to set the owner of the contract to noone. The ERC20-like calls are just filler though until a proper standard is agreed upon (which includes the allowances and balances).

-------------------------

jzxchiang | 2021-05-28 06:08:57 UTC | #4

By non-upgradeable, do you mean something like [this](https://forum.dfinity.org/t/unstoppability-vs-immutability/2304/2?u=jzxchiang)?

-------------------------

LightningLad91 | 2021-05-28 19:07:01 UTC | #5

Genuinely curious, what purpose would this serve? Would this provide a way for developers/future businesses to sell back their excess cycles? Does the IC provide a way to convert cycles back to ICP?

-------------------------

Ori | 2021-05-28 19:55:45 UTC | #6

The IC currently doesn’t provide a way to convert cycles back. But if someone had an excess and wanted some funds they might reasonably look to sell them. Note this doesn’t hinder stabilising the cost of cycles, if someone needed to sell theirs they’d probably offer them below cost and they’d get bought up quickly, so the price would return to its stable value.

-------------------------

wang | 2021-05-29 00:47:05 UTC | #7

Wrapping cycles gives them a standard interoperable interface, allowing them to be used in DeFi applications.

-------------------------

stephenandrews | 2021-05-29 00:57:35 UTC | #8

Another important benefit (in my eyes) is for tx fees. For example tokens - when we transfer tokens via a token standard, it doesn't incur any fee for the sending user. It just burns cycles from the token canister. Now someone needs to pay for these cycles some how, so how can we make this possible? With a wrapped cycle token, we can allow senders of tokens to utilize WIC to pay for tx fees. The token canister would accept the WIC, transfer it to cycles, and process the token transfer.

-------------------------

paulyoung | 2021-05-29 01:36:46 UTC | #9

On naming, how about this?

ETH -> WETH
ICP -> WICP

-------------------------

wang | 2021-05-29 01:40:18 UTC | #10

`WICP` and `WCYCLE` make sense to me

-------------------------

PaulLiu | 2021-05-29 19:51:50 UTC | #11

I'll suggest WTC = wrapped trillion cycles. The basic unit of cycles is just too small.

-------------------------

flyq | 2021-05-30 01:21:27 UTC | #12

Well done work.

I have two suggestions. One is to increase support for historical records, and the other is to support Account Identifier, so as to be unified with ledger canister and lower the user obstacle. You can refer to this: https://github.com/dfinance-tech/motoko-token/tree/ledger :motoko_go:

-------------------------

stephenandrews | 2021-05-30 02:18:15 UTC | #13

Yeah the ERC20 standard stuff is to be updated once we have an agreed upon standard. We've put forward out thoughts here which does use AccountIdentifier as well as a few other differences (spenders are Principals and we drop approve() due to known issues with it): https://github.com/Toniq-Labs/ic-fungible-token/blob/main/README.md

We use it as a Text type though, as per the interface to the ledger canister: https://github.com/dfinity/nns-ifaces/blob/master/ledger.did

And then using the AccountIdentifier library that we put together: https://github.com/stephenandrews/motoko-accountid. I do agree a transaction list is required, although we are still thinking over how we want to do this (storing in secondary canisters etc, essentially what BigMap hopes to achieve).

-------------------------

stephenandrews | 2021-05-30 02:21:42 UTC | #14

Yeah definitely should be 1T cycles wrapped - our implementation does do this.

We went with WIC as in Wrapped ICP Cycles as you can pronounce it as wick (like a candle wick) which burns (cycles are essentially burnt when they are used), although we like the following as well:
WTC - Wrapped Trillion Cycles
WICC - Wrapped IC Cycles
WIT - Wrapped ICP Trillion cycles

WCYCLE seems a bit long imo

-------------------------

PaulLiu | 2021-05-30 03:26:43 UTC | #15

If "Trillion" is in the name, that is already a differentiator. So maybe we can drop "Wrapped"?

Trillion ICP Cycles = TIC

-------------------------

stephenandrews | 2021-05-30 03:41:16 UTC | #16

Yup I like this one, my new preferred name for it. TIC lets go!

-------------------------

wang | 2021-05-30 10:34:05 UTC | #17

TIC may be confused for The Internet Computer? 

I am slightly in favor of keeping the `W` prefix for consistency with `WICP`. WTC/WICC/WIT all seem ok

-------------------------

ccyanxyz | 2021-05-30 12:49:33 UTC | #18

Wrapped Trillion Cycles (WTC)

-------------------------

wang | 2021-05-30 13:26:37 UTC | #19

How do we feel about `TC` for trillion cycles in general?

* this instruction costs 0.00000050 TC
* an app uses 0.002 TC per day
* i'll pay you 40 TC for that function
* 1 ICP mints 75 TC
* offer 1000 ICP @ 74 TC per, 74k TC for the lot

-------------------------

Maxfinity | 2021-05-31 11:13:51 UTC | #20

[quote="stephenandrews, post:8, topic:4466, full:true"]
Another important benefit (in my eyes) is for tx fees. For example tokens - when we transfer tokens via a token standard, it doesn’t incur any fee for the sending user. It just burns cycles from the token canister. Now someone needs to pay for these cycles some how, so how can we make this possible? With a wrapped cycle token, we can allow senders of tokens to utilize WIC to pay for tx fees. The token canister would accept the WIC, transfer it to cycles, and process the token transfer.
[/quote]

Still not sure how we can wrap icp as  only whitelisted canisters can own ICP.

-------------------------

dpdp | 2021-05-31 11:33:06 UTC | #21

Except if the canister is controller-less / gets in the whitelist; I don't see a trust-less solution to convert them to cycles.

Here is cycles minting canister source code ( https://github.com/dfinity/ic/blob/master/rs/rosetta-api/cycles_minting_canister/src/main.rs#L169 ); and you will need to have this canister calls `send_dfx` then `notify_dfx` pattern;

Maybe there's a solution with subaccounts?

-------------------------

