icme | 2022-02-21 02:29:38 UTC | #1

Super excited to be using type unions in the 0.9.0 release - thanks guys!

Would it be possible to include some examples in the [Union Type docs](https://smartcontracts.org/docs/language-guide/language-manual.html#or-type) on how one might go about pattern matching over type unions, where these examples include cases resulting in None/Any or some overlap?

It's a bit difficult for me to decipher through [the commit where this was introduced](https://github.com/dfinity/motoko/commit/de00655a0838b4799a6c24a6074ba6e534e47275) to understand how I might do this.

A basic example:
```
type JSON = Nat or Text or HashMap or ...;

func toJSON(json: JSON): Text {
  switch(json) {
    case Nat n { ... };
    case Text t { ... };
    case HashMap hm { ... this could be recursive and call toJSON depending on the k/v type };
  }
}
```

I've seen [an implementation of this that works](https://github.com/aviate-labs/json.mo/blob/main/src/JSON.mo), which is very similar to the answer given out last year in this forum post [https://forum.dfinity.org/t/pattern-matching-with-dynamic-case/5139](https://forum.dfinity.org/t/pattern-matching-with-dynamic-case/5139), but requires the use of variants and wrapping all the values in the variant as they are stored.

Is there a more elegant solution that type unions might provide?

-------------------------

paulyoung | 2022-02-21 03:25:36 UTC | #2

I don’t believe you can since, as the documentation you linked to says, you’re effectively pattern matching on a value whose type is `Any`.

-------------------------

icme | 2022-02-21 05:19:52 UTC | #3

If this is the case, then where does the value from type unions come in? Under what scenarios would it make more sense to choose to use a type union over a predetermined wrapped variant type?

-------------------------

paulyoung | 2022-02-21 05:21:21 UTC | #4

Here’s an old example:

https://github.com/dfinity/motoko/issues/66

-------------------------

icme | 2022-02-21 05:29:33 UTC | #5

That example seems to ask for an intersection type, as opposed to a union type.

I'm imagining something like shown here in Elm lang that allows for destructuring based on types. It's extremely powerful.

https://guide.elm-lang.org/types/pattern_matching.html

-------------------------

paulyoung | 2022-02-21 05:32:03 UTC | #6

[quote="icme, post:5, topic:11008"]
That example seems to ask for an intersection type, as opposed to a union type.
[/quote]

Right, but the same thing applies. You have some existing types and want to say “this or that”/“this and that” without having to create a new named type.

As the documentation says, it’s more useful when the types are compatible through sub typing.

-------------------------

paulyoung | 2022-02-21 05:36:08 UTC | #7

The equivalent of this Elm code:

```
type User
  = Regular String Int
  | Visitor String
```

In Motoko is this variant:

```
type User = {
  #Regular : (Text, Int);
  #Visitor : Text;
};
```

-------------------------

icme | 2022-02-21 05:59:24 UTC | #8

I see, ok so then type ~~unions~~ **intersections** essentially favor the creation of new types through composition/reuse of smaller types. I'm assuming these would be usually combination of record types, for example something like:

```
type UserPermissions = {
  #createPost;
  #editPost;
  #deletePost;
  ...
};
type AdminPermissions = {
  #banUser;
  #createChannel;
} and UserPermissions;
```

-------------------------

icme | 2022-02-21 05:42:23 UTC | #9

> The equivalent of this Elm code: ...

Got it, makes sense. So the variant pattern is the way to go then.

Thanks for the responses and help!

-------------------------

paulyoung | 2022-02-21 05:47:51 UTC | #10

An important distinction is that these are variants, which are sum types (“this *or* this *or*…“) whereas records are product types (“this *and* this *and*…”)

Also, I suspect you meant `and UserPermissions` so that admin users have at least the same permissions as regular users.

-------------------------

icme | 2022-02-21 06:02:57 UTC | #11

Oops, yes you're right! Edited the above to not fool anyone who comes across this in the future.

[quote="paulyoung, post:10, topic:11008"]
An important distinction is that these are variants, which are sum types (“this *or* this *or* …“) whereas records are product types (“this *and* this *and* …”)
[/quote]

This is a great mental model :bulb:

Ok I'm a huge fan of variants now, the lights are on :smile:

-------------------------

