avi | 2022-09-28 06:15:26 UTC | #1

What is the maximum value of Nat64, Nat32, Nat16, Nat8, Int64, Int32, Int16, and Int8?

-------------------------

rossberg | 2022-03-28 09:01:29 UTC | #2

2^64-1, 2^32-1, 2^16-1, 2^8-1, 2^63-1, 2^31-1, 2^15-1, 2^7-1.

But note that there are very few reasons to use them. The main ones are algorithms requiring bit fiddling (e.g., crypto, compression), or matching an external interface or data structure using them. In almost all other cases you are better off with Nat or Int (safer, typically requiring less memory, often even faster).

-------------------------

h1teshtr1path1 | 2022-03-28 16:11:57 UTC | #3

Can you also tell me one more thing, what can be the maximum size of Trie or Hashmaps Data Structures ? Is there any limit ? or they just depend on size of Canister (limited upto 4gb?)

-------------------------

jzxchiang | 2022-03-29 01:16:38 UTC | #4

Oh, I didn't know `Nat` may require less memory AND be faster than `NatX`... Why is that exactly?

Guess I need to refactor my code now.

-------------------------

jzxchiang | 2022-03-29 01:17:54 UTC | #5

They just depend on the size of the canister. But actually due to serialization, garbage collection, and other considerations, the available memory is probably closer to 3 GB, I believe. Hopefully that is temporary.

-------------------------

borovan | 2022-03-29 12:15:50 UTC | #6

I noticed that you can't use a Nat as a key in a TrieMap because the Hash.hash function seems to be limited to Nat32.  Is there any way around that?

When I try to do it the error I get is "canister trapped explicitly, losing precision"

-------------------------

skilesare | 2022-03-29 13:15:58 UTC | #7

Use something like the following as your hash function(actually hard code the number for fewer cycles)

```
func(a:Nat){Nat32.fromNat(a%(2^32 -1))};
```

Also see: https://forum.dfinity.org/t/hash-collisions/11691

-------------------------

borovan | 2022-03-29 13:22:00 UTC | #8

oh nice thanks, yeah I was going to use Text.hash but this solution seems better.  I just hope we do get 64 bit hashes at some point.

-------------------------

claudio | 2022-03-29 13:55:25 UTC | #9

That Hash.hash function is buggy and should be fixed (See issue https://github.com/dfinity/motoko-base/issues/345)

You could use
```  
  /// Conversion. Wraps on overflow/underflow.
 Nat.fromIntWrap : Int -> Nat32;
```
Which won't trap but won't hash large numbers very well either (since it ignores all but the least significant 32 bits).

Note that you can apply `Nat.fromIntWrap(n)` to a `Nat`, `n`, by virtue of subtyping since `Nat <: Int`.

-------------------------

skilesare | 2022-03-29 15:08:21 UTC | #10

I use @quint's crypto library and Candy to get a 256 bit crypto secure hash like the below.  

```
import Conversion "mo:candy/conversion";
import SHA256 "mo:crypto/SHA/SHA256";

SHA256.sum(CandyConversion.valuetoBytes(#Nat(a));

```


You may want to add a namespace into it depending on your use case.  For that I use the .write() API endpoint.

```
        let h = SHA256.New();
        h.write(Conversion.valueToBytes(#Nat32(Text.hash("com.yourapp"))));
        h.write(Conversion.valueToBytes(#Nat(a);
        h.sum([]);
```

I had one issue with the crypto library where if I wrote a strange number of bytes it would throw. I think you have to have a mod(4) bytes....it would be nice if the crypto library had a padWriteLittleEndian() that would make sure a proper number of bytes get written. :)

-------------------------

rossberg | 2022-07-11 07:47:57 UTC | #11

[Oops, never clicked the button.]

[quote="jzxchiang, post:4, topic:11735"]
Oh, I didnâ€™t know `Nat` may require less memory AND be faster than `NatX`â€¦ Why is that exactly?
[/quote]

Because Nat and Int are unboxed for small values (less than 31 bit), which means no allocation or indirection is required. The others are always stored with all bits, which means that Nat/Int32 and Nat/Int64 are always boxed on the heap.

-------------------------

icme | 2022-09-27 22:04:32 UTC | #12

What's the minimum and maximum values of the [`Int`](https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/base/Int) Type? The upper bound seems to stretch beyond the [`Int64`](https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/base/Int64) limit.

<br/>

Example:

```
import Debug "mo:base/Debug";

let max_int_64: Int = 9_223_372_036_854_775_807; // 2^63 - 1

Debug.print("max_int_64: " # debug_show(max_int_64));
Debug.print("max + 200 : " # debug_show(max_int_64 + 200));
```

<br/>

Output:
```
max_int_64: +9_223_372_036_854_775_807
max + 200 : +9_223_372_036_854_776_007
```


<br/>
<br/>

Note that this same test with `Int64`:
```
let max_int_64: Int64 = 9_223_372_036_854_775_807; // 2^63 - 1

Debug.print("max_int_64: " # debug_show(max_int_64));
Debug.print("max + 200 : " # debug_show(max_int_64 + 200));
```

Produces an arithmetic overflow error (as expected).

-------------------------

skilesare | 2022-09-27 22:22:28 UTC | #13

![infinite GIF](upload://jLHJi3Dx5xMlYshold8kFCcLXeK.gif)

-------------------------

icme | 2022-09-27 22:35:31 UTC | #14

Maybe this is the value I'm looking for?

https://forum.dfinity.org/t/infinity-and-nan/14400/4?u=icme

-------------------------

skilesare | 2022-09-27 22:43:05 UTC | #15

You've moved beyond my knowledge...interested in the answer.  I assumed that like nat, ints just keep growing and taking up space and there is a bit for + or -.  Of course, you eventually run out of bits in your memory, but I didn't think there was an actual limit.

-------------------------

icme | 2022-09-27 23:20:35 UTC | #16

@skilesare Just verified this, I start to receive `bigint function error` errors when using any floats larger than 1.79e+308.

-------------------------

skilesare | 2022-09-28 00:01:32 UTC | #17

At least we can count all the atoms in the universe. ðŸ˜‚

-------------------------

rossberg | 2022-09-28 16:25:23 UTC | #18

Int and Nat do not have any maximum value, other than what cannot be represented in 4 gigs of memory(*). However, 64 bit floats have, which is the one you have approximated. After that, everything get's rounded to infinity. And trying to invert float infinity to Int will fail.

I thought the Motoko compiler would warn when a float literal is rounded to infinity, but perhaps I was mistaken.

(*) Though in practice, you will probably run out of cycles before you even get close.

-------------------------

