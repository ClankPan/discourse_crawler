3cL1p5e7 | 2021-10-29 19:21:14 UTC | #1

I want to make a request from my application to another application via an unsafe API (`ic0.raw.app`), but I get an error. Is this the target behavior?

It seems that the Service worker did not resolve a canister ID from another domain URL.
Steps to reproduce:
- Go to `https://***.ic0.app`
- make `fetch('https://***.raw.ic0.app/index.html')`
- Got error `URL "https://***.raw.ic0.app/" did not resolve to a canister ID.`

After debugging I found, that service worker unable to resolve canisterId when page hostname does not match requesting URL. Difference is between `*.ic0.app` and `*.raw.ic0.app`.

It's blocker for me because I want to check certificated assets from `raw` resource before the load a resource in IFrame. And this is the last way to solve my problem after [Why can’t IFrame be used with certificated URLs?](https://forum.dfinity.org/t/why-cant-iframe-be-used-with-certificated-urls/8186?u=3cl1p5e7)

Please, help or answer

-------------------------

3cL1p5e7 | 2021-10-29 19:36:38 UTC | #2

Also, there is no way to register custom service worker on `https://***.ic0.app`, because any request to main domain is accompanied by bootstrap-page loading instead of a custom worker JS-source.

Will us be able to register out custom service workers in future?

-------------------------

nomeata | 2021-10-29 21:09:23 UTC | #3

I’m surprised: When accessing `*.raw.ic0.app`, no service worker should be involved. The point of `raw` is that it hits the HTTP Gateway on the boundary node and no certificate checking happen, so no reason to have a service worker involved.

-------------------------

3cL1p5e7 | 2021-10-30 12:05:33 UTC | #4

This applies to requests from the frontend, where the service worker is already installed. For example
- go to any canister (for example go to OpenChat https://7e6iv-biaaa-aaaaf-aaada-cai.ic0.app/)
- open the console
- we make a request to the same canister in `raw` domain zone `fetch('https://7e6iv-biaaa-aaaaf-aaada-cai.raw.ic0.app')`
- got error, Network tab is empty

![Screenshot](upload://AubC8DBhsAEy5KoBD7gJboAioHq.png)

-------------------------

nomeata | 2021-10-30 12:08:57 UTC | #5

Good analysis. That sounds like a bug in the service worker to me – it should let `raw` urls through.

-------------------------

3cL1p5e7 | 2021-10-30 12:10:14 UTC | #6

Roger! :slight_smile: 
Any suggestions who can help with this issue?

-------------------------

nomeata | 2021-10-30 12:11:22 UTC | #7

It should be sufficient to extend this check, to let requests to `raw` urls through (just like requests to unrelated domains):
https://github.com/dfinity/agent-js/blob/main/apps/sw-cert/src/sw/http_request.ts#L327

-------------------------

3cL1p5e7 | 2021-10-30 12:15:35 UTC | #8

And I still could not find the sourcecode (sorry). Thank you so much for the link!
Perhaps I'll open a pull request :)

-------------------------

3cL1p5e7 | 2021-10-30 14:20:29 UTC | #9

@kpeacock Check plz
[Pull request](https://github.com/dfinity/agent-js/pull/513)

-------------------------

3cL1p5e7 | 2021-11-18 18:24:17 UTC | #10

Pull request was merged.
@bitdivine @kpeacock Thanks you so much! :heart:

-------------------------

kpeacock | 2021-11-18 18:28:27 UTC | #11

We appreciate the initiative, and thanks for bearing with us while we're in the middle of migrating the serviceworker to a new codebase!

-------------------------

lastmjs | 2022-01-26 00:01:40 UTC | #12

I just ran into this issue here: https://ic3o3-qiaaa-aaaae-qaaia-cai.ic0.app/

I am currently sharing https://ic3o3-qiaaa-aaaae-qaaia-cai.raw.ic0.app/ instead to get around this. All of the audio elements fail without `.raw` in the URL address bar.

-------------------------

3cL1p5e7 | 2022-01-31 12:33:17 UTC | #13

As far as I can see the audio works and it's great! :slightly_smiling_face:
If you want to use audio elements without `.raw`, try to certify uploaded files in the same way as [certified-assets](https://github.com/dfinity/certified-assets) or [cert-var](https://github.com/dfinity/examples/tree/master/motoko/cert-var). I haven't tried it, but it should work.
Thank you for your feedback! :metal:

-------------------------

lastmjs | 2022-02-02 19:48:11 UTC | #14

I thought I responded to this, I fixed it up unregistering the service worker, I think it was out of date. Service workers often seem to have a problem staying up to date

-------------------------

3cL1p5e7 | 2022-02-03 15:18:23 UTC | #15

[quote="lastmjs, post:12, topic:8224"]
All of the audio elements fail without `.raw` in the URL address bar.
[/quote]

this happens because the audiofile is splited into chunks. When service-worker fetching chunk and trying to validate it, worker compares file hash from field `sha256` with chunk hash. And of course they don't match. When file was not chunkified, service-worker loads file at once and hashes match.
https://github.com/dfinity/agent-js/blob/cf407c49287d74f0e52395154925c8025eef0d5d/apps/sw-cert/src/sw/validation.ts#L73

I plan to post a topic about it

-------------------------

3cL1p5e7 | 2022-02-03 17:13:32 UTC | #16

Or make streaming implementation on service-worker
https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673/5?u=3cl1p5e7

**UPDATE**
https://forum.dfinity.org/t/http-streaming-chunks-in-javascript/9746/7?u=3cl1p5e7

-------------------------

kpeacock | 2022-02-03 19:46:02 UTC | #17

We're a couple sprints in, and I've still been focused on the invoice canister. I'd still like to demonstrate chunking via agent-js, but that won't resolve the basic issue of the serviceworker needing streaming support

-------------------------

3cL1p5e7 | 2022-02-03 22:14:01 UTC | #18

I have a similar question, not about streaming
Is it correct to use merkletree hashing algorithm while uploading chunks into `certified_assets` and make support of this on service-worker?

At now, not chunkified files works correctly (`fetch(...)`, `<img src...>`) in the browser, but downloading chunkified files raises 500 validation error.

To fix this, I want to try:
- calculate and save merklethee of chunks to `sha256` field of `certified_assets` (by yourself)
- **[Service-worker improvement]** make `equal(sha, treeSha)`-function to validate merkletree (because `treeSha` is a hash of chunk and merkletree is usually used for validating chunk hashes)

Ideally, this will allow to using chunkified assets at least in simple `fetch` or `<img src=...>` cases.

-------------------------

3cL1p5e7 | 2022-02-09 14:01:29 UTC | #19

Hi, Kyle! :slight_smile:

I created a [PR](https://github.com/dfinity/ic/pull/5) with my proposal about streaming support.

I will be grateful for the review.

PS
Unfortunately, this proposal does not solve @lastmjs problem with continuous streaming, but it allows you to download assets larger than 2mb through service-worker

-------------------------

cryptoschindler | 2022-02-12 15:41:04 UTC | #20

very cool, this is going to be super helpful! thank you for taking the time to fix this

-------------------------

