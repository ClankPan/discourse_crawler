RMCS | 2023-10-11 18:04:39 UTC | #1

It seems that there is something not right when using `composite_query` for generating bindings from candid.

You can check it here -> https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/docs/
To confirm, on `https://dashboard.internetcomputer.org/canister/canister-id` it also throws an error.

This candid is invalid and gives an `Error generating bindings for the Candid interface.`
```
service : {
  foo: (principal) -> (text) composite_query;
}
```

Where this functions as expected
```
service : {
  foo: (principal) -> (text) query;
}
```

As a hacky method we deploy the canister with the methods marked as `query` and and once deployed do an install so the wasm gets generated with `composite_query` without changed the candid file.

-------------------------

Severin | 2023-10-12 11:05:12 UTC | #2

If you use the latest `didc` (in [this repo](https://github.com/dfinity/candid)) it works. Looks like Canlista doesn't have the latest version of candid. 

@Ori are you the owner of Canlista?

-------------------------

RMCS | 2023-10-12 11:47:38 UTC | #3

I guess this change also needs to be implemented on the dashboard then?
for example here; https://dashboard.internetcomputer.org/canister/swone-5aaaa-aaaak-ae7za-cai

-------------------------

Ori | 2023-10-12 23:21:34 UTC | #4

Thanks. It does need an update, I’ll bump that for you. It uses a slightly modified wasm build of the didc source.

-------------------------

Ori | 2023-10-15 10:24:29 UTC | #5

Done. That should now generate the binding correctly!

-------------------------

RMCS | 2023-11-14 10:37:19 UTC | #6

@Dylan The composite query candid generation is still an issue on the dashboard, for example
https://dashboard.internetcomputer.org/canister/swone-5aaaa-aaaak-ae7za-cai

-------------------------

Dylan | 2023-11-14 16:49:03 UTC | #7

Thanks for flagging. I didn't see this thread earlier.

-------------------------

Jesse | 2023-11-16 21:03:03 UTC | #8

I'm having this same issue. and unfortunately, I'm not gonna be able to resolve it using the hack that @RMCS mentioned since the `composite_query` methods that I have are methods are defined within `actor class` files. Replicating RMCS's hack would require me to add a lot of code that'll become unnecessary once this bug has been resolved.

@Dylan do you have an estimated time of completion for this particular bug?

-------------------------

Jesse | 2023-11-16 21:33:32 UTC | #9

@Severin how do I upgrade the candid version I'm using? Is there as CLI command for it?

-------------------------

Dylan | 2023-11-16 21:38:48 UTC | #10

[quote="Jesse, post:8, topic:23678"]
@Dylan do you have an estimated time of completion for this particular bug?
[/quote]

Hi @Jesse, I can only speak for the problem on the ICP Dashboard. We'll release a fix for this tomorrow.

-------------------------

RMCS | 2023-11-17 06:15:09 UTC | #11

The code does deploy with the composite queries, right?

What I do now (to get the correct frontend declarations) is copy the candid from the internet computer dashboard, paste it in canlista en then cope the correct declarations in the language of choice.

For the js/ts declarations this also means that you need to manually change “composite_query” to “query” because js agent 0.19.3 doesn’t support composite queries as wel (it works after changing this) Pinged @kpeacock about this issue.

-------------------------

kpeacock | 2023-11-17 18:05:34 UTC | #12

This is actually a candid codegen issue that will need to be rolled out in `dfx` and the `didc` tool. If your IDL flags the method as `composite_query` the agent works as intended

-------------------------

Dylan | 2023-11-17 21:32:10 UTC | #13

[quote="Dylan, post:10, topic:23678"]
Hi @Jesse, I can only speak for the problem on the ICP Dashboard. We’ll release a fix for this tomorrow.
[/quote]

The ICP Dashboard fix for composite queries has been released.

![image|690x334](upload://assU7DMCSn5kpaDQzJf2uFsRI1z.png)

-------------------------

Jesse | 2023-11-21 21:21:33 UTC | #14

@kpeacock do you have an estimate of how soon a fix may be released? and in the meantime, is there a solution that I can implement so that I can carry on developing? the hack that @RMCS mentioned only works for me when I deploy locally, but when attempting to deploy my user interface to the IC, the hack is no longer effective. 

@Severin mentioned that the latest ```didc``` version tooling works. I haven't been able to confirm as I'm unaware of how I would go about installing the ```didc``` CLI to my machine. Is there some package manager that I could use to do so? I've check the ```README``` file for the ```didc``` tool, but it makes no mention of how to go about installing the tool.


for more context. Below is the error, request and response thats being displayed in the browser console when a composite query method is called. None of it was very informative for me, but maybe you all can spot something I missed. This bug is particularly challenging to investigate because it only shows up when deployed to the IC. So I'm unable to use the dev tools that are present when testing locally. 

```
sw.ts:64 Error 
error @ sw.ts:64
(anonymous) @ sw.ts:64
UQ @ sw.ts:64
(anonymous) @ sw.ts:64
await in (anonymous) (async)
(anonymous) @ sw.ts:64
```

```

Request {method: 'POST', url: 'https://ic0.app/api/v2/canister/hxx6x-baaaa-aaaap-qaaxq-cai/read_state', headers: Headers, destination: '', referrer: 'https://fkkq7-siaaa-aaaap-qaaya-cai.icp0.io/', …}
body
: 
(...)
bodyUsed
: 
true
cache
: 
"reload"
credentials
: 
"same-origin"
destination
: 
""
headers
: 
Headers {}
integrity
: 
""
isHistoryNavigation
: 
false
keepalive
: 
false
method
: 
"POST"
mode
: 
"cors"
redirect
: 
"follow"
referrer
: 
"https://fkkq7-siaaa-aaaap-qaaya-cai.icp0.io/"
referrerPolicy
: 
"strict-origin-when-cross-origin"
signal
: 
AbortSignal {aborted: false, reason: undefined, onabort: null}
url
: 
"https://ic0.app/api/v2/canister/hxx6x-baaaa-aaaap-qaaxq-cai/read_state"
```

```

Response {type: 'default', url: '', redirected: false, status: 400, ok: false, …}
body
: 
(...)
bodyUsed
: 
false
headers
: 
Headers {}
ok
: 
false
redirected
: 
false
status
: 
400
statusText
: 
""
type
: 
"default"
url
: 
""
```

when I perform a ```try``` / ```catch``` and print the error, this is what prints up:
```
Error: Server returned an error:
  Code: 502 ()
  Body: 

    at G.readState (index.js:2:327583)
    at async ie (index.js:2:405875)
    at async o (index.js:2:410516)
    at async index.js:205:1358226
```

-------------------------

Severin | 2023-11-22 08:55:20 UTC | #15

@Jesse, to install `didc` you can download a prebuilt binary [here](https://github.com/dfinity/candid/releases)

-------------------------

Jesse | 2023-11-22 12:07:50 UTC | #16

@Severin after downloading the binary, are there any further things i need to do to install it? Or Is there a specific directory that i need to download the binary to?

-------------------------

Severin | 2023-11-22 12:15:28 UTC | #17

No, it just needs to be on your PATH somewhere. And you may have to make it executable

-------------------------

