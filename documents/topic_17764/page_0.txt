saikatdas0790 | 2023-01-02 15:27:31 UTC | #1

I am trying to make an inter-canister call to call another canister on a successful upgrade. However, it looks like `post_upgrade` cannot be `async`. This is the error that I'm seeing:

![image|690x28](upload://h7xasggXwMveTl1rzklk9CFZu6N.png)

> #[post_upgrade] must be above a function. 
expected one of: `for`, parentheses, `fn`, `unsafe`, `extern`, identifier, `::`, `<`, square brackets, `*`, `&`, `!`, `impl`, `_`, lifetime

How do I achieve my desired outcome? Thoughts?
@roman-kashitsyn @chenyan

-------------------------

skilesare | 2023-01-02 14:49:38 UTC | #2

Maybe use the new timer api to call your function after 1 nano second...it should be the next thing called most of the time. You can add a halt blocker if you need a guarantee.

-------------------------

saikatdas0790 | 2023-01-02 14:57:35 UTC | #3

This might work. Let me try.

Although, seems to be a total hack.

What's a "halt blocker"?

@skilesare

-------------------------

skilesare | 2023-01-02 15:03:35 UTC | #4

Just do a check of a bool at the top of every update function. Set it to false at the end of your post upgrade and true at the end of your timer.

-------------------------

saikatdas0790 | 2023-01-02 15:10:28 UTC | #5

It does not work. Basically, a [timer](https://docs.rs/ic-cdk/latest/ic_cdk/timer/fn.set_timer.html) expects a function that doesn't return anything whereas an `async` fuction returns a type of `Future`. The function has to be an async function because inter canister calls are `async` and need to be `await`-ed.

This is the error message I see:
> error: expected `fn() -> impl Future<Output = ()> {add_one}` to be a fn item that returns `()`, but it returns `impl Future<Output = ()>`
label: required by a bound introduced by this call

Any other ideas? Curiously, does this workaround work in Motoko?

@skilesare

-------------------------

mparikh | 2023-01-02 16:15:53 UTC | #6

Use spawn.
https://forum.dfinity.org/t/heartbeat-improvements-timers-community-consideration/14201/84

-------------------------

saikatdas0790 | 2023-01-02 17:17:14 UTC | #7

Thank you. This worked. Although there's a minor caveat.

Calling spawn directly from the post_upgrade doesn't work. It generates the following error.
![image|690x121](upload://zMTM6ArP5lSg40vp5QxvBjjS5U5.png)

> "ic0_call_new" cannot be executed in init mode

However, calling the timer with a nanosecond delay and using spawn with the async function inside it works. Like this:
```rust
ic_cdk::timer::set_timer(Duration::from_nanos(1), || ic_cdk::spawn(add_one()));
```

-------------------------

paulyoung | 2023-01-02 17:49:42 UTC | #8

This has come up in other threads too:

https://forum.dfinity.org/t/cross-canister-compatible-post-init-hook/16929

I think @icme was proposing that there could be new lifecycle hooks for this purpose:

https://forum.dfinity.org/t/canister-lifecycle-hooks/17089

-------------------------

paulyoung | 2023-01-02 17:55:30 UTC | #9

I think the caveat with this approach based on the threads I linked to is that it doesn’t guarantee that other messages aren’t processed before your timer function is called.

That might be fine for this use case depending on what you want to do.

-------------------------

saikatdas0790 | 2023-01-02 17:57:32 UTC | #10

Yep, this is a HACK. But it gets me unstuck for now.

Would definitely appreciate a well thought out alternative, though.

-------------------------

mparikh | 2023-01-02 18:14:48 UTC | #11

Put it another way, perhaps if  all messages were to be dropped for all update calls to the canister, that might work?

I will make a change to dos(https://github.com/icdev2dev/dos) to add a proposal type of '*' to accommodate this.

The query calls would still need guards.

-------------------------

