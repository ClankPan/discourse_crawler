matthewhammer | 2023-03-31 15:06:09 UTC | #1

The Motoko team has an experimental branch of the compiler that implements **stable regions.**

For context, Motoko currently exposes low-level canister stable memory through an experimental API.

For those developers who implement or use existing stable data structures, I'm very curious to know what you think of the new API, which is a minimal generalization over the existing  API.

For instance, here are the small changes needed to adapt this data structure, I expect:
* [Upgrade to Regions (WIP) sardariuss/MotokoStableBTree#4](https://github.com/sardariuss/MotokoStableBTree/pull/4)
* [Upgrade to Regions (WIP) sardariuss/MotokoStableBTreeTest#1](https://github.com/sardariuss/MotokoStableBTreeTest/pull/1)

For some context, see [this part of the forum thread about the structure.](https://forum.dfinity.org/t/completed-icdevs-org-bounty-24-stablebtree-mokoko-up-to-10k/14867/29)

## What is a "region"?

In essence, a `Region` is a new abstract data type in Motoko that admits the same API as before, except that distinct regions use distinct portions of stable memory, and never interfere with one another.

Critically, new `Region`s can also be created dynamically, and old ones that become "garbage" can (eventually, in subsequent revisions of this system) be collected and their portion of stable memory reused for a new `Region`s, in the future.  The current WIP branch implements dynamic allocation, and provisions in the design will eventually permit automatic reclamation.

For now, the old API still "works", but it uses a special, pre-allocated region, isolated from all others created dynamically.  We will use this special region as a migration path (WIP now) for existing stable memory structures that were created and maintained using the current, experimental API.

## What can we do now?

Let me know if you have a stable data structure that I can try to adapt, like the example above!

If you want access to the branch of the compiler and base library that permit you to do your own tests, let's discuss that.  It should be possible.

## Another example

As another example of using the new `Region` type, see this [WIP PR in `base` that gives a "stable buffer" that permits growth with arbitrary-sized blobs, and random-access reads based on numerical indicies.](https://github.com/dfinity/motoko-base/pull/550).

Caveat: I'm not sure if this belongs in `base`, but it's a place to have the PR for now.

## What's left to do?

Before merging this feature:
- Misc cleanup of the PR
- More tests (basic tests show that the mechanism works; we need more though)
- Migration path, plus tests for it (installing the region manager and creating "region zero" for existing data).

-------------------------

matthewhammer | 2023-07-18 17:44:29 UTC | #2

[quote="matthewhammer, post:1, topic:19182"]
## What‚Äôs left to do?

Before merging this feature:

* Misc cleanup of the PR
* More tests (basic tests show that the mechanism works; we need more though)
* Migration path, plus tests for it (installing the region manager and creating ‚Äúregion zero‚Äù for existing data).
[/quote]

The PR is finished, and is under review now.  

While that review happens, we encourage early adopters to [try moc with this feature now](https://github.com/dfinity/motoko/pull/3768#issuecomment-1640580222).

(The PR has an [`moc` artifact](https://github.com/dfinity/motoko/pull/3768#issuecomment-1640580222), and by giving it `--stable-regions` as an argument, folks can try the new region system before it lands in branch `master`.)

Please reach out if you have issues using the feature, or have any questions about it.

cc @skilesare

(Update: Now both Mac and Linux binaries are built by CI.  Initially, there was only a Linux binary.)

-------------------------

matthewhammer | 2023-09-12 15:07:20 UTC | #3

Update: [Last week, this feature was finally merged into the main compiler branch :tada: ](https://github.com/dfinity/motoko/releases/tag/0.10.0)

(Consequently, it will be included in the next version of DFX.)

In the meantime, [the release page has a pre-built compiler for each release, and each platform.](https://github.com/dfinity/motoko/releases)

-------------------------

icme | 2023-09-12 18:38:35 UTC | #4

Nice work!

[quote="matthewhammer, post:1, topic:19182"]
As another example of using the new `Region` type, see this [WIP PR in `base` that gives a ‚Äústable buffer‚Äù that permits growth with arbitrary-sized blobs, and random-access reads based on numerical indicies.](https://github.com/dfinity/motoko-base/pull/550)
[/quote]

Are there any plans to include at least 1-2 new stable data structures (that use `Region`) in base, so that developers can see how to best build libraries around a `Region`, as well as learn preferred usage patterns and edge cases to consider when building on top of `Region`?

-------------------------

matthewhammer | 2023-09-13 19:03:55 UTC | #5

[quote="icme, post:4, topic:19182"]
Are there any plans to include at least 1-2 new stable data structures (that use `Region`) in base
[/quote]

Good question.  I'd like to include at least one map implementation, and perhaps also an implementation of sequences that grow by appending (suitable for very long logs).

During this work, I had planned on adapting the work of @sardariuss on the "stable B tree" Bounty.  However, this message is giving me some second thoughts:

https://forum.dfinity.org/t/completed-icdevs-org-bounty-24-stablebtree-mokoko-up-to-10k/14867/31?u=matthewhammer

I'm curious to hear your thoughts @icme

-------------------------

rabbithole | 2023-09-13 20:13:48 UTC | #6

[quote="matthewhammer, post:5, topic:19182"]
this message is giving me some second thoughts
[/quote]
This message also made me think about using this library. I've had some bad experiences in a local environment where the replica would stop responding after 400 mb of data in stable memory. I didn‚Äôt understand what the reason was, but the conclusion was disappointing - while rust developers have excellent stable structures with support from developers from the DFINITY team, motoko developers have one library, the author of which does not recommend using it.

-------------------------

icme | 2023-09-13 20:33:03 UTC | #7

The purpose of the bounty you're mentioning was to create a Motoko version (parity) of the BTree in
https://github.com/dfinity/stable-structures/

This library is maintained by Rust engineers at DFINITY, so it would be very helpful to the Motoko community if at a BTree version of this (at least) was available for developers. As an aside, one of the main friction points developers run into when using the library is max key/value size bound limits.

All this being said, I know there's also the potential for all of this to be abstracted away from Motoko developers in the future by some of @luc-blaeser's work, given the improvements to wasm-native stable memory. This would be the ideal solution and would showcase Motoko's superpowers as an IC native language, but I'm not sure how far away this is from becoming a reality in terms of the language's roadmap.

In the meantime, in order of preference these are what I'd imagine are the most important data structures to have stable memory libraries for.

1. Map (BTree recommended)
2. Array (could be abstractly built on top of BTree)

-------------------------

sardariuss | 2023-09-13 21:11:40 UTC | #8

Sorry about that, I understand your frustration, but it was just my honest opinion at that time. Moreover I think a library like this requires at least some code reviews before being used in production. Maybe ICdev did some but i got no feedback at that time.

For the issues you mentionned I've been doing some investigations in the past but i couldnt find out the root cause. I am gonna give it a fresh look at it again, and if I manage to make more time (i.e. money üòÖ) i'll try to implement the new stable regions, it looks quite sexy.

-------------------------

matthewhammer | 2023-09-14 15:05:33 UTC | #9

If anyone is online now and wants to chat about this, or any other Motoko thing, we (the Motoko team) are online for the next 50min or so in this Zoom:

https://dfinity.zoom.us/j/97118754835?pwd=WFZiUVcyQ0tqOHlrajFUa0dpRTc3Zz09

Please feel free to join, if only to listen.

-------------------------

timo | 2024-01-07 10:06:08 UTC | #10

I understand regions can grow but not shrink.

Can they be entirely deleted? What happens if I ‚Äúforget‚Äù the reference to a region, does that result in its deletion?

-------------------------

kayicp | 2024-04-12 15:10:15 UTC | #11

I would like Stable Memory to have "shrink" feature too. For now it's only half-scalable since it can only "grow".

-------------------------

timo | 2024-04-15 08:27:07 UTC | #12

[quote="timo, post:10, topic:19182"]
Can they be entirely deleted? What happens if I ‚Äúforget‚Äù the reference to a region, does that result in its deletion?
[/quote]

I found a remark in an article [here](https://internetcomputer.org/blog/2023/09/13/news-and-updates/update#moc-0100---motoko-stable-regions) saying " any old regions that are marked for garbage collection will be removed and reused for new `Region` s afterwards". So it seems that regions can indeed be deleted in this way by dereferencing them.

It's not clear though how usable that is. Say I have a large region which dominated my canister's memory footprint, dereference it, then create a new large region. If the garbage collection does not run in between the two events then I accidentally double my canister's memory footprint and will pay storage cost for the doubled memory forever.

-------------------------

claudio | 2024-04-16 10:33:39 UTC | #13

Just to be clear, garbage collection of the stable memory pages used by an unreachable region is not implemented as of 0.10.1. While Region objects do get collected, the stable memory pages they hold on to do not.

See https://forum.dfinity.org/t/shrink-region-by-using-region-grow-region-0/29672/4?u=claudio

-------------------------

