ZhenyaUsenko | 2022-11-14 09:23:18 UTC | #1

![Screenshot_20221114_111314|615x353](upload://1YrNcpDiqhEzGFIWKtQwt7OHYQL.png)

![Screenshot_20221114_111334|690x339](upload://zxMhaG5eLVGjsqyvHRuCGZU2KPj.png)

What should I specify as a type parameter in example #2 for it to work?

-------------------------

ZhenyaUsenko | 2022-11-16 11:39:32 UTC | #2

Also, it is not entirely clear for me why `() -> ()` and `() -> (())` are different types and are not compatible with each other.

-------------------------

ggreif | 2022-11-17 17:49:42 UTC | #3

I'll answer here. Functions accept and return sequences of arguments. A binary function has a type `(T1, T2) -> ...`. A nullary function (accepting no arguments) has type `() -> ...`.
So far everything is standard.
When there is _one_ input, then there is a twist. Assuming T1 is not syntactically a tuple type, `T1 -> ...` and `(T1) -> ...` are equivalent. This is because there are _no_ one-tuples in Motoko. But if you have `(()) -> ...` then this is a function that receives a _unit_ (i.e. a _single_ value of type `()`). Similarly, `((T1, T2)) -> ...` is a function type receiving a single argument of type `(T1, T2)`, i.e. a _pair_.

Same rules apply to the returned values side.

-------------------------

