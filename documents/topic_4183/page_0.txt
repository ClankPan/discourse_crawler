dpdp | 2021-05-22 16:15:34 UTC | #1

I have been trying to deploy the ICP Ledger locally; But it seems I might do something wrong.

Reproduce step:
dfx.json
```
    "ledger": {
      "type": "custom",
      "candid": "/Users/unknown/nns-ifaces/ledger.did",
      "wasm": "/Users/unknown/ic/rs/rosetta-api/ledger_canister/wasm/ledger-archive-node-canister.wasm",
      "build": ""
    }
```

- nns-ifaces: https://github.com/dfinity/nns-ifaces
- rosetta-api from the official `dfinity/ic` repository


---


```
# previously executed: dfx canister create ledger
% dfx canister install --argument 'record {minting_account="15a32831331d752b5c4cff5b9351bea8015d90f2c3831c6f3fca9c5287a4dbff"; initial_values=vec {record{"15a32831331d752b5c4cff5b9351bea8015d90f2c3831c6f3fca9c5287a4dbff";record{e8s=1000000000;}}}; max_message_size_bytes=null;transaction_window=null;archive_options=null;send_whitelist=vec{};}' --mode=reinstall ledger
Reinstalling code for canister ledger, with canister_id rkp4c-7iaaa-aaaaa-aaaca-cai
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Canister rkp4c-7iaaa-aaaaa-aaaca-cai trapped explicitly: Panicked at 'Deserialization Failed: "Deserialize error: bytes only takes principal or vec nat8"', /Users/lifted/Projects/dfinity/rs/rust_canisters/dfn_core/src/endpoint.rs:50:21
```

I don't think my argument are wrong (I actually used `didc random` to check how to write `HashMap` in Candid)

-------------------------

flyq | 2021-05-23 12:31:37 UTC | #2

https://forum.dfinity.org/t/how-to-call-the-canister-by-dfx-using-candid-file/4022/2?u=flyq

-------------------------

stephenandrews | 2021-05-23 01:54:59 UTC | #3

Let me know if you get this working and what you did, so I can give it a jam when I get home. I had asked somewhere else how to launch a local ledger canister was told not possible so happy to see this!

What are you guys working on @flyq @dpdp ? Would be cool to collab where possible.

-------------------------

ccyanxyz | 2021-06-04 11:21:25 UTC | #4

In dfx.json -> ledger -> wasm, you are using the archive node wasm, you should use the ledger canister wasm.

-------------------------

bobbylingus | 2022-11-02 21:35:12 UTC | #5

https://github.com/dfinity/ic/tree/master/rs/rosetta-api/icp_ledger

Link in this page on how to deploy locally is broken.

How to deploy locally?

-------------------------

Severin | 2022-11-03 07:10:13 UTC | #6

[This](https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/ledger-local-setup) is the current official guide to installing the ledger locally. I'll go put in a redirect

-------------------------

cryptoschindler | 2022-11-17 11:40:13 UTC | #7

with dfx `0.12.0` shouldn't those instructions give a hint in the beginning regarding `dfx nns install` and `dfx nns import`?

-------------------------

Severin | 2022-11-17 12:03:18 UTC | #8

We're not quite sure what we want to do with `dfx nns install/import` since it's a maintainability nightmare the way it is right now. But yes, it would make sense to add a note there once it's a bit more clear what will happen to those commands

-------------------------

cryptoschindler | 2022-11-18 16:28:52 UTC | #9

this doesn't work for me, i get `404`s for the did files and an `Access Denied` message for the actual Wasm

-------------------------

cryptoschindler | 2022-11-18 17:09:44 UTC | #10

EDIT: no it wasn't, but the shell script didn't work for me.
apparently `ledger-canister` was renamed to `icp-canister`. will make a PR

-------------------------

jorgenbuilder | 2022-12-19 20:49:21 UTC | #11

I hope that we find a way to make these commands work. Being able to trivially deploy an ICP ledger is critical to efficiency for local replica tests. For lack of this feature, several of my past projects have either a) manually mocked an ICP ledger, b) run tests on mainnet. <3

-------------------------

inviscidpixels | 2022-12-20 13:23:48 UTC | #12

I don't know if it is applicable, but if using `dfx nns install` with other canisters, I have to rebuild those other canisters each time after `dfx nns install` is called again or those canister's won't compile if importing one of those nns canisters.

-------------------------

Severin | 2022-12-20 17:19:58 UTC | #13

This sounds sort-of expected. `dfx nns install` means that you did a `dfx start --clean`, right? In this case, dfx knows that since the state got wiped, canister IDs are not valid anymore and therefore the canisters should be recompiled. I guess (haven't tested) if you did `dfx canister install` instead of `deploy` it would bypass that check if you don't feel like recompiling.

-------------------------

inviscidpixels | 2022-12-23 19:52:31 UTC | #14

I should have been more clear. If I have a non-nns canister in the project that imports one of the nns-canisters, after rerunning `dfx stop` `dfx start --clean` `dfx nns install` the first time I try to (create,build)/deploy the non-nns canister, it will always fail. If I run deploy <that canister> again, it will succeed--in other words, I have to run deploy <that non-nns canister> twice in a row in order for it to work. 

Specifically I made a bare-bones project where the default backend Motoko canister imports the nns-ledger, the nns-ledger is added as a dependency to that backend Motoko canister in the project's dfx.json (after `dfx nns import` is run the first time, since it only needs to be run once for the dfx.json to be configured for the nns canisters), to create a script that resets the project's replica state (rerunning `dfx nns install` and `dfx deploy backend_canister`). It will compile and the backend_canister can successfully query the balance of an account identifier, but as I said `dfx deploy backend_canister` has to be run twice in a row since it fails to compile the first time around (I'm guessing because the nns-ledger is not deployed as are the non-nns canisters, so it is not linked correctly automatically without attempting to build it first?). Instead of `dfx deploy` the first time, `dfx canister create <canister>` `dfx build <canister>` also produces the same error even before `dfx install <canister>` would be called. I don't have the error handy, but iirc it's specifically related to the import of the nns-canister in the backend canister Motoko file (just the standard default import statement that does work the second time `deploy` is run).

-------------------------

Severin | 2023-01-04 09:17:46 UTC | #15

That sounds like a bug. Would you have a repro handy? If I can avoid it, I'd like to not recreate the setup myself.

-------------------------

jamesbeadle | 2023-04-04 08:36:31 UTC | #16

Hi, I have deployed the local ledger following this guide, however when I try to use it in my main.mo via this import:

import Ledger "canister:ledger";

I get the error:
file /.dfx/local/lsp/rno2w-sqaaa-aaaaa-aaacq-cai.did uses Candid types without corresponding Motoko type Motoko

If you could help that would be great.

-------------------------

Severin | 2023-04-04 09:37:26 UTC | #17

That's not enough info for me to fix the problem - can you maybe reduce it down to a specific example?

-------------------------

jamesbeadle | 2023-04-04 09:49:21 UTC | #18

So I followed the instructions for setting up a local ledger canister here:
https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/ledger-local-setup

If I run the check:

dfx canister call ledger account_balance '(record { account = '$(python3 -c 'print("vec{" + ";".join([f"{b}:nat8" for b in bytes.fromhex("'$LEDGER_ACC'")]) + "}")')' })'

I get the result:
(record { 5_035_232 = 100_000_000_000 : nat64 })

Which makes me think the canister is setup correctly.

All I do next is go over to my main.mo file, which you can see here:
https://github.com/jamesbeadle/football_god/blob/master/src/football_god_backend/main.mo

and I get the error:
uses Candid types without corresponding Motoko type

Does any of this help? 

Thanks

-------------------------

Severin | 2023-04-04 09:53:17 UTC | #19

[quote="jamesbeadle, post:18, topic:4183"]
Which makes me think the canister is setup correctly.
[/quote]

I agree, looks fine to me too.

I don't have time to dig deep into your code right now. I'll ask the Motoko team if they have any advice to debug this further.

-------------------------

claudio | 2023-04-04 12:49:34 UTC | #20

I believe that the problem might be with the did file that motoko is importing (ledger.public.did). I can't see it in the repo, but I guess it's downloaded from here:

https://github.com/dfinity/ic/blob/master/rs/rosetta-api/ledger.did

(If you can share your version of the ledger did, used by Motoko, that would be helpful.)

This line https://github.com/dfinity/ic/blob/master/rs/rosetta-api/ledger.did#L99 of that did file includes
the service argument, used by dfx when installing the canister. The installed canister, that motoko wants to talk to, shouldn't have the argument and the did file used needs to look something like this (note the commented out argument to the service):

```
type Tokens = record {
     e8s : nat64;
};

type Duration = record {
    secs: nat64;
    nanos: nat32;
};

// Number of nanoseconds from the UNIX epoch in UTC timezone.
type TimeStamp = record {
    timestamp_nanos: nat64;
};

type ArchiveOptions = record {
    trigger_threshold : nat64;
    num_blocks_to_archive : nat64;
    node_max_memory_size_bytes: opt nat64;
    max_message_size_bytes: opt nat64;
    controller_id: principal;
    cycles_for_archive_creation: opt nat64;
};

// Height of a ledger block.
type BlockIndex = nat64;

// A number associated with a transaction.
// Can be set by the caller in `send` call as a correlation identifier.
type Memo = nat64;

// Account identifier encoded as a 64-byte ASCII hex string.
type AccountIdentifier = text;

// Subaccount is an arbitrary 32-byte byte array.
type SubAccount = blob;

type Transfer = variant {
    Burn: record {
        from: AccountIdentifier;
        amount: Tokens;
    };
    Mint: record {
        to: AccountIdentifier;
        amount: Tokens;
    };
    Send: record {
        from: AccountIdentifier;
        to: AccountIdentifier;
        amount: Tokens;
    };
};

type Transaction = record {
    transfer: Transfer;
    memo: Memo;
    created_at: BlockIndex;
};

// Arguments for the `send_dfx` call.
type SendArgs = record {
    memo: Memo;
    amount: Tokens;
    fee: Tokens;
    from_subaccount: opt SubAccount;
    to: AccountIdentifier;
    created_at_time: opt TimeStamp;
};

// Arguments for the `notify` call.
type NotifyCanisterArgs = record {
    // The of the block to send a notification about.
    block_height: BlockIndex;
    // Max fee, should be 10000 e8s.
    max_fee: Tokens;
    // Subaccount the payment came from.
    from_subaccount: opt SubAccount;
    // Canister that received the payment.
    to_canister: principal;
    // Subaccount that received the payment.
    to_subaccount: opt SubAccount;
};

type AccountBalanceArgs = record {
    account: AccountIdentifier;
};

type LedgerCanisterInitPayload = record {
    minting_account: AccountIdentifier;
    initial_values: vec record {AccountIdentifier; Tokens};
    max_message_size_bytes: opt nat64;
    transaction_window: opt Duration;
    archive_options: opt ArchiveOptions;
    send_whitelist: vec principal;
    transfer_fee: opt Tokens;
    token_symbol: opt text;
    token_name: opt text;
};

service: /* (LedgerCanisterInitPayload) -> */ { // <--- remove the argument type!
  send_dfx : (SendArgs) -> (BlockIndex);
  notify_dfx: (NotifyCanisterArgs) -> ();
  account_balance_dfx : (AccountBalanceArgs) -> (Tokens) query;
  notify_pb: () -> ();
}
```

-------------------------

jamesbeadle | 2023-04-04 14:30:20 UTC | #21

Hi Claudio, thanks for getting back to me. I have included the dfx temp files in my repo now if you would like to take a look. Kind regards, James

-------------------------

jamesbeadle | 2023-04-04 14:38:41 UTC | #22

When I remove the line you suggest it imports but it seems that the function names are different from the defi example from the Dfinity examples. For instance Ledger.account_balance is now Ledger.account_balance_dfx.

Are there docs for me to look at where I can infer functionality for depositing ICP to a sub account, transferring to the default account and back again?

Kind regards, James

-------------------------

jamesbeadle | 2023-04-04 18:12:21 UTC | #23

I've taken the ledger.public.did from here and it seems to have the functins I need:

https://github.com/dfinity/examples/blob/master/motoko/ledger-transfer/ledger.public.did

Thanks for your help.

-------------------------

claudio | 2023-04-04 20:09:09 UTC | #24

Sorry I didn't respond in time  but glad you found a solution.

-------------------------

jamesbeadle | 2023-04-04 21:06:21 UTC | #25

No worries, thanks for the help.

-------------------------

hilljh82 | 2023-08-24 13:32:46 UTC | #26

I am having problems installing the ledger locally using the instructions provided [on the website](https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/ledger-local-setup). I am using the `DFX_VERSION=0.14.3`, and I am on a mac. I followed the instructions using a fresh install of IC.

When I get to the instructions to deploy the canister, I get the following error message:

    Error: Cannot find canister id. Please issue 'dfx canister create ledger'

I then run the `dfx` command to create the ledger canister, and attempt to install the ledger canister again. This time around, I get the following error message:

```
Error: Failed to install wasm module to canister 'ledger'.
Caused by: Failed to install wasm module to canister 'ledger'.
  Failed to read /Users/hilljh/Projects/onehilltech/ic/ledger/.dfx/local/canisters/ledger/ledger.wasm.gz.
    No such file or directory (os error 2)
```

It seems like `dfx` is not downloading the wasm file. As a workaround, I manually download both the candid file and wasm file and place them in my local directory and update `dfx.json` accordingly. When I do that, and run the following command as listed on the website:

    dfx canister install ledger --argument "(variant {Init = record { token_name = \"NAME\"; token_symbol = \"SYMB\"; transfer_fee = 1000000; metadata = vec {}; minting_account = record {owner = principal \"$(dfx --identity minter identity get-principal)\";}; initial_balances = vec {}; archive_options = record {num_blocks_to_archive = 1000000; trigger_threshold = 1000000; controller_id = principal \"$(dfx identity get-principal)\"}; }})"

I get a completely different set of errors.

```
Error: Failed to install wasm module to canister 'ledger'.
Caused by: Failed to install wasm module to canister 'ledger'.
  Failed during wasm installation call: The replica returned a replica error: Replica Error: reject code CanisterError, reject message Canister bkyz2-fmaaa-aaaaa-qaaaq-cai trapped explicitly: failed to decode call arguments: Custom(Fail to decode argument 0 from table0 to variant {
  Upgrade : opt record {
    token_symbol : opt text;
    transfer_fee : opt nat64;
    metadata : opt vec record {
      text;
      variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
    };
    change_fee_collector : opt variant {
      SetTo : record { owner : principal; subaccount : opt vec nat8 };
      Unset;
    };
    max_memo_length : opt nat16;
    token_name : opt text;
    feature_flags : opt record { icrc2 : bool };
  };
  Init : record {
    token_symbol : text;
    transfer_fee : nat64;
    metadata : vec record {
      text;
      variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
    };
    minting_account : record { owner : principal; subaccount : opt vec nat8 };
    initial_balances : vec record {
      record { owner : principal; subaccount : opt vec nat8 };
      nat64;
    };
    fee_collector_account : opt record {
      owner : principal;
      subaccount : opt vec nat8;
    };
    archive_options : record {
      num_blocks_to_archive : nat64;
      max_transactions_per_response : opt nat64;
      trigger_threshold : nat64;
      max_message_size_bytes : opt nat64;
      cycles_for_archive_creation : opt nat64;
      node_max_memory_size_bytes : opt nat64;
      controller_id : principal;
    };
    max_memo_length : opt nat16;
    token_name : text;
    feature_flags : opt record { icrc2 : bool };
  };
}

Caused by:
    0: input: 4449444c056b01b0ced18403016c079efeb9a40371f2c794ae037cefcee7800402aecbeb880403b2a4dab20502a1e5f7a10a0491c9aafe0d716d6f6c01b3b0dac303686c039ea581d2017ca495a5e9067cdec5d8ae0e680100_000453594d42c0843d00011d874f3ca3e65851a5177a4d36545b4677a5990406ea2618d6270ba5d60200c0843dc0843d011d4d3680e97f160e3afd56233417c2583293492eb97b646f118f9896a502044e414d45
       table: type table0 = variant { 815_032_112 : table1 }
       type table1 = record {
         881_753_886 : text;
         902_112_242 : int;
         1_075_439_471 : table2;
         1_092_281_774 : table3;
         1_448_514_098 : table2;
         2_755_523_233 : table4;
         3_754_599_569 : text;
       }
       type table2 = vec empty
       type table3 = record { 947_296_307 : principal }
       type table4 = record { 440_423_070 : int; 1_831_422_628 : int; 3_856_016_094 : principal }
       wire_type: table0, expect_type: variant {
         Upgrade : opt record {
           token_symbol : opt text;
           transfer_fee : opt nat64;
           metadata : opt vec record {
             text;
             variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
           };
           change_fee_collector : opt variant {
             SetTo : record { owner : principal; subaccount : opt vec nat8 };
             Unset;
           };
           max_memo_length : opt nat16;
           token_name : opt text;
           feature_flags : opt record { icrc2 : bool };
         };
         Init : record {
           token_symbol : text;
           transfer_fee : nat64;
           metadata : vec record {
             text;
             variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
           };
           minting_account : record { owner : principal; subaccount : opt vec nat8 };
           initial_balances : vec record {
             record { owner : principal; subaccount : opt vec nat8 };
             nat64;
           };
           fee_collector_account : opt record {
             owner : principal;
             subaccount : opt vec nat8;
           };
           archive_options : record {
             num_blocks_to_archive : nat64;
             max_transactions_per_response : opt nat64;
             trigger_threshold : nat64;
             max_message_size_bytes : opt nat64;
             cycles_for_archive_creation : opt nat64;
             node_max_memory_size_bytes : opt nat64;
             controller_id : principal;
           };
           max_memo_length : opt nat16;
           token_name : text;
           feature_flags : opt record { icrc2 : bool };
         };
       }
    1: table0 is not a subtype of variant {
         Upgrade : opt record {
           token_symbol : opt text;
           transfer_fee : opt nat64;
           metadata : opt vec record {
             text;
             variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
           };
           change_fee_collector : opt variant {
             SetTo : record { owner : principal; subaccount : opt vec nat8 };
             Unset;
           };
           max_memo_length : opt nat16;
           token_name : opt text;
           feature_flags : opt record { icrc2 : bool };
         };
         Init : record {
           token_symbol : text;
           transfer_fee : nat64;
           metadata : vec record {
             text;
             variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
           };
           minting_account : record { owner : principal; subaccount : opt vec nat8 };
           initial_balances : vec record {
             record { owner : principal; subaccount : opt vec nat8 };
             nat64;
           };
           fee_collector_account : opt record {
             owner : principal;
             subaccount : opt vec nat8;
           };
           archive_options : record {
             num_blocks_to_archive : nat64;
             max_transactions_per_response : opt nat64;
             trigger_threshold : nat64;
             max_message_size_bytes : opt nat64;
             cycles_for_archive_creation : opt nat64;
             node_max_memory_size_bytes : opt nat64;
             controller_id : principal;
           };
           max_memo_length : opt nat16;
           token_name : text;
           feature_flags : opt record { icrc2 : bool };
         };
       }
    2: Variant field 815_032_112: table1 is not a subtype of record {
         token_symbol : text;
         transfer_fee : nat64;
         metadata : vec record {
           text;
           variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
         };
         minting_account : record { owner : principal; subaccount : opt vec nat8 };
         initial_balances : vec record {
           record { owner : principal; subaccount : opt vec nat8 };
           nat64;
         };
         fee_collector_account : opt record {
           owner : principal;
           subaccount : opt vec nat8;
         };
         archive_options : record {
           num_blocks_to_archive : nat64;
           max_transactions_per_response : opt nat64;
           trigger_threshold : nat64;
           max_message_size_bytes : opt nat64;
           cycles_for_archive_creation : opt nat64;
           node_max_memory_size_bytes : opt nat64;
           controller_id : principal;
         };
         max_memo_length : opt nat16;
         token_name : text;
         feature_flags : opt record { icrc2 : bool };
       }
    3: Record field transfer_fee: int is not a subtype of nat64
    4: int is not a subtype of nat64), error code None

```

Any assistance in installing the ledger locally using the instructions provided on the website would be greatly appreciated.

-------------------------

wilak | 2023-09-12 18:08:49 UTC | #27

DFX version: 0.14.4
Guide followed: https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/ledger-local-setup
Environment: Ubuntu 22.04.3 LTS


**Problems in step 9 ( and a small one in step 1):**

*Step 1*: Guide tells me to create new canister with name "ledger-canister", but dfx in turn tells me that "-" is not allowed in the name. Fixed by making it "ledgercanister" and later renaming it

*Step 9*: The error this code gives can be seen in the screenshot. I tried filling in the Account ID manually, with and without brackets + assigning it first to another variable and then that variable to minting_account. 

![image|690x150](upload://ygNWO9xO0eNBeRsGnoMzXfUK1kq.png)

Any suggestions?

-------------------------

Severin | 2023-09-13 09:01:48 UTC | #28

If I read the candid file correctly the account id is of type `blob`. You can find the syntax of declaring blobs [here](https://internetcomputer.org/docs/current/references/candid-ref#type-blob)

-------------------------

wilak | 2023-09-13 13:47:13 UTC | #30

Thanks for your response, I tried formatting it as blob in different ways but it didn’t work out. I see step 1 in the guide got updated, I hope same could be done for the code in step 9 according to the problem I showed and the breadcrumb by Severin.

(and maybe fix the not working wasm and did file download).

I’m now using the ledger_types package from MOPS, only downside is that this does not work in VSCode definitions as it wants you to call a deployed canister. If there is any other way to get the ledger working locally, id love to hear it.

-------------------------

Jessie | 2023-09-13 17:19:40 UTC | #31

Hey @wilak , 

I think your error may come from a lack of quotes around the principal ID. I tested it locally and was able to replicate your error when quotes aren't used around those values. 

I've created a PR to update the docs page to include quotes around those values, and clarify some of the steps such as the one regarding the Wasm download, per your feedback.

You can find the edited file here: https://github.com/dfinity/portal/blob/492fbda52bd0c0150942cc2ee4aa616fcf1c827c/docs/developer-docs/integrations/ledger/ledger-local-setup.md

Thanks!

-------------------------

wilak | 2023-09-13 18:00:59 UTC | #32

Thank you very much for your prompt response! Got it working after refollowing the guide.

After following the guide I saw some small things that I had to figure out myself:

**Step 10**
```
mv ledger-canister.wasm.gz .dfx/canisters/ledger_canister/ledger-canister.wasm.gz
```
Its missing the /local/ dir &
In my case the canisters and ledger_canister dir were not yet made, so best if this was added (also cp, looking at step 12):


```
[ ! -d ".dfx/local/canisters/ledger_canister" ] && mkdir -p ".dfx/local/canisters/ledger_canister"
cp ledger-canister.wasm.gz .dfx/local/canisters/ledger_canister/ledger-canister.wasm.gz
```

**Step 12**

It said it couldnt find ledger-canister.wasm.gz, as it was looking in ./ and not ./.dfx/local/canisters/ledger_canister/

-------------------------

Jessie | 2023-09-13 18:19:43 UTC | #33

Thank you for the feedback @wilak ! I've made the suggested edits to the doc. Could you take another look and make sure I didn't miss anything that you suggested? 

https://github.com/dfinity/portal/blob/e1ff409900438384c9df3514d92283749fe39119/docs/developer-docs/integrations/ledger/ledger-local-setup.md

Thanks!

-------------------------

wilak | 2023-09-13 18:39:23 UTC | #35

Edits look good!, Only thing is that in step 11 it looks for ledger_canister.wasm.gz instead of ledger-canister.wasm.gz in the /local/canister/ledger_canister dir.

So I think best to rename it after the wget or during the mv, and then also rename it in dfx.jso

-------------------------

Jessie | 2023-09-13 18:45:42 UTC | #36

Thanks! Fixed that as well.

-------------------------

