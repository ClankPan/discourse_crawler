skilesare | 2023-05-22 11:38:04 UTC | #1

I want to await a call to an update on my own canister. Is there a good strategy to make sure this goes through a full consensus round?

I thought about retrying and checking the timestamp and throwing it away if it hasn't changed, but I don't want to just self call a hundred times and burn cycles.

Edit: I know a timer would be better here, but the interop party has requested a single atomic call and I basically want to block until I've processed a number of things.

-------------------------

Severin | 2023-05-22 13:44:42 UTC | #2

Can you please clarify? Are you looking for a 1-round delay function or are you asking merely about self-awaiting? A self-await works just like any other await (specifically excluding `await*`), but your call may get scheduled in the same round of consensus as a short-circuit mechanism. Control still only returns to the calling site after that call has finished

-------------------------

skilesare | 2023-05-22 14:20:45 UTC | #3

I want to specifically delay one round.

-------------------------

dsarlis | 2023-05-23 08:43:59 UTC | #4

You can't delay by one round (or X rounds for that matter) because the round concept is not exposed to the canister developers.

> Edit: I know a timer would be better here, but the interop party has requested a single atomic call and I basically want to block until I’ve processed a number of things.

If you want to block until you've processed a number of things, it sounds like you would be able to do one self-call once the last thing you've processed is done and then move on? Or maybe I don't understand what you have in mind exactly.

-------------------------

berestovskyy | 2023-05-23 09:23:15 UTC | #5

Probably, the easiest way to wait until the next round is to use [timers](https://internetcomputer.org/docs/current/motoko/main/base/Timer). Setting a one-off timer with a minimum 1ns delay should do the trick.

-------------------------

ZenVoich | 2023-05-23 09:54:00 UTC | #6

This is not self call, but may be helpful `await Random.blob();`

-------------------------

skilesare | 2023-05-23 10:00:00 UTC | #7

I have a very specific use case here. I'm guessing it would be possible since before you HAD to wait one round.

The use case is perceived atomicity for the client. They've asked to make a call and not have it return until finished. I need to alert other canisters via one shot, but I only want to alert them one at a time and give them time to revert to an endpoint and I'll search for their response before sending the next notification.

Currently I can't await a timer can I?

-------------------------

free | 2023-05-23 13:42:04 UTC | #8

Actually, a timer will only trigger 2 rounds out of 3 in the presence of messages. @ZenVoich's suggestion to use `Random.blob()` sounds like your best bet.

Although I'm not clear on how everything is supposed to fit together. Why are you sending one shot messages and then awaiting some side-effect of said message? Why do you expect that said side-effect will take one round to materialize? (it may well do so within the same round. Or take multiple rounds.)

-------------------------

skilesare | 2023-05-23 14:13:16 UTC | #9

[quote="free, post:8, topic:20139"]
Although I’m not clear on how everything is supposed to fit together. Why are you sending one shot messages and then awaiting some side-effect of said message? Why do you expect that said side-effect will take one round to materialize? (it may well do so within the same round. Or take multiple rounds.)
[/quote]

The target of the notification can be specified by the caller or elected by a subscriber, but they will be canisters not in our control. We can't await their reply.

>Random.blob()

I thought about this or just making sure we call something cheap on another subnet...maybe querying a balance from ICP canister which is guaranteed to be on another subnet.  I'd need to find the cheapest way and the minimum number of rounds.

-------------------------

timo | 2023-05-23 14:19:34 UTC | #10

Is this relevant? https://forum.dfinity.org/t/ic-barrier-withhold-responses-for-testing-etc/9351

Old thread, called ic-barrier, it is about externally controlling when a call returns, with some trick.

-------------------------

skilesare | 2023-05-23 16:04:12 UTC | #11

This looks very interesting.  It looks like it uses actually stopping the canister. Unfortunately, this won't work for us because we need to process other incoming requests.

-------------------------

timo | 2023-05-23 18:47:51 UTC | #12

I thought you’d build in one hop through a proxy canister and stop that one.

-------------------------

skilesare | 2023-05-23 20:33:32 UTC | #13

Ah...that makes sense.  Let me think about it a bit more.

-------------------------

