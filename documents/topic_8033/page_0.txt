ericswanson | 2021-10-19 16:36:44 UTC | #1

Release notes: https://sdk.dfinity.org/docs/release-notes/0.8.3-rn.html

This release has a **breaking change**: we removed the `--no-artificial-delay` command-line option from `dfx start` and `dfx replica`, in favor of a value which matches most subnets.

The main feature of this release is to fix the `replica` and `ic-starter` binaries in the linux build, which we broke in the 0.8.2 release.

We also fixed the `ic-ref` binary in the linux build, which had a similar problem though for a different reason.  It had been broken since launch.  This means that `dfx start --emulator` can work on linux now.

We also upgraded Motoko from 0.6.10 to 0.6.11.

-------------------------

lastmjs | 2021-10-19 17:49:27 UTC | #2

It would be nice to configure update delays and cycle limits locally with sensible defaults

-------------------------

skilesare | 2021-10-19 18:16:22 UTC | #3

Does this now mean there is no way to get rid of any artificial delay?  Maybe I'm misunderstanding.  If there is no way to get rid of the delay it would be bad for testing scripts that run as canisters on local replicas.

-------------------------

PaulLiu | 2021-10-19 18:55:23 UTC | #4

The previous setting used by "--no-artificial-delay" is now the default.

-------------------------

skilesare | 2021-10-19 19:19:16 UTC | #5

Ah...ok..perfect.  Thanks for the clarification.

-------------------------

senior.joinu | 2021-10-22 12:41:25 UTC | #6

@ericswanson 

Thanks for a new version!

`heartbeat` does not work again - it just do not execute the supplied function. I haven't found any tests or examples with this mechanism enabled and working. Is it really there?

Btw, I'm using `#[heartbeat]` macro from `ic-cdk-macros`.

-------------------------

ericswanson | 2021-10-23 05:30:23 UTC | #7

As far as I know, heartbeat functionality is still under development.  I've been watching for it too.  Did I erroneously write something about it in the release notes?

-------------------------

senior.joinu | 2021-10-23 13:31:24 UTC | #8

Yes, you've mentioned that this version supports [this spec](https://smartcontracts.org/docs/interface-spec/index.html#_heartbeat) which also introduces `heartbeat` functionality as something that is now supported.

-------------------------

senior.joinu | 2021-10-24 22:51:03 UTC | #9

Could you, please, elaborate on estimates for this feature in dfx?

-------------------------

northman | 2021-10-26 19:43:33 UTC | #10

Eric, do you know when the Hashmap vals() function will be added per the documentation?

-------------------------

ericswanson | 2021-10-26 20:11:59 UTC | #11

Would you please point me to the location?

-------------------------

ericswanson | 2021-10-26 20:14:08 UTC | #12

It appears that Hashmap.vals() is present in the Motoko base library included with dfx 0.8.3:


```
$ dfx --version
dfx 0.8.3
$ dfx cache delete
$ dfx cache install
Version v0.8.3 installed successfully.
$ grep vals $(dfx cache show)/base/Hashmap.mo
public func vals() : Iter.Iter<V>


```

-------------------------

northman | 2021-10-26 20:55:02 UTC | #13

I had done a dfx -upgrade and it did not show up.
I did the cache delete and dfx cache install and it shows in the grep out.

I will pass it along to others who are having the same issue.

Thank you very much.

-------------------------

northman | 2021-10-26 21:06:37 UTC | #14

But yet this is the error I am still getting:

Stderr:
/.../hello/src/hello/main.mo:36.10-36.19: type error [M0072], field vals does not exist in type
  {
    delete : Name -> ();
    entries : () -> Iter/1<(Name, Entry)>;
    get : Name -> ?Entry;
    put : (Name, Entry) -> ();
    remove : Name -> ?Entry;
    replace : (Name, Entry) -> ?Entry;
    size : () -> Nat
  }

-------------------------

Ori | 2021-10-26 22:57:51 UTC | #15

Are you using the vessel package manager in your project? This may be referencing an older version of the base library.

-------------------------

ericswanson | 2021-10-26 23:07:40 UTC | #16

Another possibility is that dfx.json specifies an older version, say 0.8.1.  You can either remove the version field from dfx.json, or set it to a newer version.  I usually remove the version field.

-------------------------

northman | 2021-10-26 23:14:24 UTC | #17

Thanks.  I did change it.  Same problem occurs for me in motoko playground.
sizeof() works fine.
vals() not fine.

I am just playing with the Phonebook example.  It must be me.

-------------------------

northman | 2021-10-26 23:36:24 UTC | #18

I created a new project using:

dfx new project1

the program now deploys correctly and the canister function is working.
Thanks.  Something was cached/stored somewhere.
.

-------------------------

senior.joinu | 2021-10-27 08:18:09 UTC | #19


[quote="ericswanson, post:11, topic:8033, full:true"]
Would you please point me to the location?
[/quote]

@ericswanson this link does exactly that

[quote="senior.joinu, post:8, topic:8033"]
supports [this spec ](https://smartcontracts.org/docs/interface-spec/index.html#_heartbeat)
[/quote]

upd: if you're using a phone, scroll up a little bit

-------------------------

saikatdas0790 | 2021-10-27 09:31:21 UTC | #20

[quote="ericswanson, post:12, topic:8033"]
`grep vals $(dfx cache show)/base/Hashmap.mo`
[/quote]

![image|690x111](upload://mK1NzTCMrKQRnXJkTThasdILAe1.png)

Am I doing something wrong? The Hasmap.mo does exist in that directory when manually inspected

And on opening the file using VS Code, I do see this snippet
![image|494x104](upload://jPG2Gze6WJhUw9OtgD7KMPlFBwY.png)

-------------------------

ericswanson | 2021-10-27 16:37:19 UTC | #21

@senior.joinu If I wrote somewhere that the replica included in any shipped version of dfx supports heartbeat, would you please point me to that?

The spec itself is always ahead of the implementation.

-------------------------

senior.joinu | 2021-10-27 19:42:48 UTC | #22

@ericswanson 
I'm really not satisfied with our conversation so far. What do you think you're doing?

Here is your original post about `0.8.2`
https://forum.dfinity.org/t/dfx-0-8-2-is-promoted/7844?u=senior.joinu

There is a link "Please see: dfx 0.8.2 release notes"
Let's follow it. It leads to this page https://smartcontracts.org/docs/release-notes/0.8.2-rn.html

![Screenshot from 2021-10-27 22-38-30|690x95](upload://2Wf3GhsjD1zlHOIRkUo6dADEMR7.png)

There is another link "Updated to Interface Spec 0.18.0"
Let's follow once again.
It leads to this page https://smartcontracts.org/docs/interface-spec/index.html

Where one could easily see this text, stating that heartbeat mechanics are now implemented.
![Screenshot from 2021-10-27 22-40-25|690x246](upload://2x4UprHALedYwmaaI5W0PBaN3yJ.png)

-------------------------

senior.joinu | 2021-10-27 19:46:20 UTC | #23

Would you kindly just uncover the ETA about heartbeat in `dfx`. This could greatly help other teams depending on this feature to plan their work, including me.

-------------------------

ericswanson | 2021-10-27 19:56:09 UTC | #24

Unfortunately, I don't have information about the ETA of the implementation of the heartbeat functionality.

You are right, the linked document https://smartcontracts.org/docs/interface-spec/index.html is not version-specific.  I should have noted that in the release notes rather than implying that all of the information in it applies to spec 0.18.0 or to dfx 0.8.2.

It does not all apply to spec 0.18.0.  The interface spec is updated independently.  The Canister Heartbeat was added to spec 0.18.2, though one cannot find that out by reading the linked public spec doc.  Furthermore, implementation follows the spec.

-------------------------

senior.joinu | 2021-10-27 19:58:44 UTC | #25

Sorry to hear that!
Thanks for the clarification. 

Could you please tag someone that might know?

-------------------------

diegop | 2021-10-27 21:03:17 UTC | #26

Fwiw, @ericswanson did ping me (a few hours ago, but i only recently saw it) to see if I can help him find out more on the ETA. I will ping some folks internally to try to see if we can get some clarity for @senior.joinu and the wider ICP community.

-------------------------

jzxchiang | 2021-10-27 21:32:09 UTC | #27

I'm confused. IIUC, heartbeat was available prior to 0.8.3 but no longer available on 0.8.3.

So it sounds like it was already implemented before. Don't we just need to rollback the commit that removed it?

FWIW, heartbeat is super important for any cronjob canisters. Hopefully, it can be supported in Motoko as well.

-------------------------

diegop | 2021-10-27 22:08:16 UTC | #28

[quote="jzxchiang, post:27, topic:8033"]
Iâ€™m confused. IIUC, heartbeat was available prior to 0.8.3 but no longer available on 0.8.3.
[/quote]

To be honest, I am new to the history of heartbeat so I cannot speak intelligently on it yet. Hopefully, I will soon once i learn more.

-------------------------

akhilesh.singhania | 2021-10-28 08:14:01 UTC | #29

Hello all.  @diegop pinged me on this thread regarding the confusion around heartbeats.  The heartbeat functionality was implemented quite a while ago but initially was only enabled on the NNS subnet.  Then it was enabled on all subnets.  While all of this was done on the `ic` side, the various related repos (sdk and the spec) were not properly updated.  We are slowly getting around to updating all the relevant repos now.  

https://github.com/akhi3030/heartbeat-example contains a simple example on how to use the heartbeat functionality.  I've already given it to some external developers who have been able to use it successfully.  Note that it does not use `ic_cdk_macros` yet.  PRs are welcome if someone wants to update it.

Please let me know if you have any further troubles or if there is anything I can help with here.

-------------------------

jzxchiang | 2021-10-30 03:08:52 UTC | #31

Just to confirm,

1. This Rust code still works in 0.8.3.
2. This only works in Rust and not currently in Motoko.

Does that sound right?

-------------------------

akhilesh.singhania | 2021-11-01 07:37:37 UTC | #32

Thanks for testing!  Yes, this sounds correct.

-------------------------

nomeata | 2021-11-01 08:32:00 UTC | #34

[quote="ericswanson, post:24, topic:8033"]
The Canister Heartbeat was added to spec 0.18.2, though one cannot find that out by reading the linked public spec doc.
[/quote]

Yes, we can! By reading [the changelog](https://sdk.dfinity.org/docs/interface-spec/index.html#changelog)!

-------------------------

jzxchiang | 2021-12-23 09:31:55 UTC | #35

Random question, but can you explain what `dfx cache delete` and `dfx cache install` do?

If you delete the latest dfx version from the cache, how can you then install that same dfx version from the cache?

I don't quite understand the purpose of the cache. It seems like a version manager of some kind, but it also doesn't let the user select an older version of dfx to use (e.g. `dfx cache use` or something like that).

-------------------------

jzxchiang | 2021-12-28 21:33:08 UTC | #36

FWIW, I just upgraded from dfx 0.7.1 to 0.8.4, and update calls are now at least 4-5 times faster locally with `dfx start`.

I don't think the old `--no-artificial-delay` flag worked for me.... now the default works great (i.e. it's really fast).

-------------------------

ericswanson | 2022-01-04 18:49:10 UTC | #37

`dfx cache delete` deletes from ~/.cache/dfinity/versions/<version> corresponding to the version of dfx being executed.  `dfx cache install` conversely installs files from the executing dfx binary into that directory.

Installing dfx per the instructions at https://smartcontracts.org/ downloads the dfx binary to /usr/local/bin/dfx.  Once you run `dfx cache install`, or another command that installs the cache, you'll have that binary in two places: `/usr/local/bin/dfx`, and `~/.cache/dfinity/versions/<version>/dfx`.

The purpose of the cache is twofold.

First, it holds files such as `moc` and `replica`, where dfx can access them.  These are distributed within the dfx executable, but they take some time to unpack, and in the case of executables, of course they need to be on the filesystem.

Secondly, the cache holds other versions of dfx and its needed support files.  If `dfx.json` specifies something like `"dfx": "0.8.2"`, then if you run a different version of dfx, it will actually call the specified version.  The other way you can do this is by setting the DFX_VERSION environment variable, for example `DFX_VERSION=0.8.2 dfx start` will start the replica that shipped with dfx 0.8.2, if that version is installed in your cache.

-------------------------

jzxchiang | 2022-01-04 19:18:59 UTC | #38

These are the kind of answers I love to read. Thanks!

-------------------------

