roman-kashitsyn | 2022-04-26 21:29:46 UTC | #1

TL;DR [IC internals: orthogonal persistence](https://mmapped.blog/posts/06-ic-orthogonal-persistence.html)

Orthogonal persistence was the first feature I worked on at DFINITY. I still have warm feelings for that feature; I would love more people to understand it deeper. The article is not beginner-friendly; it targets experienced developers who want to dig deeper into the tech.

Would you like to see a similar technical article on some other aspect of the IC? Answer in a comment.

Big thanks to @ulan for reviewing the draft of the article.

-------------------------

Zane | 2022-04-26 22:04:12 UTC | #2

Very interesting read, would love to see more.

Do you already have an idea how big files will be stored? Will they always be loaded in memory?

-------------------------

roman-kashitsyn | 2022-04-26 22:22:34 UTC | #3

[quote="Zane, post:2, topic:12456"]
Do you already have an idea how big files will be stored? Will they always be loaded in memory?
[/quote]

I assume you mean checkpoint files. Checkpoint files are memory-mapped, which allows the kernel to be clever about loading pages into RAM. Only actively used pages need to occupy physical memory, and the kernel can always reclaim those pages because there is a copy on disk. This approach scales to terabyte-sized states.

-------------------------

JaMarco | 2022-04-27 06:23:11 UTC | #4

@roman-kashitsyn Fantastic blog. I especially enjoyed your post on replicated state machines. Do you still plan to do a post/posts on the topics of "how different subnets communicate with one another, how individual worker bees form the swarm"?

-------------------------

nomeata | 2022-04-28 19:29:24 UTC | #5

> as of April 2022, 95% of message executions change at most seven memory pages.

Uh, real numbers, exciting!

I wonder how many of them only have 7 non-static memory pages to begin with. But that’d be slightly harder to measure.

> Such memories open up attractive optimization opportunities, but we did not have enough pressure to implement them.

Sounds like you are sad that pressure wasn’t high ehough :-)

-------------------------

dymayday | 2022-04-29 16:14:21 UTC | #6

Thanks @roman-kashitsyn , always a pleasure to read your blog posts.

This one was super interesting as well, thanks for sharing, it is much appreciated !

> Andreas also proposed short-term memories with a lifetime of a single message execution. Such memories open up attractive optimization opportunities, but we did not have enough pressure to implement them.

Could you elaborate on this one please ? What kind of optimization you have in mind ? What kind of pressure would have been useful in this case ?

Cheers

-------------------------

roman-kashitsyn | 2022-04-30 08:17:18 UTC | #7

[quote="dymayday, post:6, topic:12456"]
What kind of optimization you have in mind ?
[/quote]

One of the benefits of short-term memory is that the runtime doesn't need to track dirty pages, so this memory might be measurably faster to use.
The Motoko runtime could use the short-term memory as [fast minor heap](https://dev.realworldocaml.org/garbage-collector.html#the-fast-minor-heap). Rust canisters could use it as a scratchpad with a fast bump memory allocator.

[quote="dymayday, post:6, topic:12456"]
What kind of pressure would have been useful in this case ?
[/quote]

If the Motoko team was struggling with improving their GC algorithm and short-term memories was the easiest way forward, we could have implemented this feature. Currently, there are plenty of other low-hanging fruit. 

[quote="nomeata, post:5, topic:12456"]
Sounds like you are sad that pressure wasn’t high ehough :slight_smile:
[/quote]
Yes, I like the idea a lot. However, it's definitely not the most important feature to work on right now.

-------------------------

jzxchiang | 2022-05-02 06:46:55 UTC | #8

Great article, thanks for sharing!

A very basic question: what happens if a replica crashes (or node goes down) in between checkpoints? If the in-memory running page deltas are lost, how does the replica recover the actor memory snapshot after it restarts?

-------------------------

roman-kashitsyn | 2022-05-02 08:09:16 UTC | #9

[quote="jzxchiang, post:8, topic:12456"]
A very basic question: what happens if a replica crashes (or node goes down) in between checkpoints? If the in-memory running page deltas are lost, how does the replica recover the actor memory snapshot after it restarts?
[/quote]

There are two recovery scenarios:
 
   * If the replica was out for a brief period of time, the faulty replica might be able to catch up by replaying recent blocks on top of a checkpoint. The execution is deterministic, so the replica should arrive at the same state.  Consensus keeps state machine checkpoints in sync with its block storage.
  * If the replica was out for a long period of time, it might need to fetch a new checkpoint from peers. [State transfer protocol](https://mmapped.blog/posts/02-ic-state-machine-replication.html#state-transfer) covers this scenario.

-------------------------

jzxchiang | 2022-05-03 01:25:06 UTC | #10

Nice! Another article to add to my IC reading list.

-------------------------

