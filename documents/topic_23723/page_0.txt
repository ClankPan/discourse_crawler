josephgranata | 2023-10-12 22:33:49 UTC | #1

Hello Fellow Developers,

We are building a Note application similar to Evernote, or OneNote but ours runs in your desktop computer with special features to leverage the IC.

There are two key features, and both need a canister that will hold user data, a small database for users: uploading data to the IC, and using ckBTC for selling notes or getting donations.

Our architecture is like this:
1- Client software written in Electron
2- IC Canisters in Motoko and Rust
3- Each User will Own their Own Canister for Storage

Now as you can guess #3 requires that we run a separate canister that holds a small database of our users with:
- Principal ID, email, name, StorageCanisterID, etc.

I am not an expert in either Motoko or Rust, it is all a learning experience. Do you know of any example code, or open source DAPP for the IC that implements a similar small database canister? If you do please share.

Any advice on the best way, or best tools to build this please let me know. We are considering the usual suspects: 
- Rust's IC Stable Structures, especially [BTreeMap](https://crates.io/crates/ic-stable-structures/0.6.0-beta.2) a project funded and used by DFINITY themselves.
- Motoko [HashMap](https://github.com/ZhenyaUsenko/motoko-hash-map) by @ZhenyaUsenko.
- Motoko StableBTree by @sardariuss which uses the new Motoko Region feature instead of ExperimentalStableMemory and was [recently funded](https://forum.dfinity.org/t/completed-icdevs-org-bounty-24-stablebtree-mokoko-up-to-10k/14867/33?u=josephgranata) and released in [GitHub](https://github.com/sardariuss/MotokoStableBTree).

But these are just building blocks, a small implementation would be far more useful to see how the pieces can actually be connected in a small simple database like structure.

Any advice and especially links to example code are welcome!

Joseph

-------------------------

Severin | 2023-10-13 06:59:52 UTC | #2

I think the [superheroes](https://github.com/dfinity/examples/blob/master/motoko/superheroes/src/superheroes/Main.mo#L29) example may be a good starting point. You can easily replace the fields with the ones you're using and swapping the data structure to the one that best fits your purposes shouldn't be hard either

-------------------------

josephgranata | 2023-10-13 17:46:25 UTC | #3

Thanks a lot @Severin I had not seen this example!

It uses a functional [Trie data structure](https://internetcomputer.org/docs/current/motoko/main/base/Trie) for a hash map, a novel way to do this data structure. Would this survive an upgrade? I suppose not.

Would you recommend upgrading the logic to use another data structure, like for example the Motoko [HashMap](https://github.com/ZhenyaUsenko/motoko-hash-map) by @ZhenyaUsenko which can survive an upgrade? Or do you think is better to just stick with it, and do the pre-upgrade, post-upgrade process?

Thanks, and have a great weekend!

P.S. Copying @claudio since he is the author of the code. Claudio any advice on using this as a basis of a little canister to save user state?

-------------------------

Severin | 2023-10-16 06:24:40 UTC | #4

Using a stable data structure (like the one you linked) is a good idea. Otherwise you get stuck at ~2GB of data

-------------------------

timo | 2023-10-19 13:25:16 UTC | #5

[quote="Severin, post:4, topic:23723, full:true"]
Using a stable data structure (like the one you linked) is a good idea. Otherwise you get stuck at ~2GB of data
[/quote]

"Stable data structure" as most people use the term just means that it can be declared stable so the Motoko compiler does the (de)serialization for you at upgrade time. The data structure still lives on the heap and is subject to a 4 GB limit (or 2GB, depending on the type of GC used). That is also the case for the datastructure that he linked. But probably not a problem because he said his database is small.

[quote="josephgranata, post:1, topic:23723"]
Now as you can guess #3 requires that we run a separate canister that holds a small database of our users with:

* Principal ID, email, name, StorageCanisterID, etc.
[/quote]

To be able to answer the original question, what are your search (lookup) keys? Is only one of the above the search key or do you need lookup for multiple of them?

-------------------------

timo | 2023-10-19 13:27:01 UTC | #6

Side question: Is the notes or user data in the canisters going to be encrypted?

-------------------------

josephgranata | 2023-10-19 16:49:16 UTC | #7

Timo,

The lookup key will be the email of the user, which will link to the rest of the data structure, most likely a Rust BTreeMap.

About your follow up question:

> Is the notes or user data in the canisters going to be encrypted?

The user notes are physically on his own laptop or desktop computer, however, if he wishes to share the note, or back it up on the IC, on a one by one basis he can do so by using the IC Storage option. Each user will own his own data canister.

In version 1 we are not using encryption, but in later upgrades we are considering using VetKeys: https://internetcomputer.org/blog/features/vetkey-primer.

This data canister we are asking about is to hold the information of the many customers, so we can display their data, and use their canisters to store their own data there.

-------------------------

