lastmjs | 2022-11-02 15:49:53 UTC | #1

I've been using `ic-cdk-optimizer` and am attempting to switch over to `ic-wasm`. These tools are essential for `Azle` and `Kybra`, the TypeScript and Python CDKs. One issue of complication that arises when developers try to use Azle and Kybra, is that each CDK must install `ic-cdk-optimizer` or `ic-wasm` for the developer, or expect them to install these tools. Requiring any kind of Rust tooling for TypeScript and Python devs is undesirable.

Basically, can we incorporate `ic-wasm` into the `dfx` build process somehow, especially so that developers don't have to independently install `ic-wasm`?

-------------------------

paulyoung | 2022-11-02 17:12:28 UTC | #2

https://forum.dfinity.org/t/new-place-for-dfx-feature-requests/16319?u=paulyoung

-------------------------

Severin | 2022-11-03 07:58:37 UTC | #3

Recorded feature request [here](https://github.com/dfinity/sdk/discussions/2734).

-------------------------

lwshang | 2022-11-03 13:53:17 UTC | #4

Since this [merged PR](https://github.com/dfinity/sdk/pull/2578), `dfx` default to run `ic-wasm shrink` pass  during canister build. No need to install `ic-wasm` binary.

This feather was included since `dfx v0.12.0-beta.3`.

-------------------------

lastmjs | 2022-11-03 16:47:53 UTC | #5

Does it do that with custom canisters?

-------------------------

lastmjs | 2022-11-03 16:48:46 UTC | #6

Looks like it does according to the PR comments. Unfortunately ic-wasm shrink does not shrink the binary as much as ic-cdk-optimizer...so still can't switch to ic-wasm

-------------------------

