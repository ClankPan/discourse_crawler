RMCS | 2023-10-30 08:58:54 UTC | #1

performance and cycle burning wise, would it matter much if you use structs to fetch and / or mutate data compared to having all the fields in separate memory allocations and combining them on-request? 

The dapp i'm working on required occasional changes to the "base entity (which is a struct at this moment)" but i don't like making every field that i add optional. 

I personally think it would require more calculations for retrieving data but less for mutating data?

**Struct**
```rs
struct Data {
   name: String;
   description: String;
   ...
}

pub static DATASETS: RefCell<StableBTreeMap<ID, Data, Memory>>;

fn get_entity(id: ID) -> Entity {
    let data = DATASETS.with(....);
    return data;
```

**Seperate fields**
```rs
pub static NAME: RefCell<StableBTreeMap<ID, String Memory>>;
pub static DESCRIPTION: RefCell<StableBTreeMap<ID, String Memory>>;
...

fn get_entity(id: ID) -> Entity {
    let name = NAME.with(....);
    let description = DESCRIPTION.with(....);

   let entity = Entity {
        name,
        description
   };
   return entity;
}
```

-------------------------

stefan-kaestle | 2023-10-30 16:03:31 UTC | #2

If you are using `name` and `description`  frequently together, I'd expect the former solution with structs to be better in terms of locality.

The second solution should require about twice as many memory accesses than the first one, as double the memory pages would likely have to be fetched from memory.

I also think it makes more sense from a readability point of view.

-------------------------

ielashi | 2023-10-30 16:09:24 UTC | #3

And to answer the question more broadly, you can use the [performance_counter](https://docs.rs/ic-cdk/latest/ic_cdk/api/fn.performance_counter.html) API, which when called will tell you how many instructions were executed from the beginning of the call to that point, so you can easily compare both approaches in your canister and see which one performs best.

-------------------------

RMCS | 2023-10-31 09:26:20 UTC | #4

Thanks for the responses, will check it out. What would be the go-to solution you recommend when handling changing base entities?

-------------------------

