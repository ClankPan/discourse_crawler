saikatdas0790 | 2023-01-11 06:44:03 UTC | #1

Can we update the ic-state-machine-tests library dependencies to ones that aren't outdated and don't have security vulnerabilities? Here a list:

![image|505x137](upload://yKaMsLRlvyLWgF0bPMbKQtuqETK.png)

![image|611x121](upload://z5xoFrkFIFBbwEbiMIj8szY6KUP.png)

![image|500x119](upload://nkbsvosz9uzPYuxNixAsvzngQ47.png)

![image|492x120](upload://Af9P4ph9LR7zODO8PVwlEjIRpCL.png)


They are flagged by cargo for every package/canister that gets built. 

They:
- fill up the entire terminal with long lines of dependency tree text that makes it infeasible to check out earlier terminal output
- are flagged by dependabot as security vulnerabilities in our Github repo
![image|690x236](upload://wCE5RI6Fvxaq2keK7vDsxv7LdeJ.png)
- overall a security vulnerability even though they are limited to testing environments only.

Thoughts?
@roman-kashitsyn 

P.S. I'm on a new-ish version of ic-state-machine-tests. Specifically from [this](https://github.com/dfinity/ic/commit/36f4a1c2903aed012b95b3b073e052c4036aef09) commit.

-------------------------

frederikrothenberger | 2023-01-11 15:01:07 UTC | #2

Hi @saikatdas0790 

I'm in the process of open sourcing a new library that can run the state-machine-test infrastructure as a pre-built binary.

Switching to that library will decouple your project from the IC repo completely, which will not only resolve the warnings but also speed up compile time a lot.

I'll report back once the library is available via crates.io.

-------------------------

frederikrothenberger | 2023-01-12 16:27:48 UTC | #3

Hi @saikatdas0790 

The library is now available on [crates.io](https://crates.io/crates/ic-test-state-machine-client). For inspiration on how to use it, you can take a look at the integration tests in the [Internet Identity repository](https://github.com/dfinity/internet-identity).

Be aware, that it takes a while for a new IC commit to have the pre-built binary available. So if it does not work for the latest commit on master, maybe try a few older commits.

Lastly, the client library is _incomplete_. I.e. it has not all the features of the test-state-machine yet, but the [client library repository](https://github.com/dfinity/test-state-machine-client) is open to contributions.

I hope this resolves your issues. Let me know if you run into problems.

-------------------------

saikatdas0790 | 2023-01-13 04:33:09 UTC | #4

Thank you so much for this. I'll give it a try.

Here's a friendly suggestion. It would be really helpful if we could list the missing features of the library compared to `ic-state-machine-tests` in the readme and mark them as done as more get implemented.

Otherwise, looks good. 

I'll come back with issues/feedback once I've tried it out on a large repo that uses `ic-state-machine-tests` right now. Give me a couple of days

-------------------------

Maxfinity | 2023-01-13 23:46:54 UTC | #5

Any plans to make the ic-state-machines-test work with http requests/ ecdsa signing? This would be very useful for many teams working in Rust.

-------------------------

frederikrothenberger | 2023-01-16 08:50:03 UTC | #6

Hi @Maxfinity 

Calling the `http_request` query on a canister is already supported. There are no plans to include an actual HTTP gateway to that infrastructure. If you require that, it would need to be added externally.

I'm not sure about ECDSA support. I'll ask internally.

-------------------------

saikatdas0790 | 2023-01-31 14:25:42 UTC | #7

Hi @frederikrothenberger, 

I've been working on migrating some of our tests over to this new binary and am stuck on this:

When provisioning a new canister, how does one specify the controllers of that canister? Specifically, I'm looking at [this function](https://docs.rs/ic-test-state-machine-client/1.0.0/ic_test_state_machine_client/struct.StateMachine.html#method.create_canister).

Earlier, I was using [these 2 functions](https://github.com/dfinity/ic/blob/123f4bd3c0b0070180500cddf4c60da07035de98/rs/state_machine_tests/src/lib.rs#L906-L935) to accomplish the same. They take an optional `setting` parameter which let us define the controllers.

Thoughts?

-------------------------

frederikrothenberger | 2023-02-01 09:01:02 UTC | #8

Hi @saikatdas0790 

You caught me being a bit lazy on the wrapper, sorry about that. There are two options here:

1.  Expand the wrapper (i.e. create a PR) to provide an easy to use function to pass in the `CanisterSettings` similar to [this function](https://github.com/dfinity/test-state-machine-client/blob/main/src/lib.rs#L142).
2. Manually issue a call to the `ManagementCanister`: I.e. you can send an `UpdateCall` to the `ManagementCanister` according to the interface spec [here](https://internetcomputer.org/docs/current/references/ic-interface-spec/#ic-candid). I.e. do this:
```
let CanisterIdRecord { canister_id } = call_candid(
            self,
            Principal::management_canister(),
            "create_canister",
            (CreateCanisterArgument { settings: None },),
        )
        .map(|(x,)| x)
        .unwrap();
```
in your test and modify the `settings` to your liking.

If you have the time to spare, I would appreciate the PR to make the wrapper more convenient. :wink:

-------------------------

frederikrothenberger | 2023-02-01 08:55:27 UTC | #9

Quick update on this matter:

>I’m not sure about ECDSA support. I’ll ask internally.

Both HTTP outcalls and ECDSA signing would be possible to support, however there is no urgent need internally, so the priority is rather low unfortunately.

-------------------------

saikatdas0790 | 2023-02-01 10:02:01 UTC | #10

Okay. I'll send you a PR :slight_smile:

-------------------------

saikatdas0790 | 2023-02-01 17:07:14 UTC | #11

Hi @frederikrothenberger,

I sent you a pull request [here](https://github.com/dfinity/test-state-machine-client/pull/4). Let me know if you have any feedback.

Otherwise feel free to merge and publish a new version. Thank you :slight_smile:

-------------------------

frederikrothenberger | 2023-02-03 11:20:07 UTC | #12

Hi @saikatdas0790 

Thanks for your contribution!

Version 1.1.0 of the [ic-test-state-machine-client crate](https://crates.io/crates/ic-test-state-machine-client) has been published.

-------------------------

saikatdas0790 | 2023-02-21 09:33:25 UTC | #13

Hi @frederikrothenberger 

I'm looking at the integration tests in the II canister here:
https://github.com/dfinity/internet-identity/blob/main/src/canister_tests/src/framework.rs#L125-L151

and they reference a binary that I'm not sure where to obtain from. Thoughts?

-------------------------

saikatdas0790 | 2023-02-24 03:13:47 UTC | #14

Hi @frederikrothenberger 

Any thoughts on the above?

-------------------------

frederikrothenberger | 2023-02-27 09:27:15 UTC | #15

Hi @saikatdas0790 

Are you talking about the `STATE_MACHINE_BINARY`? This is the file downloaded from `https://download.dfinity.systems/ic/$commit/binaries/$platform/ic-test-state-machine.gz` as later explained in the error message of this function 
(which is the same as mentioned in the Readme [here](https://github.com/dfinity/test-state-machine-client)).

-------------------------

saikatdas0790 | 2023-03-09 02:39:26 UTC | #17

Hi @frederikrothenberger 

I managed to get the binary from the URL as instructed. However, the binary runs into the following error when I try to execute it.

![image|690x79](upload://6YfPLIQDlOoMkzDKrhqGVz1qTkG.png)

I'm on Linux, btw

Thoughts?

Also, on a side note, is it not possible to ship the binary along with the library to crates.io to eliminate this confusing manual intermediate step?

-------------------------

saikatdas0790 | 2023-03-13 06:56:28 UTC | #18

Hi @frederikrothenberger 

Any updates on this? Is it possible to bundle the binary along with the Rust libary so that it just works? Let me know how to proceed.

Also, please provide inputs here if there's something that can help.
https://github.com/ninegua/ic-nix/issues/38

Thank you

-------------------------

frederikrothenberger | 2023-03-13 13:46:28 UTC | #19

Hi @saikatdas0790 

I'm really not sure, why this would not work for you. We have our CI running on Ubuntu, and it executes those exact commands. See here: https://github.com/dfinity/internet-identity/blob/main/.github/workflows/canister-tests.yml#L344

Could it be that you are running some other platform than `x86_64`?

As for bundling the binary into the lib: The binary is built from the IC repository using bazel, see here: https://github.com/dfinity/ic/blob/master/rs/state_machine_tests/BUILD.bazel#L77

Given that the whole point of the binary is to decouple the client lib from the IC repository (and the bazel build process), I'd rather not reintroduce the dependency. Also, cargo is not really suited to distribute prebuilt binaries.

If you could try building the binary yourself directly from the IC repo, maybe you can get a version that runs on your machine?

-------------------------

saikatdas0790 | 2023-03-13 14:08:27 UTC | #20

@PaulLiu Are there any specific steps I need to take or configure to make the binary work on NixOS?

Any inputs you have would be helpful

-------------------------

PaulLiu | 2023-03-13 23:12:27 UTC | #21

The binaries downloaded from https://download.dfinity.systems are dynamically linked, and they have hardcoded library paths that may not exist on NixOS. Usually this can be fixed either by using `patchelf` on the downloaded binary itself, or by setting LD_LIBRARY_PATH. See https://nixos.wiki/wiki/Packaging/Binaries for more explanation.

-------------------------

