2bonahill | 2023-02-16 08:39:15 UTC | #1

Hi there

I am looking for a good crate for RSA encryption and key derivation. Context: backend, Rust. 

Had a look at RSA, ring, etc.

I need a library able to derive keys based on a random seed (which can be obtained from the mgmt. canister), because random generators like rand do not work on the IC. 

Maybe there is a way to go like: 

seed -> pseudo random number generator -> rsa private key generation -> …

Any good hints?

-------------------------

cymqqqq | 2023-02-16 08:47:30 UTC | #2

Hi there

[quote="2bonahill, post:1, topic:18511"]
seed → pseudo random number generator → rsa private key generation → …
[/quote]
the way I had tried a couple of months ago, and it failed.
because the rust random library can not be compiled on IC.

-------------------------

2bonahill | 2023-02-16 09:00:20 UTC | #3

Exactly. that’s why i get the random seed from the mgmt canister. but still stuck on the way forward.

-------------------------

cymqqqq | 2023-02-16 09:28:12 UTC | #4

there is only one interface to get Vec<u8> random bytes in the mgmt.
Personally, I think it can do nothing.
And now I'm writing a random library based on rust that can be compiled on IC.

-------------------------

paulyoung | 2023-02-16 18:53:03 UTC | #5

At one point I was verifying [Http Method Signatures](https://httpsig.org/) in a canister and did some hoop-jumping to get `ring` working: https://github.com/betrusted-io/ring-xous/pull/2

I’m no longer using it, and people will need to make their own assessment on the security implications of doing so.

I went that route because `http-sig` depended on `ring`. I thought about trying to add support for [RustCrypto](https://github.com/RustCrypto) but I didn’t want to do anything that came close to rolling my own cryptography. In the end I think RustCrypto didn’t have an implementation of the necessary signature schemes anyway.

(FWIW the necessary changes the the `http-sig` crate can be found here: https://github.com/codebase-labs/http-signatures)

***

Since I had to introduce client-side code to sign HTTP messages, and there was a lot of overhead/risk on the canister side, I decided to do away with HTTP Message Signatures altogether and use the IC’s native authentication mechanism instead.

Instructions for key generation: https://github.com/codebase-labs/git-remote-icp#generating-a-publicprivate-key-pair

Code for identity: https://github.com/codebase-labs/git-remote-icp/blob/8d07a720fded4b7b7e6da7c9d43656c738f583cc/crates/git-remote-icp/src/main.rs#L43

Code for agent: https://github.com/codebase-labs/git-remote-icp/blob/8d07a720fded4b7b7e6da7c9d43656c738f583cc/crates/git-remote-icp/src/connect.rs#L52-L56

Code for public key verification: https://github.com/dfinity/agent-rs/issues/395

***

If all you need is a random number generator then you can do this: https://github.com/codebase-labs/ic-auth-tokens/blob/76113cbaa8b788b1989a9d5ef0868cdb12ee46af/crates/ic-auth-tokens/src/lib.rs#L77-L95

-------------------------

paulyoung | 2023-02-16 19:00:02 UTC | #6

Also, depending on your use case you might be able to use Threshold Key Derivation:

https://forum.dfinity.org/t/threshold-key-derivation-privacy-on-the-ic/16560?u=paulyoung

-------------------------

