kristofer | 2024-01-15 18:40:32 UTC | #1

I have created a simple canister for a demo app â€“ a companion app to the [ic-siwe](https://github.com/kristoferlund/ic-siwe) library.  All works well but query calls are kind of slow. I know update calls can take two or more seconds but so does my query calls. Is that expected? I am using stable memory.

Try for instance the [list_profiles()](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=jvkuy-nqaaa-aaaal-qdbpq-cai) call.

Here are snippets with relevant code:

```Rust
thread_local! {
    static MEMORY_MANAGER: RefCell<MemoryManager<DefaultMemoryImpl>> =
        RefCell::new(MemoryManager::init(DefaultMemoryImpl::default()));

    static USER_PROFILES: RefCell<StableBTreeMap<String, UserProfile, Memory>> = RefCell::new(
        StableBTreeMap::init(
            MEMORY_MANAGER.with(|m| m.borrow().get(MemoryId::new(0))),
        )
    );
}

#[query]
fn list_profiles() -> Result<Vec<(String, UserProfile)>, String> {
    let profiles = USER_PROFILES.with(|p| p.borrow().iter().collect::<Vec<_>>());
    Ok(profiles)
}
```

-------------------------

peterparker | 2024-01-15 18:53:24 UTC | #2

@ielashi knows best but, my understanding is indeed than stable memory is a bit slower than heap memory because every access requires deserializion respectively serializion - i.e. every read requires a deserialization and write a serialization of what's in/out the memory.

That said, if the sample of data is small and entities are not gigantic, I don't think it should make that a noticable difference.

Regarding your sample, I generally use [range](https://docs.rs/ic-stable-structures/0.6.1/ic_stable_structures/btreemap/struct.BTreeMap.html#method.range) instead of `iter` but I can in your example it does not make much a difference.

Stupid question but, you are also sure that you deployed with `query` right?

-------------------------

domwoe | 2024-01-15 19:32:37 UTC | #3

[quote="peterparker, post:2, topic:26716"]
Stupid question but, you are also sure that you deployed with `query` right?
[/quote]

I think that's indeed the issue. The function seems not to be annotated as a query otherwise Candid UI should render a `Query` button instead of a call `Call` button if I'm not mistaken.

-------------------------

kristofer | 2024-01-19 07:15:16 UTC | #4

[quote="peterparker, post:2, topic:26716"]
Stupid question but, you are also sure that you deployed with `query` right?
[/quote]

:person_facepalming: 

I moved a bit too fast and forgot marking the call as `query` in the did. Now the calls are much quicker. Thanks!

-------------------------

peterparker | 2024-01-15 19:55:28 UTC | #5

Been there, done that.

Cool to hear it works out!

-------------------------

