peterparker | 2023-12-14 06:43:55 UTC | #1

I was about to share that in Juno, I've noticed the maximal heap memory is roughly around 1GB; going beyond this leads to upgrade failures. I then started looking for references to the asset canister on the IC website, remembering it was 2GB, and was curious to know what I might have been doing wrong.

Surprisingly, I now see that the dfx asset canister also suggests not exceeding 1GB (source: [https://internetcomputer.org/docs/current/references/asset-canister](https://internetcomputer.org/docs/current/references/asset-canister)), so I no longer think I'm doing something wrong.

However, I'm curious about why this limitation was changed. Was it empirically observed, or found through testing, or else?

-------------------------

Severin | 2023-12-14 08:02:52 UTC | #2

We can come up with scenarios where you run into problems with 2GB, so we recommend 1GB just to be very cautious. I personally think going up to ~1.5GB should be safe, but we didn't run any precise tests.

Hopefully we'll soon get to writing a stable memory implementation. Then you should be able to go into the tens of GBs

-------------------------

peterparker | 2023-12-14 08:30:03 UTC | #3

[quote="Severin, post:2, topic:25532"]
I personally think going up to ~1.5GB should be safe
[/quote]

I would be really curious to hear if anyone ever pushed to ~1.5GB because practically now two devs had trouble upgrading Juno's satellite with 1+ GB, therefore this thread and me being curious about my own implementation because I don't seem to do anything particular in my pre/post_upgrades ([source](https://github.com/junobuild/juno/blob/837d67aac28d9d6fe3135c030efaacb7a85a253f/src/satellite/src/lib.rs#L94)) :thinking:.

Thanks for the answer. If you ever do an experiment please let me know!!!

[quote="Severin, post:2, topic:25532"]
Hopefully weâ€™ll soon get to writing a stable memory implementation
[/quote]

I actually on purpose decided to stick to heap to deliver the dapps' assets on the web when I introduced stable memory in Juno. Speed is the top priority on the web, and there might be potential cost overhead when query calls are no longer free. This is just a thought I wanted to share.

-------------------------

NathanosDev | 2023-12-14 09:24:56 UTC | #4

Did you happen to do any experiments comparing the response time between heap and stable? Or just stuck with the obviously faster option?

-------------------------

peterparker | 2023-12-14 10:40:30 UTC | #5

There are so many things I'd like to do, and metrics are definitely one area where I haven't invested enough time. I've mostly stuck to the heap option based on empirical evidence.

-------------------------

NathanosDev | 2023-12-14 13:34:48 UTC | #6

That's completely fair since it's safe to say that heap is faster. I'm curious how big the difference is though, so hopefully I can get around to doing that myself sooner than later :slight_smile:

-------------------------

