kpeacock | 2023-03-17 17:57:41 UTC | #1

Discussion is taking place here: https://github.com/dfinity/agent-js/discussions/700

## Overview: 

With a large set of changes to Agent-JS on [this branch](https://github.com/dfinity/agent-js/tree/kyle/types-library), it includes an overhaul to the codebase that enables properly generating ECMAScript Modules for the first time.

As it stands, attempting to generate both ESM and CJS fails to account for some configurations. CJS may work normally for some node versions, but not with TypeScript. I also have noticed that types can get confused between CJS and ESM when CJS is not the default module type. Given this complexity, and that these changes will be breaking anyway, should we deprecate CommonJS?

Some consequences of this in your projects may be:

* shifting to `"type": "module"` in `package.json` if you aren't already using it
* changing your imports from `import {HttpAgent} from '@dfinity/agent'` to `const {HttpAgent} = await import('@dfinity/agent')`
* Support for using the packages via CDN like unpkg

-------------------------

cryptoschindler | 2023-03-25 09:09:21 UTC | #2

[quote="kpeacock, post:1, topic:18989"]
changing your imports from `import {HttpAgent} from '@dfinity/agent'` to `const {HttpAgent} = await import('@dfinity/agent')`
[/quote]

Why do we need to use dynamic imports with this change?

-------------------------

kpeacock | 2023-03-29 17:58:33 UTC | #3

Some bundlers / import systems call for the distinction if the rest of your app is built as a commonjs app.

Mainly the TypeScript compiler - I encountered this in the demo app when testing building the `agent-js` packages as ESM

-------------------------

