peterparker | 2023-04-01 12:10:03 UTC | #1

In JavaScript / on the web I can batch promises.

```javascript
await Promise.all([call1(), call2(), call3()]);
```

Is there something equivalent in Rust and on the IC to perform multiple `call` in parallel?

I would like to query the status of multiple canisters not in a row but, in a single batch.

```
// Something like
let promises = Vec::from([canister_status({CanisterIdRecord { canister_id_1}), canister_status({CanisterIdRecord { canister_id_2})]);
call(promises).await;
```

-------------------------

peterparker | 2023-04-01 12:24:59 UTC | #2

RTFM David, Rust noob question ðŸ˜….

Kind of:

`join` === `Promise.allSettled`
`try_join` === `Promise.all`

```rust
use futures::join;
use ic_cdk::api::management_canister::main::{
    canister_status, CanisterIdRecord, CanisterStatusResponse,
};
use ic_cdk::export::candid::{candid_method, export_service};
use ic_cdk::{id};

#[candid_method(update)]
#[ic_cdk_macros::update]
async fn hello() {
    join!(status(), status(), status());
}

async fn status() -> Result<CanisterStatusResponse, String> {
    let status = canister_status(CanisterIdRecord { canister_id: id() }).await;

    match status {
        Ok((status,)) => Ok(status),
        Err((_, message)) => Err(["Cannot get canister status: ".to_string(), message].join("")),
    }
}
```

https://rust-lang.github.io/async-book/06_multiple_futures/02_join.html

-------------------------

skilesare | 2023-04-01 18:34:54 UTC | #3

It does seem like you might need some kind of IC specific implementation here. I run into issues where if I don't know wait after so many futures in motoko that I run out of the cycle limit. Usually I batch them in groups of nine. I don't do much rust, so I'm not sure how that works there, but I would imagine that you'd run into a similar situation if you don't actually await, and you overrun a certain cycle threshold.

-------------------------

peterparker | 2023-04-01 19:25:02 UTC | #4

Good input, thanks for the share! Indeed probably same limitation, `join_all` takes a vector as parameter so I'll try to batch them too.

-------------------------

levi | 2023-04-02 00:23:05 UTC | #5

I find this thread helpful https://forum.dfinity.org/t/can-i-run-multiple-inter-canister-update-calls-in-parallel/13115/2?u=levi.

-------------------------

