josephgranata | 2023-08-25 18:20:30 UTC | #1

We are currently working on simulating a directory structure, with directories, file metadata, and content inside of them.

We started working with Motoko Hashmaps, and we have done some progress but I would really like to avoid the pre-upgrade and post-upgrade calls.

Could anyone share some working code of Rust Stable Structures, it would help us understand them better. Thanks!

P.S. This is the link to the IC's Stable Structures in Rust:
https://github.com/dfinity/stable-structures

-------------------------

peterparker | 2023-08-25 20:14:13 UTC | #2

Do you mean other examples than those already provided in the stable-structures repo?

[https://github.com/dfinity/stable-structures#more-examples](https://github.com/dfinity/stable-structures#more-examples)

[https://github.com/dfinity/stable-structures/tree/main/examples/src](https://github.com/dfinity/stable-structures/tree/main/examples/src)

-------------------------

josephgranata | 2023-08-26 17:10:31 UTC | #3

Indeed David, those examples are just a template, and a very small example.

Not a real small app of any kind, like for a example a TODO app or a small recipe app, something that actually would benefit from the stable data structures and has now the advantage of not needing the pre-upgrade and post-upgrade calls for data persistence.

-------------------------

peterparker | 2023-08-26 17:46:51 UTC | #4

In that case you for example, maybe, have a look to [Internet Identity](https://github.com/dfinity/internet-identity/) and the [Bitcoin canisters](https://github.com/dfinity/ic/tree/master/rs/bitcoin) repo. They both use the stable structures. Hope that helps.

-------------------------

josephgranata | 2023-08-26 18:10:16 UTC | #5

Yes, that will help David, much appreciated.

-------------------------

cryptoschindler | 2023-09-26 17:42:41 UTC | #6

There are also stable (in terms of using stable memory directly) [BTrees in Motoko](https://github.com/sardariuss/MotokoStableBTree). Not sure though you well tested/maintained this library is @sardariuss

-------------------------

sardariuss | 2023-09-26 18:22:46 UTC | #7

The library is currently getting a small rework, I will update soon the [post](https://forum.dfinity.org/t/completed-icdevs-org-bounty-24-stablebtree-mokoko-up-to-10k/14867) about it.

-------------------------

lastmjs | 2023-10-05 02:50:01 UTC | #8

Also you might want to consider using the ic-wasi-polyfill and compiling to wasm32-wasi, if I'm not mistaken you get a file-system for free, either in memory or stable.

I wouldn't consider implementing one from scratch.

-------------------------

josephgranata | 2023-10-04 23:53:13 UTC | #9

Jordan,

That is a mouth full of information, is there anywhere that I can research this topic? No idea now how to do the steps you mentioned.

Thanks!

-------------------------

lastmjs | 2023-10-05 02:51:14 UTC | #10

Implement Wasi: https://forum.dfinity.org/t/introducing-wasi-for-ic/18583

-------------------------

lastmjs | 2023-10-05 02:52:01 UTC | #11

Then you should just have a file system, no need to implement one. It can be in memory on the heap or in stable memory

-------------------------

josephgranata | 2023-10-06 22:09:20 UTC | #12

Thanks Jordan I will read the forum post.

-------------------------

