ueyamamasashi | 2021-08-15 01:08:10 UTC | #1

I'm afraid this is a newbie question, but please let me know.
How can I write the code to use "cowsay canister" in my project file for "Candid UI" ?
I've tried everything, but it doesn't work. If you could write a sample, it would be helpful.Thank you!

![スクリーンショット 2021-08-15 10.02.28|690x299](upload://jgInnL19wnkwwhW70mzwjJ0olHa.png)

-------------------------

Ori | 2021-08-15 02:19:06 UTC | #2

: D  Great to see the cow’s getting out and about!

You’ll want to follow this syntax for calling to external canisters at the moment: https://forum.dfinity.org/t/calling-another-canisters-methods/473/2?u=ori

Where you define the canister as an actor with a matching signature to the canister you’re calling (or subtype of). You can find the signature on its listing: [https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/cowsay-10237/7igbu-3qaaa-aaaaa-qaapq-cai](https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/cowsay-10237/7igbu-3qaaa-aaaaa-qaapq-cai)

So for cowsay you can build the call as follows:


```
actor {
    public func main() : async Text {
        let cowsay = actor(“7igbu-3qaaa-aaaaa-qaapq-cai”): actor { cowsay: (Text) -> async Text };
        return await cowsay.cowsay(“hello”);
    };
};
```

And a Motoko playground example is here for you:
[https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1759972232](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1759972232)

-------------------------

nomeata | 2021-08-15 10:21:12 UTC | #3

The vision was always that you could just write
```
import CowSay "ic:7igbu-3qaaa-aaaaa-qaapq-cai";
```
in your Motoko file, and the development tools would do the rest for you (in particular, fetch that canister’s Candid file to find out the type of `CowSay`), but this feature never had highest priority, would have required cross-component coordination (`moc` and `dfx`, maybe replica) and there were opiniated differences on how to best do that under the hood, so it never happened. But the work-around pointed out by Ori is good enough™ for many cases.

(In fact, the Motoko compiler in `moc` already implements all that’s needed, [as specified here](https://github.com/dfinity/motoko/blob/master/design/DFX-Interface.md#resolving-canister-types). So the Motoko playground and/or dfx could add that feature on their side, and it would “just work”.)

-------------------------

ueyamamasashi | 2021-08-15 10:57:01 UTC | #4

Thank you, Ori.
I didn't know it was already up. I should have done a little more searching. It worked.

-------------------------

ueyamamasashi | 2021-08-15 11:01:23 UTC | #5

I see, it doesn't work with javascript templates for importing. Thanks a lot.

-------------------------

Dustin | 2022-01-10 17:19:13 UTC | #7

Is it possible to call a public canister from within the local environment? When I try the example above and run the canister locally, I get the error "Canister 7igbu-3qaaa-aaaaa-qaapq-cai does not exist". I assume that this is because I'm running on localhost and not on IC?

-------------------------

Ori | 2022-01-13 14:27:40 UTC | #8

Not at the moment, see here:
https://forum.dfinity.org/t/how-to-import-an-ic-deployed-canister-in-my-project-so-it-works-with-local-deployment/9875/2?u=ori

-------------------------

