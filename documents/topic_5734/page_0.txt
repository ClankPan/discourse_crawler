foolingdutchman | 2021-07-06 09:45:27 UTC | #1

In case to build a custom dapp, we may need to upload lot of  resources like images, gifs, videos, etc.

what is the best way to manage it for a business scale useage?

-------------------------

HelloRickey | 2021-07-08 02:02:23 UTC | #2

Upload them on IPFS, and then save the CID in canister.

-------------------------

paulyoung | 2021-07-08 03:59:38 UTC | #3

@Hazel has something that works directly on the IC: https://xe5ii-jiaaa-aaaaf-qaaya-cai.raw.ic0.app/

-------------------------

paulyoung | 2021-07-13 03:58:35 UTC | #4

To clarify; I’m not suggesting you depend on that, I just wanted to demonstrate that it’s possible.

-------------------------

stephenandrews | 2021-07-08 04:39:27 UTC | #5

This imo presents a solid use case for badlands - as computational and storage costs will be relatively more affordable it could be used to host data like images etc. Using a hashing method in JS this could be setup to ensure images being server are correct. Utilise the IC for more secure computation (token logic, immutable data storage etc) and badlands for images, files and non-important data.

-------------------------

rbolog | 2021-07-08 16:17:54 UTC | #6

According the maturity of your development, BigMap could be an option see also [CanCan](https://github.com/dfinity/cancan) application.  

https://forum.dfinity.org/t/is-bigmap-out-just-yet/1232

-------------------------

foolingdutchman | 2021-07-13 03:57:54 UTC | #7

This is a nice one~! :grinning: :grinning: :grinning:

-------------------------

jzxchiang | 2021-08-27 22:37:52 UTC | #8

To follow up on this, is the recommended approach of storing dynamic, user-generated images to use the asset canister or to roll out your own chunking + canister storage solution à la CanCan?

One great thing about the asset canister is apparently it isn't [restrained](https://forum.dfinity.org/t/preview-improved-asset-canisters/2387) by the 2 MB message limit that regular canister calls are limited by.

But is it possible to upload assets to the asset canister during runtime?

-------------------------

kpeacock | 2021-08-27 22:41:36 UTC | #9

It is restrained by the 2mb limit, but we abstract it by using chunking. You can make calls to it using an agent; I've done some early experiments in the browser and found it pretty simple

-------------------------

jzxchiang | 2021-08-27 22:43:51 UTC | #10

[quote="kpeacock, post:9, topic:5734, full:true"]
It is restrained by the 2mb limit, but we abstract it by using chunking. You can make calls to it using an agent; I've done some early experiments in the browser and found it pretty simple
[/quote]

Hmm, if it's restrained by the 2 MB limit, then doesn't the chunking need to be done client-side? How does the asset canister's chunking help in that case?

-------------------------

kpeacock | 2021-08-27 22:48:52 UTC | #11

The canister knows how to receive chunked assets and assemble them in the canister, so it's just a matter of managing it in the frontend. 

Not a high priority for me, but if I get time down the road I'll create a npm package to make it easier

-------------------------

jzxchiang | 2021-08-27 23:30:00 UTC | #12

Sorry, I'm not quite sure I understand. When you say that the 2MB limit was removed, was that only if you used DFX to upload assets to an asset canister? If I'm uploading assets dynamically at runtime, then I would need to implement chunking myself, right?

By the way, is the 2MB limit only for requests or also for responses? I'm hoping it's fine to fetch an asset (from the asset canister) that is larger than 2MB.

-------------------------

skilesare | 2021-08-28 21:58:21 UTC | #13

It is for responses as well(also inter canister calls). There is the http streaming api if you can figure it out.

-------------------------

jzxchiang | 2021-08-29 06:12:01 UTC | #14

[quote="skilesare, post:13, topic:5734, full:true"]
It is for responses as well(also inter canister calls). There is the http streaming api if you can figure it out.
[/quote]


Gotcha, that's what I figured.

I [wrote up](https://forum.dfinity.org/t/clearing-up-confusion-over-dynamically-storing-serving-large-assets/6764) what I found looking into the different solutions for storing/serving large assets. Seems like implementing my own `http_request` canister with streaming enabled (similar but not identical to the asset canister) is the way to go.

-------------------------

kpeacock | 2021-08-29 14:36:53 UTC | #15

You're also welcome to implement streaming on the main asset canister, now that it's open source!

-------------------------

jzxchiang | 2021-08-29 17:05:23 UTC | #16

[quote="kpeacock, post:15, topic:5734, full:true"]
You're also welcome to implement streaming on the main asset canister, now that it's open source!
[/quote]

I think it already [supports](https://github.com/dfinity/certified-assets/blob/b06c8a7a53fdb214596ba12cd10be8508b6f2192/src/lib.rs#L683) streaming out of the box?

-------------------------

pattad | 2022-05-16 16:09:36 UTC | #17

have a look at this example... https://github.com/pattad/imgTank

-------------------------

