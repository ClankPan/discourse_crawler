ClankPan | 2022-01-02 04:49:09 UTC | #1

Happy new year, Guys.

I ‘d like to discuss about StableHashMap that simplify upgrade steps.

When we use HashMap lib in Motoko, we have to implement these code. Because class variables can not be stable. 

```
    var hp = HashMap.HashMap<Text, Nat>(1, Text.equal, Text.hash);
    stable var entries : [(Text, Nat)] = [];

    system func preupgrade() {
        entries := Iter.toArray(hp.entries());
    };

    system func postupgrade() {
        hp := HashMap.fromIter<Text, Nat>(entries.vals(), 1, Text.equal, Text.hash);
        entries := [];
    };
```

This way is difficult to understand and tend to make mistakes.

So, I thought much simpler way to upgrade HashMap.

```
    var hp = HashMap.HashMap<Text, Nat>(1, Text.equal, Text.hash);
    stable var stableVars = hp.exportVars();

    system func preupgrade() {
        stableVars := hp.exportVars();
    };
    system func postupgrade() {
        hp := HashMap.HashMap<Text, Nat>(1, Text.equal, Text.hash);
        hp.importVars(stableVars);
    };
```
\
This is implemented by passing the address of table variable inside HashMap class object to the stable variable in main.

If it is possible to share stable name space, we don’t need upgrade methods anymore.
But now, stable variables are bound in compiler, not address. So they can't pass stable as an argument either.

By changing Motoko's syntax and allowing stable var namespaces to be shared, we will be released from the hassle of the upgrade method.

Here is a proof of concept.
[// GitHub URL](https://github.com/ClankPan/StableHashMap/blob/master/src/StableHashMap/main.mo)

Thanks.

-------------------------

blabagastered | 2023-01-18 01:41:58 UTC | #2

I'm using this in my repo. Thank you. Do you still see this as a good approach?

-------------------------

skilesare | 2023-01-18 11:41:56 UTC | #3

Just use https://github.com/ZhenyaUsenko/motoko-hash-map and you'll get 4-11x performance and a stable structure with no need to upgrade.

We've been using https://github.com/ZhenyaUsenko/motoko-migrations as an upgrade pattern and it is working well.

-------------------------

blabagastered | 2023-01-18 13:37:00 UTC | #4

[quote="skilesare, post:3, topic:10040, full:true"]
Just use [GitHub - ZhenyaUsenko/motoko-hash-map: Stable hash maps for Motoko](https://github.com/ZhenyaUsenko/motoko-hash-map) and you’ll get 4-11x performance and a stable structure with no need to upgrade.

We’ve been using [GitHub - ZhenyaUsenko/motoko-migrations: Sample project structure to implement migrations in motoko](https://github.com/ZhenyaUsenko/motoko-migrations) as an upgrade pattern and it is working well.
[/quote]

Thanks. To be clear: those are two separate ways of doing it, right? If I use the first repo I don't need to look into the second one, correct?

-------------------------

skilesare | 2023-01-18 13:49:04 UTC | #5

No. You would use them in conjunction.  You don't need migrations, but if you ever change something in your hashmap, you need to upgrade all your objects to the new types, and migrations gives you a pattern to do that with.

-------------------------

blabagastered | 2023-01-18 15:34:38 UTC | #6

Perfect. So, as long as the *types* the hashmap stores don't change, I don't need to worry about migrations, not even through updates. Correct?

Actually I'm getting errors trying to use that repo:
![image|690x105](upload://9uRS6OcylHzrjJddMTaGUI1CNh2.png)

Not sure if it's due to the way I imported it:


```
// From https://github.com/ZhenyaUsenko/motoko-hash-map/tree/master/src/Map
import Map "Map/optimized";
```

Also tried


```
// From https://github.com/ZhenyaUsenko/motoko-hash-map
import Map "motoko-hash-map/src/Map/Map";
```
with no errors at import but the same errors as above on use.


How do I integrate it to the project so that 

`import Map "mo:hashmap/Map";` 

works?

-------------------------

rncrmn | 2023-02-02 15:29:15 UTC | #7

Did you able to make it work the **import Map "mo:hashmap/Map";**? if yes, how did you do it?

-------------------------

blabagastered | 2023-02-02 15:43:02 UTC | #8

Yes, I did 

`import Map "motoko-hash-map/src/Map/Map"; // From https://github.com/ZhenyaUsenko/motoko-hash-map`

and just placed the complete directory there. 

There's probably a better way though, using vessel I think, but I'm using mops and they're mutually incompatible.

-------------------------

skilesare | 2023-02-02 15:51:42 UTC | #9

@ZhenyaUsenko Maybe we should add mops support to this library?

-------------------------

rncrmn | 2023-02-02 23:57:45 UTC | #10

Thank you @blabagastered

-------------------------

rncrmn | 2023-02-03 00:00:43 UTC | #11

[quote="skilesare, post:9, topic:10040, full:true"]
@ZhenyaUsenko Maybe we should add mops support to this library?
[/quote]

I second that, please.

-------------------------

ZenVoich | 2023-02-03 07:44:14 UTC | #12

Actually with mops you can install packages from GitHub too https://forum.dfinity.org/t/how-do-i-enable-install-moc/18005/8?u=zenvoich
But would love to see it published to mops)

-------------------------

AlexandruFilipescu | 2023-02-05 12:10:55 UTC | #13

Hello, I just installed the stable hashMap library, in order to use it we just define the let like this:

```
let map1 = Map.new<Nat, Message>();
```
Don't we need to use the stable keyword in front? Thank you guys!

Also is it possible to use this type for a key without receiving the error "shared function has non-shared parameter type"

```C#
 type ChatRoom = {
    id: Nat;
    creator: Text;
    messages: Map.Map<Text, Message>;  //Here! is this possible?
  };

```

I am using a normal HashMap to store "ChatRooms" and each chatroom has its messages. I am having trouble to loop and delete from the Array of messages that every ChatRoom has, which would be the best data structure? Thank you!
```
 type ChatRoom = {
    id: Nat;
    creator: Text;
    messages: [Message];
  };

  type Message = {
    id: Nat;
    sender: Text;
    timestamp: Time.Time;
    text: Text;
  };
```

-------------------------

AlexandruFilipescu | 2023-02-05 12:50:04 UTC | #14

*Edit
I started using .filterEntries()

```
bufferedMessages.filterEntries(
      func(_, x) = x.id != messageId
    );
```
Even though I am not sure what is the role of the first parameter in the func, the underscore.

-------------------------

icaten | 2023-02-17 22:48:51 UTC | #15

Designates wildcard pattern so that argument will match any type.

-------------------------

augchan42 | 2024-01-06 14:29:26 UTC | #16

Did you ever get an answer to your question about stable keyword?  I'm thinking of using this but have some doubt on whether it will behave properly when the map is initialized with Map.new() (whether existing values are preserved on upgrade)

-------------------------

