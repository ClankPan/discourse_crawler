b3hr4d | 2024-05-15 17:53:34 UTC | #1

## Project Highlights

B3Forge is designed to centralize principles and standardize the interfaces for the essential parts of decentralized applications (dApps) that interact with digital assets and need to be trusted by users. It provides a set of tools and APIs that developers can use to create reliable and user-friendly applications for their own interfaces, while also making these applications available in the app store. This ensures that users can manage and transfer their assets seamlessly, even if problems arise.

https://youtu.be/WUTsaSU35Z4
Developers can use B3Forge to create customizable user interfaces for decentralized applications. Users can further tailor these interfaces based on their specific needs. For example, a user can customize the interface to manage only ICP and Bitcoin tokens without any additional functionalities. This flexibility allows users to design and implement interfaces that are perfectly suited to their unique use cases.

## Web3 Advantages

Unlike traditional Web2 projects, which rely on centralized servers, B3Forge operates on decentralized networks. This means there is no single point of failure, enhancing security and reliability. Web3 projects give users more control over their data and assets. In B3Forge, users have full ownership and control over their interfaces and canisters, ensuring they are not dependent on a central authority.

B3Forge can seamlessly integrate with other dApps on the Internet Computer, allowing for greater flexibility and functionality. The open nature of blockchain technology ensures transparency. All transactions and interactions in B3Forge are transparent and can be audited, which builds trust among users. Additionally, Web3 projects often use tokens to incentivize users and developers. B3Forge could potentially integrate with token-based incentive models to reward users for their participation and contributions.


## How Is It Built?

### Technical Overview
B3Forge is built using JavaScript, leveraging the Candid interface provided by DFINITY. We created custom wrappers around the Candid visitor, which is available in the DFINITY [repository](https://github.com/dfinity/candid), to enhance functionality and streamline the integration process. Each app's data is stored securely on the Internet Computer, ensuring decentralized and reliable data storage. The backend, written in Rust, acts like an app store where interfaces created by users are stored based on their canister ID.

- **Languages:** JavaScript & Rust
- **Frameworks:** React for frontend development
- **Libraries:** [ic-reactor](https://github.com/B3Pay/ic-reactor), a set of packages we developed that wrap around [agent-js](https://github.com/dfinity/agent-js/), and custom wrappers around the [Candid](https://github.com/dfinity/candid) visitor from DFINITY
- **3rd Party Services:** Integrated with Internet Identity for user authentication

### Design Decisions
Key design decisions include using the Candid interface to compile the necessary data needed from generating the form to displaying the response in a customizable way. Additionally, we utilize a super-efficient storing approach that compresses a huge amount of customization into a single 32-byte chunk of data on the blockchain. This makes each app super small and storable safely without concerns about scalability. These choices ensure that B3Forge remains user-friendly and accessible to developers of varying experience levels.

## Internet Computer Superpowers

B3Forge utilizes several unique features of the Internet Computer, such as:

- **Seamless Canister Integration:** Using Candid to enable smooth and efficient communication with canisters.
- **Internet Identity:** Ensuring secure and decentralized user authentication without relying on centralized systems.
- **Scalability:** Leveraging the Internet Computer's scalability to handle growing user demands without compromising performance.

These features enhance the project's capabilities, making it a robust and reliable tool for decentralized application development.

## Go-To-Market Strategy

To attract users, we plan to engage with developer communities on platforms like the DFINITY forum, Twitter, and GitHub. We will share tutorials, conduct webinars, and participate in hackathons to demonstrate the capabilities of B3Forge. Partnerships with influential blockchain projects and thought leaders will also play a crucial role in our strategy. Additionally, we plan to implement the same functionality for Ethereum contracts, allowing users to add functions directly from Ethereum contract addresses and gain the same functionality. This integration will potentially attract a huge number of users to the Internet Computer (ICP).

## Monetization

While B3Forge is currently focused on user adoption and feedback, future monetization strategies may include offering premium features, subscription plans, and providing customized solutions for enterprise clients. Decentralizing governance through an SNS (Service Nervous System) launch is also being considered to ensure community-driven growth and sustainability.

## Status of the Project

We have successfully developed and tested the core functionalities of B3Forge. Our initial testing phase involved creating a simple ICRC token app, and the feedback has been promising. We are now inviting developers to engage with the tool, test it, and provide feedback on the DFINITY forum.

## Future Plans
Our next steps include integrating more advanced customization options, enhancing the drag-and-drop functionality, and expanding the range of supported canister interactions. We also plan to attend major blockchain conferences and apply for grants to further develop and promote B3Forge.

---

We invite all developers to join us on this journey, test our tools, and provide valuable feedback. Together, let's revolutionize decentralized application development with [B3Forge](https://forge.b3pay.net).

-------------------------

skilesare | 2024-05-16 03:32:48 UTC | #2

This looks great! Can I log in with browser wallets as well?

I see some ICDV in there!

-------------------------

b3hr4d | 2024-05-16 08:13:04 UTC | #3

Not yet, but I’ll add Ethereum login soon. 
ICDV is the main example in the demo because of the standard it supports 😉.

-------------------------

skilesare | 2024-05-16 12:27:10 UTC | #4

If you want to be a customer service hero, if you could emulate something like in this pull request it would be very helpful for teams that need to help users call functions outside of their dapp workflow:

https://github.com/ENJATZ/customer-service-dapp

It is a bit subtle, but if you hit the following URL you'll notice that the items get filled in for you.

 https://u4mx2-ziaaa-aaaap-qbgva-cai.icp0.io/canister?canisterId=jwcfb-hyaaa-aaaaj-aac4q-cai&defaultValues=%257B%2522method%2522%253A%2522icrc1_balance_of%2522%252C%2522args%2522%253A%255B%257B%2522owner%2522%253A%2522s6bzd-46mcd-mlbx5-cq2jv-m2mhx-nhj6y-erh6g-y73vq-fnfe6-zax3q-mqe%2522%252C%2522subaccount%2522%253A%255B%255D%257D%255D%257D. 

So a customer service agent can go to https://u4mx2-ziaaa-aaaap-qbgva-cai.icp0.io/, fill in the canister id, and then as they fill it in the URL changes...you can grab that URL and send it to someone to have all the items filled in...they they just need to connect with plug/wallet/II and they can call the function.

With II it is especially helpful because you can host it as a page on your domain at a customer service URL and get the user to have the same principle as using the dapp.

If you add something like an ICConnect(which I think ICReactor gets you most of the way there) that lets you use all wallets you're going to be pretty close to in a position to replace icscan as the defacto "Let me mess around with this canister" platform.  The IC dashboard is pretty good, but I don't expect them to let us log in with third party wallets any time soon.

-------------------------

skilesare | 2024-05-16 12:30:23 UTC | #5

Also...being able to copy results as candid and json is a huge bonus. (actually copying the inputs as candid or json can be huge as well because often you want to grab that and plug it into dfx.)

The other pain point I've had with these tools is treating nat8 arrays as blobs and making it super easy to load in blobs/nat8 arrays(arrays in general are tough UX problems).

-------------------------

b3hr4d | 2024-05-16 12:57:13 UTC | #6

Thank you very much for the suggestion and for engaging with B3Forge.

[quote="skilesare, post:4, topic:30821"]
customer service agent can go to https://u4mx2-ziaaa-aaaap-qbgva-cai.icp0.io/, fill in the canister id, and then as they fill it in the URL changes.
[/quote]

Actually, my next milestone for the B3Forge project includes implementing a similar feature. With this feature, you will be able to modify a function with defaultValues for each argument so that query calls can be executed automatically. Update calls will only need to be confirmed by the user. Once configured, you can share the function URL with others, and the arguments will be pre-filled with the values set by the developer by default. This will enhance the ease of use and streamline the process for customer service and end-users alike.

[quote="skilesare, post:5, topic:30821"]
Also…being able to copy results as candid and json is a huge bonus. (actually copying the inputs as candid or json can be huge as well because often you want to grab that and plug it into dfx.)
[/quote]
Copying results as Candid and JSON is an easy task for the B3Forge project, and I will definitely implement this feature. Additionally, I plan to provide users with function snippets or code that can be easily copied and pasted into their websites, with CSS customization options available.

[quote="skilesare, post:5, topic:30821"]
The other pain point I’ve had with these tools is treating nat8 arrays as blobs and making it super easy to load in blobs/nat8 arrays(arrays in general are tough UX problems).
[/quote]
We already support this for nat8/blob. Did you have a chance to try it?

-------------------------

b3hr4d | 2024-05-16 13:02:46 UTC | #7

[quote="skilesare, post:4, topic:30821"]
“Let me mess around with this canister”
[/quote]
That’s the spirit! The whole point of creating B3Forge was to give developers the freedom and tools to experiment and innovate with canisters. So, go ahead and mess around—B3Forge has got you covered! 😄

-------------------------

skilesare | 2024-05-16 13:22:48 UTC | #8

The Hex entry works great....sometimes dfx uses the \xx format and it would be nice to be able to use that as well because sometimes that is what you get from as the reply from the canister.

Also, for example, if you take a look at https://sehgq-cqaaa-aaaap-ahc4q-cai.icp0.io/candid/gtzpn-mqaaa-aaaal-qbvga-cai?category=status and look at stage_library_nft_origyn you'll see we have a 'content' blob...it would be nice to be able to select a file and have the UI convert it to hex.....as a reach...it would be even cooler if it was smart enough to know that the IC doesn't allow more than 2MB for ingress and had some way to split the file into chunks and indicate which one you want.  I know this is a highly specific request...but as a dev tool it would be amazing.

As I was poking around another feature I though of was to be able to paste in Candid and have it get assigned to the form(maybe like an edit raw tab).  With ICRC16 and the ICRC3 Value types you get extensible types and selecting all the variants for a deeply nested value would get quite tedious.

-------------------------

b3hr4d | 2024-05-16 13:42:50 UTC | #9

Yes, I saw it. The problem is that it tries to convert it to an image:

![Screenshot 2024-05-16 at 4.32.31 PM|592x118](upload://4p6woRYdulHqYp37A3RKcxrTuSe.png)

Interestingly, this means it passed this test: 
https://github.com/B3Pay/ic-reactor/blob/30f5d193059773eb34cda02a9c46c60049158ab5/packages/visitor/src/helpers.ts#L120

Is this a chunked image? Is there a reason why not saving the whole image after all chunks are received into the canister?

[quote="skilesare, post:8, topic:30821"]
As I was poking around, another feature I thought of was to be able to paste in Candid and have it get assigned to the form (maybe like an edit raw tab). With ICRC16 and the ICRC3 Value types, you get extensible types, and selecting all the variants for a deeply nested value would get quite tedious.
[/quote]

Yes, that's a perfect idea. I'll consider adding this feature.

-------------------------

skilesare | 2024-05-16 14:05:39 UTC | #10

I was more talking about uploading a chunk of data....but yes for this strange thing:


![image|446x500](upload://elebOLQoIldA3r5voixWs2OL7ZI.png)

The library id is a file name...like 10g.png.  So I guess your code thinks it is a local file...but it is on the canister in an nft in this case....you're not going to really be able to link it unless you follow the origyn_nft schema.

-------------------------

b3hr4d | 2024-05-16 14:16:38 UTC | #11

Oh, now I get it. So, you will show the NFT images using those chunks at the end? Is this following a standard for those chunks that I can follow to create a customizable output component for it? For example, we have an standard the array only has records as children to be shown as a table:
![Screenshot 2024-05-16 at 5.12.16 PM|690x203](upload://dRlye9GH1pY3kwnGA5dAqlPA6W2.png)
can we have something like that for those chunks?

-------------------------

b3hr4d | 2024-05-16 14:34:39 UTC | #12

[quote=“skilesare, post:8, topic:30821”]
it would be nice to be able to select a file and have the UI convert it to hex…as a reach…it would be even cooler if it was smart enough to know that the IC doesn’t allow more than 2MB for ingress and had some way to split the file into chunks and indicate which one you want. I know this is a highly specific request…but as a dev tool it would be amazing.
[/quote]

Converting a file into a u8 array is pretty much doable. For chunking, we can standardize it by setting a function with a specific prefix like “chunk_file_max_{size}”. This way, the UI will recognize that it needs to chunk the file, display a file input, and handle the chunking and looping calls. This can be easily integrated into the UI builder. Additionally, we can add select options for the u8 array to enhance usability. This approach should make handling large files more seamless and intuitive.

-------------------------

b3hr4d | 2024-05-21 12:48:21 UTC | #13

### New Update: Migration from Next.js to Vite

Excited to announce that successfully migrated our project from Next.js to Vite! This transition is a significant step towards improving our development workflow, gaining full control over route management, and fixing persistent routing bugs.

#### What Has Changed?

- **Route Management**: We have restructured our route management to be more flexible and reliable. This change addresses several routing bugs that were present in our previous setup.
- **Dynamic Imports and Asset Handling**: Optimized our dynamic imports and asset handling processes, ensuring that all necessary resources are correctly included in the build output.

#### What's Next?

While this migration brings many improvements, it has also resulted in the temporary loss of some static pages. Rest assured, we are actively working on restoring these pages and enhancing them with the new capabilities provided by Vite.

#### How You Can Help

If you encounter any issues or have feedback regarding the new setup, please do not hesitate to share your thoughts on the forum. Your input is invaluable as we continue to improve and evolve B3Forge.

Thank you for your continued support and enthusiasm for B3Forge. We look forward to delivering an even better platform with these updates.

-------------------------

baolongt | 2024-06-18 06:28:23 UTC | #14

Hey!
 
As the guy who using icp dashboard to interact with canister. I love your product

It's great if we have some tag for canister like canister support icrc1, icrc2, etc... to fast overview on the UI

-------------------------

b3hr4d | 2024-06-18 06:54:48 UTC | #15

Hey!

Thanks for the feedback and for using B3Forge! I’m glad you love the product.

That’s a great suggestion. Adding tags for canisters, such as canister support for ICRC1, ICRC2, etc., would definitely provide a faster overview on the UI. I’ll consider integrating this feature to enhance the user experience.

-------------------------

b3hr4d | 2024-06-22 16:50:18 UTC | #16

### New Update: B3Forge Now Includes Playground Feature!

Hello everyone,

I’m excited to share an update about B3Forge!

We have recently added a new playground feature that allows users to modify the [Candid](https://github.com/dfinity/candid) to create interactive UI forms. This addition gives users even more powerful tools to customize their decentralized application interfaces effectively.

![b3forge-playground-ezgif.com-speed|600x374, 100%](upload://nqJ13VxBg20jakMZJpTV5w5HICO.gif)

### Try It Out:

Give the new playground feature a shot at [B3Forge Playground](https://sehgq-cqaaa-aaaap-ahc4q-cai.icp0.io/playground).

I look forward to hearing your feedback on the new playground feature. Your suggestions and comments are invaluable as we continue to improve B3Forge.

Thank you for your support!

-------------------------

chenyan | 2024-06-22 17:39:31 UTC | #17

Wow, this is very cool! Do you mind we link your playground from the Candid repo's README?

As for customizing the UI, we currently have a proposal to allow developers to specify how they want the UI to be rendered: https://github.com/dfinity/candid/pull/555. When this feature lands on Candid UI, the user can say something like `blob.type = "file"` to upload a file into a `blob` value, or `blob.type = "image"` to display an image from a blob type. I think this can be implemented purely using the visitor pattern. It would be great if people from the community can contribute to speed up the implementation.

-------------------------

b3hr4d | 2024-06-22 18:20:19 UTC | #18

[quote="chenyan, post:17, topic:30821"]
Do you mind we link your playground from the Candid repo’s README?
[/quote]

I would be honored to have the B3Forge Playground linked from the Candid repo’s README. It would be a great way for more developers to discover and use B3Forge!

[quote="chenyan, post:17, topic:30821"]
When this feature lands on Candid UI, the user can say something like `blob.type = "file"` to upload a file into a `blob` value, or `blob.type = "image"` to display an image from a blob type.
[/quote]
OMG, that’s exactly the solution I’ve been looking for! Having this feature implemented sooner would be incredibly helpful for my work with B3Forge.

If there’s anything I can do to help make this happen or any contributions needed, I’m ready to assist in any way possible.

-------------------------

Gekctek | 2024-06-25 19:49:01 UTC | #19

@b3hr4d I was surprised on how good the data parsing/display is for the canister tab, super helpful thank you

But when I use the playground with the same canister `sctyd-5qaaa-aaaag-aa5lq-cai`, it gives me the error `Candid interface not fetched!`, but it works in the canister tab

-------------------------

b3hr4d | 2024-06-25 19:56:04 UTC | #20

Thank you so much for your kind words! I'm glad to hear that.

Regarding the issue you're experiencing with the playground, could you please share the Candid code you are using? I've tested it on my end, and it worked without any problems.

-------------------------

Gekctek | 2024-06-25 20:00:25 UTC | #21

Im not sure if I understand, dont you just put in the canister id and it fetches the candid?

Here is a gif of my experience
![Error|690x355](upload://A74nT11Td5uWXgTx1S2W5v00CrZ.gif)

-------------------------

b3hr4d | 2024-06-25 20:06:24 UTC | #22

Yeah, you should enter the candid code manually for now, but good point it should fetch the candid code automatically.
I’ll add it later, thanks for that.

-------------------------

chenyan | 2024-06-25 21:17:22 UTC | #23

Great! Updated the Candid README page :)

For the type selector feature in Candid UI, I don't have a concrete design yet. A first step can be to brainstorm the properties we need to specify.

-------------------------

b3hr4d | 2024-06-26 10:43:58 UTC | #24

Thanks to @Gekctek, for pointing that out. Entering the canister ID should fetch the Candid code automatically and place it into the form. This small update should make it even easier to use.

![new-playground-update|600x320](upload://sZhEM6LscWlvr0yORJXtvMqaMkA.gif)

Additionally, I have fixed a route problem that was showing a “Body does not pass verification” error on some routes, Thank you, @peterparker, for bringing this to my attention.

I appreciate your feedback and the opportunity to improve B3Forge. Please give it a try and let me know if it works for you now.

-------------------------

b3hr4d | 2024-06-26 11:03:27 UTC | #25

Great! Thank you for updating the Candid README page. I’m excited for more developers to discover and use B3Forge!

Regarding the type selector feature in Candid UI, I have a few suggestions for properties that could be useful. I’ve also implemented a similar approach in B3Forge, where the input type is guessed based on the name. Here are some ideas to enhance this feature:

1. **blob.type**:
   - `"file"`: Allows users to upload a file into a blob value.
   - `"image"`: Displays an image from a blob value.
   - `"text"`: Displays plain text from a blob value.
   - `"video"`: Displays a video from a blob value.

2. **number.format**:
   - `"currency"`: Formats the number as currency.
   - `"decimal"`: Allows decimal numbers.
   - `"cycle"`: Handles IC-specific cycle units.

3. **date.format**:
   - `"date"`: Standard date picker.
   - `"datetime"`: Date and time picker.
   - `"time"`: Time picker.

4. **string.format**:
   - `"email"`: Validates the input as an email address.
   - `"url"`: Validates the input as a URL.
   - `"password"`: Masks the input for password fields.
   - `"image"`: Handles base64-encoded images.

5. **array.layout**:
   - `"table"`: Displays array items in a table layout.
   - `"list"`: Displays array items in a list layout.

6. **auto-detection based on keywords**:
   - Using predefined keyword lists to automatically suggest input types based on field names. For example:
     - **timestamp_keys**: Suggests date/time pickers for fields like "createdAt," "updatedAt," "timestamp."
     - **value_keys**: Suggests numerical input for fields like "amount," "balance," "price."
     - **wallet_keys**: Suggests financial transaction fields for names like "transfer," "deposit," "withdraw."

This approach can help developers customize the UI more effectively and provide a better user experience. I’m happy to brainstorm more ideas or provide further assistance as needed.

If there's anything I can do to help make this happen or any contributions needed, I’m ready to assist in any way possible.

Thank you for considering my suggestions!

-------------------------

evieharpr | 2024-06-26 11:37:36 UTC | #26

It's great! we are looking upon the feedback while having the high hopes about project's success.

-------------------------

sea-snake | 2024-06-26 12:04:58 UTC | #27

> **blob.type**

I would suggest to use MIME types here.

-------------------------

reccasolan | 2024-06-26 12:38:07 UTC | #28

This looks really great! :blush: A good idea

-------------------------

b3hr4d | 2024-06-26 14:33:34 UTC | #29

Thank you for the suggestion! Using MIME types for `blob.type` is a great idea. Here's an example of how this could be implemented:

1. **blob.type**:
   - `"application/pdf"`: Allows users to upload PDF files.
   - `"image/png"`: Displays a PNG image from a blob value.
   - `"text/plain"`: Displays plain text from a blob value.
   - `"video/mp4"`: Displays an MP4 video from a blob value.

By using MIME types, we can provide a more standardized and flexible way to handle various data types. This approach would enhance the customization options for developers and ensure better compatibility.

Thanks again for the valuable input!

-------------------------

sea-snake | 2024-06-26 14:40:05 UTC | #30

Similarly metadata regarding strings/numbers could follow HTML text input type standards for example.

Overall I would split the candid metadata into various (ICRC?) standards for different purposes, some might be data related (e.g. MIME), some UI related (e.g. input), some might be used for other purposes.

Overall having standardized metadata around candid at some point seems like a very cool concept.

-------------------------

b3hr4d | 2024-06-26 14:45:40 UTC | #31

I agree that following HTML text input type standards for strings and numbers would be beneficial. Splitting the Candid metadata into various standards for different purposes makes a lot of sense. For example:

1. **Data Related (e.g., MIME Types)**:
   - `blob.type = "application/pdf"`: Upload PDF files.
   - `blob.type = "image/png"`: Display PNG images.
   - `blob.type = "text/plain"`: Display plain text.
   - `blob.type = "video/mp4"`: Display MP4 videos.

2. **UI Related (e.g., HTML Input Types)**:
   - `string.type = "email"`: Email input field.
   - `string.type = "url"`: URL input field.
   - `string.type = "password"`: Password input field.
   - `number.type = "integer"`: Integer input field.
   - `number.type = "float"`: Floating-point number input field.
   - `number.type = "currency"`: Currency input field.
   - `number.type = "decimal"`: Decimal number input field.
   - `number.type = "cycle"`: IC-specific cycle units.

3. **Other Purposes (Potential Standards)**:
   - Standardized metadata for different application purposes such as validation, formatting, and more.

-------------------------

skilesare | 2024-06-26 14:47:02 UTC | #32

One issue is how to handle chunked files. Not sure if we can standardize that some how or not.

Maybe type a tulple? (blob,?nat) : chunksfile(mimetype )

-------------------------

b3hr4d | 2024-06-26 15:55:08 UTC | #33

To handle chunked files, we can use a standardized approach with specific functions for uploading and verifying files. Here's an example:

```candid
type ICRC1000 = record {
  load_chunk: func (blob) -> ();
  size: func () -> (nat);
  hash: func () -> (text);
}

service: {
  upload_profile_pic : () -> (ICRC1000);
}
```

- **`load_chunk(blob)`**: Loads a chunk of the file.
- **`size()`**: Returns the total size of the file after all chunks have been uploaded.
- **`hash()`**: Verifies the file's integrity by returning the hash of the uploaded file.

### Example Usage in JavaScript

Here’s how you can use these functions in JavaScript to manage chunked file uploads:

```javascript
async function uploadFile(canister, file) {
  const chunkSize = 1024 * 1024; // 1MB chunks
  const totalChunks = Math.ceil(file.size / chunkSize);
  const uploadProfilePic = await canister.upload_profile_pic();

  for (let i = 0; i < totalChunks; i++) {
    const chunk = file.slice(i * chunkSize, (i + 1) * chunkSize);
    await uploadProfilePic.load_chunk(chunk);
  }

  const fileSize = await uploadProfilePic.size();
  if (fileSize === file.size) {
    const fileHash = await uploadProfilePic.hash();
    console.log('File uploaded successfully with hash:', fileHash);
  } else {
    console.error('Failed to upload all chunks.');
  }
}
```

In this approach, the main function (`upload_profile_pic`) returns the functions needed (`load_chunk`, `size`, and `hash`) to upload and verify the file. This allows the frontend to manage chunked file uploads effectively by calling these standardized functions.

-------------------------

CryptoDexia | 2024-06-26 16:56:18 UTC | #34

Hey, that B3Forge seems super practical! The customizable interfaces and smooth integration are definitely going to help us a lot. I appreciate the focus on security and managing user identities too. Looking forward to seeing more features being added :clap: Great work!

-------------------------

chenyan | 2024-06-27 00:18:00 UTC | #35

Thank you all! These are all useful suggestions! 

Given a type, there are two dimensions to consider: input/output, textual/UI. UI input corresponds to Candid UI input; Textual input corresponds to the Candid assist feature; UI output corresponds to Candid UI rendering; textual output corresponds to dfx pretty printer. Some of the properties make sense for all these dimensions, while some only make sense for a particular dimension. So we need a bit more design here.

[quote="sea-snake, post:30, topic:30821"]
Overall I would split the candid metadata into various (ICRC?) standards for different purposes, some might be data related (e.g. MIME), some UI related (e.g. input), some might be used for other purposes.
[/quote]

Yep, we are doing this already. See the last section of this PR: https://github.com/dfinity/candid/pull/555

-------------------------

