Maithreya | 2022-02-19 16:15:29 UTC | #1

I have a secure canister which calls a function in a different canister by importing that canister.

For security reasons, I want this function canister to ONLY be able to be called from the secure canister, and reject all other requests. In particular, this function should not be callable from an API call and not callable from any other canister on the IC other than that specific canister.

How can I achieve this?

Thanks in advance,

Maithreya

-------------------------

coin_master | 2022-02-19 16:26:45 UTC | #2

Here's an example in Rust, I believe there's something similar in Motoko
```
pub fn my_guard() -> Result<(), String> {
    if caller() != "your secure canister" {
        return Err(String::from("Access denied"));
    }

    Ok(())
};


#[update(guard = my_guard)]
pub async fn my_secure_function(){
  ......
```

-------------------------

Maithreya | 2022-02-19 16:36:06 UTC | #3

[quote="coin_master, post:2, topic:10988"]
`caller()`
[/quote]

Thanks! A couple of followups:
(1) I presume the string "your secure canister" refers to the canister name in dfx.json?
(2) For Motoko, I assume the analogy to your answer is here: https://smartcontracts.org/docs/language-guide/caller-id.html and uses (msg)? (i.e msg.caller)

-------------------------

coin_master | 2022-02-19 16:39:39 UTC | #4

1 - it should be your canister principal not the name.
2 - yes true

-------------------------

Maithreya | 2022-02-19 16:43:52 UTC | #5

[quote="coin_master, post:4, topic:10988"]
true
[/quote]

Are you sure it is the principal ID? It would not make sense to hard-code the principal ID in, especially since if you consider that, if the canisters are being deployed together (dfx deploy), you cannot know the principal ID before deploying.

-------------------------

coin_master | 2022-02-19 16:50:31 UTC | #6

You can know the principal of the canister before deploying if you install it first, which assign an id on the mainnet before actually installing the code.

```
dfx canister create --all // -> this will create the canisters id in canister_ids.sjosn
dfx build
dfx canister install --all
```

-------------------------

Maithreya | 2022-02-19 16:56:54 UTC | #7

Okay, thank you! Best Wishes!

-------------------------

jzxchiang | 2022-02-22 07:34:26 UTC | #8

Somewhat related... is there a way to make a canister be callable only by a frontend client?

The catch is that client could represent any number of logged-in users. I could put some application ID in both the frontend code and the backend canister code, and verify the application ID on every request... but someone could read the JS and extract the application ID.

Basically, I want to prevent malicious users from calling the backend canister directly... but maybe that's an impossible goal?

-------------------------

