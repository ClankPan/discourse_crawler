Astrapolis-peasant | 2022-09-07 16:14:00 UTC | #1

Hello ICP folks,
Since the launch of ICP, I have always been curious about how persistent canister memory is implemented. Since most blockchain use kv DB(level DB, rocks DB) to serialize and deserialize tree nodes, you can't use straightforward data structures in smart contracts. But ICP supports almost all data structures in a native fashion in memory. So my biggest question is how does canister's persistent storage gets implemented since I am not sensing any persistent RAM in hardware configuration. Does ICP use Memory Map for mirroring memory in SSD, if so, what data structures it uses (mpt?)

-------------------------

Astrapolis-peasant | 2022-09-07 16:15:38 UTC | #2

It would be a great help if someone could post the state implementation source code

-------------------------

roman-kashitsyn | 2022-09-07 17:52:07 UTC | #3

I wrote a blogpost about the orthogonal persistence feature responsible for canisters state https://forum.dfinity.org/t/blog-post-ic-internals-orthogonal-persistence/12456
There are some code pointers at the end of the article if youâ€™re brave :)

-------------------------

Astrapolis-peasant | 2022-09-08 05:04:32 UTC | #4

thank you roman! That's super helpful!

-------------------------

Astrapolis-peasant | 2022-09-08 15:03:29 UTC | #5

Hi Roman, one more question, how does dirty memory pages further impact `state_root_hash` calculation and state_change_hash, could you elaborate on it a little bit. Bascially, how the state_root_hash is derived from the canisters memory pages

-------------------------

roman-kashitsyn | 2022-09-08 19:15:52 UTC | #6

[quote="Astrapolis-peasant, post:5, topic:15326"]
how does dirty memory pages further impact `state_root_hash` calculation and state_change_hash, could you elaborate on it a little bit. Bascially, how the state_root_hash is derived from the canisters memory pages
[/quote]

Conceptually, the system periodically hashes the entire state of a [subnet](https://mmapped.blog/posts/08-ic-xnet.html#subnets), including the memory of all canisters, by constructing an on-disk representation of the state, slicing the files into chunks, and building a [shallow Merkle tree](https://sourcegraph.com/github.com/dfinity/ic@6d1d09753f03ee60b65c6d8b5b5c6b4c6fe8f371/-/blob/rs/types/types/src/state_sync.rs?L3-64) out of this structure ([state as an artifact](https://mmapped.blog/posts/02-ic-state-machine-replication.html#state-artifact)). I guess the root hash of that tree is what you mean by `state_root_hash.`

Of course, re-hashing the whole state is very expensive, so the system uses the information about dirty pages to find chunks that need re-hashing.

I'm not sure what you mean by `state_change_hash` though.

-------------------------

