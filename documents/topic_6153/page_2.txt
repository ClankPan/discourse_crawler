Jan | 2021-11-23 19:23:54 UTC | #210

The break in determinism was discovered just a few hours ago because it caused the subnet finalisation rate to go down. While investigation is still on going, it is known that the metadata (ie number of pages dirtied by the canister) of a specific canister stored as part of canister state differs on different replicas. This causes CUP signing to fail as replicas did not agree on state hash, stopping execution and slowing the block rate. Will post more once more is known, team is working on a fix now.

-------------------------

diegop | 2021-11-24 06:36:03 UTC | #211

This may not be obvious to readers of this thread (since this is his second post), so I thought I should point out for context that @Jan above is Jan Camenisch, the CTO of DFINITY. :slightly_smiling_face:

-------------------------

JensGroth | 2021-11-25 08:33:03 UTC | #212

### Update on enabling canisters to transfer ICP

TL;DR: The Foundation will resubmit the proposal to upgrade the ledger and enable canisters to transfer ICP. The Foundation will vote for adopting the proposal.

Yesterday, voting on [proposal 30496 ](https://dashboard.internetcomputer.org/proposal/30946)to upgrade the Ledger and enable canisters to transfer ICP saw 18.9% votes for adoption and less than 0.1% for rejection with only half an hour to the deadline. Unfortunately, a[ technical issue in application subnet “pljlw”](https://status.internetcomputer.org/incidents/mzk9kpl9yslz) made it risky to perform the upgrade to the Ledger canister at the same time. Important to note, the issue with subnet “pljlw” is unrelated to the ICP transferability upgrade. Fortunately, the subnet is back to running normally. As promised, the Foundation is resubmitting the upgrade proposal to update the Ledger canister and enable ICP transferability. Given the majority of the community was in favour of adoption, this time, the Foundation will vote in favor of the upgrade proposal.

-------------------------

daijianlin | 2021-11-25 13:47:51 UTC | #213

I am confused why this has to do so like this, which sounds like a waste of time. You said that "the issue with subnet 'pljlw' is unrelated to the ICP transferability upgrade." Why cannot jut let the ICP transferability upgrade? As per this saying, if one day there are millions of subsets and if one subset has this kind of issue and we will not be able to do any of this kind of upgrade things? Is my understanding right?

-------------------------

bogwar | 2021-11-25 13:56:26 UTC | #214

Currently,  converting ICP to Cycles to top-up a canister triggers a call-tree involving the ledger and the canister to be topped up. If the canister to be topped up is on an unresponsive subnetwork, then the call-tree may not terminate and the ledger cannot be upgraded (since atm, to safely upgrade a canister the canister needs to be stopped). 
We will remove this dependency (either by eliminating the need to stop the canister, or via different flows for ICP conversion to cycles so that the dependency is removed). So, upgrading the ledger will be completely independent of the behavior of other canisters/subnetworks.

-------------------------

JensGroth | 2021-11-25 15:28:51 UTC | #215

Here is the resubmitted [proposal](https://dashboard.internetcomputer.org/proposal/31471).
Adopted.
Upgraded.
Canisters are now able to transfer ICP!

-------------------------

Huydt68 | 2021-11-25 17:20:58 UTC | #216

I wonder is the phase of the nns ICP wallet when we accidentally delete it, although we still save the phase, but we can't backup the wallet, is there any way to recreate it?

-------------------------

jorgenbuilder | 2021-11-25 19:41:23 UTC | #217

Trying to use the new interface... what am I missing?

```
❯ dfx canister --network ic call "ryjl3-tyaaa-aaaaa-aaaba-cai" account_balance "(record { \"account\" = blob \"\a8\137Tw\ca\0d\04KeY2r(6P\d2<\0a\c0\ac\bcnH\ca\d5\e6\fc\"})"

The Replica returned an error: code 5, message: "Canister ryjl3-tyaaa-aaaaa-aaaba-cai trapped explicitly: Panicked at 'Deserialization Failed: "Fail to decode argument 0 from table0 to record { account : vec nat8 }"', /builds/dfinity/ic/rs/rust_canisters/dfn_core/src/endpoint.rs:34:41"
```

Using the exact same interface (pulled from the proposal's github link) on a local test canister works just fine:

```
❯ dfx canister call legends account_balance "(record { \"account\" = blob \"\a8\137Tw\ca\0d\04KeY2r(6P\d2<\0a\c0\ac\bcnH\ca\d5\e6\fc\"})"

(record { e8s = 0 : nat64 })
```

-------------------------

timo | 2021-11-25 20:06:01 UTC | #218

[quote="Huydt68, post:216, topic:6153, full:true"]
I wonder is the phase of the nns ICP wallet when we accidentally delete it, although we still save the phase, but we can’t backup the wallet, is there any way to recreate it?
[/quote]

If you have accidentally deleted the recovery phrase then you can simply create a new recovery phrase which will be different from the phrase you had before. Is your question if you can somehow re-install the old recovery phrase into your internet identity instead of getting a new, different one?

-------------------------

Huydt68 | 2021-11-26 07:53:29 UTC | #219

how can i create a new phase once i have checked it in the approved devices section nns please guide me

-------------------------

quint | 2021-11-26 19:49:23 UTC | #220

I got exactly the same error as @jorgenbuilder...

```
The Replica returned an error: code 4, message: "IC0503: Canister ryjl3-tyaaa-aaaaa-aaaba-cai trapped explicitly: Panicked at 'Deserialization Failed: "Fail to decode argument 0 from table0 to record { account : vec nat8 }"', /builds/dfinity/ic/rs/rust_canisters/dfn_core/src/endpoint.rs:34:41"
```

Context: a canister that tries to get its own balance.
You can find the code [here](https://github.com/aviate-labs/icp-canister).

EDIT: it is now fixed, the account id hash was missing.

-------------------------

roman-kashitsyn | 2021-11-26 18:16:19 UTC | #221

@quint , @jorgenbuilder 

I believe the problems you're facing with ledger interface are caused by the fact that you're trying to use canister principals as ledger account identifiers. Principals and ledger account identifiers are different identifiers (even though the ledger account id is derived from the principal of the owner and a subaccount): 
```
$ dfx identity get-principal 
sp3em-jkiyw-tospm-2huim-jor4p-et4s7-ay35f-q7tnm-hi4k2-pyicb-xae

$ dfx ledger account-id
8af54f1fa09faeca18d294e0787346264f9f1d6189ed20ff14f029a160b787e8
```

I know this is very confusing, but it's how the ledger was originally designed, and there is some reasoning behind this.

We're planning to release a few support libraries and examples demonstrating how to correctly talk to the Ledger, a formal specification for the Ledger canister, and a reference implementation in Motoko. This will happen in the next few weeks. I'll also give a community conversation talk on these topics.

If you're already eager to start building things, you can use the following draft PRs as your point of departure:
* For Motoko, https://github.com/dfinity/examples/pull/123
* For Rust, https://github.com/dfinity/cdk-rs/pull/168

-------------------------

quint | 2021-11-26 18:37:27 UTC | #222

Thanks for the response! Just to clarify, the example above uses account ids.

-------------------------

roman-kashitsyn | 2021-11-26 19:01:26 UTC | #223

> Thanks for the response! Just to clarify, the example above uses account ids.

Not really:

```
    public type AccountIdentifier = Blob;

    public func balance() : async Ledger.ICP {
        await ledger.account_balance({
            // same as Blob.fromArray(Blob.fromPrincipal(Principal.fromActor(this), null)); 
            account = Blob.fromArray(AccountIdentifier.fromPrincipal(Principal.fromActor(this), null));
        });
    };  
```
This code converts a Principal into a blob, not computes an account identifier from a principal.
For the reference, this is the proper way to compute account identifier from a principal: https://github.com/dfinity/examples/pull/123/files#diff-1947d2436b27ccfc6f4c817a50e04ae0d9b1ca26c5d75dd38e260b735230e3eaR27-R36
```
  public func accountIdentifier(principal: Principal, subaccount: Subaccount) : AccountIdentifier {
    let hash = SHA224.Digest();
    hash.write([0x0A]);
    hash.write(Blob.toArray(Text.encodeUtf8("account-id")));
    hash.write(Blob.toArray(Principal.toBlob(principal)));
    hash.write(Blob.toArray(subaccount));
    let hashSum = hash.sum();
    let crc32Bytes = beBytes(CRC32.ofArray(hashSum));
    Blob.fromArray(Array.append(crc32Bytes, hashSum))
  };
```
The default subaccount is 32 zero bytes.

-------------------------

quint | 2021-11-26 19:22:28 UTC | #224

It uses [this](https://github.com/aviate-labs/principal.mo/blob/main/src/AccountIdentifier.mo) package to convert a principal to an account ids, not `Blob`, am I missing something?...

How are these the same?
> // same as Blob.fromArray(Blob.fromPrincipal(Principal.fromActor(this), null)); 
account = Blob.fromArray(AccountIdentifier.fromPrincipal(Principal.fromActor(this), null));

-------------------------

roman-kashitsyn | 2021-11-26 19:36:19 UTC | #225

Ah, thanks for the clarification, I missed the fact that an external package is used. Unfortunately, this package doesn’t include the extra 4 bytes (CRC32 of the hash) into the account identifier as indicated in the ledger candid interface docs. So the ledger canister fails to decode a 32 byte array from the message.

-------------------------

quint | 2021-11-26 20:37:40 UTC | #226

This fixed it. :sweat_smile: I guess I need to read [my own documentation](https://github.com/aviate-labs/principal.mo/blob/main/src/AccountIdentifier.mo#L14)...
Thanks a lot @roman-kashitsyn!

-------------------------

hhanh00 | 2021-11-27 14:03:09 UTC | #227

[quote="roman-kashitsyn, post:221, topic:6153"]
For Rust, [feat: a library of types for communicating with the ICP ledger by roman-kashitsyn · Pull Request #168 · dfinity/cdk-rs · GitHub ](https://github.com/dfinity/cdk-rs/pull/168)
[/quote]

Is this the official ledger canister on mainnet?

https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/nns-ledger-10244/ryjl3-tyaaa-aaaaa-aaaba-cai

(The id and interface differs from what the rust code uses but I was able to query the balance of my canister after updating them.)

-------------------------

roman-kashitsyn | 2021-11-27 23:13:30 UTC | #228

> Is this the official ledger canister on mainnet?

Thanks a lot for spotting the issue, @hhanh00! I fixed the issue in [this commit](https://github.com/dfinity/cdk-rs/pull/168/commits/cbff528ca5cb658f5a74bf98d55e43f098b06608).

> The id and interface differs from what the rust code uses but I was able to query the balance of my canister after updating them.

That's a very good point!
The canister provides multiple interfaces for various use-cases, and the .did file returned by `__get_candid_interface_tmp_hack` endpoint still describes the old interface. Since the methods exposed by the old interface weren't designed for general public use, and mixing two interfaces together will be very confusing, we can change the interface endpoint to return the new .did file in the next release of the ledger canister.

-------------------------

kevinli | 2021-11-28 23:17:04 UTC | #229

Are we able to interact with a local ledger canister with "fake ICP" through this API to test ICP transferring with a local replica?

-------------------------

Huydt68 | 2021-11-29 06:44:00 UTC | #230

so what do i need to do to generate a new phase code on my old nns wallet address i need to back it up on my laptop now i'm praying my phone doesn't break :(

-------------------------

timo | 2021-11-29 11:38:43 UTC | #231

Go to [https://identity.ic0.app/](https://identity.ic0.app/) on your phone
Type in your identity anchor number
Authenticate with your phone
Click on "Add recovery key" or "Add recovery mechanism" (whatever appears)
Click on "Seed phrase"
Copy the whole thing including the identity anchor number in the beginning and write it down

-------------------------

Huydt68 | 2021-11-29 12:43:10 UTC | #232

when i Authenticate with your phone it comes out, now i log in directly to my wallet i don't see it Click on “Add recovery key” or “Add recovery mechanism

-------------------------

Ori | 2021-11-29 16:25:12 UTC | #233

Make sure you’re visiting https://identity.ic0.app/ directly and logging in there, this gives you the account management page where you can add devices and recovery options like the seed phrase. 
(This isn’t the same as logging in via an app, eg https://nns.ic0.app , which will instead redirect you back to the app and you won’t see the management page.)

-------------------------

Huydt68 | 2021-11-29 18:02:25 UTC | #234

yes i am sure when i login it says unknown identity anchor what should i do

-------------------------

Ori | 2021-11-29 19:15:12 UTC | #235

[quote="hhanh00, post:227, topic:6153"]
Is this the official ledger canister on mainnet?

[https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/nns-ledger-10244/ryjl3-tyaaa-aaaaa-aaaba-cai ](https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/nns-ledger-10244/ryjl3-tyaaa-aaaaa-aaaba-cai)

(The id and interface differs from what the rust code uses but I was able to query the balance of my canister after updating them.)
[/quote]

Updated this for you, it should match now!

-------------------------

Ori | 2021-11-29 19:16:04 UTC | #236

The identity anchor will be the same one you used to log in above (this is not your old seed phrase, it’s a number, probably 6 digits). If you can log in to the nns app with your phone then use the exact same approach on the identity management page, from there you can generate a new seed phrase.

-------------------------

Evanfeenstra | 2021-12-08 16:17:05 UTC | #237

So how can a canister be built to accept ICP from different accounts, for example an ICP-based NFT market? Would that be accomplished with sub-accounts? Like the canister would generate a sub-account unique to the signed-in user? Is there any good docs on how to use sub-accounts in Rust?

-------------------------

jzxchiang | 2021-12-15 01:43:26 UTC | #238

[quote="JensGroth, post:195, topic:6153, full:true"]
> 1. Can you explain where the 7s latency comes from? Regular update calls are advertised to complete in <2s, so I'm curious what the source of the remaining 5s is.

There are at least two rounds of consensus involved. A canister sends a transfer request to the ledger, which need to go through consensus on the NNS subnet to reach the ledger (and the NNS subnet runs at a slower speed than other subnets to prioritize stability). Then the response from the ledger needs to go through consensus on the canister's subnet before the canister knows whether the transfer succeeded.
[/quote]

Sorry for the late follow-up, but doesn't this affect all inter-canister calls and not just ICP transfers? I was not aware that every inter-canister update calls incur 2x the latency of ingress update calls. If that's the case, I think it would be well worth updating the docs to make that clear.

That also would make inter-canister queries even more important IMO.

-------------------------

kevinli | 2021-12-22 09:49:38 UTC | #239

I am trying to follow the readme, but get `The post-build step failed for canister 'rrkah-fqaaa-aaaaa-aaaaq-cai' with an embedded error: No such file or directory (os error 2)` when trying to build the ledger canister.

-------------------------

roman-kashitsyn | 2021-12-22 11:52:49 UTC | #240

Hi @kevinli !

I assume you're referring to the readme for the transfer example. The instructions are indeed somewhat incomplete at the moment, I'll try to improve them in the next few days.
The error message is not entirely clear, my guess is that you don't have the ledger canister web assembly module yet. I wrote an instruction how to build and install the ledger canister locally: https://github.com/dfinity/ic/tree/58af48d1f1e5bb20a7f4ae7ef052121187945daf/rs/rosetta-api/ledger_canister#deploying-locally

-------------------------

moritz_tum | 2022-01-03 12:45:14 UTC | #241

What is the status on this?

-------------------------

diegop | 2022-01-04 18:36:40 UTC | #242

Hi there,

If you are asking if Canisters can hold ICP, then the status is "this feature became part of mainnet in November."

https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/215?u=diegop

If you are asking something else, please let us know. I may have missed some nuance.

-------------------------

Munlite | 2022-01-10 12:22:14 UTC | #244

[quote="roman-kashitsyn, post:240, topic:6153"]
ic/rs/rosetta-api/ledger_canister по адресу 58af48d1f1e5bb20a7f4ae7ef052121187945daf · dfinity/ic · GitHub
[/quote]

Hello, please tell me what could be the problem? The error crashes when configuring the ledger_canister project

>  ERROR [4/6] RUN cargo install -f --version 0.3.2 ic-cdk-optimizer                      196.3s                                                                                      
 > [4/6] RUN cargo install -f --version 0.3.2 ic-cdk-optimizer:                                   
#7 0.307     Updating crates.io index
#7 24.03  Downloading crates ...
#7 24.84   Downloaded ic-cdk-optimizer v0.3.2
#7 24.94   Installing ic-cdk-optimizer v0.3.2
#7 25.15  Downloading crates ...
#7 25.61   Downloaded heck v0.3.3
#7 25.66   Downloaded clap_derive v3.0.0-beta.2
#7 25.70   Downloaded unicode-segmentation v1.8.0
#7 25.71   Downloaded version_check v0.9.4
#7 25.72   Downloaded proc-macro-error-attr v1.0.4
#7 25.72   Downloaded itoa v1.0.1
#7 25.72   Downloaded proc-macro2 v1.0.36
#7 25.73   Downloaded serde_derive v1.0.133
#7 25.75   Downloaded serde v1.0.133
#7 25.77   Downloaded serde_json v1.0.74
#7 25.81   Downloaded textwrap v0.12.1
#7 25.81   Downloaded humansize v1.1.1
#7 25.82   Downloaded wabt v0.10.0
#7 25.83   Downloaded syn v1.0.85
#7 25.84   Downloaded strsim v0.10.0
#7 25.84   Downloaded cmake v0.1.48
#7 25.84   Downloaded ryu v1.0.9
#7 25.84   Downloaded quote v1.0.14
#7 25.84   Downloaded os_str_bytes v2.4.0
#7 25.85   Downloaded clap v3.0.0-beta.2
#7 25.87   Downloaded libc v0.2.112
#7 25.89   Downloaded lazy_static v1.4.0
#7 25.89   Downloaded unicode-width v0.1.9
#7 25.89   Downloaded unicode-xid v0.2.2
#7 25.89   Downloaded memchr v2.4.1
#7 25.90   Downloaded atty v0.2.14
#7 25.90   Downloaded cc v1.0.72
#7 25.91   Downloaded vec_map v0.8.2
#7 25.91   Downloaded regex-syntax v0.6.25
#7 25.93   Downloaded autocfg v1.0.1
#7 25.99   Downloaded aho-corasick v0.7.18
#7 25.99   Downloaded bitflags v1.3.2
#7 25.99   Downloaded wabt-sys v0.8.0
#7 26.14   Downloaded regex v1.5.4
#7 26.14   Downloaded proc-macro-error v1.0.4
#7 26.15   Downloaded indexmap v1.8.0
#7 26.15   Downloaded binaryen v0.12.0
#7 26.15   Downloaded hashbrown v0.11.2
#7 26.15   Downloaded termcolor v1.1.2
#7 26.16   Downloaded binaryen-sys v0.12.0
#7 26.27    Compiling proc-macro2 v1.0.36
#7 26.27    Compiling unicode-xid v0.2.2
#7 26.27    Compiling cc v1.0.72
#7 26.27    Compiling memchr v2.4.1
#7 26.45    Compiling version_check v0.9.4
#7 26.66    Compiling unicode-segmentation v1.8.0
#7 26.66    Compiling syn v1.0.85
#7 26.78    Compiling regex-syntax v0.6.25
#7 26.95    Compiling libc v0.2.112
#7 27.10    Compiling autocfg v1.0.1
#7 27.27    Compiling serde v1.0.133
#7 27.28    Compiling serde_derive v1.0.133
#7 27.46    Compiling serde_json v1.0.74
#7 27.54    Compiling hashbrown v0.11.2
#7 27.56    Compiling ryu v1.0.9
#7 27.78    Compiling itoa v1.0.1
#7 27.87    Compiling unicode-width v0.1.9
#7 27.91    Compiling termcolor v1.1.2
#7 27.95    Compiling strsim v0.10.0
#7 27.97    Compiling os_str_bytes v2.4.0
#7 28.13    Compiling bitflags v1.3.2
#7 28.20    Compiling lazy_static v1.4.0
#7 28.33    Compiling vec_map v0.8.2
#7 28.49    Compiling humansize v1.1.1
#7 28.64    Compiling cmake v0.1.48
#7 28.68    Compiling proc-macro-error-attr v1.0.4
#7 28.96    Compiling proc-macro-error v1.0.4
#7 29.14    Compiling heck v0.3.3
#7 29.20    Compiling indexmap v1.8.0
#7 29.40    Compiling textwrap v0.12.1
#7 29.47    Compiling wabt-sys v0.8.0
#7 30.26    Compiling aho-corasick v0.7.18
#7 30.34    Compiling quote v1.0.14
#7 30.63    Compiling atty v0.2.14
#7 31.60    Compiling regex v1.5.4
#7 36.83    Compiling binaryen-sys v0.12.0
#7 38.24    Compiling clap_derive v3.0.0-beta.2
#7 41.69    Compiling clap v3.0.0-beta.2
#7 120.2    Compiling wabt v0.10.0
#7 195.9    Compiling binaryen v0.12.0
#7 196.0 error[E0308]: mismatched types
#7 196.0   --> /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/binaryen-0.12.0/src/tools.rs:11:47
#7 196.0    |
#7 196.0 11 |         let raw_module = ffi::translateToFuzz(seed.as_ptr() as *const i8, seed.len(), true);
#7 196.0    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u8`, found `i8`
#7 196.0    |
#7 196.0    = note: expected raw pointer `*const u8`
#7 196.0               found raw pointer `*const i8`
#7 196.0 
#7 196.0 error[E0308]: mismatched types
#7 196.0   --> /usr/local/cargo/registry/src/github.com-1ecc6299db9ec823/binaryen-0.12.0/src/tools.rs:23:47
#7 196.0    |
#7 196.0 23 |         let raw_module = ffi::translateToFuzz(seed.as_ptr() as *const i8, seed.len(), false);
#7 196.0    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `u8`, found `i8`
#7 196.0    |
#7 196.0    = note: expected raw pointer `*const u8`
#7 196.0               found raw pointer `*const i8`
#7 196.0 
#7 196.0 For more information about this error, try `rustc --explain E0308`.
#7 196.0 error: could not compile `binaryen` due to 2 previous errors
#7 196.0 warning: build failed, waiting for other jobs to finish...
#7 196.1 error: failed to compile `ic-cdk-optimizer v0.3.2`, intermediate artifacts can be found at `/tmp/cargo-installlASlrK`
#7 196.1 
#7 196.1 Caused by:
#7 196.1  build failed
executor failed running [/bin/sh -c cargo install -f --version 0.3.2 ic-cdk-optimizer]: exit code: 101

-------------------------

roman-kashitsyn | 2022-01-10 15:36:28 UTC | #245

Hi @Munlite!

Thank you for reporting the issue.
I've just tried to re-install Docker and build the image following the instruction, and the build fails for me as well (though with a different error message).

It might be that the base rust:1.55.0 image changed in an incompatible way.
I'll update the instructions and notify you when they land on master.

-------------------------

Munlite | 2022-01-10 15:50:15 UTC | #246

Thanks for the answer!

-------------------------

roman-kashitsyn | 2022-01-10 20:57:03 UTC | #247

Quick update on the ledger build instructions: The documentation PR is on review, you can try using this little script to get the canister and the Candid interfaces for now:
```sh
export IC_VERSION=a7058d009494bea7e1d898a3dd7b525922979039
curl -o ledger.wasm.gz https://download.dfinity.systems/ic/${IC_VERSION}/canisters/ledger-canister_notify-method.wasm.gz
gunzip ledger.wasm.gz
curl -o ledger.private.did https://raw.githubusercontent.com/dfinity/ic/${IC_VERSION}/rs/rosetta-api/ledger.did
curl -o ledger.public.did https://raw.githubusercontent.com/dfinity/ic/${IC_VERSION}/rs/rosetta-api/ledger_canister/ledger.did
```
This script fetches the ledger canister module that our CI pipeline built. This script will replace the Dockerfile in the first step of the instruction. You won't need to build the canister from scratch anymore.

-------------------------

Munlite | 2022-01-11 14:14:28 UTC | #248

Yes, it worked. But now the problem is with the ledger-transfer example :grinning:. Are the instructions in the project correct?

-------------------------

roman-kashitsyn | 2022-01-11 14:40:57 UTC | #249

Indeed, the example was not in sync with the latest Ledger version.
I created a PR to fix that a couple of weeks ago: https://github.com/dfinity/examples/pull/130 and I've just merged this PR to master. Could you please try the new version?

-------------------------

Munlite | 2022-01-11 14:53:19 UTC | #250

Okay, I'll test it today or tomorrow.

-------------------------

Munlite | 2022-01-11 15:29:12 UTC | #251

Tested it. There are still errors. 
```
dfx canister call ledger_transfer canisterAddress '()'
The Replica returned an error: code 3, message: "Canister r7inp-6aaaa-aaaaa-aaabq-cai has no update method 'canisterAddress'"
```
It may be worth changing the `dfx canister call ledger_transfer canisterAddress '()'`  command to `dfx canister call ledger_transfer canisterAccount '()'`. It seems to be working with her. 
P.S. Sorry for my bad English :grinning:

-------------------------

kpeacock | 2022-01-11 16:47:51 UTC | #252

This is the issue that I'm addressing in the [Invoice Canister](https://forum.dfinity.org/t/payments-invoice-canister-design-review/9843) payments flow initiative

-------------------------

jorgenbuilder | 2022-01-14 22:01:22 UTC | #253

Looking at the NNS ledger candid interface, it seems that there still isn't a way to query a block if you're using Candid/Motoko: https://ic.rocks/principal/ryjl3-tyaaa-aaaaa-aaaba-cai

Sorry if I'm missing something, but it seems that I still need to trust the workaround canister (ockk2-xaaaa-aaaai-aaaua-cai) in order to validate transactions on chain?

-------------------------

jorgenbuilder | 2022-01-15 22:03:22 UTC | #254

After doing some digging, the pattern Roman describes in his Community Conversation on canisters holding ICP provides what seems to be a good method for conducting payments onchain (my use case) without querying blocks.

-------------------------

tonynguyen | 2022-01-16 10:40:30 UTC | #256

I got an error. Anyon can help?
![error|690x127](upload://kyy8Qjvybn2vgtuAdqWmRp3g5dT.png)

Many thanks,

-------------------------

diegop | 2022-01-20 21:32:58 UTC | #257

Fwiw, I have pinged team to see if anyone can help with your error.

-------------------------

tonynguyen | 2022-01-21 03:21:43 UTC | #258

Many thanks, I used IC_VERSION=a7058d009494bea7e1d898a3dd7b525922979039

-------------------------

roman-kashitsyn | 2022-01-26 16:06:18 UTC | #259

[quote="tonynguyen, post:256, topic:6153"]
I got an error. Anyon can help?
[/quote]

The error seems to indicate that your `ledger.did` file contains `404: Not Found`, which is not valid Candid. I guess there was an error when you fetched it. What command did you use to fetch this file?

-------------------------

Munlite | 2022-02-02 09:58:13 UTC | #260

Hello! Is there an instruction for setting up a canister that needs to be connected to ledger canister and manage icp on the main network?

-------------------------

levi | 2022-02-23 23:40:38 UTC | #261

[quote="bogwar, post:171, topic:6153"]
The current thinking is that will have the user/canister notify the cycles minting canister about the transfer.
[/quote]

@bogwar Can the cycles minting canister give back the specific number of the cycles that it creates when topping up a canister? I know we can call for the exchange rate and make the calculation but it is possible that the exchange rate will change between the top-up call and the check-rate call, so it is better if the top-up call gives-back the number of the cycles that it mints.

-------------------------

bogwar | 2022-02-24 18:32:46 UTC | #262

Hi @levi,

Yes, I think we can return that info. I'll added to the things to change in the new for notifications.

-------------------------

levi | 2022-02-25 18:59:13 UTC | #263

Hi @bogwar, Great thanks!

-------------------------

RmbRT | 2022-04-27 08:57:15 UTC | #264

Reposting this from another thread for visibility: I need to be notified in my canister when someone pays ICP to it. Is some kind of subscription or event handling feature already implemented? I need this in a grant that just got approved. We were under the assumption that this was implemented already, but I can't find anything about it.

-------------------------

GLdev | 2022-04-27 09:10:32 UTC | #265

There's some work on that [here](https://github.com/open-ic/icp-notifications) by the open-chat team. Maybe this works for you?

-------------------------

AnonymousCoder | 2022-04-27 09:23:56 UTC | #266

It is one of the biggest "issues" right now. You can do this by using `transaction_notification` method in the canister to which the payment that goes into the ledger is initially sent.
This would be a general workflow if going this route:
1. User calls `send_dfx(memo, amount, fee, from_subaccount, to, created_at_time)` on Ledger to send ICP to our receiving canister (we'll break down the parameters of that function call shortly.)
2. User calls `notify_dfx(block_height, max_fee, from_subaccount, to_canister, to_subaccount)` .
3. TxAuth receives the notification from Ledger that was created by our `notify_dfx` call. We validate the data we are receiving from the Ledger, and add it to our list of authenticated transactions.

There is an example of this in this repository https://github.com/sagacards/legends-minter
However, example does not cover any checking of the actual ledger transaction in the canister inside of the `transaction_notification` method (which you must do to confirm if a payment was properly sent with correct amount to your canister). 

Takeaways and issues by using this approach are:
1. On the client side (javascript), user needs to send two transactions.
 First is to `send_dfx` method of the ledger canister to send ICP for whatever he wants to purchase
 Second to `notify_dfx` ledger canister method after his first transaction was a success (where he would get the actual block number as response that he must use in this call)

If a user navigates away from the client dapp before second transaction has been sent, you would never get `transaction_notification` called in your canister that got those ICP's that the user sent in the first transaction, hence not actually being able to check it and send the user whatever he has purchased by his first transaction. This would lead to you having to issue refunds or similar to people that did not complete the full process and / or perhaps state that there are no refunds for the purchases made if users do not complete the complete "checkout" process... 

You also need to have a bunch of bloated logic that saves what the user is trying to purchase BEFORE he does the first `send_dfx` transaction (ie: save his principal or similar and the ID of the item he is trying to purchase so that you can compare the item with that ID price vs how much was sent in that transaction later on in the `notification_transaction` method once you get a confirmation of a payment back from the ledger. You also need to take care of "double spend" attack perhaps, where user might call `notify_dfx` with the same block number multiple times, which would make the `transaction_notification` trigger multiple times for the same transfer.

-------------------------

RmbRT | 2022-04-27 10:46:03 UTC | #268

that's a cool project, but sadly, it seems it is no longer maintained and I also couldn't find transaction verification logic in there.

-------------------------

RmbRT | 2022-04-27 11:01:12 UTC | #269

*(messed up the first post, didn't link it to yours, so I'm reposting).*

Thanks for the quick reply. I had hoped there could be a simple function "on_receive" or something, that would be called on a canister (if the function exists), directly called by the asset holder (ICP or others), and would thus no longer need checking, as the caller would identify the asset type. This 2-step workflow and manual verification of transaction receipts is quite the bummer, to be honest.

I think I will build our canister so that it will require the asset holder canister to emit such an event to the receiver canister. Since the caller field in the notification call should be the asset holder, the source, token type, and integrity of the data is clearly verifiable by just checking the caller principal. Thus, we will not be supporting native ICP tokens, unless the ICP canister adds such notification functionality, or someone builds a wrapped ICP ledger that supports this kind of notification. I will post the exact specifications of the token standard I'm proposing as a reply to this post once it's done.

-------------------------

AnonymousCoder | 2022-04-27 11:35:48 UTC | #270

[quote="RmbRT, post:269, topic:6153"]
I think I will build our canister so that it will require the asset holder canister to emit such an event to the receiver canister. Since the caller field in the notification call should be the asset holder, the source, token type, and integrity of the data is clearly verifiable by just checking the caller principal. Thus, we will not be supporting native ICP tokens, unless the ICP canister adds such notification functionality, or someone builds a wrapped ICP ledger that supports this kind of notification. I will post the exact specifications of the token standard I’m proposing as a reply to this post once it’s done.
[/quote]

But the ledger canister DOES have that sort of notification mechanism already like I explained above, only, it's a hassle to use and not without issues. You don't need example of verification logic in that repository to use it, the verification logic can be done by you, depending on your needs.
Let's say you are selling an NFT in your canister for 20 ICP. First, user would call some method in your canister called `init_purchase` or similar, where you would lock up that NFT so it cannot be purchased by anyone else in the meantime and also assign the caller's principal (which is the buyer) to that NFT id somewhere in your smart contract (some kind of principal -> nat pair, probably a hashmap). Then, user would (in the same flow on the front-end get a screen where he would be asked to pay 20 ICP (this is the first transaction I mentioned above). Once this is completed, you call one more tx (which he doesn't need to know is happening as you can call it automatically i believe once the ledger tx is done for the sakes of better user experience) which would go to `notify_dfx` and you would send a block number that you get from the first successful transaction that you did when the user sent over 20 ICP to the ledger canister. Ledger canister would then automatically call your own canister method called `transaction_notification` with the details of the transaction from the ledger that corresponds to the block number that you sent to it in the `notify_dfx` call. Then, you can just compare what was the principal of the caller that made a tx to the ledger canister in that block, whether amount paid was actually 20 ICP (cost of that NFT), check if that principal is actually the same as the principal you stored in your custom `init_purchase` method and if it was, you could assign him that NFT, since he already paid for it.

A real hassle, but i think one of the "easier" ways of doing it

-------------------------

RmbRT | 2022-04-27 11:45:08 UTC | #271

Thanks for the feedback, but I've already made up my mind. The workflow you outlined only works for the ICP ledger and nothing else, I assume. I'd rather have support for a generic token type and people would have to wrap their incompatible tokens than only support ICP in a non-portable way. Also, I don't want to have to harden my canister against double spends, if I can avoid them by design. And I don't think non-atomic transfers are acceptable, it will probably not fit in well with the client logic we're using, and locking resources on the blockchain side is a huge error source. The code I'm writing must be easily auditable and verifiable. It's not my fault the ICP ledger canister cannot be used conveniently in a black-box way.

-------------------------

Zane | 2022-04-27 15:13:42 UTC | #272

You should participate in one of the Token standards workspaces and voice your concerns, better inform Dfinity about whats missing than adopt a community made standard that may be discontinued.

-------------------------

RmbRT | 2022-04-27 18:46:30 UTC | #273

I had a look at the Delandlabs DFT standard, I'm not sure I can contribute anything meaningful to that project. Its complexity is way over my head, I just want to have a consumer-side abstraction for receiving tokens, I don't care how the rest of the token works. Any way of sending them out again is fine with me, really. I'm also completely new in this community and have no connections.

Anyway, here's some Candid code for the receiver interface:

```
type FungibleTransaction = record {
	CreditedSender: principal;
	Receiver: principal;
	Message: opt blob;
	Amount: Nat;
};
type TXError = nat8;

service FungibleToken {
	"ft_send": (Transaction) -> (opt TXError);
}
service FungibleTokenReceiver {
	"on_ft_received": (Transaction) -> ();
}
```

During sending, the sender can specify a sender account to be credited for the payment (when paying on someone else's behalf), but the tokens are deducted from the caller's account. The sending contract must try to call `on_ft_received` function on the receiver. If the receiver does not have such a function, or is not a canister, the resulting error should just be ignored silently. The `on_ft_received` event handler can be called by anyone, and must interpret the caller's principal as the token type (usually, the caller would be the token ledger canister currently executing `ft_send`). Since the caller cannot be faked (to the best of my knowledge), the data is considered reliable, as long as the caller itself is trusted.
Now, whoever wants to be able to receive the tokens and be notified about it just needs to implement the event handler, but this is entirely optional. Users will probably need some different kind of subscription or have their own wallet canister or just do polling or whatever. This is not my concern here and can be solved by other standards. All I want to solve here is that canisters can easily receive money. No need to check for double spends, pool known TXs, query other canisters, etc.

-------------------------

mariop | 2022-04-28 14:12:02 UTC | #274

I've answered to this in the other thread https://forum.dfinity.org/t/thoughts-on-the-token-standard/4694/141?u=mariop

-------------------------

levi | 2022-05-04 08:24:37 UTC | #275

Hey @bogwar, great to see the new [notify_top_up](https://k7gat-daaaa-aaaae-qaahq-cai.ic0.app/listing/nns-cycles-minting-10245/rkp4c-7iaaa-aaaaa-aaaca-cai#methods-notify_top_up) method on the cycles-minting-canister is up and working, and gives back the cycles-count   :+1:

-------------------------

bogwar | 2022-05-06 08:45:57 UTC | #276

We're still working on integrating it within dfx and nns-dapp, but yes it's already usable :slight_smile:

-------------------------

augchan42 | 2023-12-26 12:34:39 UTC | #278

Just checking on this thread... is it still not possible for a normal canister to hold and send ICP?  Seems this topic has not had any updates and it's not clear whether the token standard topic addresses this (as ICP is native)

-------------------------

timo | 2023-12-26 15:11:51 UTC | #279

It has been possible since Nov. 2021 according to this post:

[quote="diegop, post:242, topic:6153"]
If you are asking if Canisters can hold ICP, then the status is “this feature became part of mainnet in November.”
[/quote]

-------------------------

augchan42 | 2023-12-26 15:23:46 UTC | #280

Thanks.  Is there any motoko sample code?  I can see a javascript library to use mentioned here:
https://github.com/dfinity/ic-js/tree/main/packages/ledger-icp
And some rust sample code here:
https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/interact-with-ledger#interact-with-icp-from-a-canister

-------------------------

Severin | 2024-01-08 12:00:06 UTC | #281

Motoko sample code is here: https://github.com/dfinity/examples/tree/master/motoko/ledger-transfer

-------------------------

