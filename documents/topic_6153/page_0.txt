diegop | 2021-09-15 15:55:11 UTC | #1

## Summary

Expanding support for all Canister types to be able to hold and transfer ICP tokens. Currently, for security reasons, only NNS Canisters and users may hold ICP tokens

## Status 
Discussing and working on a design proposal

## What you can do to help

* Ask questions
* Propose ideas

## Key people involved**

@JensGroth  @roman-kashitsyn @bogwar Lomesh Dutta ( @ld-dfn1 )

## Timelines
- [x] [1-pager](https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/29?u=diegop) posted on the forum for review: *September 10, 2021* 
- [x] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/20588) (to approve design + project)  submission:  ~~September 14,15:00 UTC~~   *September 15,15:00 UTC* 
- [x] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/20588) (to approve design + project)  expiration: *September 16, 2021, 15:00 UTC* 
- [ ] (If NNS proposal passes) implementation + testing would take around 1-2 weeks. NNS Proposal to upgrade the code with experimental feature: *Week of September 27, 2021*


## Relevant Background

Due to security concerns we currently only allow whitelisted canisters (i.e., canisters on the NNS) to transfer ICPs. This feature expands the ability to transfer ICP to other canisters.

What we need:

* IC Interface Spec includes the calls a canister must make to query for its ICP balance and to transfer ICP. Optional: specification of how to stake/dissolve/vote with neurons.
* Removal of whitelist barrier so all canisters can hold ICP (unless we for security reasons decide to restrict access)
* Testing (in particular so to ensure no NNS shielding blocks transfer of ICP)
* Security review (including malicious subnets, where it ought to be the case a corrupt subnet can only act on behalf of canisters it hosts; the controller cannot be faked.
* Stakeholders and plan for rolling out: developers such as Fleek? phased roll-out by first labeling it as an experimental feature (potentially limiting each canister to a few ICP), later offer e.g. fiduciary subnets with higher guarantees

Open question:

* Consult SRE team for any operational concerns that may arise

Not necessarily in scope: staking and voting (P2), security level of canisters (developers and users may want assurance it is a high-security subnet the deploy on but we will leave the specification of e.g. fiduciary subnets to a different feature and just recommend not putting much ICP on a canister), CDK tooling to handle ICP on canisters.

-------------------------

wang | 2021-08-16 19:44:39 UTC | #2

Is this a dependency of enable canisters to control neurons? If not, can we have a separate topic for that?

-------------------------

diegop | 2021-08-16 19:53:24 UTC | #3

Great question. I am not sure, tbh. 

Let me ping the team to see if the right person (who is working on this) can comment publicly.

-------------------------

nomeata | 2021-08-17 13:01:42 UTC | #4

[quote="diegop, post:1, topic:6153"]
Currently, for security reasons, only NNS Canisters and users may hold ICP tokens
[/quote]

:snake: :oil_drum: 

The design for the Internet Computer services was always that they _don’t_ distinguish “outside users” from “canister users”, and that their APIs are accessible from other canisters without issue. The fact that our maybe most important canister doesn’t do that is somewhat embarrassing, and I hope we can drop [this code](https://github.com/dfinity/ic/blob/89446f5a04f053040b4863eab5458446d925ed0e/rs/rosetta-api/ledger_canister/src/lib.rs#L964-L971)  soon.

(Fun fact: With the current ledger code, canisters _can_ hold ICPs. They just cannot use them, as the canister-banning-check is on `send()`.)

-------------------------

Hazel | 2021-08-17 14:47:10 UTC | #5

It would be great if we could get some official timeline on this.

-------------------------

diegop | 2021-08-17 18:14:32 UTC | #6

I just updated the **Summary** at the top

-------------------------

diegop | 2021-08-17 18:18:19 UTC | #7

Good point, @Hazel  will try to get something that's helpful.

-------------------------

wang | 2021-08-17 19:05:07 UTC | #8

Unfortunately, the Jira, Notion, and Google Docs links are not public :frowning:

-------------------------

diegop | 2021-08-17 19:16:56 UTC | #9

Hmm, they should be. let me look into that

-------------------------

nomeata | 2021-08-17 20:16:42 UTC | #10

[quote="diegop, post:1, topic:6153"]
IC Interface Spec includes the calls a canister must make to query for its ICP balance and to transfer ICP
[/quote]

ICP has so far been a feature that is not reflected in the Interface Spec, which describes only lower-level aspects. After all, in most ways ICP is “just” data in one particular canister, and is technically no different than data in other canisters.

I don’t think this needs to change, or that any change in the Interface Spec is needed. If there is documentation of the ledger cansiter (is there? hint hint), then _that_ needs to change.

-------------------------

diegop | 2021-08-17 20:39:02 UTC | #11

Removed them, those were outdated links.

-------------------------

BrianGaller | 2021-08-18 02:59:42 UTC | #12

This may be an uninformed question, but can someone expand on why ICP storage should be expanded beyond canisters in the NNS? The description above states that it wasn't initially allowed for security reasons, but doesn't really provide any information about the value of expanding to other canisters. I'm just curious if the value of storing ICP in any canister justifies the effort and security risks of doing so.

-------------------------

stephenandrews | 2021-08-18 08:53:47 UTC | #13

Without, you can't really do any DEFI solutions on ICP. Example a DEX or liquidity pools would all need a way to hold ICP and other tokens. No issue with other tokens, but no way to do it with ICP. This is why DEFI is currently stalled on ICP... in my book it should be the number 1 priority, but I am biased in the fact that I'm building/waiting to deploy DEFI solutions.

-------------------------

dpdp | 2021-08-18 10:32:50 UTC | #14

Agreed; We've built a PoC marketplace back in June and the ICPts are held by the canisters but can't be "claimed" -- I hope they won't be frozen forever if ICP moon :slight_smile: 

https://iaf77-fyaaa-aaaab-qabia-cai.raw.ic0.app/#/claimable

-------------------------

ld-dfn1 | 2021-08-18 22:25:40 UTC | #15

Enabling canisters to hold ICP is very high up on our agenda. We are having discussions with the security and research teams to map out the path forward. I hope to come back with a timeline on this shortly.

-------------------------

BrianGaller | 2021-08-19 03:19:47 UTC | #16

Thank you for the explanation.

-------------------------

Hazel | 2021-09-03 22:27:51 UTC | #17

Hey all, wanted to check in on a timeline here.

-------------------------

diegop | 2021-09-03 23:32:34 UTC | #18

Thanks for asking Hazel, the current trajectory we are on is to have a design proposal for the community to vote on (and quick implementation afterwards if it passes).

Our current trajectory is to have the design floated this coming week (week of September 6th) for voting like Increased Canister Storage.

-------------------------

dpdp | 2021-09-04 06:16:32 UTC | #19

Another solution would be to have the NNS (or another governance platform) voting for adding canisters ID to the `send_whitelist` ? ( https://github.com/dfinity/ic/blob/89446f5a04f053040b4863eab5458446d925ed0e/rs/rosetta-api/ledger_canister/src/lib.rs#L1031 )

-------------------------

Hazel | 2021-09-09 15:37:32 UTC | #20

If I start depositing ICP into canisters today, is there any reason why those canisters wouldn't be able to interact with the ledger post rollout? 

This has been blocking me pretty badly, and I'd like to just push forward with a "No Withdrawals Yet" contingency.

-------------------------

diegop | 2021-09-09 16:40:36 UTC | #21

I am not sure. I am pinging the team to answer this.

-------------------------

JensGroth | 2021-09-09 16:54:04 UTC | #22

In the proposal we are working on for enabling canisters to transfer ICP, they'd be able to transfer ICP they already hold too. (I suggest keeping amounts small though, the Internet Computer is still in Beta)

-------------------------

diegop | 2021-09-10 00:16:39 UTC | #23

[quote="diegop, post:1, topic:6153"]
## Timelines

* 1-pager posted on the forum for review: September 10, 2021, 15:00 UTC
* NNS Proposal submission: September 14,15:00 UTC
* NNS Proposal expiration September 16, 2021, 15:00 UTC
* (If NNS proposal passes) NNS Proposal to upgrade the code with experimental feature: September 20, 2021, 15:00 UTC
[/quote]

Hey folks, I have updated the main description with the current dates and timelines.

-------------------------

stephenandrews | 2021-09-10 01:01:16 UTC | #24

Awesome - so if everything goes well, we could have this implemented on the 20th? Awesome stuff!

-------------------------

diegop | 2021-09-10 01:29:15 UTC | #25

Very much so.

I will reveal some context: the “ability for canisters to hold ICP” is basically removing a line of code. Canisters have a restriction that bars holding ICP.

The catch (which you will see in the design doc): is that there are some consequences and risks from removing this restriction which need to be thought out and tested. Team believes they have a handle on these risks (and how to progressively address them) and want to lay out their thinking for community to vote on.

-------------------------

skilesare | 2021-09-10 01:49:45 UTC | #26

I’ve been thinking a good bit about this and I’m concerned about any number of existential threats to canister security. Has just using the ECDSA methodology off having canisters ask the subnet for a key and then using that key with the ledger been considered? Since you all are considering rolling that out presently, perhaps it reduces the attack vectors? Looks like the ledger uses ed25519…is that compatible?  I’m not saying we shouldn’t ever have canisters hold ICP natively, but if you’ve really cracked it maybe we don’t have to?

I get that the same tech secures the network, so maybe it is a non-issue. Expert opinions would be welcomed here.

-------------------------

diegop | 2021-09-10 13:28:22 UTC | #27

[quote="diegop, post:1, topic:6153"]
(If NNS proposal passes) NNS Proposal to upgrade the code with experimental feature: Week of September 27, 2021
[/quote]

Hey folks, I want to update the thread that the *implementation* of the project will take a bit more time than I had originally commented. The reason is testing. Security team wants to do more testing to make sure risks are handled if he canister restriction is removed. So I have moved the original deployment time from "week of September 20" to "Week of September 27." This is, of course, assuming NNS motion proposal passes, of course.

Personal responsibility note: the security team always intended to do more testing week of September 20 so i was wrong to have put the original date. I jumped the gun.

-------------------------

stopak | 2021-09-10 17:51:28 UTC | #28

Those are great news!!! Thanks for the update :)

-------------------------

JensGroth | 2021-09-10 21:21:30 UTC | #29

Hi everybody! Here's our plan for enabling all principals to transfer ICP, including canisters. We'll be happy to receive feedback!

# NNS Proposal: Enable all principals to transfer ICP

## Objective

Enable canisters to transfer ICP.

## Background

Currently canisters can receive ICP, since you can send ICP to any address. An address is derived from a principal and an optional subaccount, so each canister automatically has many addresses associated with it just like any other principals.

Canisters are blocked from transferring ICP though. This block is implemented by a check in the ledger that only self-authenticating principals (i.e. allows principals ending in 0x02), and specific whitelisted canisters to transfer ICP. Canisters do not have self-authenticating principals and can therefore not transfer ICP.

## Proposal

Remove the restriction such that any principal is allowed to transfer ICP with the exception of the anonymous principal.

## Backwards compatibility

All self-authenticating and whitelisted canisters can continue to transfer ICP, this proposal just permits other principals to transfer ICP too.

## Security
Enabling canisters to transfer ICP may put control over significant value in the hands of canisters on application subnets. This is a significant change, previously only whitelisted canisters that all lived on the root subnet could transfer ICP.

A canister holding ICP may for instance be co-located with a canister developed by an attacker, which could try to do a jailbreak and steal ICP. We have therefore been thinking hard about security and will continue to analyze security aspects of enabling all principals, including canisters, to transfer ICP.

Canister smart contracts on the Internet Computer are unique in the sense that they can be easily updated by the controller of the canister. This ability enables developers writing their business logic on smart contracts to continue evolving their applications without having to deploy new contracts. However, this also means that if an end-user were to send ICP to these canister smart contracts they will be trusting the controller of the canister.

This implies a risk of malicious developers trying to do fraud on the Internet Computer. Anybody can deploy a canister. Moreover, the controller of a canister can upgrade the Wasm code running the canister. So users need to be wary of rug pull operations: set up a canister running benign Wasm code and get people to transfer ICP to it, then change the Wasm code to steal the ICP.

We are working on mitigations: sandboxing of canisters (which will take a while); providing guidance on how to check which principal controls a canister and it could potentially be a dummy principal so the canister is immutable; and how to verify the Wasm module corresponds to a piece of source code.

In particular, providing the ability check that a canister is immutable and the ability to verify the code of a canister are necessary features to allow opting in to a similar trust model to existing “smart contracts” that predate the launch of the IC. However, it must be stressed that this is an opt-in. Even with these solutions in place, there is a risk that people will treat mutable canisters as immutable smart contracts and fall victim to a rug pull. We would be interested in feedback whether this is an acceptable risk.

Enabling canisters to trade ICP also enables an additional path to make off-the-record ICP transactions, because canister controllers are not ledgered. Agreeing to this proposal means accepting the lack of traceability.

Another risk is that currently canister developers do not have control over which application subnet their canister is created on. We expect in the future the Internet Computer will offer better control and better means for developers and end users to understand the risks of transacting ICP in each subnet depending on node distribution and other properties.

Some of the mitigations, e.g., sandboxing of canisters will take time to develop and will not be ready before this proposal. We do not consider the mitigations and additional security features as blocking the proposal. But we consider the ability for canisters to transfer ICP to be in an experimental phase. We encourage experimentation with small amounts of ICP but discourage large amounts of ICP.

## Rollout plan

The main change is just a few lines of code in the ledger to enable all principals, except the anonymous principal, to send ICP. We will make this an NNS proposal.

At the same time, we communicate widely that we view this proposal as being in an experimental phase. As long as the Internet Computer is in Beta, we strongly discourage sending large amounts of ICP to a canister.

Once we have rolled this proposal out, it is hard to take back since many canisters will rely on being able to transfer ICP. In the worst case, while rollback is hard it would be possible to blacklist some principals just like the anonymous principal is blacklisted, but we prefer not to go there. We therefore do not call this an experimental feature, but we want to start with an experimental phase.

-------------------------

lastmjs | 2021-09-10 22:09:25 UTC | #30

I'm curious what the security risks are here, and besides people trusting a canister with a malicious controller (which will always be an issue, and is an issue now with Ethereum smart contracts, as anyone can code any logic into the contract), I'm wondering if it simply boils down to the replication factor of the subnet?

Why are application subnets less secure than the system subnet? Wouldn't the only reason be the replication factor? 34 nodes is harder to corrupt than 7 nodes.

Are there other security risks here?

How could a malicious canister on the same subnet "jailbreak" another canister?

And I want to push a few points here again:

1. Please create a bug bounty program and start to crowd-source security testing of the IC. Get the best abd brightest white hats to put this thing through the ringer
2. Please consider node shuffling so that we can further prevent node operator collusion

Security is of the utmost importance not only to this feature, but to every feature and application of the IC. Once large amounts of value start flowing through canisters, the security may be tested even more and end up breaking in production.

-------------------------

ComputerInternetMan | 2021-09-10 22:35:44 UTC | #31

‘How to verify the WASM module corresponds to a piece of source code seems to be especially non-trivial.

-------------------------

Hazel | 2021-09-10 23:27:13 UTC | #32

[quote="JensGroth, post:29, topic:6153"]
.. jailbreak and steal ICP ...
[/quote]

Could you elaborate a bit more on this? When you say jailbreak do you mean somehow escape the WASM runtime?

[quote="JensGroth, post:29, topic:6153"]
Even with these solutions in place, there is a risk that people will treat mutable canisters as immutable smart contracts and fall victim to a rug pull. We would be interested in feedback whether this is an acceptable risk.
[/quote]

Personally, I think this is acceptable. However, I think foundation should be providing tools for investors to use in order to weigh the risks -> "This canister can be updated". With a solid foundation I think the community will a good job keeping one another safe and identifying clear scams. Ultimately scammer will always find a way IMHO.

-------------------------

wang | 2021-09-11 01:14:25 UTC | #33

[quote="JensGroth, post:29, topic:6153"]
We would be interested in feedback whether this is an acceptable risk.
[/quote]

I, too, accept this risk.

-------------------------

skilesare | 2021-09-11 01:54:54 UTC | #34

[quote="JensGroth, post:29, topic:6153"]
Agreeing to this proposal means accepting the lack of traceability.
[/quote]

Whoa….what? Why? The transactions don’t go into the ledger? Being able to get transaction ids out of the ledger is actually a huge use case that apply to a wide number of potential applications.

This is yet another reason to not let canisters hold ICP and to instead let them ask the subnet to sign a transaction with an ephemeral key.

Maybe I’m misunderstanding? If canister A pays canister B I 100% expect there to be a record of it in the ledger canister so that other apps can verify the transaction and react to it.

-------------------------

ComputerInternetMan | 2021-09-11 02:14:41 UTC | #35

I believe the other day I heard someone say ‘the challenge with the Internet computer is that because the compiled byte code is WASM, because there are multiple languages - currently, two major ones supported right now they compile to web assembly -it’s a bit trickier to verify the exact hash of the source code so you could potentially take the same source code compile it with different compiler flags on different architectures at different times of the day and you can get different output and so what we need here is a replicated system that everybody runs. For example that could be a docker image where it contains all the available binaries and libraries that you need to compile source code that then could be distributed out to different community members that they independently run and return the compiled byte code.  And so that has not been built out yet there’s quite a bit of bits and pieces that need to be built  first for that to happen but I’m sure it will happen at some point in the future.’

-------------------------

diegop | 2021-09-11 03:40:58 UTC | #36

[quote="skilesare, post:34, topic:6153"]
Whoa….what? Why? The transactions don’t go into the ledger? Being able to get transaction ids out of the ledger is actually a huge use case that apply to a wide number of potential applications.
[/quote]

I think this is a good point.

-------------------------

skilesare | 2021-09-11 03:54:49 UTC | #37

Norton say that this is about the controller transfers not being traceable. Fair enough. But from a dev standpoint it may be a best practice to be able to have custodial accounts for users that keep icp from being slushed together. This is especially important if regulators come calling. You could have business logic in your canister that keeps track of who owns what, but a schema that keeps users balances on ledger with documented delegation of custodianship would be safer, more auditable, and more trustworthy for the users. 

This is admittedly probably an app by app decision, but some nice standard and best practices would be great to have before we start some Wild West defi shenanigans.

It’s a bit late tonight to think through it all at the moment, but perhaps the crypto experts could weigh in with a good scheme for assigning  incoming icp to revocable custodial accounts for canisters operators. IE I’ll let you hold some icp in my name but I can revoke your right to move it around at my discretion. And it is traceable on the ledger.

-------------------------

nomeata | 2021-09-11 07:07:45 UTC | #38

[quote="ComputerInternetMan, post:31, topic:6153, full:true"]
‘How to verify the WASM module corresponds to a piece of source code seems to be especially non-trivial.
[/quote]

It needs cooperation from the developer, of course, but then it's not rocket science. See https://www.joachim-breitner.de/blog/779-Verifying_the_code_of_the_Internet_Identity_service for one way of doing it.

-------------------------

Hazel | 2021-09-11 15:41:41 UTC | #39

[quote="skilesare, post:34, topic:6153"]
Maybe I’m misunderstanding? If canister A pays canister B I 100% expect there to be a record of it in the ledger canister so that other apps can verify the transaction and react to it.
[/quote]

[quote="JensGroth, post:29, topic:6153"]
because canister controllers are not ledgered.
[/quote]

@skilesare - I interpreted this as "Canister A" is holding 100ICP. I give you controller access to "Canister A", and remove myself. Effectively, I just made an "off the record" transaction. However, I don't see how this would be different than me adding your device to my internet identity anchor, removing all my old devices, and having you generate a new seed recovery phrase. Or, if I just gave someone my key-pair. I don't think we can ever 100% fully prevent this, and I hesitate to suggest we try.


Oops sorry, didn't see your second reply. Leaving my post here anyways.

-------------------------

diegop | 2021-09-11 16:53:46 UTC | #40

Needless to say, I will let @JensGroth address most questions. He has much better command of the intent, design, limitations, and trade-offs so we can all iterate publicly on the design.

-------------------------

ayjayem | 2021-09-12 04:36:34 UTC | #41

Can I ask - does enabling canisters to transfer ICP effectively enable neuron transfer, as well?

Namely, is the ability to transfer ICP required to stake ICP in a neuron? Meaning that canisters that hold ICP could now also stake ICP in a neuron, where they might not have been able to before?

If so, then one could create a canister, send ICP to that canister for it to stake in a neuron, then reset the canister's controller, effectively transferring the neuron, right?

-------------------------

wang | 2021-09-12 11:10:03 UTC | #42

Nope, canisters are not allowed to be controlled by neurons for this very reason. It's a separate check:

https://github.com/dfinity/ic/blob/master/rs/nns/governance/src/governance.rs#L1762

-------------------------

nomeata | 2021-09-12 11:48:13 UTC | #43

Would this check be removed at the same time?

(Note that these checks are just snakeoil, as canisters can control self-authenticating principals via canister signatures or via the new ECDSA key feature under discussion; it's just a bit more cumbersome to implement that.)

-------------------------

wang | 2021-09-12 11:50:24 UTC | #44

Is there any documentation or example code on how to do that?

-------------------------

nomeata | 2021-09-12 11:55:55 UTC | #45

No. Figuring that out is part of the [“capture the IC token” challenge](https://github.com/nomeata/capture-the-ic-token). In all variants it requires an untrusted external component that bounces requests from the canister back via the HTTP interface (it's only needed for lifeness). And we still need the “canister signatures from non-root-subnet canisters are accepted” feature or the “canisters can do ECDSA signatures” feature to land.

I just hope I'll never have to explain how to do this to anyone, because the fact that it's conceptually possible but cumbersome means the restriction in th code above is not effective, just annoying, and that  hopefully suffice to get this restriction removed.

-------------------------

wpb | 2021-09-13 16:16:59 UTC | #46

Edited Post:
Responses from @JensGroth and @nomeata have alleviated my concerns expressed here.  I have no more hesitation on this proposal based on information available today and clarification offered by experts on this topic.

Original Post:
@diegop @JensGroth 

I have no idea how to vote on this proposal.  I support the developers and changes that will meet their needs, but I also expect Dfinity to protect the safety and security of the network and to anticipate/comply with traceability needs.  Does Dfinity need more time to review and develop a better solution on this proposal?

I really don't want a proposal implemented that Dfinity believes will create or expose vulnerabilities, especially if it will be difficult to roll back and relies on warnings not to transfer too much ICP.  I fully believe that this issue needs to be addressed, but I don't want to rush to an inferior implementation if you just need more time to develop a better proposal.

-------------------------

nomeata | 2021-09-12 16:37:02 UTC | #47

I don't really understand the hesitation. Of course, trusting ICP to be held by a canister is risky, in case of bugs in the canister, or the IC, or other things. But so is moving your valuable business logic or data to a canister! Or your Bitcoins (via the parallel ECDSA support). What makes “transfering” ICP so much more critical than all the other possible use cases for canisters?

(This assumes that the worry is all about canisters doing the wrong things with their ICPs, but _not_ the security of the ICP system itself. The ledger will not care if calls come from users or canisters, and work just fine, I'm confident.)

-------------------------

ComputerInternetMan | 2021-09-13 00:20:35 UTC | #48

So… reproducing the build necessitates the trust path to source and revision, which conceivably would be part of the developer offering. Also conceivable that developer will make best efforts to educate and illustrate.You would think I would have seen it’s just a fractal of your Dockerized build example.  Idiosyncratic aspects (flag/architecture/time etc…) that might cause verification to fail can be tweaked with ‘developer cooperation’.

With that said, do you have any concerns re: Quis custodiet ipsos custodes? beyond some future articulated best practices?

-------------------------

Hazel | 2021-09-13 00:26:32 UTC | #49

Another question - Does this comment still hold true? `send_pb` isn't compatible with Motoko.

https://github.com/dfinity/ic/blob/35dd8f93dec82662ed4df35664a9c0be6dbf203a/rs/rosetta-api/ledger_canister/src/main.rs#L513

-------------------------

skilesare | 2021-09-13 01:10:26 UTC | #50

[quote="Hazel, post:49, topic:6153"]
Another question - Does this comment still hold true? `send_pb` isn’t compatible with Motoko.
[/quote]

What is keeping candid compatible ledger functions from being deployed? This seems super simple and straight forward. Other rust canister speak candid just fine.

-------------------------

ayjayem | 2021-09-13 05:12:26 UTC | #51

My biggest hesitation to enabling canisters to transfer ICP would be in *de facto* also enabling neuron transfer, if this is in fact an unavoidable consequence, per the exchange above between you and @wang. This hesitation is rooted in the security risks of neuron transfer suggested in this thread [here](https://forum.dfinity.org/t/tokenomics-proposal-community-consideration/6159/15), for example.

Neuron immobility is currently at the heart of the model of secure good governance underpinning the IC as a whole. (Other risks of enabling canisters to transfer ICP seem more or less limited to particular potentially insecure or malicious canisters, and mitigations seem possible, based on the discussion so far.)

-------------------------

JensGroth | 2021-09-13 12:49:49 UTC | #52

Wrt application subnet vs system subnet. On a system subnet, we only have a controlled set of canisters running (governance, ledger,...). On an application subnet we have arbitrary canisters running. So the added concern is whether there'd be any way a malicious canister that could break out of Wasm and start executing arbitrary code and interfering with other canisters on the same subnet. Not that we're aware of a way to do this, but nonetheless we are planning sandboxing canisters in separate processes in the future to mitigate the potential risk.

We are planning to have a bug bounty program.

Node shuffling, not sure it gives so much in our system, one risk being accidentally shuffling a subnet into a bad node configuration.

-------------------------

JensGroth | 2021-09-13 13:06:13 UTC | #53

Yes, I was thinking of the risk of escaping the Wasm runtime.

Agree with your wish for tooling to understand the deployment of canisters: can it be updated, what are properties of the subnet it runs on, etc. Happy whether it comes from the foundation or the broader community.

-------------------------

JensGroth | 2021-09-13 13:20:36 UTC | #54

We're not planning to enable canisters to stake neurons. You're correct that if we did, then indeed one could transfer neurons via transferring controllers.

-------------------------

JensGroth | 2021-09-13 13:24:33 UTC | #55

Nope, we're not planning to let canisters control neurons. Agree with your in-principle analysis but in either case I think it would be best to take one step at a time.

-------------------------

JensGroth | 2021-09-13 13:56:51 UTC | #56

I see very little chance of the proposal creating or exposing any new vulnerabilities of the IC. My own concern is more about increasing adversarial incentives.  
As @nomeata says in his [reply](https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/47?u=jensgroth), users may already have value in the canister logic today. But ECDSA signatures are not there yet, and putting ICP in canisters may add value beyond what is currently in canister logic today, so I think the proposal makes application subnets juicier targets.

-------------------------

JensGroth | 2021-09-13 14:17:58 UTC | #57

Threshold ECDSA and related ideas will take months to implement. Also, due to the greater simplicity of native ICP handling, it is easier to analyze from a security perspective.

-------------------------

skilesare | 2021-09-13 16:11:30 UTC | #58

Make sense with a schedule like that. I think this is the first we've heard that the signature stuff is months out.

-------------------------

diegop | 2021-09-13 17:36:33 UTC | #59

[quote="diegop, post:1, topic:6152"]
## Timelines

* 1-pager posted on the forum for review: *September 10, 2021*
* Community Conversation - Threshold ECDSA: *Week of september 13th*
* NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*
* NNS Motion Proposal (to approve design + project) expiration: *September 17, 2021, 15:00 UTC*
* If NNS Motion Proposal passes, implementation + deploy would take months: *Q4 2021.*
[/quote]

Yes, sorry, I put the timeline of "months" friday evening PST.

-------------------------

diegop | 2021-09-13 17:38:05 UTC | #60

[quote="diegop, post:1, topic:6153"]
NNS Motion Proposal (to approve design + project) submission: *September 14,15:00 UTC*
[/quote]

Based on the questions on this thread, I will push back voting 1 more day to September 15th to give people the ability to dive deep. If people want more time, we can do that, but hopefully, 1 day is enough.

-------------------------

diegop | 2021-09-15 04:17:04 UTC | #61

**Update**: we are on track to submit NNS motion proposal on Wednesday September 15, at 15:00 UTC.

-------------------------

ohsalmeron | 2021-09-15 06:17:35 UTC | #62

does this mean the start of DeFi on the IC?

-------------------------

diegop | 2021-09-15 15:56:10 UTC | #63

I think there is some emerging Defi apps on IC already, but I think it safe to say this would greatly accelerate it.

-------------------------

diegop | 2021-09-15 15:56:35 UTC | #64

**NNS motion proposal is live:** https://dashboard.internetcomputer.org/proposal/20588

-------------------------

lastmjs | 2021-09-15 19:12:59 UTC | #65

[quote="JensGroth, post:52, topic:6153"]
but nonetheless we are planning sandboxing canisters in separate processes in the future to mitigate the potential risk.
[/quote]

How long would this take? How intense has security analysis of the execution layer been?

I am feeling hesitant that there are obvious improvements to security that could be made (multiple independent security audits, bug bounties, process sandboxing), but that won't have been made before we open up this capability.

And considering the main reason for this limitation in the first place is security, perhaps we should proceed more carefully.

What if we waited until one or more of the following were done, or perhaps made these prerequisites to deploying the change?

* Internal analysis of security of multi-canister execution environment within a replica, with publication of that analysis
* Multiple independent analyses of the above, with publications
* Bug bounties focused on execution environment for a sufficient amount of time
* Process sandboxing implemented

I would not underestimate how quickly honeypots of ICP will start forming within canisters, and hacks will do no favors for those hacked nor for the Internet Computer nor for DFINITY.

-------------------------

Ori | 2021-09-15 20:41:38 UTC | #66

Relevant in here too: 
[quote="roman-kashitsyn, post:9, topic:6269"]
One part of the initiative to allow canisters transfer ICPs is to provide a stable, properly designed Candid interface for ledger.
[/quote]

-------------------------

lastmjs | 2021-09-15 21:02:12 UTC | #67

I think the most important thing for me to understand is how involved and especially how long process sandboxing of canisters will take. This is an obvious improvement to the security of the canister environment, and if it won't take too long (I am not sure what too long would be), then I think we should wait until it is implemented before moving forward with anything that will allow canisters to control lots of monetary value. This includes the Bitcoin and Ethereum integrations.

-------------------------

northman | 2021-09-16 01:34:39 UTC | #68

"Canister controllers are not ledgered." - is the objective to build a money washer if ICP transactions are not recorded in a ledger?  Also, if A pays for a service through a Canister - how does one know the transaction completed correctly if there is no transaction recorded?  I think I am missing something here.

I also wonder about node operator security requirements.  SEV has not et been implemented.  Are their any integrity constraints placed on node operators (physical security, operational security, personnel, etc)?  No ICP transaction on the ledger will impact the risk profile of a node operator - it now shifts.

-------------------------

flyq | 2021-09-16 05:56:42 UTC | #69

## Don't Trust, Verify
If there is a place to verify the logic of the canister wasm, then the crooks are hard to succeed. So this risk is acceptable. 

At the same time, I think this kind of infrastructure is needed:

Some possible requirements of ​`Verified canister`:
1. Open source
2. Its logic conforms to its [Ricardo contract](https://en.wikipedia.org/wiki/Ricardian_contract) description

-------------------------

jzxchiang | 2021-09-16 06:00:59 UTC | #70

I totally agree that a "canister verification" service is absolutely necessary in the near future, one that can verify that a canister is:

1. Autonomous (i.e. black hole controller)
2. Running wasm code that's compiled from some published open source code

It'd be even better if this canister verification service was itself an open internet service, i.e. an autonomous canister.

I'm not too familiar with a Ricardian contract, but from wikipedia it seems that it needs to be legally binding and human readable. I'm not sure how much that applies here.

-------------------------

nomeata | 2021-09-16 07:35:00 UTC | #71

[quote="jzxchiang, post:70, topic:6153"]
I totally agree that a “canister verification” service is absolutely necessary in the near future
[/quote]

Note that the system already provides the building blocks, and anyone can build such a service now. Don't just wait for DFINITY to build everything you want, there is only so much one org can do here! Better let them focus on features that can't be done by others (system features), and have the community build the ecosystem. I'm happy to advise anyone who wants to build this.

-------------------------

benny | 2021-09-16 13:10:45 UTC | #72

[quote="nomeata, post:71, topic:6153"]
Note that the system already provides the building blocks, and anyone can build such a service now. Don’t just wait for DFINITY to build everything you want, there is only so much one org can do here! Better let them focus on features that can’t be done by others (system features), and have the community build the ecosystem. I’m happy to advise anyone who wants to build this.
[/quote]

The above comment needs to be stickied and immortalized.

I've gone through the 5 stages of IC since discovering it (sometimes bouncing between them) :

1) Curiosity
2) Excitement
3) Invested
4) Doubt
5) Acceptance

This is for you! It was made for you, the community! Dfinity provides the match, it's up to YOU if you want to start a fire for warmth and cooking *or* go burn something down. 

It's laid out in the documentation. This is a democracy. If YOU don't agree with something, YOU have to vote, and help educate others in order to make an educated vote. The capability to follow other neurons will become so powerful! There will be parties established. There will be easily accessible voting records. There will be revolutions!

I accept. I accept that Dfinity has provided a stage and it's up to us to execute a successful performance.

Edit:
If it matters to anyone, I voted no due to the following. Your risk tolerance might be higher, so please understand how it impacts you.

I think it would be unfortunate for someone to create a defi dapp with the general population assuming it behaves like other blockchains. I believe the other features should exist (immutability assurance and WASM/source code validation) before being made available for public consumption. 
 
One could also vote Yes at this time, and wait for the next proposal (which will include the code updates). That way, you have more time to evaluate the impact. 


[quote="JensGroth, post:29, topic:6153"]
In particular, providing the ability check that a canister is immutable and the ability to verify the code of a canister are necessary features to allow opting in to a similar trust model to existing “smart contracts” that predate the launch of the IC. However, it must be stressed that this is an opt-in. Even with these solutions in place, there is a risk that people will treat mutable canisters as immutable smart contracts and fall victim to a rug pull. We would be interested in feedback whether this is an acceptable risk.
[/quote]

-------------------------

lastmjs | 2021-09-16 12:41:39 UTC | #73

If canisters can break out of the Wasm sandbox, then the logic verification doesn't matter.

-------------------------

lastmjs | 2021-09-16 12:44:52 UTC | #74

I echo that basically all functionality necessary for this seems to be available now. You can check the controller of a canister, you can retrieve the hash of its Wasm binary, and...well this is the part that might not exist and is where the service come in: developers need to publish source code and provide an easily reproducible build.

I agree this is probably more of an application layer concern for someone possibly outside of the Foundation to tackle.

-------------------------

lastmjs | 2021-09-16 12:46:42 UTC | #75

I'm sorry to be spamming the forum, but if someone could give me some insight into how involved and especially how long canister sandboxing might take, that would be great. I am waiting to vote based greatly off of this information

-------------------------

diegop | 2021-09-16 21:04:24 UTC | #76

This is a very valid question. Let me ping to see which engineers or researchers are working on this to give a proper "order of magnitude" estimate.

-------------------------

lastmjs | 2021-09-16 22:13:45 UTC | #77

I've voted no on this proposal mostly to make a point about security. If there is an obvious vulnerability that could lead to catastrophe, and an obvious solution, I think the priority should be to patch that vulnerability.

I would like to see canister sandboxing per process before deploying these features.

The same sentiment is reflected in this proposal: https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/56

-------------------------

skilesare | 2021-09-16 23:09:40 UTC | #78

I’ll take this post as an opportunity to note that we could move quicker on some of this if we had a test net to deploy to.

I voted yes but generally agree with @lastmjs. You guys should put a canister out there with a bunch of icp in it and see what happens. And by a bunch I mean like $1M. You need something that is going to attract the bug. It would be well worth the lost value if someone kills it or steals it.

-------------------------

JensGroth | 2021-09-17 06:04:12 UTC | #79

ICP transactions are recorded on the ledger as is done now. So you can still check that you have made a payment to a canister. What does not go onto the ledger is when the controller of a canister changes.

-------------------------

JensGroth | 2021-09-17 06:39:46 UTC | #80

Wrt your suggestions:

* We're currently conducting two internal security analysis efforts, and intend to make the implementation proposal only once they are complete

* We have been working with 3rd party companies to review security of all parts of the IC. We are considering whether parts related to ICP on canister should be a priority for the next round, but it takes time (weeks up to a few months) to slot in.

* We are working on a bug bounty program

* I'd guess sandboxing to take several months (meta: I'll take the feedback from this thread as a vote to give it high priority)

-------------------------

stephenandrews | 2021-09-17 08:10:07 UTC | #81

Are we saying that the rollout plan is to be extended until the end of sandboxing? I.e. even if the vote passes, it is unlikely to have the code updated by the Week of September 27, 2021 (as per the timeline above)?

-------------------------

dpdp | 2021-09-17 08:14:33 UTC | #82

It sounds to me like yes. It would open non custodian ICP (and other NFTs) trading.

-------------------------

mparikh | 2021-09-17 09:15:40 UTC | #83

There's already a (ROM) $30m honeypot in IC.


[quote="mparikh, post:54, topic:6147"]
I would anticipate that TODAY we have close to $30 m in just NFT assets that are under risk
[/quote]

-------------------------

JensGroth | 2021-09-17 09:36:04 UTC | #84

Our proposed plan is to not wait for sandboxing and roll out soon, but remind everybody that the IC is still in beta and recommend experimenting only with small amounts of ICP on canisters.

-------------------------

mparikh | 2021-09-17 09:38:54 UTC | #85

Please see here for why no one will buy : ..."but it was beta"...

https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/61?u=mparikh

-------------------------

Maxfinity | 2021-09-17 11:36:34 UTC | #86

[quote="JensGroth, post:53, topic:6153"]
Agree with your wish for tooling to understand the deployment of canisters: can it be updated, what are properties of the subnet it runs on, etc. Happy whether it comes from the foundation or the broader community.
[/quote]

I understand you probably realise this, but isn't the issue that some party over a long period of time, say 12 months, could find the owners of node providers and bribe them to run a different consensus mechanism. By shuffling you mitigate this long-term threat? Thanks.

-------------------------

polkdot | 2021-09-17 14:17:04 UTC | #87

how to submit mg propasol

-------------------------

Jan | 2021-09-17 20:24:17 UTC | #89

Thanks for bringing this up! We are doing prep work for this right now and will put it up as a roadmap item in the coming days.

-------------------------

diegop | 2021-09-17 21:12:23 UTC | #90

**Update**: Motion passed

https://medium.com/dfinity/motion-proposal-to-enable-canister-smart-contracts-to-transfer-icp-tokens-is-approved-77929df4aefb

-------------------------

lastmjs | 2021-09-17 21:35:30 UTC | #91

Great to hear! I'm not sure which post you're replying to, was it this one? https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/77

-------------------------

diegop | 2021-09-17 21:17:51 UTC | #92

(I suspect you may have copied/pasted the wrong URL)

But fwiw I know Jan is referring to this post: https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/77?u=diegop

-------------------------

lastmjs | 2021-09-17 21:36:03 UTC | #93

Haha, yes definitely the wrong url :)

-------------------------

northman | 2021-09-17 23:54:53 UTC | #94

Thanks for the clarification.

-------------------------

hcb | 2021-09-20 12:58:20 UTC | #95

Sandbox for canister wasm execution is under way. The primary difficulties are a) the architectural changes to make it performant and b) disentangling the canister API such that no security-critical operations remain in the sandboxed process. The focus for initial version being implemented right now is functional correctness, disregarding performance requirements for the sake of correctness validation at first, and will therefore in all likelihood never be launchable on production network. We are committed to having sandbox launched well within this year still. More details and updates will become available in the following weeks as prototypes and designs finish.

-------------------------

lastmjs | 2021-09-20 15:12:22 UTC | #96

This is excellent, thank you

-------------------------

Maxfinity | 2021-09-21 00:08:17 UTC | #97

[quote="skilesare, post:78, topic:6153"]
I voted yes but generally agree with @lastmjs. You guys should put a canister out there with a bunch of icp in it and see what happens. And by a bunch I mean like $1M. You need something that is going to attract the bug. It would be well worth the lost value if someone kills it or steals it.
[/quote]

Completely agree. Canaries are needed.

-------------------------

diegop | 2021-09-21 03:45:09 UTC | #98

**Update**: we have a new thread for security sandboxing. We hope this will pick up speed shortly with more concrete plans.

https://forum.dfinity.org/t/security-sandboxing-community-consideration/7438

-------------------------

mparikh | 2021-09-21 06:09:50 UTC | #99

Unbelievable!! The velocity with which we are executing as a team with careful thoughtfulness is great to see!

-------------------------

tnpxu | 2021-10-05 10:17:19 UTC | #100

**bump** *** I just want to know when the proposal will be implemented (personally, I'm looking forward to this feature).

-------------------------

Fulco | 2021-10-05 11:11:14 UTC | #101

A bit late but I don't think the canister controller is really what matters with regards to money laundering.

Somebody could make an alternative ledger on another subnet with wrapped ICP tokens which doesn't record the transactions but just executes them.

-------------------------

