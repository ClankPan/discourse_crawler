sat | 2023-10-27 16:33:45 UTC | #1

Hello there!

We are happy to announce that voting is now open for [a new IC release ](https://github.com/dfinity/ic/commits/release-2023-10-25_23-01).
The NNS proposal is here: [IC NNS Proposal 125342 ](https://dashboard.internetcomputer.org/proposal/125342).

Here is a summary of the changes since the last release:
* [[1f1f92959](https://github.com/dfinity/ic/commit/1f1f92959)] Consensus: feat(consensus,backup): Remove hashes from the backed up artifact names
* [[daeb71b7f](https://github.com/dfinity/ic/commit/daeb71b7f)] Consensus: fix: Use the same minimum chain length for consensus and certification
* [[6d3be90c1](https://github.com/dfinity/ic/commit/6d3be90c1)] Crypto: chore: Correct renamed function name in docs
* [[930bf0eda](https://github.com/dfinity/ic/commit/930bf0eda)] Crypto: chore: Fix typo in function name
* [[3730aae62](https://github.com/dfinity/ic/commit/3730aae62)] Crypto: feat(cketh): Limit number of parallel operations in withdrawals ckETH -> ETH
* [[c3db1dc4c](https://github.com/dfinity/ic/commit/c3db1dc4c)] Crypto: feat: Only acquire SKS write lock when necessary for NI-DKG retain
* [[ad4d94cbf](https://github.com/dfinity/ic/commit/ad4d94cbf)] Crypto: perf: Faster verification of discrete logarithm equality and product proofs
* [[61231a3ab](https://github.com/dfinity/ic/commit/61231a3ab)] Crypto: perf: Take advantage of k256 MulByGenerator
* [[255265d14](https://github.com/dfinity/ic/commit/255265d14)] Crypto: refactor: add DomainSeparator instead of many constants and check for duplicates/prefixes
* [[b7deb9cd7](https://github.com/dfinity/ic/commit/b7deb9cd7)] Execution: chore: clarify log message
* [[77659e877](https://github.com/dfinity/ic/commit/77659e877)] Message Routing: chore: Pass overlay files to PageMap::open
* [[156f47297](https://github.com/dfinity/ic/commit/156f47297)] Message Routing: feat: hash_of_map supports nested Map
* [[db7cd6c94](https://github.com/dfinity/ic/commit/db7cd6c94)] Networking: build: use the tokio version from the workspace
* [[6e83a17ea](https://github.com/dfinity/ic/commit/6e83a17ea)] Networking: chore(p2p-consensus): Disable Pushing of artifacts that are relayed.
* [[a152fa88d](https://github.com/dfinity/ic/commit/a152fa88d)] Networking: chore(p2p-consensus): Skip missed ticks in event loop
* [[297f119a1](https://github.com/dfinity/ic/commit/297f119a1)] Networking: chore: remove the CanisterHttpAttribute and use the full share as the key of the pool
* [[896c9017b](https://github.com/dfinity/ic/commit/896c9017b)] Networking: chore: remove the optimization that delays the addition of validated DKG artifact to the block
* [[bf7135051](https://github.com/dfinity/ic/commit/bf7135051)] Networking: chore: update the two dashboards to have the same json model as the prod dashboards
* [[e4e3b1c5f](https://github.com/dfinity/ic/commit/e4e3b1c5f)] Networking: feat(state_sync_manager): prefer peers with fewer outstanding chunk requests
* [[221b22685](https://github.com/dfinity/ic/commit/221b22685)] Networking: fix(p2p-consensus): Populate send view on startup from validated pool
* [[d71613ced](https://github.com/dfinity/ic/commit/d71613ced)] Networking: fix(transport): Don't hold peer state lock across TLS handshake
* [[2e3589427](https://github.com/dfinity/ic/commit/2e3589427)] Networking: fix: Revert "dbf1b2039d chore: Remove the filter templating and use directly the height"
* [[d84a1cecd](https://github.com/dfinity/ic/commit/d84a1cecd)] Networking: fix: Revert "feat(consensus): Don't relay shares during retransmissions"
* [[687d7830d](https://github.com/dfinity/ic/commit/687d7830d)] Networking: fix: don't expose publicly the production NNS_SUBNET_ID
* [[62401dd27](https://github.com/dfinity/ic/commit/62401dd27)] Networking: refactor: rename CertifiedStateReader to CertifiedStateSnapshot
* [[ac9caa930](https://github.com/dfinity/ic/commit/ac9caa930)] Node: Add orchestrator task watching for HostOS upgrades
* [[d3a004e01](https://github.com/dfinity/ic/commit/d3a004e01)] Node: Avoid a div by zero during upgrades
* [[eda91b67b](https://github.com/dfinity/ic/commit/eda91b67b)] Node: Chore: Remove unnecessary ARM firmware
* [[82f2c35cb](https://github.com/dfinity/ic/commit/82f2c35cb)] Node: HostOS upgrade follow-ups
* [[d404e2885](https://github.com/dfinity/ic/commit/d404e2885)] Node: Ignore errors from old VSOCK code
* [[617325f64](https://github.com/dfinity/ic/commit/617325f64)] Node: Wipe more headers when clearing disks in SetupOS
* [[a23727abb](https://github.com/dfinity/ic/commit/a23727abb)] Node: feat(): Ensure determinism in tar commands
* [[840e08501](https://github.com/dfinity/ic/commit/840e08501)] Node: feat(): Remove pcsc-tools package
* [[7353e3e80](https://github.com/dfinity/ic/commit/7353e3e80)] Runtime: , Change arguments of system_api host functions to unsigned
* [[c812b557f](https://github.com/dfinity/ic/commit/c812b557f)] Runtime: Enable new instrumentation on verified app subnets.
* [[a5e741d51](https://github.com/dfinity/ic/commit/a5e741d51)] Runtime: Implement InstallChunkedCode
* [[bae0f8a22](https://github.com/dfinity/ic/commit/bae0f8a22)] Runtime: Remove unnecessary panic in wasmtime embedder
* [[15da2e805](https://github.com/dfinity/ic/commit/15da2e805)] Runtime: Track query stats for each canister individually when doing composite query calls
* [[074f6d16f](https://github.com/dfinity/ic/commit/074f6d16f)] Runtime: fix: Set the weight of a Wasm function prologue to 1 instead of 0
* Various tech-debt management: code refactoring, docs, bug fixes, test updates

Link to the forum post: https://forum.dfinity.org/t/voting-for-a-new-ic-release-4ee6971/24044

# IC-OS Verification

To build and verify the IC-OS disk image, run:

```
# From https://github.com/dfinity/ic#verifying-releases
sudo apt-get install -y curl && curl --proto '=https' --tlsv1.2 -sSLO https://raw.githubusercontent.com/dfinity/ic/4ee6971d99024a38e06e4ab72119d0139dd6dd85/gitlab-ci/tools/repro-check.sh && chmod +x repro-check.sh && ./repro-check.sh -c 4ee6971d99024a38e06e4ab72119d0139dd6dd85
```

The two SHA256 sums printed above from a) the downloaded CDN image and b) the locally built image, must be identical, and must match the SHA256 from the payload of the NNS proposal.

-------------------------

sat | 2023-10-27 16:34:42 UTC | #2

And a follow-up proposal for the build with QUIC-enabled p2p layer:

https://dashboard.internetcomputer.org/proposal/125343

-------------------------

wpb | 2023-10-29 21:03:50 UTC | #3

Reviewers for the CodeGov project have completed our review of these replica updates.

Proposal ID: **125343**
Vote: **ADOPT**
Full report: [CodeGov portal on DSCVR](https://dscvr.one/post/1197961714254566328/nns-proposal-125343) 

Proposal ID: **125342**
Vote: **ADOPT**
Full report: [CodeGov portal on DSCVR](https://dscvr.one/post/1197961714254566327/nns-proposal-125342) 

Neuron: CodeGov
NeuronID: 2649066124191664356
Voting history: [Dashboard](https://dashboard.internetcomputer.org/neuron/2649066124191664356?vh-s=100&vh-topic=TOPIC_REPLICA_VERSION_MANAGEMENT)
Website: codegov.org

At the time of this comment on the forum there are still 2 days left in the voting period, which means there is still plenty of time for others to review the proposal and vote independently.

Further summary details will be posted soon...

-------------------------

wpb | 2023-10-29 21:56:37 UTC | #4

Hey @sat there may be several improvement opportunities that were identified by the CodeGov team.  We adopted both proposals, but there is at least one item that we want to bring to your attention could be an important issue worth escalating.  We recommend that DFINITY assess further and consider rejecting these proposals.  One of our reviewers, @cyberowl, **REJECTED** proposal 125342 because of an error he found in the code of a consensus update that he felt could be a significant issue.  There were several other issues identified with this particular commit by several CodeGov reviewers.  

![image|687x488](upload://ep7uRt4mpU5ocHRipWBeGMnbowN.png)

Please see the list below for all improvement opportunities identified by the CodeGov team.  

We also noticed that DFINITY picked up several if the issues we identified last week and corrected them this week.  That was nice to see.

[[1f1f92959](https://github.com/dfinity/ic/commit/1f1f92959)]
Category: Consensus
Comment by @cyberowl 
- It worries me that `block_proposalbin` is wrong. It should be `block_proposal.bin` . I don't know the implications but need to be extra harsh because it is under consensus topic.

Comment by @Zane 
- it appears there is a typo at line: `1553` , `block_proposalbin` , should be `block_proposal.bin`

Comment by @ilbert 
- The backup helper now passes `--ignore-existing` to `rsync` command. This skips updating files on the receiver. Not clear how this relates to removing hashes from artifact names.

Comment by @massimoalbarello 
- each artifact at a given height is stored in a bin file named with only the artifact specific name. However, they did not update the documentation of the `file_location` function accordingly.

[[2e3589427](https://github.com/dfinity/ic/commit/2e3589427)]
Category: Networking
Comment by @Zane 
- This appears to be identical to `c2e5826a7` from last week, no idea why this commit has been reverted twice. The expanded commit description also seems to confuse this revert with the one in `d84a1cecd`

Comments by @ilbert 
- The MR message is wrong. This MR is reverting [dbf1b20](https://github.com/dfinity/ic/commit/dbf1b2039d5ff8ae7c798e96741ca496477d0f01) (even if it was already done in the previous proposal, see [c2e5826a7](https://github.com/dfinity/ic/commit/c2e5826a7) not [d1ac316](https://github.com/dfinity/ic/commit/d1ac31621fca8d3251b851711d21d98c0f9aaddb) as stated).
- It’s not clear why [dbf1b20](https://github.com/dfinity/ic/commit/dbf1b2039d5ff8ae7c798e96741ca496477d0f01) commit has been reverted two times now.

[[d84a1cecd](https://github.com/dfinity/ic/commit/d84a1cecd[:](https://github.com/dfinity/ic/commit/d84a1cecd:))]
Comments by @ilbert 
This MR reverts [d1ac316](https://github.com/dfinity/ic/commit/d1ac31621fca8d3251b851711d21d98c0f9aaddb) as stated instead. Not clear why this commit has been reverted though.

[[3730aae62](https://github.com/dfinity/ic/commit/3730aae62[:](https://github.com/dfinity/ic/commit/3730aae62:))]
Comments by @ilbert 
- Not explained why we need to limit the parallel operations of the cketh minter canister, but I believe to have some sort of “rate limiting”.
- I wasn’t able to find the piece code that does what’s stated in the 3.4 bullet point: `The frequency of the timer will double (3min instead of 6min) as long as there is still work to do.`


[[62401dd27](https://github.com/dfinity/ic/commit/62401dd27[:](https://github.com/dfinity/ic/commit/62401dd27:))]
Comments by @ilbert 
- The variables at lines: [R167](https://github.com/dfinity/ic/commit/62401dd27#diff-a1b5578c4a14d2f60422ac01e31cd3cc4e8670d047547aff348f8ebcbf6481cdR167), [R169](https://github.com/dfinity/ic/commit/62401dd27#diff-a1b5578c4a14d2f60422ac01e31cd3cc4e8670d047547aff348f8ebcbf6481cdR169), [R144](https://github.com/dfinity/ic/commit/62401dd27#diff-88b234a5aa9ff856b825ba5720c059c91026034a716823de4bfa57cd8cd41199R144), and [R146](https://github.com/dfinity/ic/commit/62401dd27#diff-88b234a5aa9ff856b825ba5720c059c91026034a716823de4bfa57cd8cd41199R146) should be called `*snapshot` instead of `*reader`.

-------------------------

Zane | 2023-10-30 13:25:26 UTC | #5

After giving it more thought, I believe the block proposal typo in `1f1f92959` is actually intentional, the subsequent assert! statement is only satisfied if the path doesn't exist, which it shouldn't due to the incorrect argument. However, it seems that the error messages have been mixed up.

-------------------------

ZackDS | 2023-10-30 13:43:34 UTC | #6

Just to bump this out of curiosity since it was already executed it looks like nothing critical since the example they gave from testing seems to work as intended, I would guess it's more of a refactoring typo since the `assert!()` macro uses the  !proposal_path.exists(), and would  fail, indicating that the backup of the non-final proposal failed in case the file exists.
So yeah feedback much appreciated @sat . Thanks

-------------------------

sat | 2023-10-30 14:04:45 UTC | #7

I reached out to the component teams, it's best if they respond here directly. Thanks for the pedantic review, keep up the good work!

-------------------------

gregory-demay | 2023-10-30 14:37:16 UTC | #8

About commit [3730aae](https://github.com/dfinity/ic/commit/3730aae62) commented by @ilbert 

> * Not explained why we need to limit the parallel operations of the cketh minter canister, but I believe to have some sort of “rate limiting”.

The number of operations involved for withdrawals is rate-limited to ensure that there is not a huge queue of transactions that will take a very long time to be processed. This is because each withdrawal involves a threshold ECDSA signature + 1 HTTP outcalls to send the transaction via JSON-RPC.

> * I wasn’t able to find the piece code that does what’s stated in the 3.4 bullet point: `The frequency of the timer will double (3min instead of 6min) as long as there is still work to do.`

This point refers to [this](https://github.com/dfinity/ic/commit/3730aae62#diff-218f5f0700b135a89303ab20003e5a4ad360feecdae79076ed34f01b5cbfede3R34) line in particular, where the interval for retrial defined by `PROCESS_ETH_RETRIEVE_TRANSACTIONS_RETRY_INTERVAL` is 3 minutes (instead of 6 minutes for the "regular" interval `PROCESS_ETH_RETRIEVE_TRANSACTIONS_INTERVAL`).

Thanks for the careful review! Don't hesitate to let me know if some things are still unclear related to this topic.

-------------------------

rumenov | 2023-10-30 14:39:15 UTC | #9

Hi folks, I would like to address the question related to the commits in the "Networking" category.

As @ilbert correctly commented, the MR messaging indeed was wrong for [2e3589427](https://github.com/dfinity/ic/commit/2e3589427). Indeed the MR is reverting [dbf1b20](https://github.com/dfinity/ic/commit/dbf1b2039d5ff8ae7c798e96741ca496477d0f01). I apologise for the mistake.

As with respect to why it is reverted twice. We had problems with release qualification. So we had to revert the offending MR both on the branch that we wanted to rollout out and on the branch that is used for releasing new features.

Please let me know if you have more question,

Rosti

-------------------------

christian | 2023-10-30 15:08:05 UTC | #10

Hi Wenzel, thank you for highlighting the issues and well done on establishing a productive external review group! 🙏

Regarding the finding from @cyberowl: nice catch! There is no bug in the actual consensus code, but the test was passing for a wrong reason. We, the consensus team, fixed the test already: the fix will appear soon on the public github repository.

Thanks again, please keep up this great work!

-------------------------

