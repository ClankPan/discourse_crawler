skilesare | 2023-05-22 21:02:56 UTC | #1

This is the sixth bounty in a series of bounties we are releasing this week in the run-up to [Motoko Bootcamp](https://www.dfinitycommunity.com/motoko-bootcamp/). Winners of the Bootcamp’s Intermediate level will get the first crack at selecting one of these bounties to complete.

# CBOR and Candid Motoko Parser - #19

## Current Status: Discussion

* Discussion (02/27/2022)
* Ratification 
* Open for application
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2022/02/22/CBOR-and-Candid-Motoko-Parser.html)

## Bounty Details

* Bounty Amount: $3,000 USD of ICP at award date - $3000 USD of ICP Match Available
* ICDevs.org DFINITY Foundation Grant Match Available: $3000 USD of ICP at award time - (For every ICP sent to d0e3be904a939ff752979aaa53cfb66fac8d75b85ce4fa878e147d60706be6ed, ICDevs.org will add $125 USD of ICP at award date to the bounty, up to the first 24 ICP donated, After 24 ICP, donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)
* Project Type: Single Contributor
* Opened: 02/20/2021
* Time Commitment: Days
* Project Type: Library
* Experience Type: Intermediate - Motoko
* Issue Type: Motoko Library

## Description

This bounty gives the opportunity to

* learn how CBOR encoding works
* learn how candid works
* learn how call_raw works in motoko

The goal of this bounty is to produce two motoko libraries.

More info about CBOR can be found at:

[https://cbor.io/](https://cbor.io/)

An example of cbor library can be found at:

[https://github.com/hildjj/node-cbor/tree/main/packages/cbor/lib](https://github.com/hildjj/node-cbor/tree/main/packages/cbor/lib)

DFINITY uses CBOR in the agent-js library as well. The implementation can be found at [https://github.com/dfinity/agent-js/blob/main/packages/agent/src/cbor.ts](https://github.com/dfinity/agent-js/blob/main/packages/agent/src/cbor.ts)

Github user Nomeata has done some cbor(only on binaries) at [https://github.com/nomeata/motoko-certified-http](https://github.com/nomeata/motoko-certified-http) which may demonstrate some good paterns for parsing and constructing CBOR.

We need a CBOR library in motoko because the new call_raw functionality allows a motoko canister to receive Binary Represented data from a server.  A wallet may want to filter this call and decide if it wants to pass it on to another IC service by data inside the encoded representation.  The cbor plug in will allow a wallet author to inspect the payload and make decisions about the call.

The opposite is also possible, where a wallet may want to be able to construct a payload for call raw using an uploaded candid definition for a service that did not exist when the wallet was minted.

Once CBOR is decoded it needs to be synced with the cadid representation of the service it was encoded for. If you want to be able to tell what property is what in your function call package you need to know the candid that was used to encode the package.  

The Candid parsing logic can be found for the agent-js library at: [https://github.com/dfinity/agent-js/blob/main/packages/candid/src/candid-core.ts](https://github.com/dfinity/agent-js/blob/main/packages/candid/src/candid-core.ts)

These libraries will often be used together to parse and encode binary data.

The developer is welcome to attempt to refactor the Candy Library at [https://github.com/aramakme/candy_library](https://github.com/aramakme/candy_library) to host the candid parser as that was one of the initial intents of that library.

A full set of tests should be implemented.

The package should be deployed as a vessel package.

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to d0e3be904a939ff752979aaa53cfb66fac8d75b85ce4fa878e147d60706be6ed.  ICDevs will match the bounty 5:1 for the first 24 ICP out of the DFINITY grant and then 0.25:1 after that.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has be been given and the bounty is closed.

# Matches

DFINITY Foundation Grant: - $3000 USD of ICP at award date


[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

tomijaga | 2022-06-09 08:36:03 UTC | #2

Hey, I looked into the `call_raw` method, and it seems the Blob data is the binary representation of candid and not **CBOR** as the candid blob maps its data types to this [format](https://github.com/dfinity/candid/blob/master/spec/Candid.md#types), which is different from the types specified for **CBOR**. 

Instead of producing two libraries, I think there could be a single one that encodes the data from the `candy_library` types to `Blob` and then parses the `Blob` back to the `candy_library` types

-------------------------

tomijaga | 2022-06-29 23:50:44 UTC | #3

Hey @skilesare, I would like to apply for this bounty! 
I plan to write the encoding and parsing functions in the `candy_library` repo.

I have a few questions: 
- Currently, the `#class` type is used to identify general types with a field and a value. This is a problem because the `variant` and `record` types would be mapped to the `#class` type when parsing. To differentiate between these types, I would be replacing the `#class` type with two new types: `#variant` and `#record`. I'm worried that this will break the existing code. What do you think would be a good way to go about this?

- How can I convert Floating types to bytes in Motoko? I can't seem to use bit operations on Float types, but I can do so with `Int` and `Nat` types by converting them to `Int64` and `Nat64`.

The estimated timeline for the project is one month.

-------------------------

skilesare | 2022-07-02 13:54:20 UTC | #4

Let’s discuss the replacing of class. I’m not sure I understand. Do you mean that candid has a #class? What would be your proposal for that structure?  Sounds like some great features!

I think from some discussions we may not need cbor, and some of this may be coming in motoko as a native library. On Tuesday I can look at it more.


I have been looking at adding a dictionary using stableRBtree.

-------------------------

icme | 2022-07-03 15:26:10 UTC | #5

I’ve been using this and it works very well https://github.com/dfinity/motoko/releases/tag/0.6.28

Here is the PR https://github.com/dfinity/motoko/pull/3155

-------------------------

Gekctek | 2022-07-27 03:24:28 UTC | #6

Is this still up for grabs? I've been looking for a project to get deeper with motoko.
I did similar work with Candid/Cbor with https://github.com/Gekctek/ICP.NET
Most of it was candid implementation with a cbor library, but after doing so much manual binary decoding, I think im ready for some more.

I have something i just started up to create a motoko libarary.  https://github.com/Gekctek/motoko_cbor

My thought is I was going to create a couple libraries, one for cbor, one for candid.

Are there any use cases I should work toward besides the call_raw? Im thinking just a very generic library for reading/writing bytes will be good for all cases.

-------------------------

skilesare | 2022-07-27 11:58:53 UTC | #7

Yes! Those would be great….I have another bounty that could some of this as well. As soon as I get it approved I’ll let you know.

One interesting use case is to have a canister produce the cbor that needs to be relayed to the network from an t-ecdsa signed message. Once we have http requests, a canister would be able to send signed messages to the replica endpoint itself.

-------------------------

Gekctek | 2022-07-28 05:46:58 UTC | #8

I should have something usable within the next few days. Im almost done with basic cbor reading right now, but trying to solve a few issues like Float creation from bytes and a good serializer pattern.

Its fun to work in code that has almost no libraries, get to write everything from scratch. The wild west of coding right now lol

-------------------------

Gekctek | 2022-07-30 07:07:40 UTC | #9

I was hoping to have something to have reviewed this weekend but my wife is going into labor for our first child, so i doubt I'll have time lol

-------------------------

skilesare | 2022-07-30 11:43:07 UTC | #10

Ha! See you in a couple of months. 😀 Enjoy this moment and congrats!

-------------------------

Gekctek | 2022-08-08 00:25:52 UTC | #11

Had a few moments between nap times (mine and his) and was able to get the basic functionality done.

I don't know how this bounty process works but this would probably be a good time for a initial review. I have implemented `bytes -> cbor object` and `cbor object -> bytes` but there is no custom type serialization, its all a manual process.
I have put basic information in the README along with some TODOs

Im curious if anyone has thoughts on how to implement the custom seriliazation. My world has been .NET and that was much different than this. I don't see any concept of reflection, so im trying to figure out the best way to go forward.

https://github.com/Gekctek/motoko_cbor

-------------------------

skilesare | 2022-08-08 12:07:51 UTC | #12

[quote="Gekctek, post:11, topic:11398"]
I don’t see any concept of reflection
[/quote]

We've discussed this before at https://forum.dfinity.org/t/improving-motokos-programmability/10952/14?u=skilesare

I really wish it was natively in the motoko runtime as it would make tasks like this much easier.  This library will get us a long way there.  It is going to be integral to some of the upcoming bounties as well.

-------------------------

skilesare | 2022-08-08 12:17:51 UTC | #13

> // TODO is there a way to convert a Nat to an Int directly?

A Nat is a sub-type of Int so you don't have to convert it. :)

-------------------------

skilesare | 2022-08-08 12:22:42 UTC | #14

Any ideas for a good integration test?  Are we at the point where we could encode something like a balance request and check the cbor generated against the cbor in a network request from agent.js?

Or better yet...maybe we could just grab one of those and decode them.  Maybe I'll set up a motoko playground later and try it out.

-------------------------

Gekctek | 2022-08-09 19:07:03 UTC | #15

I love this structural typing concept in Motoko but its taking a minute for my mind to adjust. Keep thinking in terms of inheritance and casting

-------------------------

Gekctek | 2022-08-09 19:09:54 UTC | #16

Yes and no. The way to do it right now requires a manual step of converting motoko types/classes into a 'cbor value' which is just a variant of all the cbor major types. Once its in the form of the 'cbor value' it can encode/decode just fine
My next step is to remove that manual process, so ill take a look at the candy_library you linked and see what i can do

-------------------------

tomijaga | 2022-08-17 05:33:58 UTC | #17

I think you might find this helpful. [My attempt at writing a cbor library ](https://github.com/NatLabs/CandidBlob/blob/main/src/Encode.mo). I didn't complete it, but I was able to write methods to encode most of the `candid_library` types to cbor except for `Float`.

-------------------------

Gekctek | 2022-08-09 20:41:36 UTC | #18

Nice. Ty.
Ya floats were a pain

-------------------------

Gekctek | 2022-08-09 21:02:26 UTC | #19

@skilesare 
Alright I think I need clarification on a few things because im confusing myself

1) Is the CBOR encoding a custom thing vs the HTTPS interface?
From what I understand the CBOR is encoded/decoded in the boundry nodes and doesn't touch the canister itself. From the tests/examples I have seen for `call_raw`, the encoding is just the raw candid, not cbor. Is there going to be CBOR inside the candid in blob form?

2) Looking at the `candy_library` i get what is happening, allowing the ability to look at properties/meta data of the data itself. BUT what i don't get is how it goes from a motoko value to a candy value. It seems like its just a manual process, similar to what im doing with Cbor values, where its just a variant storing motoko types with some meta data. Am I understanding it correctly or am I missing something.

3) How exactly do we want the code to look like with converting to and from cbor in the `call_raw` method. I see in the description we want to be able to inspect whats inside or build cbor based on a definition, but I think Im having troubling picturing it. For `construct a payload for call raw using an uploaded candid definition` what does the definition look like? Is it a `*.did` file? If so is the idea to parse that file, build some kind of descriptor data for it, then use that for validation and creation of candid models? Thats also where im confused because im not sure what that has to do with CBOR, seems like a candid thing.

Any help would be great because im going in circles. 
I think some sort of pseudo code of the `call_raw` function of what you expect/want would be helpful as well.

-------------------------

Gekctek | 2022-08-13 06:14:58 UTC | #20

Starting the candid portion in a different project
https://github.com/Gekctek/motoko_candid
Will work similarly to have I have the CBOR where I will take the Blob and create a candy_library like model holding the candid value/type meta data

-------------------------

skilesare | 2022-08-14 14:00:24 UTC | #21

Sweet. I’ll try to get to your questions later today….sorry for the delay.

-------------------------

Gekctek | 2022-08-14 18:21:58 UTC | #22

No worries. Have baby duties occupying most of my time and have the candid work ongoing

-------------------------

Gekctek | 2022-08-23 17:10:00 UTC | #23

I have been pulled down a rabbit hole this week.
I needed to have a better system for encoding/decoding numbers along with having floats with different precisions. So I have moved all the work i have done already for those and much more to 
https://github.com/Gekctek/motoko_numbers
Where this will be a referenced project in both the cbor and candid encoders.
I have it setup for the cbor project and now im going back to the candid project. Should be much easier since I already have implemented LEB128 encoding in the numbers project.
Dealing with 1's and 0's in long bit streams and bytes along with different endian-nesses can really destroy one's mind.

-------------------------

skilesare | 2022-08-24 00:50:03 UTC | #24

You are a rock star! Fun things down those rabbit holes. 😀

-------------------------

Gekctek | 2022-08-30 22:10:24 UTC | #25

Just wanted to give an update
Im close on the candid project
Have done all the 'encoding' except for the func/service, plus a couple TODOs/polish, but its in a good state with all my tests passing
Still need to do the 'decoding' from bytes but that shouldn't take as long now I have the structure
https://github.com/Gekctek/motoko_candid

Any updates on my questions above?

-------------------------

Gekctek | 2022-08-31 05:50:06 UTC | #26

Actually the Decoder was much easier than I expected and its in a similar situation as the encoder where its mostly done but needs some edge cases/polish and fixing a few broken tests.

I guess this would be a good time to figure out if the library is structured in the way we need and handle any initial reviews.
How is the review process going to work?

-------------------------

Gekctek | 2022-09-09 05:30:22 UTC | #27

Alright @skilesare  (forgot to tag you in previous comments, oops) Candid, Cbor and Numbers projects are ready to go/be reviewed. They are all working with all tests passing. There are a few TODOs here and there but should be fully functional. Each README should have at least some usage code for it 

https://github.com/Gekctek/motoko_candid
https://github.com/Gekctek/motoko_cbor
https://github.com/Gekctek/motoko_numbers

-------------------------

icme | 2022-09-09 07:53:41 UTC | #28

@Gekctek Thanks for working on these - looking forward to digging in!

Shout out to some Motoko people that might want to glance at these :slightly_smiling_face: 

@kentosugama @chenyan @matthewhammer

-------------------------

skilesare | 2022-09-09 14:18:42 UTC | #29

Awesome! Will take a look.

-------------------------

skilesare | 2022-09-09 19:11:27 UTC | #30

This is awesome!  We almost have reflection in motoko here:

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1309470690

Maybe the biggest thing for motoko since last week when we got x with y = z; :slight_smile:

-------------------------

Gekctek | 2022-09-09 21:47:52 UTC | #31

Nice. So how does the review process work for this bounty. I have to add a bit more documentation and misc things but not sure how to proceed

-------------------------

skilesare | 2022-09-10 00:56:30 UTC | #32

I think the first thing I see is that you should clear all the warnings unless there is a really good reason not to. Then we just ask for review from the community….probably give a demon during one of the community calls.

-------------------------

Gekctek | 2022-09-10 01:10:26 UTC | #33

Sounds good. I think what I was making sure the main things were all there and no major reworks are needed before I do final cleanup and documentation

-------------------------

Gekctek | 2022-09-13 04:31:03 UTC | #34

@skilesare 
I have updated all the projects will better documentation and did some cleanup

By warnings do you mean the TODOs or are you getting compiler warnings that im not seeing?

-------------------------

skilesare | 2022-09-13 13:49:10 UTC | #35

As far as cleanup goes...for instance when I go to https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1309470690 and compile I see a bunch of warnings about "Warning in file candid/Decoder.mo:254:107 field hash is deprecated: For large `Int` values consider using a bespoke hash function that considers all of the argument's bits."

Maybe this is a new warning coming in a new motoko?  Either way, we should get ahead of it...also any Array.appends should be replaced by buffer logic.

-------------------------

Gekctek | 2022-09-14 00:43:43 UTC | #36

@skilesare 
Weird. I updated my `moc` and `dfx` but i still dont get warnings. ill have to do more investigation but at least the motoko playground works

I updated the Int.hash usage and im not getting anymore warnings now. So it should be good to go now

-------------------------

arifpateldpk | 2022-09-14 08:13:49 UTC | #37

*Nice , Thank You!*    I think you might find this helpful.

-------------------------

