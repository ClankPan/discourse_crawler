princess_eth | 2024-02-03 07:27:17 UTC | #1

I am trying to build a REST API on ICP. 

It seems that you can do this according to https://forum.dfinity.org/t/is-it-possible-to-build-a-rest-api-in-a-canister/5355.

I am testing out the example that allows for an API call using a specific query path: https://github.com/dfinity/examples/tree/master/motoko/http_counter.

In the code, in the `http_request`, if the path URL is '/stream', then it returns a status, body, etc. 

What is the full URL that I would use to navigate to /stream?

On local, I attempted but it returned a 404:

`http://[canisterId].localhost:4943/stream`

I see that when I test out the Candid UI, it is sending a request to:
`http://127.0.0.1:4943/api/v2/canister/[canisterId]/query`

Any pointers would help. Thank you in advance!

-------------------------

skilesare | 2024-02-03 12:38:20 UTC | #2

If you call http_request directly from candid ui you are going straight to the replica. If go want to pull the webpage from your browser you just use the url and the boundary node calls that query for you and pipes the result thru http.

Hard to say why you got a 404. Maybe it wasn't deployed? Or wrong canister id? Did you get a response in candid ui?

-------------------------

princess_eth | 2024-02-05 06:16:47 UTC | #3

Thank you so much for your response!

Here is my goal:

I would like to obtain a GET API with a standard endpoint. Ideally, I would like to access this endpoint using a format such as `http://[canisterId].localhost:4943/stream`.

After reviewing [HTTPS interface specification](https://internetcomputer.org/docs/current/references/ic-interface-spec/#http-interface), it looks like I can send a POST request `/api/v2/canister/<effective_canister_id>/query` with the function details in the body. I tried this but I was unable to get a result.

```
curl --location 'http://127.0.0.1:4943/api/v2/canister/br5f7-7uaaa-aaaaa-qaaca-cai/query' \

--header 'Content-Type: application/x-www-form-urlencoded' \

--data-urlencode 'method_name=http_request' \

--data-urlencode 'request_type=request' \

--data-urlencode 'canister_id=br5f7-7uaaa-aaaaa-qaaca-cai' \

--data-urlencode 'nonce=ba' \

--data-urlencode 'sender=aaaa' \

--data-urlencode 'ingress_expiry=1706993153000'
```

I assume this is what you mean by "pull the webpage from your browser you just use the url and the boundary node calls that query for you and pipes the result thru http."

I'll dig in more. Any feedback that you have would be appreciated!

-------------------------

Severin | 2024-02-05 09:52:14 UTC | #4

If `http://[canisterId].localhost:4943/stream` does not work, then maybe `http://localhost:4943/stream?canisterId=[canisterid]` works instead. But unless you're using Safari both should work. You can see how we do it in CI with `curl` right [here](https://github.com/dfinity/sdk/blob/master/e2e/tests-dfx/assetscanister.bash#L171): `curl --fail -vv http://localhost:"$PORT"/new_file.txt?canisterId="$ID"`

The `/api/v2` endpoint is not what you want to use for a REST API that you talk to via HTTP. It's meant for use with an [agent](https://internetcomputer.org/docs/current/tutorials/developer-journey/level-3/3.4-intro-to-agents/). 

(Hopefully) stupid question: You're deploying your canister to the local network, right? If you deploy to `--network ic` then you'd have to hit `<canister id>.icp0.io` instead

-------------------------

pu0238 | 2024-02-05 12:42:10 UTC | #5

Hey, if you would like to build a REST API easily, you can always use one of the following HTTP routers:

Mokoto - https://github.com/krpeacock/server
Rust - https://github.com/pu0238/pluto

-------------------------

princess_eth | 2024-02-06 01:46:52 UTC | #6

Thank you so much for the suggestion. Is there any technical superiority in using these HTTP routers?

-------------------------

Severin | 2024-02-06 08:18:13 UTC | #7

I don't know about pluto, but with Motoko Server you don't have to deal with certification yourself, which can be a big hassle

-------------------------

adrian-d-hidalgo | 2024-02-06 14:36:14 UTC | #8

Did you try using Azle? Azle recently released the possibility to build API Rest, try to start using this example: [https://github.com/demergent-labs/azle/tree/main/examples/express](https://github.com/demergent-labs/azle/tree/main/examples/express)

-------------------------

jdchibuk | 2024-02-06 21:57:59 UTC | #9

@princess_eth 

I managed to get a query response using https://icp-api.io/api/v2/canister
example built from mobile app using setup from https://github.com/kosta-bity/IcpKit
url format: **https://icp-api.io/api/v2/canister/{CANISTER-ID}/query**
have yet to be able to get to submit data to a canister, only have been able to read a function that returns a Nat value

POST request data is sent with format "application/cbor"
https://github.com/kosta-bity/IcpKit/blob/main/Sources/IcpKit/Cryptography/ICPCBORSerialisation.swift

http request builder:
https://github.com/kosta-bity/IcpKit/blob/main/Sources/IcpKit/ICPRequest/ICPRequest.swift

hope this helps - still trying to figure this out myself

-------------------------

princess_eth | 2024-02-06 22:07:39 UTC | #10

Nice! As @Severin mentioned, you should avoid using `https://icp-api.io/api/v2/canister` as it is only meant for the agent to use. 

Have you looked into using `http_response` function? Maybe @kosta, the founder of ICPKit, can provide more insight on how to do this on ICPKit.

-------------------------

kpeacock | 2024-02-06 22:14:19 UTC | #11

This whole website is served off of Motoko server, and the greeting is handled via REST POST requests instead of an agent. 

https://qg33c-4aaaa-aaaab-qaica-cai.ic0.app/

I also think that Azle with Express is going to be exciting, although I don't think they've solved certification yet

-------------------------

princess_eth | 2024-02-07 06:07:24 UTC | #12

Thank you. My code was perfectly fine but I was passing in the wrong canister Id the entire time.  I figured out that I should have done `[id].localhost:4943/stream` instead of `[canisterId].localhost:4933/stream`.

I realized that the id refers to the canister id and canisterId refers to the Candid UI id. I asked another question about that here: https://forum.dfinity.org/t/what-is-the-difference-between-canisterid-and-id/27373.

Hopefully, this helps another developer!

-------------------------

