Dustin | 2023-09-12 12:07:16 UTC | #1

I'm a bit confused by the different version of ICP ledger that seem to be available in the dfinity github and described in the token deployment guide. Hopefully, somebody can help here.

1. Using the "[Deploy new token](https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/deploy-new-token)" guide with the latest release version at the time of writing, I get the `service` part in the candid as below (direct link to candid [here](https://raw.githubusercontent.com/dfinity/ic/3bcccef07408921fe849c92dd2437adc157ef9c3/rs/rosetta-api/icrc1/ledger/ledger.did), respective wasm would be [here](https://download.dfinity.systems/ic/3bcccef07408921fe849c92dd2437adc157ef9c3/canisters/ic-icrc1-ledger.wasm.gz))
```
service : (ledger_arg : LedgerArg) -> {
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_metadata : () -> (vec record { text; MetadataValue }) query;
    icrc1_total_supply : () -> (Tokens) query;
    icrc1_fee : () -> (Tokens) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_balance_of : (Account) -> (Tokens) query;
    icrc1_transfer : (TransferArg) -> (TransferResult);
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
    get_transactions : (GetTransactionsRequest) -> (GetTransactionsResponse) query;
    get_blocks : (GetBlocksArgs) -> (GetBlocksResponse) query;  
    get_data_certificate : () -> (DataCertificate) query;    
    icrc2_approve : (ApproveArgs) -> (ApproveResult);
    icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
    icrc2_transfer_from : (TransferFromArgs) -> (TransferFromResult);
}
```

This is implementing the icrc1/2 standards but doesn't seem to have backwards compatibility with the old ICP ledger version. Also, it's not running with the Dfinity Rosetta docker, as mentioned [here](https://forum.dfinity.org/t/icrc1-block-index/20956/11).

2. When I go directly on github into the `icp_ledger` repo and look at the `ledger.did` of the current `master` branch (link [here](https://github.com/dfinity/ic/blob/0dd3fe15b40fc478e36b0625e072c76c2cac28ba/rs/rosetta-api/icp_ledger/ledger.did)), I find the following `service`

```
service: (LedgerCanisterPayload) -> {
    // Transfers tokens from a subaccount of the caller to the destination address.
    // The source address is computed from the principal of the caller and the specified subaccount.
    // When successful, returns the index of the block containing the transaction.
    transfer : (TransferArgs) -> (TransferResult);

    // Returns the amount of Tokens on the specified account.
    account_balance : (AccountBalanceArgs) -> (Tokens) query;

    // Returns the current transfer_fee.
    transfer_fee : (TransferFeeArg) -> (TransferFee) query;

    // Queries blocks in the specified range.
    query_blocks : (GetBlocksArgs) -> (QueryBlocksResponse) query;

    // Queries encoded blocks in the specified range
    query_encoded_blocks : (GetBlocksArgs) -> (QueryEncodedBlocksResponse) query;
    
    // Returns token symbol.
    symbol : () -> (record { symbol: text }) query;

    // Returns token name.
    name : () -> (record { name: text }) query;

    // Returns token decimals.
    decimals : () -> (record { decimals: nat32 }) query;

    // Returns the existing archive canisters information.
    archives : () -> (Archives) query;

    send_dfx : (SendArgs) -> (BlockIndex);
    account_balance_dfx : (AccountBalanceArgsDfx) -> (Tokens) query;

    // The following methods implement the ICRC-1 Token Standard.
    // https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-1
    icrc1_name : () -> (text) query;
    icrc1_symbol : () -> (text) query;
    icrc1_decimals : () -> (nat8) query;
    icrc1_metadata : () -> (vec record { text; Value }) query;
    icrc1_total_supply : () -> (Icrc1Tokens) query;
    icrc1_fee : () -> (Icrc1Tokens) query;
    icrc1_minting_account : () -> (opt Account) query;
    icrc1_balance_of : (Account) -> (Icrc1Tokens) query;
    icrc1_transfer : (TransferArg) -> (Icrc1TransferResult);
    icrc1_supported_standards : () -> (vec record { name : text; url : text }) query;
    icrc2_approve : (ApproveArgs) -> (ApproveResult);
    icrc2_allowance : (AllowanceArgs) -> (Allowance) query;
}
```
 It's also including icrc1/2 and seems to have backwards compatibility to previous methods (e.g. `transfer`). This looks like it reflects also the code in `/ledger/src/main.rs` of the [same repo](https://github.com/dfinity/ic/blob/0dd3fe15b40fc478e36b0625e072c76c2cac28ba/rs/rosetta-api/icp_ledger/ledger/src/main.rs). 
I can even find the method `tip_of_chain_pb` that is one of the reasons the rosetta docker doesn't properly run in the other version (point 1 above). 


So my questions are
1. How come the wasm/did of the token deployment guide are not backwards compatible?
2. Taken the version from the github repo, it seems to be backwards compatible and should also work with rosetta. Is that the case?
3. How come the two version don't match? Am I looking at the wrong place in the repository?
3. Which version should be used to deploy a new custom token (to then also work with rosetta)?

-------------------------

skilesare | 2023-09-12 14:10:22 UTC | #2

For OGY we use https://github.com/dfinity/ic/tree/master/rs/rosetta-api/icp_ledger

It has this did file that includes the icrc1 and old ledger transfer.

https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icp_ledger/ledger.did

-------------------------

sea-snake | 2023-09-12 14:38:54 UTC | #3

The implementation that's not backwards compatible would be recommended, all new tokens like the SNS tokens should be ICRC-1 without any legacy.

The ICP token has the backwards compatible implementation so it's backwards compatible with all existing infrastructure that's already using the ICP token pre ICRC-1 (dapps, rosetta etc).

As for rosetta compatibility with the new standardized ICRC implementation, ICRC standards for transaction history and indexing are work in progress, which are required to make it work with Rosetta.

-------------------------

Dustin | 2023-09-12 18:45:02 UTC | #4

How come the ICRC1 with legacy is not recommended? Is there any disadvantage to using that version?

-------------------------

sea-snake | 2023-09-12 18:56:51 UTC | #5

This was a personal statement from the viewpoint of reducing implementation complexity and code to maintain and support ðŸ˜…

Also as far as I'm aware the SNS tokens already use the ICRC only implementation.

-------------------------

peterparker | 2023-09-12 18:57:47 UTC | #6

[quote="sea-snake, post:5, topic:22966"]
Also as far as Iâ€™m aware the SNS tokens already use the ICRC only implementation.
[/quote]

Indeed, Snses and ckBTC use "only" ICRC.

-------------------------

Dustin | 2023-09-12 19:02:24 UTC | #7

Are there working Rosetta API docker images for ckBTC and SNS tokens?

-------------------------

peterparker | 2023-09-12 19:10:47 UTC | #8

I don't know. I shared your questions with the team so that someone who knows best can answer.

PS: fun fact, I never used myself the Rosetta API ðŸ˜….

-------------------------

bogwar | 2023-09-12 19:44:45 UTC | #9

Not at the moment. Rosetta for the icrc1-2 ledgers are on our road map though.

-------------------------

