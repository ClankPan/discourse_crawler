asjn3e | 2024-05-31 09:21:06 UTC | #1

Hey everyone, i was going through ecdsa publick key generation api and i found these types
```
#[derive(CandidType, Serialize, Debug)]
struct ECDSAPublicKey {
    pub canister_id: Option<CanisterId>,
    pub derivation_path: Vec<Vec<u8>>,
    pub key_id: EcdsaKeyId,
}

#[derive(CandidType, Deserialize, Debug)]
struct ECDSAPublicKeyReply {
    pub public_key: Vec<u8>,
    pub chain_code: Vec<u8>,
}

```
can someone explain more about **derivation_path** and **chain_code**?

-------------------------

Severin | 2024-05-31 09:25:54 UTC | #2

The derivation path is a way for a canister to have multiple keys. If you want a different key per user of your canister you can e.g. use the user's principal as a derivation path. Think of it like this: Your canister has an infinite amount of keys it can use, and the derivation path is the identifier of the key you want to use

chain code is explained in the [spec](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-ecdsa_public_key):
> The return result is an extended public key consisting of an ECDSA `public_key` , encoded in [SEC1](https://www.secg.org/sec1-v2.pdf) compressed form, and a `chain_code` , which can be used to deterministically derive child keys of the `public_key` .

-------------------------

