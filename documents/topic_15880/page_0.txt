peterparker | 2022-10-13 07:37:11 UTC | #1

What's the correct way to convert an `Array` to `Buffer` in Motoko for both immutable and mutable?

---

- [Documentation](https://internetcomputer.org/docs/current/references/motoko-ref/Buffer) display `Buffer.fromArray` and `Buffer.fromVarArray` but none seem to effectively exists (`Buffer.fromArray - field fromArray does not exist in type`, dfx v0.11.2)

- Functions seem to exists in `main` repo https://github.com/dfinity/motoko-base/blob/7ca5b2c83dacd88ccfc543b297b870b91b730362/src/Buffer.mo#L150

- This [thread](https://forum.dfinity.org/t/buffer-fromarray-missing-from-motoko-base-lib/13746?u=peterparker) mention a PR that was never merged

- This [PR](https://github.com/dfinity/motoko-base/pull/387) introduces `Array.buffer` 

- This [PR](https://github.com/dfinity/motoko-base/pull/389) changes `Array.buffer` to `Buffer.fromArray`

-------------------------

matthewhammer | 2022-10-13 14:18:38 UTC | #2

There are currently module-level functions (not class-level methods) that do each of these:
- https://github.com/dfinity/motoko-base/blob/08507fc9dc425144242434b8fa762c3287077335/src/Buffer.mo#L150
- https://github.com/dfinity/motoko-base/blob/08507fc9dc425144242434b8fa762c3287077335/src/Buffer.mo#L159

Doing it more directly would require changing the `Buffer` class's constructor, so that it takes an array, but that is not planned for any near-term revision to the API, as far as I know.

Related (but doesn't change the answer IIUC) -- @kentosugama has focused a lot of recent attention on improving the `Buffer` API -- See this https://github.com/dfinity/motoko-base/pull/416

-------------------------

kentosugama | 2022-10-13 16:46:14 UTC | #3

Dittoing Matthew's response. You just have to call it as a static library function.

There will be a slight optimization to these functions in the new version, but they will be backwards compatible/under-the-hood, so you should be able to freely use these right now, with no problem.

As a note though, the current buffer to array conversions (the reverse direction) that exist as class methods will be deprecated in the new buffer, and users will be encouraged to use new static versions.

-------------------------

peterparker | 2022-10-13 16:52:25 UTC | #4

Thanks for the answer @matthewhammer and @kentosugama. I think I get it but I am to dumb to intepret it code wise. Do you have a concrete example somewhere?

Sorry for asking even it's probably pretty clear for most people.

-------------------------

kentosugama | 2022-10-13 17:04:40 UTC | #5

No prob! Check out this example: https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2543324341

Let me know if that helps.

Also, we'll be adding examples to the library documentation in the future, so hopefully that also helps.

-------------------------

peterparker | 2022-10-13 17:19:44 UTC | #6

Thanks a lot, really appreciated!

So, turns out I'm maybe not that dumb, just a bit.

In VS code, your snippet works fine in one project but not in another [sample repo](https://github.com/peterpeterparker/debugstorage). I ask myself if I don't have a conflict with Vessel or something (which I don't use in first project).

![Capture d’écran 2022-10-13 à 19.16.13|690x463](upload://fUpyAZzItssBgGUskEEaL8yN0fX.jpeg)

-------------------------

kentosugama | 2022-10-13 17:23:10 UTC | #7

I would guess it's a vessel configuration issue, but I'm pretty clueless with IDEs.

Gonna tag @rvanasa who works on the VSCode extension.

-------------------------

rvanasa | 2022-10-13 17:54:19 UTC | #8

Which dfx versions are you using in each of these projects (from your `dfx.json` file)?

You could also try deleting the `.vessel` directory and/or checking the `package-set.dhall` file in case something is out of date for your Vessel project.

-------------------------

peterparker | 2022-10-13 17:58:41 UTC | #9

Dfx v0.11.2

Vessel is most probably clean, I literally installed for the first time on my machine and added Vessel to the sample repo this morning 🤷‍♂️

-------------------------

LightningLad91 | 2022-10-13 20:15:40 UTC | #10

[quote="peterparker, post:1, topic:15880"]
[Documentation](https://internetcomputer.org/docs/current/references/motoko-ref/Buffer) display `Buffer.fromArray` and `Buffer.fromVarArray` but none seem to effectively exists (`Buffer.fromArray - field fromArray does not exist in type`, dfx v0.11.2)
[/quote]

I ran into this same issue and the way I got around it was to point my vessel configuration to one of the recent `moc-xxx` tags on the Motoko-Base repo. Probably not the wisest thing to do but it did fix my problem and I've been able to call `Buffer.fromArray()` ever since.

-------------------------

peterparker | 2022-10-14 05:17:50 UTC | #11

Oh interesting! Do you mind sharing the configuration you changed in vessel?

-------------------------

LightningLad91 | 2022-10-14 22:20:59 UTC | #12

Not at all. Apologies for the delay. Here is what I put in my `package-set.dhall` file


```
  { name = "base"
  , repo = "https://github.com/dfinity/motoko-base"
  , version = "moc-0.7.0"
  , dependencies = [] : List Text
  },
```

-------------------------

peterparker | 2022-10-15 07:36:23 UTC | #13

[quote="LightningLad91, post:12, topic:15880"]
```
{ name = "base"
  , repo = "https://github.com/dfinity/motoko-base"
  , version = "moc-0.7.0"
  , dependencies = [] : List Text
  },
```
[/quote]

Awesome! You are right, that solves it for me too. Thanks a lot.

@rvanasa is that a Vessel feature or issue? should I open one on Github?

-------------------------

rvanasa | 2022-10-15 16:08:19 UTC | #14

We're in the process of updating the official Vessel package-set, so this will be fixed soon!

-------------------------

peterparker | 2022-10-20 05:23:16 UTC | #15

@rvanasa it isn't just Vessel, the issue happens in a blank sample repo too with dfx v0.11.2 

- dfx new whatever
- cd whatever
- dfx start
- copy [code sample](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2543324341) code from @kentosugama 
- dfx deploy

=> error

> /Users/daviddalbusco/projects/lab/motokobuffer/src/motokobuffer_backend/main.mo:11.18-11.24: type error [M0072], field fromArray does not exist in type
  module {
    type Buffer<X> =
      {
        add : X -> ();
        append : Buffer<X> -> ();
        clear : () -> ();
        clone : () -> Buffer<X>;
        get : Nat -> X;
        getOpt : Nat -> ?X;
        put : (Nat, X) -> ();
        removeLast : () -> ?X;
        size : () -> Nat;
        toArray : () -> [X];
        toVarArray : () -> [var X];
        vals : () -> {next : () -> ?X}
      };
    Buffer : <X>Nat -> Buffer<X>
  }

-------------------------

paulyoung | 2022-10-20 06:22:50 UTC | #16

The key distinction here is probably Vessel _package set_ which I’m guessing is installed with `dfx`.

https://dfinity.github.io/vessel-package-set/

https://github.com/dfinity/vessel-package-set

-------------------------

peterparker | 2022-10-20 06:24:20 UTC | #17

You mean installed on the machine? Because in the sample repo I just created and in which I get the issue there is no single trace of Vessel

https://github.com/peterpeterparker/motokobuffer

-------------------------

paulyoung | 2022-10-20 06:29:28 UTC | #18

But is the _package set_ there? Perhaps in a location alongside wherever `dfx` installs `moc` and the Motoko base package?

That would probably help narrow down if this is just an issue with the base package.

-------------------------

paulyoung | 2022-10-20 06:30:42 UTC | #19

[quote="paulyoung, post:18, topic:15880"]
Perhaps in a location alongside wherever `dfx` installs `moc`
[/quote]

Probably whatever path `dfx cache show` says.

-------------------------

paulyoung | 2022-10-20 06:33:00 UTC | #20

[quote="paulyoung, post:18, topic:15880"]
That would probably help narrow down if this is just an issue with the base package.
[/quote]

It looks like only the `motoko-base` package is installed, which suggests to me that the issue lies there.

-------------------------

paulyoung | 2022-10-20 06:37:48 UTC | #21

Apparently the version of `motoko-base` that comes with `dfx` was updated a month ago to the version mentioned previously:

https://github.com/dfinity/sdk/pull/2544

-------------------------

paulyoung | 2022-10-20 06:40:31 UTC | #22

The changelog says it’s unreleased but it appears to be in [0.12.0-beta.2](https://github.com/dfinity/sdk/releases/tag/0.12.0-beta.2)

-------------------------

peterparker | 2022-10-20 06:43:18 UTC | #23

Ah cool then it will be solved. It's bit misleading to display it as deprecated without being able to use it. Thanks for digging into this!!!

-------------------------

GeorgeKoller | 2023-12-22 20:28:54 UTC | #24

Thanks!
However, just once, ONCE, I'd like the VS 'Quick Fix' button to do something like this for me,  :wink:  .
This button is not earning its space, if this is not a ready 'quick fix' then what is?
Where/who/how would updates from deprecated be implemented for VS?

-------------------------

