skilesare | 2024-02-12 09:23:54 UTC | #1

# EVM Utility Canister - #28

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification (01/09/2023)
* Open for application (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Offical Link](https://icdevs.org/bounties/2023/01/09/28-EVM-Utility-Canister-Rust.html)

## Bounty Details

* Bounty Amount: $6,000 USD of ICP at award date
* ICDevs.org Bounty Acceleration: For every ICP sent to 8e6a56cf83240d1f07afe5002d8ce3574e2bde9ede8c4a8964cd6b53c40d0c22, ICDevs.org will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Team
* Opened: 01/09/2023
* Time Commitment: Days
* Project Type: Library
* Experience Type: Intermediate - Rust;  Intermediate - Evm;

## Description

This rust canister allows motoko canister to query it with data to receive EVM compliant transactions that can be signed via t-ECDSA and submitted to EVM networks.

This bounty gives the opportunity to

* learn rust
* learn about signing transactions
* learn about evm transactions
* learn about t-ecdsa

Motoko currently is missing a number of libraries needed to encode, interpret, and sign evm transactions and data. Rust has most of these libraries and many of them have been used in the rust [No Key Wallet project](https://forum.dfinity.org/t/icdevs-org-bounty-27b-nokeywallet-rust-up-to-10k/16055).  Until these libraries are converted to motoko, it would be nice to have a utility canister that does most of this work for a motoko canister.  This will involve async communication and may incur long transaction times, but it will at least let motoko devs get started with EVM based transactions while those motoko libraries are being developed.

* Create a proper candid type for passing an EVM transaction to the utility canister and return the encoded bytes and hash that is needed to be signed.  Support multiple network ids and transaction types like Legacy, EIP1559, EIP2930.
* Create a proper candid type for passing in an evm witness, root, and receiving back a verification that the data is part of the tree under that root.
* Expose RLP encoding and candid type
* Expose a keccak hashing function
* Expose functions similar to https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util 

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 8e6a56cf83240d1f07afe5002d8ce3574e2bde9ede8c4a8964cd6b53c40d0c22.  ICDevs will match the bounty 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

skilesare | 2023-01-09 18:30:35 UTC | #2

We are giving @LiveDuo first refusal for this bounty because of the amazing work on evm-sign and the significant overlap in functionality.

-------------------------

LiveDuo | 2023-01-12 20:52:00 UTC | #3

Hey @skilesare, thanks the option. 

We will be working on other things for the next few weeks (which may end up been an application for a grant at some point) and we have to take a step back from bounties for a while. 

If someone else comes around in the meantime they should be able to pick the bounty up and we will be happy to share what we've learned during #27. If not, we'll probably be applying in a few weeks.

-------------------------

stopak | 2023-01-20 12:59:56 UTC | #4

Hey @skilesare I would like to pickup this bounty. I've already did creation and signing of ETH transactions in bridge repo. 

I've already started working on candid files. You can find it here: https://github.com/icopen/evm_utils_ic

Regarding the implementation I would like to use crates:
sha3 for keccak
rlp or fastrlp for rlp (I will check which ones leaves smaller footprint)

-------------------------

skilesare | 2023-01-20 13:24:35 UTC | #5

Thanks.  Good luck and keep us up to date on your progress.

I've submitted you to a board vote, but I'd expect it to pass: [https://77i6o-oqaaa-aaaag-qbm6q-cai.ic0.app/axon/1/proposal/8](https://77i6o-oqaaa-aaaag-qbm6q-cai.ic0.app/axon/1/proposal/8)

-------------------------

stopak | 2023-01-23 14:17:26 UTC | #6

Hey I have a question regarding EVM witness. I was looking in to the JSON-RPC and could not find anything usefull except for hash root value. Can I add endpoint to verify patricia trees to make it generic?

-------------------------

skilesare | 2023-01-23 14:55:54 UTC | #7

If that makes sense and is the best way forward I think it makes sense.

-------------------------

stopak | 2023-01-30 08:27:28 UTC | #8

I've commited work on bounty, part of the utils are already done. RLP encoding is also done. I'm in the middle of transaction parsing and encoding. I've also picked library for patricia tree verification.

-------------------------

stopak | 2023-02-02 12:44:59 UTC | #9

I've finished coding work on the library :slight_smile: . I have few questions to the community regarding the API:

1. Right now I'm using Byte Arrays (candid vec u8) as an default way of passing hashes and raw data. I can convert it to hex string (0x ethereum style). What is the preferred way?

2. Transaction is a variant with Legacy, EIP1559 and EIP2930, each variant includes Signature object that will be filled if it is possible. We can transform it into another version, however I think it will be easy to use in motoko.

If you have any other questions regarding the function I will be hapy to help.

Last thing to do is updating the readme and publishing the canister so that anyone can use it.

-------------------------

skilesare | 2023-02-02 13:36:57 UTC | #10

1. I think that using vec u8 (vec nat8) is much cheaper for passing around. Hex strings use up to four bytes per character so a 32 byte hash will be almost 256 bytes on the wire.  Probably practically negligible, but the cycles will eventually add up as these will likely be passed across subnet boundaries and you have to pay a toll for each byte in the message.

2. I don't have enough knowledge of this.  I'll ping @timo and @Manu as they probably have some lessons learned from the past and the BTC stuff that would apply here.  Maybe there are some other folks.  I believe that @dieter.sommer did a deep dive into the EVM stuff a few months ago and likely has some good advice.

-------------------------

stopak | 2023-02-03 13:35:52 UTC | #11

I've uploaded new version of the library. All the functions are implemented. I've added js tests to check functions output against ethers library. Also I've filled readme. I think this one is finished. Should I add something more to this library?

-------------------------

stopak | 2023-02-09 14:04:16 UTC | #12

I've created a simple example in Motoko that interacts with EVM Utility Canister:  https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=4114819678

I hope you will enjoy it.

-------------------------

skilesare | 2023-02-22 20:41:31 UTC | #13

Submitted for approval:

https://77i6o-oqaaa-aaaag-qbm6q-cai.ic0.app/axon/1/proposal/25

@icme, @aiv, @quint, @mparikh, please vote :slight_smile:

-------------------------

dieter.sommer | 2023-03-10 15:19:20 UTC | #14

Hi @stopak! The `u64` data type for the `value` in the transaction struct is a bit tight for encoding the amount of Wei for a transfer as it caps at somewhat over 18 Ether, considering the 18 decimals. Would it make sense to use a larger data type for this, and potentially other values that Ethereum encodes with 256 bits, e.g., something like an `u256` like [here](https://github.com/gakonst/ethers-rs/blob/master/ethers-core/src/types/u256.rs). Created an [issue](https://github.com/icopen/evm_utils_ic/issues/1) on GitHub for this to discuss.

-------------------------

dieter.sommer | 2023-03-12 16:57:23 UTC | #15

@stopak : Thanks for picking up the discussion on GitHub on the `u64` type.

One more question: I've only briefly looked at the code and it seems to me that the public key argument to the `pub_to_address` method can accept a compressed or regular ECDSA key. That is, you can just take the public key part of the response of the `public_key` function of the threshold ECDSA implementation of the IC and use it as input to derive an address. Is this understanding correct? Thank you!

-------------------------

stopak | 2023-03-13 10:52:50 UTC | #16

Fixed and deployed to github and production.

-------------------------

stopak | 2023-03-13 10:57:57 UTC | #17

[quote="dieter.sommer, post:15, topic:17880"]
One more question: I’ve only briefly looked at the code and it seems to me that the public key argument to the `pub_to_address` method can accept a compressed or regular ECDSA key. That is, you can just take the public key part of the response of the `public_key` function of the threshold ECDSA implementation of the IC and use it as input to derive an address. Is this understanding correct? Thank you!
[/quote]

From what I have found, yes.

 *  This function supports parsing compressed (33 bytes, header byte 0x02 or
 *  0x03), uncompressed (65 bytes, header byte 0x04), or hybrid (65 bytes, header
 *  byte 0x06 or 0x07) format public keys.

-------------------------

dieter.sommer | 2023-03-13 11:47:43 UTC | #18

Excellent, the threshold ECDSA `public_key` returns a key in 33-byte compressed format with an 0x02 or 0x03 lead byte indicating the sign of the y-coordinate of the elliptic curve point, so it should indeed work to use such keys as input.

Thanks!

-------------------------

agentDPS | 2023-04-15 17:28:56 UTC | #19

can someone please give the repo link , plus update it to complete rather than discussion

-------------------------

stopak | 2023-04-15 17:58:28 UTC | #20

Hey, here is link to repo: https://github.com/icopen/evm_utils_ic

-------------------------

darkdrag00n | 2023-04-16 09:43:37 UTC | #21

Hi @stopak, I am working on https://forum.dfinity.org/t/assigned-icdevs-org-bounty-27a-nokeywallet-motoko-up-to-10k/16054 and using this canister for evm-related stuff.

It would also be nice to support encoding a signed transaction. Do let me know if that is already supported through the current API.

Opened an issue for the same - https://github.com/icopen/evm_utils_ic/issues/3. Do let me know your thoughts about it.

@skilesare FYI

-------------------------

stopak | 2023-04-16 19:13:25 UTC | #22

Hey, It should be possible. I will check it and come back to you about it.

-------------------------

darkdrag00n | 2023-04-19 18:58:44 UTC | #23

@stopak Any updates?

-------------------------

darkdrag00n | 2023-04-23 20:29:56 UTC | #24

@stopak I went ahead and added the support in the canister. Opened the PR - https://github.com/icopen/evm_utils_ic/pull/4

The e2e tests for transactions were failing as well. So fixed them as well. Please take a look!

-------------------------

stopak | 2023-04-24 07:55:00 UTC | #25

I've merged it to main branch. Already published to mainnet. Great work!

-------------------------

Mercury | 2023-07-18 13:39:30 UTC | #26

thx for this example :) Any idea why decode_tx traps?

-------------------------

stopak | 2023-07-18 14:49:34 UTC | #27

Can you send me the message you are trying to decode? I can include it in test harness and fix the code.

-------------------------

Mercury | 2023-07-18 14:59:58 UTC | #28

I appreciate your quick response. The message hardcoded in the example is what I tried to decode.

-------------------------

stopak | 2023-07-18 18:05:06 UTC | #29

Could you share your code? Maybe there is some issue with data formatting. Last I checked all the tests were green

-------------------------

Mercury | 2023-07-18 19:10:14 UTC | #30

https://forum.dfinity.org/t/completed-icdevs-org-bounty-28-evm-utility-canister-6-000/17880/12?u=mercury

-------------------------

stopak | 2023-07-19 09:25:14 UTC | #31

I've fixed it, you can find correct version here: https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=1737938283

The candid file has changed from [Nat8] to Blob

-------------------------

Mercury | 2023-07-19 12:13:12 UTC | #32

Awesome, thx for this fix. Every bit helps me wrap my head around [any-chain]@IC. 

It's still very early days in web3. :milky_way:

-------------------------

