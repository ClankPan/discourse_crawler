levi | 2021-08-18 16:00:57 UTC | #1

Hi, I have a dart package that i publish on pub.dev: https://pub.dev/packages/ic_tools
It can call canisters with the dart code with update or query calls and verify the certificate with the correct specification. The source for the https-api-spec-plementation is 500 lines of the readable-dart-code and is here: https://github.com/levifeldman/ic_tools_dart/blob/master/lib/src/ic_tools.dart . The package is made for the dart and flutter on the Web and for the Dart running on a linux-machine. There is a candid-library within the package that can code backwards (bytes -> candid-classes with the values) and forwards (candid-classes with the values -> bytes) each kind of the candid-values (primtypes, construct-types, and reference-types). The source for the candid-lib is here: https://github.com/levifeldman/ic_tools_dart/blob/master/lib/src/candid.dart . The Documentation for the library is here: https://pub.dev/documentation/ic_tools/latest/ . Check out the readme and this file: https://github.com/levifeldman/ic_tools_dart/blob/master/lib/src/common.dart for some samples (check-icp-balance, send-icp). If anyone has questions, comments, or feedback, this thread (or pm here) is a good place. Good Luck!

-------------------------

nomeata | 2021-08-18 20:50:56 UTC | #2

Oh wow, certificate checking, a full Candid library… impressive! It’s too late today to review the code, but that’s great to see. 

Did you see the [official Candid test suite](https://github.com/dfinity/candid/tree/master/test) with plenty of tests that the existing libraries (Rust, Motoko, Haskell, I think also JS) use to check if they got it “right”? I suggest to hook that up to your implementation to weed out the corner cases.

-------------------------

levi | 2021-08-18 23:45:13 UTC | #3

Id love a code review, and you can use the certificate checking to verify certified-variables if you want. I did see the candid tests and i have used some of them in the testing but what are these bytes?: \05i and \01n|l\ here: https://github.com/dfinity/candid/blob/7eda836ec9eb2b2036d6116fcf263c990ccf6859/test/reference.test.did#L36

-------------------------

nomeata | 2021-08-19 11:44:21 UTC | #4

These tests use the same syntax as the Candid textual format, so the stuff between `"…"` is ASCII (actually, UTF8-unicode) with `\nn` escapes for raw byes. So `\05i` is actually two bytes, `0x05` followed by `0x66`. I probably generated these test data with the Haskell Candid library which prints them that way.

Two days ago I started writing a longer blog post that explains and highlights various interesting aspects of Candid. Sounds like I’d have an audience of at least one :-).

-------------------------

levi | 2021-08-19 16:44:19 UTC | #5

Cool, yes for the sure.

-------------------------

matthewhammer | 2021-08-19 19:20:49 UTC | #6

[quote="nomeata, post:4, topic:6574"]
Sounds like I’d have an audience of at least one :-).
[/quote]

expectedAudienceCount += 1

-------------------------

levi | 2021-08-20 15:49:16 UTC | #7

Btw with this candid library , no need to parse .did files to talk to a canister or to decode candid-bytes.

-------------------------

levi | 2021-08-20 15:50:17 UTC | #8

@nomeata have you thought bout candid as the wasm-types-standard? Seems like a perfect fit.

-------------------------

nomeata | 2021-08-20 18:58:45 UTC | #9

You mean beyond the IC? It's not particularly Wasm-specific, so why stop at Wasm :-)

-------------------------

nomeata | 2021-08-29 16:06:05 UTC | #10

First post available now, link and place for discussion at https://forum.dfinity.org/t/candid-explainer-first-post-published/6787

-------------------------

