HelloRickey | 2021-06-21 06:13:06 UTC | #1

Hey guys,
1. I used dfx start to start internet-identity on the local port 8000 and created an account. The login was successful.
2. Start my own project with dfx start on the local port 8001, and set the identityProvider:
"http://localhost:8888?canisterId=rwlgt-iiaaa-aaaaa-aaaaa-cai"
```
    authClient.login({
      onSuccess: async () => {
        const identity = await authClient.getIdentity();
        const agentOptions = {
          host: "http://localhost:8001",
          identity:identity
        }
        var counter=setActor(agentOptions);
        const response = await counter.getUser(0);
        console.log(response);
      },identityProvider: "http://localhost:8888?canisterId=rwlgt-iiaaa-aaaaa-aaaaa-cai"
    });
```
3. When I call authClient.login, I can log in successfully and get the identity, but when I call the getUser function in canister, it will prompt me a 403 error.
  Code: 403 (Forbidden)
  Body: Failed to authenticate request 
![截屏2021-06-21 下午2.08.08|690x194](upload://rTJR2AKbdJ8p9liENIS5MgiMqdv.png)

Is there any solution? thank.

-------------------------

3cL1p5e7 | 2021-06-21 09:00:00 UTC | #2

What is the implementation of the method `getUser`?
Try to initialize actor something like as


```
// dfx version 0.7.2
import { Actor, HttpAgent, HttpAgentOptions } from '@dfinity/agent';
import { idlFactory as counter_idl, canisterId as counter_id } from 'ic:counter'; // counter canister frontend alias

...

const agentOptions = {
          host: "http://localhost:8001",
          identity: await authClient.getIdentity(),
        };
const agent = new HttpAgent(agentOptions);
const counter = Actor.createActor(counter_idl, { agent, canisterId: counter_id });

const response = await counter.getUser(0);
console.log(response);
```

-------------------------

Ori | 2021-06-21 14:33:35 UTC | #3

For LOCAL DEVELOPMENT ONLY your app doesn’t have access to the IC root key, so after creating your agent (in your setActor function) you’ll need to call

`await agent.fetchRootKey()`

before creating the actor.

It’s important that you DO NOT do this in your production deployment, or you’ll open your users up to possible Man in the Middle attacks.

-------------------------

HelloRickey | 2021-06-22 06:30:53 UTC | #4

I added await agent.fetchRootKey() to setActor
But still report the same error

```
export async function setActor(agentOptions) {
  const agent = new HttpAgent(agentOptions)
  await agent.fetchRootKey();
  const counter = Actor.createActor(counter_idl, {
    agent,
    canisterId: counter_id,
  })
  return counter;
}

```

-------------------------

Ori | 2021-06-22 09:53:18 UTC | #5

Are you running both Internet Identity and your project on the same replica instance? So just run dfx start once from your project directory, then deploy both your project and the II project to that.

-------------------------

HelloRickey | 2021-06-22 09:55:34 UTC | #6

You are right, I started dfx twice, thank you very much. :grinning_face_with_smiling_eyes:

-------------------------

