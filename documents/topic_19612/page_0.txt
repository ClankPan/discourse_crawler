atomikm | 2023-04-25 11:19:43 UTC | #1

## Objective

This is a governance motion proposal describing a solution for efficiently running a real-time game server using canisters. The team of PLETHORA proposes that the NNS should create **a subnet specifically designated for real-time multiplayer game canisters**. This subnet would consist of **3 nodes** rather than the usual 13 node application subnets.

This is a motion proposal and does not directly result in changes to the IC. Rather, voting to support the proposal is an indication that work should begin on creating this gaming subnet. If it passes, then we will work with DFINITY and other parties to create a 3-node subnet.

## Background

In order to have a multiplayer game with real-time player movement, it is necessary to have a server that records the positioning of each player. This data needs to be updated frequently in order to prevent lagging of players. In most online games, this requires a ping of <100ms.

PLETHORA is focused on building 100% on-chain games, meaning we’ve built a real-time multiplayer server in a canister. We leverage the Unity game engine and the ICP.NET agent (thanks @Gekctek !) to communicate directly with canisters.

**And we made a video to show it to you!**

In this video:

* Every 300ms each player updates their position in the world to the canister
* Every 25ms each player queries the canister for positions of other players in the world
* We then estimate the animation states and use smoothing techniques to render the characters running/jumping around the 3D world

Here’s the link to the video demo:

https://youtu.be/FhBDi-mLMKs

However, we’ve ran into two main issues:

1. Canisters have >2000ms ping because canister state changes must go through consensus. The more nodes in a subnet, the longer it takes to reach consensus. This is awful lag for real-time multiplayer.
2. Three canister update calls are sent per second per player to record player positions. This huge volume of calls cost an exorbitant amount of cycles. The more nodes in a subnet, the more expensive the update calls become.

By lowering the amount of nodes in a subnet to three nodes, we can reduce both latency and cost for running a real-time multiplayer game canister.

Another consideration we want to propose is creating **2 subnets of 3 nodes each**. The first subnet would be populated with 3 nodes based in North America. The second subnet would be populated with 3 nodes based in Asia. Therefore, we could route our Western players to the North America subnet and our Eastern players to the Asia subnet. This will result in much lower latency from the game client to subnet, but also lower latency between the nodes communicating for consensus. We would love to hear your feedback on this.

_____


**But what about the security of these subnets?**

In its first iteration, the movement in PLETHORA’s games will be client-authoritative, meaning it is purely for visual purposes. For this reason, it's not a major concern that a subnet could be subverted by two colluding nodes. There’s no incentive to do so because the multiplayer movement does not have important game logic associated with it.

In the future, we can take small steps to enforce server-authoritative movement in a canister to prevent clients from cheating their movement. At that point in time, the security of the subnet may become a bigger concern. But we firmly believe the tradeoff with latency and cost is worth the reduction of nodes for client-authoritative movement.

## Why This Is Important

Gaming will be the next major use case of crypto, and gaming economies will eventually overtake economies of entire countries. We have conviction that in order to build games that will rise to that scale, everything needs to be fully on-chain. When a game is fully enforced by smart contracts, it presents the greatest opportunity for humanity to improve how we interact and create value for each other.

And when we say 100% on-chain, we mean it. This includes real-time multiplayer game servers. Adhering closely to this strict standard will enable composability like never before, and will empower games to be DAO-governed through the SNS.

No other blockchain can run a complex game with tremendous amounts of logic and data 100% executed and stored on-chain. We need to show the world what the Internet Computer is capable of accomplishing.

## What We Are Asking The Community:

Provide feedback on this proposal within this thread.

Vote accept or reject on NNS Motion

Participate in technical discussions as the motion moves forward

## Additional Cycle Costs Calculations:

Let’s calculate the cost savings of switching to a 3-node subnet. These are just estimates, the actual amounts will vary depending on how many bytes are sent in the ingress messages.

If we send 2 update calls per second per player, that’s roughly 7.2K update calls per hour.

On a 13-node subnet, 7.2K update calls with position/rotation/scale/animation data uses roughly 14B cycles.

Let’s assume we have 10,000 concurrent players for 24 hours on a 13-node subnet.

On a **13-node subnet**, it would cost around 3400T cycles.
That’s roughly **$4,530 per day or $136,000 per month**

If we do the same math for a **3-node subnet**, it would cost around 785T cycles.
That’s roughly **$1,070 per day or $32,000 per month**

As you can see, the cost of cycles is significantly reduced with less nodes. This will become increasingly important as games scale to millions of users.

It’s harder to calculate latency when reducing the node count of a subnet, but we expect it will **significantly** decrease as well.

-------------------------

Berg | 2023-04-25 11:16:32 UTC | #2

Congrats on the project!

It's admirable that you're not just juicing up some KPIs and doing an SNS sale for 1.5M ICP like a few others, but a stable ping of around 30ms is required to play most of the dynamic online multiplayer games. Will this be possible on the IC at its current state?

-------------------------

wpb | 2023-04-25 11:36:02 UTC | #3

This seems like a very well researched proposal with a lot of benefit to all game apps.  It makes a lot of sense to take this approach.  I’m looking forward to following the deliberation and seeing the proposal hit the NNS.  Thanks for outlining the problem and offering a solution.

-------------------------

LightningLad91 | 2023-04-25 12:36:42 UTC | #4

If I’m understanding correctly all you are asking for is a subnet with low replication. I was under the impression that DF was already working on something like this for their storage subnets.

Would you ask the foundation to work on this request as a focused effort or do you think you could use a storage subnet to achieve the same thing?

-------------------------

Severin | 2023-04-25 12:49:46 UTC | #5

How did you decide on the number 3? The IC's consensus can handle at most `f < n/3` faulty nodes (source [here](https://wiki.internetcomputer.org/wiki/IC_consensus_layer#Assumptions)). Note the `<` instead of `<=`. This would mean that even a single malicious node could break the whole subnet. In this case one could go even down to 2 or just 1 node. If you want to tolerate one faulty/malicious node then you'd have to have at least 4 nodes in the subnet

-------------------------

atomikm | 2023-04-25 13:34:00 UTC | #6

30ms ping would not be possible considering that blockchain updates must go through consensus of nodes around the world.

We're limited by the speed of light, because fiber optic cables take roughly 500-800ms to transport data around the world.

Video game companies solve this by placing game servers in every geographic region of the world. In contrast, blockchain nodes are distributed around the world and require consensus, meaning extra latency.

We've proposed a solution for 2 geo-located subnets. 1 subnet in North America and 1 subnet in Asia. This would reduce latency considerably and we view it as the perfect compromise of decentralization and speed.

We believe that fully on-chain games will invent new genres. Not all game genres or game mechanics need e-sports latency. 

Unfortunately, games that require competitive gameplay based on server-authoritative movement are not possible in their current form. But we believe these games can be redesigned to be about strategy and consistency instead of lighting-fast reflexes.

Some examples of games that would benefit from on-chain multiplayer even if it was slow ping:
RPG: Pokemon, Breath of the Wild
TCG: Hearthstone, Marvel Snap
Puzzle: Candy Crush, Gardenscapes
Word: Wordscapes, Scrabble GO
Strategy: 4X games, Clash of Clans, Clash Royale
Sandbox: Minecraft, Roblox
Idle Games: Raid Shadow Legends, Coin Master

The list goes on and on. And these are just the things I can think of off the top of my head. But what I'm excited about are the game genres that don't exist today that will be invented by fully on-chain games!

-------------------------

atomikm | 2023-04-25 13:18:46 UTC | #7

I'm not sure the status of DFINITY's storage subnets implementation, thanks for bringing this up. I assume there might be additional logic layered onto those subnets catered towards storage. They also may require more security than ours.

Also, we would like to have geo-located subnets (eg. North America subnet and Asia subnet) to further reduce latency. Node collusion is a very low concern for us because there's no benefit to subverting a real-time game server subnet.

-------------------------

atomikm | 2023-04-25 16:10:14 UTC | #8

We were under the assumption that consensus could handle f <= n/3 faulty nodes. But looks like we were mistaken.

In that case, we will revise our proposal to be about creating either a 4-node subnet or a 1-node subnet.

I could see pros and cons in both.

Since this subnet is purely for visual rendering and does not store any persistent game state, I'm leaning towards a 1-node subnet. And if the subnet becomes malicious, we can just move our canister to another subnet or remove that malicious node via NNS.

I'm curious to know what you think would be better considering cycle costs/latency/decentralization?

Also if a 1-node subnet becomes malicious, can it affect other subnets? Can it attack the IC network?

-------------------------

Berg | 2023-04-25 13:38:37 UTC | #9

I see you know what you're talking about! 

Will keep a close eye on your future projects! 

I'll also try to vote in favor of any governance proposals you make if they help materialize your vision for gaming on the IC!

-------------------------

Manu | 2023-04-25 16:14:23 UTC | #10

Great job writing such a high quality proposal @atomikm! 

[quote="atomikm, post:8, topic:19612"]
Since this subnet is purely for visual purposes and does not depend on the security of consensus, I’m leaning towards a 1-node subnet
[/quote]
I think running something on a single node is a bit questionable wrt it being "on chain". Of course it technically is, but having no fault tolerance at all makes me wonder what the advantage is of running it on chain. So I think I would prefer 4-node subnets as minimum. 

[quote="atomikm, post:8, topic:19612"]
Also if a 1-node subnet becomes malicious, can it affect other subnets? Can it attack the IC network?
[/quote]
Yes, there are some challenges wrt subnets that become overall malicious. One example is wrt cycles that can be sent across subnets, and another is that a malicious subnet may simply not reply to calls from canisters on other subnets, which in turn could prevent them from upgrading. There is some work ongoing / planned in DFINITY for both of those, but I think that would be engineering work that has to be done before such subnets can be created. 

Some last point of feedback: have you thought about how you would actually want to use this? How would a user indicate in dfx which subnet to install on? Currently, you can specify a `subnet-type` when creating a canister ([docs](https://internetcomputer.org/docs/current/references/cli-reference/dfx-ledger/#options)), that allow you to install on the "fiduciary" subnet (pzp6e). How would a user in dfx express that they want to install on eg a small US-based subnet? We need to find a way that also works if in the future there are eg also small but not geographically colocated subnets, standard size subnets that are geographically colocated, etc.

-------------------------

Sormarler | 2023-04-26 05:22:37 UTC | #11

I support the overall proposal. A 4 node subnet is preferable since you get some fault tolerance and still be on chain. A single node is asking for trouble as if that single stop working then the game will be down for a while.

-------------------------

dfisher | 2023-04-26 06:17:47 UTC | #12

Is there a way to have the bulk of the game on the 4 node subnet but to the extent there’s anything or significant value in the game - in app wallets, etc - those can be held on a different subnet with more nodes?

-------------------------

benji | 2023-04-26 07:48:35 UTC | #13

Great proposal! The additional benefit of such a low-replication subnet is that it would lay the groundwork for GPU subnets running AI models in the future.

-------------------------

iBardak | 2023-04-26 08:07:29 UTC | #14

Great proposal. We (Eimolad) have already raised this issue on the forum earlier. We believe that 1 or 2 nodes are enough. Also, it is necessary to remove the artificial limit on the number of calls, if it exists.

-------------------------

MathAndC | 2023-04-26 08:19:25 UTC | #15

Interesting Porposal. Will offer precende to further projects like on-chain AI.

-------------------------

Severin | 2023-04-26 08:37:51 UTC | #16

[quote="iBardak, post:14, topic:19612"]
Also, it is necessary to remove the artificial limit on the number of calls, if it exists.
[/quote]

Can you clarify which limits you mean? AFAIK all limits are negotiable, but we don't want to open any DoS attack vectors

-------------------------

atomikm | 2023-04-26 09:04:49 UTC | #17

Hello Manu! Thanks for your valuable feedback.

Yes that makes sense, having at least 4 nodes would qualify it as on-chain with fault tolerance. And it would help prevent a malicious subnet wreaking havoc. 

It would also probably be enough security that we could enforce movement constraints in our canister. Thus, smart contract logic could be tied to a player's position in a world. A primitive version of smart-contract-authoritative movement could be possible in the future!

I will need to redo my cycle cost calculations to account for a 4 node subnet. Are there any cycle cost savings if the nodes are geo-located close to each other?

Regarding DFX commands, I think makes sense to add another **subnet-type** called *small* or *game* (or whatever you deem fitting) that has 4 nodes. Then we would also need another argument like **subnet-region** where you could specify *north-america* or *asia*. This way you could combine the different arguments to achieve the subnet of your desired size and geography.

-------------------------

atomikm | 2023-04-26 09:17:37 UTC | #18

Hey Davie!

Yes, this is exactly the structure we are planning. Essentially, this real-time multiplayer subnet is only responsible for recording player position data and storing it temporarily. In the future, it may enforce smart contract logic to constrain movement to ensure clients don't cheat their movement.

All canisters that hold valuable game/player data and NFT/ICP/ICRC-1 assets are located in other higher security 13-node subnets.

In the future, we could have canisters in the 13-node subnets query the canisters in the 4-node subnet to validate player positions. Therefore, enabling important smart contract logic to be executed based on a player's position in a world.

-------------------------

iBardak | 2023-04-26 17:45:33 UTC | #19

As it was said at the heart of the topic, the multiplayer canister should be able to answer hundreds of calls per second. Otherwise, it is impossible to achieve a comfortable gameplay. It is probably necessary to find other ways to avoid DDOS attacks. Maybe there is a way to grant access to call initiation only to certain users. We are now discussing the subnet, not the main network.

We don't need a highly reliable subnet for multiplayer, because we don't store critical data there. The whole game is built in the main chain. The multiplayer canister provides interaction only with streaming data. I will try to give an example: User 1 changes coordinates and User 2 changes coordinates. Both users should only exchange coordinates. For example, User 1 left the game. The current coordinate of User 1 is written to the main IC network. Thus, the data about its coordinates are stored securely.

-------------------------

icarus | 2023-04-27 11:30:19 UTC | #20

[quote="Sormarler, post:11, topic:19612"]

[quote="Manu, post:10, topic:19612"]
Great job writing such a high quality proposal @atomikm!

[quote="atomikm, post:8, topic:19612"]
Since this subnet is purely for visual purposes and does not depend on the security of consensus, I’m leaning towards a 1-node subnet
[/quote]

I think running something on a single node is a bit questionable wrt it being “on chain”. Of course it technically is, but having no fault tolerance at all makes me wonder what the advantage is of running it on chain. So I think I would prefer 4-node subnets as minimum.
[/quote]

I support the overall proposal. A 4 node subnet is preferable since you get some fault tolerance and still be on chain. A single node is asking for trouble as if that single stop working then the game will be down for a while.
[/quote]

If a 4-node subnet is the practical minimum cluster size and lowest possible latency and cost is the goal for an on-chain multi-user real-time gaming server, then we are already talking about a low-Nakamoto co-efficient cluster of nodes. So let us consider another part of the equation.

I am assuming the other main factor relevant here is to have very low-latency network links between the 4 nodes. So if the 4 nodes are all located in the same data centre or in difference data-centres which are geographically nearby (maybe with dedicated inter-data-centre network links) then I expect the IC update query consensus between the localised cluster of nodes would be optimised. It should be easy to test with a 4-node local testnet hooked up to the same switch I would think. 

Obviously this kind of IC subnet is special purpose because of its low level of effective decentralisation (# of nodes, # of DCs, # of NPs) but could it still be much more resistant to attacks and outages than  a single node. And if we have one city or data centre (DC) with more than one Node Provider (NP) in the one place that would be obviously better. In the near future as more IC node providers on-board you may find one location in EU or USA where you can connect 4-6 replica node machines in a low-latency network configuration that includes 3 DCs and 3 NPs, thereby maintaining a low but still effective Nakamoto co-efficient for this specialised subnet.

You could label these special subnets as an L3NC subnet-type , where:
*  **L3NC** == LLLNC => *Low-Latency, Low Nakamoto Co-efficient* (subnet)
or equivalently
*  **L3NC** == LLLNC => *Low-Lag, Less Nodes Cluster* (subnet)

*OR* just use some real word for the subnet-type instead, like a normal person would   ;)

And this L3NC subnet-type would support applications other than gaming that have similar low-latency optimisation requirements.  Then (as @atomikm said above) the standard application pattern would be to make cross-chain calls to pull "permanent" data back into standard 13-node application subnets for security.

Also, a L3NC subnet would need 1 or 2 colocated boundary nodes that clients connect to directly to guarantee the minimum latency.
 
PS: there is a highly applicable discussion thread here  https://forum.dfinity.org/t/what-is-the-theroretical-number-for-txns-per-second-on-internet-computer-right-now/14039 about transaction throughout related to geo localised and reduced node count subnets.

-------------------------

Severin | 2023-04-27 07:26:38 UTC | #21

[quote="iBardak, post:19, topic:19612"]
Maybe there is a way to grant access to call initiation only to certain users.
[/quote]

On a canister level this is what we call a 'guard function'. I don't see this happening on a subnet level anytime in the near future. How would you do the initial access granting to access the subnet?

-------------------------

iBardak | 2023-04-27 08:32:08 UTC | #22

I think it is possible to change the rules for the subnet in the sense of layer-2. If one is created.

-------------------------

oggy | 2023-04-28 15:40:13 UTC | #23

IMO a 1-node subnet would still be perfectly sensible, for basically whenever you need a best-effort cache. While you don't gain anything in terms of resilience over just an AWS box, you still gain a lot of convenience - you have the same programming model, you can rely on inter-canister messaging, operationally it's a lot simpler.

In terms of "artificial limits", there is currently some rate limiting done by the boundary nodes. Perhaps this can be removed once we have decentralized boundary nodes; the decentralization is being worked on but I'd guess it's still at least few months out. Still, I'd expect that to land sooner than the other blockers for low-replication subnets that Manu mentioned (cross-subnet cycle transfers, and the upgrade problem).

-------------------------

iBardak | 2023-04-30 10:24:54 UTC | #24

good idea. We will wait for your decisions. We plan to test WebSocket for this in the near future. Probably, there will be new ideas on how to implement this on the IC

-------------------------

christian | 2023-05-02 15:26:20 UTC | #25

What is your exact goal of having everything "on chain"? Such ping-optimized setup (low Nakamoto coefficient, geographic co-location) will never be considered decentralized yet it will suffer from the inevitable on-chain drawbacks: e.g. if one node goes down, then while the subnet will still finalize the first thing that will suffer is the latency which will potentially make the game unenjoyable. With this setup you have neither security, nor latency robustness. Given that this computation (visualization) is not even security critical, I cannot understand the rationale behind having this infrastructure on-chain and squeezing this data through the consensus.

Did you consider something like sharing the list of player IPs among peers and then connecting to each other via [WebRTC](https://developer.mozilla.org/en-US/docs/Games/Techniques/WebRTC_data_channels) for real time data exchange?

-------------------------

atomikm | 2023-05-02 08:15:47 UTC | #26

Hey Icarus!

Yes, we completely agree that with 4-node subnets, having the nodes be geo-located close together will tremendously improve latency. Ideally we want a 4-node subnet in each major region: North America, Europe, Asia etc. for low latency update calls that don't require high security or decentralization.

Many applications can benefit from this tradeoff of security and latency. Storage, AI, and Multiplayer Gaming are all areas that can benefit from performant subnets with reduced node count.

For 1-node subnets, the same applies but there would just be 1 node in each region of the world :slight_smile:

-------------------------

atomikm | 2023-05-02 08:22:48 UTC | #27

Yes I think a 1-node subnet could be a great option at first, assuming all security vulnerabilities related to faulty subnets are resolved as it'd be very easy for a node to turn a subnet malicious.

Something to keep in mind, in the future it may be possible to have smart contract logic related to enforcing player movement in the real-time multiplayer canister. In this case, it makes more sense to use a 4-node subnet because valuable outcomes may be tied to player positions in the game.

We're open to either 1-node or 4-node. In the beginning, perhaps a 1-node subnet could be more efficient. As we continue to built more complex real-time multiplayer canisters, we can explore a 4-node subnet.

-------------------------

atomikm | 2023-05-02 08:44:13 UTC | #28

Yes, this is a great question, I'm glad you asked :slight_smile: Our conviction for running real-time multiplayer fully on-chain is not for decentralization but for **composability**.

I wrote a tweet thread that summarizes our thesis here:
https://twitter.com/tommyinvests/status/1653070804220002304?s=20

**TLDR:**
The real power of open-source smart contract standards is that any game can leverage them to immediately access the liquidity and user data of thousands of other games.

We believe the "moddable" nature of smart contracts enable new use cases we haven't even thought about.

Imagine creating multiplayer events across games or cross-game simulation, it's easy to do if they use the same real-time multiplayer smart contract.

In the future, we may add smart contract rules that enforce movement constraints. Thus, we could have smart-contract-authoritative movement, and players could be rewarded by smart contract logic based on their position in a world.

Lots of possibilities open up when everything is in transparent, composable, and extendable contracts.


**Regarding WebRTC:**
P2P solutions rely on third party libraries, STUN server, and TURN server (which haven't been re-written on-chain yet). So a lot of dependencies. Having everything in canisters streamlines the developer experience and promotes all the great composability mentioned above.

Could WebRTC be used on top of a multiplayer smart contract to do client-side prediction? Absolutely.
But I think the smart contract should be built first, and not the other way around.
WebRTC also has its own limitations, like the amount of players that can connect at one time.

-------------------------

Jonathan | 2023-05-02 18:28:44 UTC | #29

I think this is the first idea I know of a really unique use case for Web3 gaming. There's a lot to think about there. Well done, @atomikm

-------------------------

pphaolu | 2023-05-05 12:21:09 UTC | #30

Please don't ruin the entire IC consensus for your not fun game!

-------------------------

pphaolu | 2023-05-05 11:47:19 UTC | #31

![图片|231x500](upload://aOeKGFADuRoabrH1yYZR7Yb6L5w.jpeg)

-------------------------

atomikm | 2023-05-05 14:18:54 UTC | #32

Hello,

I'd like to understand your concerns for how this would ruin the Internet Computer consensus.?

If you read the discussion in this thread, security measures will be in place to prevent a malicious subnet subverting the IC network. When these measures are in place, a low-node subnet poses little threat to the safety of the overall IC network. Only the canisters inside of the low-node subnet would be affected. And those canisters would be built assuming low security and would not contain any valuable data or logic. Dapps will be able to leverage both high-node and low-node subnets depending on the security and latency requirements of certain canisters.

-------------------------

pphaolu | 2023-05-05 15:09:43 UTC | #33

Of course I read the entire thread. I also listed the white paper of ic, have you read it carefully? IC is a blockchain, not a game server, and the Dapp owned by IC does not only have one game. If you feel that the network is lagging, then your team's first priority should be to optimize your game. We should stick to the principles and design of IC to ensure the security and stability of the network, instead of pursuing short-term performance improvements by weakening consensus nodes. At the same time, we should also look for other feasible ways to improve the performance and scalability of the network instead of sacrificing the security and stability of the network. It is undeniable that placing the Dapp front-end on the IC Chain will slow down the speed, but we cannot put the cart before the horse and sacrifice consensus. Without consensus, is it still called a blockchain?

-------------------------

pphaolu | 2023-05-05 15:39:32 UTC | #34

I can't agree to create a subnet for game that can't even finish loading. Why waste resources on this.
![图片|231x500](upload://snnBHrFE2ziFYaavhVHwfd9O2Rg.jpeg)

BTW, I've been working in the game industry for 16 years. I know very well what a game is and what is the core of a game. Again, please don't be totally on-chain for the sake of full on-chain. Focusing on the 2-year IC dapp projects, totally on-chain has become the best excuse to defraud Dfinity grand and funding.

We should rethink.

-------------------------

icper | 2023-05-05 15:42:47 UTC | #35

I don’t quite understand the complicated technology here! ICP’s homepage states that ICP can host web2, then your game speed can run at WEB2, hosted on ICP, then I think you can still be called a blockchain game because of ICP endorsement for you

-------------------------

pphaolu | 2023-05-05 15:50:00 UTC | #36

I totally agree with you. :+1:

-------------------------

pphaolu | 2023-05-05 16:11:02 UTC | #37

In this thread, many Dfinity team members disagree with the current situation of using low-node subnets. Please close this proposal and vote "no" until the Dfinity team confirms that it is safe and feasible. For IC, Please.
https://nns.ic0.app/proposal/?proposal=121649

-------------------------

Forreal | 2023-05-05 23:20:53 UTC | #38

Why would this ruin the IC consensus? I have not seen any Dfinity engineers express this concern.

-------------------------

Forreal | 2023-05-05 23:22:27 UTC | #39

Then Dfinity needs to stop selling it as a replacement for AWS.

-------------------------

pphaolu | 2023-05-06 02:35:36 UTC | #40

Less than 3 nodes would be a problem.  If it's a single node, then why not just go with AWS?

-------------------------

pphaolu | 2023-05-06 02:37:51 UTC | #41

![20230506103705|690x229](upload://x8zbkccEM9dEpJLXwBDAIkgl9Up.png)

-------------------------

Forreal | 2023-05-06 03:04:49 UTC | #42

So my takeaway is that it can be done but requires some work to ensure security.

-------------------------

pphaolu | 2023-05-06 03:16:09 UTC | #43

I don't think we should go for specialization at all at the moment, how big is your Dapp? How many users? How much benefit does it bring to IC? Why do you have to have a separate subnet? It's a waste of resources. There is no profit, and no special contribution, so why take the money from IC fams and enjoy the resources exclusively?

This is the case with openchat, which already has 2 subnets to itself, but if there are really some new users coming in, will open dozens of subnets? The Dapp is a waste of resources with no regard for its own efficiency.

Every day either open a separate subnet for this one or a low consensus subnet for that one, taking the retailer's money instead of the money. Some people have exclusive access to subnet resources, while hundreds of other Dapps are crowded together. The blockchain is known for its fairness, but it still depends on who is familiar with the foundation and has a good relationship with it.

Which blockchain can also change the consensus strength at will? Want to be completely reduced to an insecure chain? 

If you want to it be fast, go open AWS first.

-------------------------

pphaolu | 2023-05-06 03:19:46 UTC | #44

If you have a million users, are really awesome and contribute a lot, it's no problem to give you a subnet. You don't even have a few hundred daily active users now, so why should you be given a subnet and make it special?

-------------------------

singularity | 2023-05-06 04:46:01 UTC | #45

How will users be made aware by the IC that a dApp is running on a low replication subnet for transparency? Developers will want to release the fastest dApp, and install it on a one node subnet, while users will unwittingly trust that it is as secure as IC consensus.

-------------------------

Sormarler | 2023-05-06 05:15:08 UTC | #46

I would say it is on the developer and the users to make sure that they are aware about such thing. The community can also do its part by spreading awareness on different security models for different subnets.

-------------------------

Astrapolis-peasant | 2023-05-06 06:17:38 UTC | #47

Ridiculous enough! 1 node subnet? 4 nodes in the same region? Go to AWS. Stop ruining the network! IC is a blockchain not your game server

-------------------------

WoW | 2023-05-06 06:51:46 UTC | #49

For 1-node subnet, don't even think about it. Since from @Manu you should have at least 4 nodes.
![image|667x363](upload://aUMjKq0p0ZLc3g3yQmcFgd8RQ6L.png)

On 4-nodes I support christian's opinion. 
If you are looking for high performance and lower the latency as much as possible. Why even consider getting your game "on-chain"?  In your reply you claim that you are aiming for "composibility" using smart contracts, that sense of "composibility" needs to be backed up by a network that is decentralized and secure enough ,right? 
That's the purpose of getting things "on-chain". If that's the case why would you want to increase the security risk? 

Every other dapps on IC is trying their best to optimize their performance without changing the consensus. If you think 4-nodes is enough and your project managed to require this 4-node subnet. Then why don't everyone just do the same? I believe every project on IC want their dapp to have a better performance.

-------------------------

kusiyo | 2023-05-07 06:45:24 UTC | #51

A 1-node subnet seems good if it will not ruin the overall IC consensus. Maybe IC can just be a blockchain as well as a game server if IC really wants to replace AWS totally: IC can do whatever AWS can do, but not vice versa.

-------------------------

atomikm | 2023-05-07 07:05:27 UTC | #52

Hello pphaolu,

First, I'd like to clarify a few things. 

1. This subnet is not only for Plethora. We have met with nearly every gaming project on the IC to discuss their pain points and the infrastructure they need to build. This proposal isn't coming from us, it's coming from every gaming project on the IC. This is the first step in pushing the gaming vertical on the IC, which until this point has been severely neglected. Gaming and AI will be the catalysts for the next bull market, we cannot overstate how ICP will be left behind if we don't take this seriously. Low replication subnets are required for on-chain AI and Gaming. 

2. These subnets are permissionless for anyone to use. These aren't app-specific subnets. Anyone can deploy real-time simulation, AI, storage, or other use cases to these subnets.

3. The entire game/dapp isn't on the 4-node subnet. All valuable data and game logic are on 13-node subnets. 4-node subnets would be used to offload non-critical execution from the main dapp's canisters.

4. I'm not sure why you believe these subnets would take money away from the ecosystem? In fact, node providers would be receiving thousands of dollars more from gaming and AI projects. Node providers on low rep subnets will be the most profitable because these subnets have the highest cycle burn. ICP projects should be paying node providers instead of AWS.

5. I agree that every dapp shouldn't rush to these subnets. Only certain logic that requires low replication should be on these subnets. And never should an entire dapp be on a 4-node subnet.

**Regarding security concerns, these are the measures that would be in place for 4-node subnets:**

1. Canisters can only have public functions that return void (otherwise callers on high-replication subnets might get stuck waiting for responses)
2. Canisters cannot send cycles to other subnets (otherwise faulty subnets could manufacture/export fake cycles)
3. Dealing with outcalls to other subnets, in case they refuse to consume the responses
4. Handling how to restart faulty/malicious subnets

-------------------------

atomikm | 2023-05-07 08:07:22 UTC | #53

Hello WoW,

You bring up good points, thanks for sharing.

I like to think of it this way:

**Why pay AWS when we could pay Node Providers?**

To run a game server on AWS you need to: create an AWS account, set up EC2 instances, configure deployments, firewall, security groups, key/pairs, reverse proxy, SSL, name records, VPC, TCP/UDP ports, and load balancing/scaling systems. This is non-trivial (I've done it) and it requires an experienced DevOps engineer. 

Also, you have to rely on a third-party multiplayer networking solution which could be written in a language you've never used before. And each game dev is using a different networking solution/programming language.

**What if instead, game projects deployed a motoko canister and within 10 seconds they have real-time multiplayer that's composable with every other game on the IC.** Better yet, what if they didn't have to deploy a canister. Instead, they just plugged their game into an existing one. That's the power of smart contract standards. Game devs save themselves months of development, and can immediately leverage cross-game data and simulation that was never possible before. That's what I mean by composability.

> Why even consider getting your game “on-chain”? In your reply you claim that you are aiming for “composibility” using smart contracts, that sense of “composibility” needs to be backed up by a network that is decentralized and secure enough ,right?

The entire IC network will always remain secure. I think we need to explore having high-security and low-security execution environments within the IC network. This wouldn't compromise the integrity of the entire network, it would just provide islands of computation that devs could choose for their needs. But I agree it's important to enforce that devs run important logic/state on 13 node subnets.

Non-critical execution can be offloaded to low rep subnets, in the same way they are offloaded to AWS today. But with low rep subnets, game devs would benefit from the composability of the IC execution environment, programming language, and open data standards.


> Every other dapps on IC is trying their best to optimize their performance without changing the consensus. If you think 4-nodes is enough and your project managed to require this 4-node subnet. Then why don’t everyone just do the same?

Networked games are very different from other dapps. They are extremely complex to build and require faster latency than DeFi, SocialFi etc.

Games aren't limited by optimization, they are limited by the speed of light. You can't optimize the 700-800ms it takes for a data packet to be sent around the world through fiber optic cables.

Instead, games optimize by placing servers geo-located near every large player base. That's why games divide their players based on US, EU, Asia servers.

Also, this isn't a Plethora-only issue. We have met with nearly every game project on the IC to learn their pain points and create infrastructure to help them. This proposal isn't just from us, it's from every game project on the IC.

-------------------------

NS01 | 2023-05-07 08:06:54 UTC | #54

So I disagree that a 1 node subnet is a bad thing.. its just another tool in the box. Not every part of a business' webstack needs to be replicated. 

See here -> https://forum.dfinity.org/t/data-processing-subnet/19808

-------------------------

NS01 | 2023-05-07 08:18:33 UTC | #55

Its all about keeping things on the same stack. If you want to run a non-mission critical bot for your business... maybe it just gathers user stats or something like that.. why does this need to be replicated 13 times? 

It comes down to efficiency. Do the mission critical stuff on fully replicated subnets and do the hard data processing (non-mission critical) in the cheapest and fastest way. 

HTTP outcalls currently go through consensus so they arent great for fast communication with the outside world. So any data procesing would be better inside the IC. 

I give an example here -》 https://forum.dfinity.org/t/data-processing-subnet/19808

-------------------------

NS01 | 2023-05-07 08:34:32 UTC | #56

Great topic - there are big overlaps with the post I raised on a data processing subnet. I'll not go over it all again but in short to really replace AWS / full web stack we can't replicate EVERYTHING.. that's just wasteful and frankly pointless. 

Do the sensitive/ critical things securely and the non-critical things fast and cheap! 

The question for Dfinity - is your whole business webstack on chain? Why not? 

I know the answer.. no - because you cannot process all the data for the dashboard (and probably other services) fast enough fully on chain. 

It's why Saorsa labs has 3 Heroku servers and trad database on top of multiple ICP canisters (frontend and bavkend). I would much prefer to have all on the IC, written in rust. 

I love the fully-on-chain thing but being honest.. you can't run the world fully on chain. Maybe the term should be Fully sovereign/ independent.

-------------------------

Zane | 2023-05-08 05:53:29 UTC | #57

This is a tough choice for me cause while I believe the network should be less omogeneous and offer more flexibility to suit everyone's specific needs, I don't think it should be tailored for specific projects in a "hardcoded" way, especially if these changes come with protocol modifications that Dfinity has to work on with their limited manpower and the project asking for it hasn't proved the effort will be justified, so if the title of the proposal were "Create subnets with lower replication" it would have been less troubling for me.

Personally I think moving from subnets to a per canister/canister group consensus model would benefit everyone way more than creating specific subnets and have talked about this in the past but the discussion didn't catch on: https://forum.dfinity.org/t/question-about-icps-subnet-design/14464

Furthermore I don't believe your specific use case is currently worth asking Dfinity to shift their internal priorities, I've been gaming for over 15 years and modding is what got me into coding so I take this stuff to heart.
I've seen you mentioned some big franchises like Half Life, ArmA and Warcraft as examples of what modding is capable of and why this is a worth endeavour, thing is those games are on their own without any user made content already amazing games, on top of it they facilitate content creation by offering dev tools, tons of assets, built in functionalities, etc...
 
So I ask where is all of that with Plethora? Cause I've seen some pretty big claims like fully on chain games 10xing how humanity creates value and interact, but when I look at what you've actually built it's nothing to write home about, it is very underwhelming as in "I played games made for Ludum Dare that were more entertaining" level of underwhelming, so when I read about this grand plan to improve gaming that has never been done before and possibly can't even be done cause a 3 node subnet will have considerable latency too and your product doesn't even come close to what the industry offered us 20 years ago I can't help being skeptical. 

I know it may sound harsh but I deeply care about this stuff and have grown a bit impatient about web3 games selling grandiose ideas when 99% of them are less fun than flash games from 2012, all I see is NFT this and onchain that, buzzwords that investors like or at least used to like but actual gamers despise, meanwhile big players in the industry like Epic are actively and silently working towards a goal similar to what you envision without encumbering themselves by getting caught in the "everything must be onchain meme", which for this specific use case brings more issues than benefits, instead they chose to focus on the stuff that is really needed: easy access to code, game logic and assets, very flexible tools anyone can use, a brand new programming language to write extensible and easily scalable game logic, frameworks to spread simulations on different servers and way way more.

I highly suggest to watch this year's Epic GDC presentations as Tim Sweeney goes deep into what he envisions the future of the Metaverse will be and one key aspect of it is the fact it isn't owned by anyone, but not cause it is decentralized or run by a DAO, but because (in his opinion) it will be an aggregate of content built using open standards, just like the web, and therefore the engine/clients used will be mere implementations of those standards.

-------------------------

pphaolu | 2023-05-08 02:31:43 UTC | #58

I agree with you very much, and this is exactly the point I want to express as a game practitioner. None of the games that are currently on IC are good enough to apply for the sub-net. Please optimize your game first, or at least make its front-end page less laggy.

-------------------------

timo | 2023-05-08 10:14:00 UTC | #59

I would like to see the idea of low-replication subnets / untrusted subnets generalized and come to life in the form of "private subnets". 

The concept of "private subnet" means that anyone can just deploy a subnet on any hardware they like with any number of nodes they like (one or more) and connect it to the IC in a permissionless way. The NNS does not need to create or approve private subnets. Of course, being untrusted, there are some limitations such as a private subnet cannot create cycles, calls from the IC to a private subnet are limited to one-way calls (unless timeouts are introduced), etc. A "private subnet" can of course be made as public or decentralized as one wishes but it remains untrusted from the IC's perspective.

I have heard of the idea as early as 2017 that besides the one public IC there could be many private IC's just like there are intranets vs the internet. They are connected but with some limitations. But it shouldn't be required to get permission or approval to deploy one. The key point is that the same code can run on a private IC and on the public IC and to have the same development experience. The idea even went so far that one could move a deployed canister with state from a private IC to the public IC when it feels "ready".

-------------------------

lastmjs | 2023-05-08 23:13:40 UTC | #60

I would also like to throw out an additional idea inspired by some conversations with @rckprtr and perhaps some others.

Imagine an area of memory similar to stable memory but more volatile, i.e. volatile memory. This memory would not go through the same rigorous BFT process, but might have a lesser and much cheaper and faster process that is still fault tolerant to some extent.

Or imagine if queries could be cached more aggressively, and perhaps gossiped to other nodes, allowing a large volatile RAM area to work with.

This is already possible with query calls currently, as you can store anything on the heap, do any calculation within the limits, and it is free (currently) and wiped after the call. If this could somehow be extended and shared across nodes I wonder if it could provide similar capabilities.

Basically, cheaper storage areas like stable memory, volatile memory.

-------------------------

atomikm | 2023-05-15 04:24:39 UTC | #61

Hi Timo!

I really like this idea. Private subnets could prevent the issue of having to outsource computation to AWS. Low-latency, cheap storage, and geographic positioning could all be uses cases of private subnets.

And as a result, the IC benefits in many ways:
1. Node providers make money instead of AWS
2. Streamlined developer experience
3. Permissionless deployment
4. One programming language
5. Composability with mainnet IC

-------------------------

atomikm | 2023-05-15 04:34:09 UTC | #62

Hi Jordan! Thanks for chiming in.

This is an interesting idea, I'll definitely be thinking about it more. I'm wondering how this would work though in low-latency applications where one user changes volatile memory and another user needs to fetch it instantly. If it's a 13-node subnet, nodes might not have the same volatile memory at all times.

Although I suppose when the user updates volatile memory, they could send their update to all 13 nodes at the same time. That would cut down the latency of nodes having to share the new data with each other.

-------------------------

dfisher | 2023-05-16 04:40:54 UTC | #63

Private subnets seems like the perfect use case of actual financial securities on regulated exchanges. 

I’m talking about apple stock, or mortgage backed securities that banks buy. 

Check out Provenance / Figure. I believe they use Cosmos but I wonder if the IC would be a better fit @dominicwilliams 

https://twitter.com/ftlive/status/1655966848289058819?s=20

-------------------------

tiago89 | 2023-09-12 08:38:30 UTC | #64

Hi all,

This topic came back on the ICP.Lab 5 - Gaming Lab, and after the presentation, wanted to write here some feedback for the future.

On the presentation, it's clear that low replication subnets breaks several assumptions of the protocol. Being the main break that "subnets are all equal". Breaking them increases complexity and with it costs of development/maintenance. I like consistency, so we should really try to solve this (and any other discussed problems) in an alternative (and less riskier) change.

Something it became apparent from the QA, is that:
- Main problem is latency and cost of writing (that for gaming position is critical). Another issue is region / geography control.
- We could use AWS, Unity Services, and other third party providers, but they are not "easily" integrated, like payments or canister controlling.

So I thought of 2 alternative solutions:
- The same way we have boundary nodes, we could also have other specialised nodes. That are not "inside" the blockchain, but controlled by the blockchain (NNS or SNS). A canister/user could start/stop a Wasm VM/Node and pay for it's cycles.
- Another alternative, probably faster to implement, would be for a DAO to provide "Cloud as a Service". Someone requests a canister, and through HTTP Outcalls it spins up the desired VM/Lambda/Fargate, with the required configs.
The ICP cycles need to be pre-paid, and when running out, it would stop / delete the VMs. Unfortunately the billing would need to be trusted to the core developers of that DAO. But they would also have strong incentives to keep the system running, as a business / service.
Maybe Boom DAO would be a good provider for this service.

Hope this feedback is useful in some way. Cheers :+1:

-------------------------

Eimolad | 2023-09-12 09:04:10 UTC | #65

**Rooms for a subnet**
Already today we are faced with the need to create a subnet for processing streaming data. The security level of such a subnet will be an order of magnitude lower. This is a necessary sacrifice for seamless operation. The most convenient tool for this is WebSocket. This technology allows you to send a message to a user without receiving a request from him. I intentionally exclude WebRTC technology because it doesn't work after the router. 
**Safety:**
Use only certain types of data in the subnet that are not critical for applications and users. 
Exclude the possibility of processing personal data and user assets
**Data standardization:**
It is necessary to create a common registry of variables that will be processed by the subnet. This registry can be adjusted by the community. For example, for games, variables such as coordinates, speed, damage value, and so on are needed. Messengers and streaming services need other types of variables.
**Saving resources:**
The subnet sends all received changes to its users. But as the ecosystem grows, the amount of data will grow all the time. I don't think an OpenChat user needs to receive data about changes in the Eimolad game. And vice versa. Therefore, it is logical to sort data for users. 
**Principle of operation:**
Application developers create a room in a subnet and configure an array of variables for their community. Also, it configures the frequency of recording streaming data from the subnet to the Kernel Canister of the main network for reliable data storage. They should probably deposit a certain number of cycles for this. Such a requirement will reduce the risk of fraud and hacker attacks. Users of this application, when logging into a game or messenger, use Internet Identity and connect to a specific subnet room. Thus, the subnet recognizes the user and sends certain types of data to him. For example, in the form of JSON. The main important data is always stored in the main IC network, and the streaming data is processed in the subnet and periodically written to the main IC network as well.
Apparently, the **BoomDAO** structure can be used to base the architecture of such a subnet.

-------------------------

7flash | 2023-11-24 04:45:55 UTC | #66

Can I run my own subnet for online game I implement in motoko?

Can I allow my clients to run a node each to make their own consensus driven server?

What are limitations here?

-------------------------

Severin | 2023-11-27 09:25:15 UTC | #67

[quote="7flash, post:66, topic:19612"]
Can I run my own subnet for online game I implement in motoko?
[/quote]

No, subnet rental is not implemented yet, and I don't have an ETA

[quote="7flash, post:66, topic:19612"]
Can I allow my clients to run a node each to make their own consensus driven server?
[/quote]

No, this is not how the IC works. And your users won't have beefy enough machines to run a node, the requirements are a bit much for personal devices

-------------------------

ilbert | 2023-11-29 09:33:22 UTC | #68

I think you can find our proposal interesting:
https://forum.dfinity.org/t/proposal-enable-canisters-to-pay-in-icp-for-external-services/24459

-------------------------

