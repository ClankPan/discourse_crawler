icme | 2022-10-03 05:21:35 UTC | #1

To switch between dfx versions, I currently do the following:

`DFX_VERSION=<version_I_want_to_use> sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"`

Is there an easier way of hopping between different dfx versions?

If it doesn't already exist, I would love [nvm](https://github.com/nvm-sh/nvm) like support for switching between dfx versions, with the following commands:

`dfx versions ls` -> lists all installed dfx versions
`dfx versions use <version>` -> attempts to switch to use the version passed
`dfx versions install <version>` -> attempts to install the version passed

One can then use this nifty module to write backwards compatibility tests for their developer tooling in order to see if a tool's workflow will break between different dfx versions.

This module could also be extended, to have commands like

`dfx versions alias <alias_name> <version>` to be able to alias different dfx versions representing different project, or levels of confidence (i.e. stable, latest, etc.)

-------------------------

Severin | 2022-10-03 07:08:14 UTC | #2

If you have e.g. `"dfx": "0.11.2"` in your `dfx.json`, dfx will always use that version for calls made from this project folder (or error out if the version is not installed). If this is working properly, dfx calls will show this warning text:
```
Warning: The version of DFX used (0.11.2) is different than the version being run (0.12.0-beta.3).
This might happen because your dfx.json specifies an older version, or DFX_VERSION is set in your environment.
We are forwarding the command line to the old version. To disable this warning, set the DFX_WARNING=-version_check environment variable.
```

Do you think this is an appropriate solution?

-------------------------

icme | 2022-10-03 15:58:59 UTC | #3

How does this work with the new global dfx?

Since the new dfx is running on a different port, could one could have 2 different dfx servers with different versions running simultaneously?

Maybe I‚Äôm in the minority, but I‚Äôd rather have dfx throw an error and have me switch my dfx version rather than trying to swap it under the hood.

-------------------------

paulyoung | 2022-10-03 16:00:28 UTC | #4

I use Nix to achieve this. The following allows me to use sandboxed versions of dfx in various projects and could be used to test different releases.

https://github.com/codebase-labs/icfs/blob/019cd49bb7b16ba00afc7d95c2331741740c6594/flake.nix#L73-L76

https://github.com/codebase-labs/ic-auth-tokens/blob/76113cbaa8b788b1989a9d5ef0868cdb12ee46af/flake.nix#L57-L67

-------------------------

Severin | 2022-10-04 08:54:10 UTC | #5

[quote="icme, post:3, topic:15733"]
How does this work with the new global dfx?
[/quote]

Good question, I haven't thought too much about that so far... If you define a network in your project's dfx.json everything will behave as before. If you use the system-wide dfx things get a bit more hairy: If you run `dfx start` in some random location on your system, it will run the currently active version. If you run `dfx start` in a project that's pinned to a dfx version, it will run the pinned version of `dfx start.

CC @ericswanson probably worth thinking a bit more about how this is supposed to work

[quote="icme, post:3, topic:15733"]
Since the new dfx is running on a different port, could one could have 2 different dfx servers with different versions running simultaneously?
[/quote]

Yes, it all depends on how you define your networks. This has been this way for quite a while now, you just have to set the `"bind"` property to a different port

-------------------------

peterparker | 2022-10-24 06:19:59 UTC | #6

[quote="Severin, post:2, topic:15733"]
Do you think this is an appropriate solution?
[/quote]

No. Pointing `dfx.json` to a version does no ensure to exactly that particular version is used.

For NodeJS I use [n](https://github.com/tj/n) therefore I agree with @icme, being able to switch between version easily (including stable and beta ), particularly for those who participate to more than one project, would be handy.

-------------------------

Severin | 2022-10-24 09:03:19 UTC | #7

Ok, I created [this feature request](https://github.com/dfinity/sdk/discussions/2711) on our Discussions page so that we can discuss possible implementations there. Please also upvote the discussion if you're interested in that so that we have some signal to prioritise features.

-------------------------

peterparker | 2022-10-24 09:26:17 UTC | #8

Thanks, commented and upvoted üëç

-------------------------

icme | 2023-01-04 09:08:55 UTC | #9

[quote="Severin, post:7, topic:15733"]
Ok, I created [this feature request ](https://github.com/dfinity/sdk/discussions/2711) on our Discussions page so that we can discuss possible implementations there
[/quote]

Bumping up this feature request for visibility. If you're constantly switching between different dfx versions and would like for this feature to prioritized, click on the discussions page and upvote it!  &nbsp; :arrow_up:

-------------------------

icme | 2023-05-18 14:44:16 UTC | #10

Once a week or so I can't kill a dfx process, so I follow the solution [listed here](https://forum.dfinity.org/t/cant-stop-dfx-no-local-network-replica-found-nothing-to-do-but-is-still-running/8289/5?u=icme), and then reinstall dfx with the command listed at the root of this post.

Past 2 weeks, this re-install of a specific version of dfx via:

[quote="icme, post:1, topic:15733"]
DFX_VERSION=<version_I_want_to_use> sh -ci "$(curl -fsSL [https://internetcomputer.org/install.sh](https://internetcomputer.org/install.sh))"
[/quote]

...is much slower, as in the download takes 20-30 sec instead of just a handful of seconds. Anything that might have changed?

-------------------------

therealbryanho | 2023-05-18 15:33:11 UTC | #11

Thanks for the effort. Upvoted üëç

-------------------------

icme | 2024-02-21 20:01:35 UTC | #12

dfxvm was just released :slight_smile: 

https://forum.dfinity.org/t/the-dfx-version-manager-dfxvm-version-1-0-0-is-released/27720

-------------------------

