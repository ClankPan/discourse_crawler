timo | 2023-09-21 09:00:42 UTC | #1

We are open-sourcing a new ICRC-1 wallet.

Features:
* Manage arbitrarily many subaccounts and give them alias names
* See balances and transaction history on a per-subaccount basis
* Transfer between own subaccounts
* Send directly to subaccounts of other principals
* Display ICRC-1 encoded receive addresses for own subaccounts
* Handle multiple ICRC-1 tokens (assets)
* Add custom assets by their ledger canister id and index canister id
* Manage contacts in a contact book
* Contacts can be for specific assets and specific subaccounts
* Login with II and NFID

You can try out the wallet right in the browser at: https://e4hv6-7yaaa-aaaao-a2ida-cai.icp0.io/
It is a web wallet and works well on desktop. It is currently not yet optimised for mobile.

Disclaimer: this is untested alpha software. Please don't use it for real funds.

We would welcome any feedback, comments, feature requests and external contributions.

The source code can be found here: https://github.com/research-ag/wallet
and is provided under GPL 3.

Here is a screenshot:

![Screenshot wallet|690x294](upload://vdBm4ztNAJ2TWsY8bUUp1HpDSnK.png)

-------------------------

good | 2023-09-21 09:52:35 UTC | #2

good job！
good job！
good job！

-------------------------

jplevyak | 2023-11-08 13:19:22 UTC | #3

I deployed the latest icp ledger as a custom token at nxd7c-niaaa-aaaae-qaawa-cai and I logged in
and got a principal "co4du-t3fxy-jx63v-fepzd-5w5e2-skebp-riwa6-65yjw-6rz4o-w3mwz-xae" and I can query the balance with dfx:

 dfx canister call nxd7c-niaaa-aaaae-qaawa-cai icrc1_balance_of '(record { owner = principal "co4du-t3fxy-jx63v-fepzd-5w5e2-skebp-riwa6-65yjw-6rz4o-w3mwz-xae" })'

which produces 

(400_000_000 : nat)

However your app at https://e4hv6-7yaaa-aaaao-a2ida-cai.icp0.io/ shows a zero balance for the principal that it shows and which I copied out using the nice little icon provided for that purpose.

I can help debug if you like.

-------------------------

timo | 2023-11-08 14:15:19 UTC | #4

Right now
```
dfx canister --network ic call nxd7c-niaaa-aaaae-qaawa-cai icrc1_balance_of '(record { owner = principal "co4du-t3fxy-jx63v-fepzd-5w5e2-skebp-riwa6-65yjw-6rz4o-w3mwz-xae" })'
```
produces 0 for me. Did you move the funds out already?

Did you click the refresh button in the wallet that is next to the copy-to-clipboard button next to the principal?

How can I get tokens on that ledger to try myself?

-------------------------

jplevyak | 2023-11-08 23:44:35 UTC | #5

Same here now.  Fixed it.  Works great!  Sorry for the noise.

-------------------------

jplevyak | 2023-11-09 00:32:02 UTC | #6

Sorry to bother you, but after successfully setting up a manual token on my internet identity login I am trying with NFID and I am getting:

Server returned an error: Code: 502 (TypeError: Failed to fetch) Body: TypeError: Failed to fetch Import token on your own responsability

![Screenshot 2023-11-09 082756|690x271](upload://mRJlZhRU98ZKKKyb3oCc8jWCqM5.png)

-------------------------

ysyms | 2023-11-09 09:06:57 UTC | #7


[quote="timo, post:1, topic:23199"]
Add custom assets by their ledger canister id and index canister id
[/quote]

Why not provide this functionality in the NNS

-------------------------

timo | 2023-11-09 09:10:56 UTC | #8

Thanks for the report. I can reproduce it and will look into it.

-------------------------

timo | 2023-11-09 09:16:17 UTC | #9

I don't know what the feature roadmap of the NNS wallet/dapp is.

It is risky for a production wallet to let users add their own tokens because they could get scammed. A scammer could create a ledger canister and try to "impersonate" an existing token with that fake ledger. The scammer could try to convince people to add that ledger under a token symbol that is already in use. 

Anyway, the feature could be added hidden behind an "expert" checkbox with some warnings.

-------------------------

timo | 2023-11-10 09:07:21 UTC | #10

Bug has been fixed. Please try again now and thanks for the report!

-------------------------

jplevyak | 2023-11-12 11:56:22 UTC | #11

Thanx! Works great.

Do you have a timeline for Metamask login?   That would be a great feature to expand the community.

-------------------------

timo | 2023-11-12 13:43:06 UTC | #12

No, would love to add that though. I can bump it up in priority. Are there any sample implementations  around where we can take code from to speed it up?

-------------------------

jplevyak | 2023-11-12 14:03:58 UTC | #13

It looks pretty straightforward, you just use the sign mechanism:

https://www.toptal.com/ethereum/one-click-login-flows-a-metamask-tutorial#how-the-login-flow-works

Too bad NFID doesn't do it.

-------------------------

timo | 2023-11-12 16:41:22 UTC | #14

I don’t see how that flow for login into web2 servers carries over to our situation. What we need is a Metamask Snap to sign individual transactions. AstroX/ME wallet has done a snap. Maybe it can be ported over.

-------------------------

jplevyak | 2023-11-13 23:57:34 UTC | #15

That is certainly the right (secure) way to do it.  I'll take a look at that Snap.

-------------------------

senior.joinu | 2023-11-15 16:38:22 UTC | #16

@timo @jplevyak 

Consider taking a look at this 
https://forum.dfinity.org/t/msq-metamask-snap-wallet-and-authorization-system/24717

-------------------------

kristofer | 2023-11-29 15:20:31 UTC | #17

Wallet looks great! 

I'm working on some sign in with Ethereum (SIWE) support libraries as well as template apps for Rust and Motoko to simplify the Metamask login flow for IC apps. Nothing is published yet but hopefully will be before christmas. It would be cool to see if we could add Metamask support to the ICRC-1 wallet using these libraries!

Curious to know why you would like a Metamask Snap to sign messages? 

Below is a short video of the current progress. Almost all functionality of Rust lib is in place, in-canister verification of SIWE messages etc. Before publish it needs cleanup, documentation and some reviewing.

https://vimeo.com/889529003

-------------------------

timo | 2023-11-29 15:41:40 UTC | #18

Can you explain what is happening here? SIWE in this example means signing into what exactly? And what is the relation between the principal in your video and the Eth address?

-------------------------

kristofer | 2023-11-29 18:51:59 UTC | #19

Sure! Longish answer below.

In the demo, you "sign in" to the canister based backend, creating an authenticated session around the ETH address.

The flow: 
1. Connect ETH wallet
2. Sign a message defined by the app, using the wallet
3. Generate an identity (Ed25519KeyIdentity) based on the hash of the signature
4. Request a SIWE message from the canister
5. Sign the SIWE message
6. Send signature to canister using identity from step 3 as caller
7. Canister verifies signature against saved message from step 4 and recovers ETH address that signed the message
8. Canister links signer address with caller and creates a session, returns session info
9. Etc. Client calls other canister methods. Canister methods use an auth guard to verify session is valid and if needed get the ETH address of caller.

The identity is stored locally in the browser. Subsequent calls would require user start at step 4 if session has expired.

You can run the whole flow, but you don't need to.

Stop at step 3. Generate an Identity by signing a message and then start interacting with the canister using that Identity.

If the message you sign is identical each time you use the app, the generated identity will be identical. But that's it. No secure link between ETH address and Identity is made at the canister level. Also, since generated identity doesn't expire, anyone that manages to get a hold of your identity can impersonate you in the app indefinitely. Not super secure, but most likely still a **really** good idea for an app that just want to store some user metadata or other non critical info.

Running the whole flow takes us almost over the finish line. After step 8 you have established a secure session with knowledge of the callers ETH address.

What remains uncertain is whether the calling identity establishing the session for an ETH address is indeed the same identity generated using a signature from that ETH address. Verification is possible, but that would require the client sending the signature from step 2 to the canister, a process that poses security risks.

Once vetKeys are launched, we can generate an identity seed on IC and transfer it securely to the client. Then the one-to-one link between ETH address and identity can be verified, meaning: *In this app, ETH address X is always represented by IC identity X*. 

While we cannot ensure that the identity initiating a session is directly created from a specific ETH address, we can confirm that the identity in use has control over the mentioned ETH address. This means that, even though a one-to-one link between the ETH address and the identity isn't fully verifiable now, the current system effectively ensures that the user controlling a given ETH address is the one interacting with the application.

In the ICRC-1 wallet I guess you don't care too much about the ETH address? Could you elaborate what you mean by Metamask signing individual transactions?

-------------------------

timo | 2023-11-29 20:17:55 UTC | #20

Ok, that's similar to what I thought it would be. But how can we use this to sign into a wallet? There is no backend canister nor any other server. There is only the ICRC-1 ledger and the web app. So unless the ledger support SIWE I don't see how this can be used.

A Metamask Snap can have the ability to sign IC native calls and IC native delegations. So your Ethereum key, which is just an ECDSA key, can become an IC key as well.

By Metamask signing individual transactions I mean that the Metamask Snap signs native IC calls directly with the Ethereum key. For each IC call that you make, i.e. in the wallet case for each transfer that you make, the Metamask Snap opens and the user has to confirm.

Sessions with a Metamask Snap are also possible. Then the Snap signs a delegations and the delegatee is a session key generated by the wallet app for the session. But the delegator is always the same, it is the ECDSA key that Metamask holds.

-------------------------

THLO | 2023-11-30 10:47:07 UTC | #21

Are there any plans to add support for ICRC-2 (and ICRC-3)?

-------------------------

timo | 2023-11-30 11:07:03 UTC | #22

Yes. Looking into ICRC-2 soon. But hasn't started yet.

-------------------------

kristofer | 2023-11-30 12:13:15 UTC | #23

[quote="timo, post:20, topic:23199"]
A Metamask Snap can have the ability to sign IC native calls and IC native delegations. So your Ethereum key, which is just an ECDSA key, can become an IC key as well.
[/quote]

What you describe sounds very doable even without a Snap, it is very similar to step 1-3 in the flow I'm using. Signing a message with Metamask and using the hash of that signature to generate an Identity effectively means creating a delegate identity based on your Eth key.

In addition to the SIWE library I will also publish a npm package with a React Hook and Identity provider to support apps to maintain the delegate identity during the duration of the session.

I'll have a look at your codebase and will also read up on Snaps - maybe there is some detail I'm missing here? Building a Snap would be cool but.. not having to build one is even better.

-------------------------

infu | 2023-11-30 12:19:20 UTC | #24

[quote="kristofer, post:23, topic:23199"]
Signing a message with Metamask and using the hash of that signature
[/quote]

What about another dapp requesting Metamask to sign the same message? It will get access to the identity. Is the UI displaying it in a way that informs the user about the risks or they are signing some unintelligible bits?

-------------------------

kristofer | 2023-11-30 13:02:38 UTC | #25

What to include in the message is up to the developer. This is the message I'm showing in the demo app. 

![Screenshot 2023-11-30 at 13.33.22|305x500](upload://bU2THFP8ymBoJtbIzGQ61ukTR5H.png)

But yes, relying on this method only is not the most secure approach. One additional issue is, as I describe above, that the Identity never expires. Doing the additional steps, the SIWE flow, adds a layer of security. That is not possible though in the wallet case as there is no backend canister other than the ledger.

Once vetKeys is launched, an app specific indentity seed can be generated by a SIWE enabled canister upon user login and sent securely to the client to be turned into an Identity.

-------------------------

timo | 2023-11-30 13:14:28 UTC | #26

[quote="kristofer, post:23, topic:23199"]
What you describe sounds very doable even without a Snap, it is very similar to step 1-3 in the flow I’m using. Signing a message with Metamask and using the hash of that signature to generate an Identity effectively means creating a delegate identity based on your Eth key.
[/quote]

Signing a message with Metamask as you do follows a certain "Sign with Ethereum" standard. The message is encoded, prefixed and hashed in a certain way. That format is not natively understood by the IC. Not for an ingress request nor for a delegation. And Metamask wouldn't allow you to sign arbitrary data or an arbitrary hash because obviously that would be to dangerous. Metamask will only let you sign something that it understands and that it can display in the user interface. So you need a custom Metamask which is exactly what a Snap is.

-------------------------

domwoe | 2023-11-30 13:26:05 UTC | #27

[quote="timo, post:26, topic:23199"]
And Metamask wouldn’t allow you to sign arbitrary data or an arbitrary hash because obviously that would be to dangerous.
[/quote]

Actually, MetaMask (and only MetaMask AFAIK) lets you sign arbitrary messages if you enable it, but definitely not a good strategy to target mainstream users.
![image|583x499, 50%](upload://92InxCl0G6BiQJuq9k1bmZ1UpUi.png)

I've created a PoC some time ago to demonstrate it: https://github.com/domwoe/metamask-ic
(Seems to be a bit broken now unfortunately.)

-------------------------

kristofer | 2023-11-30 13:33:47 UTC | #28

Yeah, reading about snaps now. Looks cool. An "IC snap" would be the thing to build, right? Not a "ICRC-1 wallet snap" but a snap that facilitates interaction with any IC app that supports the IC snap. Using `snap_getEntropy` (salt = app domain) looks like one potential way to securely generate a seed for an IC identity.

-------------------------

timo | 2023-11-30 15:24:08 UTC | #29

The most generic Snap would be for login. It would sign a delegation to a session key created in the browser. 

Here are two links (the second one was posted above already in this thread):
https://github.com/AstroxNetwork/ICSnap
https://forum.dfinity.org/t/msq-metamask-snap-wallet-and-authorization-system/24717

-------------------------

kristofer | 2023-12-06 11:27:04 UTC | #30

As @infu rightly pointed out, generating the identity fully in the browser, using the signatures as seed, is a security risk. A malicious app B could replay the same message to get the same identity to the access canister A and do foul stuff. Most Ethereum wallets provide some protection against this as signing a SIWE message from a domain other than the on you are currently visiting will produce a big red warning. But, relying on the wallets to provide 100% protection does not feel right.

Instead, for the ic-siwe library I will borrow some code from Internet Identity and allow canisters instead to create full signature delegations instead. More info 👇👇👇

https://forum.dfinity.org/t/ic-siwe-sign-in-with-ethereum-support-libraries-for-ic/25306

-------------------------

timo | 2023-12-20 12:22:48 UTC | #31

We have merged a PR with some updates into the repo: https://github.com/research-ag/wallet
And also updated the frontend deployed here: https://e4hv6-7yaaa-aaaao-a2ida-cai.icp0.io/

There is now NFID login and we have integrated OGY and GLDT as pre-defined tokens. So the wallet is ready for GLDT from day one as soon as that token becomes available.

The other changes are UI improvements and faster balance queries.

-------------------------

timo | 2023-12-29 20:05:15 UTC | #32

The wallet has been updated with an additional token pre-defined: GLDGov.

Moreover it is now possible to define for each token the desired number of _displayed_ decimals. This can be set to a smaller number than the full decimals that the token offers. It is helpful for ckETH which, quite annoyingly, has 18 decimals.

Here are screenshots of the same balance with different settings and of the dialog where the limit can be set:

![Screenshot 2023-12-29 at 14.26.28|444x59](upload://xHLDwu4JzjtZ2OxA6vWzBl26Ghm.png)

![Screenshot 2023-12-29 at 14.26.55|453x59](upload://wxJ0a2eUidRJRgpSDsZ6NrAMtJy.png)

![Screenshot 2023-12-29 at 14.27.31|454x56](upload://sJrKILidOF2wxw4oIKcAaNQBXOB.png)

![Screenshot 2023-12-29 at 14.26.44|453x137](upload://jDfXzX2PICJ7Fb2NKx3E6C4gkD6.png)

-------------------------

kristofer | 2024-02-13 14:11:36 UTC | #33

@timo I added support for SIWE to the ICRC-1 wallet 😀. 

See video here:
https://youtu.be/Otx-JbgOCFo

PR:
https://github.com/research-ag/wallet/pull/9

Let me know if you think it is an ok implementation. Adding another login method to the existing ones becomes a little bit messy, since SIWE works slightly different. For a super clean integration I would build a popup solution similar to the one II is using.

Live website:
https://cupfv-zaaaa-aaaal-qdhpa-cai.icp0.io

-------------------------

timo | 2024-02-13 16:37:59 UTC | #34

Nice. Thank you very much. It's awesome.

-------------------------

