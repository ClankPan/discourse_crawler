peterparker | 2024-07-21 18:13:22 UTC | #1

Hi, I'm confused about the minimal neuron stake required to submit a motion proposal to Gold DAO. Even though the following might be a really, really, stupid question or a bug on my side, I would rather ask.

So, what's the minimal neuron stake required by Gold DAO to submit a motion proposal in GLDGov? 100 or 1,000 GLDGov?

According to the `get_sns_initialization_parameters` function of the Sns' [Governance canister](https://dashboard.internetcomputer.org/canister/tr3th-kiaaa-aaaaq-aab6q-cai) and the `neuron_minimum_stake_e8s` field gathered in the [SNS aggregator](https://3r4gx-wqaaa-aaaaq-aaaia-cai.icp0.io/v1/sns/root/tw2vt-hqaaa-aaaaq-aab6a-cai/slow.json), the expected value in e8s is 10_000_000_000.

Given that the token is set with 8 decimals, I assumed we can divide the value by 100_000_000, which gives me 100 GLDGov.

However, as someone using proposals.network reported an [issue](https://github.com/peterpeterparker/proposals.network/issues/49#issuecomment-2241198299), I debugged locally after having spun up such an SNS with similar parameters and concluded that the governance canister of this SNS is actually expecting 1,000 GLDGov.

To calculate 100 instead of 1,000, I proceeded with the following JS code:

```
// ic-js utils
const amount = TokenAmountV2.fromUlps({
    amount: BigInt(neuronMinimumStake), // 10_000_000_000n confirmed
    token: goldDaoToken // 8 decimals confirmed
});

// Simplified for explanation purpose
const formatToken = (value: TokenAmountV2): string => {
    const e8s = value.toUlps();
    const converted = Number(e8s) / E8S_PER_ICP;

    return new Intl.NumberFormat('en-US', {
        minimumFractionDigits: 8,
        maximumFractionDigits: 8,
    }).format(converted);
};

// Which gives 100.00000000 GLDGov
```

Therefore, I am wondering where I am missing that factor of 10?

-------------------------

peterparker | 2024-07-21 18:34:54 UTC | #2

I'm just dumb! I should use the `reject_cost_e8s` field, which is `100_000_000_000`. Divided by `100_000_000`, this equals `1,000`. Here's my factor of 10.

-------------------------

