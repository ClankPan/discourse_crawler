chchrist | 2021-11-20 21:07:33 UTC | #1

Let's say I have a simple fibonacci function. The below code does not compile because of a type error of the return that returns the recursive function. What is the right type?

```
public func fibonacci(num: Nat) : async Nat {
        if(num < 2) {
            return 1
        } else {
            return fibonacci(num-1) + fibonacci(num - 2);
        }
    }
```

-------------------------

chchrist | 2021-11-20 23:09:28 UTC | #2

I had to write a private function. Is this the best way?
```
actor {
    
    public func getFib(num: Nat) : async Nat {
         fibonacci(num);
    };

    func fibonacci(num: Nat) : Nat {
        if(num==1)
            return 0;
        if (num == 2)
            return 1;
        
            return fibonacci(num - 1) + fibonacci(num - 2);
        
    };
};
```

-------------------------

levi | 2021-11-21 01:40:57 UTC | #3

I think since it is an async function, try: `return await fibonacci(num-1) + await fibonacci(num - 2);`

-------------------------

nomeata | 2021-11-21 07:30:13 UTC | #4

[quote="chchrist, post:2, topic:8975"]
Is this the best way?
[/quote]

Yes, it is, and this answer needs 20 characters.

-------------------------

chchrist | 2021-11-21 11:16:45 UTC | #5

this approach returns `syntax error [M0001], unexpected token 'await', expected one of token or <phrase> sequence:
  <exp_bin(ob)>`

-------------------------

levi | 2021-11-21 16:54:25 UTC | #6

Hmm, I will make sure to test it myself before I comment next time, thanks.

-------------------------

rossberg | 2021-11-22 08:19:35 UTC | #7

The result of the recursive calls are async, so you'd have to await them:
```
public func fibonacci(n : Nat) : async Nat {
  if (n < 2) {
    1
  } else {
    (await fibonacci(n - 1)) + (await fibonacci(n - 2))
  }
}
```
However, be aware that each recursive call through a public actor method is an asynchronous canister message send, so this will be horribly slow. For a recursive algorithm, your solution of doing the recursion in a synchronous helper function actually is waaaay better.

-------------------------

chchrist | 2021-11-22 09:09:41 UTC | #8

oh wow. It never occurred to me that it will make an external call. Thank you for the info!

-------------------------

