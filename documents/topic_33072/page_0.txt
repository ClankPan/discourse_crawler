DRE-Team | 2024-07-12 13:36:56 UTC | #1

Hello there!

We are happy to announce that voting is now open for [a new IC release](https://github.com/dfinity/ic/tree/release-2024-07-10_23-01-base).
The NNS proposal is here: [IC NNS Proposal 131054](https://dashboard.internetcomputer.org/proposal/131054).

Here is a summary of the changes since the last release:

Release Notes for [**release-2024-07-10\_23-01-base**](https://github.com/dfinity/ic/tree/release-2024-07-10_23-01-base) (a3831c87440df4821b435050c8a8fcb3745d86f6)
===================================================================================================================================================================

Changelog since git revision [e4eeb331f874576126ef1196b9cdfbc520766fbd](https://dashboard.internetcomputer.org/release/e4eeb331f874576126ef1196b9cdfbc520766fbd)

Features:
---------

* [`0afe54baa`](https://github.com/dfinity/ic/commit/0afe54baa) boundary-node: add rate-limiting by subnet to ic-boundary
* [`8a5464374`](https://github.com/dfinity/ic/commit/8a5464374) consensus: Add the subnet Id of IDkg artifacts to the artifact Id
* [`24c3a6876`](https://github.com/dfinity/ic/commit/24c3a6876) crypto: add tracing annotations for some of the IO operations in the replica
* [`3809a39ad`](https://github.com/dfinity/ic/commit/3809a39ad) execution(schnorr): Make public key parsing case insensitive
* [`ea10ecda6`](https://github.com/dfinity/ic/commit/ea10ecda6) execution,runtime: Add persisted metric counting the number of signature agreements with each key Id
* [`4fac1849f`](https://github.com/dfinity/ic/commit/4fac1849f) interface: Print number of instructions in a more readable form
* [`fb2acfabb`](https://github.com/dfinity/ic/commit/fb2acfabb) message routing: Use BatchSummary to flush PageMaps
* [`ff5df144b`](https://github.com/dfinity/ic/commit/ff5df144b) message routing: Add Reject Signals for Requests; Canonical State
* [`83c78b09a`](https://github.com/dfinity/ic/commit/83c78b09a) message routing: Best-effort messages: Introduce NewCanisterQueues
* [`40b3b6799`](https://github.com/dfinity/ic/commit/40b3b6799) networking: publish https outcalls adapter with http enabled for dfx
* [`17df8febd`](https://github.com/dfinity/ic/commit/17df8febd) runtime: Switch to compiler sandbox for compilation
* [`51f43a115`](https://github.com/dfinity/ic/commit/51f43a115) runtime,execution: Update calls stable memory limit adjustment

Bugfixes:
---------

* [`8b88480aa`](https://github.com/dfinity/ic/commit/8b88480aa) consensus: Verify blocks in notarization fast-path
* [`373eddb30`](https://github.com/dfinity/ic/commit/373eddb30) consensus: Do not consider missing pre-signatures as fatal when building inputs
* [`a2fa6f82e`](https://github.com/dfinity/ic/commit/a2fa6f82e) consensus: PR#313 schnorr: Remove leftover uses of ComputeInitialEcdsaDealings
* [`39af4c58b`](https://github.com/dfinity/ic/commit/39af4c58b) networking: do not block when writing logs
* [`fb4726002`](https://github.com/dfinity/ic/commit/fb4726002) node: network.sh hanging

Chores:
-------

* [`44aba7735`](https://github.com/dfinity/ic/commit/44aba7735) boundary-node,node: BN disable-latency-routing by default
* [`e4479636f`](https://github.com/dfinity/ic/commit/e4479636f) consensus(orchestrator): utility function http\_endpoint\_to\_url
* [`2e7cce7dc`](https://github.com/dfinity/ic/commit/2e7cce7dc) consensus: Remove deprecated EcdsaKeyId from MasterKeyTranscript and IDkgReshareRequest
* [`19d26b4e4`](https://github.com/dfinity/ic/commit/19d26b4e4) consensus: Rename individual IDkgMessages and EcdsaKeyTranscript
* [`a2d57712a`](https://github.com/dfinity/ic/commit/a2d57712a) consensus: Rename EcdsaPool, EcdsaChangeSet, EcdsaPrefix, EcdsaArtifact and EcdsaStats
* [`f76347c64`](https://github.com/dfinity/ic/commit/f76347c64) consensus: Rename EcdsaMessage to IDkgMessage
* [`61407a019`](https://github.com/dfinity/ic/commit/61407a019) consensus,networking: split ArtifactKind trait into two traits
* [`6b04a687a`](https://github.com/dfinity/ic/commit/6b04a687a) crypto: upgrade sha2/sha3/digest from 0.9 to 0.10 in crypto code
* [`5261f8135`](https://github.com/dfinity/ic/commit/5261f8135) crypto,IDX: align cargo & bazel deps
* [`b7975d31b`](https://github.com/dfinity/ic/commit/b7975d31b) crypto,NNS: Add buildifier sort comment to Bazel files
* [`50d1c08ac`](https://github.com/dfinity/ic/commit/50d1c08ac) execution: Remove obsolete ComputeInitialEcdsaDealings ic00 method
* [`45f1e8597`](https://github.com/dfinity/ic/commit/45f1e8597) execution: Remove unused function in SandboxSafeSysteState
* [`3fa9c6d64`](https://github.com/dfinity/ic/commit/3fa9c6d64) execution,runtime: Remove obsolete sign\_with\_ecdsa\_contexts from SubnetCallContextManager
* [`4c75016a8`](https://github.com/dfinity/ic/commit/4c75016a8) execution,runtime,IDX: align exec env builds
* [`7a308b459`](https://github.com/dfinity/ic/commit/7a308b459) interface: Add a guard against reject signals with reasons other than CanisterMigrating to the canonical StreamHeader conversion.
* [`b7ab9a59f`](https://github.com/dfinity/ic/commit/b7ab9a59f) message routing,execution: Remove the From trait for RejectCode from StateError
* [`a5856f00f`](https://github.com/dfinity/ic/commit/a5856f00f) message routing,execution: Canister queues misc cleanup
* [`2987c9d86`](https://github.com/dfinity/ic/commit/2987c9d86) message routing: CanisterQueues miscellanea
* [`ec981034b`](https://github.com/dfinity/ic/commit/ec981034b) networking: Use an IC type for the logging level so the config is agnostic to different logging frameworks
* [`6aceb6a35`](https://github.com/dfinity/ic/commit/6aceb6a35) networking: expose https\_outcalls to PocketIC
* [`23eb3aae5`](https://github.com/dfinity/ic/commit/23eb3aae5) networking,execution,consensus,interface: rename ic-btc-types-internal to ic-btc-replica-types
* [`6135fdcf3`](https://github.com/dfinity/ic/commit/6135fdcf3) node: Fix etc/ permissions Dockerfile comments
* [`ad9392d99`](https://github.com/dfinity/ic/commit/ad9392d99) node: Remove unused nftables.conf
* [`6a081a6bf`](https://github.com/dfinity/ic/commit/6a081a6bf) node: Update container base images refs [2024-07-04-0816]
* [`9c89f33e1`](https://github.com/dfinity/ic/commit/9c89f33e1) runtime(RUN): Upgrade Wasmtime to v22.0.0

Refactoring:
------------

* [`38565ef90`](https://github.com/dfinity/ic/commit/38565ef90) execution,message routing: Drop StateError::InvariantBroken
* [`6101d93c3`](https://github.com/dfinity/ic/commit/6101d93c3) interface: Have PrincipalId derive PartialEq

Tests:
------

* [`e04ff0db0`](https://github.com/dfinity/ic/commit/e04ff0db0) execution,message routing(replicated-state): Upgrade/downgrade compatibility tests for canister queues, step 1
* [`fdbf4f4a8`](https://github.com/dfinity/ic/commit/fdbf4f4a8) execution,runtime: Update state\_machine\_tests for threshold signature fees and mock signing responses
* [`d7337776b`](https://github.com/dfinity/ic/commit/d7337776b) execution,runtime(IDX): Disable execution\_environment\_test on darwin
* [`68d689dc7`](https://github.com/dfinity/ic/commit/68d689dc7) execution,runtime,message routing: Migrate state\_machine\_tests to use generic iDKG keys
* [`53b0451c0`](https://github.com/dfinity/ic/commit/53b0451c0) IDX,execution,runtime: enable execution\_environment\_test on master
* [`66d460391`](https://github.com/dfinity/ic/commit/66d460391) crypto: replace ed25519-consensus with ic-crypto-ed25519 in tests

Other changes:
--------------

* [`a6acb0ddc`](https://github.com/dfinity/ic/commit/a6acb0ddc) networking: revert "feat: publish https outcalls adapter with http enabled for dfx" and "chore: reqwest https outcalls"
* [`a3831c874`](https://github.com/dfinity/ic/commit/a3831c874) runtime: Revert "feat: Switch to compiler sandbox for compilation"

# IC-OS Verification

To build and verify the IC-OS disk image, run:

```
# From https://github.com/dfinity/ic#verifying-releases
sudo apt-get install -y curl && curl --proto '=https' --tlsv1.2 -sSLO https://raw.githubusercontent.com/dfinity/ic/a3831c87440df4821b435050c8a8fcb3745d86f6/gitlab-ci/tools/repro-check.sh && chmod +x repro-check.sh && ./repro-check.sh -c a3831c87440df4821b435050c8a8fcb3745d86f6
```

The two SHA256 sums printed above from a) the downloaded CDN image and b) the locally built image, must be identical, and must match the SHA256 from the payload of the NNS proposal.

-------------------------

DRE-Team | 2024-07-12 13:46:40 UTC | #2

Hello there!

We are happy to announce that voting is now open for [a new IC release](https://github.com/dfinity/ic/tree/release-2024-07-10_23-01-storage-layer-disabled).
The NNS proposal is here: [IC NNS Proposal 131055](https://dashboard.internetcomputer.org/proposal/131055).

Here is a summary of the changes since the last release:

Release Notes for [**release-2024-07-10\_23-01-storage-layer-disabled**](https://github.com/dfinity/ic/tree/release-2024-07-10_23-01-storage-layer-disabled) (0d2b3965c813cd3a39ceedacd97fa2eee8760074)
=======================================================================================================================================================================================================

Changelog since git revision [a3831c87440df4821b435050c8a8fcb3745d86f6](https://dashboard.internetcomputer.org/release/a3831c87440df4821b435050c8a8fcb3745d86f6)

Bugfixes:
---------

* [a1ce68f](https://github.com/dfinity/ic/commit/a1ce68f2c1e04514449654e9b60ae290ae0dc93f) interface: Disable new storage layer

Other changes:
--------------

* [`0d2b3965c`](https://github.com/dfinity/ic/commit/0d2b3965c) runtime: Revert "feat: Switch to compiler sandbox for compilation"

# IC-OS Verification

To build and verify the IC-OS disk image, run:

```
# From https://github.com/dfinity/ic#verifying-releases
sudo apt-get install -y curl && curl --proto '=https' --tlsv1.2 -sSLO https://raw.githubusercontent.com/dfinity/ic/0d2b3965c813cd3a39ceedacd97fa2eee8760074/gitlab-ci/tools/repro-check.sh && chmod +x repro-check.sh && ./repro-check.sh -c 0d2b3965c813cd3a39ceedacd97fa2eee8760074
```

The two SHA256 sums printed above from a) the downloaded CDN image and b) the locally built image, must be identical, and must match the SHA256 from the payload of the NNS proposal.

-------------------------

Lorimer | 2024-07-12 15:57:07 UTC | #3

For proposal [131054](https://dashboard.internetcomputer.org/proposal/131054), the referenced git revision (a3831c87440df4821b435050c8a8fcb3745d86f6) doesn't seem to belong to the IC repo.

![image|525x286](upload://A5wEGGFcufVai3HvyufpqFtwwBJ.png)

^ this is what Github displays (I think this indicates that the branch has since been deleted).

If I try to fetch all changes and then search for this commit (a3831c87440df4821b435050c8a8fcb3745d86f6) it's not found.

Based on the git graph and the revision for proposal [131055](https://dashboard.internetcomputer.org/proposal/131055), it looks like the correct git revision for proposal [131054](https://dashboard.internetcomputer.org/proposal/131054) would normally be [6135fdc](https://github.com/dfinity/ic/commit/6135fdcf35e8226a0ff11342d608e5a5abd24129) (but that wouldn't include 'Revert "feat: RUN-842: Switch to compiler sandbox for compilation"')

Given the current circumstances I'd be inclined to reject proposal 131054.

-------------------------

sat | 2024-07-12 17:53:44 UTC | #4

@Lorimer  seems to have been an issue with the gitlab -> github sync (and migration). This issue should be fixed now, please try again. I manually pushed the branch, although this was supposed to be done automatically :confused:

-------------------------

Lorimer | 2024-07-12 18:01:31 UTC | #5

Thanks @sat, much appreciated, that's addressed it 👍

Given that the commit hasn't been available externally until now, it's concerning how popular the 'yes' vote has been so far (how did they verify the build?!) 😱

![image|671x499](upload://6XL3kU7fOvTEbpUe4t70GdFvuW4.png)

-------------------------

Lorimer | 2024-07-13 06:41:59 UTC | #6

@dfxjesse (Rakeoff), @krzysztofzelazko, as named neurons are you able to explain your vote?

-------------------------

dfxjesse | 2024-07-13 10:57:39 UTC | #7

Recently, the Rakeoff named neuron has been set to follow krzysztof.

Is there an expectation to verify these esoteric IC releases? In an ideal world you could say yes. But realistically do you expect named neurons to verify all of these? Isn't that what the "follow" functionality is for.

-------------------------

Lorimer | 2024-07-13 17:54:27 UTC | #8

[quote="dfxjesse, post:7, topic:33072"]
Is there an expectation to verify these esoteric IC releases?
[/quote]

If you're **actively** voting 'yes' (rather than following someone else's vote that you trust - as in your case), then **absolutely** yes. It's extremely dangerous (particularly moving into the future) to vote blindly on technical proposals that modify the protocol.

> But realistically do you expect named neurons to verify all of these?

No, in the same way that all named neurons are not expected to **actively** vote on all proposals. Yes, I agree that this is what following is for (passively voting, by actively choosing who you allocate your voting power to). Given that Rakeoff is a liquid staking protocol, the choice of followee is extremely important (assuming the voting power of any number of stakers is in play - not just now but in the future).

Can I ask why you chose Krzysztof for Rakeoff to follow (what selection criteria were you using that were met by this named neuron)?

@krzysztofzelazko, looks like it falls to you. Are you able to explain your vote?

-------------------------

dfxjesse | 2024-07-13 18:12:33 UTC | #9

I wouldn't give krzysztof a hard time about this, seems like your trying to put some public scrutiny on something I wouldn't consider that important. It was a proposal submitted by Dfinity for an IC release . Frankly, what's the big deal here? 

It looks it was verifiable later and all was fine anyway? Should we be expecting Dfinity to be publishing malicious code to the NNS?

-------------------------

Lorimer | 2024-07-13 18:32:16 UTC | #10

[quote="dfxjesse, post:9, topic:33072"]
seems like your trying to put some public scrutiny on something **I wouldn’t consider that important**
[/quote]

IC-OS proposals have the potential to cause untold damage if a nefarious proposal slips through the net. Why would you consider this to not be important?

> It was a proposal submitted by Dfinity for an IC release . Frankly, what’s the big deal here?


Why do you think a great deal of effort has been put into the design of the NNS, reproducible builds, and governance decentralisation initiatives - do you think all of that is pointless?

> It looks it was verifiable later and all was fine anyway?

If I'm confident in my ability to hold my drink, so I down a few pints of Guinness and then hop in my car to pick up some food, does it make it all okay that I managed to get home without a scratch (no harm no foul) - at least I got my food? Or did I roll the dice and do something unjustifiable?

> Should we be expecting Dfinity to be publishing malicious code to the NNS?

[quote="Pete, post:21, topic:31109"]
DFINITY itself uses a diverse set of neuron IDs which are not cryptographically verified to be acting on DFINITY’s behalf. So we all have to be on guard
[/quote]

-------------------------

dfxjesse | 2024-07-13 19:55:50 UTC | #11

Honestly I think comparing voting yes without verifying IC-OS releases to drinking and driving to be unjustifiable. I can't really see how that is an appropriate analogy to use here.

Besides that, I know these are important proposals, however I was saying that if a named neuron (such as krzysztof's) looks at an esoteric proposal about an IC-OS release from what appears to be Dfinity and votes yes on it - I don't think they should be held to public scrutiny and have to explain their vote.

Maybe you want to hold named neurons to a really high standard. That is probably an argument against named neurons then as a whole and you could start a thread and discuss that.

-------------------------

dfxjesse | 2024-07-13 20:10:51 UTC | #12

@Lorimer correct me if i'm wrong but you are apart of the CodeGov team? So you get paid to verify these?

I think it's important to remember most named neurons are not paid to verify these and are just doing the best they can and receive the normal staking rewards for doing so.

-------------------------

Lorimer | 2024-07-13 20:29:19 UTC | #13

> Honestly I think comparing voting yes without verifying IC-OS releases to drinking and driving to be unjustifiable

Both are examples of 'no harm no foul' mentality, and an 'appeal to consequences' logical fallacy. If you agree that one action is wrong despite the absence of consequences in a specific scenario (e.g. drink driving) then it begs an explanation for why another 'no harm no foul' scenario (blindly voting 'yes' on a proposal that could bring down the IC, but didn't) is justifiable on that basis.

> I don’t think they should be held to public scrutiny and have to explain their vote

Named neurons have gone out of their way to advertise themselves as voters to be followed. I'm inviting Krzysztof to explain what happened here (I'm not assuming that there's not a justification). I'm sure he's perfectly capable of defending his position himself, or holding his hands up, and reassuring potential followers about how future proposals will be tackled.

> you could start a thread and discuss that

If you think that would be useful, I may take a look at doing so at some point.

> correct me if i’m wrong but you are apart of the CodeGov team? So you get paid to verify these?

Yes.

> I think it’s important to remember most named neurons are not paid to verify these and are just doing the best they can and receive the normal staking rewards for doing so.

This is unlikely to be the case moving forward.

[quote="lara, post:1, topic:32721"]
we propose to introduce *periodic confirmation* and *incentives for actively voting neurons*
[/quote]



In any case, I don't see your point. If you're not going to verify a proposal before voting 'yes', you're acting irresponsibly. This is the use case that liquid democracy accommodates - so why not use it properly (follow those who put the work in and verify proposals, and even review the code - Krzysztof could simply follow a neuron that claims to do / evidences this)?

-------------------------

Lorimer | 2024-07-14 07:05:11 UTC | #14

[quote="DRE-Team, post:2, topic:33072"]
# (0d2b3965c813cd3a39ceedacd97fa2eee8760074)

Changelog since git revision [a3831c87440df4821b435050c8a8fcb3745d86f6](https://dashboard.internetcomputer.org/release/a3831c87440df4821b435050c8a8fcb3745d86f6)
[/quote]

FYI @DRE-Team, similar to [a few weeks ago](https://forum.dfinity.org/t/proposal-to-elect-new-release-rc-2024-06-12-23-01/31933/20), the 'Changelog since git revision' reference for proposal 131055 (above) is incorrect - at least as I understand it.

![image|690x80](upload://5fNrrFWBMtKHBsftm1oTbXQRNv5.png)

Proposal 131055 stems from commit [6135fdc](https://github.com/dfinity/ic/commit/6135fdcf35e8226a0ff11342d608e5a5abd24129) (highlighted in the git graph illustration above), not [a3831c8](https://dashboard.internetcomputer.org/release/a3831c87440df4821b435050c8a8fcb3745d86f6) which is actually a future commit with respect to the head 131055 proposal commit ([0d2b396](https://github.com/dfinity/ic/commit/0d2b3965c813cd3a39ceedacd97fa2eee8760074)) and is also on a separate branch (illustrated in the git graph above).

-------------------------

Lorimer | 2024-07-14 07:34:53 UTC | #15

[quote="DRE-Team, post:1, topic:33072"]
* [`17df8febd`](https://github.com/dfinity/ic/commit/17df8febd) runtime: Switch to compiler sandbox for compilation
...
* [`a3831c874`](https://github.com/dfinity/ic/commit/a3831c874) runtime: Revert “feat: Switch to compiler sandbox for compilation”
[/quote]

This proposal summary claims to be making a change but then reverts that change in the same proposal (so it's not actually making that change at all). I think it would be a lot cleaner and easier for voters to follow if these sorts of commits are omitted from the proposal summary altogether (provided the reversion commit is an exact reversion).

This situation is similar to a few weeks ago. 
[quote="Lorimer, post:3, topic:32461"]
This proposal summary also references a [commit](https://github.com/dfinity/ic/commit/3ca6b762e) which is then later reverted by [another commit ](https://github.com/dfinity/ic/commit/ed5ac23c3). Is there any chance of excluding (or marking) commits that have been reverted within the same proposal in future summaries (to avoid confusion)?
[/quote]

Do you have any thoughts on this @DRE-Team?

-------------------------

Lorimer | 2024-07-14 08:50:18 UTC | #16

@nikolay.komarevskiy are you able to provide more information about why latency based routing is being disabled by default. This would seem to be a useful feature. Could you explain the scenarios where this would be undesirable (and why these represent the default case)? 🙏 Thanks in advance.

-------------------------

Luka | 2024-07-14 11:12:31 UTC | #17

this is quite unique case that we didn't have before so it's not supported in our tooling and therefore kinda a mistake. we discussed this previously that a case like this might happen and were not sure if it makes sense to say something like "change since this commit" if the commit is not actually a tip of some release that was blessed before. I think in this specific case, we would want to say something like "change since commit [6135fdc](https://github.com/dfinity/ic/commit/6135fdcf35e8226a0ff11342d608e5a5abd24129) (first introduced in release [a3831c8](https://dashboard.internetcomputer.org/release/a3831c87440df4821b435050c8a8fcb3745d86f6))"

-------------------------

Luka | 2024-07-14 11:14:58 UTC | #18

we discussed this prior to publishing the release notes and decided it would be best to include it for transparency.

-------------------------

Lorimer | 2024-07-14 12:02:55 UTC | #19

Thanks for your response @Luka. Do you think it could be worth displaying these types of scenarios slightly differently, rather than including a reverted change in a list of changes to be applied?

I like your suggestion for how to display the 'change since' commit. I think that would be very helpful.

-------------------------

Luka | 2024-07-14 13:18:19 UTC | #20

we can change the formatting if you have some idea. it would just be beneficial to maintain both commits in the changelog for transparency. a thing to note, this is not such a common scenario either. i'm pretty sure it's first time in 3 years that we had such a weird case.

-------------------------

nikolay.komarevskiy | 2024-07-14 13:45:00 UTC | #21

Thanks for the question @Lorimer. Latency-based routing via API boundary nodes (BNs) hasn't been disabled by default. In fact, this feature (API BNs dynamic discovery and routing) hasn't yet been introduced into the [agent-rs](https://github.com/dfinity/agent-rs). It currently only exists in the [IC repo](https://github.com/dfinity/ic/tree/master/rs/boundary_node/discower_bowndary). We are working on the [PR](https://github.com/dfinity/agent-rs/pull/568) to add this feature to the `agent` too. Afterwards, we indeed plan to modify the default construction of the `agent` and set latency-based routing as the default. Routing via a predefined (static) set of API BNs would of course remain possible via e.g. [RoundRobin](https://github.com/dfinity/agent-rs/blob/main/ic-agent/src/agent/http_transport/route_provider.rs#L24) routing.

> Could you explain the scenarios where this would be undesirable

Frankly, I envision very few scenarios where latency-based routing could be undesirable for the user. Potentially for improving load balancing (e.g. if the closest nodes are heavily loaded) or if the user has some geo constraints.

-------------------------

Lorimer | 2024-07-14 13:49:59 UTC | #22

If there's a need to display changes that cancel themselves out, what would you think about presenting those changes like this (crossed out, with the reversion commit underneath) ->

[quote="DRE-Team, post:1, topic:33072"]
## Features:

* [`0afe54baa` ](https://github.com/dfinity/ic/commit/0afe54baa) boundary-node: add rate-limiting by subnet to ic-boundary
* [`8a5464374`](https://github.com/dfinity/ic/commit/8a5464374) consensus: Add the subnet Id of IDkg artifacts to the artifact Id
* [`24c3a6876`](https://github.com/dfinity/ic/commit/24c3a6876) crypto: add tracing annotations for some of the IO operations in the replica
* [`3809a39ad`](https://github.com/dfinity/ic/commit/3809a39ad) execution(schnorr): Make public key parsing case insensitive
* [`ea10ecda6`](https://github.com/dfinity/ic/commit/ea10ecda6) execution,runtime: Add persisted metric counting the number of signature agreements with each key Id
* [`4fac1849f`](https://github.com/dfinity/ic/commit/4fac1849f) interface: Print number of instructions in a more readable form
* [`fb2acfabb`](https://github.com/dfinity/ic/commit/fb2acfabb) message routing: Use BatchSummary to flush PageMaps
* [`ff5df144b`](https://github.com/dfinity/ic/commit/ff5df144b) message routing: Add Reject Signals for Requests; Canonical State
* [`83c78b09a`](https://github.com/dfinity/ic/commit/83c78b09a) message routing: Best-effort messages: Introduce NewCanisterQueues
* [`40b3b6799`](https://github.com/dfinity/ic/commit/40b3b6799) networking: publish https outcalls adapter with http enabled for dfx
* ~~[`17df8febd`](https://github.com/dfinity/ic/commit/17df8febd) runtime: Switch to compiler sandbox for compilation~~
  - [`a3831c874` ](https://github.com/dfinity/ic/commit/a3831c874) runtime: Revert “feat: Switch to compiler sandbox for compilation” 
* [`51f43a115`](https://github.com/dfinity/ic/commit/51f43a115) runtime,execution: Update calls stable memory limit adjustment
[/quote]

-------------------------

Lorimer | 2024-07-14 14:07:52 UTC | #23

Thanks for the extra info @nikolay.komarevskiy, it's much appreciated. It sounds like I may have misunderstood what [this commit](https://github.com/dfinity/ic/commit/44aba7735) is doing. It's specifying a `--`**disable**`-latency-routing` flag on boundary node service start up. 

> Frankly, I envision very few scenarios where latency-based routing could be undesirable for the user

Me too. This is why I was confused to see a flag that appears to disable latency based routing. I'm afraid this commit is still lost on me. Would you be able to clarify the behavioural change (if any) that will result from this commit?

-------------------------

nikolay.komarevskiy | 2024-07-14 15:04:54 UTC | #24

Now I understood the source of Your confusion. The flag ` --disable-latency-routing` refers to a different (recently added) routing strategy performed by the boundary node itself. Namely, how a boundary node selects a replica node for routing an `update call` to it. Currently, the boundary node randomly selects a replica node from all the subnet nodes. [Recently](https://github.com/dfinity/ic/commit/011cbe44798b4e98ba5e144a4f7b9f3714f1b3d6), we introduced an alternative routing strategy, where a replica node is selected randomly, but out of `f + 1` closest nodes (f - fault tolerance factor). This naturally reduces the average latency for update calls, while still maintaining some load balancing between replica nodes. This feature will be enabled in the future.

-------------------------

Lorimer | 2024-07-14 15:39:31 UTC | #25

Got it, I'm following now. Thanks for the relevant reference 👍

-------------------------

ZackDS | 2024-07-14 18:17:18 UTC | #26

Reviewers for the CodeGov project have completed reviews of these two replica updates and voted to adopt. 

Proposal ID: 131054
Vote: ADOPT
Full report on [OpenChat](https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/78010556105983937984590438937075688039/119)

Proposal ID: 131055
Vote: ADOPT
Full report on [OpenChat](https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/78010556105983937984590438937075688039/120) 

At the time of this comment on the forum there are still 2 days left in the voting period, which means there is still plenty of time for others to review the proposals and vote independently.

We had several very good reviews of the Release Notes on these proposals by @Zane, @cyberowl, @ZackDS, @massimoalbarello, @ilbert, @hpeebles and @Lorimer. The IC-OS Verification was also performed by @tiago89. I recommend folks take a look and see the excellent work that was performed on these reviews by the entire CodeGov team. Feel free to comment here or in the thread of each respective proposal in our community on OpenChat if you have any questions or suggestions about these reviews.

-------------------------

wpb | 2024-07-14 20:35:43 UTC | #27

Below is the text and a link to a post from one of our reviewers @Lorimer for proposal 131055.  This post is significant because it describes why he voted to reject this proposal even though the CodeGov neuron overall voted to Adopt.  I think he has a good point and it is appropriate to have a high standard regarding the accuracy of the proposal the Summary for IC-OS Version Election proposals since these are the proposals where major changes to the IC replica start.

> "Build successful and hashes generated on my machine match (CDN and local build), and the GuestOS hash matches the proposal payload.
> 
> Voted to reject, due to what I consider to be an inaccurate proposal summary (happy to be alone on this). [Issue raised on the forum](https://forum.dfinity.org/t/proposal-to-elect-new-release-rc-2024-07-10-23-01/33072/14).
> 
> This sort of thing seems to be a recurring problem, and while I don't believe this specific proposal in isolation represents a danger to the IC, I think collectively these sorts of proposals undermine the integrity of IC proposal history. I think the clarity and validity of a proposal summary is very important (if a proposal summary can be validated by a number of reviewers, then other *more casual* reviewers can have confidence in what the proposal summary claims and do not necessarily need to dig beneath the surface). Ultimately, I think accurate proposal summaries is something we should be **requiring** rather than preferring."

https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/78010556105983937984590438937075688039/120/2?open=true

-------------------------

wpb | 2024-07-14 20:42:51 UTC | #28

Also relevant and related to the same issue is a description of how this affected another of our reviewers @ZackDS.

> "The usual "has the new storage layer disabled" applies but no idea why they listed commit 0d2b3965c in the summary. This reverts another commit 5388a13 that should have been listed as well if it was this important to keep track. Checked step by step that the reverted change actually matches exactly the changes done before for the switch, not sure what was the issue given the short period of time between them, probably some issues in testing. The other reverts have shared info on the issues leading to them.
>
> The main commented parts As "to be enabled when we switch to compiler_sandbox" are the `create_execution_state_with_compiler_sandbox` function that executes canister code in a sandboxed environment. It prepares the execution state, retrieves a sandbox process for isolation, and converts the canister module (source code) into a Wasm binary for execution.
>
> And `open_wasm` function that implements a caching strategy to optimize Wasm binary opening and compilation within a sandboxed execution environment. It leverages both an embedder cache and a compilation cache to avoid redundant work. The function also tracks various metrics to monitor performance and potential error scenarios."

-------------------------

krzysztofzelazko | 2024-07-17 17:51:50 UTC | #29

One day before the NNS proposal was submitted, a forum thread was created by a DFINITY Foundation employee regarding the revising Elected GuestOS versions. The proposal itself was also created by a trusted neuron (for me), so I approved [proposal 131054](https://dashboard.internetcomputer.org/proposal/131054) manually. Not every NNS participant has the time to review EVERY proposal by hand if they aren't paid directly for it. Information on how I currently votes is presented in [this proposal](https://dashboard.internetcomputer.org/proposal/127703). @dfxjesse probably read it, maybe decided he agreed with my flexible approach and that's why he following me.
As you say @Lorimer it can be concluded that for network security I could track your neuron. However I chose someone else. That is what decentralization is all about, we have free choice of who we follow and how we vote. If you want me to report to you and check every proposal independently you have to pay me for it.

Thanks for reading, greetings to everyone! :sunglasses:

-------------------------

Lorimer | 2024-07-17 18:18:21 UTC | #30

Hey @krzysztofzelazko, thanks for being honest and confirming that you didn't verify the build. Thanks for also confirming that you're happy with how you voted and that you may do this sort of thing again at some point.

It's all useful info that I think deserves a bigger and deeper community discussion at some point 👍

-------------------------

krzysztofzelazko | 2024-07-17 18:52:48 UTC | #31

I didn't verify [this recently executed proposal](https://dashboard.internetcomputer.org/proposal/131054), because someone else did it on my behalf. It's good to do everything yourself, but sometimes when we have an experienced person, it's just worth trusting them. Overall option of following other neurons is based on trusting the other participant. I have never publicly declared that I personally check the image of each new version of the IC replica. You are a member of CodeGov.org, so you receive financial support for your work. Your neuron is public, so I checked it and in some areas it also follows the experts from DFINITY. The only thing that can be discussed here is who is indirectly funded by the DFINITY Foundation and votes indirectly on its "decentralized" behalf and who is not.

I independently verify the proposals of Governance, SNS & Neurons' Fund, and several other technical ones related to network administration and I am not sponsored by anyone.

-------------------------

Lorimer | 2024-07-17 20:30:24 UTC | #32

[quote="krzysztofzelazko, post:31, topic:33072"]
I didn’t verify [this recently executed proposal ](https://dashboard.internetcomputer.org/proposal/131054), because someone else did it on my behalf
[/quote]

Are you referring to the proposer of the proposal? That's not what build *verification* is about.

Also, there is a big difference between following a neuron, and going out of your way to manually accept a proposal (blindly) before the community has had a chance to perform due diligence and voice concerns.

-------------------------

Lorimer | 2024-07-17 20:37:59 UTC | #33

[quote="krzysztofzelazko, post:31, topic:33072"]
I independently verify the proposals of Governance, SNS & Neurons’ Fund, and several other technical ones related to network administration and I am not sponsored by anyone.
[/quote]

It's quite likely that you'll soon be funded by your followers -> [Grants for voting neurons - Governance / NNS Governance - Internet Computer Developer Forum (dfinity.org)](https://forum.dfinity.org/t/grants-for-voting-neurons/32721)

-------------------------

krzysztofzelazko | 2024-07-17 21:23:26 UTC | #34

For now, it looks like a small pilot program run by the Foundation, which I'll probably sign up for, but with the help of a local ICP Hub manager, so I won't be doing it alone. I hope that the final solution will be fully decentralized and that we'll both be funded by our community, rather than DFINITY or reviewing proposals for community only for charity.
I admit that I like reviewing network administration categories myself (like proposals of add/remove new DC/NP/NO, setting node rewards, subnet management, Governance, and SNS & Neurons' Fund etc.), but having to review multiple commits in-depth, verifying the build, checking code quality without compensation makes me prefer listening to someone else than doing it myself.

-------------------------

wpb | 2024-07-17 23:06:26 UTC | #35

[quote="krzysztofzelazko, post:31, topic:33072"]
because someone else did it on my behalf
[/quote]

Do you mind sharing who reviewed the proposal?  I’m interested in knowing who’s who among people who verify proposals.  Do they share their identity, proposal topics, and review strategy publicly?  It’s ok if you don’t want to share or they are not willing to share.  I’m just curious for now, but may some day want to know another good neuron to follow on certain topics.  I’m always happy to support people who actively review and vote on technical topics.

-------------------------

Lisa | 2024-07-18 05:58:31 UTC | #36

Nobody did that's the whole point @lorimer was making. It wasn't available for anyone outside Dfinity the time he cast the vote. Also he couldn't run a git diff with documentation in front of him so just leave him alone. He is a DJ and it's fine, even if votes by flipping a coin it doesn't matter.  Be blessed.

-------------------------

krzysztofzelazko | 2024-07-18 06:36:24 UTC | #37

Bro, I simply trusted a DFINITY employee on this matter. I never declared that I would check IC OS proposals on my own (when I registered the neuron it wasn't even that separated by topics and quite difficult). I monitor other proposal topics on my own. The proposal for a new IC replica version itself contained information about the changes and generally looked legit. I don't think that's a bad thing, as most of the community currently follows their voting. Everyone here trusts someone if they follow other neurons.
Just like your neuron CodeGov.org in a few others, which I actively monitor.

-------------------------

Lorimer | 2024-07-18 07:58:33 UTC | #38

[quote="Lisa, post:36, topic:33072"]
leave him alone
[/quote]

There's no malice in this conversation. It's intended as constructive, and I think it is :)

-------------------------

Lorimer | 2024-07-18 08:00:08 UTC | #39

[quote="krzysztofzelazko, post:37, topic:33072"]
Bro, I simply trusted a DFINITY employee on this matter
[/quote]

But the proposal was at the very start of review process. DFINITY hadn't even voted on it yet. There are plenty of examples where they reject their own proposals. I'm not sure what you mean.

-------------------------

krzysztofzelazko | 2024-07-18 08:08:22 UTC | #40

[quote="Lorimer, post:39, topic:33072"]
DFINITY hadn’t even voted on it yet. I’m not sure what you mean.
[/quote]
[quote="krzysztofzelazko, post:37, topic:33072"]
One of DFINITY employees.
[/quote]
Not the entire DFINITY Foundation.

-------------------------

wpb | 2024-07-18 10:58:05 UTC | #41

[quote="krzysztofzelazko, post:37, topic:33072"]
Bro, I simply trusted a DFINITY employee on this matter.
[/quote]

My apologies.  It looks like I misunderstood your previous comment.  I didn’t realize you were saying you follow the vote of the neuron that submits the proposal.  That’s a pretty clever way to get an early vote by following.  The neuron that submits the proposal is always the first vote and always votes to adopt.  The proposal is built with automated scripts and the changes have gone through a lot of testing, but it’s still interesting that Dfinity will sometimes vote to reject their own proposals.  I suspect it’s because they have people reviewing it after the proposal is live.

-------------------------

Severin | 2024-07-18 10:55:07 UTC | #42

[quote="wpb, post:41, topic:33072"]
it’s still interesting that Dfinity will sometimes vote to reject their own proposals. I suspect it’s because they have people reviewing it after the proposal is live.
[/quote]

Typically the team responsible for e.g. the canister reviews proposals before they are made. Once the proposal is submitted it gets reviewed by 'everyone'

-------------------------

Lorimer | 2024-07-18 17:01:46 UTC | #43

[quote="wpb, post:41, topic:33072"]
a pretty clever way to get an early vote by following. The neuron that submits the proposal is always the first vote and always votes to adopt
[/quote]

Is there an advantage to voting early? I didn't realise that submitting a proposal automatically casts a 'yes' vote from the proposer - is that correct? (I've never submitted a proposal)

[quote="krzysztofzelazko, post:29, topic:33072"]
The proposal itself was also created by a trusted neuron (for me), so I approved [proposal 131054 ](https://dashboard.internetcomputer.org/proposal/131054) manually
[/quote]

Out of interest @krzysztofzelazko do you feel incentivised to vote early? I'm just curious what you would see the downside being of holding back and voting after the community has had a chance to perform due diligence (at least build verification).

The fact that you're followed by another named neuron that could acquire a potentially large amount of voting power (as far as I gather) from the related dapp, has the potential to give you more voting power and responsibility (now and/or in the future) than you might have appreciated :)

On a related note, I just noticed your GeekFactory proposal - [Proposal: 127702 - ICP Dashboard (internetcomputer.org)](https://dashboard.internetcomputer.org/proposal/127702)

Are you part of the GeekFactory team?

-------------------------

dfxjesse | 2024-07-18 17:37:38 UTC | #44

Have you seen this site, I think you will like it: https://f2djv-5aaaa-aaaah-qdbea-cai.raw.icp0.io/proposal/131010

You can see how the voting power of named neurons affects proposals, You'll also see Krzysztof's neuron with Rakeoff following it has about 0.003% of voting power impact on proposals.

In contrast to that, Dfinity and its followees usually impact votes by about 27%. That's a voting power of around 250 million. Most likely every vote Dfinity could sway the result. Also not all Dfinity neurons are public too, so it's probably even more.

If the network is going to get more decentralised we need more named neurons, and I think your approach of public scrutiny and questioning is not really helping - I just haven't seen much constructive feedback from you on how the named neurons can improve or who they should follow (you recommended CodeGov to me only after I asked). Rather, it looks like your poking the named neurons with loaded questions so that they can admit to some guilt of not verifying something? 

If we want more participation we need to make it easier for named neurons to verify things and vote. There needs to be easy to use tools with user interfaces and constructive feedback. We shouldn't be using loaded questions to get them to explain themselves.

-------------------------

Lorimer | 2024-07-18 18:20:02 UTC | #45

[quote="dfxjesse, post:44, topic:33072"]
questioning is not really helping
[/quote]

It's helping me, that's why I'm asking the questions. They're not rhetorical, and they're not intended with any malice, as mentioned. I've been appreciating many of Krzysztof's responses (here and on other threads)

[quote="dfxjesse, post:44, topic:33072"]
Rather, it looks like your poking the named neurons with loaded questions so that they can admit to some guilt of not verifying something?
[/quote]

No, I'm trying to drive some constructive conversation about how, as a community, we can encourage more robust decentralisation moving forward. At the moment I'm trying to understand if incentives are misaligned somehow.

[quote="dfxjesse, post:44, topic:33072"]
If we want more participation we need to make it easier for named neurons to verify things and vote. There needs to be easy to use tools with user interfaces and constructive feedback.
[/quote]

I agree. You may be interested in the topic I posted all about this the other day -> 
[quote="Lorimer, post:1, topic:33299"]
This sort of thing can and should be simple, but the IC repo needs to be managed differently for it to be feasible.
[/quote]

-------------------------

