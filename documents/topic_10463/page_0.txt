saikatdas0790 | 2022-01-24 15:19:38 UTC | #1

I have a Motoko type that looks like this
![image|510x188](upload://6PLqCQchry2TVOXuyyFpeuww87C.png)

The corresponding TypeScript types generated for this looks like this
![image|347x172](upload://58wgWMvR0eq054Ot2W9LPkFGZOF.png)
![image|458x84](upload://55rrwn6Ii380ynzprqRyqCyfER.png)

Notice the types generated for the Motoko `List` types. They are nested types. So, when I get the result of any of those fields, they are nested as many layers as there are elements returned.

Looks like this:
![image|671x462](upload://raFyUGjOVBbQMbg29bNxLn6aKM6.png)

This makes no sense intuitively. Why doesn't a `List` return a plain JavaScript array instead of this nested mess?

-------------------------

skilesare | 2022-01-24 18:09:09 UTC | #2

Lists are functional in their construction so each object points to the next one in the list.  User toArray<T>(List<T) when returning your function and you will get a uniform array.

-------------------------

Ori | 2022-01-24 18:38:44 UTC | #3

Ie the list is built by adding each new element to an existing list:
(3 . (2 . (1 . null)))

-------------------------

saikatdas0790 | 2022-01-25 03:31:13 UTC | #4

Right, so they behave like traditional linked lists.

Wondering if agent-js should parse this into a linear array instead of a nested one. Otherwise this is left up to the programmer to implement.

Reason I'm reluctant to do the array conversion on the canister side is that it's extra work for the canister on every call vs just returning the data

-------------------------

jzxchiang | 2022-01-25 23:39:45 UTC | #5

Maybe converting the `List` to an `Array` on the canister side might result in fewer cycles spent overall, if the list is small enough? For example, my guess is that it's probably more computationally expensive to serialize a `List` to Candid than an `Array`. No idea, just a guess...

-------------------------

