tokuryoo | 2023-05-10 07:14:58 UTC | #1

Hi everyone,
The Motoko language provides HashMap and RBTree. Is there a best practice on which one to use? I am just studying. I am not familiar with algorithms.

[docs - HashMap](https://internetcomputer.org/docs/current/motoko/main/base/HashMap)
>Runtime: O(1)
>Space: O(1)

[docs - RBTree](https://internetcomputer.org/docs/current/motoko/main/base/RBTree)
>Runtime: O(log(n)) worst case cost per insertion, removal, and retrieval operation.
>Space: O(n) for storing the entire tree. n denotes the number of key-value entries (i.e. nodes) stored in the tree.

-------------------------

skilesare | 2023-05-10 15:43:10 UTC | #2

Probably this one:  https://github.com/ZhenyaUsenko/motoko-hash-map

-------------------------

chenyan | 2023-05-10 16:34:41 UTC | #3

In terms of performance, we have some benchmark numbers for different map structures: https://dfinity.github.io/canister-profiling/collections/#map

-------------------------

icme | 2023-05-10 20:45:18 UTC | #4

HashMap:
* provides most efficient O(1) insert, lookup, & deletion
* space taken is O(n)
* Depending on implementation every so often the hashtable underneath the map needs to double, which can result in an O(n) operation.

RBTree/BTree:
* provides O(log(n)) insert, lookup, & deletion.
* space taken is O(n)
* Sorts the data by key within the tree. This allows for operations like [scanning](https://canscale.github.io/StableHeapBTreeMap/BTree.html#scanLimit) between two bounds, which is powerful if one wants to paginate through entries in the data structure that depend on a sorted ordering.

-------------------------

skilesare | 2023-05-10 22:34:52 UTC | #5

Byron is being a bit modest here....he also wrote https://github.com/canscale/StableHeapBTreeMap which I think is a pretty solid improvement on the BTree that maintains sort order.

Byron...you need to pimp your ride. :)

@chenyan...what is the mechanism that makes the rust maps so much more performant?

-------------------------

chenyan | 2023-05-11 00:57:18 UTC | #6

Rust's hash map uses the standard Swiss Table. Zhenya's hash map uses V8's hash map, which is better suited for storing large objects. Data structure-wise, there shouldn't be much difference for normal use cases. The performance diff really comes from being written in different languages. Rust is much more low level than Motoko, so it can generate code that is much more efficient.

-------------------------

skilesare | 2023-05-11 02:52:51 UTC | #7

Would you expect that Motoko would get more performant?  Is there a particular mechanism that makes it not as efficient?  Would adding a map at a lower level as a 'native' structure bring more performance in motoko?

-------------------------

chenyan | 2023-05-11 04:31:14 UTC | #8

It's always getting more performant. For example, see the perf improvements from 0.8.4 to 0.8.5: https://github.com/dfinity/canister-profiling/pull/43.

Being a high level language means there is a performance overhead in exchange for a native and convenient experience. You cannot expect Python to be as efficient as C. But there are still many Python developers. FFI can be an option to bridge the perf gap, but it's a long way to support FFI.

-------------------------

tokuryoo | 2023-05-11 08:30:08 UTC | #9

@skilesare
@chenyan
@icme

Thanks for your reply!

a.
[Collection libraries | canister-profiling](https://dfinity.github.io/canister-profiling/collections/#map)
The value of generate 50k in hashmap is 2_387_017_574. Is the unit of measure Cycle?

b.
[Collection libraries | canister-profiling](https://dfinity.github.io/canister-profiling/collections/#map)
>We have a limit on the maximal cycles per round.

I understood that the less Cylce consumed by Map, the more processing can be done per round. Am I correct in understanding that faster Map processing does not mean faster response time?

c.
[docs - HashMap](https://internetcomputer.org/docs/current/motoko/main/base/HashMap)
>Runtime: O(1)
>Space: O(1)

Maybe O(1) is wrong and O(n) is correct. I do not know.

d.
I had never heard of StableHeapBTreeMap before. Thanks.

e.
If I want to handle Huge data in a Map, I thought Rust should be adopted.
For general systems that are not Internet Computer, efficiency is related to processing speed and response time, and inefficient efficiency can be solved by replacing CPUs or adding servers, so there is no problem with a slow language. However, I thought that efficiency is important when processing on an Internet Computer and on a single subnet.

-------------------------

