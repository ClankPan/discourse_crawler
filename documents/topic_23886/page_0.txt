levi | 2023-10-20 08:17:39 UTC | #1

This change creates a new sns governance proposal action: `ManageLedgerParameters`.

This proposal action lets an sns set the ledger parameters: `transfer_fee`, and `fee_collector`. Whereas before this change there was no way for an sns to update these parameters.

Here is the code for this feature: https://github.com/levifeldman/ic/pull/1/files.

If the reviews and testing goes good, I plan on making a proposal on the nns to upgrade the sns governance, and root canisters with the code for this feature.  

Technical specifics: 
The proposal action `ManageLedgerParameters` tells the root canister to upgrade the ledger to it's same current wasm module with an upgrade arg that contains the new values for the parameters that are being set. The ledger in the post_upgrade hook, updates its own values with those parameters that are set in the post_upgrade hook.

Edit: This update to this proposal removes some ledger parameters that were in the original draft proposal.

-------------------------

Chloros88 | 2023-10-19 16:27:35 UTC | #3

Loving this this will also help any SNS project besides DKP

-------------------------

msumme | 2023-10-19 18:20:27 UTC | #4

@levi Thanks for implementing this.  This is a really clever solution to the problem of how to change parameters in the ledger, even though ledger doesn't expose an API directly.

We (DFINITY engineers) are discussing this, but I wanted to give a quick thought.

The risk in making these changes is not so much internal to the ledger or SNS as it is the ecosystems outside of the SNS.  Token symbols, decimals, and names are often widely distributed.  What happens everywhere else in the ecosystem when those values are changed?  There are liquidity pools, exchanges, and a variety of other dependencies on those values.   And what exactly does it mean to change the decimals after a ledger has started collecting transactions?  This is uncharted territory at this point.  

So there are some relatively big risks there, and not just to the SNS that makes those changes, but to the broader IC and even crypto ecosystems.  

What are the use cases that you're targeting with this change?  I'm wondering if we can find a way to accomplish those things that requires less risk analysis.

-------------------------

levi | 2023-10-20 04:35:13 UTC | #5

The ledger uses the post_upgrade hook as the api. This feature makes use of that functionality.

@msumme Clients can update their values with the ledger's current values by calling the ledger's ICRC-1-specification methods: [`icrc1_symbol`](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_symbol-), [`icrc1_name`](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_name-), [`icrc1_decimals`](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_decimals-), and [`icrc1_fee`](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md#icrc1_fee-).

The `icrc1_decimals` value, sets the **visual-format** of the amount of token-quantums (smallest possible piece of a token) of the transaction/balance. This specific value is used by a frontend when showing a token-balance to a user. Changing this value does not change any token-balances or transaction-amounts in the ledger in the past or future. Changing this value does change the **visual-format** of how frontends show the token-quantums of the balance/transaction.

My view is that a sns that uses the `ManageLedgerParameters` proposal type, takes on the consequences of the change.

-------------------------

File | 2023-10-20 04:54:03 UTC | #6

[quote="levi, post:5, topic:23886"]
**visual-format**
[/quote]

I am confused about visual-format. 
Would you mind explaining it in detail?
Thank you greatly!

-------------------------

File | 2023-10-20 05:20:42 UTC | #7

[quote="levi, post:5, topic:23886"]
Changing this value does not change any token-balances or transaction-amounts in the ledger in the past or future. Changing this value does change the **visual-format** of how frontends show the token-quantums of the balance/transaction.
[/quote]

For example,current SNS1 Total Supply is 9997
If i own 9997 SNS1, the frontend shows that i own 9997000 SNS1, the real SNS1 Total Supply is still 9997?
Is my understanding correct？

-------------------------

levi | 2023-10-20 06:01:19 UTC | #8

@File The icrc1-ledgers keep track of token amounts using the number of smallest-pieces. So lets say there is an icrc1-ledger for U.S.-dollars, the ledger keeps track of token amounts using pennies/cents, and `icrc1_decimals` = 2. So lets say an account has 5000 pennies, the ledger says that there is 5000 pennies but the frontend shows 50 dollars, because `icrc1_decimals` = 2. 
If the `icrc1_decimals` changes to = 1, that same account still has 5000 pennies, but the frontend now shows 500 dollars.

-------------------------

File | 2023-10-20 06:10:45 UTC | #9

COOL.Thanks!
If you use your code for SNS1, will the Total Supply of SNS1 still be 9997?

-------------------------

levi | 2023-10-20 06:25:42 UTC | #10

Current SNS-1 total supply is ```999671422000``` token-quantums. https://dashboard.internetcomputer.org/canister/zfcdd-tqaaa-aaaaq-aaaga-cai click icrc1_total_supply and click call. Current SNS-1 `icrc1_decimals` = 8, so the frontend shows 9996.71422000 (rounded to 9997) total supply.
If the SNS-1 `icrc1_decimals` changes to = 3, then the total supply will still be ```999671422000``` token-quantums, but the frontend will show 999671422.000 (rounded to 999671422) total supply.

-------------------------

File | 2023-10-20 07:22:10 UTC | #11

Thank you very much for your patient and detailed explanation!
If your code does not change token-quantums(Real SNS1 Total Supply), so I think parameter `icrc1_decimals` is feasible for SNS1's one of problems(As @Thyassa  said,you will not be dealing with tiny fractions.)
**After all,Many facts indicate that after chage the Real Total Supply, will have a negative impact on coin price, project, community, and more.**

As for the other parameters in your code, as @msumme said,
[quote="msumme, post:4, topic:23886"]
Token symbols, decimals, and names are often widely distributed. What happens everywhere else in the ecosystem when those values are changed? There are liquidity pools, exchanges, and a variety of other dependencies on those values. And what exactly does it mean to change the decimals after a ledger has started collecting transactions? This is uncharted territory at this point.
[/quote]
Other stakeholder and other parties in the ecosystem(SNSes, DEX, DEFI,and more) may need to prepare accordingly , after reviewing, discussing,testing and more.
**Looking forward to adopting Risk-Minimizing Risk-Controllable Feasibility changes**(For example, if the code contains fewer parameters and only changes `icrc1_decimals` and other necessary code, voted through, and then **gradually** adding with other parameters and more code **after small-scale use**)  while solving problems without compromising innovation, inspiration, your creativity!
So being able to rally consensus, seek common ground, and get your code and prorosal through the vote

**BEST WISHES!**

-------------------------

levi | 2023-10-20 08:09:50 UTC | #12

You are very welcome. 

[quote="File, post:11, topic:23886"]
Other stakeholder and other parties in the ecosystem(SNSes, DEX, DEFI,and more) may need to prepare accordingly , after reviewing, discussing,testing and more.
[/quote]

100%. For changing the `token_decimals` parameter, every frontend out there that accepts a user's input for an amount of the sns-tokens will need to prepare and then switch to the new `decimals` parameter at the same time. Being negligent with the `token_decimals` setting can lead to chaos.

@File That sounds like a great plan and path forward. Thank you sir.

Thank you @msumme and @File for your feedback on this proposal. Taking both your feedbacks into account, I am now updating this proposal to only contain the settings `transfer_fee` and `set_fee_collector`, We will leave the other parameters for a different day.

-------------------------

infinite | 2023-10-20 19:48:51 UTC | #13

**We should treat this proposal positively, this kind of code contribution from the community is very important(and in the future when facing with increasingly complex situations,collaborations and more, it will become more and more important),** we need to learn, try to reduce the dependence on DFINITY( This is what DFINITY should expect to some extent)，so I expect that this proposal will be one of the good start or demonstration of the community contributing code and more
 **which is not only good for decentralization, but also good for long-term sustainable application, development, innovation, and more!**

There may be some difficulties in adopting this proposal, and **I hope to pass the proposal after a series of collaborations, preparations, improvements, and more!**

-------------------------

msumme | 2023-10-21 00:15:59 UTC | #14

[quote="levi, post:12, topic:23886"]
Thank you @msumme and @File for your feedback on this proposal. Taking both your feedbacks into account, I am now updating this proposal to only contain the settings `transfer_fee` and `set_fee_collector`, We will leave the other parameters for a different day.
[/quote]

Thanks @levi.   To me, that sounds like a better plan for the time being, and I will do my best to get the right people looking at this to give more feedback on that.

-------------------------

ICPSwap | 2023-10-21 15:32:13 UTC | #15

Great job! Thanks a lot! Is there a deadline for proposal submissions? We are currently in the process of upgrading the Info feature to accommodate the new parameters for the SNS tokens or other tokens that require modifications, such as decimals, symbols, and more.

-------------------------

wpb | 2023-10-22 13:14:35 UTC | #16

Hey @levi, since you are talking about a proposal that must be submitted to the NNS instead of just a specific SNS, can you change the category of this post from General to Governance?  This is an important governance topic and I think it’s great that you are leading the effort.  Hopefully it won’t be missed by people who are actively engaged in governance participation.  Posting in the Governance category helps ensure it is in front of those people.

-------------------------

levi | 2023-10-22 18:41:02 UTC | #17

@infinite :100: :fire: :pray:

@msumme  Awesome, sounds good.

-------------------------

levi | 2023-10-22 18:43:30 UTC | #18

@wpb Back it up. I am the author of this post.

-------------------------

levi | 2023-10-22 19:09:35 UTC | #19

Hi @ICPSwap, Glad you are here. We are taking one step at a time and making sure we move with caution and care. This proposal now creates the ability for an sns to only change one ledger parameter (relevant for this conversation): `transfer_fee`. 

Lets focus now on making sure that a change in a sns's **ledger-transfer-fee** works smooth with every platform. 

The ICRC-1 specification specifies a mechanism for 'fee-negotiation' when performing a ledger transfer. A client can call the `icrc1_fee` method to get a starting point for the current fee. When making a transfer the client must set the `fee` field in the transfer-args. If the fee set in the transfer-args is not a valid current fee for the ledger, the ledger returns an error `BadFee` with the `expected_fee`. Then if the client is ok with the new fee, the client can make a new transfer with the `fee` field value as the `expected_fee`.

@ICPSwap What does the timeline look like for your system's compatibility with a change of a sns's **ledger-transfer-fee**?

-------------------------

ICPSwap | 2023-10-23 13:14:18 UTC | #20

Hello, Levi! We appreciate your valuable input and dedication to ensuring a seamless user experience. Your insight is truly valuable to us. Rest assured, we are actively working on and will do an upgrade for the Info feature recently to address the compatibility concerns you've raised. Thank you so much!

-------------------------

levi | 2023-10-24 20:43:27 UTC | #21

Hey @peterparker and @lmuntaner, is the NNS-DAPP frontend compatible with a change of a sns's **ledger-transfer-fee**?

-------------------------

peterparker | 2023-10-25 04:38:27 UTC | #22

I have no clue, but I'll happily let my colleague answer :wink:

-------------------------

lmuntaner | 2023-10-25 05:42:41 UTC | #23

If by being compatible you mean whether the NNS Dapp uses the SNS ledger fee when making SNS transactions, the answer is yes.

Or do you mean something else?

Only the NNS ledger fee is hardcoded in NNS Dapp (which we will change also). The rest of the fees come from the canisters.

-------------------------

msumme | 2023-10-25 23:33:10 UTC | #24

@levi Just a quick update, still following up on how we could accept changes, and getting opinions on the changes themselves, and what is necessary from a licensing perspective etc so that the project is not impacted negatively by those issues.  I'll follow up when I have something more definite to share.

-------------------------

levi | 2023-10-27 05:59:19 UTC | #25

Thanks @peterparker, @lmuntaner, cool, compatible means that the nns-dapp fetches the sns ledger transfer fees from the sns ledger canisters at least once at the beginning of each user-session (even once per day is fine but not the best). If that is the case then we are good. Let me know if this definition of compatible is different to the one you were thinking.

-------------------------

levi | 2023-10-27 06:35:28 UTC | #26

@msumme I am with the focus on the facts of these code-changes. It can help the community if the DFINITY foundation engineers share their knowledge about the following fact:

Does the [code-changes](https://github.com/levifeldman/ic/pull/1/files) of this proposal create the functionality for a sns to update it's ledger-transfer-fee and it's fee-collector-account by the sns-proposal-type: ManageLedgerParameters. 

This is the fact that keeps this proposal on the point with it's goal.

-------------------------

lmuntaner | 2023-10-27 09:28:40 UTC | #27

That the same definition of compatible I had in mind 🙂

-------------------------

msumme | 2023-10-30 20:02:25 UTC | #28

[quote="levi, post:26, topic:23886"]
Does the [code-changes ](https://github.com/levifeldman/ic/pull/1/files) of this proposal create the functionality for a sns to update it’s ledger-transfer-fee and it’s fee-collector-account by the sns-proposal-type: ManageLedgerParameters.
[/quote]

Hi Levi.  Yes, the code changes do seem to accomplish the intended purpose.  If we were to take it as a proof of concept, it could be put into the queue as a feature.

You may have noticed, in the Github IC repo, some files with Gitlab CI processes?  Our internal CI/CD systems are currently running on Gitlab.  It's in process to migrate to Github, as that is now technically feasible.  If you inspect the commits, you might also notice they point to merge requests that don't exist in Github.

The reason I'm pointing this out is that accepting the contribution is not yet something we can do automatically.  I have been working on outlining the process for accepting contributions before we get to the state that we can simply merge a PR in Github (there's not a definite date that I know of where that will be finished, but there has been work done to help make that happen).

If the PR you created were to eventually get merged, it would need some unit tests and state machine tests.   Additionally, there is an agreement contributors have to sign so that the code is appropriately licensed for the IC project (which normally is part of the Github process for other repositories that already accept contributions) which would have to be done.

Would you be interested in trying to continue the work to the point that it could be merged?  Or are you rather hoping for DFINITY engineers to finish the remaining work of writing tests, etc?

-------------------------

levi | 2023-11-01 12:29:31 UTC | #29

I take full countability for the code of this feature. The tests are now built into the [code-changes](https://github.com/levifeldman/ic/pull/1/files) branch. The state-machine tests are in this [file](https://github.com/levifeldman/ic/blob/levifeldman-sns-manage-ledger-parameters/rs/sns/integration_tests/src/manage_ledger_parameters.rs). 

Run the tests:
 - `mkdir sns-manage-ledger-parameters && cd sns-manage-ledger-parameters`

 - `git clone -b levifeldman-sns-manage-ledger-parameters --single-branch https://github.com/levifeldman/ic.git && cd ic`

 - `./gitlab-ci/container/container-run.sh`

 - `bazel test --config=local //rs/sns/integration_tests:integration_test_src/manage_ledger_parameters`

---

There is a test at https://github.com/levifeldman/test-manage-ledger-parameters written in Dart. Commands for running this test are [here](https://github.com/levifeldman/test-manage-ledger-parameters/blob/master/README.md): 

Must have linux, dfx, and Dart for this test.

Run the test:
 - `mkdir -p mlp-test && cd mlp-test`
 
 - `git clone -b levifeldman-sns-manage-ledger-parameters --single-branch https://github.com/levifeldman/ic.git && cd ic`

 - `./gitlab-ci/container/build-ic.sh -c --no-release`

 - `cd .. && git clone https://github.com/levifeldman/test-manage-ledger-parameters.git && cd test-manage-ledger-parameters`

 - `dfx start --background --artificial-delay=0`

 - `dart pub get && dart d.dart $(pwd)/../ic/artifacts/canisters`

---

The CLA - contributors license agreement is set up already for my github account by my contributions to other dfinity github repositories.

-------------------------

Severin | 2023-11-01 12:37:08 UTC | #30

[quote="levi, post:29, topic:23886"]
The CLA - contributors license agreement is set up already for my github account by my contributions to other dfinity github repositories.
[/quote]

Record of this is here: https://github.com/dfinity/cla/issues/15

-------------------------

msumme | 2023-11-07 00:19:30 UTC | #31

@levi Apologies for the delay, but I believe I've worked out a process for accepting your contribution.

Essentially, I will be mirroring your commits internally, then merging in a way that would keep your authorship on them.  Since you've agreed to the CLA, we can proceed this way in this case, and see how it goes.

A more robust process is being developed, but I wanted to try to honor the work you've done, and see if we can get it across the finish line.

I'll make some comments on your PR in Github.

-------------------------

levi | 2023-11-07 17:34:23 UTC | #32

Hi @msumme, Cool, that sounds good. I'll continue the technical conversation on the GitHub PR. For those following, I'll post here for updates on this feature.

-------------------------

levi | 2023-12-12 08:07:49 UTC | #33

Hi forum people, while the PR for the ManageLedgerParameters sns proposal type is merging into the master, it has come up in the forum in the conversation [here](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/213?u=levi) that the fee-collector functionality that is implemented in the ledger is not standardized and therefore ICRC compatible ledger-readers will not be able to compute the correct account balances by looking at the transaction logs. Due to this conundrum, I am now taking away the `change_fee_collector` field from the ManageLedgerParameters sns proposal type. If the ledger's fee-collector functionality does get a standard, then we can put the option back. 

The ManageLedgerParameters SNS proposal type now contains the single functionality for a change of a sns-ledger's `transfer_fee`.

-------------------------

abc | 2023-12-12 08:11:15 UTC | #34

Congratulations! ！！
Great accomplishment for a grueling process！
 Looking forward to more and more people and MORE being able to follow you！
......

-------------------------

msumme | 2023-12-18 17:09:59 UTC | #35

@levi This MR has been merged!  It will be deployed with the next SNS deployment.

Thanks for all the effort that was put into this.  Hopefully your next contribution will be easier! 
 (when the tools and infrastructure is available on Github).

-------------------------

levi | 2023-12-19 22:51:35 UTC | #36

Hey, Awesome! You are welcome, I'm glad it works out. Thanks to you and your team for helping this get merged. I'm looking forward.

-------------------------

levi | 2024-01-08 22:27:17 UTC | #37

The ManageLedgerParameters feature is now live on the latest sns-governance-canister-module. The [proposal](https://dashboard.internetcomputer.org/proposal/126882) has passed with the success. SNSs can now change their ledger's transfer fee.

-------------------------

