dieter.sommer | 2022-12-02 17:17:57 UTC | #637

# Cycles Pricing for the Bitcoin Mainnet API

We revised the pricing of the Bitcoin API for the Bitcoin Mainnet canister.

See the [IC pricing page](https://internetcomputer.org/docs/current/developer-docs/deploy/computation-and-storage-costs) for a complete overview of the prices, as well as the [Bitcoin documentation](https://internetcomputer.org/docs/current/developer-docs/integrations/bitcoin/bitcoin-how-it-works#api-fees) for more details. Below is the relevant information for your convenience.

Note that in order for the API to be future proof, some of the methods require to send more cycles along with an API call than actually required and any cycles exceeding the actually-charged cost are refunded. This allows for the Bitcoin subnet size to grow, which results in an increase in price, without canisters breaking.

The 13-node figures apply to the Bitcoin Testnet canister, the 34-node figures to the Bitcoin Mainnet canister. Just to avoid confusion, the size of the subnet where the calling canister resides on does not matter, only the size of the subnet where the Bitcoin canister sits does.

| Transaction                          | Description                                                                                                    | 13-node Subnet (Bitcoin Testnet) | 34-node Subnet (Bitcoin Mainnet) |
|--------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------|-----------------------------|
| *Coding Bitcoin*                     |                                                                                                                |                             |                             |
| Bitcoin UTXO set for an address      | For retrieving the UTXO set for a Bitcoin address (`bitcoin_get_utxos`)                                        | 100,000,000                 | 50,000,000 + 1 cycle per Wasm instruction |
| Bitcoin fee percentiles              | For obtaining the fe percentiles of the most recent transactions (`bitcoin_get_current_fee_percentiles`)       | 100,000,000                 | 10,000,000                  |
| Bitcoin balance for an address       | For retrieving the balance of a given Bitcoin address (`bitcoin_get_balance`)                                  | 100,000,000                 | 10,000,000                  |
| Bitcoin transaction submission       | For submitting a Bitcoin transaction to the Bitcoin network, per transaction (`bitcoin_send_transaction`)      | 5,000,000,000               | 5,000,000,000               |
| Bitcoin transaction payload          | For submitting a Bitcoin transaction to the Bitcoin network, per byte of payload (`bitcoin_send_transaction`)  | 20,000,000                  | 20,000,000                  |

Cost per API call in USD (as of the USD/XDR exchange rate of November 23, 2022):

| Transaction                          | Description                                                                                                    | 13-node Subnet (Bitcoin Testnet) | 34-node Subnet (Bitcoin Mainnet) |
|--------------------------------------|----------------------------------------------------------------------------------------------------------------|-----------------------------|-----------------------------|
| *Coding Bitcoin*                     |                                                                                                                |                             |                             |
| Bitcoin UTXO set for an address      | For retrieving the UTXO set for a Bitcoin address (`bitcoin_get_utxos`)                                        | $0.00013088600              | $0.00006544300 + Wasm instruction cost |
| Bitcoin fee percentiles              | For obtaining the fe percentiles of the most recent transactions (`bitcoin_get_current_fee_percentiles`)       | $0.00013088600              | $0.00001308860              |
| Bitcoin balance for an address       | For retrieving the balance of a given Bitcoin address (`bitcoin_get_balance`)                                  | $0.00013088600              | $0.00001308860              |
| Bitcoin transaction submission       | For submitting a Bitcoin transaction to the Bitcoin network, per transaction (`bitcoin_send_transaction`)      | $0.00654430000              | $0.00654430000              |
| Bitcoin transaction payload          | For submitting a Bitcoin transaction to the Bitcoin network, per byte of payload (`bitcoin_send_transaction`)  | $0.00002617720              | $0.00002617720              |

Some Bitcoin API calls must have at least the following amount of cycles attached to be future proof. Cycles not consumed by the call are returned. This figure does not depend on the replication factor of the subnet, but is intended to allow for the replication factor to grow over time without canisters to be adapted. The call for submitting a Bitcoin transaction to the Bitcoin network does not require to attach extra cycles as the charged cost is independent of the replication factor of the subnet.

| API call | Minimum cycles to be attached for Bitcoin Mainnet |
|----------|-------------------------------|
| `get_utxos` | 10,000,000,000 |
| `get_balance` | 100,000,000 |
| `get_current_fee_percentiles` | 100,000,000 |

The `bitcoin_get_utxos` call is charged through a baseline fee that amortizes part of the Bitcoin block processing and the cycles cost of the actually-consumed Wasm instructions. This is the fairest way of charging because a flat fee would be less fair for requests returning a small number of UTXOs, while a fee scaling with the number of UTXOs is hard to define in a clean way. A few informal test measurement have yielded Wasm execution fees anywhere in the range from less than 200K to more than 1,000K cycles per returned UTXO and in addition 30M-50M cycles for processing of the unstable blocks. This wide variance per UTXO was the reason to not use a charging approach based on the number of UTXOs returned, but it should give you, as a potential canister developer, a rough indication of what to expect to pay in terms of fees. For queries with a small number of UTXOs, you can expect around 100M cycles as fee to be deducted from the provided cycles on the call for a majority of calls.

-------------------------

anonymous | 2022-12-02 16:13:15 UTC | #638

I hope you guys celebrate after all the hard work put into this, seriously. Congratulations!

-------------------------

InsaneClownPosse | 2022-12-02 16:54:02 UTC | #639

I'm getting the itch to learn programming myself seeing the progress made. Very cool stuff.

I have on question tho. Since ThorChain claims it can execute native assets, what is the difference between their crosschain protocol and ICP's? Or are they using 'native' very liberally?

-------------------------

Zane | 2022-12-02 16:59:07 UTC | #640

https://forum.dfinity.org/t/long-term-r-d-general-integration-proposal/9383/16

-------------------------

dieter.sommer | 2022-12-02 17:28:51 UTC | #641

@Zane  already gave some information above, here's some more:

As far as I know ThorChain, their threshold ECDSA protocol cannot make progress if a single node does not participate. The IC's chain-key ECDSA signature protocol (a.k.a. threshold ECDSA) can still make progress if less than 1/3 of the nodes don't play along. Not optimizing such a protocol only for the optimistic case where everything goes well is important in the blockchain context. It's a fairly normal situation in a system following a byzantine failure environment that a node may be compromised. Not considering this in the implementation means not being practical, i.e., ready for the real world.

Also, the IC's chain-key ECDSA signatures comprise advanced protocols for secure key generation, inter-subnet resharing for key backup, and periodic resharing of keys within a subnet. The latter, for example, is important to help prevent against adaptive attackers who try to compromise replicas' key shares over time. After a key resharing, the previous shares are worthless, thus such adaptive attacks are made much harder.

In order to differentiate the IC's threshold ECDSA protocol suite that has all these additional niceties from the off-the-shelf libraries, we use the term *chain-key ECDSA signatures* to refer to the protocol suite instead of just using *threshold ECDSA*. This may explain also that more recently this term is increasingly used.

-------------------------

JaMarco | 2022-12-03 01:51:38 UTC | #642

Does he have a point? https://twitter.com/toghrulmaharram/status/1598775681449881600

-------------------------

nlh | 2022-12-03 03:18:03 UTC | #643

Hi everyone. Just wondering if we have a graphical representation of how the Bitcoin integration actually works?
Something likes how Bitcoin network is connected/integrated to IC network, and what is the flow when someone makes a BTC transaction.
I'll also be greatful if we have a graphical representation of how a Defi procotol in IC can leverage Bitcoin integration. I think it'll be very helpful not just for developers but "a layman" to understand the principles of this break-through technology.
Thanks.

-------------------------

anonymous | 2022-12-03 09:46:53 UTC | #644

An ETH maximalist who seems to attack anything that isn't ETH. 

Anyway, here's timo's response:
 https://twitter.com/timothanke/status/1598963448037003265

Shame there's people trying to discredit DFINITY's hard work.

-------------------------

GLdev | 2022-12-03 10:18:46 UTC | #645

[quote="JaMarco, post:642, topic:6147"]
Does he have a point?
[/quote]

Well, I don't know if he has a point or not, but I can notice how the goalposts keep moving. He started with the premise that this is a bridge. Then the Dfinity folks came in and offered arguments towards deeper integration. And his final argument was "well, as long as your chain respects your canisters". Well, duuh! Of course the consensus has to hold. If it weren't holding we wouldn't have a chain.

In other words, I believe we can all agree that as long as both chains work as intended, a canister on the IC can produce effects both on the BTC chain and on the IC chain, regardless of how you communicate between the two chains. That to me signals a deeper integration.

-------------------------

Zane | 2022-12-03 10:25:32 UTC | #646

Mhh I'm not sure I feel the same way. His point is you can't call it a native integration if you have to rely on any safety assumptions that aren't the ones of the native chain.

Thorchain and other protocols have implemented Threshold ECDSA, although less efficiently than Dfinity, but they still refer to their tech as a bridge. The way I understand it is Dfinity took that apporach and made it more efficient/secure, but the underlying logic is the same.

-------------------------

Choiseongin | 2022-12-03 10:27:48 UTC | #647

I look forward to everyone making noise about this technology.
The more we prove our legitimacy through many discussions, the stronger we become.

-------------------------

GLdev | 2022-12-03 10:34:14 UTC | #648

[quote="Zane, post:646, topic:6147"]
His point is you can’t call it a native integration if you have to rely on any safety assumptions that aren’t the ones of the native chain.
[/quote]

And my point to this is, again, "duuuh!". Of course you need to rely on the safety assumptions of your own chain. Otherwise it would simply be a clone of the original chain. 

IC is its own chain. In order for it to be a chain, it needs to respect some (self defined) things. It wouldn't be a chain otherwise. If the argument here is "btc is older and more proven, IC is new and needs to prove itself" then we agree fully. Of course that's true. But that has nothing to do with inter-chain integrations. I still believe that as long as both chains work reliably as self-described, then this integration is deeper than a bridge.

As a hypothetical: say tomorrow there's a bug in the way the IC exposes the BTC API. And dfinity drops the integration. Would the canisters still be able to use tECDSA to sign transactions on the BTC chain, regardless of being able to communicate that  transaction? If the answer is yes, and we can take that signed transaction and pigeon-send it to another chain, then the argument for this being a bridge would crumble. It would still be a deeper integration, IMO.

-------------------------

JaMarco | 2022-12-03 17:10:38 UTC | #650

[quote="GLdev, post:648, topic:6147"]
And my point to this is, again, “duuuh!”. Of course you need to rely on the safety assumptions of your own chain. Otherwise it would simply be a clone of the original chain.
[/quote]

Not necessarily. There are chains that inherent the security of the parent chain, like rollups.

-------------------------

Sabr | 2022-12-03 18:32:19 UTC | #651

But how can rollups be possible with BTC, @JaMarco, when BTC is a "dumb coin" with no smart contract capability? In my view, the key questions here are as follows: 1) whether any trust is required from a centralized intermediary (e.g., like soBTC = BTC wrapped on Solana, with the now failed FTX in the middle), or 2) whether a third blockchain/sidechain in the middle is required. For the latter, even if the third chain is decentralized, this introduces a critical latency gap in the handoff process between two transacting parties that could be exploited or cause invalid/duplicate transactions. I'm not an expert in cryptography, but common sense tells me that introducing a middleman is never a good idea for real-time transactions, decentralized or not.

-------------------------

diegop | 2022-12-03 19:30:56 UTC | #652

[quote="Inch_Deen, post:587, topic:6147"]
Who cares? I asked when it comes out? Your team delay again and again.
[/quote]

@Inch_Deen Fwiw…. To be clear: It’s out now. I hope this makes my reply 2 weeks ago seem much more reasonable in context for the future.

-------------------------

ielashi | 2022-12-03 21:23:03 UTC | #653

To follow-up on @Manu's post regarding validating the bitcoin state, [here](https://drive.google.com/file/d/1u4Qo_U9YRNEYPaNyrlLtbY_n4EZX2z0p/view?usp=share_link) is the `utxodump_shuffled.csv` file that we used (you'll need to decompress it with `tar xzvf`). In case you ran into the same determinism issue that Manu ran into, you can use this file and skip to step 6 of [the instructions](https://github.com/dfinity/bitcoin-canister/tree/launch/bootstrap) directly.

To verify the contents of this file:

* Run steps 1 to 4 of the instructions. You'll end up with a file called `utxodump.csv`.
* Run `sort utxodump.csv` to sort the file, and compute its checksum by running `sha256 utxodump.csv`.
* Run `sort utxodump_shuffled.csv` to sort the file you downloaded above, and compute its checksum by running `sh256 utxodump_shuffled.csv`
* The checksums should match, verifying that the contents of the files are identical.

-------------------------

spnrapp | 2022-12-04 16:57:43 UTC | #654

The fee for `bitcoin_get_utxos` seems a bit excessive for mainnet?

```
 Panicked at 'Received 200000000 cycles. 10000000000 cycles are required.'
```

And this was trying to get utxos of a freshly created address.

-------------------------

Dylan | 2022-12-04 20:22:30 UTC | #655

That message does not mean that 10,000,000,000 cycles is the fee.
https://internetcomputer.org/docs/current/developer-docs/integrations/bitcoin/bitcoin-how-it-works#api-fees
![image|690x382](upload://gbYfwFUlwEPeCijGWMxR5lVuv6b.png)

-------------------------

dfisher | 2022-12-04 20:40:28 UTC | #656

Good luck @spnrapp . lots of us in the community are routing for you guys

-------------------------

spnrapp | 2022-12-05 08:43:40 UTC | #658

Thanks @Dylan ! We have overlooked that part, all works now!

-------------------------

diegop | 2022-12-06 15:09:09 UTC | #660

[quote="Inch_Deen, post:659, topic:6147"]
have u ever calculated how much cycyles burns per second can reduce the total huge inflation of ICP per year?
[/quote]

@Inch_Deen Few folks flagged your comments as "off topic." It is my job to please ask you keep on topic or ask on more relevant threads. I do not think anybody will answer your questions because they are not really about BTC integration. Have you checked other more relevant threads? I hope you take this with the intent I mean it: just a reminder to a user to let them know how developer forum self-organizes. 

(sidenote: effective ICP annual inflation is around 4-5% currently. I would not call that "huge")

-------------------------

Jamietier | 2022-12-06 17:00:35 UTC | #663

Make another thread to discuss this, or contribute to [this](https://forum.dfinity.org/t/can-the-ic-become-deflationary/16125/3) thread with your thoughts; this thread is for BTC integration. 

Once again, well done team - let's get the good news out there!

-------------------------

bitbruce | 2022-12-07 01:26:18 UTC | #665

Where are the Canister-id's for ckBTC Ledger and ckBTC Minter?

-------------------------

bitbruce | 2022-12-07 04:35:37 UTC | #666

Will ckBTC Ledger and ckBTC Minter Canisters be deployed by Dfinity official, or waited for spontaneous deployment by the community?

-------------------------

yvonneanne | 2022-12-07 06:04:30 UTC | #667

Hi bitbruce
ckBTC has not been launched yet, the DFINITY team is still working on it.
Manu and Leo presented a glimpse of it on November 23, see https://www.youtube.com/watch?v=ZDPIR_fpgXk, from 39:33.

-------------------------

osman | 2022-12-08 21:17:33 UTC | #668

I am not a software developer. However, a software developer friend of mine explained the bridge concept to me in an understandable way. Bridge, which claims to establish the connection between two blockchains, does not actually make any connection. It burns assets on one blockchain platform and creates virtual the same assets on the other blockchain. Integration is when assets in one blockchain are transferred to the other blockchain in their original form. I hope BTC integration of ICP works like this.

-------------------------

singularity | 2022-12-09 09:04:22 UTC | #669

ICP does both. The former using ckBTC, and tha later using chian key cryptography. But even the bridge one is better than in other bridges, it removes a middleman and uses ICP blockchain consensus rather than a trusted middleman to do it.

-------------------------

THLO | 2022-12-09 11:16:42 UTC | #670

[quote="singularity, post:669, topic:6147"]
it removes a middleman and uses ICP blockchain consensus rather than a trusted middleman to do it.
[/quote]

That's exactly the key point. A bridge is an additional component that you need to trust.  Neither the Bitcoin integration nor ckBTC (which has **not** been released yet!!) rely on a bridge at all because IC nodes can interact with the Bitcoin P2P network directly.

-------------------------

caolw | 2022-12-10 14:23:50 UTC | #671

I propose that tokens in other chains on ic begin with ic, e.g. icbtc, icdogecoin, iceth

-------------------------

icme | 2022-12-10 15:30:22 UTC | #672

https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/602

Hey Manu, I was looking at the dashboard for Bitcoin stable memory utilization recently and saw this.

![image|442x500](upload://vIbkpljrhcu9XB5meBnHicZrqhE.jpeg)

It looks to me like the state of the Bitcoin canister has grown from ~39.55GB to 40.2GB in a week, or ~93MB per day.

This would mean the canister is growing at 33.9GB per year.

Is it safe to assume that single canister stable storage limits will be continuously lifted (and can be done so safely) to stay ahead of any needs of the BTC integration?

Is there anything you envision that could speed up this storage required growth rate?

-------------------------

timo | 2022-12-10 16:47:20 UTC | #673

I think it can’t be predicted. It can also shrink. You can also say it grew 40GB/14 years.

-------------------------

anonymous | 2022-12-11 21:03:23 UTC | #674

They shall begin with ck{token}, ck = [chain key](https://support.dfinity.org/hc/en-us/articles/360057605551-What-is-chain-key-technology-), which is not all that bad.

-------------------------

ielashi | 2022-12-12 13:32:19 UTC | #675

In addition to Timo's answer, I'll also add that the Bitcoin canister is currently quite wasteful with its use of memory and there are a number of optimizations that can be done to reduce its memory footprint. These weren't a priority prior to launch, but can become a priority depending on how the UTXO set grows.

-------------------------

dfisher | 2022-12-13 12:57:25 UTC | #676

Is ckBTC by end of Q1 realistic?

-------------------------

jglassemc2 | 2022-12-14 20:00:05 UTC | #677

A Zero-Knowledge Roll Up (ZKRU) for transactions is possible on the Bitcoin network.
https://medium.com/coinmonks/zk-rollups-on-bitcoin-ce35869b940d
ZKRU introduces additional code vulnerabilities. However, if done correctly enables a tradeoff of speed and cost for the security of Bitcoin network verified transactions. I am not suggesting that the ckBTC design is bad. In fact, it is cheaper and less likely to introduce code that can be hacked. Furthermore, ckBTC is a prerequisite for what I would envision as a zkBTC on the IC. However, it does not inherit the BTC network security. BTC network security is likely a large draw for BTC holders. In addition to the smart contract example provided it would also require a wallet extension which can capture self-custodied BTC signatures needed in order to transact zkBTC on the IC.

I am a beginner in this space and my next lines of investigation will be:
- How does the ZKRU post data?
- Will capturing bitcoin wallet signatures be sufficient?
- How do we make it compressed (only the minimal amount of transfer required)?

I will attempt building a ZKRU on a BTC testnet and then plan to attempt to build a canister for the processes I am doing off chain. I thought I would share because I am currently in the middle of many projects.

-------------------------

ielashi | 2022-12-20 18:50:47 UTC | #678

Folks, https://dashboard.internetcomputer.org/proposal/98062 has been executed, which allows us to re-upload the Bitcoin testnet state in a verifiable way. Prior to this proposal, the Bitcoin testnet state was unverifiable. The Bitcoin testnet API will not be available for the next 3-5 hours until the upload is complete.

Update: The new verified state has been uploaded and the Bitcoin testnet API is now available again.

-------------------------

blabagastered | 2022-12-21 10:06:19 UTC | #679

Is there a working group or something like it for Bitcoin integration, ckBTC, Ethereum integration, and generally the third-party-chain integration process more broadly?

Seeking to understand in more detail the timeline and some of the features and security assumptions to make design decisions for a protocol on the IC.

-------------------------

jzxchiang | 2022-12-23 02:07:57 UTC | #680

I can't find the Bitcoin canister in the IC Dashboard when I [filter](https://dashboard.internetcomputer.org/canisters?s=25&subnet=tdb26-jop6k-aogll-7ltgs-eruif-6kk7m-qpktf-gdiqx-mxtrf-vb5e6-eqe) by the NNS subnet ID. Anyone know why?

-------------------------

Severin | 2022-12-23 09:45:30 UTC | #681

It's not part of the NNS subnet. See this post, last paragraph: https://forum.dfinity.org/t/chain-key-bitcoin-ckbtc-bitcoin-wrapped-by-a-smart-contract/17606/9

-------------------------

ielashi | 2022-12-23 12:38:15 UTC | #682

The Bitcoin canisters (not to be confused with the ckBTC canister), are hosted on subnet [w4rem](https://dashboard.internetcomputer.org/canisters?s=25&subnet=w4rem-dv5e3-widiz-wbpea-kbttk-mnzfm-tzrc7-svcj3-kbxyb-zamch-hqe).

-------------------------

Kaburaha | 2023-02-21 12:19:35 UTC | #684

Hey there! That's a great question about the integration process for Bitcoin, ckBTC, Ethereum, and third-party-chains. It would be interesting to know if there's a working group or something similar to help streamline the integration process and ensure security. Understanding the timeline and features would definitely be helpful in making informed design decisions.

-------------------------

dieter.sommer | 2023-02-22 09:03:50 UTC | #685

Hi @Kaburaha!

First of all, welcome to the Internet Computer Forum!

Regarding your question: We are in the process of shaping a working group. Currently, the discussions are focussed on Ethereum integration and done on the forum: https://forum.dfinity.org/t/long-term-r-d-integration-with-the-ethereum-network/9382/54

If you follow this topic and the one here, you will be getting most of the current discussions related to integrations. Also, you will get the relevant information for the upcoming WG.

-------------------------

Manu | 2023-06-15 15:11:28 UTC | #687

Hi everybody!

The bitcoin canister has been running successfully for more than half a year now. During this time, DFINITY has of course kept a close eye on whether everything was working as expected. We set up some tooling that queries the height of the Bitcoin canister, and compares it to what various block explorers have, such that alarm bells would go off if they disagree too much (which was never the case!). This monitoring currently relies on DFINITY's involvement, and we thought we could improve things further by instead having this monitoring system run as an autonomous “watchdog canister” on the Internet Computer. We now made progress on this idea and would like to propose this more concretely to the community.

The watchdog canister ([source on github](https://github.com/dfinity/bitcoin-canister/tree/master/watchdog)) regularly queries a list of block explorers via [HTTPS outcalls](https://internetcomputer.org/https-outcalls) to obtain their view of the latest Bitcoin block height. More precisely:

1. It queries all block explorers on the list to obtain their view of the latest block height.
2. Some explorers may temporarily be offline, so it filters out all errors, and only continues with the successful results. If less than three blockchain explorers respond successfully, then the watchdog failed to establish the block height this time, and does not take further action until the next check.
3. It defines its “target block height” as the median of all heights returned by the block explorers. It uses the median such that one block explorer returning an incorrect height cannot influence the target height.
4. It compares its target height with the block height that the bitcoin canister currently has. If this differs by more than 2, something must be wrong. This would be a dangerous scenario as canisters that build on the Bitcoin integration (such as [ckBTC](https://internetcomputer.org/ckbtc)) may now get inconsistent information from the Bitcoin canister, which can have serious consequences. We propose that the watchdog canister can pull the emergency brake in such a scenario, and temporarily pause the Bitcoin canister from responding to requests: it is better to return an error than to give information that may be incorrect. It would re-enable access whenever the Bitcoin canister and Bitcoin explorers agree again. If the divergence can only be fixed through an upgrade to the Bitcoin canister, then access to the Bitcoin canister would only be restored as soon as the upgrade proposal is accepted and the Bitcoin canister caught up to the latest Bitcoin height.

We view this watchdog canister as an additional safety mechanism, much like airbags in a car: we never expect this mechanism to kick in, and based on the historical data it would have never intervened in the half year since the launch of the Bitcoin canister, but in the unlikely event the Bitcoin canister and block explorers have a different view of the current height, it seems prudent to temporarily pause the Bitcoin canister access.

Unless there are concerns, DFINITY plans to submit proposals in the coming weeks to

* Install the watchdog canister under NNS control
* Update the Bitcoin canisters (mainnet and testnet) to allow the watchdog canister to pause and unpause its operations

Please let us know what you think! We’d be happy to hear your feedback and to answer any clarifying questions here.

-------------------------

infinite | 2023-06-15 16:42:10 UTC | #688

https://forum.dfinity.org/t/integration-with-brc-20-and-ordinals-vis-tschnorr/20014

HI.Excuse me,Is there any progress on the above proposal? What is its specific priority?
Thank you very much!

-------------------------

Manu | 2023-06-22 09:18:01 UTC | #689

[quote="Manu, post:687, topic:6147"]
* Install the watchdog canister under NNS control
[/quote]

These proposals are now open for voting:
* https://dashboard.internetcomputer.org/proposal/123101 (BTC testnet)
* https://dashboard.internetcomputer.org/proposal/123106 (BTC mainnet)

-------------------------

Manu | 2023-06-22 09:21:56 UTC | #690

There are plans to start a working group on this topic soon, so hopefully you can follow the progress there soon.

-------------------------

ielashi | 2024-01-25 08:08:08 UTC | #691

Hey everyone! DFINITY this week has submitted two seemingly identical proposals to upgrade the "Watchdog Testnet Canister":

1. [Proposal 127120](https://dashboard.internetcomputer.org/proposal/127120)
2. [Proposal 127121](https://dashboard.internetcomputer.org/proposal/127121)

In case you're unfamiliar, the "Watchdog Testnet Canister" is a monitoring canister that queries external block explorers and compares their tip with the Bitcoin testnet tip that's available on the IC. Whenever it detects a divergence, it disables the Bitcoin testnet API out of precaution. You can read more about the watchdog canister in Manu's [post above](https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/687).

As mentioned in the proposal summaries, we're upgrading the canister to make it more robust and less noisy. We've unfortunately made a mistake when submitting proposal 127120 - we didn't include the canister's initialization arguments in the proposal. We've corrected that in proposal 127121. Thus, DFINITY plans to reject proposal 127120 and adopt proposal 127121.

If you have any questions please don't need hesitate to ask.

-------------------------

ielashi | 2024-02-05 10:22:14 UTC | #692

Folks, we were in the process of upgrading the Bitcoin testnet canister this week. You may have noticed that DFINITY rejected [proposal 127667](https://dashboard.internetcomputer.org/proposal/127667), as it was unintentionally proposing to _reinstall_ the Bitcoin testnet canister, rather than upgrade it.

This proposal has been resubmitted, with the correct upgrade mode, in [proposal 127681](https://dashboard.internetcomputer.org/proposal/127681).

We're discussing now as well how we can make the upgrade mode more visible in proposals to avoid these issues from reoccurring in the future.

-------------------------

