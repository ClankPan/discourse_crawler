dieter.sommer | 2021-11-08 14:21:44 UTC | #104

@JoekingJoeker 

As Islam already mentioned, there are a few limited use cases for the Bitcoin feature without t-ECDSA being available, but those would not be the reason to provide Bitcoin early without t-ECDSA.

The main point of making Bitcoin available in some form to developers before t-ECDSA is available would be to allow folks to already start building their Bitcoin-enabled smart contract canisters early on and have them (almost) ready when we finally launch the Bitcoin feature with t-ECDSA integration. t-ECDSA could be mocked during the development and replaced finally with the real functionality, which is essentially swapping out one mocked method call with the real t-ECDSA signing system call. That is, the main motivation for doing this "pre-release" would be to limit the implications on the Bitcoin integration of t-ECDSA slipping into Q1 of next year.

-------------------------

jzxchiang | 2021-11-08 22:20:10 UTC | #105

Dumb question, but from a dapp developer POV, I'm curious why access to Bitcoin would be useful.

I can totally see why an Ethereum integration would be useful... you could create ERC-20 tokens, access DeFi liquidity, etc. Basically, IC would function as a L2 rollup.

But when it comes to Bitcoin use cases, I'm in the dark.

-------------------------

dieter.sommer | 2021-11-09 12:56:45 UTC | #106

Hi @jzxchiang!

Let me give you some ideas of what you can do once we have Bitcoin integration up and running. In essence, it will allow you to deploy any kind of smart contracts that use Bitcoin much like people do these days on Ethereum with Wrapped Bitcoin (~14 B USD). Just with the difference that the IC is highly scalable, fast, and cheap in terms of cycles / gas cost. Already this alone opens a wide range of application cases.

The main point here is that we can make use of the liquidity on the Bitcoin network for smart contracts on the Internet Computer, without involving any intermediary such as a bridge. The IC is, due to its properties, the most suitable platform for running smart contracts with strong decentralization and at a low cost.

Those kinds of traditional smart contracts using some form of wrapped Bitcoin is not all you can do. Every canister can be a decentralized Bitcoin wallet. That is, you neither need to manage a private key for it yourself, nor do you need to trust any single party for doing this for you. This is a very powerful property enabled by threshold ECDSA signatures on a decentralized platform.

Thinking this further, you can blend in Bitcoin use cases with any kind of application. Or you could realize as simple use cases as paying for cycles of canisters with bitcoin. Or, for example, when decentralizing your dApp using the upcoming SNS (Service Nervous System), you could accept Bitcoin as currency for divesting the governance tokens for your dApp.

-------------------------

LightningLad91 | 2021-11-09 13:06:15 UTC | #107

[quote="dieter.sommer, post:106, topic:6147"]
Or you could realize as simple use cases as paying for cycles of canisters with bitcoin
[/quote]

Can you expand on this? Are you referring to a secondary market for cycles where someone swaps BTC for XTC or WTC (already converted from ICP) or are you saying that Dfinity sees a future where BTC can be converted to cycles? As someone who has invested in ICP I’d be very concerned about cycles being minted using another token.

Thanks!

-------------------------

dieter.sommer | 2021-11-09 13:23:01 UTC | #108

> Can you expand on this? Are you referring to a secondary market for cycles where someone swaps BTC for XTC or WTC (already converted from ICP) or are you saying that Dfinity sees a future where BTC can be converted to cycles? As someone who has invested in ICP I’d be very concerned about cycles being minted using another token.

It's the further, that is, the secondary market for cycles. This is an early idea on a potential use case that may be convenient for some, that's why it has been mentioned above. I would see this in a way that the community can build a canister that allows for exchanging BTC to cycles via ICP. So the canister owner buys ICP and converts them to cycles using the usual mechanisms for this and then sells cycles for BTC. Minting cycles using other tokens than ICP is not envisioned.

That functionality would be convenient when you already own Bitcoin. So you don't need to sell them to buy ICP and then convert them to cycles, but can go the direct route from Bitcoin to cycles.

-------------------------

LightningLad91 | 2021-11-09 13:24:33 UTC | #109

This makes a lot more sense and does sound very convenient. Thank you for clarifying!

-------------------------

sakoma.icp | 2021-11-10 07:40:46 UTC | #110

Here is a concrete use cas:
Say you are aggregating global payment for local merchants in latin america, south east asia etc.
Once payment are collected merchants get disbursed on demand, but you don't trust local currencies which may be devaluated. Instead you convert in BTC and have a Canister to hold the BTC and merchant disbursement logic. 

In fact canisters that holds btc can replace third 3rd parties in cross border transactions. BTC is becoming a great "reserve currency" to a point that more companies (square, tesla) have part of their reserves in btc not at the bank.

-------------------------

dieter.sommer | 2021-11-10 22:04:38 UTC | #111

Dear community!

The minutes of the community workshop of November 4, 2021 are available now:
https://drive.google.com/file/d/1hGPJHKol1fHzGgLt9dZVUZUhIraF7Znl

Thanks again for the valuable discussions and input!

-------------------------

jzxchiang | 2021-11-11 22:21:09 UTC | #112

Having a smart contract hold Bitcoin without reliance on a centralized intermediary does sound like a powerful use case.

I read through the workshop minutes, and it said that we probably still need wrapped Bitcoin because the confirmation time on the Bitcoin network is too long.

A couple questions of clarification:

* Would wrapped BTC on the IC still be decentralized (as opposed to wBTC on Ethereum), provided that the wrapping canister is autonomous?
* How would the wrapping canister work? For example, I purchase wBTC from an IC wrapping canister using ICP, and get the wBTC immediately. In the meantime, the wrapping canister made a call to the Bitcoin network and is waiting for confirmation. What if the call fails? What happens to the wBTC that was already minted and transferred?

-------------------------

dieter.sommer | 2021-11-12 14:20:52 UTC | #113

@jzxchiang

> Would wrapped BTC on the IC still be decentralized (as opposed to wBTC on Ethereum), provided that the wrapping canister is autonomous?

Of course, the wrapped Bitcoin would still be decentralized in the same way. What we clearly would need, as you mention, is to make the wrapping canister autonomous, e.g., using the upcoming Service Nervous System (SNS), and allow for tokenized governance.

> How would the wrapping canister work? For example, I purchase wBTC from an IC wrapping canister using ICP, and get the wBTC immediately. In the meantime, the wrapping canister made a call to the Bitcoin network and is waiting for confirmation. What if the call fails? What happens to the wBTC that was already minted and transferred?

Consider the following way to implement it through a Wrapped Bitcoin canister:
* A user transfers Bitcoin to her assigned address of the Wrapped Bitcoin canister.
* The canister, once it has received the transaction on the Bitcoin network, makes an entry of the received balance for the principal of the user. This is when the wBTC get minted on the IC. They are being kept track on the ledger in the canister.
* The user can now transfer wrapped Bitcoin to other users by instructing the canister to update the ledger accordingly.
* The canister holds a pool of real Bitcoin of the amount of the issued wBTC, so we have 1:1 backing like Ethereum's Wrapped Bitcoin. That's like the good old gold standard, but with digital gold. :-)

Coming to the main part of your question on buying wBTC with ICP:
Users can not only obtain wrapped Bitcoin by depositing real Bitcoin, but also, e.g., pay in ICP for wrapped Bitcoin, thus having a completely decentralized and "trustless" ICP/wBTC exchange. When paying for Bitcoin with ICP, the issued wBTC needs to be backed by an available liquidity pool of real BTC in the canister in order to have a 1:1 backing. This is clearly the preferable option.

This wrapped Bitcoin implementation is part of Phase 2 of the Bitcoin integration and either the Foundation or the community will be doing it. Still be be discussed.

-------------------------

dieter.sommer | 2021-11-12 12:57:20 UTC | #114

**Milestone accomplished!** Protocol integration between Bitcoin Adapter and BTC System Component
:partying_face:

Our engineering teams have successfully accomplished a major milestone this week by having the protocol between the Bitcoin Adapter in the networking layer and the BTC System Component in the execution layer working! That is, the BTC System Component can request blocks from the Adapter and the Adapter matches the request with its prefetched blocks and provides a new Bitcoin block in case of a match. The new block is processed by the System Component.

The block request by the BTC System Component comprises all block hashes in the view the System Component has of the Bitcoin blockchain. The Adapter responds with a Bitcoin block in case it has a block that fits "on top" of a block the System Component has in its local view.

This protocol-level integration has been done with a single Adapter that is connected to the BTC System Component "directly" and not through the IC protocol stack. This means that the core part of the Bitcoin-related functionality is working now in these two main components, but the communication mechanism is not the one we intend to have in the final system.

The next steps will be to tackle the integration into the protocol stack to have the requests and responses integrate with the IC protocol stack. This will also enable the submission of outgoing transactions. Some of the work on the foundation for the next steps, e.g., the extension of the consensus layer, has been done already.

-------------------------

jzxchiang | 2021-11-12 21:06:17 UTC | #115

Sounds like a great pilot use case of SNS!

> * A user transfers Bitcoin to her assigned address of the Wrapped Bitcoin canister.

Does every user have their own assigned address, or is it just a single Bitcoin address belonging to the Wrapped Bitcoin canister?

I think I'm starting to understand the flow. For example, if a user wants to purchase some ICP using BTC:

* The user calls the Bitcoin network to transfer their BTC to the Wrapped Bitcoin Canister
* The Wrapped Bitcoin Canister listens to transactions on the Bitcoin network, discovers this transaction, and credits the user with some wBTC
* The user calls an Exchange Canister to convert their wBTC to ICP; the Exchange Canister calls both the Wrapped Bitcoin Canister and the ICP Ledger Canister to perform this exchange (needs to be atomic, which may require two-phase commit or saga)

Does that sound right?

-------------------------

dieter.sommer | 2021-11-15 22:17:35 UTC | #116

Hi @jzxchiang!

Sorry for the late response.

[quote="jzxchiang, post:115, topic:6147"]
Sounds like a great pilot use case of SNS!
[/quote]
Indeed!

[quote="jzxchiang, post:115, topic:6147"]
Does every user have their own assigned address, or is it just a single Bitcoin address belonging to the Wrapped Bitcoin canister?
[/quote]
Either approach is possible:
* You can use BIP-32 key derivation to derive a key for each user principal to which the funds are transferred. This makes it trivial to associate the transfer with the principal.
* Every user can transfer to the same address of the canister and (mis)use the Bitcoin opcodes to encode the principal into the transaction.

[quote="jzxchiang, post:115, topic:6147"]
I think I’m starting to understand the flow. For example, if a user wants to purchase some ICP using BTC:

* The user calls the Bitcoin network to transfer their BTC to the Wrapped Bitcoin Canister
* The Wrapped Bitcoin Canister listens to transactions on the Bitcoin network, discovers this transaction, and credits the user with some wBTC
* The user calls an Exchange Canister to convert their wBTC to ICP; the Exchange Canister calls both the Wrapped Bitcoin Canister and the ICP Ledger Canister to perform this exchange (needs to be atomic, which may require two-phase commit or saga)
[/quote]
The first bullet above is exactly right! The second one is slightly different: The Wrapped Bitcoin Canister uses the API of the BTC System Component to know about UTXOs sent to the Bitcoin address of interest. Once a UTXO is received, the Wrapped Bitcoin Canister issues wBTC by making an according entry in its ledger. With this you already have wBTC on the IC with transactions that have ~2 second finality.
The exchange canister is the tricky entity here as it is a decentralized exchange (DEX), which would be one application of wBTC. A DEX can be implemented using different technologies, e.g., order book or automated market makers.
Essentially, we require liquidity in the currency pairs the exchange offers (here only ICP/BTC) in order to fulfill orders for the pair and have a liquid market. Liquidity can be provided, e.g., through an Automated Market Maker (AMM) approach. Providing the liquidity would happen through the regular means for the respective token: For ICP, it is bought via some channel, e.g., using USD or EUR, and then transferred to the Exchange Canister. wBTC is provided as outlined in the first 2 bullets and then transferring it to the Exchange Canister.

-------------------------

jzxchiang | 2021-11-16 07:37:16 UTC | #118

Thanks for the explanation. It makes sense.

> Essentially, we require liquidity in the currency pairs the exchange offers (here only ICP/BTC) in order to fulfill orders for the pair and have a liquid market.

When you mean "we" do you mean DFINITY is planning on implementing a DEX, or that in general DEXs should have liquidity?

-------------------------

dieter.sommer | 2021-11-17 08:49:42 UTC | #119

We don't have a DEX on the roadmap so far as far as my knowledge goes. People in the community are interested to build one.

-------------------------

allwynpinto1990 | 2021-11-17 11:33:47 UTC | #120

I would also like an update on this topic, 
when will it commence and when will it be achieved, as this is the most exciting event. "integration with BTC"
 :) 

Thank you :)

-------------------------

dieter.sommer | 2021-11-19 17:41:05 UTC | #121

Update:
As discussed in the Nov 4 workshop and appreciated by many of its participants, we intend to release a "Developer Preview" of the Bitcoin feature without threshold ECDSA support so that people can start implementing canisters against its interface (and have them ready when the feature becomes generally available :-) ). Details are being discussed at the moment on how to best do so without generating extra efforts yet supporting our developer community as best as possible.

-------------------------

tonynguyen | 2021-11-26 12:31:21 UTC | #122

This feature will released on next month?I can't wait to see it. thanks

-------------------------

THLO | 2021-11-26 16:56:35 UTC | #123

 We are also excited about this feature!

As @dieter.sommer said above, we won't be able to release the full feature next month because the threshold ECDSA feature is not ready yet.
The current goal is to deliver a "developer preview" so that developers can start working with it and provide feedback.

The release date for this preview is not set yet but we will probably release it in December or January (to start the new year with a bang! :) ).

-------------------------

dieter.sommer | 2021-11-26 17:43:16 UTC | #124

Besides the update on the timeline by Thomas (@thlo) above, let me give a brief update on what we are working currently.

One of our current foci is working out an approach to testing, both for our internal development and for folks who develop smart contract canisters.
* For our internal testing we are evaluating the use of bitcoind in regtest mode to simulate our own Bitcoin network. Another possible option is writing a mock that is likely easier to integrate with our development pipeline and testing infrastructure. The goal here is to have an approach that allows us to do most of the testing of our implementation without connecting to either the Bitcoin mainnet or testnet as part of our system and production tests that test the system as a whole.
* For developers of smart contract canisters we intend, as already outlined, to provide an integration with the Bitcoin testnet. The likely solution on how this is done is to run another Bitcoin Adapter for the testnet integration and have it provide the blocks related to the testnet. The BTC System Component would keep track of both mainnet and testnet UTXO sets and canisters could choose which network they would like to work with for the API calls. This is currently in the design phase and seems to be something everybody interested in the feature wants us to build. However, it does require some extra work, e.g., running another adapter on each replica and tweaking the algorithm for assessing changes to the hashing difficulty for blocks as the latter has a special case on the testnet to account for the heavily fluctuating hashrate there.
Another testing mechanism we are thinking about is to allow for bitcoind in regtest mode to be used 
in local testing before deploying the code to the IC mainnet. Here we are working on the precise way of integration with the dfx toolchain with the goal of finding the best tradeoff between implementation effort and convenience of use of the resulting solution.

The other focus is the integration of the code related to the BTC System Component and the Bitcoin Adapter with the IC protocol stack. This has been shortcut so far and still needs to be done before anything, even a developer preview, can be shipped.

-------------------------

everhusk | 2021-11-27 05:45:45 UTC | #125

I would recommend if it's too much extra work (and potentially a security/scalability issue to add the testnet into the IC) then just skip it and get the spec for the main Bitcoin adapter out, sure it's a bit expensive to test but there's workarounds, and a well funded grants program :slight_smile:.

The IDL is really the main thing devs need to start developing apps with the functionality mocked out prior to threshold ECDSA signatures. So rather than the testnet adapter, I think integration with the IC protocol stack should be Dfinity's top priority right now.

-------------------------

tonynguyen | 2021-11-27 07:51:24 UTC | #126

great to hear that. Hopefully, the full feature will released in January.

-------------------------

dieter.sommer | 2021-11-29 19:01:22 UTC | #127

The full feature requires threshold ECDSA to be finalized. January will be tight for this, so we will likely see a developer preview in late December or January so people can already start building smart contracts using the Bitcoin functionality. The full release is expected later in Q1/2022.

-------------------------

dieter.sommer | 2021-11-29 19:06:19 UTC | #128

[quote="everhusk, post:125, topic:6147, full:true"]
I would recommend if it’s too much extra work (and potentially a security/scalability issue to add the testnet into the IC) then just skip it and get the spec for the main Bitcoin adapter out, sure it’s a bit expensive to test but there’s workarounds, and a well funded grants program :slight_smile:.
[/quote]

You are definitely thinking into the right direction! We are currently evaluating what it takes to integrate with the testnet and do it if it's a reasonable effort. Efforts spent on testing support for customers pay off in the long run in my experience. :slight_smile: If it's too much, we'll need to see whether we launch a developer preview without it and let people play on Bitcoin mainnet.

> The IDL is really the main thing devs need to start developing apps with the functionality mocked out prior to threshold ECDSA signatures. So rather than the testnet adapter, I think integration with the IC protocol stack should be Dfinity’s top priority right now.

The goal is to release the developer preview with the final or very-close-to-final interface so that people can build on it.  The integration with the protocol stack to reach this goal has very high priority. I guess that's what you are mainly interested here, right?

-------------------------

dieter.sommer | 2021-12-10 17:24:52 UTC | #129

**Update**

We have thought again what the quickest path is to bring the Bitcoin feature to our community so that smart contract canisters can be implemented against its API. The outcome was that our immediate focus should be on releasing the Bitcoin feature as part of the local dfx development environment in January. The local replica will only connect to a locally-running bitcoind instead of the Bitcoin mainnet or testnet. According to current thinking we release it as a beta version of dfx that contains everything the latest dfx version contains as well as the Bitcoin feature.

This setup will allow community members to start implementing their smart contracts using Bitcoin against the IC Bitcoin API. We think this is the fastest path forward to bring something to our valued community so you can start working with it. Clearly, threshold ECDSA will not be available and be replaced by either our mock API or just an ECDSA library running in the canister. This can easily be swapped out with the real threshold ECDSA API once it is available.

The biggest remaining chunk of work to obtain this MVP is the IC stack integration on which we are focussing right now. This is cutting across the whole IC stack and has a couple of remaining issues open. There's also further small work items still to be done, which are not interesting enough to talk about them here. We think it is realistic to get all of this done in Januray and ship this MVP in late January, unless we hit some unexpected roadblocks.

This approach spares us lots of effort we would need to do for an IC mainnet launch of the feature, thus we can launch it earlier than we would be able to with the feature running on mainnet. This will be the next step to be worked on, of course.

Besides the above, we have made quite good progress in terms of the testing plan and figuring our how to do test the feature itself reasonable and provide something canisters authors can use for their own tests. More about this in another post.

We are interested in what you think about this modified fast-path approach to a first MVP release of the feature.

-------------------------

nomeata | 2021-12-10 21:33:31 UTC | #130

How much Bitcoin logic (e.g. parsing utxo and transaction data, creating transactions) is expected to be handled by the canisters? I assume (given that we rightfully keep the system APIs primitive if possible) a significant bit…

So are there concrete plans (and resources) to provide Motoko libraries? Or should developers expect to use Rust if they want to use it as soon as the feature goes live?

-------------------------

Magick | 2021-12-11 04:19:23 UTC | #131

Great Share, this is helpful.

-------------------------

dieter.sommer | 2021-12-13 08:07:07 UTC | #132

[quote="nomeata, post:130, topic:6147, full:true"]
How much Bitcoin logic (e.g. parsing utxo and transaction data, creating transactions) is expected to be handled by the canisters? I assume (given that we rightfully keep the system APIs primitive if possible) a significant bit…

So are there concrete plans (and resources) to provide Motoko libraries? Or should developers expect to use Rust if they want to use it as soon as the feature goes live?
[/quote]

These are excellent questions, let me try to answer them.
The Bitcoin API will provide means for querying the UTXO set for specific addresses and for submitting transactions. Then there will be the threshold ECDSA API with methods for obtaining the canister's public key and signing.
That is, there is indeed some processing to be performed by the canister (e.g., through a library).
We want to offer a library for both Rust and Motoko. Rust is easier as we can build upon a large body of open source libraries. Motoko is more challenging as we need to implement quite some huge chunks of logic ourselves. For this reason we have been thinking of asking the community for help with the Motoko library. That has been on my plate for some time now and your question is an excellent trigger for this.

Some of the larger items we need for the library are the following:
* SHA-512: There is a SHA256 implementation that can be used as a basis, this should be quick for someone who knows this well
* RIPEMD-160 (for address computation)
* Elliptic curve scalar multiplication on the secp256k1 curve (for BIP-32 key derivation)
* Bitcoin address derivation
* BIP-32 unhardened derivation function
* Offering high-level API based on the system APIs

Some of those items are required for computing Bitcoin addresses from public keys and for BIP-32 key derivation. The main problem is that Motoko currently has no FFI to reuse those things from implementations in different languages.

The question now is whether anybody here on this subforum would be interested in helping with those items towards obtaining a Motoko library. If you are interested, please just post here. We would be very happy to work with you on this and provide all the information required to get this done.

-------------------------

jzxchiang | 2021-12-14 07:18:02 UTC | #133

Naive question: would implementing a FFI for Motoko be more or less work than individually implementing all of these libraries? I would assume that Motoko compiling down to wasm makes implementing FFI a little bit easier.

I ask because while some of these libraries are more generally useful (e.g. SHA-512), I don't know if most of them will ever be needed by most application developers.

-------------------------

nomeata | 2021-12-14 08:33:42 UTC | #134

[Issue about FFI](https://github.com/dfinity/motoko/issues/1400).

It is relatively straight forward to embed extra libraries (C or Rust) in the RTS for all canisters. We do that already for bignum arithmetic, for example. This is a shortcut, but it doesn't scale really, because the set of libraries would still be fixed by the compiler.

Allowing library author to include such code is a hard problem that we shied away from so far: what's the syntax? How do the type systems interact? How unsafe do we want this to be? How to solve the engineering issues of multi-language builds?

Also it seems that to achieve some of the goals we'd have to wait for newer Wasm features (multi-memory) to land. Given that we still don't even have simple extensions like multi-value on the IC, this puts this likely into the far future.

-------------------------

dieter.sommer | 2021-12-16 14:26:23 UTC | #135

[quote="nomeata, post:134, topic:6147"]
Allowing library author to include such code is a hard problem that we shied away from so far: what’s the syntax? How do the type systems interact? How unsafe do we want this to be? How to solve the engineering issues of multi-language builds?
[/quote]

Joachim, thanks for the detailed response on this subject. Indeed, we will not see FFI for Motoko any time soon for those reasons. This is somewhat a challenge when it comes to features such as Bitcoin which require a breadth of functionality available for Motoko -- we will need to write those functions from scratch. On the positive side, this will help provide a richer library ecosystem for Motoko which we would want anyway in the future.

-------------------------

passio | 2021-12-18 01:35:34 UTC | #136

Please, if you like the Bitcoin Integration idea, what do you think about Bitcoin fork integration to ICP? I mean, DOGE, BCH, DASH... More useful and quick work, if you are interested by this idea, please we can talk about it here : https://forum.dfinity.org/t/integrate-all-bitcoin-forks-on-icp-bch-doge-dash-etc/9773

-------------------------

dieter.sommer | 2021-12-23 11:41:45 UTC | #137

[quote="passio, post:136, topic:6147, full:true"]
Please, if you like the Bitcoin Integration idea, what do you think about Bitcoin fork integration to ICP? I mean, DOGE, BCH, DASH… More useful and quick work, if you are interested by this idea, please we can talk about it here : [Integrate all Bitcoin FORKs on ICP [BCH, DOGE, DASH, etc...] ](https://forum.dfinity.org/t/integrate-all-bitcoin-forks-on-icp-bch-doge-dash-etc/9773)
[/quote]

Interesting thoughts! We have thought about further integrations as well as part of the motion proposal on "General Integration" (https://forum.dfinity.org/t/long-term-r-d-general-integration-proposal/9383/9) as this is important to bring other cryptocurrencies into the IC for use cases such as decentralized exchanges. The question is, how exactly to bring those cryptocurrencies over. There are multiple ways of doing so, and we should discuss what the community feels should be the way to go:
* Bridging ERC-20 coins that already exist in Ethereum: weak trust model as we rely on bridges, but readily available soon (e.g., through the Terabethia bridge)
* Bridging individual coins: trust assumptions of a bridge; can be done by the community
* Relay-based integration: Integrating a cryptocurrency via a relay-based integration, where reliance on the externally-operated relay is mainly for availability. Using threshold ECDSA ensures a still rather strong trust model as no party holds the signing key for transferring cryptocurrency coins; this would not require extensions to the IC protocol stack and could thus be done by the community, based on a blueprint and maybe reference implementation by the Foundation
* Direct integration: integration a la Bitcoin; strongest possible trust model; can only be done by the Foundation; this would only be feasible in case we can reuse the Bitcoin implementation more or less completely and parameterize it for each currency and enable it on given subnets (does anyone here have experience how similar / different the currencies interesting to us are to Bitcoin)
The above is early thinking, but can be a trigger for some broader discussions about what people expect to have.

-------------------------

dieter.sommer | 2021-12-23 11:53:25 UTC | #138

**Update**

We are progressing well towards our goal of a Developer Preview at the end of January. The plan is to release the Bitcoin functionality first as part of the Canister SDK (dfx environment). We are currently working on the integration of the code with the IC stack, where much of the code is available already. The Canister SDK will likely be shipped in a beta version with Bitcoin support enabled.
We want to provide, as part of the release, smart contract developers a reasonable means of testing their smart contracts. We settled on providing only support for the locally-running bitcoind initially, which gives our users a flexible means of testing their code during initial development. The Bitcoin IC mainnet release later in Q1 / 2022 will allow for integration with the Bitcoin testnet and mainnet to allow for further testing of smart contracts before a production release.

-------------------------

cryptoschindler | 2021-12-25 10:32:11 UTC | #139

[quote="dieter.sommer, post:137, topic:6147"]
Direct integration: integration a la Bitcoin; strongest possible trust model; can only be done by the Foundation; this would only be feasible in case we can reuse the Bitcoin implementation more or less completely and parameterize it for each currency and enable it on given subnets (does anyone here have experience how similar / different the currencies interesting to us are to Bitcoin)
The above is early thinking, but can be a trigger for some broader discussions about what people expect to have.
[/quote]

Isn't it already the plan to do exactly this for Ethereum? And once done, doesn't that include all ERC20 tokens on Ethereum as well?

-------------------------

dieter.sommer | 2022-01-03 17:45:13 UTC | #140

Happy New Year everyone!

[quote="cryptoschindler, post:139, topic:6147"]
Isn’t it already the plan to do exactly this for Ethereum? And once done, doesn’t that include all ERC20 tokens on Ethereum as well?
[/quote]

Good question!
We have a direct integration of the IC with Ethereum on our roadmap. This would allow for bringing the ERC-20 tokens of Ethereum into the Internet Computer. However, the ERC-20 tokens on Ethereum which are wrapped tokens of Bitcoin-like cryptocurrencies are all bridged to Ethereum, i.e., require the additional trust assumptions of the bridge. A native integration would be able to go without those additional trust assumptions, i.e., be much more secure. Also, transferring ERC-20 tokens from Ethereum to the IC using the direct integration would incur Ethereum gas costs, which would be avoided with a direct integration of those other cryptocurrencies.

-------------------------

Maxfinity | 2022-01-04 02:27:24 UTC | #141

Do you guys have plans to integrate lightning as well?

-------------------------

timo | 2022-01-04 09:37:16 UTC | #142

What lightning related functionality would you like to see?

-------------------------

Maxfinity | 2022-01-04 12:34:23 UTC | #143

Hey Timo, I'm hoping the foundation could use lightning to make it cheap and fast to move BTC to the IC. Some may not want to wait a long time for BTC confirmations, especially if lightning grows in popularity; indeed waiting an hour may not be ideal for certain DeFi applications. Say you want to move BTC into the IC to partake in a long or short position, and need to make the trade near real-time.

-------------------------

timo | 2022-01-04 18:54:59 UTC | #144

I see. So you want a lightning channel to be established between a user and a canister on the IC. Or, alternatively, between one of the big lightning nodes that offer routing and a canister and then the user can indirectly route Btc to the canister. 

First of all I would love to see this implemented just because it is cool. But we also have to think if it really gives you the benefits that you think it does. The user already has to have the Btc locked in the lightning channel in advance before the need for a real-time trade occurs. Then the user might just as well lock the Btc in the canister-DEX directly. With centralized exchanges you want to take funds off the exchange as quick as possible to reduce risk but with a DEX in a canister the situation is different. So the need for a lightning channel may be reduced.

With lightning in general the problem is always the other direction, taking funds out, because the exchange cannot keep channels with all its users that are all funded on the exchange side.

Technically I think there are still some open question if this can really be done in both direction. There is some problem with the way that HTLCs work. The IC can do threshold signing but cannot create hashed secrets in a distributed way that are later to be revealed. This has to be investigated in detail. Maybe there are future lightning version that use a different hash function who's computation can be distributed. Or there might be some hybrid solution that runs almost but not entirely on the IC. That's TBD.

-------------------------

Maxfinity | 2022-01-04 20:38:16 UTC | #145

I was thinking between one of the big nodes and then a canister. 

I'm not sure how much BTC liquidity is in lightning, but if it grows to be a significant portion of BTC, it would be good to be connected to it. 

And yes, I think you are right in some sense the IC is and can become a replacement for lightning - isn't that exciting!

DEXs may not need to be lightning fast, but if we could improve the speed of getting into the IC from BTC, it would help drive adoption IMHO. 

The hashed-secret thing does seem to be a challenge, unfortunately. Feels doable with secure enclaves rather than MPC??

-------------------------

dieter.sommer | 2022-01-11 14:47:15 UTC | #146

Our engineering efforts are now fully focussed on the end-of-January release of the Developer Preview. We are on track to realistically ship this preview of the feature by the end of the month. This will allow users to implement canisters against the API that will be (very close to) final.
The following points regarding the API are currently discussed:
* Should we provide a separate convenience API for getting the balance for a BTC address? This would mean that users will not need to go through the library, but can directly call this method and receive the balance.
* Should we implement pagination already now for the get_UTXOs method? This will not be important for the large majority of use cases, but addresses with huge amounts of UTXOs might lead to the get_UTXOs response hitting the technical limits of multiple MBs. Any opinions on the relevance of this? Requirement or rather a theoretical issue? Are there any Bitcoin addresses where the corresponding UTXO set would be so huge that it would hit a multi-MB limit?

-------------------------

jzxchiang | 2022-01-11 20:37:09 UTC | #147

> Should we implement pagination already now for the get_UTXOs method?

My very limited personal experience tells me that pagination is important and should be implemented earlier rather than later, since it could affect the choice of data structures as well as other implementation details.

-------------------------

dieter.sommer | 2022-01-11 22:07:15 UTC | #148

[quote="jzxchiang, post:147, topic:6147"]
My very limited personal experience tells me that pagination is important and should be implemented earlier rather than later, since it could affect the choice of data structures as well as other implementation details.
[/quote]

Thank you for sharing your thoughts on this - much appreciated! This gives us a first hint at how to resolve this question. :-)

-------------------------

memetics | 2022-01-12 07:53:59 UTC | #149

Is Dom talking about 2-second finality on ETH Tx w/ the integration? did I misunderstand him? the Tx throughput is still subject to the ETH's native limitations, isn't it? Would this be the same for BTC; still subject to native limitations?

-------------------------

dieter.sommer | 2022-01-12 09:35:55 UTC | #150

First of all, @memetics, welcome to the Developer Forum!

Let me clarify the aspect of transaction finality: Every transaction for Bitcoin or Ethereum that happens on the Bitcoin or Ethereum networks has the finality and cost of those networks, of course. No one can change that with any form of integration. But, you can transfer BTC or ETH over to the IC once with the native integration, then wrap it on the IC, and use the wrapped BTC or ETH token on the IC with the 2-second transaction finality.
Thus, most BTC and ETH transactions could happen on such wrapped tokens with low finality time and low transaction cost. Only the initial transfer of BTC and ETH into the IC and a settlement transfer back out need to happen on the BTC and ETH blockchains with their respective finality and cost.
Does this answer your question?

-------------------------

memetics | 2022-01-12 09:47:53 UTC | #151

Yes, cheers! Looking forward to seeing the ic blossom!

-------------------------

Zane | 2022-01-12 17:13:42 UTC | #152

 >wrapped tokens with low finality time and low transaction cost.

The way I understand it these wrapped tokens should still be be safer than the alternatives on other chains, cause nobody knows the private keys, so they'd work more like renBTC rather than WBTC, If thats the case the only risks of using the wrapped version rather than the native one are potential vulnerabilities in the canisters that handle the tokens or the remote possibility the NNS decides to shut down the canister. Is that correct?

-------------------------

marrymosss | 2022-01-13 12:55:15 UTC | #153

I like to look more on YouTube for reviews on this topic. Can someone tell me when ICP will integrate with Bitcoin?

-------------------------

jzxchiang | 2022-01-14 03:06:14 UTC | #154

That's my understanding. This is in stark contrast to WBTC on Ethereum, where the private keys needed to mint new tokens are held by a centralized custodian, i.e. BitGo.

The types of interesting, intra-chain DeFi applications that were made possible by Ethereum will now be possible cross-chain. Pretty exciting stuff.

-------------------------

rahultrivedi180 | 2022-01-14 16:27:57 UTC | #155

> Should we implement pagination already now for the get_UTXOs method?

Pagination is definitely needed. Even if not, for now, but for sure in the future.

-------------------------

trannghia | 2022-01-15 07:35:34 UTC | #157

what is the difference between this bitcoin direct integration and wrap bitcoin on ethereum?

-------------------------

dieter.sommer | 2022-01-17 14:34:52 UTC | #158

@trannghia:
The direct integration does not require any intermediaries, such as trusted bridges, which would lock up the received Bitcoin and mint the wrapped tokens. In the direct integration, smart contracts directly can hold Bitcoin as they can have their own threshold ECDSA private key that is secret shared among the replicas of a large subnet. So, the direct integration features a much stronger trust model than a bridge-based solution.

-------------------------

dieter.sommer | 2022-01-17 14:36:09 UTC | #159

[quote="marrymosss, post:153, topic:6147, full:true"]
I like to look more on YouTube for reviews on this topic. Can someone tell me when ICP will integrate with Bitcoin?
[/quote]

A developer preview that allows people to use the API will be available already by around end of January. The release of the feature on IC mainnet is planned to happen by the end of Q1.

-------------------------

JaMarco | 2022-01-18 09:21:39 UTC | #160

What's the difference between the Bitcoin smart contracts IC can achieve with the direct integration and the Bitcoin smart contracts Stacks STX provides?

-------------------------

ComputerInternetMan | 2022-01-18 23:19:33 UTC | #161

IMHO ...When I took a look at Stacks, it appeared to be similiar to about 90% of the crypto space. A bunch of vaporware mumbo jumbo. Perhaps though your research will offset the following criticism...

No scientific paper describing consensus protocol.
No soundness or liveness proof.
All I found was a rather light explanation of the PoX consensus. (Proof of Transfer) . What is the connection to miners? Who knows!  Block producers bid for the right to create blocks by transferring bitcoins to another group called stackers. The motivation is STX but it gets convoluted when you dig further.  I do like the 'Hard Fork to Proof of Burn' scenario. Sounds like film noir.

The Stacks 2.0 native currency is not Bitcoin. There is not even a wrapped-BTC token as far I can tell.

There is a STX token and the developers want folks to lock it for a long period... obviously.

They do use 'Bitcoin technology' to secure consensus so they have a Bitcoin blockchain oracle I think.

But I give a thumbs down to their 'built on Bitcoin' shtick ..

-------------------------

JaMarco | 2022-01-19 07:04:08 UTC | #162

Thanks for your thoughts. This is apparently Stacks' Bitcoin DeFi platform
https://www.businesswire.com/news/home/20220117005119/en/Full-Service-Bitcoin-DeFi-Platform-ALEX-Launches-Mainnet-on-Stacks
https://app.alexlab.co/launchpad

-------------------------

ComputerInternetMan | 2022-01-19 12:44:08 UTC | #163

Maybe more technical details will be released after the coin goes up another billion.

-------------------------

dieter.sommer | 2022-01-24 22:12:12 UTC | #164

**Progress update:**
We have made lots of progress towards the Developer Preview release of the Bitcoin integration feature. This release will come out next week and allow people to use the Bitcoin API already now.

Let me briefly summarize below what you get with this preview release:

**Scope:**
* Bringing the (close to final) APIs to our community; this should allow folks who want to use the API to already do so now in their development environment
* Main goals
  * Bring the API to the people so they can play around already now, thereby bridging the gap between the original release date end of 2021 to the new release date end of Q1 2022
  * Facilitate smart contract development by community members already now
  * Get community feedback for the API for the final release
  * The Bitcoin-related logic is almost completely available
  * Almost zero engineering waste created by the DP release
* This release does not use the final architecture for the integration, but does it in the following simplified way (this does not matter for the local environment and the intended goals):
  * APIs will be exposed as a regular canister (BTC Canister) running locally, not as a system API, for now
  * bitcoind in regtest mode is used instead of the Bitcoin mainnet or testnet (this makes sense for the lowest-level dev/testing stage anyway)
  * The IC stack integration is shortcut via ingress messages and queries, the full IC stack integration with consensus is being finalized in parallel and will be released in the Q1 release
  * Users start the Bitcoin adapter, integration shim, bitcoind, and BTC canister with a script
  * There's no threshold ECDSA yet in this release
* We will provide small sample dApps in both Rust and Motoko that make use of the interface

The following is not in scope and will not be available in this release. **Non-scope:**

* Threshold ECDSA (in this release, people need to use an ECDSA library in the canister for now to sign transactions)
* Bitcoin testnet and Bitcoin mainnet integration
* Library to abstract the interface and make it more convenient for the users
* Full IC stack integration through Consensus

-------------------------

dieter.sommer | 2022-01-25 15:27:07 UTC | #165

**Developer Preview Release**
The release date for the Developer Preview has been fixed to Thursday next week, Feb 3rd, 2021, 3PM UTC+1.

-------------------------

everhusk | 2022-01-25 16:23:17 UTC | #166

This is great news! Amazing work everyone, looking forward to integrating this into Earth Wallet and giving feedback on the APIs :smiley:

-------------------------

dieter.sommer | 2022-01-25 17:22:33 UTC | #167

Awesome, feedback on APIs will always be greatly appreciated! :slight_smile:

-------------------------

dieter.sommer | 2022-01-27 20:09:44 UTC | #168

We are planning to make the source code of the Bitcoin logic already available as well with the Developer Preview release in the upcoming week!
Feedback is of course also much appreciated for the code. :-)

-------------------------

dieter.sommer | 2022-01-28 16:59:04 UTC | #169

**End-of-week update:**

This is (with overwhelming probability) the last end-of-week update before the release of the Developer Preview which is scheduled for next Thursday, February 3rd, 15:00 UTC+1. We are well on track with the implementation, documentation, and open sourcing tasks and are confident that we will be able to stick to the defined release date.

Sneak preview on the API:
For those interested in the API already now, please find the current draft PR here: https://github.com/dfinity/interface-spec/pull/5/files
This is the API included with the Developer Preview release. It will be subject to your scrutiny so we can all benefit from your experiences with it in the final release.

By the way, for those of you who have not seen this yet, the IC interface specification repository is public now! See: https://github.com/dfinity/interface-spec/

-------------------------

A_amiri931 | 2022-01-31 06:54:41 UTC | #170

Wow! 
Great Wish to the Team and Dfinity Community :heart_eyes:

-------------------------

Fatalerror | 2022-02-03 08:59:59 UTC | #171

Can we watch the preview?

-------------------------

dieter.sommer | 2022-02-03 14:03:31 UTC | #172

**The Bitcoin integration developer preview is publicly available now**

The Bitcoin developer preview has been released to the public, including all associated source code. Please visit https://smartcontracts.org/docs/developers-guide/concepts/bitcoin-integration.html for an overview of the release and links to the code, installation and usage instructions, the API documentation, a Wiki page with technical documentation, and example projects in Rust and Motoko.

With this release we reach an important milestone in the process towards a direct, trustless, integration with the Bitcoin network that will soon start a new era of DeFi! The developer preview enables you to start writing and testing smart contracts that use the Bitcoin API right now.

We hope that many of you will try out the preview release, start working on exciting smart contracts using the Bitcoin integration. We will greatly appreciate feedback on the developer preview, and particularly the API, to improve it further towards the final launch of the feature. We are planning to host a workshop in about a month from now where we would like to invite people interested in contributing to improvements.

Many thanks to @ielashi, @0x5279616e, and @THLO for their tremendous effort in finalizing the implementation of the developer preview, for getting the documentation ready, and even providing small sample projects in both Rust and Motoko in time for this preview release! Many thanks to everybody else who has contributed to the Bitcoin integration feature, particularly @Manu  who has provided guidance w.r.t. key engineering questions!

Enjoy the developer preview, we are very much looking forward to your feedback!

The Bitcoin integration team at DFINITY

-------------------------

THLO | 2022-02-03 19:00:49 UTC | #173

Here's another announcement: We decided to build our own wrapped Bitcoin ledger to further speed up the development of Bitcoin smart contracts on the Internet Computer.

Please post your feedback and questions in this [channel](https://forum.dfinity.org/t/feedback-wanted-wrapped-bitcoin-ledger-on-the-internet-computer/10681)!

-------------------------

lastmjs | 2022-02-03 20:31:07 UTC | #174

A couple concerns/questions (I have never actually done Bitcoin development before so please help me through this):

1. Is there a way to query from the blockchain an appropriate transaction fee instead of using the hard-coded fee? https://github.com/dfinity/bitcoin-developer-preview/blob/master/examples/rust/src/main.rs#L123
2. Can we get rid of the need to cache spent txos? Shouldn't the utxos by definition not contain any spent txos? https://github.com/dfinity/bitcoin-developer-preview/blob/master/examples/rust/src/main.rs#L142
3. With the API provided, are we able to deploy bitcoin smart contracts (as in code running on the bitcoin blockchain)?

-------------------------

ielashi | 2022-02-04 08:48:56 UTC | #175

Hey @lastmjs, thanks for the quick feedback and great questions.

> Is there a way to query from the blockchain an appropriate transaction fee instead of using the hard-coded fee?

Not at the moment, but it has become more apparent to us that we need to offer an endpoint that provides fee estimates based on previous blocks, and there are discussions ongoing on the semantics of that API.

> Can we get rid of the need to cache spent txos? Shouldn’t the utxos by definition not contain any spent txos?

When you build a transaction using UTXOs and send it to the Bitcoin network, in theory you've spent these UTXOs and shouldn't use them again for other transactions, but until this transaction is mined in a block, its UTXOs are still considered unspent by the Bitcoin network, and that's why you currently need to cache them locally (until they are mined).

We have considered an alternative API for `get_utxos` where, when you send a transaction using `send_transaction`, the Bitcoin canister will mark these UTXOs as spent in its local state, so then clients won't need to cache these transactions themselves. @dieter.sommer maybe this is something worth revisiting?

> With the API provided, are we able to deploy bitcoin smart contracts (as in code running on the bitcoin blockchain)?

I am not sure what you mean by code running on the bitcoin blockchain. Are you referring to Bitcoin script? Can you provide an example of what you have in mind?

-------------------------

THLO | 2022-02-04 09:23:40 UTC | #176

[quote="Fatalerror, post:171, topic:6147, full:true"]
Can we watch the preview?
[/quote]

There's a short demo video, which you can watch [here](https://twitter.com/dfinity/status/1489322556469366784).

-------------------------

lastmjs | 2022-02-04 13:45:49 UTC | #177

[quote="ielashi, post:175, topic:6147"]
We have considered an alternative API for `get_utxos` where, when you send a transaction using `send_transaction` , the Bitcoin canister will mark these UTXOs as spent in its local state, so then clients won’t need to cache these transactions themselves. @dieter.sommer maybe this is something worth revisiting?
[/quote]

Please this sounds great!

-------------------------

lastmjs | 2022-02-04 13:46:18 UTC | #178

[quote="ielashi, post:175, topic:6147"]
I am not sure what you mean by code running on the bitcoin blockchain. Are you referring to Bitcoin script? Can you provide an example of what you have in mind?
[/quote]

Let me get back to you on this later today

-------------------------

lastmjs | 2022-02-04 13:50:30 UTC | #179

[quote="ielashi, post:175, topic:6147"]
Not at the moment, but it has become more apparent to us that we need to offer an endpoint that provides fee estimates based on previous blocks, and there are discussions ongoing on the semantics of that API.
[/quote]

Very excited for this

-------------------------

THLO | 2022-02-10 17:20:46 UTC | #180

[quote="lastmjs, post:174, topic:6147"]
Can we get rid of the need to cache spent txos? Shouldn’t the utxos by definition not contain any spent txos?
[/quote]

The API is designed so that the return value of `get_utxos` depends only on the state of the Bitcoin blockchain visible to the Bitcoin canister. This is a nice feature when analyzing the security properties of the Bitcoin canister.
Having the Bitcoin canister cache recently spent outputs would have the side-effect that querying the UTXOs of an address may not return the same set across subnets because the subnets may cache different transactions.

I see the following approaches:

* We investigate if there is a way to add a transaction cache that is consistent with our security analysis.
* More user-friendly Bitcoin libraries building upon the low-level API are made available to developers.

In the end, it may not be so important because it will be easier (no need to worry about UTXOs!), cheaper, and faster to work with "wrapped" Bitcoin.

-------------------------

icpbull | 2022-02-09 17:05:08 UTC | #181

Sorry if this question has already been asked or if it is trivial, I am trying to understand the sharing of a private key of some Bitcoin wallet on the IC. This happens through threshold signatures and the point is that in a subnet, shares of a private key are shared so that the shares on their own don't reveal anything, but combined gives access to a Bitcoin wallet. I am trying to understand if it is possible for nodes in a subnet to collude and collect the shares of the private key of some BTC wallet. How are the shares of a private key stored and please explain why can other nodes not access them?

-------------------------

LightningLad91 | 2022-02-09 17:40:02 UTC | #182

I would love to see Dfinity produce a video, similar to the one below, explaining how key sharing for this bitcoin subnet works. @JensGroth did a great job explaining all this for the standard subnets and I think a video tailored to the BTC integration (even if there are only a few differences) would be a helpful resource. 

https://www.youtube.com/watch?v=gKUi-2T7tdc

-------------------------

dieter.sommer | 2022-02-10 12:19:50 UTC | #183

[quote="icpbull, post:181, topic:6147, full:true"]
Sorry if this question has already been asked or if it is trivial, I am trying to understand the sharing of a private key of some Bitcoin wallet on the IC. This happens through threshold signatures and the point is that in a subnet, shares of a private key are shared so that the shares on their own don’t reveal anything, but combined gives access to a Bitcoin wallet. I am trying to understand if it is possible for nodes in a subnet to collude and collect the shares of the private key of some BTC wallet. How are the shares of a private key stored and please explain why can other nodes not access them?
[/quote]

Let me briefly summarize how this works. We use threshold cryptography for realizing ECDSA signing, which means, as you say, that an ECDSA private key is secret shared over the nodes of a subnet. Each node holds its own secret share and contributes to the signing protocol. A minimum threshold of nodes is required to compute a signature. Nodes only hold their shares.
The trust model of the Internet Computer implies that strictly fewer than 1/3 of the nodes of a subnet can be compromised without compromising the security of the subnet. If less than 1/3 of replicas are compromised and get together to combine their secret shares, they have no information whatsoever about the ECDSA private key as they are fewer than the required threshold. Clearly, if sufficiently many parties collude in this way to use their secret shares, they will be able to compute signatures on any message or reconstruct the key from their shares. That's unavoidable as it's the core of threshold cryptography.

Some notes on key management:
There is 1 master ECDSA private key from which we derive a "root key" for each canister. Each canister can then derive (or ask the system to derive) an infinite number of keys for itself, and thus can compute an infinite number of Bitcoin addresses.

We will use large subnets, initially 34 nodes, for threshold ECDSA.

Hope this helps answer your question.

-------------------------

dieter.sommer | 2022-02-10 12:20:54 UTC | #184

[quote="LightningLad91, post:182, topic:6147"]
I would love to see Dfinity produce a video, similar to the one below, explaining how key sharing for this bitcoin subnet works. @JensGroth did a great job explaining all this for the standard subnets and I think a video tailored to the BTC integration (even if there are only a few differences) would be a helpful resource.
[/quote]

Having a video in this style for threshold ECDSA would be great. Let me bring this suggestion up internally so we can see whether / when we can do something like this.

Thank you for your suggestion!

-------------------------

jzxchiang | 2022-02-11 07:43:50 UTC | #185

> We will use large subnets, initially 34 nodes, for threshold ECDSA.

Oh interesting, isn't 34 huge? Bigger than any subnet right now, including the NNS subnet I think?

-------------------------

dieter.sommer | 2022-02-11 08:29:55 UTC | #186

[quote="jzxchiang, post:185, topic:6147"]
Oh interesting, isn’t 34 huge? Bigger than any subnet right now, including the NNS subnet I think?
[/quote]

The NNS is 34 right now if I am not mistaken, but will grow larger shortly. Indeed, 34 nodes with a good degree of decentralization in terms of node allocations over node providers and data centers is pretty strong already.
We want to maintain roughly the same security / decentralization level for the threshold ECDSA subnet, i.e., it is expected to also grow over time. Note that there will be only 1 threshold ECDSA subnet in the beginning and we will only add additional ones if there is a need, e.g., from a throughput perspective.

-------------------------

dieter.sommer | 2022-02-11 12:09:13 UTC | #187

**Progress update**

Now that the Bitcoin developer preview has been released, we are fully focussing on finalizing the final release of the feature in the Q1 Chromium release. The main items we need to work on are listed next:
* Finalizing the integration with the IC protocol stack
* "Moving" the BTC canister code into the replica
* Provide an API for transaction fees (incl. finalizing discussions and design)
* System tests

-------------------------

icpbull | 2022-02-12 11:05:10 UTC | #188

Thanks a lot for the detailed answer! I am simply trying to understand how hard/expensive it is to compromise a subnet (of 34 nodes in this case) once the Total Value Locked in Bitcoin DeFi (once integration complete) starts to become significant. One can imagine that when the TVL is significantly larger than the cost to compromise 2/3 of 34 nodes, that there is a, potentially big, incentive to actually attack that subnet. Does this make sense?

-------------------------

lastmjs | 2022-02-12 15:15:19 UTC | #189

@icpbull You are very correct IMO that as the TVL increases the subnet will become a much more lucrative target. Thus we must design mitigation mechanisms to protect ourselves against open attack vectors.

There are multiple attack vectors. One is an outside attack like you're suggesting, not originating from the node operators themselves. This could be done through exploiting security flaws in the canister environment, by deploying a canister with an exploit. We are protecting against that with security audits and canister process sandboxing and hopefully more.

You could envision another type of attack through the network, since the nodes are exposed to the Internet. To plug that vector we have to ensure that the node hardware, software, configuration, and data center and everything about the setup is prepared to prevent an attack. In this case you would need to compromise 1/3 + 1 of the nodes (I'm pretty sure that's the exact threshold to actually break consensus) to even begin to cause an issue. Though it's my understanding that even with a 1/3 + 1 compromise the threshold private key would be safe. You would need to hack into 2/3 of the nodes to actually get to the key shares or to take over consensus. Keep in mind that the subnets are designed to maximize the decentralization of the nodes by multiple factors, including node operator, data center, jurisdiction, etc.

Outside attacks on large subnets would be incredibly difficult to pull off IMO, unless each node had some common fatal security hole. But we can mitigate these vectors through excellent security practices, code reviews, security audits, all that.

The IC is different than Bitcoin or Ethereum. You can't just directly buy your way into an attack (you could through the NNS by accumulating a massive amount of voting power, technically). So the security concerns in some way are much different than proof of work chains.

My biggest concern is collusion between node operators. Since they are currently all publicly known, and the subnet configurations are basically static, node operators have ample opportunity to get to know each other and form relationships that could eventually lead to a compromise.

That's why I suggest the following mitigations eventually be implemented:

* Trusted Execution Environments, which will hide canister code and state from node operators. The major vulnerability remaining with TEEs is side-channel attacks.
* Multi-party Computation, which combined with TEEs provide BFT guarantees on the privacy of the canister code and state. This would greatly mitigate side-channel attacks, since you would need 1/3 + 1 node operators to perform a side-channel attack and then work together to perform the MPC
* Automatic node rotation/shuffling, this would break up the opportunity for node operators to collude once we have a larger number of node operators, as subnet assignment would be temporary and hopefully random. It would become incredibly difficult to form relationships with other node operators and target the appropriate canisters or key pairs (hopefully)

The three mitigations above combined provide an incredible amount of security in my opinion. And fortunately for all of us these three mitigations are on the tentative roadmap.

BTW I'm not on the DFINITY team and I'm not a cryptographer or security researcher (but I enjoy thinking about both).

-------------------------

icpbull | 2022-02-13 11:34:55 UTC | #190

Thanks so much for the detailed answer! You basically read my mind :slight_smile:. I also think that collusion between node operators is the biggest concern that we have and that node shuffling is basically the only way to solve that.

-------------------------

dieter.sommer | 2022-02-22 13:05:09 UTC | #191

Our team is currently working on a proposal for the API for obtaining information on the fee structure of recent blocks. This information will be important to make a decent guess about the required fees to include in a transaction. This API was missing in the developer preview release and will be added to the final release.

My colleague @THLO will post a proposal once its ready so we can discuss it here.
Just to anticipate the gist of the proposal: The fees API will return information on the fee distribution in recent blocks, e.g., in the form of percentiles, which would allow the canister to make an informed choice on the fees it should provide for a transaction it wants to get mined.

Note that the BTC functionality on the IC does currently not have any information on the Bitcoin mempool, so we need to use what we have to compute the fees: BTC blocks.

Any thoughts already now?

-------------------------

lastmjs | 2022-02-22 15:57:54 UTC | #192

Something similar to Ethereum Gas Station might be worth looking into. They have three main fee options calculated for you (safe low, standard, fast), and I believe they explain their methodology: https://ethgasstation.info

-------------------------

OVVOVVO | 2022-02-23 14:34:15 UTC | #193

Can Dfinity speak to any PR or marketing strategies in place, to be engaged once integration has because live?  

Other than word of mouth, how will the crypto market be made aware of this important mechanism for BTC?

-------------------------

dieter.sommer | 2022-02-23 15:55:55 UTC | #194

Following the typical public relations approach for the Bitcoin release would mean that the Chromium milestone in which the feature will be activated on IC mainnet will be announced at least via a press release, YouTube videos, maybe an event, forum posts, articles by independent journalists, and other outreach to the public to be sure that the information reaches relevant audiences. Of course, word of mouth will also play a role that the information gets further disseminated.
The concrete communications strategy for the event still needs to be worked out, but the above describes  some of the more important channels we use in making such important milestones public.
Does this answer your question on the PR strategy?

-------------------------

OVVOVVO | 2022-02-23 16:13:58 UTC | #195

Yes, thanks!  And if there are additional strategies to be used for the Chromium release, or the other subsequent milestones, please share the details. Much appreciated!

-------------------------

jzxchiang | 2022-02-25 02:59:41 UTC | #196

I wonder what the best marketing channel to reach blockchain developers is.

I think if you can get the main point across, that this integration is direct and does not use trusted bridges or custodians, and instead uses threshold signatures whose private key shares are stored on-chain... I think open-minded blockchain developers will "get it" and buy in.

But how do you reach them?

-------------------------

THLO | 2022-02-25 10:35:28 UTC | #197

[quote="jzxchiang, post:196, topic:6147"]
But how do you reach them?
[/quote]

That's a good question. Essentially, the hope is that we will reach them by communicating on all the channels that @dieter.sommer mentioned.
If anybody here has some contacts in the Bitcoin space, feel free to spread the news! I will certainly do so.   :slight_smile:

-------------------------

THLO | 2022-02-25 12:13:54 UTC | #198

As @dieter.sommer mentioned, we are working on an API extension to make it easier for developers to choose "reasonable" fees for their Bitcoin transactions.

The challenge is that most wallets rely on the state of the **mempool** (with fees typically being lower when the mempool size is smaller).
Fees are estimated by measuring how long transactions with certain fees stay in the mempool (using some kind of regression model, which is also the case for the Ethereum Gas Station that @lastmjs mentioned above).

We cannot use such an approach because we do not have any information about the mempool in the Bitcoin canister.
Instead, we plan to rely simply on the fees observed in recent blocks and provide this factual information in the form of the following API:

```get_current_fees(step_size: u64) -> CurrentFeeResponse```

where `CurrentFeeResponse`  will contain percentiles in Satoshi/byte over the last 10,000 transactions (usually around 4 blocks).
For example, a step size of `10` would result in a response containing the 10th, 20th, ..., 100th percentile. If the step size is `25`, the response will contain the 25th, 50th, 75th, and 100th percentile.
Developers can then choose themselves what level of fees is appropriate for their applications.

Experiments showed that this (simple) mechanism yields a good approximation of current fees.
If you have any questions/concerns/suggestions for improvements, let me know!

-------------------------

lastmjs | 2022-02-25 13:37:42 UTC | #199

This sounds great, but in addition to that it would be nice to get a safe low, standard, and fast option returned. Some developers may want fine-grained control, but the DX of just choosing one of three simple options is amazing IMO.

-------------------------

THLO | 2022-02-25 14:19:05 UTC | #200

I see two approaches to get three "safe" options: First, you can use the 25th (slow), 50th (standard), and 75th (fast) percentile.
In numbers, that would be 1.9 Satoshi/byte (slow), 3.2 Satoshi/byte (standard), and 5.3 Satoshi/byte (fast) when considering block 724881 and its predecessors.
If you check out some of the online Bitcoin fee calculators, you'll see that these numbers are pretty reasonable.

Alternatively, once the HTTP call feature is ready, a canister could be built that interacts with such fee calculators or the mempool directly to provide the same estimated fees as any Bitcoin wallet.

-------------------------

earthbroly | 2022-03-02 17:55:58 UTC | #201

Hey guys, I am very excited about the bitcoin integration and eagerly waiting for the release. 

I wanted to provide feedback based on my target use cases. Common denominator feature missing is finding the sender of bitcoins. From the provided APIs, I am not sure if we can do that (please let me know if we can indeed do it!).

I also thought about creating "receiver" canisters just to create a new BTC address where we can uniquely identify sender but it turns out to be very costly. Similar effect can be achieved if we can have sub-accounts. 

I would love to know what you guys think and if these changes can be accommodated in the release.

-------------------------

victorshoup | 2022-03-02 20:48:42 UTC | #202

The API does support BIP32 derived addresses from the key associated with each canister. Does this correspond to what you meant by "sub-accounts"?

-------------------------

THLO | 2022-03-02 21:02:44 UTC | #203

[quote="earthbroly, post:201, topic:6147"]
Common denominator feature missing is finding the sender of bitcoins. From the provided APIs, I am not sure if we can do that (please let me know if we can indeed do it!).
[/quote]

You are right, the current API only makes (unspent) outputs available but no inputs, so you can't determine where the outputs came from.

However, as @victorshoup pointed out, you can use BIP-32 derived addresses, which can "encode" the sender. This approach should cover a wide range of use cases.

Is there a specific use case that you have in mind where this approach won't work?

-------------------------

dieter.sommer | 2022-03-04 14:49:28 UTC | #204

**Progress update**

Let me give you a progress update after not having given one for some time.

We made very good progress with the implementation according to our goals. We will be finalizing the IC stack integration in the next 1 to 2 weeks and expect to have the feature working in an end-to-end fashion by then. We are now facing a challenge because of the huge amount of state that the feature requires and the way the data structures are currently implemented, which will take some additional time to overcome. We might need to make our stable hash map PoC that directly uses stable memory production ready in order to resolve our issues with memory.

Regarding testing, we intend to do first tests on large (RAM-wise) testnets and, once successful and us being confident enough that everything works as it should, make a first deployment to a subnet on IC mainnet to test in the real environment.

The rollout towards general availability of the feature will likely comprise an initial launch that gives only access to Bitcoin testnet so that remaining bugs can be found and fixed before we roll out Bitcoin mainnet access on IC mainnet.

One question regarding rollout we are discussing right now is whether we also want to release threshold ECDSA initially with a test key that will be deleted after some time and replaced with the production one. This would be in lockstep with the Bitcoin testnet / mainnet deployments. Opinions?

-------------------------

jzxchiang | 2022-03-05 17:04:37 UTC | #205

[quote="dieter.sommer, post:204, topic:6147"]
We are now facing a challenge because of the huge amount of state that the feature requires and the way the data structures are currently implemented, which will take some additional time to overcome. We might need to make our stable hash map PoC that directly uses stable memory production ready in order to resolve our issues with memory.
[/quote]

This is an issue I think many face: how to store large amounts of data in stable memory.

Right now, I believe the per-canister stable memory limit is still at 8 GB. Also, I'm assuming you're writing this in Rust instead of Motoko. Either way, the only way for a canister to take full advantage of the 8 GB is to directly store data in stable memory at a very low level (as opposed to using higher level abstractions like Motoko stable variables). It's not ergonomic and more difficult to test.

I'm curious what kind of improvements you are making so that the stable hash map is production ready?

-------------------------

