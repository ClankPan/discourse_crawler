diegop | 2021-09-15 16:11:11 UTC | #1

## Summary

The Internet Computer will add smart contracts to Bitcoin through an application of Chain Key cryptography that will directly integrate the networks. Smart contracts on the Internet Computer will be able to hold, send and receive bitcoin, without the need for private keys.

## Status
Prepping a design document for the community

## What you can do to help

* Ask questions
* Propose ideas

## Key people involved

Thomas Locher (@THLO ), @johan , @ielashi , Dieter Sommer, Ryan Croote , Victor Shoup, @Jan 

## Timelines
- [x] [1-pager posted on the forum](https://forum.dfinity.org/t/direct-integration-with-bitcoin/6147/26?u=diegop) for review: September 10, 2021
- [x] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/20586) (to approve design + project) submission:  *September 15,15:00 UTC* 
- [ ] [Community Conversation with Thomas Locher on Bitcoin Integration](https://dfinity.zoom.us/webinar/register/WN_t-qgoZPORcyM9L9QLU-WLw) *September 16, 16:00 UTC*
- [ ] [NNS Motion Proposal](https://dashboard.internetcomputer.org/proposal/20586)  (to approve design + project) expiration: *September 17, 2021, 15:00 UTC* 
- [ ] If NNS Motion Proposal passes, implementation + testing+ deploy would take months: *Q4 2021.*

## Relevant Background

1. [Internet Computer <> Ethereum Integration Explained | by Dominic Williams | The Internet Computer Review | Medium](https://medium.com/dfinity/internet-computer-ethereum-integration-explained-6967456e35f9)

2. Youtube Description: https://www.youtube.com/watch?v=TtVo3krjARI&t=1s

3. Scope of project

The scope of this feature is the integration of the Internet Computer with the Bitcoin blockchain with the following goals: (1) Making powerful smart contract functionality available for Bitcoin transactions; (2) enabling Bitcoin transactions with fast finality and low transaction cost.

(1) Bitcoin does not support generic smart contract functionality, but only a limited scripting language that supports a small subset of general smart contract semantics. The envisioned smart contract functionality for Bitcoin transactions allows a user to deploy a canister or make use of an existing canister that can receive and transfer Bitcoin and execute arbitrary smart contract logic expressed in a Turing-complete programming language. To this end, canisters must be able to hold Bitcoin balances, which requires a threshold ECDSA protocol. This protocol enables the replicas hosting a canister to share an ECDSA private key and create ECDSA signatures using cryptographic multi-party computation using a secret-shared private key, that is, without any node learning any information about the private key while jointly computing signatures to sign transactions. Smart contracts require access to the state of the Bitcoin blockchain, the so-called chainstate. Thus, we need to replicate the chainstate on the Internet Computer and provide services to canisters implementing smart contracts to query it and thereby receive UTXO-related information. This feature allows any canister to validate and create Bitcoin transactions and implement powerful smart contract logic.

(2) Transactions on the Bitcoin network are inherently slow and expensive. We want to enable fast and low-cost transactions by building ledger functionality on the Internet Computer that allows users to transfer Bitcoin into and out of accounts on this ledger, thereby creating wrapped Bitcoin on the Internet Computer. Users can transfer Bitcoin into their accounts on the ledger and buy and sell Bitcoin with ledger transactions on the Internet Computer with finality in seconds, while incurring only a tiny fraction of the transaction fees when compared to executing the same transaction on the Bitcoin blockchain. Holders of wrapped Bitcoin can settle their accounts any time by having their account balance transferred to their Bitcoin address.

-------------------------

lastmjs | 2021-08-16 21:35:23 UTC | #2

My main question with the Bitcoin and Ethereum integration is how the interaction from Bitcoin/Ethereum -> IC happens securely, without a bridge, given that Bitcoin and Ethereum do not have a chain key.

My concerns are raised in this Twitter thread, and Dominic gives an answer but I would love more details: https://twitter.com/lastmjs/status/1422606758594416645?s=20

-------------------------

diegop | 2021-08-17 18:35:12 UTC | #4

Updated the main description and people involved

-------------------------

diegop | 2021-08-17 22:16:06 UTC | #5

I will let the folks working on this answer. I’ve pinged them.

Thanks, Jordan!

-------------------------

THLO | 2021-08-18 08:58:25 UTC | #6

I'm working on the integration and can try to answer your question.

As Dom explained, the IC will pull in blocks and verify that they are correct (i.e., well-formed, correct difficulty, ...) and process the transactions after a certain number of confirmations.
Since the IC replicas pull in blocks from the Bitcoin network directly, the security depends on the correct functioning of both the IC and the Bitcoin network (but not on anything else).

In some sense, this still only gives you a "bridge". The more exciting part is that canisters will be able to have a shared ECDCA key (sharing the key using threshold cryptography, see also [here](https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152)) so that a canister can securely hold Bitcoin (or Ether) itself! The Bitcoin (and Ethereum) state is then mainly used to keep track of the current balance for each canister that holds Bitcoin (and Ether).

Does this answer your question? If you have any follow-up questions, please let us know!

-------------------------

lastmjs | 2021-08-18 12:25:33 UTC | #7

Thanks for the explanation!

So will each replica run its own Bitcoin and Ethereum node? Will the subnets come to consensus on the Bitcoin and Ethereum blocks? I'm trying to understand if the replicas will all share a Bitcoin or Ethereum node, of if they will be independent.

I'm hoping they'll each have their own, thus inheriting the security properties of Internet Computer Consensus.

-------------------------

lastmjs | 2021-08-18 12:28:24 UTC | #8

Also, how will base layer Bitcoin and Ethereum transaction fees be paid for? I suppose the account that a canister controls will simply be required to have enough ETH or BTC to perform whatever transaction.

It would be pretty neat if somehow Bitcoin or Ethereum transaction fees could be paid for with cycles.

-------------------------

THLO | 2021-08-18 16:40:05 UTC | #9

The current plan is not to run Bitcoin/Ethereum nodes on the replicas. Instead, there will be dedicated adapters on the replicas fetching blocks directly from the Bitcoin/Ethereum P2P networks. But yes, these blocks will go through consensus so that the replicas continue to share the same state and the system retains the desired security properties.

-------------------------

THLO | 2021-08-18 16:42:59 UTC | #10

> I suppose the account that a canister controls will simply be required to have enough ETH or BTC to perform whatever transaction.

Yes, canisters can pay for their own transactions.

> It would be pretty neat if somehow Bitcoin or Ethereum transaction fees could be paid for with cycles.

I agree! Somebody should build such a service.   :wink:

-------------------------

diegop | 2021-09-03 23:22:09 UTC | #11

**Update**: Now that Increased Canister Storage has gone through community-wide voting, this is the next project (1 of multiple concurrently) that will go through a similar open design process and voting.

-------------------------

diegop | 2021-09-07 20:15:07 UTC | #12

people on this thread will find this relevant: 

https://www.youtube.com/watch?v=TtVo3krjARI&t=1s

-------------------------

passio | 2021-09-08 00:35:26 UTC | #13

Hi, will it be easy to add other blockchain derived from Bitcoin like Litecoin or Bitcoin Cash and will you do it quickly ?

-------------------------

diegop | 2021-09-08 05:18:05 UTC | #14

I will let @THLO answer on how similar it is to use this project for other networks, but I can say that the current plan (which we will put to a Vote for the community) is to do BTC first then ETH.

-------------------------

Trevor | 2021-09-08 05:32:50 UTC | #15

@THLO Just to add to passio's great question, and I mean this 100% seriously, would that also include Dogecoin given it is a Litecoin derivative?

I'm just saying it's actually bigger than Litcoin and Bitcoin Cash and has bigger name recognition than all other derivatives combined....

-------------------------

THLO | 2021-09-08 07:53:54 UTC | #16

@diegop is right, the plan is to first do the Bitcoin integration and then the Ethereum integration.

There will be specific code introduced for these blockchains (for example dedicated adapters to connect to the Bitcoin and Ethereum P2P networks). So, the goal is to add support for these two blockchains only.

If these integrations turn out to be a big success and the community asks for the integration of Litecoin, Dogecoin, and other derivatives, we can put this to a vote, of course.

-------------------------

Trevor | 2021-09-08 14:50:11 UTC | #17

The day ETH integration gets implemented I will actively campaign for Dogecoin integration you heard it here first.

-------------------------

skilesare | 2021-09-08 15:08:37 UTC | #18

I was listening to @Manu 's explanation on the podcast this morning and a question occurred to me.  

The IC is secure because the subnets can refresh the public key and switch it out for a new key via a zk generation of a key portion.  They can do this a bunch so bad actors have limited time to coordinate(I don't know how often this actually happens...would be great to know). 

With BTC and ETH integrating, we need to control addresses and contracts from a specific identity.  Once these are generated and on chain, you can't really swap them out(unless the contract you are interacting with supports it).  So will these keys be inherently less secure?  If I ask the subnet to generate an address for me, I'm guessing all nodes have a bit of the key.  If >2/3 decide I have too much at my address they could collude to take it?  And they have infinity amount of time to do this because I can't change the key on the remote chains?  

What if more than 1/3 of the original nodes that generated your key portions go offline permanently?  The IC can just add new nodes and generate a new public key....ETH and BTC won't be able to do this.

I'm probably missing something here, but I think it is worth understanding.

Edit:  I'm sure on ETH you could overcome this by always sending requests through a wallet-like contract that has the functionality for swapping out keys...not sure about BTC.

-------------------------

Maxfinity | 2021-09-08 19:51:03 UTC | #19

[quote="skilesare, post:18, topic:6147"]
With BTC and ETH integrating, we need to control addresses and contracts from a specific identity. Once these are generated and on chain, you can’t really swap them out(unless the contract you are interacting with supports it). So will these keys be inherently less secure? If I ask the subnet to generate an address for me, I’m guessing all nodes have a bit of the key. If >2/3 decide I have too much at my address they could collude to take it? And they have infinity amount of time to do this because I can’t change the key on the remote chains?
[/quote]

If the canister can control the key surely the canister can every one and again transfer the bitcoin to a new bitcoin address, and derive a new chainkey from it with different actors. I have no idea whether this would be worked into the protocol, but is possible theoretically.

-------------------------

skilesare | 2021-09-08 20:00:36 UTC | #20

[quote="Maxfinity, post:19, topic:6147"]
If the canister can control the key surely the canister can every one and again transfer the bitcoin to a new bitcoin address, and derive a new chainkey from it with different actors. I have no idea whether this would be worked into the protocol, but is possible theoretically.
[/quote]

I would agree that that is fairly straightforward for standard bitcoin transactions, but for anything more complex it would be a nightmare. What if that key was used for an n of m multisig account?  You'd have to organize everyone to change it.  Eth with contracts are event more complicated because there is no way to know today what a programmer may put in a contract tomorrow as an ownership transfer mechanism.

-------------------------

Maxfinity | 2021-09-08 23:04:26 UTC | #21

ETH sounds more difficult, agree. Perhaps multisig is not such a big issue on the BTC-side as complex escrow could be implemented IC-side? 
Would be great in general to see what the high-level APIs look like.

-------------------------

THLO | 2021-09-09 07:31:06 UTC | #22

[quote="skilesare, post:18, topic:6147"]
With BTC and ETH integrating, we need to control addresses and contracts from a specific identity. Once these are generated and on chain, you can’t really swap them out(unless the contract you are interacting with supports it). So will these keys be inherently less secure? If I ask the subnet to generate an address for me, I’m guessing all nodes have a bit of the key. If >2/3 decide I have too much at my address they could collude to take it? And they have infinity amount of time to do this because I can’t change the key on the remote chains?
[/quote]

Great questions!
Since subnets will be able to hold and control real Bitcoin/Ether, it is of paramount importance to ensure that Bitcoin/Ether are neither lost (for example because the subnet failed and cannot be recovered) nor stolen (for example because sufficiently many node providers collude to extract the secret key material).

The feature "Threshold ECDSA Signatures" is all about making it possible for subnets to hold Bitcoin/Ether *in a secure manner*. If you'd like to learn more about this feature including security assumptions and guarantees, I encourage you to post your questions directly on the dedicated [forum page](https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152)!

-------------------------

diegop | 2021-09-10 00:14:18 UTC | #23

[quote="diegop, post:1, topic:6147"]
## Timelines

* 1-pager posted on the forum for review: September 10, 2021, 15:00 UTC
* Community Conversation - Bitcoin Integration *Week of september 13th*
* NNS Proposal submission: September 15,15:00 UTC
* NNS Proposal expiration September 17, 2021, 15:00 UTC
[/quote]

Hey folks, I updated the main description with the current timeline.

-------------------------

B01AND | 2021-09-10 11:34:14 UTC | #24

Lol 😂 same here. That's hilarious.

-------------------------

diegop | 2021-09-10 13:46:57 UTC | #25

[quote="diegop, post:1, topic:6147"]
## Timelines

* 1-pager posted on the forum for review: September 10, 2021, 15:00 UTC
* Community Conversation - Bitcoin Integration *Week of september 13th*
* NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*
* NNS Motion Proposal (to approve design + project) expiration: *September 17, 2021, 15:00 UTC*
* If NNS Motion Proposal passes, implementation + testing+ deploy would take months: *Q4 2021.*
[/quote]

Hey folks,

I just updated the timeline for this feature based on what we currently see as potential engineering scope (within an order of magnitude, and it will get clearer as we get more info).

-------------------------

THLO | 2021-09-10 15:09:13 UTC | #26

As announced already here in the forum, this feature with the goal of directly integrating with Bitcoin is going through a community-wide voting process. In this post, we present the feature design.

# NNS Proposal: Direct Integration with Bitcoin
Main authors: Dieter Sommer, @THLO

# Background

Bitcoin is a decentralized digital currency based on an open-source P2P protocol. Bitcoin uses the unspent transaction output (UTXO) accounting model, i.e., transactions create outputs which are used as inputs to other transactions that create new transaction outputs.

Bitcoin is a payment network without support for smart contracts. Smart contract support for Bitcoin would add tremendous value: Smart contracts for Bitcoin would leverage the combined strength of the Bitcoin network as the world's digital gold reserve and the Internet Computer as a platform for securely and efficiently executing smart contracts. An example class of applications that will become possible with this integration are decentralized finance (DeFi) applications, which can currently be implemented only with wrapped Bitcoin and additional trusted entities on blockchains such as Ethereum. Moreover, Bitcoin could be used for paying for any kind of services on the Internet Computer, which opens up a sheer endless number of application scenarios.

# Goals and Requirements

The goal for this feature is a direct integration with the Bitcoin network with the following functionalities:

* Canisters can directly hold Bitcoin, i.e., the balances of canisters are captured on the real Bitcoin network. These Bitcoin smart contract canisters can run Turing-complete logic and, based on this, decide when to make Bitcoin transactions to other entities such as regular Bitcoin users or other canisters implementing Bitcoin smart contracts.
* Canisters can create Bitcoin transactions and submit them to be reliably relayed to the Bitcoin network.

A direct integration implies not only that canisters can hold Bitcoin themselves, but also that there are no intermediaries such as bridges introduced into the design.

The intended integration requires the Internet Computer offering the following functionalities to canisters:

1. Enabling canisters to receive and hold Bitcoin on the Bitcoin network;
2. Tracking the UTXO set belonging to canisters and enabling canisters to query their respective UTXO set;
3. Enabling canisters to create Bitcoin transactions and accepting such transactions from canisters to be relayed to the Bitcoin network.

In order to achieve Functionality (1), canisters must be able to have a Threshold ECDSA public key from which their Bitcoin addresses are derived. Threshold ECDSA is a separate feature going through community voting concurrently with this feature. Functionality (2) requires that we ingest Bitcoin blocks into the Internet Computer, validate them, and track the Bitcoin blockchain. Once blocks have a sufficient amount of work in successor blocks on the blockchain, transactions and their UTXOs can be extracted and served to canisters upon request. Functionality (3) depends on the aforementioned Threshold ECDSA feature, which makes it possible for canisters to consume UTXOs. Furthermore, the Internet Computer must establish an outbound communication channel over which an outgoing transaction from a Bitcoin smart contract canister can be reliably relayed to the Bitcoin network.

# Design

A high-level overview of the technical design is outlined next. The figure below further illustrates the high-level design.

In the Execution layer of the Internet Computer, we implement a BTC system component that offers the following APIs to query the UTXO set associated with the requesting canister’s public key and submit transactions to the Bitcoin network, respectively:

* `get_utxo_set(canister_id: PrincipalId, num_confirmations: u32) -> Vec<UTXO>`
The function returns the UTXO set corresponding to the given canister_id, where num_confirmations specifies the minimum number of confirmations the UTXO must have. If the number of confirmations is `k`, then the transaction has `k-1` successor Bitcoin blocks.
* `put_transaction(transaction: BtcTransaction) -> BtcSystemResponse`
Requests to submit the given transaction to the Bitcoin network. The response indicates whether the BTC system component has received the transaction, which will then be transmitted to the Bitcoin network asynchronously.

We plan to further provide a library that provides the following convenience functions to developers:

* `get_balance(num_confirmations) -> BtcBalance`
The function returns the Bitcoin balance of the canister for the given number of confirmations.
* `send_bitcoin(amount, recipient) -> BtcSystemResponse`
The function sends the specified Bitcoin amount to the provided recipient address.

In the Networking layer, we implement multiple components required for this feature. Notably, the Bitcoin Adapter implements the Bitcoin-specific functionality in this layer: It connects to the Bitcoin network and maintains a recent view of the Bitcoin network and provides blocks to the Consensus layer on request. Adapters perform a first validation of Bitcoin blocks to prevent dishonest Bitcoin nodes from spamming the BTC system component.

The BTC system component receives Bitcoin blocks that are provided by the Bitcoin Adapter at the Networking layer via Consensus and Message Routing. A protocol between the Bitcoin Adapter and the BTC system component enables the Bitcoin Adapter to decide which block to provide next. The BTC system component further makes outgoing Bitcoin transactions available at the Networking layer, where they are transmitted to the connected Bitcoin nodes.

![|624x523](upload://nLRWvMfl3CLXrQxyo7arDT1bVup.png)

High-level architecture

# Alternative Designs

The proposed design has emerged from an evaluation of multiple possible designs and has been found to be the most suitable design for the Internet Computer in terms of architectural cleanliness, decentralization, and scalability.

An alternative design that was considered is the introduction of an oracle canister, which is a regular canister that offers the functionality of serving UTXO sets to canisters and accepting Bitcoin transactions. This design has several shortcomings. First, relays would be required to send Bitcoin blocks to this canister, which would entail that trust assumptions related to these relays must be introduced. This design is not in line with the goal of having a direct integration. Additionally, the design suffers from scalability limitations as all Bitcoin smart contract canisters would be interacting with the oracle canister.

Another design we investigated was to introduce an oracle canister on all subnets where Bitcoin functionality is made available. This design would require these canisters to be "special" in multiple ways: They would have to run without consuming cycles and be instantiated when the subnet starts up. There would be numerous additional technical challenges, for example with respect to routing, which led us to abandon the design.

# Roadmap

The feature affects all four layers of the IC protocol stack and requires engineering work by all affected teams. Most engineering effort is expected in the Networking layer and the Execution layer as all the Bitcoin-related functionality is implemented in those layers. The efforts for the integration with Consensus and Message Routing are comparably small.

The implementation work will be carried out on the different layers in parallel as much as possible. While there is no detailed timeline for the development effort, the goal is to have all pieces implemented and tested by the end of 2021.

Naturally, there is a strong dependency on the threshold ECDSA feature in that it is a hard prerequisite for the Bitcoin integration.

It is important to mention the crucial role of quality assurance for both the Bitcoin integration feature and the Threshold ECDSA feature for the reason that once value in the form of Bitcoin has been transferred to canisters, the feature deployment cannot be reasonably rolled back any more.

-------------------------

MisterSignal | 2021-09-10 18:15:33 UTC | #27

Can I think of the objective in non-technical terms as: 

"Each Canister has a Bitcoin wallet on the BTC chain, just like any human would? This way, a given Canister can use Motoko to execute logic that determines when it should send Bitcoin to a native BTC wallet,etc..Just like a person that had Bitcoin wallet was making verbal agreements with another BTC user as to under what conditions BTC would be sent back and forth between the two"

?

Is this accurate / the difference between what DFINITY is doing and having "wrappedBTC" or what the other solutions offer?

-------------------------

MisterSignal | 2021-09-10 18:16:28 UTC | #28

-- I don't think what I'm thinking about this is quite right, but maybe it's a step in direction of what's going on.

-------------------------

brigon | 2021-09-10 18:33:13 UTC | #29

Would Lightning also be supported with this Bitcoin integration.

-------------------------

brigon | 2021-09-10 18:36:52 UTC | #30

Maybe also have a look at Tangem, which can control btc with their cold card & app.

-------------------------

THLO | 2021-09-10 19:09:10 UTC | #31

[quote="MisterSignal, post:28, topic:6147, full:true"]
– I don’t think what I’m thinking about this is quite right, but maybe it’s a step in direction of what’s going on.
[/quote]

Actually, your interpretion is pretty accurate.   :slight_smile: 
Indeed, a canister's Bitcoin funds are reflected on the Bitcoin blockchain, and it can implement any logic that dictates when it sends Bitcoin and how much. The recipient may be a regular Bitcoin user --- or another canister!

-------------------------

lastmjs | 2021-09-10 19:09:38 UTC | #32

So it looks like each replica has an instance of the Bitcoin Adapter? Does that mean each replica is communicating directly with Bitcoin peers over the internet? And each replica (through the adapter) would be validating UTXOs?

So a subnet with 7 replicas would have 7 Bitcoin Adapters, one per replica?

I am trying to assess the decentralization here, and I'm hoping each replica will have to independently obtain and validate UTXOs and match them with the other replicas during consensus.

-------------------------

THLO | 2021-09-10 19:13:15 UTC | #33

[quote="lastmjs, post:32, topic:6147"]
So a subnet with 7 replicas would have 7 Bitcoin Adapters, one per replica?
[/quote]

Correct.
And yes, each replica will validate the UTXOs.

-------------------------

sakoma.icp | 2021-09-10 22:58:06 UTC | #34

A couple of questions 
1- Given the need to replicate the BTC chainstate into the IC, how will this affect the subnets capacity? Will this mean higher requirements for nodes? 
2- How is the second part different from lightning network?

-------------------------

THLO | 2021-09-13 08:59:28 UTC | #35

Thanks for your questions!
Let me try to answer them:
1 - The subnets will store the UTXOs (roughly 4-10 GB in size depending on data representation) and not hold on to the blocks themselves. So, the Bitcoin integration is not expected to have a significant impact on subnet capacity.
2 - I'm not sure what you mean by "second part" but there are several differences between a lightning channel and a Bitcoin smart contract on the IC. In short, the Lightning network offers bidirectional payment channels for off-ledger transactions. Bitcoin smart contracts on the IC offer arbitrary smart contract logic for Bitcoin that (potentially) any user can interact with.
Smart contracts on the IC further do not have the shortcomings often associated with the Lightning network such as the risk of a fraudulent force close or the risk of establishing "hubs" that constitute endpoints of large number of channels (whose failure may have a detrimental effect on the whole network).

-------------------------

sakoma.icp | 2021-09-13 10:00:34 UTC | #36

Thank you for this. The second part referred to this "(2) Transactions on the Bitcoin network are inherently slow and expensive " on the scope of the project ".

-------------------------

diegop | 2021-09-13 17:10:36 UTC | #37

[quote="diegop, post:1, topic:6147"]
* NNS Motion Proposal (to approve design + project) submission: *September 15,15:00 UTC*
[/quote]

Hey folks, looks like questions are still coming in. Do folks prefer we push back the NNS motion to let more questions/iterations come in?

I want to make sure we strike a balance of moving fast but letting people have their say.

-------------------------

dpdp | 2021-09-13 17:18:59 UTC | #38

In case of a subnet subset collusion and a non authorized transaction is signed -- can the malicious parties be detected ? if so - can a token economics disadvantage can be added to slash these node providers (maybe staked ICP) ?

-------------------------

sakoma.icp | 2021-09-14 00:44:49 UTC | #39

One last question: are there dApps already just waiting for this integration? If yes, it would have been great to ask and see how precisely they'd want to use it. That could help check if a critical point isn't missing.

-------------------------

phucleo | 2021-09-14 13:51:33 UTC | #40

Bitcoin is a store of value. It’s not building the new decentralized Internet. [$ICP]

-------------------------

diegop | 2021-09-15 04:17:18 UTC | #41

**Update**: we are on track to submit NNS motion proposal on Wednesday September 15, at 15:00 UTC.

-------------------------

nomeata | 2021-09-15 05:52:31 UTC | #42

[quote="THLO, post:26, topic:6147"]
In the Execution layer of the Internet Computer, we implement a BTC system component that offers the following APIs
[/quote]

I see that you outline the design of the API within the execution environment, but not yet how this will be expressed on the level of the System API towards the actual Wasm canisters. Is there a design for that as well already? Will it be new synchronous Wasm calls? If so, how will the data be represented as Wasm types? Or will the functionality be exposed using the virtual management canister (same as secure randomness and ECDSA signatures)? If so, can you give the candid interface of that? Or is that simply future engineering work?

-------------------------

THLO | 2021-09-15 07:09:36 UTC | #43

[quote="nomeata, post:42, topic:6147"]
Or will the functionality be exposed using the virtual management canister (same as secure randomness and ECDSA signatures)? If so, can you give the candid interface of that? Or is that simply future engineering work?
[/quote]

The current plan is to expose the functionality using the virtual management canister; however, there is no firm decision on that. And yes, figuring out the most suitable candid interface is part of future engineering work.

-------------------------

THLO | 2021-09-15 07:18:11 UTC | #44

[quote="dpdp, post:38, topic:6147, full:true"]
In case of a subnet subset collusion and a non authorized transaction is signed – can the malicious parties be detected ? if so - can a token economics disadvantage can be added to slash these node providers (maybe staked ICP) ?
[/quote]

I suggest that you ask this question in the [Threshold ECDSA Signatures](https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152) thread.
If there is a trace proving that multiple node providers colluded, their nodes could be removed (via NNS voting).

-------------------------

THLO | 2021-09-15 07:23:05 UTC | #45

[quote="sakoma.icp, post:39, topic:6147"]
are there dApps already just waiting for this integration? If yes, it would have been great to ask and see how precisely they’d want to use it. That could help check if a critical point isn’t missing.
[/quote]

Good question! While there is a lot of interest in this integration, we'd love to hear more from the community what functionality they would use personally or build applications around.

Please feel free to drop ideas and wishes right here in the forum!

-------------------------

lastmjs | 2021-09-15 12:43:04 UTC | #46

I'm most excited for an all-in-one crypto wallet that can hold BTC, ETH, other Ethereum tokens, ICP, and other IC tokens. This wallet will be integrated with Internet Identity, and will have advanced features like social recovery and other features that are impractical to do on decentralized blockchains currently because of their computational cost.

I probably won't build this, but I hope someone else does.

-------------------------

diegop | 2021-09-15 15:48:04 UTC | #47

**NNS Motion Proposal for BTC Integration is live!:**

https://dashboard.internetcomputer.org/proposal/20586

-------------------------

lastmjs | 2021-09-15 21:11:11 UTC | #48

I am getting worried about the security of canisters running on non-system subnets, that hold large amounts of monetary value.

I'm not sure enough security precautions have been taken to feel confident that canisters running alongside possibly malicious canisters will be safe.

I did not realize that each canister was running within the same process on each replica within a subnet, at least that seems to be the case.

Perhaps a prerequisite to this project moving forward is process sandboxing, so that even if malicious canisters break out of the Wasm environment, they'll be stopped by the process boundary.

See here for more information: https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/30

-------------------------

jzxchiang | 2021-09-16 06:03:10 UTC | #49

Can you clarify what you mean by each canister running within the same process on each replica within a subnet? By definition, aren't canisters running in different processes since they are running on different machines/replicas?

-------------------------

dieter.sommer | 2021-09-16 08:54:14 UTC | #50

@lastmjs 

The security concerns you refer to are indeed something we are concerned about as well.
We have a feature on our roadmap that is concerned with protection against WASM jailbreaks. I.e., the execution of WASM code for a canister will be sandboxed in the future inside a separate OS process. This will, for example, be important to better protect high-value smart contract canisters.

But there's more to the security in the domain of Bitcoin integration: Think of "Bitcoin blocks" that are specially crafted messages by an attacker and served to us from an attacker's Bitcoin node we connect to and the attacker trying to mount an attack by exploiting a flaw in our Bitcoin block parsing code. This is something we are currently planning to protect against as well by sandboxing code that touches untrusted input, e.g., parsing of Bitcoin blocks, such that we mitigate much of the risk coming from untrusted content. Our networking architecture for the Bitcoin integration currently foresees that we sandbox the Bitcoin protocol logic including parsing code to mitigate the aforementioned risk.
Does that answer your question?

-------------------------

dieter.sommer | 2021-09-16 09:04:34 UTC | #51

@jzxchiang 

> By definition, aren’t canisters running in different processes since they are running on different machines/replicas?

Indeed, each replica deterministically executes canister code as governed by Consensus and Message Routing. This ensures that on each machine we perform the same computations and go through the same state change in each round. This is the basic behaviour of the Internet Computer.

What @lastmjs means is that different canisters within a replica are executed by the same OS-level process of the replica, which is currently true. This would be something our canister sandboxing feature will change in the future to better isolate canisters from each other.

-------------------------

lastmjs | 2021-09-16 12:25:29 UTC | #52

An acknowledgement that my thinking is generally correct is great!

My next question would be, how long will canister process sandboxing take, and what do you think about making that a pre-requisite to deploying the Bitcoin integration?

And the extra insight on the Bitcoin block processing sandbox is very interesting, thanks for that information.

-------------------------

jzxchiang | 2021-09-16 18:53:17 UTC | #53

Holy crap, I didn't know that. That definitely sounds like a potential security risk. Where is this documented, if anywhere?

-------------------------

mparikh | 2021-09-16 19:38:36 UTC | #54

I agree with @lastmjs that this (just the potential of a wasm jail-break)is a significant serious security issue for EXISTING dapps on IC.

For example : 

The NFT Cronic Critters have an average value of about 10 icp for about 600 odd critters today based on sale listing after removing the ridiculously priced critters from the average calculation. There are roughly 5000 critters currently in existence. These are worth 5000x10 = 50,000 icp. At current approx $60/ICP , this is roughly $3M USD at risk in ONE nft type. Isolating canister executing in a sandbox would substantially reduce the risk; even if there are no known instances of WASM jail breaks.

It will only take one successful jail-break to completely erase trust from the community that we have tried, so assiduously,  to cultivate. I would anticipate that TODAY we have close to $30 m in just NFT assets that are under risk. This estimate is based on the ROM of 10 different NFTs that are estimated to be on the IC today. 

While arguments could be made to say that we have never seen an jail-break successfully occur in the wild, the amount of money is sufficiently large that it will attract hackers. I would think that securing canister execution should BE AT THE TOP of the priorities.

-------------------------

nomeata | 2021-09-16 20:51:19 UTC | #55

Thanks for the analysis! I guess one could rephrase your post as “there is a community driven bug hunting bounty program in place, with a bounty of ul to 30M$. As of today, the bounty was not claimed, which is a testament of how secure the IC is” :-)

(Oh, and BTW, your browser runs untrusted Wasm in process. If someone has a jailbreak for the Wasm sandbox, at least if it also works in browser, they can get much more there, I assume.)

-------------------------

lastmjs | 2021-09-16 21:23:35 UTC | #56

I feel like the honeypots created by canisters are much larger than you would find by breaking out of the Wasm sandbox in most web apps (the web app is just the frontend, not the actual server where a bank account is managed). And each application (tab) in the browser has a Wasm sandbox, and that sandbox is also sandboxed within its own process. We're pointing out that the IC does not meet the standard of the browser. If all of your tabs and domains shared the same process, that would be more equivalent.

It's also only been a few months since the value inside of canisters started accruing, so not much time to feel too comfortable.

I think it comes down to this: there is an obvious vulnerability with an obvious solution, and we should make implementing that solution a priority.

-------------------------

lastmjs | 2021-09-16 22:14:09 UTC | #57

I’ve voted no on this proposal mostly to make a point about security. If there is an obvious vulnerability that could lead to catastrophe, and an obvious solution, I think the priority should be to patch that vulnerability.

I would like to see canister sandboxing per process before deploying these features.

The same sentiment is reflected in this proposal: https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/75

-------------------------

diegop | 2021-09-16 21:30:09 UTC | #58

I think that is a very commendable and engaging way to show your classic well-earned reputation for clarity of thought

-------------------------

gauravsd | 2021-09-16 23:36:54 UTC | #59

I am bitcoin hodler from 2013 and very early supporter of dfinity since 2018 i truly support them. My Vote is YES

-------------------------

diegop | 2021-09-16 23:37:52 UTC | #60

[quote="diegop, post:58, topic:6147, full:true"]
I think that is a very commendable and engaging way to show your classic well-earned reputation for clarity of thought
[/quote]

:trumpet: :trumpet: Thanks for such ringing endorsement!

-------------------------

mparikh | 2021-09-17 08:43:34 UTC | #61

[quote="mparikh, post:54, topic:6147"]
It will only take one successful jail-break to completely erase trust from the community that we have tried, so assiduously, to cultivate. I would anticipate that TODAY we have close to $30 m in just NFT assets that are under risk.
[/quote]

[quote="nomeata, post:55, topic:6147"]
there is a community driven bug hunting bounty program in place, with a bounty of ul to 30M$.
[/quote]

It nearly did make it it's post. ("An inadvertent community driven bug hunting bounty program for IC").  I will articulate why I did not make it it's own post with all the rationale here (as opposed to a provocative new post).  

At first, an free airdrop doesn't really cost end users any real money. As the NFTs begin to percolate the eco-system, people begin to pay real currency for acquiring NFTs. For example,  i got a free nft (starverse) for my participation on dscvr.one. At the beginning,  on the entrepot.app,  the lowest price of one of those nfts was around 0.8 icp. Currently the lowest price is 1.89. Doubling of the price  from nothing. This begins to cause a sense of entitlement ("it's mine...I own it") for the average end-user. Imagine if they log into the account one fine day and they don't see that NFT. This causes anger, fury etc. They will begin to blame someone else (nobody buys the argument..."but it was beta"). They have lost something of value.

All participants do understand that crypto is inherently risky. But they also expect that reasonable protection be afforded to them on any platform. An ICAntagonist can make significant noise.  i.e. " oh that dfinity foundation...200 cryptographers...and they FORGOT to put in basic sandboxing that WE have known for years..". Unfortunately logic (the fact that we have it in the roadmap) cross raw emotion and logic, in that case, has no chance. It can cause a catastrophic cascade with the right shills.

The reason that my articulation is here as opposed to top level is that most people will not bother to read a post 50 levels buried. But concerned discerning teams will... and hopefully take action as appropriate.

-------------------------

namyIC | 2021-09-17 13:23:15 UTC | #62

I think it is worrying to surface, but more so confirming, these things on a forum level completely in the open. It only takes one person to forward this in the wrong direction and then you have the avalanche started with antagonist shill to tackle in the future. Not to mention that you openly confirm where the security risks are, for someone with bad intentions will just go straight ahead to try to utilise. Some parts should not be surfaced/confirmed in this way I strongly believe.

-------------------------

diegop | 2021-09-17 13:46:36 UTC | #63

Did you miss the community conversation yesterday on Bitcoin Integration with Thomas Locher (@THLO )?

Here it is:

https://www.youtube.com/watch?v=MxBIvPhPzzc&feature=youtu.be

-------------------------

diegop | 2021-09-17 21:11:30 UTC | #64

**Update**: the motion passed!

https://medium.com/dfinity/motion-proposal-to-integrate-bitcoin-with-the-internet-computer-is-approved-95b00e1dcc9c

-------------------------

jzxchiang | 2021-09-18 04:26:12 UTC | #65

A random question:

If this proposal will allow for the IC to make outbound connections to the Bitcoin network, can we leverage that same technology (however it's implemented) to make outbound connections to arbitrary external services?

I'm guessing some kind of oracle will be part of this proposal's implementation.

-------------------------

mparikh | 2021-09-18 05:21:36 UTC | #66

Liquid democracy requires an informed citizenry. Security by obscurity is not true security.

-------------------------

integral_wizard | 2021-09-18 06:11:21 UTC | #67

Not a random, but a good question. The answer is YES! Although not immediately available. One part of this integration is the network module that is added to the IC. This will be used for eth integration but also to do outside calls. This primer explain the integration in more detail: https://youtu.be/TtVo3krjARI I also pasted a slide from that video overview that shows the added components.
![Screenshot_20210918-090635_Chrome|690x326](upload://wkaTqD9Dl5EoE5NgXC7D3gYyFoE.jpeg)

-------------------------

jzxchiang | 2021-09-18 06:22:40 UTC | #68

Oh wow, I didn't know this was [already](https://forum.dfinity.org/t/idempotent-egress-messages-e-g-send-an-email/6998/14) on DFINITY's roadmap.

-------------------------

namyIC | 2021-09-19 18:23:38 UTC | #69

I understand what you mean, but from where I stand I could not say what course of action to take even when given this knowledge (would you?), but those with ill intentions will just dive into and dig straight at the source where there also might be other security risks in the proximity to the surfaced one that has not been identified to utilise this as entry vectors as well. Where there are one security risk there might just be other ones lurking around. In some aspects, certainly when it comes to security risks, I don’t think the community as a whole is equipped to make a decision around this.

-------------------------

skilesare | 2021-09-19 21:42:13 UTC | #70

Everyone wants more information on IC-530. My suspicion is that HTTP calls are OK here because the messages being sent are signed, nonrepeatable, and a sure to be broadcast and included by anyone seeking financial award. I have some reservations that other kinds of http requests(say hitting an aws api) would have the same kinds of guarantees. I’m excited to hear more though in case they have cracked the determinism problem.

-------------------------

mparikh | 2021-09-20 01:24:04 UTC | #71

If I were a NFT buyer, putting down 188 icp for buying one NFT, I would like to make sure that my investment is secure. This information might make me insecure.. therefore the concrete action that I take is NOT to spend 188 ICP.

-------------------------

dieter.sommer | 2021-09-20 09:42:56 UTC | #72

@jzxchiang, @integral_wizard
What you see on the slide from the video posted above is a high-level overview of the Bitcoin integration architecture, including the networking part. As you already observed, the networking architecture is being built in a very general way so that it can serve multiple purposes besides the Bitcoin integration: Another crucial purpose here is a future Ethereum integration, and yet another one is allowing canisters to make http calls or do arbitrary networking. The idea here is to provide all of those functionalities with a single, unified architecture that is part of the IC protocol stack. Different protocols (BTC, ETH, http, TCP ...) would share the bulk of the architecture components, e.g., at the networking level, and each receives their own *Protocol Adapter*. This way, we can keep the architecture highly modular yet powerful, and with an as-small-as-possible integration surface with the IC protocol stack.

There have been some security concerns voiced above regarding security. We do address relevant security concerns early on as an integral part of the architecture ("by design") and don't bolt it on afterwards. For example, we plan to sandbox code that is performing "dangerous" tasks like parsing of untrusted content in a highly confined sandbox such that, even if someone manages to mount something like a remote code execution attack by providing maliciously crafted networking responses (e.g., an attacker's Bitcoin node we connect to), they will not be able to break out of the sandbox in the (very unlikely) case of success of their attack, thus will not be able to do any real damage, even if their RCE succeeds. Note that the code most susceptible to vulnerabilities is  code for parsing untrusted content, that's why we want to sandbox these code parts and isolate them for the remaining system.

Another discussion further above was the WASM execution sandboxing. As mentioned, we want to bring it on our roadmap, but we cannot give you a concrete timeline currently.

And please do not forget that our choice of language, Rust, on its own already helps reduce certain classes vulnerabilities at the implementation layer due to its inherent properties. That is, security is taken seriously on every level, end even without the abovementioned additional controls related to isolation, we are already well positioned because of our language choice, diligent engineering processes with code reviews, and other QA measures that are in place in our engineering process.

-------------------------

lastmjs | 2021-09-20 22:43:16 UTC | #73

These are the kinds of posts I love to read

-------------------------

diegop | 2021-09-21 03:44:50 UTC | #74

**Update**: we have a new thread for security sandboxing. We hope this will pick up speed shortly with more concrete plans.

https://forum.dfinity.org/t/security-sandboxing-community-consideration/7438

-------------------------

jzxchiang | 2021-09-22 07:17:39 UTC | #75

Thanks for the detailed response.

If the IC does in fact implement a networking layer that allows smart contracts to make arbitrary network calls in a distributed way, that would be a massive step forward. I don't think any other blockchain natively supports that. AFAIK they all resort to an integration with some off-chain oracle solution like Chainlink.

-------------------------

cryptoschindler | 2021-10-05 13:49:57 UTC | #76

Is there a current estimate for the integration of the above proposal? More at the end or the beginning of Q4? @diegop

-------------------------

nomeata | 2021-10-05 14:07:59 UTC | #77

And of course, as always with engineering deadlines: which year's Q4 ;-)

-------------------------

diegop | 2021-10-05 18:08:47 UTC | #78

[quote="cryptoschindler, post:76, topic:6147, full:true"]
Is there a current estimate for the integration of the above proposal? More at the end or the beginning of Q4? @diegop
[/quote]

Currently, I believe it is tracking for the end of Q4 2021.

@THLO @dieter.sommer please correct me above if wrong as you are closer to this.

-------------------------

diegop | 2021-10-05 18:09:56 UTC | #79

[quote="nomeata, post:77, topic:6147, full:true"]
And of course, as always with engineering deadlines: which year’s Q4 :wink:
[/quote]

Oh, *you* :upside_down_face:

-------------------------

THLO | 2021-10-05 18:53:06 UTC | #80

[quote="diegop, post:78, topic:6147"]
Currently, I believe it is tracking for the end of Q4 2021.
[/quote]

Correct.
However, the same is true for the threshold ECDSA feature. If the threshold ECDSA feature is ready around the end of the year, the launch will likely be moved to Q1 2022 to give us sufficient time for end-to-end testing.

-------------------------

jzxchiang | 2021-10-05 23:34:52 UTC | #81

Will the implementation of the BTC <> ICP proposal include the famous networking module that allows a canister to make external HTTP calls to arbitrary domains? Or will it be limited to the BTC network?

-------------------------

diegop | 2021-10-05 23:39:02 UTC | #82

Thanks for the clarity, Thomas

-------------------------

THLO | 2021-10-06 09:24:44 UTC | #83

[quote="jzxchiang, post:81, topic:6147, full:true"]
Will the implementation of the BTC <> ICP proposal include the famous networking module that allows a canister to make external HTTP calls to arbitrary domains? Or will it be limited to the BTC network?
[/quote]

While the Bitcoin integration will lay the foundation for the functionality to make external HTTP calls, it is a separate piece of work.
Since it is an exciting feature, I hope that we will be able to work on it early next year!

-------------------------

alexeiZamyatin | 2021-10-06 14:59:27 UTC | #84

If I were to phrase how the BTC bridge works - in non-ICP terms.

Note: I am not an expert on how ICP works and I simply assume that there is a set of validators assigned to a cannister that locks up stake in the native token (Please correct if wrong!!!)

- A cannister runs a Bitcoin light client (a BTC-Relay) that allows it to verify that specific Bitcoin transactions are part of the main chain + some parsing functionality.  
- When a user wants to move BTC onto ICP, she deposits this to a address generated by the cannister. 
- This address is generated from a ECDSA public key that was in turn generated via an ECDSA threshold scheme. 
- The validators (?) of the cannister jointly control the public key. That is, only if e.g. 2/3 sign, the BTC can be moved. 

Questions that arise:
- How do you update the threshold signature scheme when the validator set changes?
- Does the ECDSA threshold implementation suffer from the same issue as the one used in tBTC (i.e., one can only check how many signatures were made, but now **who**) or does this implement the improvement suggested by Gennaro & Goldfeller? And is the latter improvement already feasible in practice (I have not yet seen any implementation and would be grateful for a pointer!)
- How are users protected from failures? Since there seems to be no collateral that will be used to reimburse users in case of failure, users must trust that 2/3 of the cannister validators are honest. 

The challenge here is that the **security model is different from the single-chain / ICP only setting**. To attack ICP, validators must collude and risk losing their deposit. The value of the attack, however, is hard to measure: the ICP price would crash if a major attack happened, stake would be slashed etc. - so it is unclear how validators would measure the value of the attack. 

In the case of a BTC bridge, the attack setting is different: the validators must only decide to steal the BTC. There is always a direct comparison to their stake in terms of e.g. USD value: the USD value of the total BTC locked in with the cannister deposit address - and the total value of the stake locked by the cannister's validators in ICP tokens. The moment the BTC is worth more, validators are incentivized to steal. 

Wondering if and how this is address - and if I have at all understood the bridge / cannister design correctly.

Thanks in advance and thanks for being patient with my lack of ICP knowledge.

-------------------------

diegop | 2021-10-06 16:25:09 UTC | #85

I thought this thread would be interested in the update about project scope and design on the Sandboxing project tread: https://forum.dfinity.org/t/security-sandboxing-community-consideration/7438/3?u=diegop

-------------------------

THLO | 2021-10-08 08:21:50 UTC | #86

[quote="alexeiZamyatin, post:84, topic:6147"]
Note: I am not an expert on how ICP works and I simply assume that there is a set of validators assigned to a cannister that locks up stake in the native token (Please correct if wrong!!!)
[/quote]

The Internet Computer does work differently:  A canister smart contract runs on a so-called subnet consisting of a set of nodes/replicas. The (decentralized) Network Nervous System (NNS) determines which replicas are part of which subnet. Since all replicas together ensure deterministic execution and state transition, they are responsible for both execution and validation. However, there is no "deposit" of ICP. Each node is associated with a node provider, and node providers get rewarded, in ICP, for each node that contributes to the Internet Computer.
If you'd like to learn more, you can find a technical overview [here](https://medium.com/dfinity/a-technical-overview-of-the-internet-computer-f57c62abc20f).

Let's go over your bullet points:
[quote]
* A cannister runs a Bitcoin light client (a BTC-Relay) that allows it to verify that specific Bitcoin transactions are part of the main chain + some parsing functionality.
[/quote]
Technically, each replica (running the canister) runs a BTC relay, which interacts with the Bitcoin P2P network and provides the necessary information to a Bitcoin system component (running on each replica). This component makes Bitcoin-related functionality available to the canisters.

[quote]
* When a user wants to move BTC onto ICP, she deposits this to a address generated by the cannister.
[/quote]
Correct.
[quote]
* This address is generated from a ECDSA public key that was in turn generated via an ECDSA threshold scheme.
[/quote]
Correct.
[quote]
* The validators (?) of the cannister jointly control the public key. That is, only if e.g. 2/3 sign, the BTC can be moved.
[/quote]
The replicas running the canister jointly control the *private key*. And yes, two thirds of the replicas must provide a signature share to construct a valid signature to move Bitcoin to another address.

Regarding your other questions, as they pertain to the threshold ECDSA feature, may I ask you to post them on the [dedicated thread](https://forum.dfinity.org/t/threshold-ecdsa-signatures/6152)? The guys there will certainly be able to answer your questions in great detail.   :slight_smile:

-------------------------

sakoma.icp | 2021-10-19 00:14:29 UTC | #88

Back to this point about the potential use cases of tthis ICP-BTC integration.
DEX and Crowdfunding dApps would be natural use case.
More globally, "rotating credit saving" groups or ROSCAS  (https://www.gdrc.org/icm/rosca/rosca-names.html) would be a great fit. 
There are millions of communities & groups putting funds together and redistributing/lending them to fund members projects in more more less sophisticated schemes, which could naturally be implemented in smart contracts (without human risks/ funds diversion) and hold the shared funds in BTC (vs local costly banks and currencies). 
Every time a group or community needs to hold and use shared funds with some logic, this integration offers the right cocktail : smart canisters holding BTC (as individuals but with logic) and fast/cheaper transaction fees.
my two cents

-------------------------

dieter.sommer | 2021-10-25 06:47:28 UTC | #89

Dear community!

Let us share an update on some of our recent engineering progress. We have made excellent progress with the implementation of the feature both for the Bitcoin Adapter and the BTC System Component. Just to give an example, the BTC System Component can already build the UTXO set from Bitcoin blocks and gracefully handle forks.
We will be posting progress updates more regularly in the future to keep you updated!

-------------------------

cryptoschindler | 2021-10-25 07:01:55 UTC | #90

Great to hear! How does building the UTXO set work? Does each replica process every block since genesis?

-------------------------

dieter.sommer | 2021-10-25 07:20:45 UTC | #91

We have not yet integrated the BTC System Component with the Adapter, that's still an upcoming milestone. To demonstrate the UTXO processing capabilities, our engineer for the System Component has fed all blocks up to 705992 into the BTC System Component directly and had them processed. He could show that the API for querying the UTXO set for bitcoin addresses works. This is a huge step as it shows that the core processing logic of the component works.

> Does each replica process every block since genesis?

The goal is to not ingest all blocks using the regular mechanism as this puts too much load on the subnet and takes a long time. We will likely pre-process the UTXO set up to a defined block externally and encode the hash of a canonicalized version of this pre-processed set into the BTC System Component. Then we just feed the set into the component and the component can validate the correctness of the hash and bootstrap securely yet efficiently. How exactly we do this is still to be determined. We'll keep you posted once we get there. Hope this answers your question!

-------------------------

cryptoschindler | 2021-10-25 08:27:50 UTC | #92

Yes, many thanks for the detailed answer!

-------------------------

diegop | 2021-10-28 16:59:17 UTC | #93

I thought folks here would be interested in this: 


https://twitter.com/dfinity/status/1453755281784000521

-------------------------

Maxfinity | 2021-10-31 08:37:24 UTC | #94

[quote="diegop, post:93, topic:6147"]
https://twitter.com/dfinity/status/1453755281784000521
[/quote]

Do we know how the planned Taproot and upgrade to Schnorr could affect this integration? Could it simplify the threshold scheme for instance?

-------------------------

dieter.sommer | 2021-10-31 12:04:26 UTC | #95

Threshold Schnorr would be a somewhat simpler protocol than threshold ECDSA is. However, we are now in the middle of the process of building threshold ECDSA and will use this for our first Bitcoin integration deployment as originally planned. This is not something one can change quickly as it would involve all stages of protocol design, security proof, protocol review, system design etc., so it would throw us back a lot in our timeline. And ECDSA will always be supported in Bitcoin.

-------------------------

pyd | 2021-11-01 09:51:56 UTC | #96

[quote="THLO, post:26, topic:6147"]
The BTC system component receives Bitcoin blocks that are provided by the Bitcoin Adapter at the Networking layer via Consensus and Message Routing. A protocol between the Bitcoin Adapter and the BTC system component enables the Bitcoin Adapter to decide which block to provide next. The BTC system component further makes outgoing Bitcoin transactions available at the Networking layer, where they are transmitted to the connected Bitcoin nodes.
[/quote]

So canister doesn't verify the validation of btc block for example PoW?

-------------------------

THLO | 2021-11-01 10:15:32 UTC | #97

[quote="pyd, post:96, topic:6147"]
So canister doesn’t verify the validation of btc block for example PoW?
[/quote]

While I didn't mention it in my short summary above, the blocks are verified: the validity of the PoW difficulty as well as the timestamp in the block header are first checked at the networking/consensus layer and then again in the execution layer before a block is accepted.

-------------------------

pyd | 2021-11-03 01:32:53 UTC | #98

If canister want to verify the PoW of bitcoin, icp should maintain the block header in canister. So how many block headers should icp hold? The whole chain or just the tail of BTC, for example last 100 block headers?

-------------------------

THLO | 2021-11-03 09:23:02 UTC | #99

The IC system components themselves verify the validity of blocks and offer the functionality to retrieve UTXO sets and submit Bitcoin transactions to the canisters. So, canisters are not required to validate blocks/block headers themselves, nor will they be able to because the system won't provide access to this data.

The system itself caches blocks until there are sufficiently many confirmations and there are no competing forks at the same block height. This means that more blocks are cached if there are forks that need to be resolved. Since forks are fairly rare in Bitcoin, the number of cached blocks will likely be small most of the time in practice.
If there is interest, I can provide a more formal/technical description of the caching process.

-------------------------

dieter.sommer | 2021-11-05 18:22:14 UTC | #101

Dear community!

Let me share this week's highlight w.r.t. work on this feature with you. We had the first "Bitcoin Community Developer Workshop" yesterday with some of the core DFINITY folks working on the Bitcoin and threshold ECDSA features as well as many of our most active and interested community members on those topics joining online for two hours. We had around 15 forum members participating as well as 9 folks from DFINITY. The minutes will be made available early next week.

It was an extremely productive conversation where on the one hand our community members could get questions answered by DFINITY folks on details regarding the API, concepts and implementation and on the other hand DFINITY could get insights on what the community members think and what they would like to see being built in addition to what has been planned.
Let me highlight the following points that I consider major outcomes of the meeting and the project’s status:

1. Testing against BTC mainnet and testnet - Regarding the testing of canisters that want to use Bitcoin, the community suggested that we should provide the option of letting a canister choose whether it wants to work with the Bitcoin mainnet or testnet. This would allow for easier testing of canister code without needing to perform transactions on the Bitcoin mainnet.

2. Threshold ECDSA and BTC integration - The Threshold ECDSA feature will most probably slip into 2022, but it may be possible to avoid that this also delays the rollout of the Bitcoin integration feature: Our community has suggested that we should provide them access to the Bitcoin functionality without Threshold ECDSA if it is finished earlier in order to allow for implementing against it already and mock the ECDSA functionality during development. This would help reduce the time to market for Bitcoin-related features.

3. EVM on the IC - Our community stressed the importance of being capable of running EVM code on the IC so that smart contracts authored in Solidity could be run on the IC without reimplementing them. The reasoning behind this is that it is a huge effort to rewrite substantial smart contracts and there is the risk of introducing vulnerabilities into a time-tested smart contract through such a rewrite.

We are now internally discussing those points that have been brought up and will keep you posted on updates.

Have a nice weekend!

-------------------------

JoekingJoeker | 2021-11-07 07:35:39 UTC | #102

About point 2., I thought the Bitcoin integration was dependent on Threshold ECDSA. How will the Bitcoin functionality work without Threshold ECDSA?

-------------------------

ielashi | 2021-11-07 10:32:30 UTC | #103

There are some use-cases that don't depend on tECDSA, though relatively limited. The BTC API allows you to get the balance/UTXOs of bitcoin addresses, so you can, for example, deploy canisters that can programmatically do some action whenever a specific bitcoin address receives/sends BTC.

-------------------------

