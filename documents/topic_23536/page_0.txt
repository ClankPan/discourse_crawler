domwoe | 2024-01-05 09:07:53 UTC | #1

## Overview

Status: Assigned
Project Type: Cooperative - Multiple workers can submit work, and the bounty is shared
Time Commitment: Weeks
Experience Level: Intermediate
Size: USD 5'000 in ICP (at time of distribution)

## Description

For some time, `dfx` has included an [assets canister](https://github.com/dfinity/sdk/tree/master/src/canisters/frontend/ic-frontend-canister). This canister facilitates the storage and retrieval of static assets. It is automatically provisioned when the canister type in `dfx.json` is designated as `assets`.

Assets can be delivered via either `raw.icp0.io` or the more secure `icp0.io`, with the latter being the recommended best practice. Assets served through `icp0.io` are expected to be  [certified](https://internetcomputer.org/docs/current/references/http-gateway-protocol-spec#response-verification), with the boundary nodes verifying that the replica replying to the `http_request` hasn't altered the output. This behaviour is specified in the [HTTP Gateway Protocol](https://internetcomputer.org/docs/current/references/http-gateway-protocol-spec).

Currently, only a Rust version of a certified assets canister exists. Although DFINITY's asset canister was [originally crafted in Motoko](https://github.com/dfinity/sdk/tree/b334a69408e7fc873e09d2d82c3fe827665fcfa1/src/distributed/assetstorage) and there are [additional Motoko versions](https://github.com/aviate-labs/asset-storage.poc) available, these lack asset certification. Consequently, they can only be accessed via the less secure `raw.icp0.io`. A primary reason for this limitation was the absence of adequate developer tools for the smooth implementation of certified assets in Motoko. However, with the introduction of [ic-certification](https://github.com/nomeata/ic-certification), the situation has evolved, equipping developers with the essential components to construct a certified assets canister using Motoko.

Leveraging the [ic-certification](https://github.com/nomeata/ic-certification), we've introduced the [certified-cache](https://github.com/krpeacock/certified-cache/tree/main) library, simplifying the caching of certified API responses. Another noteworthy library, [assets](https://github.com/krpeacock/assets), equips canisters with the essential logic to manage assets in line with the asset canister interface utilised by both `dfx` and `@dfinity/assets`. Integrating these functionalities, the [server](https://github.com/krpeacock/server) library offers a straightforward HTTP server for Motoko. Within its repository, the [http-greet](https://github.com/krpeacock/server/blob/main/examples/http_greet/src/http_greet/main.mo) example nearly achieves a full-fledged assets canister implementation in Motoko. However, it misses several key features:

- Chunked uploads
- Streaming
- V2 certification
- Testing
- Access control

The objective of this bounty is to incorporate the above-mentioned features into [assets](https://github.com/krpeacock/assets)
subsequently transforming the [http-greet](https://github.com/krpeacock/server/blob/main/examples/http_greet/src/http_greet/main.mo) example into a comprehensive certified assets canister.

## Acceptance Criteria

- The implementation shall fully mirror the existing Rust certified assets canister functionality and interface (including v2 certification)
- The code shall be of production quality, have good documentation and reasonable test coverage.
- The code shall be open sourced with an MIT license.

## How to apply?

Include links to previous relevant work.
Include a brief overview of how you will complete the task.
Post your application to this forum [thread]().

## References

- [motoko ic-certification](https://github.com/nomeata/ic-certification)
- [http gateway specification](https://internetcomputer.org/docs/current/references/http-gateway-protocol-spec)
- [asset canister interface](https://github.com/dfinity/agent-rs/blob/main/ic-utils/src/interfaces/http_request.rs)
- [motoko asset canister](https://github.com/aviate-labs/asset-storage.poc)
- [DFINITY motoko asset canister](https://github.com/dfinity/sdk/tree/b334a69408e7fc873e09d2d82c3fe827665fcfa1/src/distributed/assetstorage)
- [rust certified assets canister](https://github.com/dfinity/sdk/tree/master/src/canisters/frontend/ic-frontend-canister)
- [asset canister docs](https://internetcomputer.org/docs/current/references/asset-canister/)
- [http asset certification wiki](https://wiki.internetcomputer.org/wiki/HTTP_asset_certification)
- [service worker](https://github.com/dfinity/ic/tree/master/typescript/service-worker)
- [icx-proxy](https://github.com/dfinity/icx-proxy/blob/b0de0437fe6806a96d942465e5ee284c23b812e8/src/main.rs#L470)
- [boundary nodes wiki](https://wiki.internetcomputer.org/wiki/Boundary_Nodes)
- [rust certified assets library](https://github.com/dfinity/sdk/tree/master/src/canisters/frontend/ic-certified-assets)
- [motoko server](https://github.com/krpeacock/server)
- [motoko certified cache](https://github.com/krpeacock/certified-cache)
- [motoko assets](https://github.com/krpeacock/assets)
- [v2 certification](https://github.com/dfinity/interface-spec/pull/147)
- [motoko certified HTTP](https://github.com/nomeata/motoko-certified-http)

-------------------------

skilesare | 2023-10-06 15:27:32 UTC | #2

Hey @domwoe, We have almost all of this (except maybe V2 certification which we haven't looked at) baked into the ORIGYN_NFT and it should be generalizable. @ferMartz could take a look and see how far we are.

Streaming: https://github.com/ORIGYN-SA/origyn_nft/blob/64a93f4a9d8075a3042504fedc51728dd117a940/src/origyn_nft_reference/http.mo#L122
Chunked Upload(Fernando has done this work in conjunction with @infu and @nomeata 's libraries but we haven't merged it yet:  https://github.com/ORIGYN-SA/origyn_nft/blob/64a93f4a9d8075a3042504fedc51728dd117a940/src/origyn_nft_reference/mint.mo#L801

Access Control: This is obviously focused on NFT based scenarios at the moment, but only collection owners can upload assets, so it likely just needs to be modified.

Testing:  We have some basic testing in the project...all motoko tests.  Likely some additional streaming tests would be good to have.

V2 Certification:  Where can we look up more info on how this changed?

As far as serving the files, they currently get served out of an NFT based schema so that each NFT is basically its own asset canister, but this can be generalized for a single set of files pretty easily.

-------------------------

domwoe | 2023-10-16 10:08:47 UTC | #3

Hey @skilesare,

sorry for the late response. I was on vacation last week.

It'd be great to have you and @ferMartz work on this.

[quote="skilesare, post:2, topic:23536"]
V2 Certification: Where can we look up more info on how this changed?
[/quote]

I see that you already started a thread about this: https://forum.dfinity.org/t/certification-v2-questions/23775/3

Anything else you need?

-------------------------

skilesare | 2023-10-16 14:29:18 UTC | #4

I think we need to pick up the thread with @NathanosDev to get V2 working.  Likely we can get a v1 version pretty easily as we have all the pieces.  Some clarity around the details for things like how to handle streaming(one big file using a streaming strategy or certify the chunks...what about byte-based requests...etc) would be helpful.

-------------------------

domwoe | 2023-11-13 13:48:11 UTC | #5

Bounty is assigned to @ferMartz! Keep us posted!

-------------------------

quint | 2023-11-17 17:47:34 UTC | #6

Hi @skilesare @domwoe!

Looking forward to this! We are also planning to look into this the coming week.
I will post updates here if there are any.

-------------------------

domwoe | 2023-11-29 13:07:21 UTC | #7

Unfortunately, @ferMartz has withdrawn. The bounty is open again!

-------------------------

cryptoschindler | 2024-01-05 09:03:42 UTC | #8

@tomijaga decided to tackle the bounty. Looking forward to the progress

-------------------------

kpeacock | 2024-03-25 18:00:56 UTC | #9

By the way, I'm happy to hand over the package `"assets"` to this project in mops once the work is complete! Or to take over distributing it, however the devs would like to handle it

-------------------------

cryptoschindler | 2024-05-29 09:34:05 UTC | #10

@tomijaga are you still pursuing this?

-------------------------

0xjoi | 2024-06-10 18:08:12 UTC | #11

May I work on this?it seems to be vacant for quite some time now.

-------------------------

domwoe | 2024-06-14 06:20:55 UTC | #12

Hi @0xjoi,

thanks a lot for your interest. Since @tomijaga seems not to be working on this anymore, we can open up this bounty again. Please apply in this thread.

[quote="domwoe, post:1, topic:23536"]
## How to apply?

Include links to previous relevant work.
Include a brief overview of how you will complete the task.
Post your application to this forum thread.
[/quote]

-------------------------

0xjoi | 2024-06-21 18:11:57 UTC | #13

Hi @domwoe,
 
Understood sir, I will do this asap.

-------------------------

