peterparker | 2021-12-21 10:14:45 UTC | #1

Is there a cache somewhere or above canisters that implements `http_request`?

Can the cache be busted with a call or else?

#### Context

I have implemented my own [storage](https://github.com/deckgo/deckdeckgo/tree/main/canisters/src/storage) to publish my users content. In a process, my app upload to the IC files such as `robots.txt` or `index.html`. 

As a result and while testing, I often notice that the files I just uploaded are not updated straight away  if I request these through the browser (incognito mode included). Spent quite some times this morning to debug the all process and can confirm that the content is correctly uploaded to my canisters.

Likewise just noticed the same effect while deleting content. Began to debug to understand why a file was still provided through http even though I had deleted it, find nothing. Finally 5-10 minutes later I tried to fetch it again and the file was successfully gone.

-------------------------

paulyoung | 2021-12-23 06:27:50 UTC | #2

Have you tried setting cache control headers?

https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control

-------------------------

peterparker | 2021-12-23 06:54:29 UTC | #3

Thanks. Yes, I do set HTTP headers information regarding cache such as `max-age`. I currently specify a one hour (`max-age=3600`) for the content, the `index.html`.

I can try to remove or shorten such header but, I reproduce my issue with **incognito** tabs. If close all tabs, even close the browser, reopen it, open a brand new incognito tab, then I land on some cached content too.

That's why I am thinking there is another cache somewhere.

-------------------------

jzxchiang | 2021-12-28 22:05:00 UTC | #4

I think boundary nodes do some caching, or at least it's on their roadmap to do caching.

-------------------------

faraz.shaikh | 2021-12-28 22:13:25 UTC | #5

Boundary nodes do cache query calls. The ttl is one second

-------------------------

jzxchiang | 2021-12-28 22:30:13 UTC | #6

Do you mind linking that code (if it's open source)? Didn't know it was so short.

-------------------------

faraz.shaikh | 2021-12-29 00:39:35 UTC | #7

The boundary node code is not open sourced. It‚Äôs on the roadmap along with the boundary node decentralization proposal 

Currently there is no way for forcefully purging the boundary node caches. 

The key for the cache is a hash of the cbor request, so a trivial way to invalidate is to generate a unique cbor request when contents change 

https://github.com/dfinity/nginx-module-cbor-input
Code for deriving the cache keys

-------------------------

peterparker | 2021-12-29 06:44:43 UTC | #8

It's interesting, thanks for the feedback. The cache issue I notice, least more than a 1 second, like a couple of minutes ü§∑‚Äç‚ôÇÔ∏è.

-------------------------

bitdivine | 2022-01-03 08:59:09 UTC | #9

Hello Peter.

I would recommend adding a cache buster to your query.  Any random data, will do, or in this case I think the timestamp would be fine.  This will ensure that the query does not match any historical queries, so won't hit a cache.

Best wishes, Max

-------------------------

peterparker | 2022-01-03 10:45:32 UTC | #10

That can / would work for some assets I am holding in the canister (like images), good idea @bitdivine thx üëç

To the contrary, not sure that it can be applied for the rest of my use case I would say spontaneously.

Users are publishing content, like blog posts or presentations, in their canisters. This material is  shipped as `index.html` and then served through urls such as `https://zhx6p-.....w.ic0.app/d/converting-svg-to-image-in-javascript`.

So adding a token to the queries would also mean having to update the urls everywhere once shared.

-------------------------

paulyoung | 2022-01-03 17:05:41 UTC | #11

I agree that this seems problematic for queries made via `http_request` and `icx-proxy`.

Does anyone know if update calls behave differently?

I‚Äôm wondering if that could be a way to work around this, albeit a more expensive one.

It would rely on this PR though: https://github.com/dfinity/icx-proxy/pull/6

-------------------------

