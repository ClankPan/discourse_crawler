AVOlight | 2022-11-17 02:25:42 UTC | #1

Is this complete https://internetcomputer.org/docs/current/references/motoko-ref/Time

-------------------------

skilesare | 2022-11-17 02:30:45 UTC | #2

I don't think the timers api has been released to motoko yet.  You can keep up with updates at https://forum.dfinity.org/t/heartbeat-improvements-timers-community-consideration/14201

-------------------------

AVOlight | 2022-11-17 02:47:13 UTC | #3

Thanks for the link ðŸ™‚

skimming over
https://github.com/dfinity/motoko
https://github.com/dfinity/examples/tree/master/motoko

didn't see anything on timers, sleep or delay :slightly_frowning_face:

in my case I guess I can just query an external canister for a short delay

-------------------------

icme | 2022-11-17 06:22:34 UTC | #4

[quote="AVOlight, post:3, topic:16635"]
in my case I guess I can just query an external canister for a short delay
[/quote]

That's not a bad idea, but you currently can't make inter-canister query calls, only inter-canister update calls are supported.

Also, keep in mind that while an inter-canister update call is in-flight it might be blocking other update messages from being processed, so you may not get the behavior you're looking for.

It might be helpful if you provide an MVP of the "delay" functionality that you're looking for in the context of a use case, or a code sample (maybe on the [Motoko Playground](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/)).

-------------------------

AVOlight | 2022-11-17 19:23:12 UTC | #5

this seems to be working for me
```
let external_canister = actor "canister_id" : actor {
        get_location: query () -> async { x : Int; y : Int };
    };
```

having a convenient delay function is great for prototyping anything async

-------------------------

AVOlight | 2023-03-17 01:11:41 UTC | #6

currently using
```
let raw_rand = (actor "aaaaa-aa" : actor { raw_rand : () -> async Blob }).raw_rand;
for (_ in Iter.range(0, count))
  ignore await raw_rand();
```

any ideas on how to use
`Timer.setTimer`
instead ðŸ¤”

while keeping the same local scope like above

-------------------------

