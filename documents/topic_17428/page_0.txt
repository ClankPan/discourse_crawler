passio | 2022-12-14 21:23:31 UTC | #1

Hello, sorry for this probably easy question but i can't find the solution.

I add some Principals in a Buffer and I would like to remove duplicates Principals... There is many way to do, but Buffer methods always need the  equal : (X, X) parameter... And I don't know what is that and I didn't easily find examples.


```
let buff : Buffer.Buffer<Principal> = Buffer.Buffer(10);
[...]
let principal1 = "xxxx-xxxx-..." 
let principal2 = "xxxx-xxxx-..." 

if( Buffer.contains(buff, principal1, ???) == false) // check if the principal is in the buffer
{
buff.add(principal1); //add if it's not
}
```


![Capture d‚ÄôeÃÅcran 2022-12-14 aÃÄ 22.21.56|690x170](upload://3fqW5S1t9vjQDPeOlM4eUAPNeSA.png)

How can I properly use these methods please ? Could you give an easy example like this one ?

-------------------------

paulyoung | 2022-12-14 23:17:17 UTC | #2

The type signature for `equal` is `(X, X) -> Bool` which means it is a function that takes 2 arguments of type `X` and returns a `Bool`.

In this case `X` is `Principal` so you can use `Principal.equal`:

https://github.com/dfinity/motoko-base/blob/57b47c7747bc6fb9665095e0c8972740ef5093e1/src/Principal.mo#L32-L33

If you never want duplicates you could consider using a `Set` data structure instead. I could only find this implementation:

https://github.com/dfinity/motoko-base/blob/57b47c7747bc6fb9665095e0c8972740ef5093e1/src/TrieSet.mo#L22-L22

-------------------------

passio | 2022-12-14 23:45:51 UTC | #3

Thank you for this answer. This is was I tried to use : Principal.equal, as I used it to instanciate my Hashmaps, so, the problem is not from there...

Ok, I found immediately so, I had just forget to put var x = before my method : 
`var x = Buffer.contains(buff, q2.answers[i].principal, Principal.equal);`


Thank you also for the explanation about Set<T>, it seems to be what I was looking for !

-------------------------

passio | 2022-12-15 00:12:47 UTC | #4

I'm also unable to use this... I understand a little better these methods than before... But not perfectly yet.

![Capture d‚ÄôeÃÅcran 2022-12-15 aÃÄ 01.06.08|690x121](upload://iTDReM4zJNI3vKr33IjVS9D62Q4.png)

I tried : 
![Capture d‚ÄôeÃÅcran 2022-12-15 aÃÄ 01.10.12|690x92](upload://lOlKqcAexBLmJluk2w0JKT18LWZ.png)
I get the error :
![Capture d‚ÄôeÃÅcran 2022-12-15 aÃÄ 01.10.40|690x175](upload://qcfHGBK0RluDfu63inNI7PFjvPT.png)

I don't really understand why it expect Nat32 type instead of Hash type like it's written in the prototype.

-------------------------

paulyoung | 2022-12-15 03:29:05 UTC | #5

The argument `xh` has the type `Hash`. If we follow the imports we can see that that‚Äôs a type alias for `Nat32`:

https://github.com/dfinity/motoko-base/blob/57b47c7747bc6fb9665095e0c8972740ef5093e1/src/Hash.mo#L8-L9

You‚Äôre providing `Hash.hash`, which is a function that takes a `Nat` and returns a `Hash`:

https://github.com/dfinity/motoko-base/blob/57b47c7747bc6fb9665095e0c8972740ef5093e1/src/Hash.mo#L27-L27

Instead, you probably want to provide the equivalent of `Principal.hash(q2.answers[i].principal)` for that argument.

https://github.com/dfinity/motoko-base/blob/57b47c7747bc6fb9665095e0c8972740ef5093e1/src/Principal.mo#L28-L28

-------------------------

skilesare | 2022-12-15 05:55:49 UTC | #6

Evginey's hashmap has a set implementation: https://github.com/ZhenyaUsenko/motoko-hash-map

-------------------------

passio | 2022-12-17 17:32:15 UTC | #7

Thanks üôè ‚ú® very much

-------------------------

