domwoe | 2023-09-19 11:53:10 UTC | #1

## Overview

The work on the [Bitcoin integration](https://internetcomputer.org/bitcoin-integration) already does some heavy lifting for integrating other chains with the Internet Computer. Most notably, [chain-key signing](https://internetcomputer.org/docs/current/developer-docs/integrations/t-ecdsa/) allows canisters on the Internet Computer to sign transactions targeting [platforms that support ECDSA](http://ethanfast.com/top-crypto.html), and [HTTPS outcalls](https://internetcomputer.org/https-outcalls) allow to submit them without incentivizing 3rd party relayers. However, the approach to accessing Bitcoin state relies on a custom implementation in the Internet Computer replica software and is as such not a scalable approach for the integration of other chains. 

One general pattern to allow accessing the state of other chains is to maintain a list of RPC provider services for a given chain and use HTTPS outcalls to interact with a random sample. Depending on the selection of the services and the size of the sample, there can be a high assurance of the validity of the data if all services in the sample agree.

However, with the recent development of the proof-of-stake beacon chain and the merge, there has been significant progress in the development of Ethereum light clients which allows an integration without having to trust the RPC providers. These light clients enable the verification of state and inclusion of events through the use of Merkle proofs and the reliance on sync committees - a slowly changing (approx. 25h), random sample of 512 validators - to obtain block headers with BLS signatures, rather than requiring the validation of the entire blockchain. 
 
## Areas for RFPs

We'd like to encourage individuals and teams to explore the integration of Ethereum light clients as canisters on the Internet Computer to allow other canisters secure access to data from the Ethereum blockchain. The nascent Helios client, which is implemented in Rust, could provide a good starting point.

As a first step, we are looking for a design document and a proof-of-concept implementation that allows assessing the viability and allows further input from DFINITY and the community.

## Main use cases

The main use cases that came up so far revolve around token ownership, balances, and gas price estimation:

1. Get ETH and ERC-20 token balances
2. Get ownership of ERC-721 and ERC-1185 tokens
3. Estimate the current gas price for transaction automation


## Considerations

- There is room for exploration to either use HTTPS outcalls to do RPC calls to execution and beacon nodes or provide economic incentives (and slashing) to 3rd parties to provide the necessary information
- Since this space is nascent, there's also the chance to suggest new APIs to beacon and execution nodes that make it friendlier/cheaper for canister-based clients. Currently in order to do the equivalence of an `eth_call`, you need a number of calls (`eth_getCode`, `eth_createAccessList`, and multiple `eth_getProof`) and a local EVM simulation. These are a lot of HTTPS outcalls, which might be prohibitively expensive on the IC for certain use cases. However, there is a chance on integrating new JSON RPC methods to the execution API like `eth_getReceiptProof` and `eth_getCallProofs` to streamline this. Ideally, you would support driving these changes.


## How to apply?

Please submit your application at https://dfinity.org/grants mentioning RFP-5. There you'll also find more details about the DFINITY Developer Grants program.

## Resources

### Related to the Internet Computer

- [Internet Computer Overview: What is the Internet Computer?](https://internetcomputer.org/what-is-the-ic#canisters)
- [How the Internet Computer works](https://internetcomputer.org/how-it-works)
- [Chain-key Signing/Threshold ECDSA](https://internetcomputer.org/docs/current/developer-docs/integrations/t-ecdsa/)
- [HTTPS Outcalls](https://internetcomputer.org/https-outcalls)
- [Internet Computer Interface Specification](https://internetcomputer.org/docs/current/references/ic-interface-spec)
- [Forum Thread related to Ethereum integration](https://forum.dfinity.org/t/direct-integration-with-ethereum/6145)


### Related to Ethereum light clients

- [Rust Implementation: Helios](https://github.com/a16z/helios) / [Blog Post](https://a16zcrypto.com/building-helios-ethereum-light-client/) / [Telegram Channel](https://t.me/+IntDY_gZJSRkNTJj)
- [JavaScript Implementation: Kevlar](https://github.com/lightclients/kevlar)
- [Light Clients after the Merge Presentation (DevCon6)](https://m.youtube.com/watch?v=ZHNrAXf3RDE)
- [Annotated Spec on Light Client Protocol](https://github.com/ethereum/annotated-spec/blob/master/altair/sync-protocol.md#introduction)
- [OpenAPI spec of ETH beacon node](https://ethereum.github.io/beacon-APIs/#/Beacon)
- [Light-clients channel in ETH R&D Discord](https://discord.com/channels/595666850260713488/595701319793377299)
- [Ethereum beacon chain light client specification for IBC](https://research.polytope.technology/ics-15:-ethereum-beacon-chain-light-client-specification-for-ibc)

-------------------------

neeboo | 2023-01-19 01:39:03 UTC | #2

Actually we are working on it

-------------------------

JaMarco | 2023-01-19 04:45:05 UTC | #3

[quote="domwoe, post:1, topic:18008"]
However, the approach to accessing Bitcoin state relies on a custom implementation in the Internet Computer replica software
[/quote]
I thought the IC BTC light client was in a regular canister now?

-------------------------

paulyoung | 2023-01-19 04:56:35 UTC | #4

I saw this and was about to ask the same thing.

-------------------------

domwoe | 2023-01-30 10:08:26 UTC | #5

[quote="JaMarco, post:3, topic:18008"]
I thought the IC BTC light client was in a regular canister now?
[/quote]

There are two parts:

1) [The Bitcoin Adapter](https://github.com/dfinity/ic/tree/master/rs/bitcoin/adapter)
2) [The Bitcoin Canister](https://github.com/dfinity/bitcoin-canister)

The Bitcoin Adapter takes care of networking with the Bitcoin P2P network and does also the block validation (AFAIK). This part is implemented on the replica level.

-------------------------

skilesare | 2023-01-19 13:20:01 UTC | #6

[quote="domwoe, post:1, topic:18008"]
1. Get ETH and ERC-20 token balances
2. Get ownership of ERC-721 and ERC-1185 tokens
3. Estimate the current gas price for transaction automation
[/quote]

Wouldn't it be easier to just go ahead and expose the interface for accessing and verifying state variables in any contract?  I don't think there is much difference in validating (balance|address) on an ERC20 contract and symbol.  This would give us access to verify all variables on the chain and not just standardized contracts(helper functions for those would be welcome though!).

-------------------------

domwoe | 2023-01-19 14:00:42 UTC | #7

Yes, but as written in the considerations a general translation of `eth_call` might be costly if we rely on HTTPS outcalls and the currently available RPC endpoints.

My intention in stating the main use cases was that a potential implementation needs to ensure that at least these use cases are viable.

-------------------------

Sormarler | 2023-01-19 15:00:08 UTC | #8

Wood integration using light client give the integration more Throughput?

-------------------------

Maxfinity | 2023-01-19 16:51:02 UTC | #9

[quote="domwoe, post:1, topic:18008"]
However, with the recent development of the proof-of-stake beacon chain and the merge, there has been significant progress in the development of Ethereum light clients which allows an integration without having to trust the RPC providers. These light clients enable the verification of state and inclusion of events through the use of Merkle proofs and the reliance on sync committees - a slowly changing (approx. 25h), random sample of 512 validators - to obtain block headers with BLS signatures, rather than requiring the validation of the entire blockchain.
[/quote]

Hi Dom, it would be nice to get recognition for suggesting this idea. As it stands, the InfinitySwap team applied for a grant for this and suggested the idea of using Helios, and we are yet to hear back from the Foundation.

-------------------------

domwoe | 2023-01-19 20:25:11 UTC | #10

Hey Max - I'm not aware of any grant application regarding this topic yet.

-------------------------

domwoe | 2023-01-19 20:27:12 UTC | #11

[quote="Sormarler, post:8, topic:18008, full:true"]
Wood integration using light client give the integration more Throughput?
[/quote]

Not sure. In comparison to what?

-------------------------

Maxfinity | 2023-01-19 21:12:57 UTC | #12

I have forwarded the email we sent to Jan, outlining the proposal a few months ago. Alex also followed up with a grant application. We went as far as to have a locally running instance, but without support from the Foundation we had to hold back.

-------------------------

neeboo | 2023-01-20 04:38:02 UTC | #13

We are all in the same page, let's collaborate

-------------------------

Ideaseed | 2023-01-24 14:54:31 UTC | #14

All of you are asking the right questions and seem to have the intricate knowledge to keep the train on the tracks.  I hope all of you collaborate,  I feel more secure with my investments into ICP knowing how proactive the community can be, though the Dfinity heads need to act faster to keep the right talent aboard with grants, not being too carefree with grants to opportunistic partners without doing proper due diligence.

-------------------------

cymqqqq | 2023-02-22 05:55:36 UTC | #15

Any updates on this post?

-------------------------

agentDPS | 2023-04-20 16:25:46 UTC | #16

Any updates on this ?

-------------------------

haida | 2023-06-27 08:17:47 UTC | #17

Very much needed good plan, is there any progress?

-------------------------

domwoe | 2023-09-19 11:52:36 UTC | #18

Eiger has finished the PoC of porting Helios to a canister smart contract on the IC. Read more [here](https://forum.dfinity.org/t/project-recap-light-client-integration-for-icp/23167?u=domwoe)

-------------------------

