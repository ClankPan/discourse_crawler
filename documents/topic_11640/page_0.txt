cryptoschindler | 2022-03-22 21:09:14 UTC | #1

Is there a way to include ENV variables in the motoko build process? I know passing variables to an actor class could be a workaround, but sometimes you might want to have a "hardcoded" value that's not passed to an instantiation of an actor. If this is not available yet, are there plans to add support?

@diegop @claudio

-------------------------

icme | 2022-03-23 10:02:18 UTC | #2

I haven’t tried this, but I could imagine a “hacky” process where you have multiple dfx.json files (i.e. local.dfx.json, dev.dfx.json, prod.dfx.json), then feed the env you want to a Python/bash script where this script would then copy in the correct (local/dev/prod).dfx.json as the root dfx.json and then execute the dfx build.

Then, you can similarly have localEnvs.mo, devEnvs.mo, and prodEnvs.mo module files and then as part of the same Python/bash script above copy the appropriate environment file to a envs.mo that your application is expecting. Then have your other application actor/module files import from “./src/envs”, and be good to go.

For testing, you would need a Makefile with make test local, make test dev, make test prod, etc. that would copy in the relevant files and then run the tests.

If you’re talking about environment variable injection through the actor I have no clue how to do that, and would love to see this feature (through the dfx sdk?) as well, as the process I described sounds like a repeated and unnecessary pain for others to complete.

-------------------------

diegop | 2022-03-23 17:09:28 UTC | #3

I am not sure, but I have pinged people internally. Good question

-------------------------

matthewhammer | 2022-03-23 17:17:23 UTC | #4

[quote="cryptoschindler, post:1, topic:11640"]
but sometimes you might want to have a “hardcoded” value that’s not passed to an instantiation of an actor.
[/quote]

Do you have a specific example in mind?  What kinds of values would need to be supported?  Simple `Text` values, or something with a more involved Motoko/Candid type?

-------------------------

claudio | 2022-03-23 17:47:03 UTC | #5

I think the short answer to the original question is no and we don't have any current plans to support that. Is there any precedence from other languages?

As a workaround, your best bet might be to use a script to generate a .mo file containing the constants derived from environment variables or some other pre-processor.

-------------------------

peterparker | 2022-03-23 21:09:20 UTC | #6

[quote="claudio, post:5, topic:11640"]
Is there any precedence from other languages?
[/quote]

Almost state of the art with any JavaScript framework - e.g. [dotenv](https://www.npmjs.com/package/dotenv) that allows such mechanism hits 25 millions download weekly on npm

-------------------------

justmythoughts | 2022-03-23 23:46:19 UTC | #7

Not speaking for @cryptoschindler, but as a starter just a configurable -env command line parameter like -env “local”, or -env=local would be nice to start.

Sort of like what webpack has https://webpack.js.org/guides/environment-variables/


Next, a Motoko equivalent of JSON config file that could be passed to moc/dfx would be great, and then these environment variable files could be accessible for use, without being publicly visible (i.e. secret environment variables don’t need to be stored publicly in in the same repo, but can be injected as part of the build/compile process and are now stable and persist through upgrades).

-envFile “envs/local.mo” or -envFile=“envs/local.mo”

-------------------------

paulyoung | 2022-03-24 01:58:29 UTC | #8

`moc` has a `--package` flag which could be used like this:

_env/lib.mo_
```
module {
  public let SECRET = "MY_SECRET";
};
```

_main.mo_

```
import Debug "mo:base/Debug";
import Env "mo:env";

Debug.print(Env.SECRET);
```

`moc --package base $(dfx cache show)/base --package env env -r main.mo`

Note that the `-r` flag runs the file. Depending on your use case you may want to use `-c`.

-------------------------

justmythoughts | 2022-03-24 15:49:51 UTC | #9

This is great! Would be nice if the `—-package` option could be added to `dfx build`. Then I can include this in CI.

-------------------------

paulyoung | 2022-03-25 01:42:36 UTC | #10

You can probably do that by using the custom canister type in `dfx.json`. Something like;

```
{
  "canisters": {
    "foo": {
      "type": "custom",
      "build": "moc -c …",
      "candid": "src/foo/src/foo.did",
      "wasm": "foo.wasm"
    }
  }
}
```

-------------------------

cryptoschindler | 2022-03-27 16:29:51 UTC | #11

Simple text would be enough for me needs.

An example would be an actor that I want to open source and already use myself which contains sensible information like addresses or principals I don't want to leak.

-------------------------

cryptoschindler | 2022-03-27 16:31:00 UTC | #12

That seems pretty cumbersome, and as @peterparker mentioned it seems to be pretty common at least on the frontend.

-------------------------

cryptoschindler | 2022-03-27 16:34:20 UTC | #13

Thanks, this should do the trick :tada:

-------------------------

rbole | 2022-03-28 05:17:33 UTC | #14

hi, could you provide more information about the moc command ?

-------------------------

cryptoschindler | 2022-03-28 05:50:18 UTC | #15

I think if you just want to normally deploy your canister you can ignore the `moc` stuff. Just create your `module` that contains your env variables and add it to your `.gitignore`. Whenever you need one of the env variables in an actor or another modules just import the module the "normal" way, e.g. `import Env "Env";` if you have a `Env.mo` file in the same directory. If another user clones your repo this file will be missing and the actor won't compile, so you can tell consumers to create it and add their own env variables to it.

-------------------------

paulyoung | 2022-03-28 06:53:10 UTC | #16

[quote="rbole, post:14, topic:11640, full:true"]
hi, could you provide more information about the moc command ?
[/quote]

`moc` is the Motoko compiler. `dfx` issues `moc` commands when building Motoko canisters. `moc --help` shows usage information.

-------------------------

cryptoschindler | 2022-03-28 06:59:14 UTC | #17

[quote="cryptoschindler, post:15, topic:11640, full:true"]
I think if you just want to normally deploy your canister you can ignore the `moc` stuff. Just create your `module` that contains your env variables and add it to your `.gitignore` . Whenever you need one of the env variables in an actor or another modules just import the module the “normal” way, e.g. `import Env "Env";` if you have a `Env.mo` file in the same directory. If another user clones your repo this file will be missing and the actor won’t compile, so you can tell consumers to create it and add their own env variables to it.
[/quote]

@paulyoung is this correct or is there a twist to it using `--package`?

-------------------------

paulyoung | 2022-03-28 07:24:57 UTC | #18

@cryptoschindler what you said sounds right to me.

-------------------------

paulyoung | 2022-03-28 08:49:18 UTC | #19

[quote="cryptoschindler, post:17, topic:11640"]
is there a twist to it using `--package` ?
[/quote]

The benefit of is that you can import from any file without dealing with relative file paths.

-------------------------

cryptoschindler | 2022-03-30 07:36:41 UTC | #20

After reconsidering it would still be nice to be able to distinct between `production` and `development`. For local development for example I need to specify the local canister ID, for production the mainnet ID. I don't want to maintain two different files for that so currently I use actor class parameters and switch statements, which doesn't feel very natural.

-------------------------

paulyoung | 2022-03-30 08:00:04 UTC | #21

I’m not sure what you have in mind, but the equivalent of `npx webpack --env production` could be:

1. Create `production/lib.mo` and `development/lib.mo`
2. Call `moc --package env production` or `moc --package env development`

-------------------------

jzxchiang | 2022-05-22 18:32:13 UTC | #22

This is actually a pretty important feature request, as any canister that makes inter-canister calls to an external canister (like ICP ledger, governance, or some IS20 token) will need to hardcode the canister IDs of those external canisters in their Motoko in order to call them.

And the canister IDs will be different in local net vs prod net.

I wonder if there's some pattern people use to deploy to local vs deploy to prod. Ideally, they would be one and the same but as I mentioned there are differences.

It'd be nice if there was a way in Motoko to check if the `--network=ic` flag was passed to `dfx deploy`. Unfortunately, I'm not sure if `dfx build` cares about that...

EDIT: For example, one way would be to expose environment variables in Motoko and have `dfx build` pass that in. These [environment variables](https://smartcontracts.org/docs/current/developer-docs/updates/release-notes/0.9.2-rn#new-feature-unified-environment-variables-across-build-commands) would be a good start.

-------------------------

simdi.jinkins | 2022-06-01 23:12:26 UTC | #23

Yup this is really necessary

-------------------------

paulyoung | 2022-06-07 13:01:54 UTC | #24

I realized that there shouldn’t be a need to change to a custom canister type and that you should be able to use the `packtool` field instead.

https://forum.dfinity.org/t/local-repo-motoko-imports-with-absolute-file-paths/13519/10?u=paulyoung

https://forum.dfinity.org/t/local-repo-motoko-imports-with-absolute-file-paths/13519/11?u=paulyoung

Replace `shared` in those examples with `env` or whatever you named your package.

-------------------------

RMCS | 2022-06-16 14:42:08 UTC | #25

Check this out, this does solve the issue you are describing 
in a few days a blog post is coming out that explains a lot about the setup but it comes down to generating a file with rust that is environment specific

https://github.com/Oblivion-Software/environment-file-generator

You can test the repo by pulling it and doing a `ENV=environment cargo test`

-------------------------

domwoe | 2022-06-16 14:47:58 UTC | #26

Thanks Remco!

Btw. I'm always happy to see a readme and then disappointed that is almost always the starter readme :sweat_smile:

-------------------------

RMCS | 2022-06-16 16:08:52 UTC | #27

Haha sorry I will edit it, if I have some time to spare

-------------------------

Zane | 2023-04-07 11:16:35 UTC | #28

Has there been any progress on this front? Or is hardcoding canister ids still the only way to do intercanister calls?

-------------------------

Severin | 2023-04-11 08:45:10 UTC | #29

You can define 'remote' canisters that your project doesn't control in certain environments. You can then import these canisters the default way. For an example, have a look [here](https://github.com/dfinity/internet-identity/blob/main/demos/using-dev-build/dfx.json#L12-L16)

-------------------------

Zane | 2023-04-22 10:58:50 UTC | #30

Would that be by using import "canister:canistername"? Cause it has some drawbacks, namely:
- It doesn't work with actor classes
- It bloats the canister with all the imported canisters candid interface
- The tooling support is flaky, getting it to work requires deploying the project in a specific way and even then the Motoko extension always consider the import as an error even though the code compiles and deploys fine, that error prevents the extension from highlighting other errors in the code, e.g:
![example|407x187](upload://1YA1HBv2dFpsvsVL2xslAXURCfx.jpeg)

It'd be nice if such annoyances were fixed and having a `process.env.CANISTER_ID` equivalent in Motoko would help too when one wants to use actor types.

-------------------------

Severin | 2023-04-24 08:29:59 UTC | #31

Yes, that would be with `import "canister:canistername"`. I'll ask the Motoko people how they would like to solve this.

-------------------------

claudio | 2023-04-24 12:33:55 UTC | #32

Sorry, I don't have a good answer to this.


Perhaps, just for referencing environment variables, we could allow a new form of string literal `$id` (or similar), that statically resolves to the text value of environment variable `id` when defined, and statically errors otherwise, but I don't think that would be good enough for solving the conditional canister import problem, for which you need to know the canister id **and** where to find its did file. It also seems slightly dangerous.
 
For the problem of using different canister ids for different networks, on dfx 12 at least this seems to work, though it's cumbersome.

dfx.json
```
{
  "version": 1,
    "canisters": {
      "import": {
      "type" : "custom",
      "candid" : "import.did",
      "wasm" : "",
      "remote": {
        "candid" : "import.did",
        "id": {
           "ic": "aaaaa-aa",
           "local": "rdmx6-jaaaa-aaaaa-aaadq-cai"
         }
      }
    },
    "mocenv_backend": {
      "type": "motoko",
      "args": "",
      "main": "src/mocenv_backend/main.mo"
    },
    "mocenv_frontend": {
      "type": "assets",
      "source": [
        "src/mocenv_frontend/assets"
      ],
      "dependencies": [
        "mocenv_backend"
      ]
    }
  },
  "defaults": {
    "build": {
      "packtool": "",
      "args": ""
    }
  }
}
```
Here I declare a dummy custom canister, "import", with different ids on networks "ic" and "local" and just use the following file for the main motoko canister. 

src/mocenv_backend/main.mo
```
import I "canister:import";
import Principal "mo:base/Principal";
actor {
  public query func greet(name : Text) : async Text {
    return (debug_show (Principal.fromActor(I)));
  };
};
```
It seems to build ok, passing the correct ids when building for "ic" or "local" network, as verified with `dfx build -vvvv" (for verbose output).

-------------------------

Zane | 2023-04-28 19:33:27 UTC | #33

The problem is current methods have flaws which make even basic cases tedious to deal with. 
I'll give you a practical example of a situation I'm currently in: 

I need to deploy a service which interacts with the ckBTC ledger on mainnet and to test it, I deployed a test ledger both locally and on the IC, which I'm currently using to test ledger interactions and will eventually be swapped with the actual ckBTC ledger. 
Now even if canister imports worked flawlessly, i.e no candid bloat but only used types, no extension errors, etc... I'd still be out of luck cause the Motoko ICRC1 ledger is an actor class and requires init arguments. 
So I must resort to actor types and my code ends up looking like this ( I have to repeat the same process on the frontend too btw ):
![example|673x211](upload://rQ4XfNNF2ZrEvX15YX32x9p1o06.jpeg)

If actor types had access to the canister id based on dfx.json that would already help a lot, though I'd still have to remember to toggle the remote option when switching between test and ckBTC ledger.

Generally speaking it's a shame importing actors is in such a state, it seems to be mainly found in sample code and is more of a concept than something that can be relied upon, even experienced Motoko devs advise against using it in favour of actor types.

-------------------------

skilesare | 2023-04-28 22:00:41 UTC | #34

Would something like this work for you:

File env.sh:
```
#!/bin/bash

command_type="$1"
canister_id="$2"
environment="$3"

# Assign command-line arguments to variables



# Move the appropriate file to the parent directory and rename it
if [ "$environment" == "local" ]; then
    mv /src/env/local.mo /src/env.mo
elif [ "$environment" == "ic" ]; then
    mv /src/env/ic.mo /src/env.mo
else
    echo "Invalid environment. Please provide either 'local' or 'ic'."
    exit 1
fi

# Run the appropriate dfx command
if [ "$command_type" == "build" ]; then
    dfx build "$canister_id"
else
arguments="$4"
    dfx deploy --network "$environment" "$canister_id" --arguments "$arguments"
fi
```

Then you just have some files in /src/env that are like:

```
#local.mo
module {
  public let canister_id = "rdmx6-jaaaa-aaaaa-aaadq-cai";
};

#ic.mo
module {
  public let canister_id = "25x2w-paaaa-aaaab-qackq-cai";
};
``

Your actor then just imports env.mo and the script copies it before each build/deploy.

Then you can just:
env deploy my_canister ic '(variant { myargs=null})'

Or some thing like the above....I'm not great at bash

-------------------------

ZenVoich | 2023-04-29 08:17:38 UTC | #35

Added solution in Mops `0.12.1`

1. Update mops cli
```
npm i -g ic-mops
```

2. mops.toml
```
[dependencies]
env = "./src/env-{MOPS_ENV}"
```
here `{MOPS_ENV}` will be replaced with `MOPS_ENV` env var. Default value `local`

3. 
src/env-local/lib.mo
```
module {
  public let IS_PROD = false;
};
```

src/env-ic/lib.mo
```
module {
  public let IS_PROD = true;
};
```

4. src/main.mo:
```
import {IS_PROD} "mo:env";
```


5. dfx.json
```
"packtool": "mops sources"
```

6.
Local deploy:
```
dfx deploy ...
```
or
```
MOPS_ENV=local dfx deploy ...
```

Deploy to IC
```
MOPS_ENV=ic dfx deploy --network ic ...
```

-------------------------

skilesare | 2023-04-29 11:34:51 UTC | #36

Fantastic!!!!!!!!!!!!!!!!!!!!

-------------------------

Zane | 2023-05-03 12:24:50 UTC | #37

That is a nice improvement but still doesn't seem to address the issue completely, if one also needs to interact with a canister from the frontend the same kind of logic should be replicated in the client's code too. Is it possible to expose the MOPS_ENV to node? Otherwise the only solution to solve such cases at the moment would be extending @skilesare's script to move a js file with canister ids.

-------------------------

ZenVoich | 2023-05-03 13:26:06 UTC | #38

[quote="Zane, post:37, topic:11640"]
Is it possible to expose the MOPS_ENV to node?
[/quote]

I think you can do this in js:
```js
if (process.env.MOPS_ENV == 'staging') {...}
```

----

Actually, with dfx `0.14.0` you can deploy local canisters with the mainnet canister id:
```sh
dfx deploy ledger --specified-id ryjl3-tyaaa-aaaaa-aaaba-cai
```
or
```sh
dfx canister create ledger --specified-id ryjl3-tyaaa-aaaaa-aaaba-cai
dfx deploy ...
```

-------------------------

Zane | 2023-05-03 14:29:52 UTC | #39

[quote="ZenVoich, post:38, topic:11640"]
I think you can do this in js:

```
if (process.env.MOPS_ENV == 'staging') {...}
```
[/quote]

I tried but process.env.MOPS_ENV is undefined.

[quote="ZenVoich, post:38, topic:11640"]
Actually, with dfx `0.14.0` you can deploy local canisters with the mainnet canister id:
[/quote]

I see, thing is I have 2 possible types of mainnet deploys: the ones where I interact with a test canister I've deployed and the ones where I use the actual one, so the mainnet id isn't always the same. 
Perhaps the ideal way to solve this would be to have build/deploy presets along ENV variables for Motoko. This way I could define a preset for when I own the canister on both networks and another one with the remote attribute for when I only own the local test canister and integrate with an existing one on mainnet.

-------------------------

ZenVoich | 2023-05-04 01:18:54 UTC | #40

[quote="Zane, post:39, topic:11640"]
I tried but process.env.MOPS_ENV is undefined.
[/quote]

Probably using `process.env.DFX_NETWORK` will work for you

-------------------------

Zane | 2023-05-15 13:47:52 UTC | #41

`process.env.DFX_NETWORK` only has 2 values atm as far as I know: ic and local and I wouldn't mess with it too much cause other libraries work based on that assumption.

-------------------------

cryptoschindler | 2023-05-17 15:38:18 UTC | #42

[quote="Zane, post:33, topic:11640"]
I’d still be out of luck cause the Motoko ICRC1 ledger is an actor class and requires init arguments.
[/quote]

You can [import actors using the "default" syntax](https://github.com/flowerpowerdao/power-equalizer/blob/4c701d2750d7f6609e84ffb6112d1b7f54d17c18/src/Marketplace/lib.mo#L1) even if they are actor classes, you just need to remove the init arguments from the candid file. You can create two did files, one [public](https://github.com/flowerpowerdao/power-equalizer/blob/4c701d2750d7f6609e84ffb6112d1b7f54d17c18/declarations/ledger/ledger.public.did#L223) and one [private](https://github.com/flowerpowerdao/power-equalizer/blob/4c701d2750d7f6609e84ffb6112d1b7f54d17c18/declarations/ledger/ledger.private.did#L99) one and then [use a script to point to the public one](https://github.com/flowerpowerdao/power-equalizer/blob/4c701d2750d7f6609e84ffb6112d1b7f54d17c18/package.json#L15), after you deployed the canister with the init arguments.

-------------------------

Zane | 2023-05-17 16:24:23 UTC | #43

Cool I didn't know you could do that, but I really wish such a basic task wouldn't require all these workarounds which one must first somehow discover by reading a thread and come with some amount of mental overhead, like in this case one would have to remember about the "hack" and update the private candid file everytime there are changes to the interface, not a problem if you work with a ledger, but if you interoperate with many canisters and they also happen to be updated often if gets annoying real quick.

-------------------------

cryptoschindler | 2023-05-19 13:44:46 UTC | #44

i had a conversation with @claudio around that a couple of weeks back, maybe he can provide some insights?

-------------------------

jamesbeadle | 2024-05-12 03:48:45 UTC | #45

Hey @Zane,

A year on just wondering if this is still the best way to implement environment variables within motoko?

For example I have checks in my backend canister sns generic function endpoints to make sure the caller is the SNS governance canister, that canister id would be an environment in motoko.

Any info appreciated,
James

-------------------------

Zane | 2024-05-12 16:51:16 UTC | #47

Afaik it is. For canister id checks you could also consider using the *(now not so)* new dfx feature which allows to force specific canister ids on local net.By doing so you can simply set the local SNS governance canister to have the same id as it does on mainnet and avoid the need of tying it to your environment entirely.

-------------------------

marcpp | 2024-07-11 08:16:41 UTC | #49

Thanks. Is [this](https://internetcomputer.org/docs/current/other/updates/release-notes/0.9.2-rn#new-feature-remote-canister-support) the feature you're talking about? It seems only possible to force remote canister ids, not local. Maybe you're talking about another feature?

-------------------------

