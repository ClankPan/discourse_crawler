flyq | 2021-08-13 03:50:58 UTC | #1

Is there any document about the amount of memory occupied by the basic types of Motoko canister?

such as a Nat8 array with n size, a principal, a enum, a HashMap and so on.

-------------------------

jzxchiang | 2021-08-13 05:12:37 UTC | #2

In the world of canisters and cycles... every byte counts.

-------------------------

nomeata | 2021-08-13 09:00:47 UTC | #3

No, I don’t think such a document exists. The ASCII-art and comments in https://github.com/dfinity/motoko/blob/master/src/codegen/compile.ml#L1287 is maybe the best place right now, but this is of course written with the compiler developer in mind. And there are a bunch of optimizations (e.g. small numbers are not stored as pointed-to objects, but “instead of” the pointer) that make such predictions harder.

To answer your concrete questions:

 * A `[Nat8]` with _n_ elements will take _8+4×n_ bytes.
 * A principal is represented the same way as a blog, so if it is _n_ bytes (binary representation, not the textual format), then up to  _8+n+3_ bytes.
 * An variant is 12 bytes (plus whatever is stored inside the tag). If it’s strictly an enum (i.e. only `()` stored inside), then the `()` is “free”.
 * A hashmap is more complicated, but it's not a basic type, so I’ll punt on that one :-)

-------------------------

flyq | 2021-09-11 07:17:07 UTC | #4

Thanks for your great answer, 

How about Nat32, Nat64, Nat, Int, Text, List<T>, Option ?T, Char

-------------------------

nomeata | 2021-09-11 08:03:08 UTC | #5

* `Nat32`, `Char`: 8 bytes
* `Int64`: 12 bytes
* `Nat` and `Int`: “free” if smaller than 2^30, else at least 20 bytes, up to arbitrary sizes
* `Text` and `Blob`:  up to 8+n+3 bytes.
* `opt`: “free” unless you deal with the value `?…?null`
* `List` is not a basic type. Probably 12*n

Free means that it's stored inside the containing data structure without extra allocation.

-------------------------

alexander | 2022-01-06 14:08:29 UTC | #6

[quote="nomeata, post:3, topic:6442"]
A `[Nat8]` with *n* elements will take *8+4×n* bytes.
[/quote]

Does this also apply to the RUST canister?

-------------------------

timo | 2022-01-06 17:25:16 UTC | #7

No, he's talking about Motoko only.

Just curious: why does a Nat32 occupy 8 bytes?

-------------------------

nomeata | 2022-01-06 18:29:57 UTC | #8

[quote="timo, post:7, topic:6442"]
Just curious: why does a Nat32 occupy 8 bytes?
[/quote]

Every heap-allocated object has a 1-word (4-bytes) header, followed by the payload, which, in this case, is 4 bytes:

https://github.com/dfinity/motoko/blob/bd6580188dd7584bca87365767f5a153e2f0cd74/src/codegen/compile.ml#L1617-L1628

-------------------------

alexander | 2022-01-06 20:17:20 UTC | #9

Does it specific only for motoko compiled module? I mean if I build a module using rust what size whould be for byte array ?

-------------------------

