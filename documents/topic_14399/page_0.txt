domwoe | 2022-07-20 10:32:45 UTC | #1

I've collected some best practices and considerations for developers of NFTs on the IC. We'll probably add them to the [Developer Docs](https://internetcomputer.org/docs/current/developer-docs/quickstart/hello10mins), but I'd like to ask for feedback here first.

https://pnhuq-raaaa-aaaal-aa3nq-cai.raw.ic0.app/d/considerations-for-nft-developers

-------------------------

skilesare | 2022-07-19 14:22:38 UTC | #2

This is a great list!  Thanks for putting it together.  I haven't written any reject messages in motoko yet.  Any chance we could have some best practices and patterns for rejecting messages put together?

-------------------------

domwoe | 2022-07-20 06:31:39 UTC | #3

Thank you Austin.

I'll see what I can do, but it will take a few weeks because I'm out for holidays soon. Are you talking about the inspect message feature for ingress messages? What's the use case you have mind?

-------------------------

skilesare | 2022-07-20 15:27:34 UTC | #4

Yes.

 1. You mention rejecting queries in certain instances, can inspect message do this?

2. There are probably a broader set of best practices that should be used for inspecting messages and we have very few docs/example code/patterns. I could almost see another working group that adresses these concerns, makes recommendations, and publishes software to help canister devs keep their canisters safe and operational.  We have really seen any brute force/cycle drain attacks on specific canisters yet(at least publicly) but they will come with more attention.

-------------------------

domwoe | 2022-07-21 07:00:45 UTC | #5

[quote="skilesare, post:4, topic:14399"]
You mention rejecting queries in certain instances, can inspect message do this?
[/quote]

No, `canister_inspect_message` is not invoked in for query calls. From my understanding this feature was introduced to give canister developers an opportunity to reject a message before it gets into replicated state. Query calls are performed by a single replica anyways. My suggestion in the article was to have a guard in the query method that traps or returns an error if the balance is below a certain threshold, similarly to authentication guards.

[quote="skilesare, post:4, topic:14399"]
There are probably a broader set of best practices that should be used for inspecting messages and we have very few docs/example code/patterns. I could almost see another working group that adresses these concerns, makes recommendations, and publishes software to help canister devs keep their canisters safe and operational. We have really seen any brute force/cycle drain attacks on specific canisters yet(at least publicly) but they will come with more attention.
[/quote]

Yep, I agree.

-------------------------

domwoe | 2022-07-21 07:40:14 UTC | #6

Btw. @dsarlis is working on rejecting query calls for frozen canisters. See this [PR to the Interface Spec](https://github.com/dfinity/interface-spec/pull/70).

-------------------------

Lemenio | 2022-07-26 05:19:10 UTC | #7

Hi, I see the document is quite general and in my opinions it covers a good viewpoint for NFT developers (though I'm not). Clearly, not that hard to read and thanks for gathering them.

-------------------------

