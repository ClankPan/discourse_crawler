bitbruce | 2022-02-18 01:54:06 UTC | #1

The prosperity of the ic ecosystem depends on the threshold for programming smart contracts. motoko is one of the canister programming languages and lacks some advanced programming features, which further raises the barrier for developers to enter the ic ecosystem.

* candid encoding/decoding support in Motoko.  
As motoko does not support polymorphism (https://forum.dfinity.org/t/parametric-polymorphism-and-async/1192/5), this can be solved by encoding and decoding the parameters in motoko.

* call_raw support in Motoko.  
It has been implemented (https://smartcontracts.org/docs/base-libraries/ExperimentalInternetComputer.html).

* reflection support in Motoko.  
Reflection is necessary when developing some tools or packages.

We are developing some public packages in Motoko to provide development tools, but have encountered the above obstacles, which we hope the Motoko team will improve soon.

-------------------------

heyuanxun | 2022-02-18 02:51:48 UTC | #2

Also in the process of my programming, I think there is a lack of a way to convert the file to binary as a Blob

-------------------------

PaulLiu | 2022-02-18 06:33:28 UTC | #3

[quote="heyuanxun, post:2, topic:10952"]
lack of a way to convert the file to binary as a Blob
[/quote]

Please give [ic-repl](https://github.com/chenyan2002/ic-repl) a try. It is more powerful and yet simpler than `dfx`.

-------------------------

ggreif | 2022-02-18 09:56:13 UTC | #4

[quote="bitbruce, post:1, topic:10952"]
Reflection is necessary when developing some tools or packages.
[/quote]

Before committing to such a feature I'd like to see some _very_ compelling use cases. Which functionality do you have in mind?

-------------------------

hhhhanhhh | 2022-02-18 10:05:42 UTC | #5

hi nihao woshi he yuan xun  ni ne?

-------------------------

bitbruce | 2022-02-18 10:38:56 UTC | #6

[quote="ggreif, post:4, topic:10952"]
Before committing to such a feature I’d like to see some *very* compelling use cases. Which functionality do you have in mind?
[/quote]

Middleware, framework, and toolkit developers, will use the advanced features of a language, as is the case in other languages.
A development language that wants to be widely used needs to lower the developer threshold with the help of rich frameworks and toolkits. And developing these requires advanced features like reflection.
Example.
A tool package needs to wrap an external canister interface.
(1) If you use reflection, you only need to write a few functions to do this. Otherwise, the wrapper needs to be written function by function.
(2) If the external canister interface is upgraded, the tool package written using reflection can adapt well to the changes (Just need to update the interface file); otherwise, the tool package must be upgraded simultaneously.

The candid encoding/decoding feature is also a necessity. Reference example: solidity prioritizes the release of these features, and it opens the assembly interface.

-------------------------

claudio | 2022-02-18 11:25:33 UTC | #7

Exposing Candid to/from Blob serialization is not difficult and largely already supported by the compiler, but not exposed. It would be easy to add as a dedicated construct (similar to debug_show) but harder to surface as a library.

I would be very reluctant to add reflection to the language as it breaks all sorts of properties of the language itself and introduces much overhead.

It sounds like you are mostly interested in reflecting on candid interfaces, not all Motoko features. That seems like a more reasonable ask and I can see the applications for that. However, even though canisters currently can expose their textual interfaces using a (hidden) text based query (that's how icrocks obtains them) we'd probably want something with more structure than just text for a programmatic interface.

-------------------------

ggreif | 2022-02-18 12:09:06 UTC | #8

I can imagine `raw` shared methods `public raw func endpoint(bulk : Blob)` and a dynamic analysis of the `bulk` ingress message. To do it in a nicely type-safe way (pattern-matching fashion), one would need GADTs, I suppose... (to emulate dependent pairs)

-------------------------

bitbruce | 2022-02-18 13:23:39 UTC | #9

[quote="claudio, post:7, topic:10952"]
Exposing Candid to/from Blob serialization is not difficult and largely already supported by the compiler, but not exposed. It would be easy to add as a dedicated construct (similar to debug_show) but harder to surface as a library.

I would be very reluctant to add reflection to the language as it breaks all sorts of properties of the language itself and introduces much overhead.
[/quote]

Yes, reflection can improve programmability, but it is not required. I agree that there is a trade-off.

Exposing Candid to/from Blob serialization would solve a lot of problems. Hopefully it will be supported soon.

-------------------------

PaulLiu | 2022-02-18 15:21:01 UTC | #10

[quote="ggreif, post:8, topic:10952"]
I can imagine `raw` shared methods `public raw func endpoint(bulk : Blob)` and a dynamic analysis of the `bulk` ingress message.
[/quote]

I'm thinking the `msg` in `public shared (msg) func ....` is already representing the sender's message. We now exposes `msg.caller`, but we could also expose `msg.args` for example. This would fit in with `inspect_message` for example.

Something like:
```
type WithdrawArgs = { amount: Nat; to_account: AccountId }
public shared (msg) query func inspect_message() {
  switch (try_decode<WithdrawArgs>(msg.args)) {
    case (#ok(args)) { /* do something with args */ };
    case (#err(err)) { throw(err) };
  }
}
```
So `try_decode` would be the magic system function and it must always take a type argument. What do you think?

-------------------------

bitbruce | 2022-02-19 01:15:07 UTC | #11

[quote="claudio, post:7, topic:10952"]
Exposing Candid to/from Blob serialization is not difficult and largely already supported by the compiler, but not exposed. It would be easy to add as a dedicated construct (similar to debug_show) but harder to surface as a library.
[/quote]
![image|690x248](upload://9A8o0IWJrwdQinJ8AUVYhpk0zzK.jpeg)
This application scenario is very widely used because there are times when you cannot rely on the off-chain for encoding and decoding.

For example the wallet_call function of Cycles Canister. If there is no encoding and decoding in Motoko, it can only implement proxies and cannot handle business logic (`do something (using a)` and `do something (using return)`)

-------------------------

bitbruce | 2022-02-19 01:32:54 UTC | #12

[quote="PaulLiu, post:10, topic:10952"]
```
type WithdrawArgs = { amount: Nat; to_account: AccountId }
public shared (msg) query func inspect_message() {
  switch (try_decode<WithdrawArgs>(msg.args)) {
    case (#ok(args)) { /* do something with args */ };
    case (#err(err)) { throw(err) };
  }
}
```
[/quote]

I agree that this is the solution to support polymorphism without upgrading the interface. Because, if the smart contract changes the interface, it affects composability and immutability.

Multiple use cases show that candid encoding and decoding is necessary.

-------------------------

skilesare | 2022-02-19 02:05:23 UTC | #13

@claudio  Is call_raw live in a public release yet?

-------------------------

skilesare | 2022-02-19 02:16:31 UTC | #14

I've *felt* like in the past that I wish I had some reflection available. Probably mostly when trying to write some generic helper functions that might operate over some limited set of types that I want to do specific things for.

This is all likely based on my bad practices from javascript and some old .net habits. I *know* they are bad habits, but it is still frustrating to have a language that claims to be general-purpose but doesn't let me do some things.

I wrote the candy library(which really bastardized the language - https://github.com/aramakme/candy_library/blob/main/src/lib.mo ) because I needed a way to store JSON style dynamic data structures.  I know that I shouldn't use them in general, but I also need them in specific circumstances, especially when trying to plan for future extensibility without accidentally blowing away my data store on an upgrade because I added a variant in the wrong order. With the library I'm able to reflect on the data coming in and out of my functions.  Maybe a refactoring of the library by a better programmer could make it useful for addressing the situations where you need reflection without needing to change the language.

This is mostly a collection of thoughts while I'm in a place where I'm having a bit of trouble concentrating, but I thought I'd throw the thoughts out there for discussion.

-------------------------

Motokoder | 2022-02-19 14:01:55 UTC | #15

I have found that I need to write custom serialization/deserialization functions for every entity type if I want a generic storage solution for backups. Coming from .net, this extra code is burdensome. If it's all in the name of security and/or the necessary optimization of the IC, then I am very content with the challenge, as it's tiny compared to the challenges faced by the Dfinity team. However, if the inconvenience is a matter of language maturity, then I wait patiently for future versions.

-------------------------

claudio | 2022-02-19 20:54:32 UTC | #16

Adding the serialization primitive isn't hard, but not easily done as a function because it needs to be variadic and have special typing rules (all arguments must be `shared`) (so better just a new language construct with dedicated typing rules).

Indeed @nomeata proposed and implemented something similar with a trapping deserialization (not opt returning one) here:

https://github.com/dfinity/motoko/pull/1652

What we currently have is a pair of overloaded intrinsics (prims) that are hard (but not impossible) to access unless you are a compiler writer.

Regardless, I don't think your approach would quite work because Motoko would still attempt to deserialize the blob at type `()` (for the fuction argument) and fail, before you even enter the function. Maybe if we you typed the arguments as type `Any` (not `()`) but then the message payload would need to be a single argument too, IIRC. Of course we could hack it to work but I'd like to avoid hacks as much as possilbe.

For  the particular application of `inspect_message`, I've actually got some strawman proposals sketched here:

https://github.com/dfinity/motoko/issues/2528

None are super attractive though.

-------------------------

claudio | 2022-02-19 20:57:12 UTC | #18

It'll be out with dfx 0.9.1, which is currently in internal beta testing. Hopefully next week.

If you are brave, you can pull down dfx `0.9.1-beta.0` (IIRC)

-------------------------

claudio | 2022-02-19 21:03:30 UTC | #19

I appreciate what you are saying, but, for the record, one can implement `wallet_call` with out extending Motoko with serialization primitives, all you need is the call_raw functionality that is coming with dfx 0.9.1.

See here:

https://github.com/dfinity/motoko/issues/2703#issuecomment-949603310

-------------------------

bitbruce | 2022-02-20 03:59:35 UTC | #20

“candid serialization/deserialization + call_raw” can help programmers solve a lot of problems, it can basically achieve "what rust can do, motoko can also do".
I think it is worth it if it is needed to introduce additional language rules.

-------------------------

skilesare | 2022-02-20 06:31:53 UTC | #21

I think we may just need a cbor encoder/decoder with call raw. But then again you may need the schema to decide. I don't know much about cbor. Maybe we need a candid parser and a cbor parser?

-------------------------

skilesare | 2022-02-21 04:41:53 UTC | #22

I came up with another case where I need some Candid/Cbor love inside of Motoko.

I have an on-chain wallet. It provides multi-sig functionality.  Users can call a function via call(principal, function, data) and a proposal is created.  I’d like to support showing the incoming data as readable text.  The problem is that I don’t want to have to upgrade my canister each time a new service comes online.  I’d like to let a service provider, user, or app to give me the candid.  Then I can use this candid to parse the incoming blob. For example:

This is a call to “send_dfx” on the canister zzzzz with value: 

SendArgs = {
        to : “kdkfkdjfdj”;
        fee : 20000;
        memo : 1;
        from_subaccount : null;
        created_at_time : null;
        amount : 100000000;}

I can’t do this right now because all I’ll have is a Blob.  But even if I had the candid definition I can’t do it because I don’t have a cbor -> candid conversion library.  

I’m not asking to coerce the blob to an unknown type or anything, I just want a library that lets me do it if I want.  Maybe I want to construct a known type, convert it to a binary representation, hash it, and keep an eye out for that particular function signature in the future.

I feel like I can come up with a lot of reasons why I’d want some kind of reflection/conversion.  Maybe they aren’t good reasons.

-------------------------

paulyoung | 2022-02-21 04:53:28 UTC | #23

[quote="skilesare, post:22, topic:10952"]
I can’t do this right now because all I’ll have is a Blob. But even if I had the candid definition I can’t do it because I don’t have a cbor → candid conversion library.
[/quote]

How would reflection help here? I think you’d need a CBOR parser.

[quote="skilesare, post:22, topic:10952"]
Maybe I want to construct a known type, convert it to a binary representation
[/quote]

Again, this sounds like you’d need a CBOR codec instead of reflection.

-------------------------

paulyoung | 2022-02-21 05:16:13 UTC | #24

I think you’re suggesting that reflection could be used in conjunction with some codec to generically provide implementations for those types, rather than writing them manually.

I still think that’s more of a convenience though, and otherwise the encoding/decoding is doable today if someone were to write the relevant codecs.

-------------------------

skilesare | 2022-02-21 16:14:08 UTC | #25

[quote="paulyoung, post:23, topic:10952"]
reflection
[/quote]

Yes on both accounts. For this application it is more of a parsing issue. But it would be cool.if there were a native interface and data type to do this since it is such an integral part of how everything works.

-------------------------

skilesare | 2022-09-09 19:12:49 UTC | #26

Check it!  https://forum.dfinity.org/t/icdevs-org-bounty-18-cbor-and-candid-motoko-parser-3-000/11398/30?u=skilesare. h/t @Gekctek

-------------------------

