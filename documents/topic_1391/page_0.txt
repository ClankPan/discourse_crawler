lastmjs | 2020-10-08 05:59:53 UTC | #1

I'm using the Rust CDK, but this is relevant to Motoko as well. I want to generate a timestamp or get the current date and time...how do I do this? I did a quick skim through the Motoko documentation and didn't see anything.

-------------------------

wang | 2020-10-08 07:01:54 UTC | #2

[`Time.now()`](https://github.com/dfinity/motoko-base/blob/master/src/Time.mo#L13) returns the canisters' timestamp in nanoseconds

-------------------------

morrolan | 2020-10-08 09:51:07 UTC | #3

NB that timestamp seems to be static within the context of a message/request. So can't use it to do any kind of timing within one such request.

-------------------------

skilesare | 2020-10-08 17:25:45 UTC | #4

That is what you're going to have to go with because of the distributed nature of the calculation. If your output depends on the timing of internal processes you lose determinism due to different memory management, processing, etc. You'd never be able to reach consensus.

-------------------------

skilesare | 2020-10-08 17:27:28 UTC | #5

On second thought you could split the call into two functions where the second one is gated by a certain timestep.  Microseconds is going to be tough though and you minimum unit is going to need to be blocks/second.

-------------------------

enzo | 2020-10-08 17:29:37 UTC | #6

Echoing the comments above. The timestamp is provided by the block maker and ratified by the notary group.

-------------------------

lastmjs | 2020-10-08 20:14:31 UTC | #7

Great information everyone, thanks. Does anyone have the Rust code to get the time?

-------------------------

enzo | 2020-10-08 20:17:08 UTC | #8

https://docs.rs/ic-cdk/0.1.1/ic_cdk/api/fn.time.html

-------------------------

wang | 2020-10-09 05:48:58 UTC | #9

Here's a hack to update the timestamp by `await`-ing:

```
actor Timer {
  func noop(): async () {};

  public func call(): async () {
    let a = Time.now();
    await noop();
    let b = Time.now();
  }
}
```

-------------------------

senior.joinu | 2020-10-10 19:35:08 UTC | #10

I believe this hack should be considered harmful. Why would someone use it?
I mean, one could just plus some value to the first timestamp.

-------------------------

wang | 2020-10-11 03:33:22 UTC | #11

Haha this really is a hack, it introduces the latency of another async call which could be several seconds.  I guess if you're doing really long synchronous operations and you need an updated timestamp, this could be useful...

-------------------------

Harsh | 2022-03-14 15:14:51 UTC | #12

Hi. Is this local time?

-------------------------

paulyoung | 2022-03-14 22:24:57 UTC | #13

### System time 

The canister can query the IC for the current time.

`ic0.time : () -> i64`

The time is given as nanoseconds since 1970-01-01. The IC guarantees that

* the time, as observed by the canister, is monotonically increasing, even across canister upgrades.
* within an invocation of one entry point, the time is constant.

The system times of different canisters are unrelated, and calls from one canister to another may appear to travel “backwards in time”.

***

**NOTE**

> While an implementation will likely try to keep the System Time close to the real time, this is not formally part of this specification.

https://smartcontracts.org/docs/interface-spec/index.html#system-api-time

-------------------------

jzxchiang | 2022-03-15 00:24:17 UTC | #14

Also be careful that even though the IC timestamp has nanosecond granularity, I believe it is still coarse in the sense that all messages in the same block will have the same time.

So if you request IC time in quick succession, the timestamps will have duplicates.

-------------------------

amaralc | 2022-05-23 17:45:29 UTC | #15

How can I call ic from within my canister? Can you point me to an example? Do I have to import something?

-------------------------

paulyoung | 2022-05-23 17:54:02 UTC | #16

In Motoko, `import Time "mo:base/Time";` then call `Time.now()`.

In Rust, call `ic_cdk::api::time()`.

-------------------------

icme | 2022-12-12 19:50:25 UTC | #17

A few timely questions :watch: :slightly_smiling_face:

Why was the decision made to use nanosecond precision instead of ms precision for canister facing APIs?

How reliable is the timestamp I receive in a canister during a query call where the first instruction is to call `Time.now()`? 

When I call `Time.now()` am I getting the exact nanosecond time of the entire IC (all subnets' and canister's internal times are in complete synchronicity), or at some point in the past (several nanosecond drift)?

How does the IC sync it's system time with the outside world? Does it use a single external API or consensus from several different APIs?

-------------------------

paulyoung | 2022-12-13 00:06:33 UTC | #18

[quote="icme, post:17, topic:1391"]
Why was the decision made to use nanosecond precision instead of ms precision for canister facing APIs?
[/quote]

I can only speculate that this is less restrictive and allows for more use cases.

I personally didn’t appreciate it until I worked in a sector that relied on such precision.

How practical it is on the IC given the other properties of how time works is probably a different matter 🙂

***

[quote="icme, post:17, topic:1391"]
How reliable is the timestamp I receive in a canister during a query call where the first instruction is to call `Time.now()`?

When I call `Time.now()` am I getting the exact nanosecond time of the entire IC (all subnets’ and canister’s internal times are in complete synchronicity), or at some point in the past (several nanosecond drift)?
[/quote]

My previous post in this thread might answer some of this:

https://forum.dfinity.org/t/timestamp-or-date-in-rust-or-motoko/1391/13?u=paulyoung

-------------------------

