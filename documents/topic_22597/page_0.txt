Alexandra | 2023-09-06 14:06:29 UTC | #1

## Summary

We would like to announce that we started looking into the canister backup/restore problem. We are currently in the design phase and are looking for your input on:

* Importance of the problem for you and your use cases. This would help us to prioritise this relative to other problems.
* Your thoughts on the potential snapshot-based solution presented here.
* Your suggestions of alternative solutions.

## Background & Problem statement

Currently, there is no easy way on the Internet Computer to backup data in the event of corruption or data loss, and to restore it by reverting to a previous state. Developers must manually implement a way to serialise the state of the canister, download it off-chain, and then manually upload it if they need to restore the data. This approach is error-prone, not scalable, expensive, and cannot be easily done in a reasonable amount of time.

To address this issue, the IC should provide a way for canisters to take snapshots of their state and restore them when necessary. Additionally, it would be ideal if the data could be exported and imported to and from a local environment, but this would require further engineering effort and can be implemented in future iterations.

By solving this problem at the protocol level, controllers can fix a broken canister by rolling back to a previously saved snapshot in the event of a bug. This is a common problem encountered, especially when upgrading a canister.

## Potential solution

At this stage, our current idea is to concentrate solely on developing a prototype that offers endpoints for capturing on-chain snapshots of canister states and loading the snapshots to canisters. A snapshot will naturally consist of both the [stable memory](https://wiki.internetcomputer.org/wiki/IC_Smart_Contract_Memory) and the heap.

Of course, the initial iteration will have a few constraints, which will help to make the problem as straightforward as possible while providing an improved developer experience.

* Only controllers have the authority to take a snapshot and restore it.
* While it is not explicitly enforced, creating a snapshot only after stopping the canister is recommended. This follows the same principle as with upgrading a canister, as making sense of the callbacks may not be possible.
* During the first iteration, only one snapshot per canister will be allowed, and taking a new snapshot will replace the old one. In later iterations, we may expand this feature to enable multiple snapshots per canister.

Below, you can find an API sketch for interacting with the IC when there is a need to take a snapshot or recover the state from a snapshot identified by `snapshot_id`.


```
type timestamp = nat;

type bytes = nat;

type snapshot = record {

    id: snapshot_id;
    
    taken_on: timestamp;
    
    label: opt text;
    
    total_size: bytes;
    
    // Checksum for correctness verification.
    
    checksum: blob;

};

service: {

    // Takes a snapshot of the given canister's state.
    
    take_snapshot: (canister_id, label: opt text) -> (snapshot_id);
    
    // Loads the snapshot to the canister identified by `canister_id`.
    
    load_snapshot: (snapshot_id, canister_id) -> ();
    
    // List the snapshots of the canister.
    
    list_snapshots: (canister_id) -> (vec snapshot);
    
    // Deletes the snapshot with the given ID.
    
    delete_snapshot: (snapshot_id) -> ();

}
```

## Future outlook

In the future, it should be possible to incorporate support for more features on top of the existing proposal. Potential additional features that could be implemented include:

* Endpoint for downloading a snapshot of a canister to the local environment.
* Endpoint for uploading a snapshot from a local environment to the IC.
* Ability to create new canisters based on snapshots.

These new features are useful in scenarios such as downloading snapshots to a local environment for debugging or backup purposes, restoring canister states from an off-chain backup or creating new canisters with the data from previously taken snapshots.

However, implementing these features would require considerable engineering effort, including developing tools for manipulating local snapshots, debugging and inspecting data from a snapshot.

##  What we are asking the community

Please let us know if the problem of backup/restore is important for you. It would be great if you could share your use case and requirements. We would also like to know if the snapshot-based solution would work for you.

We welcome any alternative proposals that you may have. Thank you for taking the time to share your thoughts with us.

-------------------------

Alexandra | 2023-09-06 13:57:09 UTC | #2

Adding people involved or interested in the discussions: @ielashi, @bogdanwarinschi, @dsarlis, @Manu, @ulan, @roman-kashitsyn.

-------------------------

ZenVoich | 2023-09-07 11:27:20 UTC | #3

Adding link to a Motoko library with on-chain backup/restore functionality https://github.com/ZenVoich/backup

-------------------------

Alexandra | 2023-09-18 10:43:31 UTC | #4

@hpeebles, @saikatdas0790, @skilesare you expressed interest before in this topic. Do you have any feedback? We would appreciate to hear what you think.

-------------------------

diegop | 2023-09-18 14:21:05 UTC | #5



-------------------------

diegop | 2023-09-18 14:21:33 UTC | #6



-------------------------

saikatdas0790 | 2023-09-18 17:30:19 UTC | #7

This looks great. We would definitely be using this.

Would the snapshot be limited to the same subnet or are there plans to also support backups to a different subnet than the source?

-------------------------

josephgranata | 2023-09-18 18:39:04 UTC | #8

@Alexandra,

First thanks to you and the DFINITY Leadership for finally doing something to alleviate this huge problem, one that will affect any successful DAPP.

I would ask you to add two things to your prototype:

- An easy template or API call to put a canister into maintenance mode, with a corresponding Web Page that alerts people that this is about to happen, and when it will be over.
- An API or web based scheduler for backup and restore operations, so that the backup and corresponding maintenance can be done during hours where it would affect the least users of the DAPP.

Thanks, and please do consider me for beta testing this feature.

Joseph

-------------------------

josephgranata | 2023-09-18 18:46:08 UTC | #9

Thanks for this Motoko based backup solution, it helps for sure!

-------------------------

skilesare | 2023-09-18 19:03:27 UTC | #10

Being able to pull down our wasm+heap would be a huge quality of life improvement.  My current process for things like our governance canister is to query out all the records so that I have them incase the unimaginable happens.  If I actually lose everything we'd have a huge hydration issue on our hands and would likely be down for a while.  This would save us time and give us peace of mind.

-------------------------

b3hr4d | 2023-09-19 12:13:53 UTC | #11

Hello everyone,

Firstly, I'd like to express my gratitude to the team and the community for continually pushing the boundaries to make development on the Internet Computer easier and more secure every day. Your work is highly appreciated.

I am the mind behind b3wallet, a decentralized wallet with a unique focus on multi-signer and multi-chain functionalities. Our platform aims to provide a user-friendly, secure, and trustless environment for digital assets across various blockchains. If you're interested in experiencing these features, feel free to test the wallet at [b3wallet.live](https://www.b3wallet.live/).

### Why Backup is Crucial in Decentralized Wallets

In a fully decentralized ecosystem like b3wallet, trust is not bestowed but earned through cryptographic proof and consensus. One of the most sensitive aspects is the management of wallet controllers and signers, particularly in shared or multi-user wallets. Having a reliable backup and restoration mechanism is not just a nice-to-have but a crucial component that can significantly enhance user trust and system reliability.

### My Initial Idea

Initially, my approach involved the system canister saving essential wallet configuration details like signers and controllers. Upon saving this data, the system canister would then create the wallet canister and set the signers and controller at first. If a wallet has a single signer, the controller would be the user themselves, and they can take care of the restoration process if a disaster happens. However, if multiple signers are provided, the controller would be the system canister. This design allows for a streamlined restoration process wherein the system canister can authenticate and verify the signers before restoring the wallet to its original state, where multiple signatures are needed to confirm a transaction, just like before!

### After Seeing This Feature Proposal

After reading about your proposed snapshot-based backup and restore functionality, I am thrilled. This feature could simplify the backup and restoration process dramatically for projects like mine and many other developers facing similar challenges. It would allow us to automatically take a snapshot of critical wallet information at the time of creation and use that for any future restoration needs.

Your proposed API sketch aligns well with what I'd need. The feature to list snapshots would be particularly useful for administrative purposes. The constraints you've laid out also make sense for an initial implementation.

### Closing Thoughts

I look forward to seeing this feature go from proposal to implementation. It has the potential to solve a common pain point in decentralized application development on the IC. I also welcome any community thoughts on how to expand or refine this feature further.

Thank you for taking the time to consider my input.

Best regards,
Behrad

-------------------------

jamesbeadle | 2023-09-19 12:47:57 UTC | #12

I just want to be able to add a property to an existing type and be able to set a default parameter when I upgrade and not lose all my data. 

Currently I try to avoid making data structure changes and ulimately efficiencies are lost.

Snapshot would be great for when things go wrong.

-------------------------

TusharGuptaMm | 2023-09-19 13:32:16 UTC | #13

This can be a great help and it is a critical work item on our product roadmap, given that data integrity holds immense significance for platforms like RuBaRu.

Our use case involves taking regular, automatic data snapshots and archiving them for future use in case of data recovery needs. This is a part of Disaster Management (DM), ensuring that we have a backup strategy in place.

Will evaluate how much we can utilize out of the box.

-------------------------

ZenVoich | 2023-09-19 14:11:57 UTC | #14

I would like to see this as a system call, maybe on the management canister, which can only canister controller call.

Under the hood the backup function will:
1. Call `preupgrade` on a canister(do not save to actual canister)
2. Return blob snapshot of entire stable memory(which probably populated with extra stuff from step 1)

Restore function:
1. Controller uploads snapshot blob data to management canister
2. Management canister loads this data to stable memory
3. Management canister calls `postpgrade` on a canister

Everything related to serialization/deserealization will already be implemented in the `postupgrade`/`preupgrade` functions, so this will require minimal effort from developers.

Back up in interval, off-chain backup, 3rd party services, etc.. can be implemented on top of these functions.

-------------------------

Alexandra | 2023-09-20 07:42:16 UTC | #15

Thank you for the feedback! At the current stage, we limit it to the same subnet. But as I mentioned in the post, there is a lot of work that can be added on top of this first iteration, so there is a lot of potential.

-------------------------

Alexandra | 2023-09-20 07:58:57 UTC | #16

Thank you for the feedback! The potential solution that I presented to the community gives control to the developers of when the backup and restore happens. So you will be able to decide when you need to do a backup or when you want to restore the previously saved data. We do recommend to stop a canister before starting this process.

>Thanks, and please do consider me for beta testing this feature.

I appreciate your help, we will inform you.

-------------------------

saikatdas0790 | 2023-09-20 08:17:45 UTC | #17

Can we get rid of this footgun of developers having to manually stop/start canisters during upgrades/backups?

If it's inadvisable, why have it at all?

-------------------------

Alexandra | 2023-09-22 11:56:40 UTC | #18

@saikatdas0790  We recommend stopping because that's the safest, but if you have a canister designed to have zero downtime, you can take a backup without stopping first, similar to upgrading. So it's up to the developer to decide based on the canister or use case they have.

This problem is orthogonal to the topic presented here. For example, to allow the different use cases and make it safer for the average case, we could push this restriction at the tooling level (not at the protocol level), and one has to explicitly specify that the canister should not stop. However, this will not be handled by this feature.

-------------------------

Alexandra | 2023-09-22 12:17:28 UTC | #19

@ZenVoich The API from this post will be added to the management canister interface and is only available to the controllers. So it covers the requirements that you are asking for.

However, the second part of your message describes one way of downloading and uploading data that could be integrated with the canister but will not be included in the first iteration. It's part of the future outlook.

-------------------------

Alexandra | 2023-09-22 12:22:19 UTC | #20

Thank you, everyone, for taking the time to share your feedback with us! We are glad to hear that adding this feature improves the developer experience. The team will keep you updated!

-------------------------

Gabriel | 2023-09-24 15:06:33 UTC | #21

if you code in rust and use stable-structures https://github.com/dfinity/stable-structures you can already download the SM and put it back.  The only issue AFAIK is that if there's an update call when download/restore happens the data can get corrupted.

 I know @ielashi is working on some sort of locking mechanics but he can share more details.

-------------------------

ielashi | 2023-09-25 07:19:48 UTC | #22

We are considering a feature on `ic-stable-structures` to take snapshots of stable structures, which would be part of the library, be completely in user-space, and not require protocol support. That feature has not been scoped yet, but it's certainly an option to introduce in the future if there's enough demand for it.

-------------------------

levi | 2023-09-27 20:26:34 UTC | #23

Hi, canister backups and snapshots are a valuable feature for writing canisters.

The [canister_tools](https://docs.rs/canister-tools/0.1.4/canister_tools/index.html) rust library can create snapshots of the global-variables in the heap for backup and restore purposes. Controllers can create snapshots, download in chunks, and even upload a snapshot in chunks and then load the uploaded snapshot back onto the global variable. At the same time making a simple upgrade strategy for global-heap-variables. The user can choose the serialization format for the snapshots, default is [bincode](https://docs.rs/bincode/1.3.3/bincode/index.html). The library works with the virtual memories feature of the ic-stable-structures library so stable-structures can be used alongside global-variables in the heap. The library also creates public controller methods for reading and writing the virtual stable-memories. 

https://forum.dfinity.org/t/rust-library-canister-tools-for-simple-global-data-upgrades-data-snapshots-download-and-upload-and-some-handy-tools/23356

-------------------------

lastmjs | 2023-10-20 14:26:26 UTC | #24

As we develop Azle and Kybra, especially considering their beta status, and especially when dealing with StableBTreeMap, I feel very uncomfortable as developers seem to be on their own with their StableBTreeMap upgrades. I'm always afraid something terrible will go wrong because of a mistake in Azle or just a misunderstanding of StableBTreeMap versions under-the-hood.

Seems like snapshots would give me a lot of peace of mind, as love canister upgrades would not be fatal. Of course backups are already possible, but IMO one of the worst problems with extra-protocol backups are that you then have to entrust the data, which could be sensitive, to some controller's machine.

-------------------------

diegop | 2024-02-29 18:36:17 UTC | #25



-------------------------

Gabriel | 2024-04-15 12:49:29 UTC | #26

Hey @ielashi 

Any updates on this?

-------------------------

Alexandra | 2024-04-16 16:19:42 UTC | #27

Hi @Gabriel,  

We are currently in the process of implementing this feature. Soon, we will release a version of the SDK for developers who would like to test and experiment with the feature. We will keep you updated and let you know once the SDK release is available.

-------------------------

e274426380 | 2024-06-06 08:33:52 UTC | #28

Hi, I was wondering when this backup/restore feature goes live, do I need to clean the data in the current canister to use this feature?

-------------------------

Alexandra | 2024-06-25 12:24:52 UTC | #29

Hi @e274426380 , could you please elaborate on what you mean by 'cleaning the canister's data '? Are you referring to any specific actions that need to be taken on your end to utilize this feature effectively? 
This feature, which is under implementation, will provide canisters a functionality ingrained in the system. Controllers can choose to take a snapshot of the canister data or restore previously saved data to the canister's state. Once the feature is available, any canister can use it as is.

-------------------------

e274426380 | 2024-06-27 10:45:00 UTC | #30

I learned from canister-tool that if you want to use canister-tool to backup restore data, you need to install the canister-tool method in pre-upgrade first, so this process is necessary to clean up the originally saved data when you use canister-tool for the first time.
So I'm worried that the upcoming backup system will have the same problem.

-------------------------

modclub | 2024-07-15 15:00:56 UTC | #31

@Alexandra Is there a timeframe when this is expected to be released to the public?

-------------------------

berestovskyy | 2024-08-14 15:03:55 UTC | #32

Sorry for the delay. The last code bits were just merged. We're enabling the feature on a test subnet and in `dfx`. We'll update you once the feature is ready for testing...

-------------------------

e274426380 | 2024-08-15 09:05:00 UTC | #33

Exciting Features.
For a long time, every new project party needed to put some effort into creating their own backup system over and over again.

-------------------------

