ZenVoich | 2023-04-20 11:22:58 UTC | #1

Currently if we want to access current canister id in nested modules we need to pass canister id as init arg:

```motoko
shared ({ caller }) actor class Canister(canisterId : Principal) {...
```


Would be helpful if we could access the canister id like this:
```motoko
shared ({ caller; canister }) actor class Canister() {...
```
here `canister : Principal`

What do you think?

-------------------------

ggreif | 2023-04-20 11:41:40 UTC | #2

[quote="ZenVoich, post:1, topic:19525"]
What do you think?
[/quote]

If you want the self reference of the resulting actor, we have a syntax for that:
```
actor class Client() = self {
  ...
}
```
_EDIT_: Ah, I see you want the creator of the new canister. I don't think that is conveyed by the protocol. But you can probably get hold of the controllers list.

-------------------------

ZenVoich | 2023-04-20 12:03:16 UTC | #3

[quote="ggreif, post:2, topic:19525"]
If you want the self reference of the resulting actor, we have a syntax for that:

```
actor class Client() = self {
  ...
}
```
[/quote]

In this case I cannot get canister id anywhere other than inside that actor class.

For example I want pass current canister id to class or func from another file:
```motoko
// a.mo
class A1(x : actor{}) {};
class A2(x : Principal) {};
class A3(x : () -> Principal) {};

// main.mo
actor class Client() = self {
  let a1 = A1(self); // error "cannot use self before self has been defined"
  let a2 = A2(Principal.fromActor(self)); // error "cannot use self before self has been defined"

  func getCanisterId() : Principal = Principal.fromActor(self);
  let a3 = A3(getCanisterId); // error "cannot use getCanisterId before self has been defined"
}
```


[quote="ggreif, post:2, topic:19525"]
Ah, I see you want the creator of the new canister. I donâ€™t think that is conveyed by the protocol. But you can probably get hold of the controllers list.
[/quote]

No, creator is `caller` in that example.

-------------------------

ggreif | 2023-04-20 12:39:00 UTC | #4

I recall discussing this `cannot use self` error with @claudio earlier. IIRC we concluded that this is a _definedness analysis_ bug (infelicity) in Motoko, and the `self` binding should be available in the initialisation code of the actor.

-------------------------

timo | 2023-11-19 06:23:56 UTC | #5

Are there plans to change this?

Even if self is not defined, the error for a3/A3 in the example above is surprising.

-------------------------

claudio | 2023-11-20 00:26:46 UTC | #6

It's not really surprising, just conservative. The class might apply the function, dereferencing self before defined.

But I would like to make it easier to get the self principal.

The simplest might be to just add extra syntax for this particular case: principal_from_actor <exp>. Then the definedness analysis can distinguish this from an ordinary library function and treat it specially.

-------------------------

timo | 2023-11-20 07:39:19 UTC | #7

[quote="claudio, post:6, topic:19525"]
The class might apply the function, dereferencing self before defined.
[/quote]

Yes, I thought the error would happen there, in the class, if the class applies the function directly in the constructor. Probably that's too hard to check, hence we don't allow to even pass the function to the class.

-------------------------

