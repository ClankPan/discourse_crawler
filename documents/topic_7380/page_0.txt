jzxchiang | 2021-09-18 21:32:50 UTC | #1

I find the code difficult to read when I'm dealing with a bunch of `Option` and `Result` values...

-------------------------

paulyoung | 2021-09-19 01:14:51 UTC | #2

One option is to use `chain` which represents a monadic bind and allows you to sequence operations of the same type:

https://github.com/dfinity/motoko-base/blob/9f6f005e39513c85d14f2e0638cdd8b090d7cc8c/src/Result.mo#L66-#L92

-------------------------

nomeata | 2021-09-19 08:37:02 UTC | #3

For option types (but, unfortunately, not result) you can use [`do ? { … }` blocks](https://sdk.dfinity.org/docs/language-guide/language-manual.html#exp-do-opt).

-------------------------

jzxchiang | 2021-09-19 18:22:29 UTC | #4

Yeah, the exclamation mark operator in `do ? {}` makes code way way more readable, but as you said it doesn't support `Result` return values, which is a bummer.

I also kinda wish that after an `assert Option.isSome(val)` the variable `val` would automatically be "unwrapped" by the compiler and treated as `?val` from thenceforth, kinda like what TypeScript does.

Right now, I have to do a switch statement:
```
switch (caseInfo) {
  case (null) { assert false };
  case (?caseInfo) {
    // do something with caseInfo
  };
};
```
Just this adds a nested switch layer.

-------------------------

skilesare | 2021-09-19 21:51:08 UTC | #5

The null case specifically is begging for some syntactic sugar.

Something like the following would be nice for retiring something else if you hit a null and chaining unwrapped otherwise.

myMap.get(id)?(defaultValue).myproperty;

-------------------------

jzxchiang | 2021-09-19 23:39:54 UTC | #6

Exactly I was hoping for something like that. Or even with ! instead of ?

-------------------------

nomeata | 2021-09-20 06:10:12 UTC | #7

If you assert or return anyways, you can do 
```
let caseInfo = switch (caseInfoOpt) {
  case (null) { raise Error… };
  case (?caseInfo) { caseInfo };
};
// do something with caseInfo
```

It's annoying that `assert false` doesn't have a suitable return type for that, but the upcoming `Debug.trap` improves that.

-------------------------

jzxchiang | 2021-09-20 07:12:46 UTC | #8

I'm assuming you mean `throw` instead of `raise`.

This is a neat trick, but the issue is that I can't turn it into a private helper function because `throw` only works in an async context.

Interesting about `Debug.trap`. I see it in the [docs](https://sdk.dfinity.org/docs/base-libraries/debug#trap) but I guess it still hasn't shipped with the latest version of Motoko yet? It should work since the return type is `None`, as you suggested.

-------------------------

rossberg | 2021-09-20 07:29:29 UTC | #9

[quote="skilesare, post:5, topic:7380"]
myMap.get(id)?(defaultValue).myproperty;
[/quote]

You could write this as
```
Option.get(myMap.get(id), defaultValue).myProperty
```

-------------------------

nomeata | 2021-09-20 07:37:46 UTC | #10

[quote="jzxchiang, post:8, topic:7380"]
still hasn’t shipped with the latest version of Motoko yet
[/quote]

I think it's in the latest Motoko release, but not yet the latest dfx release.

-------------------------

nomeata | 2021-09-20 08:08:49 UTC | #11

[quote="jzxchiang, post:8, topic:7380"]
This is a neat trick, but the issue is that I can’t turn it into a private helper function because `throw` only works in an async context.
[/quote]

You can make the helper function `async`, and call it with `await`, can’t you? I think that’s the “official” solution for abstracting over code that `throw`s or `await`s.

-------------------------

jzxchiang | 2021-09-21 06:53:36 UTC | #12

Yeah I suppose so, although I'd like not to incur the 2-5s wait time for updates but I guess that's what `Debug.trap` will be for.

-------------------------

paulyoung | 2021-09-23 02:16:07 UTC | #13

A while back I sketched out a version of `do` notation using a function that used `try`/`catch` under the hood.

In addition to the `async` overhead I also ran into this limitation: https://forum.dfinity.org/t/parametric-polymorphism-and-async/1192

-------------------------

