qwertytrewq | 2023-09-10 22:52:26 UTC | #1

How to add cycles on canister creation (constructor call by Motoko)?

ChatGPT claims "Motoko, the programming language for the DFINITY Internet Computer, does not provide a direct mechanism within the code to add or allocate cycles during the creation of a canister."

To function calls cycles are added by pairing `Cycles.add` and `Cycles.accept`. But, apparently, `Cycles.accept` can't be run from actor creation code. So, how to do this?

-------------------------

qwertytrewq | 2023-09-10 23:11:27 UTC | #2

Accordingly ChatGPT, "As of my last knowledge update in September 2021, when you create a new canister on the DFINITY Internet Computer using Motoko code, the amount of cycles allocated to the canister is determined by the settings provided in your deployment configuration. This configuration is typically specified using the DFX (Dfinity eXtended) tool or the Internet Computer's governance system, and it's not directly controlled within the Motoko code."

So, if the canister is not presented in `dfx.json`, but is created directly from Motoko code, how is the amount of cycles allocated determined?

-------------------------

claudio | 2023-09-12 17:38:19 UTC | #3

IIRC you just call Cycles.add() before calling the class constructor. These cycles don't need be accepted explicitly, and are just added to the new canister.

There is an example here:

https://github.com/dfinity/examples/blob/3f0765f514e5b61bcb7e9aaa5a04a9a67e271c02/motoko/classes/src/map/Map.mo#L31

-------------------------

