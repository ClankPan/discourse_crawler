cryptoschindler | 2022-03-20 19:18:33 UTC | #1

I get this error when I'm trying to call an async class method from within a `for` loop of another async actor method. 
Can anyone shed some light on this?

@claudio @diegop

-------------------------

nomeata | 2022-03-20 21:56:43 UTC | #2

Does it only happen if the for loop makes a larger number of iterations?

Can you share the code?

-------------------------

cryptoschindler | 2022-03-21 09:16:16 UTC | #3

I just tested this in the REPL and yes, you are correct. When you iterate 114 times, the Error pops up again. 

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3936417316

-------------------------

nomeata | 2022-03-21 22:01:24 UTC | #4

You are probably hitting the problem that the output queue of a canister is bounded. When it is full, the canister cannot issue more calls, and the system will synchronously fail [`ic0.call_perform`](https://smartcontracts.org/docs/interface-spec/index.html#system-api-call). These synchronous errors were added at point when Motoko already supported message calling, and there was no obvious way to add user-controlled error handling, besides treating it like any other out-of-resource error (e.g. memory allocation failure), and trap.

Traps cannot be caught directly, but indirectly if you wrap it another call (e.g. `try await async { … }`). Or maybe you can avoid the limit by sending only one message per call (plus one self-message), by adding a `await async ();` line that effectively yields to the scheduler.

-------------------------

cryptoschindler | 2022-03-22 11:03:14 UTC | #5

Thanks, this is very insightful!

-------------------------

cryptoschindler | 2022-08-04 13:54:51 UTC | #6

Out of curiosity, what does `synchronously fail` mean? Are all the iterations up until the failure commited to state? So can this "brute force" method be used to get as many messages out there as possible, and on failure - by catching the error - I add the last iteration back to the queue? And then call the method again, hoping that the some of the messages in the queue were processed and there is room for more?

When I have a method like this, what is the limiting factor when I await on each iteration? Can the computation span multiple rounds?

-------------------------

cryptoschindler | 2022-08-24 07:11:51 UTC | #7

@nomeata bump 😇 and 20 chars

-------------------------

nomeata | 2022-08-24 16:03:25 UTC | #8

With the raw system api, yes, you could do that: Send out calls until [`ic0.perform_call`](https://internetcomputer.org/docs/current/references/ic-interface-spec/#system-api-call) returns “ok”, and then return.

From Motoko, though, a synchronously failing call invariable causes a trap, which rolls back all the work done so far in this thread.

> When I have a method like this, what is the limiting factor when I await on each iteration? Can the computation span multiple rounds?

Every `await` is its own message, so can happen at a later round – is that what you mean?

-------------------------

cryptoschindler | 2022-08-25 20:52:12 UTC | #9

Yes, that's what I meant. Thanks!

-------------------------

