jamesbeadle | 2024-05-26 13:34:56 UTC | #1

When making a transfer within my app the user authorises a payment like so:

let principal = auth.identity?.getPrincipal();
        console.log(principal)
        if (principal) {
          let subaccount: Uint8Array = principalToSubAccount(principal);
          console.log(subaccount);
          try {
            let transfer_result = await transfer({
              to: {
                owner: Principal.fromText(
                  process.env.FOOTBALL_GOD_BACKEND_CANISTER_ID ?? "",
                ),
                subaccount: [subaccount],
              },
              fee: 100_000n,
              memo: new Uint8Array(Text.encodeValue("0")),
              from_subaccount: undefined,
              created_at_time: BigInt(Date.now()) * BigInt(1_000_000),
              amount: 10_000_000_000n,
            });
            console.log(transfer_result);
          } catch (err: any) {
            console.error(err.errorType);
          }
        }

I've checked the log of this sub account on the frontend

![image|630x71](upload://2F3eEZgOEkYJiWkGaogQZVOP1bW.png)

and it matches the transactions on the ledger canister

![image|690x244](upload://alGpwmLum2TnoVTz2yzHut9TPDX.png)


I then ran a check on the backend to see what the callers principalToSubAccount is to ensure they match:
![image|690x34](upload://t0pWZJ4gDRKKB84SpYbqlx5hKwH.png)

However, they don't:

![image|690x37](upload://6b4fuwDDSdUmhjwMqAzGcFNCsIB.jpeg)

Any idea where I've gone wrong?

-------------------------

jamesbeadle | 2024-05-26 13:45:32 UTC | #2

Ah so it appears that I was using a hashing algorithm to convert principalToSubaccount on my backend and I think I just need to pad the principal using motoko.

-------------------------

jamesbeadle | 2024-05-26 18:16:00 UTC | #3

Ok so I was able to get a balance on the account by converting the 29 byte principal to 32 by using the following function (provided by @skilesare).

```

  private func principalToSubaccount(principal : Principal) : Blob {
    var sub = Buffer.Buffer<Nat8>(32);
    let subaccount_blob = Principal.toBlob(principal);

    sub.add(Nat8.fromNat(subaccount_blob.size()));
    sub.append(Buffer.fromArray<Nat8>(Blob.toArray(subaccount_blob)));
    while (sub.size() < 32) {
    sub.add(0);
    };

    Blob.fromArray(Buffer.toArray(sub));
  };
```

-------------------------

skilesare | 2024-05-26 21:40:18 UTC | #4

Pretty sure I borrowed this from @quint or someone else. H/t to whoever I collected it from along the way.

-------------------------

