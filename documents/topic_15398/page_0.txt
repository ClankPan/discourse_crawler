saikatdas0790 | 2022-09-13 08:43:30 UTC | #1

https://internetcomputer.org/docs/current/references/ic-interface-spec/#ic-canister_status

The `canister_status` when queried by a canister for itself is rejected. This is because this call is only allowed for principals that are a controller for this canister. However, this behavior is unintuitive and restrictive.

Please consider enabling one of the following:
- Making this data publicly callable instead of requiring a controller to call
- Adding the canister's principal to the list of controllers by default on canister creation. That way the canister can choose to expose this on itself rather than the management canister making this public

The reasons for this ask are:
- Being able to query one's own controllers and using them for access control (admin access) to certain methods being exposed
- Being able to query one's own memory usage to determine if nearing memory usage limits and need to create additional canisters. The current landscape of things require having to track and update this value internally to be able to do this
- Adding canisters to a cycle monitoring canister or external service or even to an NNS Dapp wallet and being able to view the cycle balance to decide if the canister requires a top up or not without having to add the monitor's principal as a controller

The above is still manageable when you have a single canister architecture but is absolutely required when building a multi canister architecture using dynamically created canisters.

Thoughts?

-------------------------

bogwar | 2022-09-13 14:07:30 UTC | #2

How about always allow the `canister_status` call from the canister itself, without explicitly adding it to its own controller list? Would that suffice? It doesn't deal with the first bullet point in the reasons list, but I think it suffices for the remaining two.
This change would be rather simple to implement.

-------------------------

saikatdas0790 | 2022-09-13 14:11:24 UTC | #3

Yes, that would be perfect. That wouldn't require a change to any existing API as well.
:metal:

-------------------------

bogwar | 2022-09-15 17:33:28 UTC | #4

I run the proposal internally through the teams that are affected: we'll try to get this done soon.

-------------------------

mparikh | 2022-09-15 23:49:10 UTC | #5

Can you also do the same for updatesettings?

-------------------------

jzxchiang | 2022-09-16 01:03:51 UTC | #6

Wasn't a variant of this proposed under this [RFC](https://forum.dfinity.org/t/rfc-standardising-how-smart-contracts-expose-state/8544)? I think that proposal never got much traction for whatever reason.

-------------------------

saikatdas0790 | 2022-09-16 03:29:07 UTC | #7

The scope of that RFC, looks quite large as compared to the ask here.

This thread is just about making the canister_status of a canister available to itself. 

It can then choose if it wants to expose it to the outside world using a separate function implemented on itself.

But yeah, standards are always a good thing. :slight_smile:

-------------------------

bogwar | 2022-09-16 11:23:04 UTC | #8

Makes sense. We'll add that to the list.

-------------------------

bogwar | 2022-09-16 11:24:15 UTC | #9

As @saikatdas0790 said that RFC is much bigger in scope -- we're still tracking it and plan to improve on that side. The changes required here are significantly smaller so we'll try to move fast on those.

-------------------------

bogwar | 2022-10-07 13:55:55 UTC | #10

Good news: the next replica version will allow a canister to read its own status.  

However,  due to security concerns, we have not implemented the analogous relaxation that would allow a canister to update its settings. This change would make auditing canisters somewhat more involved since a canister which appears to have no controller may at some later point change its controller list. 

We may revisit this point in the future.

-------------------------

saikatdas0790 | 2022-10-07 15:43:08 UTC | #11

Thank you. Will keep an eye out for the proposal :slight_smile:

-------------------------

