timo | 2023-12-28 16:10:44 UTC | #1

Example: say there is web app wallet hosted on the IC at <canister id>.icp0.io and a user uses it with II. Then the wallet funds will be held by the unique principal that the II generates for the given origin (domain). Say the user still has access to the II but the web wallet has disappeared. For example, the canister ran out of cycles or was overwritten. Then what exactly are the options that the user has to recover the funds?

I understand that the web wallet could be set up on another canister and there are ways to configure alternative origins so that two domains give the same principal. But I suppose that requires control of both domain, doesn't it? Are there any options for recovery if the owner of original canister id is not cooperating?

-------------------------

peterparker | 2023-12-29 06:35:25 UTC | #2

[quote="timo, post:1, topic:25960"]
Are there any options for recovery if the owner of original canister id is not cooperating?
[/quote]

I can think of hacky ways, like tweaking the local host configuration and booting a local SSL server so that localhost becomes the non-cooperating domain name, and running a custom dapp that would perform the required actions.

Another hack would be to use the browser debugger on the non-cooperating domain, assuming the related dapp is still live, to run some custom code by fetching libraries from CDNs.

In both cases, these are advanced workarounds that would require code, and I'm not sure if they would work.

[quote="timo, post:1, topic:25960"]
alternative origins so that two domains give the same principal. But I suppose that requires control of both domain, doesn’t it?
[/quote]

Yes, it requires control and also a configuration file that needs to be deployed at the root. Moreover, it is worth noting that at the moment, you cannot use an alternative origin from a domain that is not `ic0.app|icp0.io`. So in your scenario, where the wallet would, for example, be hosted on `hello.com`, you cannot derive an origin from it to `world.com`.

[quote="timo, post:1, topic:25960"]
I understand that the web wallet could be set up on another canister
[/quote]

Agree that works fine. For example, on Juno, each developer gets one canister to rule all their projects, and their address to send ICP is not their principal derived by the domain name but rather this particular canister ID. This canister can be managed by the developer only, and they can also add additional controllers to it.

-------------------------

timo | 2023-12-28 21:04:36 UTC | #3

[quote="peterparker, post:2, topic:25960"]
Moreover, it is worth noting that at the moment, you cannot use an alternative origin from a domain that is not `icp0.app|internetcomputer.org`. So in your scenario, where the wallet would, for example, be hosted on `hello.com`, you cannot derive an origin from it to `world.com`.
[/quote]

Can I have two origins, A and B, where both are canister domains on icp0.io, and B is an alternative origin for A? And they can be asset canisters serving different frontends but users get the same principal when logging in at them? And if A is the canonical origin and B is the alternative origin and I want to add C into the group then I need control of A, not B?

-------------------------

peterparker | 2023-12-29 06:35:02 UTC | #4

[quote="peterparker, post:2, topic:25960"]
`icp0.app|internetcomputer.org`
[/quote]

There was a mismatch in my answer. It is not `icp0.app|internetcomputer.org` but `ic0.app|icp0.io`. 

Precisely `^https:\/\/[\w-]+(\.raw)?\.(ic0\.app|icp0\.io)$` ([documentation](https://internetcomputer.org/docs/current/references/ii-spec/#client-authentication-protocol))

[quote="timo, post:3, topic:25960"]
Can I have two origins, A and B, where both are canister domains on [icp0.io](http://icp0.io), and B is an alternative origin for A? And they can be asset canisters serving different frontends but users get the same principal when logging in at them?
[/quote]

Yes.

[quote="timo, post:3, topic:25960"]
And if A is the canonical origin and B is the alternative origin and I want to add C into the group then I need control of A, not B?
[/quote]

Yes. Users get principal derived from A in this scenario, therefore yes you need to control A.

Note btw. that you can add up to max. 10 derivation origin I think.

-------------------------

timo | 2023-12-29 09:06:26 UTC | #5

Would it be possible to write a canister A in a way that the user can specify the id of B on a per-login basis?

-------------------------

peterparker | 2023-12-29 09:50:58 UTC | #6

Not sure what you mean.

-------------------------

b3hr4d | 2023-12-29 09:58:07 UTC | #7

I'm curious: Is it possible to calculate the principal for a specific identity based on its associated domain?

-------------------------

peterparker | 2023-12-29 10:11:50 UTC | #8

A principal is basically a public key so, I would assume you would have to know the private key as well, not just the domain but, guts feeling. @frederikrothenberger can probably answer this better than me.

-------------------------

timo | 2023-12-29 14:22:16 UTC | #9

[quote="peterparker, post:6, topic:25960, full:true"]
Not sure what you mean.
[/quote]

Nevermind. The answer is likely "no". I suppose the II looks in certified assets provided by canister A to see if B is configured as an alternative origin. My question was if the mechanism was dynamic and flexible "enough" so the we could craft a canister A which keeps a list of alternative origins per user. So that the user with principal P can call A and define his own alternative origin B. And then if II can check if the dynamically configured B for user P matches the origin where the user attempts to log in at. If that was possible then the user could recover from the disappearance of B by permissionlessly configuring a new B.

-------------------------

peterparker | 2023-12-29 14:38:54 UTC | #10

[quote="timo, post:9, topic:25960"]
Nevermind. The answer is likely “no”. I suppose the II looks in certified assets provided by canister A to see if B is configured as an alternative origin.
[/quote]

Gotcha. Indeed II looks for a `./.well-known/ii-alternative-origins` (e.g. https://nns.ic0.app/.well-known/ii-alternative-origins) file in canister A that contains a defined list (max 10 entries) of known hosts that are allowed for derivation.

-------------------------

timo | 2023-12-29 14:50:10 UTC | #11

It would work if the user had his own personal A in which he configures B and if B disappears then configures a new B.

-------------------------

frederikrothenberger | 2024-01-03 16:01:13 UTC | #12

@timo: This seems like a misuse of the alternative origins feature.

Rather than having a lot assets stranded in no longer maintained applications (and their related principals), I think we should move to a different model of asset management entirely: I.e. have the user provide a principal (preferrably fully under the users control) and provide that to the dapp to handle valuable assets using transaction approval.

See also the work done by the Identity WG on the signer standards: https://github.com/dfinity/wg-identity-authentication/blob/main/topics/signer_standards_overview.md

-------------------------

ruslanhuman | 2024-01-03 20:29:46 UTC | #13

Happy New 2024 Yeras Cryptolovers :santa:

-------------------------

timo | 2024-01-06 21:20:38 UTC | #14

In my application the relying party would be a wallet frontend (hosted in a canister) and the target canister would be a token ledger (or multiple ones). The wallet is an every-day wallet, not a large-value store, so going through the signer for single-transaction approvals does not seem feasible. Neither from the user perspective, having the extra context switches, nor from the developer perspective, having to make the signer understand every single kind of canister interaction that the wallet wants to do. Hence, it would boil down to the signer signing a delegation to the wallet frontend so the wallet can act on the signer's behalf. At this point the whole approach becomes similar to the alternative origin approach, the signer representing the canonical origin and the relying party the alternative origin. The difference would just be the the last step in the delegation chain is created in canister code instead of by II. Do I understand that right?

-------------------------

frederikrothenberger | 2024-01-08 07:47:52 UTC | #15

> The wallet is an every-day wallet, not a large-value store, so going through the signer for single-transaction approvals does not seem feasible.

Could you elaborate further on why that is? The signer interaction would not make a transaction more cumbersome, rather the confirmation screen (that is common anyway) will be shown by the signer instead of the wallet front-end.
The idea is that you would use the signer interface even for small amounts, i.e. raise the base-line security for transactions in general.

I do concede that it might be a tad slower because the signer needs to load. But I hope we can address most of that with better caching.

> having to make the signer understand every single kind of canister interaction that the wallet wants to do.

That's the nice thing about [ICRC-21](https://github.com/dfinity/wg-identity-authentication/blob/main/topics/icrc_21_consent_msg.md) and [ICRC-33](https://github.com/dfinity/wg-identity-authentication/blob/main/topics/icrc_33_call_canister.md). Together, they allow calling canisters that the signer does not have a specific integration with, while still presenting the user with a meaningful consent screen.

So supporting many ledgers (or any other canister for that matter) would not increase effort on the dev side. There is an initial effort to introduce another agent for transaction approval,  but after that it's just like using `agent-js`. Or at least that's the goal. ;-)

>Hence, it would boil down to the signer signing a delegation to the wallet frontend so the wallet can act on the signer’s behalf.

Without restrictions, this is extremely dangerous. To be secure, either we would need to derive different principals, just as II does (and you end up with the same issue), or it has to be scoped to specific canisters, as suggested [here](https://github.com/dfinity/wg-identity-authentication/issues/33), which would not allow interactions with ledgers.

-------------------------

timo | 2024-01-08 21:11:36 UTC | #16

[quote="frederikrothenberger, post:15, topic:25960"]
The signer interaction would not make a transaction more cumbersome, rather the confirmation screen (that is common anyway) will be shown by the signer instead of the wallet front-end.
[/quote]

How exactly would that look like in a browser? Say for example I want to use the signer with II. I suppose the app would in one tab and the signer would open in another tab, then I log in with II and confirm. Maybe the signer can stay open for subsequent confirmations. For the user there remains a switch between tabs, which I want to avoid. Can the signer appear in a pop-up that is not a tab? Can it be in an iframe? Not sure how the user can verify that he is indeed interacting with the signer. Is it possible to make this all seamless?

[quote="frederikrothenberger, post:15, topic:25960"]
Could you elaborate further on why that is?
[/quote]

Suppose we could make it as seemless as the typical Ok-Cancel confirmation pop up windows that are presented directly by an OS. The ones that appear on top of all other windows and which I can confirm just by a key-press on Return. I would argue it is still too much of an interruption to the user. Think of a file system explorer where you drag and drop files around and you have to confirm every single move. In my application there are many task that appear to be more of "administrative" nature than to be an actual transfer and they all have to be signed. Open a subaccount, create an allowance, adjust an allowance in balance or adjust its expiration date or delete it, transfer between own subaccounts, change the mapping from allowance to subaccount (possible in HPL), etc. Moreover, in the case of HPL even queries have to be signed. Refresh your balances, find allowances given to you by others, etc. require signatures. Non-interactive balance updates in the background would not be possible in the signer model for that ledger.

ICRC-21 requires support by the target canister, here the ledgers. I have an ICRC-1 wallet that works for all ICRC-1 tokens. Not all of them have ICRC-21 built in and some will never have. With the signer model I can now longer support them.

ICRC-21 requires an additional call to the target canister, turning one call into two. This adds another 3 seconds of latency to the whole transaction. In HPL for example I am going to great length to shave off even 1 second of latency. Adding 3 would not be acceptable. The two calls also add load to the target canister. If I want to design a system that can receive 10k ingress requests per second from end users, now I have to design it for 20k. It essentially doubles the cost of the whole system by doubling the required number of subnets. I understand that the additional update call will be replaced by a replicated query in the future by I guess that does not completely remove the effects on latency and load.

With a direct call the wallet frontend can submit the call and the user can already do the next thing while the wallet is polling for the response in the background. With the signer model the signer would be polling. I am not sure how I would do that to let the user continue in the actual app while the signer is polling and then inform the user if something went wrong. 

Overall, the signer model seems to make sense if I want to try out a new wallet that I don't trust on the assets that I usually manage with my trusted wallet. But for a reference wallet that is supposed to attract newcomers I don't think it is the right model.

The trust assumption for my case is as follows: the user trusts a specific open-source wallet version. This means if a new version appears the user does not want to be forced to use it (trust it). Switching to a new version should be opt-in. So old versions need to be kept available. Stronger speaking, the user must be protected against the wallet or specific versions of it disappearing.

In conclusion I am left with the options to use a delegation, or an alternative origin, or to not use II.

[quote="frederikrothenberger, post:15, topic:25960"]
To be secure, either we would need to derive different principals, just as II does (and you end up with the same issue), or it has to be scoped to specific canisters, as suggested [here](https://github.com/dfinity/wg-identity-authentication/issues/33), which would not allow interactions with ledgers.
[/quote]

I wanted to have a specific signer only for this one wallet application. It would be scoped to the application, not to the target canisters. It would be used with different versions of the wallet application, but not with any other apps.

-------------------------

frederikrothenberger | 2024-01-09 08:13:22 UTC | #17

>> The signer interaction would not make a transaction more cumbersome, rather the confirmation screen (that is common anyway) will be shown by the signer instead of the wallet front-end.
> 
> How exactly would that look like in a browser? Say for example I want to use the signer with II. I suppose the app would in one tab and the signer would open in another tab, then I log in with II and confirm. Maybe the signer can stay open for subsequent confirmations. For the user there remains a switch between tabs, which I want to avoid. Can the signer appear in a pop-up that is not a tab? Can it be in an iframe? Not sure how the user can verify that he is indeed interacting with the signer. Is it possible to make this all seamless?

Suppose you signed in using Internet Idenitity, then whenever you need to approve something II would appear in a pop-up showing the transaction approval screen directly (as II should remember the previous interaction, so no need to select identity again). Once approved the call will be executed an the pop-up will close again.

> Think of a file system explorer where you drag and drop files around and you have to confirm every single move. In my application there are many task that appear to be more of “administrative” nature than to be an actual transfer and they all have to be signed. Open a subaccount, create an allowance, adjust an allowance in balance or adjust its expiration date or delete it, transfer between own subaccounts, change the mapping from allowance to subaccount (possible in HPL), etc. Moreover, in the case of HPL even queries have to be signed. Refresh your balances, find allowances given to you by others, etc. require signatures. Non-interactive balance updates in the background would not be possible in the signer model for that ledger.

Note that transaction approval is intended for security critical transactions and _not_ for mundane things. So I would recommend a more measured approach here and use the delegation in conjunction with the signer integration. I.e. have _two_ principals that have access to the *same* HPL ledger account:
1. the delegation principal: it should be restricted to only allow administrative tasks. I.e. the following actions would _not_ be allowed using the delegation identity:
   * Increase allowance of an external party to receive additional funds.
   * Transfer funds directly to an _external_ party
   * Anything else that would allow an attacker to bypass transaction approval to gain tokens
2. the signer identity: unscoped identity, but requires transaction approval

That way, users are still protected with transaction approval against someone trying to steal funds, but can do the administration in a fast and non-obtrusive way. After all, it is still a financial application so I think having extra security is warranted even if it adds 2 seconds for the pop-up to load.

Regarding ICRC-21 support: yes, it needs to be seen if it gains enough traction to be widely adopted.

> The trust assumption for my case is as follows: the user trusts a specific open-source wallet version. This means if a new version appears the user does not want to be forced to use it (trust it). Switching to a new version should be opt-in. So old versions need to be kept available. Stronger speaking, the user must be protected against the wallet or specific versions of it disappearing.

In that case, the **user** must own the front-end assets. I.e. have one front-end canister *per user*. You could do the following: have an index / orchestrator canister, with a very basic front-end that redirects users to their respective front-end canister and provisions new ones for new users. Users also need to be able to access their front-end canister directly.

Whenever a new version of the front-end is published, the user front-end canister prompts the user to do the upgrade. Only the user (the controller) can authorize that and change the assets. In a sense, the upgrade model would then become similar to that of native applications where users have to install code explicitly on their machine.

> 
> I wanted to have a specific signer only for this one wallet application. It would be scoped to the application, not to the target canisters. It would be used with different versions of the wallet application, but not with any other apps.

This is exactly what II does, no? It gives you a principal scoped to a specific application (URL). So it is stable across versions but only available to that particular dapp.

-------------------------

timo | 2024-01-09 12:13:29 UTC | #18

[quote="frederikrothenberger, post:17, topic:25960"]
Suppose you signed in using Internet Idenitity, then whenever you need to approve something II would appear in a pop-up showing the transaction approval screen directly (as II should remember the previous interaction, so no need to select identity again). Once approved the call will be executed an the pop-up will close again.
[/quote]

I see, so the signer will be integrated into II. Makes sense, I thought at first that it would be a separate thing.

[quote="frederikrothenberger, post:17, topic:25960"]
In that case, the **user** must own the front-end assets. I.e. have one front-end canister *per user*. You could do the following: have an index / orchestrator canister, with a very basic front-end that redirects users to their respective front-end canister and provisions new ones for new users. Users also need to be able to access their front-end canister directly.
[/quote]

If the user has his own frontend canister then indeed the problem with the changing principal goes away.

What if the index/orchestrator redirects to one of multiple (for multiple versions) fixed frontend canisters that are not per-user, that each exist only once for all users. Say the index/orchestrator is immutable, blackholed. That's where the principal comes from when the user logs in with II into the orchestrator. Than the orchestrator passes the session key to the frontend that the user has chosen (or signs a delegation to another session key that the chosen frontend has generated).

-------------------------

frederikrothenberger | 2024-01-09 12:22:02 UTC | #19

>What if the index/orchestrator redirects to one of multiple (for multiple versions) fixed frontend canisters that are not per-user, that each exist only once for all users. Say the index/orchestrator is immutable, blackholed. That’s where the principal comes from when the user logs in with II into the orchestrator. Than the orchestrator passes the session key to the frontend that the user has chosen (or signs a delegation to another session key that the chosen frontend has generated).

Yes, that works too. However, you will be stuck with the issue that if the orchestrator goes away, the user won't have access to the identity anymore.

Also, the orchestrator should probably not be blackholed as it integrates with external services, which will almost certainly change over time.

-------------------------

dfxjesse | 2024-01-12 13:54:07 UTC | #20

[quote="peterparker, post:2, topic:25960"]
Yes, it requires control and also a configuration file that needs to be deployed at the root. Moreover, it is worth noting that at the moment, you cannot use an alternative origin from a domain that is not `ic0.app|icp0.io`. So in your scenario, where the wallet would, for example, be hosted on `hello.com`, you cannot derive an origin from it to `world.com`.
[/quote]

Why is there a restriction on only allowing canister ID's as the canonical origin? Is there plans to get rid of this, seems it would be useful to choose your origin?

-------------------------

peterparker | 2024-01-12 14:29:19 UTC | #21

The restriction was originally in place for security reasons. However, with the support of custom domains by the BN, it is now possible to extend this mechanism to include them while keeping the security level. @frederikrothenberger has even already outlined an idea for it. Nevertheless, since the stakeholders have not given this feature any priority, it may or may not be implemented in the future. I cannot tell. I've tried to move the topic multiple times last years.

-------------------------

dfxjesse | 2024-01-12 14:39:47 UTC | #22

I would very much like to have the possibility of custom domain canonical origins, It would open up a good few possibilities for our dApp such as backups etc.

I'm not sure how I could try push this feature forward other than voicing my support for it here. But I hope to see progress and the restriction removed.

-------------------------

peterparker | 2024-01-12 14:47:35 UTC | #23

Note that you don't need to convince me; For instance, the inability to generate the same principal on customdomain.com and www.customdomain.com is quite awkward, to say the least.

-------------------------

dfxjesse | 2024-01-12 14:53:09 UTC | #24

It seems it would be a quick update maybe just removing the regex checks in this file:

https://github.com/dfinity/internet-identity/blob/main/src/frontend/src/flows/authorize/validateDerivationOrigin.ts#L7

-------------------------

peterparker | 2024-01-12 14:58:45 UTC | #25

Actually this regex cannot just be removed, there is a certain level of security to keep in place (I don't have all the details in mind). This was discussed / reviewed with the security team.

-------------------------

peterparker | 2024-01-12 14:59:01 UTC | #26

That was also my first idea :wink:.

-------------------------

dfxjesse | 2024-01-12 15:01:26 UTC | #27

Ye that makes sense, It's never as easy as it seems. Maybe @frederikrothenberger can advise on his idea in this scenario and / or the security situation surrounding this.

-------------------------

frederikrothenberger | 2024-01-18 16:12:16 UTC | #28

@dfxjesse: Yes, we can remove the regex, _if_ we make sure in other ways that the `/.well-known/ii-alternative-origins` asset is served from a canister (and hence has passed asset certification). This is a requirement by product security because they fear that identities might get stolen if we allow this asset to be served from web2.

But we have a solution for that: we can rely on the boundary nodes custom domains feature to verify that the URL is indeed backed by a canister.

I have (again) surfaced this issue to II product management so that it can hopefully be addressed in the upcoming sprints.

-------------------------

dfxjesse | 2024-01-12 15:32:18 UTC | #29

Thanks for your response,

Our custom domain is backed by a canister as I presume many others are on the IC (IE not on web2). So if there is some way the boundary nodes can verify this and we can remove that regex would be awesome.

Thanks for raising it with the II product management, I'll keep an eye on this.

-------------------------

