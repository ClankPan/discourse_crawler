lwshang | 2022-11-28 17:25:30 UTC | #1

I'm happy to announce that [Rust CDK 0.6.8](https://crates.io/crates/ic-cdk) is out.

This version includes [support for a couple of new IC features](https://github.com/dfinity/cdk-rs/blob/main/src/ic-cdk/CHANGELOG.md#068---2022-11-28):

## Canister Timers

Now, you can set timers for canisters. This feature allows a more flexible way to schedule later works. Compared with the existing `heartbeat` mechanism, Canister Timers allows:

* set both one-time and repeating jobs;
* set multiple jobs with different time intervals;
* cancel timers set before

Check the [example](https://github.com/dfinity/cdk-rs/blob/main/e2e-tests/canisters/timers.rs) for how to use it.

## Composite query

Tagging a function with `#[query(composite = true)]` will make it a composite query.

Composite queries can call other query functions (both queries and composite queries), but cannot be called in replicated mode.

For more details about composite queries, please check these forum threads:

* https://forum.dfinity.org/t/proposal-composite-queries/15979
* https://forum.dfinity.org/t/inter-canister-query-calls-community-consideration/6754

---

Huge thanks to @AdamS who implemented both features!

Enjoy building canisters on IC with the improved Rust CDK!

-------------------------

ulan | 2022-11-28 18:13:56 UTC | #2

Please note that composite queries are available only for local development and testing. They are not released on the mainnet yet.

-------------------------

Gekctek | 2022-11-28 20:37:05 UTC | #3

Great work!
In general what is Dfinity's plan for Motoko/Rust features. Do you guys try to do them at the same time?

-------------------------

lwshang | 2022-11-28 21:11:03 UTC | #4

We attempt to support a new feature in Rust/Motoko before the feature is enabled on the IC mainnet. So that canister developers can develop/test with new functionalities early and deploy as soon as they are available on the mainnet.

Rust/Motoko CDK are developed separately. When a CDK implements support for a new feature, it will be released right away. There is no release syncing between these two CDK.

-------------------------

saikatdas0790 | 2022-11-29 05:23:16 UTC | #5

Any thoughts on which ic-state-machine-tests commit we should be referencing to be able to test these features in our integration tests?

-------------------------

Severin | 2022-11-29 07:56:17 UTC | #6

Intuitively I would go for the commit that is either deployed on your subnet or in your current dfx version

-------------------------

saikatdas0790 | 2022-11-30 07:11:42 UTC | #7

@Severin 
So, I'm trying to figure out how to make this work.

If this is my subnet, how would I figure out the release commit hash?
https://dashboard.internetcomputer.org/subnet/o3ow2-2ipam-6fcjo-3j5vt-fzbge-2g7my-5fz2m-p4o2t-dwlc4-gt2q7-5ae

I wasn't quite sure how to figure the commit for the dfx version as well. I'm on DFX 0.12.1, btw

I also tried to make it with the latest blessed replica release which is this:
https://dashboard.internetcomputer.org/release/997ab2e9cc49189302fe54c1e60709abfbeb1d42

But I'm getting the following errors when building my Cargo project

![image|557x500](upload://9WH6l8insyZDyT5QwWo8yNLhT6v.png)


Any thoughts?

P.S. This is the commit that builds without breaking for me right now
https://github.com/dfinity/ic/commit/f7e3c96a2be92186718f6a1e67eea37bf3252c00

-------------------------

Severin | 2022-11-30 07:15:08 UTC | #8

[quote="saikatdas0790, post:7, topic:16904"]
If this is my subnet, how would I figure out the release commit hash?
[/quote]

You go to [this page](https://dashboard.internetcomputer.org/governance?s=100&topic=TOPIC_SUBNET_REPLICA_VERSION_MANAGEMENT) on the dashboard and Ctrl+F for your subnet's ID. Using that, I see that the latest version update proposal for your subnet is [this one](https://dashboard.internetcomputer.org/proposal/93423). From there you can see that it's running replica version 0cbb2e9c7683f4cd91f77e8ab0d65f6cb90c0387 right now.

[quote="saikatdas0790, post:7, topic:16904"]
I wasn’t quite sure how to figure the commit for the dfx version as well.
[/quote]
Go to the [dfx release notes](https://internetcomputer.org/docs/current/developer-docs/updates/release-notes/) and scroll down to the section 'Dependencies' for your current release. For 0.12.1 it shows a replica commit of dcbf401f27d9b48354e68389c6d8293c4233b055.

As for the Cargo error: I haven't tried to work with state machine tests ever, so I don't think I can help with that. @roman-kashitsyn would be the right person to ask

-------------------------

saikatdas0790 | 2022-11-30 08:26:01 UTC | #9

I managed to make it work.

For future readers, the trick is to ensure the protocol buffers compiler `protoc` and additional include files are installed.

I installed it from [here](https://grpc.io/docs/protoc-installation/#install-pre-compiled-binaries-any-os)

-------------------------

lastmjs | 2022-11-30 16:27:52 UTC | #10

It would be nice to somehow indicate to developers when a feature is truly live. I usually have to understand a combination of cdk-rs version, dfx version, and IC replica version deployed to subnets before understanding when a feature is truly live.

For example, cdk-rs now has timers, but which dfx version has it (hypothetical question, I've been told dfx 0.12.1), and does that mean it's live on the IC?

-------------------------

Severin | 2022-11-30 16:57:15 UTC | #11

Good idea. We should add version requirements to these release notes for such features. I'll let the team know

-------------------------

diegop | 2022-11-30 19:43:30 UTC | #12

[quote="lastmjs, post:10, topic:16904"]
For example, cdk-rs now has timers, but which dfx version has it (hypothetical question, I’ve been told dfx 0.12.1), and does that mean it’s live on the IC?
[/quote]

Good point, @lastmjs

-------------------------

josephgranata | 2023-04-05 20:52:48 UTC | #14

Just a quick question to confirm this is now live on the IC correct?

Thanks.

-------------------------

Severin | 2023-04-06 07:05:03 UTC | #15

Yes, that's correct.

-------------------------

josephgranata | 2023-04-06 18:17:19 UTC | #16

Thanks for that quick reply, good news @Severin!

-------------------------

NS01 | 2023-07-15 20:11:14 UTC | #17

I've been hitting a brick wall for the last few days with some Rust code which seemed to stop, discard data and then re-run.. all without throwing an error! Turns out a function which was being called by a timer was hitting the computation/ instruction limit. 

This was apparent when calling the function via a manual update method (which would trap and return the error). I'm interested if it's possible to handle/ log such situations with a timer function?

-------------------------

