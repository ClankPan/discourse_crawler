levi | 2021-09-15 17:10:47 UTC | #1

Roman mentions this in the community-conversation, this is an unsafe api, two get_mut calls within the same public-method can corrupt the memory. 
![image|690x376](upload://y8NF2nwwm3LX0EIxhWKZ2pYGOoi.jpeg)
![image|690x387](upload://ppNJeNqtf2tFkW5YBRFgpwn1uOF.jpeg)

thread_local! With the Cell and RefCell is the way to go.

-------------------------

paulyoung | 2021-09-16 00:31:53 UTC | #2

There are several examples that are using the unsafe approach. The cycles wallet too.

https://github.com/search?q=org%3Adfinity%20storage%3A%3Aget_mut&type=code

-------------------------

paulyoung | 2021-09-16 00:08:32 UTC | #3

FYI @roman-kashitsyn

-------------------------

paulyoung | 2022-01-17 07:12:53 UTC | #4

I couldnâ€™t find the video but I did find this blog post:

https://mmapped.blog/posts/01-effective-rust-canisters.html

-------------------------

rckprtr | 2022-01-18 20:06:18 UTC | #5

https://www.dfinitycommunity.com/infinityswap-the-is20-token-standard-tested-and-interoperable/#iccdk-storage-bug-fix

> 1. `IS20 fixes two other vulnerabilities found in prior implementations of token standards. There is a bug in the commonly used ic_cdk storage that can lead to memory corruption through dangling references. Please see the appendix for more details.`

Linked bug: https://github.com/dfinity/cdk-rs/issues/73

Infinity Swap Impl: https://github.com/infinity-swap/ic-helpers/blob/main/ic-storage/ic-storage-derive/src/lib.rs


```
thread_local! {
    static store: Rc<RefCell<#ident>> = Rc::new(RefCell::new(#ident::default()));
}
```

-------------------------

rckprtr | 2022-01-18 20:08:10 UTC | #6


Example usage in their IS20 token:
https://github.com/infinity-swap/IS20/blob/main/src/token/src/state.rs

-------------------------

