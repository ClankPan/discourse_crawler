nolma | 2023-11-23 01:41:33 UTC | #1

I followed this guide: https://medium.com/dfinity/how-to-deploy-your-first-canister-using-the-nns-dapp-c8b75e01a05b for deploying a canister and was able to deploy 3 canisters successfully.

As part of my token deployment params, I marked my nns principal as being the owner of the token with a starting balance. I can see the balance is correct in the Candid UI.

![Screen Shot 2023-11-22 at 8.38.49 PM|690x225](upload://y7EFm645OiODO0MOL3l73UmAKAA.png)

I want to interact with the canister so I click login, expecting to be prompted to connect with my nns account.

Instead I get an Invalid Derivation Origin error:

```
Invalid Derivation Origin
"https://6japz-gyaaa-aaaag-accza-cai.raw.icp0.io" is not a valid derivation origin for "https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io"
Error details:
An error occurred while validating the derivationOrigin "https://6japz-gyaaa-aaaag-accza-cai.raw.icp0.io": Failed to fetch
```

![Screen Shot 2023-11-22 at 8.40.11 PM|435x500](upload://2xvrjXCRsT9draepRiAFSjWWuXT.png)

How can I connect my nns account to login to the Candid UI?
Are there settings I need to set when deploying the canister?

Thanks!

-------------------------

frederikrothenberger | 2023-11-23 10:48:57 UTC | #2

Hi @nolma 

You are hitting a special case here which is related to principal derivation on Internet Identity. Normally Internet Identity hands out different principals for each application. There is a feature however, to have two applications with different URLs use the same principal. It is called alternative origins and is documented [here](https://internetcomputer.org/docs/current/references/ii-spec/#alternative-frontend-origins).

Apparently, candid UI now supports that feature (very useful for debugging), which means it is able to use the same principal as you would have on your own front-end given you grant it the permission to do so. The error you see here, is because you are currently _not_ granting it the permission.

To grant it the permission, simply host a file in your canister using the path `/.well-known/ii-alternative-origins` and add the following content:
```json
{
  "alternativeOrigins": ["https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io"]
}
```

Be aware of the consequences though: This allows the Candid UI canister `a4gq6-oaaaa-aaaab-qaa4q-cai` to use the same principals as you get on your front-end (https://6japz-gyaaa-aaaag-accza-cai.raw.icp0.io). It can therefore impersonate your front-end, which would be really bad if it were to turn malicious (I don't know who controls `a4gq6-oaaaa-aaaab-qaa4q-cai`). **Remove the entry from the `/.well-known/ii-alternative-origins` file before associating anything of value with the user principals from your front-end.**

You should also be able to deploy your own candid UI to mainnet if you don't trust `a4gq6-oaaaa-aaaab-qaa4q-cai`. @Severin: What would be the easiest way to do so?

-------------------------

Severin | 2023-11-23 12:32:27 UTC | #3

The easiest way to deploy your own Candid UI is to clone [this folder](https://github.com/dfinity/candid/tree/master/tools/ui), delete `canister_ids.json` (so dfx doesn't try to deploy to the 'official' Candid UI, and then deploy the project for yourself

-------------------------

Samer | 2023-11-23 19:35:24 UTC | #4

@nolma 

If your canister is written in Motoko, here's what you need to add for it to work with Candid UI login.
https://github.com/Web3NL/candid/blob/test-authenticated-calls/tools/ui/target_test_canister/main.mo

If you are not using the `http_request` function for fast certified queries, you can add the `upgrade = ?true;` field in the response and serve the `alternativeOrigin` file from `http_request_update`, see example

-------------------------

