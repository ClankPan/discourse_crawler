skilesare | 2023-05-22 02:21:01 UTC | #1

I ran across this on one of @quint 's slides in motoko BootCamp:

![image|690x154](upload://mXa7gfUZ1OJQ4eavxKENMoVqsOc.jpeg)

I tried it out and, sure enough, another tool for the tool box. I had no idea.  https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=4058751971

Anyone else have any patterns that they use that make their lives easier?  I'm embarrassed to say that I still feel like I don't understand the full power of these even two years into using Motoko.

When I look at the list at https://internetcomputer.org/docs/current/motoko/main/language-manual#patterns-1, I feel that there are things like maybe I have more to learn.

I guess the above is the object pattern and was sitting there all along, but I needed an example to really understand it.  I'm still not really sure what Annotated Pattern is.

Who has some cool examples of patterns?

I found the "or" pattern handy when I wanted to merge the behavior of the #Ledger and # ICRC1 types in the Origyn NFT:

```

transaction_id := switch(details.token){
        case(#ic(token)){
          switch(token.standard){
            case(#Ledger or #ICRC1){
              //D.print("found ledger");
              let checker = Ledger_Interface.Ledger_Interface();
              .....

```

It would be great to have a thread we can point people to that are just learning pattern matching so they have some good examples to look at.

-------------------------

Gekctek | 2023-05-22 03:46:16 UTC | #2

I was also unaware. Very cool pattern matching

-------------------------

icme | 2023-05-22 04:12:03 UTC | #3

[quote="skilesare, post:1, topic:20134"]
`case(#Ledger or #ICRC1){`
[/quote]

This is a nice trick. The only gotchya is that since there are still two potential variant matches, Motoko won't allow you to deconstruct any of the variants that were matched inside that specific `or` case statement (i.e. if there's a value inside one or both of those variants, you need another switch to narrow it down and extract the value).

-------------------------

quint | 2023-05-22 08:25:55 UTC | #4

You can find the slides here:
https://motoko.academy/custom/1

-------------------------

rossberg | 2023-05-22 08:36:57 UTC | #5

[quote="icme, post:3, topic:20134, full:true"]
[quote="skilesare, post:1, topic:20134"]
`case(#Ledger or #ICRC1){`
[/quote]

This is a nice trick. The only gotchya is that since there are still two potential variant matches, Motoko won’t allow you to deconstruct any of the variants that were matched inside that specific `or` case statement (i.e. if there’s a value inside one or both of those variants, you need another switch to narrow it down and extract the value).
[/quote]

It's a bit more nuanced. It totally allows you to _deconstruct_ as deep as you want to go inside an or-pattern. It merely doesn't (currently) allow you to _extract_ a value. For example,
```
case (#aNumber(42) or #something(_, {field1 = ?"text"} or {field2 = 100}))
```
is totally supported, but
```
case (#aNumber(n) or #aPair(n, _))
```
is not, as you cannot bind a variable inside an or-pattern. Supporting this has always been on the list of features to come eventually, though, and is allowed in many other languages with pattern matching.

-------------------------

