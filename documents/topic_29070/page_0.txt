skilesare | 2024-03-29 13:47:44 UTC | #1

I know that queries called from outside the IC are currently free.  What about when called from another canister? If my canister calls icrc1_balance_of to an ICRC1 token, is that token being charged since it is being called 'in update mode'?  I suspect the answer is no, but would like confirmation.

-------------------------

dsarlis | 2024-04-03 16:33:48 UTC | #2

It will be charged as it happens in replicated mode.

-------------------------

skilesare | 2024-04-03 18:06:28 UTC | #3

Is there any way to detect and revoke queries from other canisters? (Principal ID length?)

I'm wondering if there should be some kind of ingress-only query where you know you can revoke with an inspect message....this way other canisters just wouldn't be able to call the methods which would drastically reduce the exposure to cycle drain attacks for certain types of endpoints.

-------------------------

dsarlis | 2024-04-04 07:39:44 UTC | #4

> Is there any way to detect and revoke queries from other canisters? (Principal ID length?)

I don't think the principal ID length would do it but you can (as a proxy) check for the last byte. If you read the [spec](https://internetcomputer.org/docs/current/references/ic-interface-spec#principal), you'll see that byte 0x01 should signal system generated ids (that includes canister ids) while byte 0x02 signals self-authenticating ids (i.e. user ids).

 > I’m wondering if there should be some kind of ingress-only query where you know you can revoke with an inspect message…this way other canisters just wouldn’t be able to call the methods which would drastically reduce the exposure to cycle drain attacks for certain types of endpoints.

Yeah certainly that would be helpful and we know it's a gap between ingress messages and inter-canister messages -- it's something that we might get to at some point as it has been brought up before.

The upside is that for these messages the caller pays for the fees of transmitting the request/response and your canister pays for the local execution only (unlike ingress where the canister bears the cost for everything). So, if you combine the above check with a quick reject of any such message before any heavy processing needs to happen, the cycles spent by your canister should be minimal.

-------------------------

skilesare | 2024-04-04 11:41:41 UTC | #5

Good to know...My biggest concerns are byte bombs where someone includes an ICRC1 account with a 2MB account ID...sounds like the attacker would have to pay. If you check the size straight away you'd likely have very little execution costs(maybe local memory?). @claudio, maybe a dumb question, but is checking the size of a blob in motoko a constant operation? Or does it count up the bytes linearly? I know there was some inefficiencies in blob at one point.

-------------------------

claudio | 2024-04-04 17:46:37 UTC | #6

It's constant time (checking blob size, that is)

-------------------------

