paulyoung | 2022-08-13 22:40:37 UTC | #1

I’ve been feeling dissatisfied with the notion of having developer identities tied to `.pem` files.

Namely; how to back them up securely, and the prospect of losing them in a worst case scenario.

I’d like to have similar options as things like Internet Identity when it comes to being able to recover them.

I came across the following pull request that added support for HSM-backed identities to `dfx`:

https://github.com/dfinity/sdk/pull/1242

I also found this issue which explains some of the motivation:

https://github.com/dfinity/sdk/issues/1211

The numbered steps in the PR suggest that this feature might be intended to work the way I hope it does, but I’m not sure.

Some questions:

1. Does this allow developers to use devices like USB security keys instead of `.pem` files?
1. The PR mentioned NitroKey; I’m not familiar with those. Will other popular security devices (that people may already be using for II) work as well?
1. Is this documented anywhere? I could only find the links I shared above, and a brief mention of the relevant flags in the docs for the `dfx identity` command.

Tagging @ericswanson since they authored the above PR and GitHub issue.

-------------------------

timo | 2022-08-13 08:22:42 UTC | #2

You can use HSMs with dfx today but that doesn't help you with backups. Quite the opposite, it makes backups harder because HSMs by definition do not allow you to extract the key or a seed for backup. If you lose the device then you lose access to your developer identity.

If you want a backup then you can create a .pem file with keysmith, for example. Then the .pem file is derived from a seed phrase which you can back up.

In terms of devices, the NitroKey does not require an interaction such as a finger press for each use. Dfx can access the NitroKey as long as it is plugged in and an environment variable is set to the correct PIN. I don't think Yubikey works with dfx (not sure). Ledger Nano won't work because that would require a special app on the Ledger Nano that is written for that purpose.

-------------------------

GLdev | 2022-08-13 08:53:24 UTC | #3

[quote="timo, post:2, topic:14846"]
Quite the opposite, it makes backups harder because HSMs by definition do not allow you to extract the key or a seed for backup.
[/quote]

[quote="timo, post:2, topic:14846"]
Ledger Nano won’t work because that would require a special app on the Ledger Nano that is written for that purpose.
[/quote]

One of the reasons I liked ledger nano over a yubikey is that you can use the fido app on the nano, and you get to also securely backup your keys (a restored ledger nano will have the same fido key, according to their docs). Perhaps that's an avenue worth exploring? Making dfx work with the fido app on a nano?

I guess having to "authorize" each dfx interaction would become tedious at some point, but if the opsec needs require this, it would seem to be the best of two worlds - hardware device with good backup procedures.

-------------------------

timo | 2022-08-13 14:34:02 UTC | #4

[quote="GLdev, post:3, topic:14846"]
Perhaps that’s an avenue worth exploring? Making dfx work with the fido app on a nano?
[/quote]

There are two approaches for how a hardware device can work: 
1) It is enough to plug the hardware device in and then the software on the computer can get any message signed that it wants.
2) You have to approve every single message that is about to get signed on the device by interacting directly with the device.

Approach 2) only has a security advantage over 1) if the message that is about to be signed is displayed on the device. dfx is a versatile tool that can construct arbitrarily complex messages and sign them. I don't see a way to use that in a meaningful way in combination with the Ledger Nano.

Hence my conclusion: 
Use dfx with an HSM that doesn't require interaction and doesn't have a display because you wouldn't benefit from a display anyway.
Use the Ledger Nano for narrowed down applications where the full message can be displayed such as simple token transfers and specific NNS actions.

To use Ledger nano with dfx in a generic way maybe one could only display the canister that is receiving a call but not the content of the message. It may give you some comfort. But in any case an app needs to be written for the Ledger Nano and that has to be approved and reviewed by Ledger, so any effort of that kind will take 6 months to 1 year.

-------------------------

paulyoung | 2022-08-13 14:41:35 UTC | #5

Thanks @timo. I wasn’t aware that keysmith could generate a seed phrase and then derive a PEM file. I like that a bit better.

Perhaps this approach could be promoted more in the documentation.

According to the [keysmith](https://github.com/dfinity/keysmith) repo, people should use now use [quill](https://github.com/dfinity/quill) instead.

@GLdev I also found this issue which mentions Ledger Nano:

https://github.com/dfinity/quill/issues/70

Perhaps we could communicate our interest there.

-------------------------

timo | 2022-08-13 18:39:18 UTC | #6

keysmith is the lighter tool compared to quill and the right tool for the job. It also allows you to derive multiple keys (.pem files) from the same seed with the `-i <derivation index>` option.

quill is more a replacement for and on the same level as dfx. Quill is for people who want to only do neuron management but with a simpler interface than dfx. Originally quill was used on top of keysmith. Only later was key derivation added directly into quill.

quill interacts with the IC, keysmith doesn't. quill is overkill for what you are trying to achieve.

-------------------------

paulyoung | 2022-08-13 19:53:34 UTC | #7

I think I misinterpreted the keysmith README as “please migrate to quill”.

I also didn’t realize that both tools seem to support using an existing seed phrase to derive a key.

As you pointed out, keysmith can use that same seed phrase to derive multiple keys, which might appeal to people who have already securely backed up a phrase.

I did find this issue about certain phrases not being supported though: https://github.com/dfinity/keysmith/issues/23

-------------------------

mparikh | 2022-08-13 20:00:29 UTC | #8

Is keysmith audited, for truly random secure seed phrase generation?

-------------------------

paulyoung | 2022-08-13 20:19:35 UTC | #9

I suppose this concern can be mitigated by using an existing seed phrase.

I would want to be sure that in the case of recovery that I’d be able to reproduce the same keys from the seed phrase, potentially on a different device with different hardware. I’m not sure how much of a concern that is.

I normally use Nix to try and address that type of concern but it’s not foolproof.

-------------------------

timo | 2022-08-14 11:27:05 UTC | #10

[quote="paulyoung, post:7, topic:14846"]
I think I misinterpreted the keysmith README as “please migrate to quill”.
[/quote]

Yes, that comment right at the top is misleading. It seems targeted at the specific user group that wants to use manage neurons and that formerly had to use the combination of keysmith/dfx.

[quote="paulyoung, post:7, topic:14846"]
I did find this issue about certain phrases not being supported though: [compatibility with identity.ic0.app seed phrase? · Issue #23 · dfinity/keysmith · GitHub ](https://github.com/dfinity/keysmith/issues/23)
[/quote]

I think this issue is irrelevant for what you are doing. Yes, with keysmith you will get an ECDSA key in the .pem file and with dfx you natively get an EdDSA key (I think). But you won't notice any difference when using them. What key types internet identity uses should be irrelevant for your developer identity.

[quote="mparikh, post:8, topic:14846, full:true"]
Is keysmith audited, for truly random secure seed phrase generation?
[/quote]

No.

-------------------------

timo | 2022-08-14 11:37:45 UTC | #11

[quote="paulyoung, post:7, topic:14846"]
I also didn’t realize that both tools seem to support using an existing seed phrase to derive a key.
[/quote]

Yes, both tools can be used. However, I just looked into how each tool does it. I noticed that with quill you have to supply the seed phrase in quotes on the command line which is not preferable. Quill cannot read the seed phrase from a file or environment variable and then output a .pem file. Quill can read the seed phrase from a file and then directly use it to make a call to the IC, but that is not what you need. Keysmith on the other hand can read the seed phrase from a file or environment variable and output the .pem file. Putting the seed phrase into an environment variable is the safest way because then it won't get written to disk. 

Also, keysmith can handle multiple derivation indices while quill cannot (it only uses derivation index 0).

-------------------------

paulyoung | 2022-08-15 04:32:29 UTC | #12

[quote="timo, post:10, topic:14846"]
[quote="paulyoung, post:7, topic:14846"]
I did find this issue about certain phrases not being supported though: [compatibility with identity.ic0.app seed phrase? · Issue #23 · dfinity/keysmith · GitHub ](https://github.com/dfinity/keysmith/issues/23)
[/quote]

I think this issue is irrelevant for what you are doing. Yes, with keysmith you will get an ECDSA key in the .pem file and with dfx you natively get an EdDSA key (I think). But you won’t notice any difference when using them. What key types internet identity uses should be irrelevant for your developer identity.
[/quote]

My impression was that the person who created that GitHub issue was probably trying to use the same seed phrase for both their Internet Identity and their developer identity.

-------------------------

paulyoung | 2022-08-15 20:52:06 UTC | #13

[quote="timo, post:11, topic:14846"]
Keysmith on the other hand can read the seed phrase from a file or environment variable and output the .pem file. Putting the seed phrase into an environment variable is the safest way because then it won’t get written to disk.
[/quote]

@timo, do you know what the name of the environment variable is? I haven't been able to find anything about that.

This works though:

`echo "<seed words>" | keysmith private-key -f=- -i=0 -o=identity-0.pem`

-------------------------

ericswanson | 2022-08-16 01:16:12 UTC | #14

quill will generate the same key from a given seed phrase.

The private key that quill generates from a given seed phrase will also match the private key on a Ledger device using the Internet Computer app.

Unfortunately, the HSM support practically isn't documented at all. 
 (See https://github.com/dfinity/agent-rs/blob/main/ic-identity-hsm/src/hsm.rs#L107).

You'd follow these steps:
1. Run `pkcs11-tool -k --slot $SLOT -d $KEY_ID --key-type EC:prime256v1 --pin $PIN`
2. Create an identity to use it, something like `dfx identity new hsm --hsm-key-id $KEY_ID --hsm-pkcs11-lib-path /usr/local/lib/opensc-pkcs11.so`
3. export `DFX_HSM_PIN=$PIN`
4. `dfx identity use hsm`
Then dfx will use the HSM.

All that said, I recommend using an identity based on a seed phrase.  I typically use a Ledger device to generate the seed phrase, and then use quill to generate a .pem file from that.

-------------------------

timo | 2022-08-16 04:45:47 UTC | #15

[quote="paulyoung, post:13, topic:14846"]
This works though:

`echo "<seed words>" | keysmith private-key -f=- -i=0 -o=identity-0.pem`
[/quote]

Sorry, yes, I meant via piping, not directly. For example:


```
read -s seed
echo $seed | keysmith private-key -f=- -i=0 -o=identity-0.pem
echo $seed | keysmith private-key -f=- -i=1 -o=identity-1.pem
```

-------------------------

paulyoung | 2022-08-18 03:04:35 UTC | #16

[quote="timo, post:2, topic:14846"]
Ledger Nano won’t work because that would require a special app on the Ledger Nano that is written for that purpose.
[/quote]

https://obsidian.systems/blog/announcing-alamgu-rust-ledger-platform

-------------------------

paulyoung | 2022-09-01 17:30:44 UTC | #17

Another thing I ran into with trying to use Quill (for governance purposes) is that I have password-protected PEM files and Quill doesn't seem to support them.

https://github.com/dfinity/quill/issues/130

Sharing here for extra visibility.

-------------------------

muharem | 2023-02-09 16:00:03 UTC | #18

Hello! Is there documentation about this `dfx identity new` feature .. what hardware keys are supported? Is there a tutorial that shows how to use these?

-------------------------

Severin | 2023-02-09 16:28:44 UTC | #19

We do not have any proper documentation. @ericswanson pointed me to [this comment in the code itself](https://github.com/dfinity/agent-rs/blob/main/ic-identity-hsm/src/hsm.rs#L103-L107), but otherwise we have nothing right now. IIRC Nitro keys should be supported.

-------------------------

muharem | 2023-02-14 19:55:13 UTC | #20

We need this properly documented _please_. For opsec reasons we cannot have private keys on laptops when we deploy canisters. 

I chatted with an ICP.Labs participant and he told me that he managed to make https://www.yubico.com/ch/product/yubihsm-2/ work with dfx.

Don't want to dox anyone but I think it's fine to share the name via a private channel. It would be great if you could
  - reach out to the person in question
  - collect the info how it works
  - add it to the documentation.

Thank you!

-------------------------

Severin | 2023-02-21 09:13:13 UTC | #21

Documenting it properly is scheduled for this sprint and I'll add to the ticket to update this thread. Please ping me again if there's no activity for a week on this.

-------------------------

muharem | 2023-02-21 09:29:46 UTC | #22

Thank you! That's great :-)

-------------------------

muharem | 2023-04-19 10:58:08 UTC | #23

Hello! Any news on this?

-------------------------

Severin | 2023-04-19 12:29:03 UTC | #24

Hey! I see there was some work done in that regard, but I can't find the results. Let me ping some folks...

-------------------------

AdamS | 2023-04-19 18:42:47 UTC | #25

There was a mixup with the ticket - what was documented was the HSM support in *quill*, rather than dfx. I will try to rectify that, but in the meantime, the short version is that dfx supports P-256 keys on PIV HSMs, for which you'd have to configure the key ahead of time through a different application (e.g. Yubikey Manager) and install a PKCS#11 module such as OpenSC or Yubikey's YKCS11. The two HSM parameters to `dfx identity new` are the path to the module, and the ID of the key (Yubico documents their key IDs [here](https://developers.yubico.com/yubico-piv-tool/YKCS11/#_key_mapping)); then commands passed `--identity <hsm identity>` receive the HSM's PIN via the `DFX_HSM_PIN` environment variable.

So you might say 
```sh
yubico-piv-tool -a generate -a verify-pin -a selfsign -a import-certificate -s 9c -k -A ECCP256 -S /CN=muharem/
dfx identity new hsm --hsm-key-id 02 --hsm-pkcs11-lib-path /usr/local/lib/libykcs11.so
DFX_HSM_PIN=123456 dfx identity get-principal --identity hsm
```
(the GUI is a lot simpler than the first command)

-------------------------

muharem | 2023-06-19 12:42:51 UTC | #26

Thank you! Please let me know if there is more documentation that was added somewhere.

-------------------------

