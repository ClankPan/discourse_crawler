tgalal | 2022-01-05 10:26:27 UTC | #1

I blogged my experience getting started with Motoko while porting SHA512 to it.

https://tgalal.com/blog/porting-sha512-to-motoko

-------------------------

timo | 2022-01-06 17:20:02 UTC | #2

Nice. Thank you for the contribution!

Regarding the 128 bit numbers, the only place where you need that is when the message length is encoded as part of the padding at the end of the message, right? I mean, there is no arithmetic needed for those kind of numbers, you only need to encode one such number to bytes it seems.

-------------------------

tgalal | 2022-01-06 19:00:17 UTC | #3

Yes. It's only that the existing SHA256 implementation depends in intermediate arithmetic on data lengths (incoming and processed) being 64 bit numbers . One example is how it determines how many full blocks are ready to be processed: [sha256:L87](https://github.com/enzoh/motoko-sha/blob/9e2468f51ef060ae04fde8d573183191bda30189/src/SHA256.mo#L87). And so I replaced NatX-dependant computations with something equivalent (hopefully not on the expense of cost).

Technically speaking I could have also just left all lengths as Nat64 and finally encoded as 128 bits since I guess practically no one is going to hash that amount of data. But then it wouldn't exactly conform to SHA512.

-------------------------

timo | 2022-01-06 19:16:32 UTC | #4

I see, makes sense as you say, to track the length as Nat instead of Nat64 while `write()` calls happen and then convert to 128 bits in the end.

-------------------------

timo | 2022-01-16 17:16:57 UTC | #5

There is now an implementation of the whole SHA2 family (all algorithms): https://github.com/timohanke/motoko-sha2

-------------------------

