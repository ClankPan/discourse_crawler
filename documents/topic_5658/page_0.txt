spencer | 2021-07-02 13:55:25 UTC | #1

[The motoko sdk grammar doc was autogenerated](https://sdk.dfinity.org/docs/language-guide/motoko-grammar.html) with no explanation of the symbol meanings, so it's not very helpful. Is there a guide that explains the grammar/syntax in more detail?

-------------------------

nomeata | 2021-07-02 14:23:30 UTC | #2

Maybe you are looking for this section? https://sdk.dfinity.org/docs/language-guide/language-manual.html

-------------------------

rossberg | 2021-07-02 16:05:02 UTC | #3

See the section that @nomeata points to for detailed explanations.

As for the notation used in the auto-generated grammar, it is pretty much standard [BNF](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form), with the only addition of optional phrases `(...)?`.

-------------------------

mesbahkhan | 2021-12-19 15:43:18 UTC | #6

Hi Folks

I am trying to build a parser for mo files for an analysis project.

However, what I don't get is the first two rules, they don't seem to be part of the standard BNF syntax
e.g. <list(X,SEP)>  this looks like a template for a rule, I can't seem to locate this in the official BNF syntax.  I am trying to parse the grammar in ANTLR4 and it seems to not recognize the first two rules which have this syntax. Typically an BNF id is meant to just be a string of chars with '-' or numbers (according to the [antlr grammar for BNF](https://github.com/antlr/grammars-v4/tree/master/bnf) this is what an ID is supposed to be made of 

> id_
    : LT ruleid GT
    ;

>ruleid
    : ID
    ;

>ID
    : ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'0'..'9'|'-'|' ')+
    ;

and a rule is 
> rule_
    : lhs ASSIGN rhs
    ;

where the ASSIGN is ::==
>ASSIGN
    : '::='
    ;


So a little lost here, what syntax do the first two rules follow, they almost look like meta-rules.  Is the tool that generates them something internal or open source?

Any help will be appreciated, a little lost here..

Regards

Mesbah

-------------------------

