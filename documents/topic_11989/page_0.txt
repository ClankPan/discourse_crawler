lastmjs | 2022-04-07 14:30:00 UTC | #1

Is there a way to trigger a canister upgrade even if the module hash has not changed? I often want to do this when testing, and especially right now as I am testing stable storage in Azle, so I want to just force some upgrades even without code changes.

-------------------------

paulyoung | 2022-04-07 15:04:39 UTC | #2

Does `dfx canister install --mode=reinstall …` do what you want?

-------------------------

lastmjs | 2022-04-07 15:30:22 UTC | #3

It seems like that completely removes the state and code and reinstalls the code, calling init again. I want the pre_upgrade and post_upgrade functions to run even if the module hasn't changed. And even if that did work, the fact that it has a prompt would make it difficult to use in a CI environment.

-------------------------

saikatdas0790 | 2022-04-11 05:57:09 UTC | #4

To bypass prompts, use the `yes` utility. Something like:

```bash
yes "yes" | <whatever script has prompts>
```

I used it in my CI like this:
![image|690x303](upload://rduKUW2qEhjsyKsyNWb3nvrTKH4.png)

I used this for the Motoko warning for loss of stable variable data, it's from dfx 0.9.2 which had this bug of showing the warning even though it was safe to upgrade

-------------------------

nomeata | 2022-04-11 09:57:26 UTC | #5

If `dfx` doesn’t allow you to upgrade to identical code, I’d consider that a bug. Hopefully community contributions are open for the `sdk` repo soon, so that I can tell people to just fix it :-)

-------------------------

AdamS | 2022-04-11 14:22:19 UTC | #6

PSA: Do *not* use `yes` in any CI that involves macOS, as multiple concurrent tasks on the same machine will deadlock as both fight for 100% CPU. We've been bitten by that several times. `echo yes` will provide the intended effect.

-------------------------

quint | 2022-04-11 14:07:02 UTC | #7

I've used a hack in the past by just adding/altering an empty public function and removing/reverting it after the tests with `sed` (bash). This way the hash changes, and you can test `pre` and `post` upgrade functions.

I would love a better solution tho...

-------------------------

saikatdas0790 | 2022-04-11 15:36:01 UTC | #8

Yes, it was fixed in dfx 0.9.3

![image|427x129](upload://hSv2Xbr13MIR0h0XJ14FiwPuGaI.png)

-------------------------

saikatdas0790 | 2022-04-11 15:34:39 UTC | #9

Oh, I was not aware of this. Our CI runs on Ubuntu and we haven't run into trouble with yes yet. But will keep this in mind :)

-------------------------

dansteren | 2022-05-17 22:19:25 UTC | #10

~~I just ran `dfx canister install --help` on v0.9.3 and it says that "upgrade" is a valid mode, but then it errors out when actually using it.~~
[spoiler]![Screenshot from 2022-05-17 14-36-24|690x262](upload://kJZOyAgv0ufL23G53E9EhdZVh7h.png)[/spoiler]

Edit: Just realized I was mixing `dfx deploy` with `dfx canister install` :man_facepalming:.

Just the same, I too need a way to re-run the upgrade hooks even if the canister code hasn't changed.

-------------------------

paulyoung | 2022-05-20 03:11:02 UTC | #11

@lastmjs how about `dfx deploy --upgrade-unchanged`?

https://github.com/dfinity/sdk/blob/3a225b611cd408ca752a627c30c25ce3467313dc/src/dfx/src/commands/deploy.rs#L51-L53

-------------------------

lastmjs | 2022-05-20 11:57:56 UTC | #12

Do you know what version of dfx that is?

-------------------------

paulyoung | 2022-05-20 16:58:59 UTC | #13

The change log says 0.10.0 https://github.com/dfinity/sdk/blob/master/CHANGELOG.adoc#feat-dfx-deploy---upgrade-unchanged-or-dfx-canister-install---mode-upgrade---upgrade-unchanged

-------------------------

