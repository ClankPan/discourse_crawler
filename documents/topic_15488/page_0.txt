saikatdas0790 | 2022-09-18 04:07:18 UTC | #1

Here is a minimal reproduction
https://github.com/saikatdas0790/cross_canister_package_import/blob/master/src/caller/src/lib.rs

Basically, the issue is I am unable to import from a package that is a canister but can import from a package that contains a normal `lib`

These lines import from another canister
https://github.com/saikatdas0790/cross_canister_package_import/blob/d7b495c3888523a9f217d45802aa3457edbab368/src/caller/src/lib.rs#L7-L10

These lines import from another package in the workspace
https://github.com/saikatdas0790/cross_canister_package_import/blob/d7b495c3888523a9f217d45802aa3457edbab368/src/caller/src/lib.rs#L11-L14

The first one doesn't work, the second one does. Can I not import from one canister package into another? Seems like an arbitrary limitation.

Thoughts?

-------------------------

lwshang | 2022-09-19 20:25:34 UTC | #2

Hi @saikatdas0790,

Likely, the constraint comes from following config in `callee/Cargo.toml`:
```
[lib]
crate-type = ["cdylib"]
```
This is crucial for building target wasm. But it also make the crate not a [rust lib](https://doc.rust-lang.org/reference/linkage.html) anymore. Then it cannot be depended by other crates.

For data structures to be used by multiple canisters, it's better to move them into a non-`cdylib` crate.
And let each canister crate depend on that crate.

This is indeed what you achieved with the `utils` crate.

-------------------------

saikatdas0790 | 2022-09-20 03:27:54 UTC | #3

Oh well, would have preferred to be able to do that, for the sake of colocating types, but as I read more, I understand this is a Rust limitation, not an IC limitation. :slight_smile:

-------------------------

saikatdas0790 | 2022-09-20 03:49:25 UTC | #4

I updated the code [here](https://github.com/saikatdas0790/cross_canister_package_import) to make the compiler happy, but the `dfx build` step still fails.

Basically, I tried 2 things:
- Removing the crate type
- Adding "lib" to the "cdylib" for the crate type array

Both of them make the compiler happy but the build fails.

What's the reason for a canister type to specifically be "cdylib"?

-------------------------

paulyoung | 2022-09-20 04:47:51 UTC | #5

You can definitely import from canisters but you might run into duplicate symbols, e.g. https://github.com/dfinity/cdk-rs/issues/304

-------------------------

saikatdas0790 | 2022-09-20 12:53:36 UTC | #6

So, better not to do it and just define things in a shared lib?

-------------------------

