bobbylingus | 2022-05-15 19:12:41 UTC | #1

As an unexperienced starting developer I find that learning Motoko isn't as hard as actually wrapping my head around the broader pallet of technologies used on the front end.

The assets canister in the hello world (and the declarations) contains Candid, .js and .ts files. Also we find webpack and npm in the root of the project. 

I know this is independent of the IC, but I would love to hear someone give a talk about how all these technologies work together to build clients that interact with the IC.

I would love to know what the assumptions and reasoning is that makes the frontend like it is. Mostly I would love to learn how javascript / typescript uses agents to communicate with actors on the IC. Also a deep run down of the generated decelerations. Why are both js and ts used? What is webpack doing? etc.

-------------------------

paulyoung | 2022-05-16 00:56:37 UTC | #2

Some resources that might help:

https://twitter.com/dfinity/status/1522927227264024577?s=20&t=0lrti25c0l6ZcFthK8LJpQ

https://youtu.be/OvCLVTD6lAc

https://youtu.be/btSkITdSlCs

[quote="bobbylingus, post:1, topic:12996"]
Why are both js and ts used?
[/quote]

JavaScript is the lowest common denominator for running in browsers so that pretty much has to be used. TypeScript is popular and so is also provided for people using that but if you‚Äôre not using it, or use some other compile-to-JS language, you can ignore those files.

[quote="bobbylingus, post:1, topic:12996"]
What is webpack doing?
[/quote]

Webpack is bundling all of the sources files used in development and preparing them for production. Depending on your configuration, this could include various transformations that aren‚Äôt necessary during development, or would make development too slow. It also provides a dev server so that you can iterate more quickly on your UI without having to deploy the front end to a canister after every change.

-------------------------

skilesare | 2022-05-15 23:30:52 UTC | #3

It would be great to get a minimum viable app that was just html + the agent.js required to talk to the ic.

There are so many tiny apps that could be done. 

With http_request_upgrade we could even see some pure html form based apps.

-------------------------

paulyoung | 2022-05-16 16:35:43 UTC | #4

Also: https://forum.dfinity.org/t/create-a-new-project-npm-init-ic/13016?u=paulyoung

-------------------------

bobbylingus | 2022-05-17 09:28:32 UTC | #6

[quote="paulyoung, post:4, topic:12996, full:true"]
Also: [Create a new project üëâ npm init ic ](https://forum.dfinity.org/t/create-a-new-project-npm-init-ic/13016)
[/quote]

Thank you! Will try out later today I hope.

-------------------------

bobbylingus | 2022-05-17 09:31:11 UTC | #7

Thank you for the resources. 

What is a good place to start learning about how javascript or typescript are used to read in the Candid interface file and use it to communicate with the IC? I'm a details kind of a guy

-------------------------

paulyoung | 2022-05-17 17:11:32 UTC | #8

I think `dfx` creates a `copy:types` entry under `scripts` in `package.json` which copies from `.dfx/<network>/canisters`.

If you look in that directory, probably `.dfx/local/canisters`, each canister has a directory that contains generated JavaScript.

So, JavaScript isn‚Äôt used to read the Candid file, but rather the Candid file is used to generate some JavaScript which knows how to encode and decode it.

-------------------------

kpeacock | 2022-05-17 22:47:23 UTC | #9

@bobbylingus I've written a bit on this topic - although I haven't published it as official docs yet. Feedback is appreciated!
https://kyle-peacock.com/blog/dfinity/agent-js

-------------------------

Ori | 2022-05-18 08:59:53 UTC | #10

This page is a handy reference for which types to use, also linked in Kyle‚Äôs article above: [https://smartcontracts.org/docs/current/references/candid-ref/#supported-types](https://smartcontracts.org/docs/current/references/candid-ref/#supported-types)
Check the ‚ÄúCorresponding JavaScript values‚Äù under each entry.

-------------------------

kpeacock | 2023-01-18 17:19:11 UTC | #12

I finished my draft a while ago and published https://internetcomputer.org/docs/current/developer-docs/build/agents/javascript/javascript-intro

Just wanted to update this thread

-------------------------

cryptoschindler | 2023-02-07 18:48:25 UTC | #13

That link doesnt work for me :/

-------------------------

Severin | 2023-02-08 13:15:48 UTC | #14

I just added a redirect. Should work again in a few minutes

-------------------------

rbole | 2023-02-09 18:19:44 UTC | #15

This is a demo project I have provided for the Motoko Bootcamp 01/2023
https://github.com/samlinux/icpAsset

-------------------------

rbole | 2023-02-10 05:58:07 UTC | #16

Hi @kpeacock your link seems to be broken ?

-------------------------

Severin | 2023-02-10 07:31:03 UTC | #17

Looks like the redirect doesn't work. The new link is https://internetcomputer.org/docs/current/developer-docs/agents/javascript-intro

-------------------------

cryptoschindler | 2023-02-10 15:25:45 UTC | #18

Whatever we have done here should be reversed or fixed globally. Google search results of the docs lead to "Page not found", this basically rendered a huge amount of links that used to work unusable. It doesn't make sense to fix them all manually ...

-------------------------

