flyq | 2021-07-12 10:23:25 UTC | #1

There is such an unfair phenomenon in Ethereum. IDO, Initial Dex Offering, or other first-entry scenarios that will definitely benefit. Ordinary users can only interact with smart contracts through the frontend, while developers can use scripts or robots to achieve quick purchases.

Now, in Internet Computer, the frontend is deploy on asset canister, when the user loads the frontend in the local browser, the frontend comes with a "certification" of the asset canister, and then the user sends any update call to the back-end canister through the frontend, the backend canister can check whether the update call comes from the frontend?

-------------------------

claudio | 2021-07-12 11:30:22 UTC | #2

I think that by accessing the caller of the method 

doc: https://sdk.dfinity.org/docs/language-guide/caller-id.html
sample: https://github.com/dfinity/examples/tree/master/motoko/whoami

and then examining the bytes of the caller's `Principal` and using the spec: 

https://sdk.dfinity.org/docs/interface-spec/index.html#principal

an update method should be able to tell if it is being called by a canister, a frontend/user, the anonymous user or a derived id (but I haven't tried this).

-------------------------

flyq | 2021-07-12 11:45:50 UTC | #3

[quote="claudio, post:2, topic:5850"]
an update method should be able to tell if it is being called by a canister, a frontend/user, the anonymous user or a derived id (but I haven’t tried this).
[/quote]
yes:
https://github.com/dfinity/ic/blob/master/rs/types/base_types/src/principal_id.rs#L294-L311

This can only solve part of the problem. What I want is to be able to distinguish whether the user uses the frontend or the dfx to call it. In these case, both callers are authenticating principal.

A better method is the frontend canister can give a signature, or the IC System gives a certification of the frontend canister, and then the update call carries the certification/signature, and the backend canister verifies them.

-------------------------

flyq | 2021-07-12 11:47:33 UTC | #4

[quote="flyq, post:3, topic:5850"]
A better method is the frontend canister can give a signature, or the IC System gives a certification of the frontend canister, and then the update call carries the certification/signature, and the backend canister verifies them.
[/quote]

Looking forward to an example of this function.

-------------------------

chenyan | 2021-07-13 02:09:58 UTC | #5

I understand the motivation, but the user can also open multiple instances of the frontend, and even scripting the update calls with a browser extension/plugin. So I'm not sure if a frontend signed message can prevent a programmatic scripting of update calls.

-------------------------

wang | 2021-07-13 03:18:17 UTC | #6

[quote="claudio, post:2, topic:5850"]
an update method should be able to tell if it is being called by a canister, a frontend/user, the anonymous user or a derived id (but I haven’t tried this).
[/quote]
How future-proof is this?

It seems like the ability to differentiate between user and canister is supposed to go away in the future.

https://forum.dfinity.org/t/defi-with-icp-seems-temporarily-crippled-on-purpose-yes-for-now/4689/14

-------------------------

flyq | 2021-07-13 07:22:22 UTC | #7

Yes, there is no absolute security, you can only try to increase the cost of the attacker. Indeed, this method cannot really solve this problem.

The more essential problem is this: I deploy applications on IC, in order to lower the threshold, I am going to provide services that do not require any handling fees. Users can make update calls by clicking on the frontend multiple times. I think this is ok, because the number of clicks is not much. But if an attacker uses scripts/programs to conduct DDoS attack, this will exhaust the canister's cycles.

The [Identity](http://identity.ic0.app/) canister's registration uses `Proof of Work` to increase attack costs and also reduce the user experience at the same time.
The [DSCVR](http://dscvr.one/) is also a free application. It is not clear what measures they have done to prevent DDoS attacks. Looking forward to related solutions

-------------------------

Hazel | 2021-07-13 20:34:23 UTC | #8

I was under the impression not being able to distinguish between the two was a feature - https://sdk.dfinity.org/docs/interface-spec/index.html#principal

I can see the utility in wanting to be able to distinguish user principals from canister principals. But, my fear is applications then would then intentionally try to lock themselves down minimizing service composability. At that, I guess nothing is stopping us from building some "proof of human principal" service either. :thinking:

-------------------------

quinto | 2021-07-13 21:30:08 UTC | #9


[quote="flyq, post:7, topic:5850"]
The [Identity](http://identity.ic0.app/) canister’s registration uses `Proof of Work` to increase attack costs and also reduce the user experience at the same time.
[/quote]

Compared to traditional method like captcha, a small pow challenge is not a bad idea.

-------------------------

