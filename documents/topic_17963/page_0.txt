skilesare | 2023-03-07 18:34:01 UTC | #1

# Candy Library Documentation and Refactoring - Motoko - #46

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification: (01/09/2023) 
* Open for application: (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2023/01/09/46-Candy-Library-Updates.html)

## Bounty Details

* Bounty Amount: $2,000 USD of ICP at award date.
* ICDevs.org Bounty Acceleration: For each 1 ICP sent to ece0c010e460e7a3094f207c984b37d961387186f45bfcec06be228330a62306, ICDevs.org will add  .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Individual
* Opened: 01/09/2023
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Intermediate - Motoko; Intermediate - Rust; Intermediate - JS;

## Description

Candy Library provides an extensible set of types for the basic motoko types.

You will update https://github.com/icdevs/candy_library with documentation and examples for each function in the library.

The 2.0 branch needs to be deleted.

The library needs to be set up for Vessel and Mops.

Add missing conversion types.

Update the Buffer Implementation to the latest base library.

This bounty gives the opportunity to

* learn about Motoko
* learn about Candy Library

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to ece0c010e460e7a3094f207c984b37d961387186f45bfcec06be228330a62306.  ICDevs will match the bounty $40:1 ICP for the first 25 ICP out of the DFINITY grant and then 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification: (01/09/2023)

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.



[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

darkdrag00n | 2023-03-01 13:00:09 UTC | #2

Hi @skilesare!

I am new here and would like to take up this task. I haven't worked with Motoko before but I believe this is a great starter project.

### Background
5+ YOE in C++
1 YOE in Rust
Picked up Scala recently
Primarily a Compiler Engineer but recently started looking into Blockchains
Github: darkdrag00nv2

Active in the Ergo ecosystem with contributions to the Sigmastate-Interpreter project:
- `isEmpty` support in the compiler - [PR](https://github.com/ScorexFoundation/sigmastate-interpreter/pull/860)
- `ContractTemplate` support in the SDK - [Under review PR](https://github.com/ScorexFoundation/sigmastate-interpreter/pull/857)

### Plan
I am a little hesitant to give a strict timeline since I am new to Motoko but the following represents a best-effort plan I have:

- Read the candy_library codebase using the Motoko docs for reference - In progress
- Add documentation and examples for each function - 1 week
- Add any missing conversion types & misc - 1 week

Thanks for your consideration!

-------------------------

skilesare | 2023-03-01 15:21:56 UTC | #3

I'd love for you to give it a try.

I'll submit it...you should be able to get started.

Note: I've recently started a bit of a refactor with stable types. I'll loop you in on it.

-------------------------

darkdrag00n | 2023-03-02 14:22:16 UTC | #4

Thank you.

The progress can be tracked on this PR - https://github.com/icdevs/candy_library/pull/14

-------------------------

skilesare | 2023-03-02 15:46:29 UTC | #5

I've pushed https://github.com/icdevs/candy_library/tree/0.2.0

I've moved from Buffer to Stable Buffer for stability so a more appropriate task for the bounty might be to add the new Buffer functions from the 8.3 base library into the Stable buffer. 

https://github.com/canscale/StableBuffer

@icme did this original work and I think it is a fairly straightforward conversion and you get to learn a lot about the difference between functional and OO programming.  They added a bunch of convenience methods to buffer in base and they would be nice to have here as well.

-------------------------

darkdrag00n | 2023-03-06 14:51:53 UTC | #6

### Update
The progress can be tracked on the [PR](https://github.com/icdevs/candy_library/pull/14) but posting the summary here for ease of tracking.

#### So far
Documentation and examples are almost done. Only functions inside `workspace.mo` are remaining.
Added a small GitHub Actions CI setup to at least compile the library on each PR

#### Next steps
Finish documenting `workspace.mo` as well
Add new buffer functions from the 8.3 base library into the Stable Buffer implementation
[Stretch goal] Add missing conversion types

#### Questions
@skilesare I have two questions:

[quote="skilesare, post:1, topic:17963"]
The library needs to be set up for Vessel and Mops.
[/quote]

The library is already setup with Vessel. Also, it seems like only one of them can be used at a time since they both require setting itself as the packtool. Perhaps we could keep separate branches.

[quote="skilesare, post:1, topic:17963"]
The 2.0 branch needs to be deleted.
[/quote]

I didn't get this step. Can you elaborate please?

-------------------------

skilesare | 2023-03-06 20:56:52 UTC | #7

I merged your stuff and just pushed some more changes:

* Got rid of the Buffer static warning
* Changed CandyValueUnstable to CandyValueShared at @ZhenyaUsenko's suggestion.  This is annoying but technically correct as opposed to the other name.  Shared values can be stored in stable and avoid pre-post upgrade handling, but can't be returned.
* Removed the legacy aramakme licensing stuff.

Next Steps:
- I already removed the old 2.0 branch and replaced it with this one, so disregard it.
- Interesting about mops, vessel.  Maybe @Gekctek and @rvanasa can give us some insights on how the next gen is coming together and if mops is going to take over or if vessel is going to be improved.

-------------------------

Gekctek | 2023-03-06 21:34:31 UTC | #8

@darkdrag00n I would just choose one vs doing both. I was trying both but it doesn't really work. 
I would suggest doing MOPS because it allows you to publish to MOPS (https://mops.one/) so that its essentially indexed and searchable and usable with names vs urls. 
But MOPS lets you just point to a library at a git url, so it doesn't ultimately matter for a MOPS user, just harder to find libraries
Also im using the MOPS testing library so I dont need to compile to wasm manually or run a wasm manually

Here is what Im using for a template for my libraries
https://github.com/edjCase/motoko-library-template
and here is my latest library that can also be used as reference
https://github.com/edjCase/motoko_xml

-------------------------

skilesare | 2023-03-07 04:26:30 UTC | #9

@darkdrag00n I just pushed a big update that changes the names of a ton of things.

Basically:

ValueUnstable -> Candy ('unstable' used to mean usable...now that the stable types are in, this is the norm
Value -> CandyShared
valueToX -> candySharedToX
valueUnstableToX -> candyToX

Hopefully, this will read a bit better now to people that are unfamiliar to the library.  You should really only need valueShared when dumping a return from an actor.

Let me know your thoughts on this.  We can always move to something else if it makes sense.

-------------------------

icaten | 2023-03-07 18:26:47 UTC | #10

Although is not well documented yet, it is worth considering that the formatting for the comments used as headers of methods could be updated to be proper "Motokodoc". Here's an [explanation of Motokodoc](https://forum.dfinity.org/t/ask-how-should-we-improve-motoko/14573/60) and [an example](https://github.com/atengberg/examples/blob/ashton/invoice-bnt2/motoko/invoice-canister/src/invoice/Invoice.mo). 

In particular, IIRC the `//` will not be picked up when running `moc doc` when generating docs as well.

I've seen the `@param`/`returns` used when writing Motokodoc for methods but iirc it is not (yet) a feature.

-------------------------

darkdrag00n | 2023-03-09 07:50:45 UTC | #11

@skilesare A small update. My laptop died, I'll get it repaired over the weekend and will resume work from Monday onwards next week.

Thanks for your patience.

-------------------------

darkdrag00n | 2023-03-11 11:59:46 UTC | #12

My laptop is back working now. I am resuming the work.

[quote="icaten, post:10, topic:17963"]
In particular, IIRC the `//` will not be picked up when running `moc doc` when generating docs as well.
[/quote]

@icaten Thanks for sharing. Do note that I've used `///` instead of `//`. [Example](https://github.com/icdevs/candy_library/blob/5e54dd27a27b1319daa0a9a5db236c6c567c69cf/src/conversion.mo#L65) in the candy library. The `///` does get picked up by the `moc doc`.

That also seems to be inline with what the Motoko base library does - [Example](https://github.com/dfinity/motoko-base/blob/c50dcdd90d15c8e78ba21f38c4dff0d8a31a37df/src/Array.mo#L29).

-------------------------

darkdrag00n | 2023-03-11 15:35:57 UTC | #13

[quote="skilesare, post:5, topic:17963"]
I’ve moved from Buffer to Stable Buffer for stability so a more appropriate task for the bounty might be to add the new Buffer functions from the 8.3 base library into the Stable buffer.
[/quote]

@skilesare There are many functions in 8.3 base library which are not in Stable buffer. It would be non-trivial to port all of them. Do you have a list of few top priority ones which we need for candy_library? 

I've ported 3 functions as part of this PR - https://github.com/canscale/StableBuffer/pull/6

Will add more based on your recommendations.

-------------------------

skilesare | 2023-03-11 15:57:57 UTC | #14

Maybe @claudio  can comment. I think he either wrote most of them or knows who did.  @icme did the initial work, and I think there was some trick to it. Basically I think you just need to add the object as the first var of each one and then put buffer. in front of most of the items.  I'll try to take a look in a bit.

-------------------------

icme | 2023-03-11 21:48:55 UTC | #15

[quote="darkdrag00n, post:13, topic:17963"]
I’ve ported 3 functions as part of this PR - [Implement additional functions in StableBuffer by darkdrag00nv2 · Pull Request #6 · canscale/StableBuffer · GitHub](https://github.com/canscale/StableBuffer/pull/6)
[/quote]

Reviewed the PR - sorry for the delay!

Happy to accept any and all contributions to extend the StableBuffer to achieve parity with the wealth of functions that the new base Buffer class has.

Hopefully it shouldn't take too long to add more functions, but agree that since there are 2500+ lines of code in the new buffer vs. ~175 in StableBuffer there's quite a bit to add.

Luckily, @kentosugama did a great job of adding both functions and extensive tests.

@skilesare Maybe it's a good idea to pick/prioritize the functions you'd like most to be moved over. I'd estimate moving the full suite over might take a day or two of work, plus a day or two for me to review and check correctness. I'd honestly prefer many small PRs instead of one large one (easier to review and perform some quality control).

-------------------------

skilesare | 2023-03-12 17:11:34 UTC | #16

Let me move this to a new bounty.  We'll just take the buffer part out of this one.

-------------------------

darkdrag00n | 2023-03-12 18:49:14 UTC | #17

@skilesare Sure or if possible, you can increase the reward on this one as well as I would like to work on it. I've already opened 2 PRs for it. Either choice works.

Also, please review https://github.com/icdevs/candy_library/pull/15.

@icme I've updated https://github.com/canscale/StableBuffer/pull/6 based on your review comments. I've also opened another PR implementing 3 more functions - https://github.com/canscale/StableBuffer/pull/8

-------------------------

skilesare | 2023-03-12 19:13:54 UTC | #18

We'll do a separate on for buffer and You'll have first right of refusal if it gets approved.

-------------------------

icme | 2023-03-12 20:52:28 UTC | #19

Looks good, reviewed and commented on the issue you opened here https://github.com/canscale/StableBuffer/issues/7.

-------------------------

darkdrag00n | 2023-03-13 15:48:38 UTC | #20

@skilesare 
Two PRs that need your attention
1. https://github.com/icdevs/candy_library/pull/15 -- Implements missing conversion types, cleans up the README and a minor bug fix
2. https://github.com/icdevs/candy_library/pull/16 -- Add support for Mops & publishing docs to GH pages

With StableBuffer part out of the scope of this bounty, the only remaining piece now is to document `workspace.mo` which I'll do tomorrow.

-------------------------

icme | 2023-03-14 06:02:10 UTC | #21

I finally decided to upgrade the internals of the [StableBuffer](https://github.com/canscale/StableBuffer) to match the base implementation (using `[var ?X]` instead of `[var X]`. (thanks @tomijaga for your contribution).

This should make the task of extending StableBuffer to match the base buffer library implementation much easier/quicker.

-------------------------

skilesare | 2023-03-14 12:14:11 UTC | #22

I've put in for an approval for a bounty to fund the rest of the work.  We will.see what Dfinity says.

-------------------------

darkdrag00n | 2023-03-15 14:57:44 UTC | #23

@skilesare Documented workspace.mo as well - https://github.com/icdevs/candy_library/pull/17

One more thing, I had configured GitHub pages in the CI but you'll have to enable it in the settings since I don't have access to the repo. Can you enable it using these instructions: https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site#publishing-from-a-branch

For the branch, please select `gh-pages` and the root (default) as the folder. After that we should have the documentation website up :smile:

-------------------------

darkdrag00n | 2023-03-22 13:52:50 UTC | #24

@skilesare Gentle reminder for the above PR.

-------------------------

skilesare | 2023-04-22 11:47:27 UTC | #25

 Getting an error on this run on the 0.2.0 branch where we use the new let else symtax. I think moc 0.8.7 needs to be copied to the dfx cache? Any chance you could make that change and a pull request?  Hopefully we get dfx 14 soon.

https://github.com/icdevs/candy_library/actions/runs/4772528231/jobs/8485085924#step:8:40

-------------------------

darkdrag00n | 2023-04-22 11:53:00 UTC | #26

Sure, let me check that and will make a PR in 1-2 days.

-------------------------

darkdrag00n | 2023-04-25 19:52:00 UTC | #27

@skilesare https://github.com/icdevs/candy_library/pull/20 for fixing the CI.

-------------------------

