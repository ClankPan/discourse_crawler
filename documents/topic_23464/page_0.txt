Mercury | 2023-10-02 18:42:23 UTC | #1

The [Certified Variables example](https://github.com/dfinity/examples/tree/master/motoko/cert-var#certified-variables) refers to IC's Security best practices page, [Certify query responses if they are relevant for security section](https://internetcomputer.org/docs/current/developer-docs/security/general-security-best-practices#certify-query-responses-if-they-are-relevant-for-security), which in turn points at the [ic-certified-map](https://github.com/dfinity/cdk-rs/tree/main/library/ic-certified-map) *Rust* package... Please advise.

-------------------------

kpeacock | 2023-10-02 18:48:16 UTC | #2

I was just looking at that example, and it's nearly 2 years out of date. [https://mops.one/ic-certification](https://mops.one/ic-certification) provides the core support needed for variable certification in Motoko. 

There are other packages built on top of it, such as a couple I've written.
[https://mops.one/certified-cache](https://mops.one/certified-cache) provides a simple interface to store both the response and the certification through a single call
[https://mops.one/server](https://mops.one/server) provides an http server in the style of `express.js`, and takes care of inserting the certificate as a header that will pass certification in the service worker or in the newly announced validating boundary node

-------------------------

Mercury | 2023-10-06 03:57:34 UTC | #3

I wanted to try these packages first to post an informed reply, should be able to do so over the weekend. Cheers.

-------------------------

vdve1997 | 2024-05-10 18:11:27 UTC | #4

please do test it! would be very useful.

-------------------------

