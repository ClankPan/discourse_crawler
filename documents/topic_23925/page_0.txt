Luka | 2023-10-20 19:24:19 UTC | #1

Hello there!

We are happy to announce that voting is now open for [a new IC release ](https://github.com/dfinity/ic/tree/rc--2023-10-18_23-01).
The NNS proposal is here: [IC NNS Proposal 125320](https://dashboard.internetcomputer.org/proposal/125320). 

Here is a summary of the changes since the last release:
* [[7653676ce](https://github.com/dfinity/ic/commit/7653676ce)]  Consensus: feat(CON-1103): Implement BatchPayloadBuilder for QueryStats
* [[e097687da](https://github.com/dfinity/ic/commit/e097687da)]  Consensus: fix(consensus): swap the error counters labels "expired_requests" <> "invalid_keyid_requests"
* [[9beadb415](https://github.com/dfinity/ic/commit/9beadb415)]  Crypto: chore(crypto): Always optimize p256 and k256 crates
* [[8c1a676e3](https://github.com/dfinity/ic/commit/8c1a676e3)]  Crypto: chore(crypto): Upgrade bip32 crate to 0.5.0
* [[afaf16ec5](https://github.com/dfinity/ic/commit/afaf16ec5)]  Crypto: chore(crypto): fix broken link in IDKG documentation
* [[a3ac44678](https://github.com/dfinity/ic/commit/a3ac44678)]  Crypto: chore(crypto): remove obsolete dependency on internal crypto crate
* [[d95b2cb0e](https://github.com/dfinity/ic/commit/d95b2cb0e)]  Crypto: feat(crypto): Add support for threshold ECDSA P256 signatures
* [[3d8309b06](https://github.com/dfinity/ic/commit/3d8309b06)]  Crypto: feat(crypto): Support MEGa encryption with mixed curves
* [[1a01f85fc](https://github.com/dfinity/ic/commit/1a01f85fc)]  Crypto: feat(crypto): Use only pks read lock when possible for iDKG retain
* [[7d93856d8](https://github.com/dfinity/ic/commit/7d93856d8)]  Crypto: feat(crypto):, Only acquire SKS write lock when necessary for NI-DKG update_forward_secure_epoch
* [[3fbadcab6](https://github.com/dfinity/ic/commit/3fbadcab6)]  Crypto: fix(cketh): improve handling of `eth_get_logs`
* [[5a874d1e5](https://github.com/dfinity/ic/commit/5a874d1e5)]  Crypto: perf(crypto): avoid double serialization in vault RPC communication and add runtime metrics for serialization
* [[af7208c24](https://github.com/dfinity/ic/commit/af7208c24)]  Execution: chore: Add new error for failed creation canister operation
* [[ee9e5ccf5](https://github.com/dfinity/ic/commit/ee9e5ccf5)]  Execution: chore: Require that certain fields exist for subnet metrics
* [[96f3de576](https://github.com/dfinity/ic/commit/96f3de576)]  Execution: feat: Implement burn_cycles system api
* [[3137eb3f5](https://github.com/dfinity/ic/commit/3137eb3f5)]  Execution: fix: Reject response BitcoinPayloadBuilder
* [[e81d2fef7](https://github.com/dfinity/ic/commit/e81d2fef7)]  Execution: fix: Take message memory into account when calculating the freezing threshold
* [[330cceebd](https://github.com/dfinity/ic/commit/330cceebd)]  Financial Integrations/Message Routing: feat(cketh): events for the normal withdrawal flow [override-didc-check]
* [[863ca074d](https://github.com/dfinity/ic/commit/863ca074d)]  Financial Integrations/Message Routing: feat(cketh): record the initiator of a withdrawal request
* [[bb093eeca](https://github.com/dfinity/ic/commit/bb093eeca)]  Message Routing: Assert data can fit into single chunk when appending single chunk file to split manifest
* [[3c16de524](https://github.com/dfinity/ic/commit/3c16de524)]  Message Routing: chore: Metric for copying ReplicatedState
* [[b3168e25f](https://github.com/dfinity/ic/commit/b3168e25f)]  Message Routing: fix: Check liveness of the Tip thread in debug
* [[f401c7177](https://github.com/dfinity/ic/commit/f401c7177)]  Networking: chore: Add the starting interval height as part of the DkgMessageId key used for the in-memory poll
* [[d1902ac0e](https://github.com/dfinity/ic/commit/d1902ac0e)]  Networking: chore: instead of having counters for total and count use a histogram
* [[c2e5826a7](https://github.com/dfinity/ic/commit/c2e5826a7)]  Networking: Revert "dbf1b2039d chore: Remove the filter templating and use directly the height"
* [[e1bdd05b5](https://github.com/dfinity/ic/commit/e1bdd05b5)]  Node: Add sync commands to possibly resolve HostOS nondeterminism source
* [[abf1d6606](https://github.com/dfinity/ic/commit/abf1d6606)]  Node: Add zstd to SetupOS
* [[1ad201eb5](https://github.com/dfinity/ic/commit/1ad201eb5)]  Node: Always include AMD initramfs in SetupOS
* [[e64de01ea](https://github.com/dfinity/ic/commit/e64de01ea)]  Node: Fix small network bug in HostOS and SetupOS
* [[f1f8bdf1f](https://github.com/dfinity/ic/commit/f1f8bdf1f)]  Node: Fix unset variable in SetupOS
* [[15df9dfdc](https://github.com/dfinity/ic/commit/15df9dfdc)]  Node: Fix: manageboot.sh permissions
* [[7e9c08b91](https://github.com/dfinity/ic/commit/7e9c08b91)]  Node: Speed up setupos install
* [[ae0fdfd5e](https://github.com/dfinity/ic/commit/ae0fdfd5e)]  Node: Use a dev update image when using ic-prep
* [[82a4c9a25](https://github.com/dfinity/ic/commit/82a4c9a25)]  Node: feat: - Report node generation status
* [[66b072419](https://github.com/dfinity/ic/commit/66b072419)]  Node: fix: - Fix cpu thread detection for gen1 nodes
* [[fa8cb52e8](https://github.com/dfinity/ic/commit/fa8cb52e8)]  Runtime: Add query stats to canister status endpoint
* [[5af138f8e](https://github.com/dfinity/ic/commit/5af138f8e)]  Runtime: Increase max number of globals to `1000`
* [[1f3720715](https://github.com/dfinity/ic/commit/1f3720715)]  Runtime: Increase table.get and ref.is_null complexity
* [[dd2169158](https://github.com/dfinity/ic/commit/dd2169158)]  Runtime: Pre instantiate wasm instances during compilation
* [[e2595f074](https://github.com/dfinity/ic/commit/e2595f074)]  Runtime: feat: Add call context performance counter for cleanups
* [[fdab67689](https://github.com/dfinity/ic/commit/fdab67689)]  Runtime: feat: Add call context performance counter for queries
* [[a5bc09335](https://github.com/dfinity/ic/commit/a5bc09335)]  Runtime: feat: Add call context performance counter for responses
* Various tech-debt management: code refactoring, docs, bug fixes, test updates

# IC-OS Verification

To build and verify the IC-OS disk image, run:

```
# From https://github.com/dfinity/ic#verifying-releases
sudo apt-get install -y curl && curl --proto '=https' --tlsv1.2 -sSLO https://raw.githubusercontent.com/dfinity/ic/c2e5826a783f74a23f7e6182e24c85ee674b8893/gitlab-ci/tools/repro-check.sh && chmod +x repro-check.sh && ./repro-check.sh -c c2e5826a783f74a23f7e6182e24c85ee674b8893
```

The two SHA256 sums printed above from a) the downloaded CDN image and b) the locally built image,
must be identical, and must match the SHA256 from the payload of the NNS proposal.

-------------------------

Luka | 2023-10-20 21:21:14 UTC | #2

And there is another “feature build” that enables [QUIC ](https://en.wikipedia.org/wiki/QUIC) protocol for state sync. We would like to deploy it to a subset of subnets again. Here is the [proposal 125321](https://dashboard.internetcomputer.org/proposal/125321)

-------------------------

wpb | 2023-10-23 00:22:59 UTC | #3

Reviewers for the CodeGov project have completed our review of these replica updates.

Proposal ID: **125321**
Vote: **ADOPT**
Full report: [CodeGov portal on DSCVR](https://dscvr.one/post/1197961714254566307/nns-proposal-125321) 

Proposal ID: **125320**
Vote: **ADOPT**
Full report: [CodeGov portal on DSCVR](https://dscvr.one/post/1197961714254566306/nns-proposal-125320) 

Neuron: CodeGov
NeuronID: 2649066124191664356
Voting history: [Dashboard](https://dashboard.internetcomputer.org/neuron/2649066124191664356?vh-s=100&vh-topic=TOPIC_REPLICA_VERSION_MANAGEMENT)
Website: codegov.org

At the time of this comment on the forum there are still 2 days left in the voting period, which means there is still plenty of time for others to review the proposal and vote independently.  

We had several very good reviews of the Release Notes on these proposals by @Zane, @cyberowl, @ZackDS, @massimoalbarello, and @ilbert.  The IC-OS Verification was also performed by @Gekctek and @tiago89.  I recommend folks talk a look and see the excellent work that was performed on these reviews by the entire CodeGov team.  Feel free to comment here if you have any questions or suggestions.

-------------------------

wpb | 2023-10-23 00:31:02 UTC | #4

Hey @Luka here are some potential discrepancies that were found by the CodeGov team on [Proposal 125320](https://dashboard.internetcomputer.org/proposal/125320).  I bring these to your attention in case you want to alert the change owner for further review.  None of these issues caused the respective CodeGov reviewer to reject the proposal, so they should be minor.

@Zane was curious why a value was hardcoded instead of using an existing constant…
[5af138f8e]
Category: Runtime
- Increases MAX_GLOBALS from 300 to 1000. A test has been updated to reflect the new limit, wonder if there is a reason that lead them to hardcode the value instead of using the existing constant.

@massimoalbarello indicated that it’s not clear how the changes match the commit message…
[3d8309b06]
- not clear to me why the changes reflect the commit description but there is nothing suspicious

@ilbert indicated there is a discrepancy between the commit message and the code change…
[7653676ce]
- Moves QueryStatsPayloadBuilderImpl into payload_builder.rs file. Validator is not implemented as stated in the commit message.

@ilbert expressed concern that function docs are wrong since a function was renamed…
[1a01f85fc]
- Introduces would_retain_idkg_public_keys_modify_pubkey_store function in PublicKeyStore trait to check if the keystore would be modified. The [function docs](https://github.com/dfinity/ic/commit/1a01f85fc#diff-f977a777be7610b264810ed71034b32f3b19b245c9158d7b4efa8b0fc8d82b88R114) are wrong, since retain_most_recent_idkg_public_keys_up_to_inclusive has been renamed to retain_idkg_public_keys_since.

-------------------------

mathiasb | 2023-10-23 07:22:04 UTC | #5

Thanks for the review and feedback, @wpb and @ilbert! The last comment regarding the function docs is valid - an existing internal function was renamed, but the docs still reference the old function name. We'll have this fixed for the next release.

-------------------------

berestovskyy | 2023-10-23 19:52:28 UTC | #6

> Increases MAX_GLOBALS from 300 to 1000. A test has been updated to reflect the new limit, wonder if there is a reason that lead them to hardcode the value instead of using the existing constant.

The IC Interface Specification [defines the maximum supported number of globals](https://internetcomputer.org/docs/current/references/ic-interface-spec#system-api-module). The above mentioned test is part of the specification acceptance suite, and it must be aligned with the specification, not the code base.

There are many spec constants scattered across the code base, so defining all those specification constants as a separate module might be a good idea...

-------------------------

