diegop | 2021-12-07 03:47:36 UTC | #1

## 1. Summary

This is a motion proposal for the long-term R&D of the DFINITY Foundation, as part of the follow-up to this post: [Motion Proposals on Long Term R&D Plans](https://forum.dfinity.org/t/motion-proposals-on-long-term-r-d-plans/9261) (Please read this post for context).

### This project's objective
The boundary nodes are the gateways to the IC. Their main purpose is to translate HTTP requests from users into calls to canister smart contracts on the IC and route calls to nodes on the corresponding subnet. In addition, boundary nodes provide load balancing, caching, rate limiting, IPv4-IPv6 translation (as IC nodes all use IPv6), and integrity verification for content served to users. This motion proposal sets the future roadmap for boundary nodes. It is proposed to enhance the design and implementation of the boundary nodes in several aspects, to make their deployment and operation more decentralized, make them easier to deploy and upgrade, and increase their security. 

## 2. Discussion lead

Yotam Harchol

## 3. How this R&D proposal is different from previous types

Previous motion proposals have revolved around specific features and tended to have clear, finite goals that are delivered and completed. They tended to be measured in days, weeks, or months.

These motion proposals are different and are defining the long-term plan that the foundation will use, e.g., for hiring and organizational build-out. They have the following traits and patterns:

1. Their scope is years, not weeks or months as in previous NNS motions
2. They have a broad direction but are active areas of R&D so they do not have an obvious line of execution.
3. They involve deep research in cryptography, networking, distributed systems, language, virtual machines, operating systems.
4. They are meant to match the strengths of where the DFINITY foundation’s expertise is best suited.
5. Work on these proposals will not start immediately.
6. There will be many follow-up discussions and proposals on each topic when work is underway and smaller milestones and tasks get defined.

An example may be the R&D for “Scalability” where there will be a team investigating and improving the scalability of the IC at various stages. Different bottlenecks will surface and different goals will be met.

## 3. How this R&D proposal is similar to what we have seen

We want to double down on the behaviors we think have worked well. These include:

1. Publicly identifying owners of subject areas to engage and discuss their thinking with the community
2. Providing periodic updates to the community as things evolve, milestones reached, proposals are needed, etc...
3. Presenting more and more R&D thinking early and openly.

This has worked well for the last 6 months so we want to repeat this pattern.

## 4. Next Steps

[ ] Developer forum intro posted
[ ] 1-pager from the discussion lead posted
[ ] NNS Motion proposal submitted

## 5. What we are asking the community

* Ask questions
* Read 1-pager 
* Give feedback
* Vote on the motion proposal

Frankly, we do not expect many nitty-gritty details because these are meant to address projects that go on for long time horizons.

The DFINITY foundation’s only goal is to improve the adoption of the IC so we want to sanity-check the projects we see necessary for growing the IC by having you (the ICP community) tell us what you all think of these active R&D threads we have.

## 6. What this means for the existing Roadmap or Projects

In terms of the current roadmap and proposals executed, those are still being worked on and have priority. 

An intellectually honest way to look at this long-term R&D project is to see them as the upstream or “primordial soup” from which more baked projects emerge from. With this lens, these proposals are akin to asking, “what kind of specialties or strengths do we want to make sure DFINITY foundation has built up?”

Most (if not all) projects that the DFINITY foundation has executed or is executing are borne from long-running R&D threads. Even when community feedback tells the foundation, “we need X” or “Y does not work”, it is typically the team with the most relevant R&D area that picks up the short-term feature or project.

-------------------------

diegop | 2021-12-07 04:47:15 UTC | #2

**Please note:**

Some folks gave asked if they should vote to “reject” any of the Long Term R&D projects as a way to signal prioritization. The answer is simple: “No, please, ACCEPT” :wink:

These long-term R&D projects are the DFINITY’s foundation’s thesis at R&D threads it should have across years (3 years is the number we sometimes use internally). We are asking the community to ACCEPT (pending 1-pager and more community feedback of course). Prioritization can come at a separate step.

-------------------------

yotam | 2021-12-07 09:39:54 UTC | #3

Hi, I'm Yotam, a researcher at DFINITY.
My research is focused on networked systems, distributed systems, and edge computing.
I am driving this proposal, but many other people at DFINITY are working on the Boundary Nodes with me. 
I would be happy to answer any question, take suggestions from the community, and engage in more detailed discussion.

-------------------------

Robertelite | 2021-12-07 09:55:50 UTC | #4

hi thanks for sharing information and Really proposal for the long term R&D.

-------------------------

levi | 2021-12-07 19:56:16 UTC | #5

Hi @yotam I have a question, if a client calls a canister and the client's-agent sees that the response has an invalid bls signature or some other invalidity in the certification of the response, how can a client(the agent) request to speak to a different node on the subnet?

-------------------------

jorgenbuilder | 2021-12-08 01:00:51 UTC | #6

Are boundary nodes simple enough that they would run on more basic and diverse hardware? Could this component of the network be opened up to independent "mom and pop" operators?

-------------------------

jzxchiang | 2021-12-08 05:09:37 UTC | #7

When my browser queries DNS for the IP address of, say, https://erxue-5aaaa-aaaab-qaagq-cai.raw.ic0.app/, which boundary node does the eventual request hit? Is it round-robin across multiple boundary nodes in different jurisdictions?

I think a helpful start would be a one pager explaining boundary nodes as they exist right now.

-------------------------

jzxchiang | 2021-12-08 05:11:17 UTC | #8

[quote="diegop, post:1, topic:9401, full:true"]
In addition, boundary nodes provide load balancing, caching, rate limiting, IPv4-IPv6 translation (as IC nodes all use IPv6), and integrity verification for content served to users.
[/quote]

I thought boundary nodes also provided TLS termination for HTTPS requests? Or is the traffic between boundary nodes and IC nodes also encrypted, so the replica software provides TLS termination?

-------------------------

ysyms | 2021-12-09 10:19:09 UTC | #9

Whether each user can run a boundary node client to access DAPPs

-------------------------

yotam | 2021-12-09 15:35:58 UTC | #10

Hi, thank you for these questions! Here are some answers:

@levi When you make a request to a boundary node, it is directed at a random node in the corresponding subnet, so a client can retry the call in such a case as you describe. The client also receives the node ID in the response, so they can see which node responded. We are checking with our security team the option to provide a feature that allows clients to specify a node.

@jorgenbuilder Our goal is to make the IC as distributed as possible. This of course includes the boundary nodes. Currently we do have some strict requirements for them such as available bandwidth and CPU, but we are looking at directions to reduce these requirements as we grow the network of boundary nodes. On the other hand, we are looking at using trusted execution environments for the boundary nodes (for enhanced security, see separate proposal on this topic), and this might be another hardware requirement. Nonetheless, TEEs become more and more available, so this may not be too bad.

@jzxchiang Re: DNS, the DNS records for *.ic0.app point to all boundary nodes. DNS Steering is used to direct you to the nearest boundary node.
Re: TLS, traffic to boundary nodes (HTTPS) and between boundary nodes and IC nodes is encrypted with TLS (as well as traffic between IC nodes). The boundary nodes terminate TLS to authenticate with the *.ic0.app certificate (because they have to authenticate), and tunnel the traffic to the corresponding IC node over a TLS connection that is established between the two.

Users are encouraged to do their own TLS termination for their own domains, for example [like Fleek](https://github.com/FleekHQ/ic-proxy). As a long term solution, we are working on having custom domains served securely. One way of doing that is proposed in the [icfront](https://github.com/dfinity/icfront) project.

@ysyms see my answer to @jzxchiang right above here, would that be what you are looking for?

-------------------------

jzxchiang | 2021-12-11 07:28:13 UTC | #11

Thanks for the response.

I'm curious what type of DNS Steering policy is used. Is it based on node health or geographic proximity?

-------------------------

yotam | 2021-12-11 15:22:26 UTC | #12

Geographic proximity

-------------------------

jzxchiang | 2021-12-14 07:57:43 UTC | #13

Interesting. What if all the requests are coming from the same region?

For example, let's say you have a dapp that's only available in New York. Then, DNS steering would route all requests from the dapp to some boundary node near New York. That seems like it could overload the node pretty quickly.

How does that boundary node then select which replica (i.e. IC node) to forward the request to? Is that also based on geometric proximity as is suggested [here](https://medium.com/dfinity/a-technical-overview-of-the-internet-computer-f57c62abc20f), or is that round-robin?

Apologies if you've answered this already.

-------------------------

ysyms | 2021-12-15 06:29:01 UTC | #14

Can we make each user run a boundary node to interact with canister in the IC subnet?

-------------------------

yotam | 2021-12-15 11:06:53 UTC | #15

@jzxchiang - currently, all requests from the same region are likely to land at the same boundary node. We all understand that this is not perfect, hence the decentralization goals in this proposal (that we will hopefully post in detail later today to this thread).
The selection of which replica to forward a request to is done randomly. The reason for it is so users could receive results from different nodes and so with high probability they don't encounter a malicious node (if such exists).

@ysyms - yes. Take a look at the [icfront](https://github.com/dfinity/icfront) project I posted before.

-------------------------

yotam | 2021-12-15 18:11:39 UTC | #16

# Boundary Nodes Motion Proposal

## Summary

The boundary nodes are the Internet Computer edge infrastructure. This motion proposal sets the future roadmap for boundary nodes. It is proposed to enhance the design and implementation of the boundary nodes in several aspects, to make their deployment and operation more decentralized, make them easier to deploy and upgrade, and increase their security.

## 1. Objective

Design, implement, and deploy enhanced scalable, decentralized, and secure network of boundary nodes for the Internet Computer. This network will serve as the edge framework of the Internet Computer and will be managed by the NNS. It will provide end-to-end security, as well as caching, for users of the IC, while being highly decentralized. The enhanced boundary nodes will also support custom domain names and TLS certificate management.

## 2. Background

Boundary nodes provide the network edge services of the Internet Computer (IC) including enabling standard HTTPS requests from users to canister smart contract APIs on the IC and routing canister smart contract API calls to nodes hosting those contracts on the corresponding subnet, as well as caching, load balancing, rate limiting, IPv4-IPv6 translation (as IC nodes all use IPv6), and integrity verification for content served to users.

To bring the design and implementation of the boundary nodes to the next level with respect to functionality, scalability and decentralization, the currently supported feature set is to be extended and enhanced. Furthermore, the community will be enabled to decide on the allocation and sizing of the edge infrastructure and offer custom domains.

## 3. Why is this important?

The enhancements for boundary nodes in this proposal will enable the IC community to sustainably grow the IC network in a decentralized fashion, while guaranteeing end-to-end security, and providing improved experience for users of the IC and of canister smart contracts that run on top of it.

## 4. Topics under this project

Specifically, this proposal includes the following research and development directions for boundary nodes:

1. Scalability and Reliability - support higher request rates and more client connections by means of smarter traffic management, improved load balancing over nodes in a subnet, failover and more.
2. Decentralization - allow more node providers to deploy boundary nodes by reducing the operational requirements.
3. NNS management - let the NNS manage boundary nodes, including adding, removing, and upgrading nodes and compensating node providers via proposals.
4. Security - integrate security improvements mentioned in the proposals on Trusted Execution Enhanced IC and the decentralized DNS and CA.
5. Domains - enable additional and custom domains for canister smart contracts discovery and enhanced decentralization.
6. Customizable - make it easier for node owners to control the operations and capabilities of their boundary node like API-only boundary nodes, filtering etc.
7. Resiliency - related to the scalability and decentralization goals above, improve the DoS protection mechanisms for the IC.
8. Discovery and Steering - Provide distributed discovery and steering to boundary nodes and different node providers and make it easier for the community to provide such services themselves.
9. HTTP and query API caching - Improve caching on the boundary nodes so that they are compliant with caching standards.
10. Semantic caching - use read-only canister state to serve queries directly from the boundary nodes.
11. Monitoring - enhance monitoring of boundary nodes using, for example, probing, and improved metrics. Provide metrics access to the community e.g. for use in node provider remuneration.
12. Boundary Node Economy - provide remuneration for running boundary nodes and charging canisters for support services (e.g., serving cached results).
13. Compliance with local laws - as recently discussed by the community, the boundary node providers may be liable, by local laws, for content served through their nodes. Our intent is to research mechanisms, review community suggestions, and propose to the community possible mechanisms that would empower boundary node providers to restrict content served through their nodes, such that they remain compliant with local laws. As a consequence of the decentralization goal, the content might still be accessible from other jurisdictions.

## 5. Key milestones

The following milestones are indicative and may not be reached in the order listed here.

* M1: Provide a public and open source process for building a boundary node VM deterministically.
* M2: Enable additional boundary nodes on different domains and include support for them in the CDKs/agent code.
* M3: Have additional boundary nodes either API-only and/or on different domains.
* M4: Introduce an economic model for boundary nodes based on additional monitoring.
* M5: Enable the boundary nodes to be deployed and updated via NNS proposals.
* M6: Increase the number of NNS controlled and remunerated boundary nodes and node providers.
* M7: Improved Scalability, Resilience and Standards Compliant Caching
* M8: Trusted Execution for improved security
* M9: Distributed Discovery and Steering
* M10: Semantic Caching

## 6. People involved

Discussion leads: Yotam Harchol, John Plevyak, Björn Tackmann, Rüdiger Kapitza

## 7. Why the DFINITY Foundation should make this a long-running R&D project

Boundary nodes are necessary for the Internet Computer, to provide transparent access for web users, as well as to secure the IC. Boundary nodes are part of the IC, and therefore should be as secure and as decentralized as possible. Therefore, the DFINITY Foundation is committed to researching and designing the next generation of boundary nodes including the above-mentioned areas for the benefit of the IC as a whole.

## 8. Skills and Expertise necessary to accomplish this

The problems described above require the cooperation of networking experts with security and cryptography experts, to design, review, and implement the prospective solutions, as well as to provide detailed security reviews and proofs. Specifically, experts from the following fields are necessary:

* Network systems
* Network management
* Network security
* Systems security
* Secure hardware
* Cryptography
* Distributed systems
* Economics

This project would require both researchers and software engineers with expertise in the above-mentioned fields.

## 9. Open research questions

* Efficiently load balance subnet nodes at the boundary nodes, without introducing high bandwidth and computation overheads
* Fully decentralized discovery and routing for unmodified standard Web2 devices and users
* Semantic caching - execute query calls directly on the boundary nodes, using read-only replicated state and possibly different consistency guarantees
* Boundary node economy - develop an economic model for running the boundary nodes edge network
* Compliance with local laws based on the location of boundary nodes

## 10. Examples where the community can integrate into project

As boundary nodes are an important piece of the IC infrastructure, we expect high community interest in this proposal. We invite the community to join the engineers and researchers of DFINITY in the discussion of this topic. We welcome any ideas for the topics above, as well as any critical assessment. We plan to keep the community posted on this topic on a regular basis.

## 11. What we are asking the community

Please review this proposal and provide us with any feedback you have regarding the boundary nodes. Please also review the other related proposals on trusted execution environments and decentralized DNS and CA. We invite you to engage in the discussion and hope it will be fruitful and useful for the IC community and for the future edge framework of the IC.

-------------------------

jzxchiang | 2021-12-16 21:10:54 UTC | #17

This is a massive undertaking―but absolutely critical.

Decentralizing boundary nodes, bringing them under the control of NNS, creating economic remuneration schemes, etc... it spans the whole stack.

The more I think about it, boundary nodes are a high-risk point of failure for the IC. Even though replicas go through consensus, boundary nodes don't. What if a malicious party runs a boundary node and modifies canister responses to make it seem like they reached consensus on something they in fact did not?

Is this where a deterministic, verified build process for boundary nodes comes into play? (Now that I think about it, this problem might have already been solved... how does DFINITY ensure that node providers are actually running the correct, unmodified replica software?)

-------------------------

jzxchiang | 2021-12-16 21:12:25 UTC | #18

[quote="yotam, post:15, topic:9401, full:true"]
The selection of which replica to forward a request to is done randomly. The reason for it is so users could receive results from different nodes and so with high probability they don't encounter a malicious node (if such exists).
[/quote]

Hmm.. doesn't that kind of defeat the purpose of DNS steering, if a us-west1 boundary node has to communicate with a asia-east2 replica? That still seems high latency.

-------------------------

yotam | 2021-12-17 08:23:33 UTC | #19

@jzxchiang You are correct, but please take into account the following two issues:
1. We would like the IC (and its clients) to be resilient to malicious nodes and node providers.
2. The boundary node provides caching (and will provide more enhanced caching in the future as you can see in the proposal), so the DNS steering purpose is not completely defeated.

-------------------------

yotam | 2021-12-20 14:38:21 UTC | #20

@jzxchiang I missed your first question, about the VM build and malicious boundary nodes. This is covered more thoroughly in the [Decentralized CA and DNS](https://forum.dfinity.org/t/long-term-r-d-decentralized-ca-and-dns-proposal/9669) and [TEE Enhanced IC](https://forum.dfinity.org/t/long-term-r-d-tee-enhanced-ic-proposal/9384) proposals, but yes -- this is definitely something we think about and would like the community to discuss and drive forward.

-------------------------

diegop | 2021-12-20 19:15:37 UTC | #21

NNS Motion is live! https://dashboard.internetcomputer.org/proposal/35671

-------------------------

icpbull | 2022-03-04 09:52:08 UTC | #22

[quote="yotam, post:16, topic:9401"]
Domains - enable additional and custom domains for canister smart contracts discovery and enhanced decentralization.
[/quote]

Just for clarification: do you mean domains other than *.ic0.app?

-------------------------

yotam | 2022-03-04 10:14:01 UTC | #23

[quote="icpbull, post:22, topic:9401, full:true"]
Just for clarification: do you mean domains other than *.ic0.app?
[/quote]
Yes, we also mean such domains.

-------------------------

icpbull | 2022-03-04 10:39:23 UTC | #24

I am thinking about the following scenario: if a country doesn't want Internet Computer dapps, they can just block the *.ic0.app domains and no one in the country can access dapps on the IC. In this proposal, you want to add more domains, but countries can just block those as well right? Is there a way for the IC to make it accessible for everyone even if countries have the power to block certain domains? 
Thanks!

-------------------------

gabe | 2022-04-04 09:30:49 UTC | #25

Do you have any updates about how we can prevent malicious boundary nodes from serving modified responses, such as a tampered service worker?

-------------------------

rrkapitz | 2022-04-04 14:49:35 UTC | #26

Hi Gabe, we are looking into various ways to mitigate this. In fact we might provide multiple things to address this issue, because each measure has its own pros and cons. One direction is likely a web extension -- here it can only be a point solution because the web extension needs substantial API support and for example Chrome likes to limit their extension APIs more and more. On the other side trusted execution is explored and we will amplify our efforts here during the next month. While trusted execution gives additional security it is not a silver bullet due to side-channel attacks that we have to take into account. Hope this helps a bit.

-------------------------

gabe | 2022-04-04 15:14:31 UTC | #27

Hi, thank you for the answer. Do you mean a web extension as a replacement to the service worker acquired by boundary nodes? That sounds like a solution, but it takes away from the current seamless user experience on the IC. This should definitely not be underestimated in my opinion and may be one deciding factor for adoption.

I'm aware of the protection against intrusions at the host level that TEEs can bring, but do you care to explain how it can help ensure that e.g boundary nodes provide an unmodified response?

-------------------------

JaMarco | 2022-04-04 15:45:07 UTC | #28

Why cant the BNs just have a replicated state that they come to consensus to and serve the SW from that state?

-------------------------

faraz.shaikh | 2022-04-04 17:14:37 UTC | #30

@JaMarco am not clear if consensus would solve the puzzle here. The replicas can propose, agree, and even sign the canonical version of the service worker. However, it still won’t stop the malicious boundary node from serving a corrupt service worker. I understand that such a tampered service worker won’t have the subnet signatures, but there is no abstraction/control point to check the signatures/authenticity of the service worker itself (in the browser)

Probably the signed service worker can be checked by the browser extension, (then again who would authenticate the extension)

-------------------------

JaMarco | 2022-04-04 17:42:26 UTC | #31

How is this different than clients getting update responses from the IC? How are those results verified in the browser?

-------------------------

rrkapitz | 2022-04-04 18:49:37 UTC | #32

Hi, web extension will not be a replacement for the service worker - it is an alternative option for the security sensitive user that likes to have the browser experience but does not like to trust in the boundary node. The idea is that the web extension will work as a drop-in solution. If you have the extension the service worker will not be loaded -- if you don't  have it  the service worker will do the job. This way user experience should not be an issue. 

Regarding trusted execution we aim to give the users means to validate via the browser and some additional easy tooling that she accesses a VM running on top of the right HW that executes the expected Boundary Node VM image. This includes the assumption that the HW is flawless and the attested code is correct -- but we will take a rouge administrator out of the equation and exploits at the host os and hypervisor level.

-------------------------

rrkapitz | 2022-04-04 19:11:42 UTC | #33

The core problem is that a browser does not know about the APIv2 protocol of the IC. Thus in order to empower a clueless browser to speak to the IC, we let the browser contact the Boundary Node. The Boundary Node can now translate the ordinary HTTP request to a IC protocol conform request or return the IC service worker to the browser. The IC service worker enhances the browser to speak natively to the IC. If we would replicate the state at the Boundary Node level we run again into the problem that the browser is clueless on how to speak to a replicated system -- in this case the Boundary Nodes. 

By providing a web extension as @faraz.shaikh pointed out, we provide the knowlege on how to speak to the IC via a different path. (That in principle could be manipulated -- however installing a web extension is a more explicit step and unlike a service worker that is frequently reloaded, a web extension needs to be updated. Thus, an explicit step, where a security sensitive user could take a closer look and inspect what is updated.)

-------------------------

gabe | 2022-04-05 06:58:13 UTC | #34

Having the web extension as an alternative surely helps with the user experience/adoption points that I mentioned earlier. I think it is great to have extra tools for security sensitive users. However, we should face that if there is an easier path, i.e not using the extension, the majority of users will take that path. If 1/3 of users on IC installs the extension and 2/3 works with a less secure option as source of truth, then that can of course be really harmful for the ecosystem. And 1/3 is probably a very generous number in the context of mass adoption. Hence, it is more interesting to discuss the security aspects of the more common "path" in my opinion.

Can you explain in more detail how a user could validate a boundary node's image to ensure that she is served an unmodified response? Also, what means exactly with the assumption that "the attested code is correct"?

-------------------------

rrkapitz | 2022-04-05 08:19:06 UTC | #35

Hi again, I fully agree with your approximation regarding the use of a web extension. However, the idea is to at least provide an alternative. Such a web extension might also be a crystallisation core for more projects in this direction such as making the ic protocol a native part of a browser. 

Regarding the validation: The current direction that we evaluate is to secure the VMs via SEV-SNP (and later TDX maybe -- see the other roadmap proposal) and empower users to perform remote attestation of the boundary node VM.  If via remote attestation you can validate that only code that you trust in is running in the VM, the VM itself is protected via hardware mechanisms and that for the connection to the boundary node there is no way to establish a man-in-the-middle -- this would be a big step forward. 

How can you know what code is running in the VM? Well there needs to be a deterministic build process to create the boundary node image from the IC repository. You can inspect the code and see that nobody can get access to the VM once it is running. (No ssh access and no backdoor.) By repeating the build you gain a hash sum that should match with the one which is included in the remote attestation report. Of course, there is more to say how remote attestation exactly works but this might lead too far here.

The critical point of course as with any software that you (have to) trust in is that there could be bugs that can be exploited or there can be side channel attacks that might enable devoted attackers to circumvent the hardware protection.  

Again you might ask, user experience?! The remote attestation will be again performed mainly by security sensitive users -- via another web extension -- or even a standalone tool. (In both cases the effective code will be very small and easy to validate and transfer.) In this case however the security-sensitive  users will do something for the others. In case we have say only 10% of users doing remote attestation the likely hood of hosting a rogue boundary node is very limited to not get spotted. And the commodity users will benefit.

-------------------------

gabe | 2022-04-05 12:15:30 UTC | #36

I appreciate the detailed answer, thank you.

[quote="rrkapitz, post:35, topic:9401"]
In this case however the security-sensitive users will do something for the others.
[/quote]
Agreed. Solutions like this are important since, as you stated, everyday users will benefit from that as well.

Out of curiosity, have there been discussions of other strategies besides trusted execution?

Also, I understand that this is a complex problem that takes time to solve but do you have an answer to why this proposal is not prioritized more? The community interest seems low compared to other proposals. In my opinion, this might very well be the most critical part of the IC in its current state. IC's edge over other blockchains is (among many other things) the ease of access from traditional clients, which is how the vast majority access it. If we don't protect the network edge services then the rest of IC's exceptional technology feels pointless, to some degree.

-------------------------

rrkapitz | 2022-04-05 12:33:33 UTC | #37

We have considered a number of options (such as the web extension and modifying the browser etc.). Is there a specific direction that you miss? 

Well this problem has considerable priority and we are actively working on it. E.g., if you look into the ic repo you will find ic/ic-os/boundary-guestos which is a stepping stone for applying trusted execution.

-------------------------

gabe | 2022-04-20 07:23:54 UTC | #38

[quote="rrkapitz, post:37, topic:9401"]
Is there a specific direction that you miss?
[/quote]
Not really, I was just curious to hear other ideas.

Thanks again for providing more information regarding this. I am very keen to follow the progress.

-------------------------

jzxchiang | 2022-05-15 07:12:13 UTC | #39

I would love to hear about any updates regarding the boundary node decentralization effort, if there are any.

-------------------------

mparikh | 2022-05-15 08:18:30 UTC | #40

What is also clear is that BNs really need to obey the laws of the countries that they are physically located in(remember the nintendo episode?). 

Therefore to a certain extent, the desire for them to be the same (i.e. same code running in each BN) , means that the embedding of which content can be legally served (or banned) through a specific BN must be embedded in the "template" of the BN.

-------------------------

gabe | 2022-05-23 12:32:54 UTC | #41

Hi @rrkapitz, I have read in various places (e.g [here](https://smartcontracts.org/docs/current/developer-docs/glossary/#boundary-nodes)) that boundary nodes can throttle interactions, e.g for DOS protection. Can you comment on if this is currently the case, and if so - can you provide some details?

For context, I am measuring the response time of entry points to a protocol I am developing and want to make many calls to then compute an average, standard deviation, etc. I want to make sure that I am not being throttled and thus getting a deceptive result. And IF I am likely being throttled, I want to know how long sleep time I need to add in between the function calls.

-------------------------

jzxchiang | 2022-05-24 00:30:37 UTC | #42

Definitely true. See this excellent [post](https://forum.dfinity.org/t/how-would-internet-identity-handle-a-denial-of-service-attack/12791/7?u=jzxchiang) by @faraz.shaikh.

-------------------------

gabe | 2022-05-24 13:20:53 UTC | #43

Just what I was looking for. Thank you for the response!

-------------------------

