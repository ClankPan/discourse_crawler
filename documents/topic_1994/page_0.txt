chchrist | 2021-02-17 10:02:02 UTC | #1

Hello all,

I'm learning Motoko and I have this simple function

    func shuffle(arr:Array) {}

which returns

> type error [M0029], unbound type Array

Can you tell me what am I doing wrong?

-------------------------

Ori | 2021-02-17 12:03:13 UTC | #2

You’ll need to add an import for the Array module at the top of your file, this pulls the type in from the base library:
`import Array “mo:base/Array”;`

-------------------------

chchrist | 2021-02-17 14:20:45 UTC | #3

thank you for the answer. I did this and I got the same error. I'm using 0.6.21

    import Array "mo:base/Array";


       actor {

        func shuffle(arr:Array) {
        
       }

    }

-------------------------

Ori | 2021-02-17 14:39:46 UTC | #4

Ah, apologies, you’ll want to use brackets for array types, so for an array that stores type Nat you’d use:
`func shuffle(arr: [Nat]) {...`

-------------------------

Ori | 2021-02-17 15:12:29 UTC | #5

You can see some more examples of array usage here: [https://sdk.dfinity.org/docs/language-guide/mutable-state.html#immutable-arrays](https://sdk.dfinity.org/docs/language-guide/mutable-state.html#immutable-arrays)

-------------------------

chchrist | 2021-02-17 15:21:29 UTC | #6

Ah, I see. The type system is very close to Typescript.

This works for me,

    func shuffle<T>(arr:[T]) :[T]{
        return arr;
    };

Next challenge, find the length of an array!

-------------------------

Ori | 2021-02-17 16:17:43 UTC | #7

`arr.size()` will do the trick.

-------------------------

chchrist | 2021-02-17 16:22:40 UTC | #8

ah perfect ty!  By the way, it is missing from the docs https://sdk.dfinity.org/docs/base-libraries/array

-------------------------

Gabriel | 2021-02-18 16:46:34 UTC | #9

you can track it here: 

https://github.com/dfinity/motoko-base/pull/213

-------------------------

macabe32 | 2022-03-08 23:33:49 UTC | #10

would it be the same syntax for index?

I am getting 
>  type error [M0029], unbound type index

-------------------------

