kristofer | 2024-02-09 10:25:08 UTC | #1

Hey! I have written about `ic_siwe` before but now it is time to more formally announce the project and let you know it is ready to be tried and tested :slight_smile: 

`ic-siwe` is a project that enables Ethereum wallet-based authentication for applications on the [Internet Computer](https://internetcomputer.org) (IC) platform. The goal of the project is to enhance the interoperability between Ethereum and the Internet Computer platform, enabling developers to build applications that leverage the strengths of both platforms.

![header|690x388](upload://n18i9JBLYQvypWrkY3lGF1ND6gW.png)

## Features

- **Ethereum Wallet Sign-In**: Enables Ethereum wallet sign-in for IC applications. Sign in with any eth wallet to generate an IC identity and session.

- **Session Identity Uniqueness**: Ensures that session identities are specific to each application's context, preventing cross-app identity misuse.

- **Consistent Principal Generation**: Guarantees that logging in with an Ethereum wallet consistently produces the same Principal, irrespective of the client used.

- **Direct Ethereum Address to Principal Mapping**: Creates a one-to-one correlation between Ethereum addresses and Principals within the scope of the current application.

- **Timebound Sessions**: Allows developers to set expiration times for sessions, enhancing security and control.

- **Prebuilt Identity Provider**: Provides a prebuilt canister that can be integrated into any Internet Computer application, independent of the application's programming language.

## Usage

Developers have two options to use SIWE in their IC applications:

1. **Use the prebuilt [ic_siwe_provider](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe_provider) canister**: This is the easiest way to integrate SIWE into an Internet Computer application. The pre-built canister is added to the project `dfx.json` and then configured to meet the needs of the application. `ic_siwe_provider` can be added to any Internet Computer application, independent of the application's programming language.

2. **Use the [ic_siwe](https://crates.io/crates/ic_siwe) library**: This allows developers full control over the SIWE integration. The `ic_siwe` Rust library provides all the necessary tools for integrating SIWE into IC canisters.

### SIWE login flow

The below diagram illustrates the high-level login flow when using the `ic_siwe_provider` canister.

1. An ICP application requests a SIWE message from the `ic_siwe_provider` canister on behalf of the user.

2. The application displays the SIWE message to the user who signs it with their Ethereum wallet.

3. The application sends the signed SIWE message to the `ic_siwe_provider` canister to login the user. The canister verifies the signature and creates an identity for the user.

4. The application retrieves the identity from the `ic_siwe_provider` canister.

5. The application can now use the identity to make authenticated calls to canisters.

![flow|465x500](upload://alEsUBxAT6a6kMjjn0IxDzGhoM9.png)

## Resources

`ic-siwe` consists of two main packages: the Rust support library and the prebuilt identity provider canister. The project also includes React demo applications and React hooks for easy frontend integration with SIWE enabled Internet Computer canisters.

### [ic_siwe](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe)

Rust library that provides the necessary tools for integrating Sign-In with Ethereum (SIWE) into IC canisters, allowing users to sign in using their Ethereum wallets.

### [ic-siwe-provider](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe_provider)

Prebuilt canister serving as a SIWE identity provider for Internet Computer canisters. `ic_siwe-provider` packages the [ic_siwe](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe) library and makes it available as a canister that can easily be integrated into any Internet Computer application, independent of the application's programming language.

### [ic-siwe-react-demo-rust](https://github.com/kristoferlund/ic-siwe-react-demo-rust)

React demo application that demonstrates how to integrate SIWE into an Internet Computer canister using the [ic-use-siwe-identity](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic-use-siwe-identity) hook and [ic-siwe-provider](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe_provider) canister.

Try the deployed demo here: https://shtr2-2iaaa-aaaal-qckva-cai.icp0.io

### [ic-siwe-react-demo-ts](https://github.com/kristoferlund/ic-siwe-react-demo-ts)

Same demo as above but this time the backend canister is written in TypeScript using [Azle](https://github.com/demergent-labs/azle).

Try the deployed demo here: https://zwsg3-myaaa-aaaal-qdf7q-cai.icp0.io/

### [ic-use-siwe-identity](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic-use-siwe-identity)

React hook and context provider for easy frontend integration with SIWE enabled Internet Computer canisters.

### [ic-use-actor](https://github.com/kristoferlund/ic-use-actor)

React hook and context provider for managing Internet Computer (IC) actors with features like type safety and request/response interceptors. `ic-use-actor` makes interacting with Internet Computer canisters more fun!

## License

This project is licensed under the MIT License. 

## Future Plans

The project is still in active development. Before using `ic-siwe` in production, I would like to do a more formal security audit.

Also, I want to integrate SIWE into more demo applications, ideally some wallet application.

Most likely, there are features missing in the current implementation. If you have any ideas or requests for features, please let me know by opening an issue on the [GitHub repository](https://github.com/kristoferlund/ic-siwe).

-------------------------

0rions | 2024-02-09 11:14:54 UTC | #2

Hey! I just had a super quick look at your code, I already thought about this idea and like how you did it. I'll try to dive a bit more into the code.

For such a critical canister I hope you'll get a proper audit, are you already in contact with some teams? Maybe someone from dfinity that knows Internet Identity could look at your code.

-------------------------

kristofer | 2024-02-09 11:16:28 UTC | #3

I am sure @frederikrothenberger would have some great comments 😀. Large parts of the delegation creation code is copied from II.

-------------------------

0rions | 2024-02-09 11:17:41 UTC | #4

Cool, I also pinged someone else from the II team to take a look.

-------------------------

timo | 2024-02-09 19:10:42 UTC | #5

Sounds great. Is there a description in greater detail of the steps that you outlined above and the diagram?

-------------------------

kristofer | 2024-02-09 20:01:57 UTC | #6

In the [ic_siwe](https://github.com/kristoferlund/ic-siwe/tree/main/packages/ic_siwe) readme the flow is described in a little greater detail. The whole flow is taken care of by these three methods in the provider canister:

```
service : (settings_input : SettingsInput) -> {
  "siwe_prepare_login" : (Address) -> (PrepareLoginResponse);
  "siwe_login" : (SiweSignature, Address, SessionKey) -> (LoginResponse);
  "siwe_get_delegation" : (Address, SessionKey, Timestamp) -> (GetDelegationResponse) query;
};
```

One option would be to schedule a code walkthrough.

-------------------------

sea-snake | 2024-02-09 22:54:30 UTC | #7

Very cool use case to see canister delegations used.

-------------------------

timo | 2024-02-10 14:40:03 UTC | #8

Thanks. Why doesn’t the second of the three functions already return the delegation? Why is the third function needed? I suppose just so that it can be called repeatedly?

And what information is used to derive the login principal?

-------------------------

kristofer | 2024-02-11 20:24:50 UTC | #9

[quote="timo, post:8, topic:27450"]
Thanks. Why doesn’t the second of the three functions already return the delegation? Why is the third function needed? I suppose just so that it can be called repeatedly?
[/quote]

`siwe_login` must be an update call to modify canister state.

`siwe_get_delegation` must be called using a query call to be able to work with canister data certificate.

II uses the same setup. First call to update state, second call to get the certified data.

[quote="timo, post:8, topic:27450"]
And what information is used to derive the login principal?
[/quote]

The delegation seed is derived a salt, the Ethereum address of the caller, and SIWE message URI.

[pub fn generate_seed(address: &EthAddress) -> Hash {](https://github.com/kristoferlund/ic-siwe/blob/9cb09117ba3451b7f160379775bacef774f05884/packages/ic_siwe/src/delegation.rs#L71)

-------------------------

frederikrothenberger | 2024-02-13 09:32:30 UTC | #10

Unfortunately, I'm a bit strapped for time right now. Unless you have some specific questions, I'm not going to dig through the code...

Very cool project though! :-D

-------------------------

timo | 2024-02-13 17:10:53 UTC | #11

So can it be considered a version of II where
a) the Eth address takes the role of the anchor
b) there is only one "device" added to it which is the Eth keypair
c) it produces the same principal for all origins
?

I have a further question about the "one-to-one correlation between Ethereum addresses and Principals" that you mentioned. That one-to-one map is not public, or?

-------------------------

sea-snake | 2024-02-13 18:10:14 UTC | #12

Main remaining issue I would see to make it production ready would be some form of proof of work and captcha check like Internet Identity has to prevent spam that fills up the canister.

-------------------------

bruno353 | 2024-02-13 20:03:47 UTC | #13

Interesting project, I will study more about it

-------------------------

kristofer | 2024-02-14 07:21:28 UTC | #14

[quote="timo, post:11, topic:27450"]
So can it be considered a version of II where
[/quote]

One important distinction is that every project deploys their own SIWE provider canister. The provider can be configured to allow the delegation to be used only with the canisters you list. Most common setup will be to allow the delegate identity to be used with the provider canister and your app canister.

[quote="timo, post:11, topic:27450"]
a) the Eth address takes the role of the anchor
[/quote]

Yes, within the context of current application, as determined by the app URI. Worth noting is that a malicious canister that wants to replicate the setup and has access to the salt and URI still cannot produce the same identity for the same ETH address since the delegation is signed by the canister.

[quote="timo, post:11, topic:27450"]
b) there is only one “device” added to it which is the Eth keypair
[/quote]

This I don't understand.

[quote="timo, post:11, topic:27450"]
c) it produces the same principal for all origins
[/quote]

What is an origin is this context? As mentioned above, one copy of the provider canister is meant to support only one app. Attempting to generate an identity with a call from a frontend running on the "wrong" domain will show up as a big red warning in Metamask. 

[quote="timo, post:11, topic:27450"]
I have a further question about the “one-to-one correlation between Ethereum addresses and Principals” that you mentioned. That one-to-one map is not public, or?
[/quote]

It presently is. Many apps will need to be able to lookup this information to see if the current caller has an identity generated from SIWE, and in that case, for which address.

In other cases, there is no need. I believe that to be the case with the icrc-1 wallet. Once identity has been generated it is of no importance what ETH address was used to generate the identity.

I might add a configuration option to turn the mapping on and off. Projects that have specific needs around this probably want to just fork the provider canister code and modify as they see fit.

-------------------------

kristofer | 2024-02-14 07:27:00 UTC | #15

[quote="sea-snake, post:12, topic:27450, full:true"]
Main remaining issue I would see to make it production ready would be some form of proof of work and captcha check like Internet Identity has to prevent spam that fills up the canister.
[/quote]

One might say that the signing of the message is sort of a proof of work. It can of course be scripted though. You can create a script that creates an infinite number of wallets and log into the canister until it runs out of storage.

Rate limiting in the provider canister would be a less clunky solution than forcing users to solve a captcha every time they login. I am not sure to what extent this can be done in a canister though, I don't believe you have access to enough information on the caller, IP address for instance.

-------------------------

timo | 2024-02-15 19:16:40 UTC | #16

[quote="kristofer, post:14, topic:27450"]
[quote="timo, post:11, topic:27450"]
b) there is only one “device” added to it which is the Eth keypair
[/quote]

This I don’t understand.
[/quote]

In analogy to II, you could enhance your provider canister in a way that I can add additional authentication methods to my identity which is derived from my ETH address. Once the link between ETH address and its derived principal is established I could add other authentication methods such as passkeys or devices to it. I would have to sign off on the (first) addition with Ethereum key with a special sign-with-ethereum message. In that sense the analogy with II is that the ETH address is the anchor and the corresponding ETH private key is the first "device" added to it. But there could theoretically be more devices/passkeys added to it as well.

-------------------------

timo | 2024-02-15 19:33:04 UTC | #17

[quote="kristofer, post:14, topic:27450"]
[quote="timo, post:11, topic:27450"]
c) it produces the same principal for all origins
[/quote]

What is an origin is this context? As mentioned above, one copy of the provider canister is meant to support only one app. Attempting to generate an identity with a call from a frontend running on the “wrong” domain will show up as a big red warning in Metamask.
[/quote]

By origin I meant domain or URL where the frontend is hosted. But anyway, since you explained that it is meant to be used for only one app the question is answered.

What exactly triggers the "big red warning in Metamask"? Is it when the `domain` field in the SIWE message does not match the source from which Metamask was called?

-------------------------

RMCS | 2024-02-22 16:10:28 UTC | #18

I'm trying to implement this in an exisiting project but I keep getting a `Invalid actor or address` error.

```
<ReactQueryProvider>  // wrapped QueryClientProvider
	<WagmiProvider config={config}>
		<Connect2ICProvider client={client}>
		    <SiweIdentityProvider idlFactory={siweIdlFactory} canisterId={siweCanisterId.toString()}>
               // other providers and app
            </SiweIdentityProvider>
	    </Connect2ICProvider>
	</WagmiProvider>
</ReactQueryProvider>
```

on page load i'm doing
```
const { isConnected, address } = useAccount();
const { login, prepareLoginStatus, prepareLogin } = useSiweIdentity();

	useEffect(() => {
		if (prepareLoginStatus !== 'idle' || !isConnected || !address) return;
		prepareLogin();
	}, [isConnected, address, prepareLogin, prepareLoginStatus]);
```

for the login i'm doing this
```
const login = async () => {
    await connector.connect(); // useConnect() from wagmi
    login(); // useSiweIdentity()
}
```

So i can login with metamask for example and get `{accounts: [0x..], chainId: 1}` as a response but the login from SIWE doesnt seem to work somehow.

canister is live and deployed, also tried the one from the demo `jslsm-aiaaa-aaaal-qdbpa-cai`

-------------------------

kristofer | 2024-02-22 17:27:20 UTC | #19

Do you get that on the `login()` call? 

Do you verify that `prepareLoginStatus` is `success` before you proceed?

-------------------------

RMCS | 2024-02-22 18:27:20 UTC | #20

Yes i get that on the `login()` which looks like it triggers the `prepareLogin()` (i initially thought the `useEffect()` was throwing the error.

regarding the `prepareLoginStatus`, it seems that the state never changes when logging in with wagmi. (it stays `idle`)

I also reached out to you on TG. maybe thats a bit easier / quicker for debugging this. Would post the result here afterwards ofcouse :)

also, i can safely assume that packages like `ic-use-actor` from the example repo are optional?

-------------------------

RMCS | 2024-02-22 21:03:49 UTC | #21

I figured it out, i needed to trigger the login like this after the eth wallet authentictation 
(*note that i created aliasses for `isConnected` and `identity`*)

```
useEffect(() => {
	if (isWagmiConnected && prepareLoginStatus === 'success' && !siweIdentity) {
		login();
	}
}, [isWagmiConnected, prepareLoginStatus]);
```

Now i only get the following error
```
Body: Failed to authenticate request 0xe8e61072aef5a719597f716ac0d01b7537d5263a58133cb8b73c77b01fb64a13 due to: Canister SOME_CANISTER_ID is not one of the delegation targets
```

how do i set these delegation targets?

-------------------------

RMCS | 2024-02-22 21:11:22 UTC | #22

Oh it’s on the init on the backend, posted the above question a bit to fast 😅

-------------------------

kristofer | 2024-02-22 21:37:02 UTC | #23

Great to hear! All good then?

The SIWE provider canister needs to be configured with info about for which canisters the delegate identity is valid.

From the Makefile:

```
deploy-provider:
	dfx deploy ic_siwe_provider --argument "( \
	    record { \
	        domain = \"127.0.0.1\"; \
	        uri = \"http://127.0.0.1:5173\"; \
	        salt = \"salt\"; \
	        chain_id = opt 1; \
	        scheme = opt \"http\"; \
	        statement = opt \"Login to the SIWE/IC demo app\"; \
	        sign_in_expires_in = opt 300000000000; /* 5 minutes */ \
	        session_expires_in = opt 604800000000000; /* 1 week */ \
	        targets = opt vec { \
	            \"$$(dfx canister id ic_siwe_provider)\"; \
	            \"$$(dfx canister id backend)\"; \
	        }; \
	    } \
	)"
```

`targets` can also be an empty vec, in that case identity is valid for any canister.

-------------------------

RMCS | 2024-02-22 21:44:09 UTC | #24

For the login part everything is good, now i only need to find i a nice way to make it work with our existing setup, but i'm sure i can make it work.

The empty targets is a nice one to keep in mind!

Appreciate the help

-------------------------

kristofer | 2024-02-23 10:21:14 UTC | #25

[quote="timo, post:17, topic:27450"]
What exactly triggers the “big red warning in Metamask”? Is it when the `domain` field in the SIWE message does not match the source from which Metamask was called?
[/quote]

Yes, you need to trigger the signature request from the frontend domain listed in the SIWE message. Otherwise warning. Not all wallets do this unfortunately so there still remains a phishing risk with SIWE login in combination with wallets that do not fully support the SIWE protocol.

-------------------------

jennifertran | 2024-04-16 22:37:10 UTC | #26

Why do you need a `salt` to build the `ic-siwe-provider`?

-------------------------

kristofer | 2024-04-17 06:38:39 UTC | #27

The salt is used during the creation of user seeds, together with the ethereum address of calling user and (possibly) the frontend url. Internet Identity uses it the same way.

https://github.com/dfinity/internet-identity/blob/main/docs/ii-spec.md#salt

-------------------------

jennifertran | 2024-05-14 00:33:22 UTC | #28

Is there anything additional that you have to do to be able to make authenticated calls? 

I implemented an app similar to the `ic-siwe-react-demo-ts` except for using `ic-use-actor`. I do receive a delegated identity when calling the hooks provided in the `ic-use-siwe-identity` package:

`const { identity } = useSiweIdentity();`

However, when I run `ic.caller()` in the backend, I still get returned an anonymous principal.

-------------------------

kristofer | 2024-05-14 11:04:45 UTC | #29

If you are not using `ic-use-actor` then you need to create an authenticated actor yourself. Have you done that?

From the `ic-use-actor` code:

```TypeScript
const agent = new HttpAgent({ identity, ...httpAgentOptions });

if (process.env.DFX_NETWORK !== "ic") {
  agent.fetchRootKey().catch((err) => {
    console.warn(
      "Unable to fetch root key. Check to ensure that your local replica is running"
    );
    console.error(err);
  });
}

const actor = Actor.createActor<typeof context>(idlFactory, {
  agent,
  canisterId,
  ...actorOptions,
});
```
https://github.com/kristoferlund/ic-use-actor

-------------------------

