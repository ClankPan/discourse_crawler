senior.joinu | 2022-03-01 19:42:24 UTC | #1

Hey everybody. I'm working on a series of tutorials about [`ic-cron`](https://github.com/seniorjoinu/ic-cron). This is the first one about how one can extend Sonic exchange by leveraging Open Internet Services paradigm.

Please, take a look. I would be very thankful if you could provide any feedback (post it here or in comments) and if you could repost it through your social media channels.

https://hackernoon.com/tutorial-extending-sonic-with-limit-orders-using-ic-cron-library

-------------------------

senior.joinu | 2022-02-05 12:35:41 UTC | #2

By the way, `ic-cron` was promoted to version `0.5`! 

What's new:
* simplified API (no more task `kind` - use your own type to differentiate between tasks);
* added `delay` scheduling argument (now you can schedule a task to execute each monday 3PM at any other day of week);
* cron state is now candid-serializable, which means that you can persist it between canister upgrades (github readme contains an example of this).

-------------------------

ildefons | 2022-02-05 15:38:57 UTC | #3

What would it take to have ic-cron library in Motoko instead of Rust?

-------------------------

senior.joinu | 2022-02-05 15:41:31 UTC | #4

I don't know actually. 
Some simple (and non-efficient) version should be pretty easy to implement. But `ic-cron` uses `BinaryHeap` collection, that makes it a lot more faster. So if you want a Motoko version of this library to have the same performance it will take same effort.

-------------------------

coin_master | 2022-02-06 06:36:05 UTC | #5

Thanks that's really helpful, I have learned many things that I wasn't aware of.

-------------------------

jzxchiang | 2022-02-06 06:40:09 UTC | #6

FWIW there is a [Heap](https://smartcontracts.org/docs/base-libraries/Heap.html) library in Motoko, but I haven't personally tried it.

-------------------------

ComputerInternetMan | 2022-02-06 23:45:05 UTC | #7

Appreciate your effort on this Alexander. A very nice contribution!

-------------------------

davidxiao | 2022-02-07 10:47:02 UTC | #8

@senior.joinu , really valuable, it's exactly what I am looking for as a starter for IC, 

hope to have more  such similar articles.

I feel it's not easy to get the deep/practical knowledge for starter, reviewing official docs is not enough.

Getting a proper job in the field seems not easy as well at present(any other guys have similar concerns? ), 
BTW, pls drop me a msg for details if there are proper opportunities(fullstack or backend), I think i am professional and love IC, Rust :slight_smile:

-------------------------

coin_master | 2022-02-09 06:55:49 UTC | #9

@senior.joinu 
I have tried to deploy the example locally but I keep getting some error

```
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Canister rrkah-fqaaa-aaaaa-aaaaq-cai trapped explicitly: Custom(No more values on the wire, the expected type principal is not opt, reserved or null)
```
dfx version `0.9.0`

Steps I did.

`dfx start --clean`

Create canisters to get the local wallet canister needed for the next command
`dfx canister create --all`

`dfx deploy --wallet rwlgt-iiaaa-aaaaa-aaaaa-cai --argument '(principal "my_principal")'`

This builds successfully but fail at installing
`Installing canisters...
Creating UI canister on the local network.
The UI canister on the "local" network is "ryjl3-tyaaa-aaaaa-aaaba-cai"
Installing code for canister ic-cron-sonic-bot-example, with canister_id rrkah-fqaaa-aaaaa-aaaaq-cai
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Canister rrkah-fqaaa-aaaaa-aaaaq-cai trapped explicitly: Custom(No more values on the wire, the expected type principal is not opt, reserved or null)`

Also deploying to production --network ic returns the same error.

-------------------------

senior.joinu | 2022-02-09 12:01:08 UTC | #10

Did you tried that?
https://forum.dfinity.org/t/upgrade-canister-on-ic-with-new-dfx-version/10546/7?u=senior.joinu
This posts says that there is no need in `--wallet` argument if you did upgrade your dfx now.

-------------------------

coin_master | 2022-02-09 18:12:30 UTC | #11

Yes unfortunately this doesn't work and also upgrading the wallet fails for some reason.
Most probably it's related to the latest breaking changes with dfx 0.9.0

-------------------------

coin_master | 2022-02-10 14:13:01 UTC | #12

I found a work around, not sure it's correct but it unblocked me for now.
```
pub fn init() {
    let controller = caller();
....
}
```

I have another question, is there a way to test our code locally against the deployed Sonic canisters?
If I deployed that code locally it will try to find sonic canisters locally not on the mainnet and of course all the calls fails.

-------------------------

senior.joinu | 2022-02-10 19:28:11 UTC | #13

Hmm, I’m not sure if this workaround will work. Or at least you have to only call your canister from your own principal or only from your wallet.

Sonic’s code is not open sourced yet, so there is no way of testing locally.

-------------------------

senior.joinu | 2022-02-16 12:22:25 UTC | #14

![dj-khaled-another-one (1)|400x204](upload://9tTY6WUWuzJ8PBtBKLU4x8Uy8s.gif)


https://hackernoon.com/how-to-execute-background-tasks-on-particular-weekdays-with-ic-cron-and-chrono

-------------------------

jzxchiang | 2022-02-22 07:18:33 UTC | #15

Random question: do you know if ic-cron is cycle-intensive or is cheaper than the Motoko heartbeat functionality? See [here](https://forum.dfinity.org/t/why-does-a-canister-keep-consuming-cycles/10821/12?u=jzxchiang) for context.

My guess is that it's equally as cycle-intensive (since the issue is on the system level and not programming language dependent), but I could be wrong.

-------------------------

senior.joinu | 2022-02-22 11:52:29 UTC | #16

Hmm… I don’t notice any problem with expensiveness. For a tutorial about Sonic I left my canister with cron task to keep polling exchange rate for a week. And it only wasted around $1 within that time.

-------------------------

senior.joinu | 2022-03-01 19:39:47 UTC | #17

![dj-khaled-another-one (1)|400x204](upload://9tTY6WUWuzJ8PBtBKLU4x8Uy8s.gif)


https://dev.to/seniorjoinu/introduction-to-ic-cron-library-17g1

-------------------------

senior.joinu | 2022-03-01 19:40:18 UTC | #18

![dj-khaled-another-one (1)|400x204](upload://9tTY6WUWuzJ8PBtBKLU4x8Uy8s.gif)

https://dev.to/seniorjoinu/tutorial-how-to-build-a-token-with-recurrent-payments-on-the-internet-computer-using-ic-cron-library-3l2h

-------------------------

lshoo | 2022-03-19 12:05:15 UTC | #19

excellent guide, thanks!

-------------------------

Iceypee | 2022-05-10 04:54:40 UTC | #20

Thats wierd that @senior.joinu found it cheap. Now im not famliar with the rust side of things but is the heartbeat the same heartbeat timeframe as motoko (I think every block)? 

If so, It doesnt seem right that on motoko its much more expensive if this iccron library calls the heartbeat call as frequently as on motoko.

-------------------------

jzxchiang | 2022-05-11 20:48:05 UTC | #21

My understanding is that it should be the same across Rust and Motoko.

-------------------------

Dustin | 2022-11-15 12:36:04 UTC | #22

Is there a library like ic-cron also available for motoko?

-------------------------

senior.joinu | 2022-11-15 14:02:47 UTC | #23

I don’t think so. But if Timers API is already available in Motoko, you should be able to achieve the same functionality with some simple code.

-------------------------

