NathanosDev | 2023-11-06 16:27:44 UTC | #1

I'm happy to announce PicJS, a canister testing library with TypeScript/JavaScript support for PocketIC!

PicJS allows you to write integration tests for your canisters using your favorite JavaScript test runners and runtimes. If you'd like to try it out, you can:

- Install from [NPM](https://www.npmjs.com/package/@hadronous/pic)
- Check out the [API Docs](https://hadronous.github.io/pic-js/)
- Run the [examples](https://github.com/hadronous/pic-js/tree/main/examples)
- Or read through the [source code](https://github.com/hadronous/pic-js/tree/main)

PocketIC is a canister testing platform that supports deterministic, programmatic canister testing. If you want to learn more about it, you can check out the previous posts from the Testing & Verification team that have put together this wonderful tool:
- https://forum.dfinity.org/t/pocketic-fast-and-versatile-canister-testing-in-rust-and-python/23793
- https://forum.dfinity.org/t/pocketic-testing-canisters-in-python/22490

Writing tests with PicJS is as easy as this:
```typescript
import { resolve } from 'node:path';
import { Principal } from '@dfinity/principal';
import { PocketIc } from '@hadronous/pic';
import { Actor, idlFactory, _SERVICE } from '../declarations/counter';

const wasmPath = resolve('..', '..', 'counter.wasm');

describe('Counter', () => {
  let pic: PocketIc;
  let actor: Actor<_SERVICE>;

  beforeEach(async () => {
    pic = await PocketIc.create();
    const fixture = await pic.setupCanister<_SERVICE>(
      idlFactory,
      WASM_PATH,
    );
    actor = fixture.actor;
  });

  afterEach(async () => {
    await pic.tearDown();
  });

  it('should increment the counter', async () => {
    const initialCount = await actor.get();

    await actor.inc();
    const countAfterFirstInc = await actor.get();

    await actor.inc();
    const finalCount = await actor.get();

    expect(initialCount).toEqual(0n);
    expect(countAfterFirstInc).toEqual(1n);
    expect(finalCount).toEqual(2n);
  });
});
```

I'm happy to hear any feedback or answer any questions that you might have.

Disclaimer: I work for DFINITY, but this is not a DFINITY project. I'm posting in my capacity as a part-time community member.

-------------------------

cryptoschindler | 2023-11-06 19:18:29 UTC | #2

great work! i think this is worth adding to [awesome icp](https://github.com/dfinity/awesome-internet-computer) (maybe together with pocket ic)

-------------------------

NathanosDev | 2023-11-06 20:47:36 UTC | #3

Thank you!

I agree, expect a PR tomorrow ;)

-------------------------

NathanosDev | 2024-02-13 23:44:46 UTC | #4

Version `0.3.0` of PicJS has been released.

The main changes include:
 - Support for PocketIC server version `3.0.0`
    - Support for multiple subnets
    - Support for cross-subnet calls
- Added [`updateCanisterSettings`](https://hadronous.github.io/pic-js/docs/pic-js/classes/PocketIc#updatecanistersettings) to allow updating canister settings after creation (controllers etc..)
- [`tick`](https://hadronous.github.io/pic-js/docs/pic-js/classes/PocketIc#tick) now accepts an optional `number` to tick multiple times in a single call
- many public methods accept a single object instead of a list of parameters (ex: [`installCode`](https://hadronous.github.io/pic-js/docs/pic-js/classes/PocketIc#installcode))
- Added a [multicanister Motoko example](https://github.com/hadronous/pic-js/tree/main/examples/multicanister) with composite query calls and cross subnet update calls

I look forward to seeing how developers continue to improve the quality of their testing infrastructure using PocketIC :rocket:

-------------------------

skilesare | 2024-04-02 00:44:35 UTC | #5

I seem to have some trouble getting and keeping pocket ic running.  I start it from the command line:

`/Users/afat/.cache/dfinity/pocket-ic/pocket-ic`

everything looks good:

`2024-04-02T00:31:24.975295Z  INFO pocket_ic_server: The PocketIC server is listening on port 60626`

but after a bit I get:

`2024-04-02T00:32:25.087578Z  INFO pocket_ic_server: The PocketIC server will terminate`

How do I keep it running?  Do I need to specify a port to PicJS anywhere?

I'm getting an error on create canister that it can't decode some text value:

```
 Canister ryjl3-tyaaa-aaaaa-aaaba-cai trapped explicitly: failed to decode call arguments: Custom(Fail to decode argument 0

    Caused by:
        Subtyping error: text)

      64 |       
      65 |
    > 66 |         nnsledger = await pic.setupCanister<_NNSLedgerService>({
         |                     ^
      67 |           wasm : "packages/pic/wasms/ic-icrc1-ledger.wasm",
      68 |           idlFactory : nnsIdlFactory,
      69 |           targetCanisterId: Principal.fromText("ryjl3-tyaaa-aaaaa-aaaba-cai"),
```

I may be doing something horribly wrong because I'm using the nns-ledger wasm I found in my /Users/afat/.cache/dfinity/versions/0.18.0/wasms folder and a did file I pulled from someone else's project. I've found it all super hard to debug so far.

-------------------------

michael-weigelt | 2024-04-02 07:18:02 UTC | #6

When you start PocketIC manually, pass a time-to-live (the default is 60s):
```
./pocket-ic --ttl 600
```

Whenever PocketIC receives an HTTP request, it bumps its TTL.

-------------------------

michael-weigelt | 2024-04-02 07:20:34 UTC | #7

> wasm : "packages/pic/wasms/ic-icrc1-ledger.wasm",

I don't know the JS API, but is it possible that you should pass wasm bytes as the first argument, rather than the path of the wasm file?

-------------------------

NathanosDev | 2024-04-02 10:22:29 UTC | #8

PicJS includes and runs the PocketIC server for you, you don't need to run it manually. Thats a distinction from the Rust and Python versions.

So the server you're running manually isn't being used and that's why it just terminates.

The issue with the argument is harder to tell. Does this canister expect any init args? The path to your WASM looks relative, maybe try an absolute path.

-------------------------

skilesare | 2024-04-02 13:29:21 UTC | #9

That is super convenient! Nice!

The wasm is being pulled in correctly.

The failure is happening on the server ise after the post. It doesn't like the args even though they were successfully parsed with the IDL. I'm guessing there some discrepancy between the IDL that I have and the wasm delivered by dfx extension install nns.

I guess generally it would be awesome to have some way to have PocketIC install all the NNS canisters similar to dfx nns install.

-------------------------

michael-weigelt | 2024-04-02 13:37:57 UTC | #10

>I guess generally it would be awesome to have some way to have PocketIC install all the NNS canisters similar to dfx nns install.

This will be possible in the next release of PocketIC, because tools like ic-admin will work out of the box. @mraszyk there is no workaround in the current version, right?

-------------------------

NathanosDev | 2024-04-02 13:44:28 UTC | #11

It's possible, but a slight pain to setup. I wrote a guide on how to do that here: https://hadronous.github.io/pic-js/docs/guides/working-with-the-nns

-------------------------

skilesare | 2024-04-02 14:03:22 UTC | #12

Oh wow...ok.  So I need to pull the subnet ID because it will be different every time.  Do we know who it will give the ICP tokens to?  I guess I'll need that identity in PicJs.  What would be the best way to load it? So far I've only used the createIdentity function but I'm guessing I'll need to load the test_nns pem file to access those ICP?

-------------------------

skilesare | 2024-04-02 14:09:15 UTC | #13

I also got these errors as I was running dfx nns install:

```
2024-04-02 14:07:37.033346 UTC: [Canister rkp4c-7iaaa-aaaaa-aaaca-cai] Panicked at 'Deserialization Failed: "Cannot parse header 286f7074207265636f7264207b206379636c65735f6c65646765725f63616e69737465725f6964203d206f7074207072696e636970616c2022756d3569772d72716161612d61616161712d71616162612d63616922207d29"', rs/rust_canisters/dfn_core/src/endpoint.rs:49:41
2024-04-02 14:07:37.097886 UTC: [Canister r7inp-6aaaa-aaaaa-aaabq-cai] [Root Canister] start_canister call successful. Ok(())
2024-04-02 14:07:37.097886 UTC: [Canister r7inp-6aaaa-aaaaa-aaabq-cai] Panicked at 'called `Result::unwrap()` on an `Err` value: (CanisterError, "Canister rkp4c-7iaaa-aaaaa-aaaca-cai trapped explicitly: Panicked at 'Deserialization Failed: \"Cannot parse header 286f7074207265636f7264207b206379636c65735f6c65646765725f63616e69737465725f6964203d206f7074207072696e636970616c2022756d3569772d72716161612d61616161712d71616162612d63616922207d29\"', rs/rust_canisters/dfn_core/src/endpoint.rs:49:41")', rs/nervous_system/root/src/change_canister.rs:246:9
```
The don't look innocent.

-------------------------

NathanosDev | 2024-04-02 14:20:59 UTC | #14

The subnet Id assignment is deterministic in PocketIc, I'm not sure about DFX. The main point is that you need to know what subnet Id was assigned by DFX so you can use the same one in PocketIc.

There are some pre-assigned accounts that have some ICP that you can use, that's documented in the DFX docs: https://github.com/dfinity/sdk/blob/master/docs/cli-reference/dfx-nns.mdx#example-accessing-icp-on-the-command-line. And the example project referenced by the guide I posted above has some example usage of transferring ICP, setting up a neuron, staking and then creating proposals.

-------------------------

mraszyk | 2024-04-02 14:22:17 UTC | #15

> This will be possible in the next release of PocketIC, because tools like ic-admin will work out of the box. @mraszyk there is no workaround in the current version, right?

There's no easy workaround in the current version.

-------------------------

NathanosDev | 2024-04-02 14:23:54 UTC | #16

The most relevant code for getting control of an Identity that has ICP already loaded is here: https://github.com/hadronous/pic-js/blob/main/examples/nns_proxy/tests/src/support/identity.ts

-------------------------

skilesare | 2024-04-02 14:43:06 UTC | #17

Awesome...I found all the minter identity stuff and am up and running now. Sorry for not RTFM. :(. Thank you for writing it up!

-------------------------

skilesare | 2024-04-02 14:44:34 UTC | #18

What is the likely hood of future dfx versions braking this state?

-------------------------

NathanosDev | 2024-04-02 14:56:25 UTC | #19

I've no idea what changes may occur in the state folder, so I'd definitely encourage making a dedicated copy for your tests and keeping it separate from the .dfx directory so that there's no unexpected mutations by DFX.

-------------------------

skilesare | 2024-04-02 20:40:32 UTC | #20

Three years of debugging motoko with debug statments have left me relying on the cruch of using them when things go sideways and I can't track down what is going wrong.

Can pic give me the equivalent of the dfx output that has these logs in it?

Edit:

I was able to get these in my console by editing pocket-ic-server.js:

```
serverProcess.on('error', error => {
            if ((0, util_1.isArm)() && (0, util_1.isDarwin)()) {
                throw new error_1.BinStartMacOSArmError(error);
            }
            throw new error_1.BinStartError(error);
        });
        serverProcess.stdout.on('data', data => {
          //console.log(`stdout server: ${data}`);
        });
        serverProcess.stderr.on('data', data => {
          stderrBuffer += data.toString();
    
          // Split based on newline characters
          let lines = stderrBuffer.split('\n');
          
          // Keep the last incomplete line in the buffer
          stderrBuffer = lines.pop();
          
          // Process complete lines
          lines.forEach((line) => {
              console.error(`debug: ${line}`);
          });
        });

        serverProcess.stderr.on('close', () => {
          if (stderrBuffer.length > 0) {
              console.error(`debug final: ${stderrBuffer}`);
              stderrBuffer = ''; // Clear the buffer
          }
        });
        return await (0, util_1.poll)(async () => {
            const isPocketIcReady = await (0, util_1.exists)(readyFilePath);
            if (isPocketIcReady) {
                const portString = await (0, util_1.readFileAsString)(portFilePath);
                const port = parseInt(portString);
                return new PocketIcServer(serverProcess, port);
            }
            throw new error_1.BinTimeoutError();
        });
    }
```

My process isn't stoping properly so I've likely messed something up, but I can see my debug statements now!

-------------------------

skilesare | 2024-04-02 23:08:58 UTC | #21

Any suggestions on how to add the cycles ledger? Is it supposed to go on the NNS subnet? Or some other subnet?

 Unsuccessful validation of specified ID: Specified CanisterId um5iw-rqaaa-aaaaq-qaaba-cai is not hosted by subnet erfz5-i2fgp-76zf7-idtca-yam6s-reegs-x5a3a-nku2r-uqnwl-5g7cy-tqe.

The subnet above is my nns subnet and it looks like the cycles ledger is hosted there(https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe)

Maybe because I'm using the dfx state it has a different range?  Any way I can change the range to include that?  Maybe with DFX 19 I can get a better state that already has the cycle ledger in it?

-------------------------

NathanosDev | 2024-04-04 09:02:44 UTC | #22

> Can pic give me the equivalent of the dfx output that has these logs in it?

I originally had support for logging everything to a file, but it was causing issues specifically on Mac so I removed it for now. I haven't had time to investigate into why that was happening, but I can probably spend time on it this weekend.

> My process isn’t stoping properly so I’ve likely messed something up, but I can see my debug statements now!

What JS runtime and test runner are you using? NodeJS and Jest?

> Maybe with DFX 19 I can get a better state that already has the cycle ledger in it?

Maybe @Severin will know the status of the cycles ledger and it's integration with the NNS extension for DFX.

> Maybe because I’m using the dfx state it has a different range?

Yes, exactly.

> Any way I can change the range to include that?

Not that I'm aware of, I think you'll need to use a principal from the range for the subnet. I'm not sure how to check what the range is either, but I can probably find out if there is no support for the cycles ledger in the DFX NNS extension.

-------------------------

skilesare | 2024-04-04 11:43:23 UTC | #23

I'm using jest....Probably the ttl on the server....A cancel op via the keyboard kills it with no problem.  Possibly when I hit an error, tearDown isn't being called.

-------------------------

Severin | 2024-04-04 14:14:24 UTC | #24

If you use nns extension v0.3.1 (`dfx extension install nns --version 0.3.1`, but it should pick the right one by default) the CMC is set up to connect to the cycles ledger properly to mint cycles directly to the cycles ledger. If you don't need that function (`notify_mint_cycles`) then don't worry about the extension version.

For now the cycles ledger is not included in the nns extension so you have to install it separately.

-------------------------

zohaib29 | 2024-04-04 18:18:10 UTC | #25

Does PocketIC support Bitcoin integration?

-------------------------

NathanosDev | 2024-04-05 08:27:02 UTC | #26

Do you know when we could expect the cycles ledger to be included in the NNS extension?

-------------------------

NathanosDev | 2024-04-05 08:27:32 UTC | #27

See @mraszyk's comment here: https://forum.dfinity.org/t/is-it-possible-to-use-pocketic-to-test-bitcoin-integration/27964

-------------------------

Severin | 2024-04-08 08:25:33 UTC | #28

So far we didn't plan to add the cycles ledger to the nns extension since 1) we don't think of the cycles ledger as part of the NNS (for now) and 2) we didn't really expect there to be much demand. Do you think it should be part of the dfx exension (where on local you're likely to skip the cycles ledger anyways)? My instinct is more that it should be very straightforward to add it to PocketIC setups (and we could provide a function, code snippet, or crate for that) instead of adding it to the nns extension

-------------------------

NathanosDev | 2024-04-08 08:55:45 UTC | #29

Makes sense, thanks.

I don't know if it makes sense to be part of the DFX extension since I don't know what the use case is yet, but maybe @skilesare could fill us in on that.

> The subnet above is my nns subnet and it looks like the cycles ledger is hosted there(https://dashboard.internetcomputer.org/subnet/uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe)

Checking this again, this is the II subnet, so it should be possible to setup an II subnet in your tests, then install the cycles ledger to the correct canister Id.

I think the main difficulty here is in fetching the WASM and making it available to your test setup. This is something I'd love to streamline in PicJS somehow, possibly by integrating with DFX pull.

-------------------------

skilesare | 2024-04-08 11:21:19 UTC | #30

The main issue is that I'd really like the cycles ledger to have the same canister id as it does in mainnet like the NNS does when I capture state. I'm not sure how to accomplish this. Maybe I can set it up in the local replica and get it in the initial state if I can figure out how to assign an id on the local replica.

-------------------------

Severin | 2024-04-08 11:23:32 UTC | #31

There's [this function](https://docs.rs/pocket-ic/2.2.0/pocket_ic/struct.PocketIc.html#method.create_canister_with_id) that should do the trick

-------------------------

skilesare | 2024-04-08 11:24:58 UTC | #32

Perfect. I'll give it a try.

-------------------------

NathanosDev | 2024-04-08 11:27:50 UTC | #33

Create an II subnet when setting up the pocket ic instance and then you can install the cycles ledger to that subnet with the correct canister id.

-------------------------

skilesare | 2024-04-08 14:28:29 UTC | #34

Ah....looks like create_canister_with_id isn't exposed from pic.js.  Would it be possible to add it?

@NathanosDev Putting it in the II subnet worked. Thanks!

-------------------------

NathanosDev | 2024-04-08 14:34:38 UTC | #35

There's a `targetCanisterId` config option exposed on the `setupCanister()` and `createCanister()` methods that does the same thing:
- https://hadronous.github.io/pic-js/docs/pic-js/interfaces/SetupCanisterOptions/#targetcanisterid
- https://hadronous.github.io/pic-js/docs/pic-js/interfaces/CreateCanisterOptions/#targetcanisterid

-------------------------

zohaib29 | 2024-04-12 12:24:58 UTC | #36

Hi @NathanosDev, can you please answer [these](https://discord.com/channels/748416164832608337/1220068075349479464) questions? Thanks!

-------------------------

NathanosDev | 2024-04-12 12:41:57 UTC | #37

Answered the questions that I know the answer to, the other questions I think @mraszyk will know better:

> * Is there any difference in cycle consumption for different subnets types or not? (Can we use PicJS to test cycle consumption for our canister methods?)

I'm pretty sure the answer to this is yes, but could you confirm @mraszyk?

> * What is the purpose of Bitcoin subnet, if the Bitcoin Integration is not supported?

I have no answer here unfortunately.

-------------------------

fxgst | 2024-04-12 15:27:58 UTC | #38

@NathanosDev, @zohaib29 
>* Is there any difference in cycle consumption for different subnets types or not? (Can we use PicJS to test cycle consumption for our canister methods?)

With the latest PocketIC, we model cycles consumption like on mainnet. This means that canisters on e.g., System, Application and Fiduciary subnets will consume as many cycles as on their mainnet counterparts.

> * What is the purpose of Bitcoin subnet, if the Bitcoin Integration is not supported?

The Bitcoin subnet reserves the canister IDs like on mainnet. If you want to install the Bitcoin canisters (manually!), you should do it on the Bitcoin subnet type, if you want to have the same canister ranges (and IDs) like on mainnet.

-------------------------

NathanosDev | 2024-04-27 11:29:21 UTC | #39

I've just published v0.8.0 of PicJS with three main changes for consumers:

- Running the PocketIC server is now detached from the PocketIC client, and I've added some new guides showing how to handle this with some of the more popular testing frameworks. Feel free to let me know if you're using a framework not covered here:
  - [Jest](https://hadronous.github.io/pic-js/docs/guides/using-jest)
  - [Vitest](https://hadronous.github.io/pic-js/docs/guides/using-vitest)
  - [Bun](https://hadronous.github.io/pic-js/docs/guides/using-bun)
- Better logging support.
  - Some unrecoverable scenarios, such as the PocketIC server being overloaded, were previously hidden behind a `Error: Failed to fetch` message. Now more explicit messages are logged to the console.
  - Consumers can also configure separately the canister logs, PocketIC server logs and the IC runtime logs. This is covered in the [Running tests](https://hadronous.github.io/pic-js/docs/guides/running-tests) guide.
- Added a new [`processingTimeoutMs`](https://hadronous.github.io/pic-js/docs/pic-js/interfaces/CreateInstanceOptions#processingtimeoutms) option to the [`PocketIc.create()`](https://hadronous.github.io/pic-js/docs/pic-js/classes/PocketIc#create) method that allows for configuring how long you're willing to wait for a response for the PocketIC server. This is convenient for cases where the PocketIC server is overloaded and you'd rather fail the test fast instead of waiting for the call to timeout.

-------------------------

peterparker | 2024-04-27 14:48:25 UTC | #40

[quote="NathanosDev, post:39, topic:24479"]
Running the PocketIC server is now detached from the PocketIC client
[/quote]

Thanks for the heads-up, Nathan. After migrating to v0.8.0 and following the documentation to set up a global script, I've encountered a few tests that end up timing out.

One suite ends in timeout when running all tests but not in standalone. The other fails in any case.

Any ideas?

P.S.: No rush, v0.7.0 works just fine;

My PR to migrate: [https://github.com/junobuild/juno/pull/508](https://github.com/junobuild/juno/pull/508)

![Capture d’écran 2024-04-27 à 16.43.19|689x460](upload://uOKTKuiTTqoV66L2QkjhxsGlR7z.jpeg)
![Capture d’écran 2024-04-27 à 16.45.53|689x460](upload://nYRTO6BqHe3GO9jsp3mSlb9mnEE.jpeg)
![Capture d’écran 2024-04-27 à 16.45.48|689x460](upload://a7msKscGpIHvA1HBBDeJqtXRbOh.jpeg)

-------------------------

NathanosDev | 2024-04-27 16:30:43 UTC | #41

Thanks for reporting @peterparker!

I've published a new beta version with a fix now. I already tried it out on your branch and it works fine for me, but if you could also try it and confirm it works for you before I make a non-beta release that would be awesome.

```bash
npm i -D @hadronous/pic@beta
```

-------------------------

peterparker | 2024-04-27 16:56:38 UTC | #42

I can confirm, it works like a charm both locally and the CI which is green now. Thanks!

-------------------------

NathanosDev | 2024-04-27 16:59:33 UTC | #43

Thanks for confirming! v0.8.1 has the fix now :+1:

-------------------------

peterparker | 2024-04-27 17:38:42 UTC | #44

Awesome! Integrated and merged. Thanks a tone, PicJS is super :+1:

-------------------------

peterparker | 2024-04-29 16:41:32 UTC | #45

Not a biggy Nathan but, I noticed this intelissense error in the global config. Not sure if it's something incorrect in my setup or an issue?

```
TS2345: Argument of type string is not assignable to parameter of type never
```

![Capture d’écran 2024-04-29 à 18.40.11|690x448](upload://tF0vaFjU8uEDceG4AxWZRpFW0kg.jpeg)

-------------------------

NathanosDev | 2024-04-29 18:50:01 UTC | #46

In this case it's an issue with the setup.

Your `vitest.setup.ts` file is located at the root of your repo, while the `types.d.ts` file that's necessary for the intellisense to work is in the `src/tests` folder, which is excluded by the root `tsconfig.json` file.

In your project, I moved `vitest.setup.ts` into `src/tests` and then added `"include": ["types.d.ts", "vitest.setup.ts"]` to `src/tests/tsconfig.json` and now the intellisense works for me.

Those steps alone probably break something else, but hopefully that's enough information for you to find a working setup.

![image|690x173](upload://gQ8YZskyMz71cRTqIY2E9v3C6GG.png)

-------------------------

peterparker | 2024-04-29 19:46:19 UTC | #47

Gotcha, thanks a lot for the quick feedback! I fixed the issue a bit differently because I like to have the configuration files at the root. So I removed the `types.d.ts`, exposed the module in the root `vitest.setup.ts` and included this latest file in the `src/tests/tsconfig.json`.

[https://github.com/junobuild/juno/pull/516](https://github.com/junobuild/juno/pull/516)

-------------------------

icme | 2024-05-08 15:16:31 UTC | #48

@NathanosDev

Thanks so much for building PicJS!

We're in the process of moving all of our tests over, and while right now my PicJS tests run fine locally (Macbook Pro, OSX), when I push them up to GitHub CI (Ubuntu) I get Socket error issues (which in the past has told me there's something wonky going on with the nns state I'm using to seed Pic.

This is what the pic folder where I run my tests looks like right now
![Screenshot 2024-05-08 at 08.10.37|411x222](upload://utDqt9xQ6TPd0ibKJz4knq4TVm9.png)

During CI, I perform the following steps:
- install npm packages
- build all canister wasms & declarations
- unzip the tarball `tar -xzvf packages/pic/nns_state.tar.gz -C packages/pic/`
- run jest tests `"npx jest --config packages/pic/jest.config.ts ./packages/pic/cycleops/*.test.ts"`

![Screenshot 2024-05-08 at 08.13.03|690x383](upload://d7CdQXNe8u1iwAnUQeFPIxVsPjs.png)


This step is where I hit the socket errors in CI but not locally, which tells me there's something missing/different from the CI environment than my local setup (I also tried cloning a fresh repo and running CI locally which works).

Have you or anyone else run into any environment or CI issues with Pic like this?

-------------------------

NathanosDev | 2024-05-08 15:54:29 UTC | #49

What version of PicJS are you running? In version `0.8.1` there's additional logging to better identity what the underlying cause of `TypeError: fetch failed` is.

Does this happen straight away on your first test? Or does it happen after a certain number of tests run?

If it's happening after some tests run then it's probably the Pic server being overloaded, which is the same as an issue that I was having myself on another project. I published a beta version of PicJS using the newer version of Pic server and I'm having a much better time with that.

You could try with the beta version to see if it helps your situation:
```
npm i -D @hadronous/pic@beta
```

There are some breaking changes in the `PocketIc.create` function and the published docs are not updated until the beta is made stable, but you can check the [nns_proxy](https://github.com/hadronous/pic-js/tree/main/examples/nns_proxy) example for the relevant changes.

-------------------------

icme | 2024-05-08 16:00:44 UTC | #50

[quote="NathanosDev, post:49, topic:24479"]
What version of PicJS are you running?
[/quote]

"@hadronous/pic": "^0.7.0",

[quote="NathanosDev, post:49, topic:24479"]
Does this happen straight away on your first test?
[/quote]

It happens straight away, every time.

-------------------------

NathanosDev | 2024-05-08 16:04:40 UTC | #51

That sounds like a different issue than I had, but please try with version `0.8.1` and let me know what logs you see.

-------------------------

zohaib29 | 2024-05-13 14:22:48 UTC | #52

Sometimes I get this error. How to avoid this?
```
thrown: "Exceeded timeout of 5000 ms for a hook.
    Add a timeout value to this test to increase the timeout, if this is a long-running test
```

-------------------------

NathanosDev | 2024-05-13 14:25:58 UTC | #53

That depends on _why_ it's happening, it might be happening because the Pic server is busy and isn't able to serve the request, if that's the case then I'll be releasing a new version today that will help.

If you just have long running tests, then you'll need to increase your timeout.

-------------------------

skilesare | 2024-06-27 00:36:58 UTC | #54

@NathanosDev I tried getting my state set up with an SNS approved using the SNS testing project, but something doesn't work quite right. I think that it uses maybe a different port or something that the NNS setup example. In the same project if I give the nns_state things work great, but if I give the sns_state(the one I created using the sns-testing project) I get:

```
console.error
    Erorr sending request to PocketIC server Error: The pending stream has been canceled (caused by: connect ECONNREFUSED 127.0.0.1:57046)
        at closeSession (node:internal/http2/core:1153:20)
        at ClientHttp2Session.destroy (node:internal/http2/core:1543:5)
        at Socket.socketOnError (node:internal/http2/core:3006:13)
        at Socket.emit (node:events:518:28)
        at Socket.emit (node:domain:488:12)
        at emitErrorNT (node:internal/streams/destroy:169:8)
        at emitErrorCloseNT (node:internal/streams/destroy:128:3)
        at processTicksAndRejections (node:internal/process/task_queues:82:21) {
      code: 'ERR_HTTP2_STREAM_CANCEL',
      cause: Error: connect ECONNREFUSED 127.0.0.1:57046
          at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1595:16) {
        errno: -61,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 57046
      }
    }
```

Is there perhaps some port I can tweak to get things working?

I basically followed this process:  https://github.com/dfinity/sns-testing?tab=readme-ov-file#special-instructions-for-apple-silicon-users.

And then harvested the state from my library/Application Support directory instead of a local directory.

I was also careful to pull the proper subnet id out as described in your guide.

I was able to get it to spit out:

```
Jun 26 23:59:33.284 CRIT s:/n:/ic_state_manager/ic_state_manager Failed to load checkpoint @5400: /var/folders/7l/thqhv3nn75b3t1hz1wj3bzrr0000gn/T/.tmpxx6czB/checkpoints/0000000000001518: failed to deserialize SystemMetadata: Replica does not implement certification version 16
thread 'tokio-runtime-worker' panicked at rs/state_manager/src/lib.rs:1473:21:
Failed to load checkpoint @5400: /var/folders/7l/thqhv3nn75b3t1hz1wj3bzrr0000gn/T/.tmpxx6czB/checkpoints/0000000000001518: failed to deserialize SystemMetadata: Replica does not implement certification version 16
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'tokio-runtime-worker' panicked at rs/pocket_ic_server/src/state_api/routes.rs:576:10:
Failed to launch PocketIC: JoinError::Panic(Id(20), ...)
```

I think this sns tool uses dfx 0.19.0 and I wonder if that is the issue.  I'll try to force it to use 20.1

Edit:

Running the process with 0.20.1 gives a similar error by the certification version is updated:

```
Jun 27 00:34:29.195 CRIT s:/n:/ic_state_manager/ic_state_manager Failed to load checkpoint @2200: /var/folders/7l/thqhv3nn75b3t1hz1wj3bzrr0000gn/T/.tmpxNxdln/checkpoints/0000000000000898: failed to deserialize SystemMetadata: Replica does not implement certification version 18
thread 'tokio-runtime-worker' panicked at rs/state_manager/src/lib.rs:1473:21:
Failed to load checkpoint @2200: /var/folders/7l/thqhv3nn75b3t1hz1wj3bzrr0000gn/T/.tmpxNxdln/checkpoints/0000000000000898: failed to deserialize SystemMetadata: Replica does not implement certification version 18
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
thread 'tokio-runtime-worker' panicked at rs/pocket_ic_server/src/state_api/routes.rs:576:10:
Failed to launch PocketIC: JoinError::Panic(Id(20), ...)
```

-------------------------

skilesare | 2024-06-27 00:41:26 UTC | #55

Roping in @michael-weigelt and @mraszyk as I see they've answered a ton of Pocket IC questions.

-------------------------

mraszyk | 2024-06-27 04:58:55 UTC | #56

> Replica does not implement certification version 18

This error suggests that you're using a state produced by a different version of the replica.

> I tried getting my state set up with an SNS approved using the SNS testing project

Since the replica version of dfx in the SNS testing project might be incompatible with the replica version used in PocketIC.

-------------------------

skilesare | 2024-06-27 11:53:53 UTC | #57

Is there some place to see which dfx is compatible with each pocket ic version?

-------------------------

mraszyk | 2024-06-27 12:05:23 UTC | #58

In the latest dfx version, PocketIC is part of it and thus they match. Beyond that, we don't track compatibility.

-------------------------

skilesare | 2024-06-27 12:51:30 UTC | #59

@NathanosDev Is picjs updated to this latest version?

-------------------------

NathanosDev | 2024-07-01 09:28:29 UTC | #60

Apologies for the late response, I was travelling last week.

@mraszyk is there a way to check what version of the replica is being used by PocketIC?
@Severin is there a way to check what version of the replica is being used by DFX?

At least then I can maintain a compatibility table to avoid other devs being tripped up by this.

> @NathanosDev Is picjs updated to this latest version?

The current beta version of PicJS is using the latest version of PocketIC. I expect to make a stable release this week and I don't expect to be any changes so there's no concerns with using the beta version now.

-------------------------

Severin | 2024-07-01 09:34:52 UTC | #61

[quote="NathanosDev, post:60, topic:24479"]
is there a way to check what version of the replica is being used by DFX?
[/quote]

The best source that I know of is the [changelog](https://github.com/dfinity/sdk/blob/master/CHANGELOG.md#replica).

A while back I heard some chatter about maybe adding the version to the state tree, but IDK if that resulted in something. It's not in the spec AFAICT

-------------------------

mraszyk | 2024-07-01 09:46:28 UTC | #62

>  is there a way to check what version of the replica is being used by PocketIC?

You can query the status endpoint `/instances/0/api/v2/status` at runtime and read out the `impl_version` field of the returned cbor payload. Alternatively, for the PocketIC server included in dfx, the replica version of PocketIC can be read out from the `nix/sources.json` file (e.g., [here](https://github.com/dfinity/sdk/blob/0.20.2/nix/sources.json#L165) for v0.20.2).

-------------------------

zohaib29 | 2024-07-06 11:50:16 UTC | #63

I am getting an error when trying to test the method that performs https_outcall   
`PocketIC server is too busy to process the request`
@NathanosDev

-------------------------

NathanosDev | 2024-07-09 07:20:50 UTC | #64

Can you try with the latest beta version and see if that helps?

```
npm i -D @hadronous/pic@beta
```

-------------------------

zohaib29 | 2024-07-09 08:20:42 UTC | #65

  PocketIC server encountered an error BadIngressMessage("Failed to answer to ingress 0x54e41af253fc7c0304cf06b06e532757d39e436551ec8c7d0209be7d40c7de2d after 100 rounds.")

-------------------------

NathanosDev | 2024-07-09 08:22:29 UTC | #66

@mraszyk do you know why this might happen? This is using PocketIC server v4.

-------------------------

mraszyk | 2024-07-09 08:38:30 UTC | #67

[quote="zohaib29, post:63, topic:24479"]
the method that performs https_outcall
[/quote]

Canister https outcalls are not yet supported in PocketIC (they'll be supported in the upcoming release in a few weeks) which is why you see the error.

-------------------------

skilesare | 2024-07-10 18:52:57 UTC | #68

Not sure what my issue is now, but I can't seem to get pocket-ic to 'create' properly:

The subnet that was spit out after running the SNS scenario was: 6hddd-nszlm-yb7u4-wqfxt-btk2p-w2jgp-emsaz-ree4f-cmeth-y3gko-gae

I figured out that the config structure changed a bit, and now I have:

```
pic = await PocketIc.create(process.env.PIC_URL,{
      nns: {
        state: {
          type: SubnetStateType.FromPath,
      
          path: NNS_STATE_PATH,
          subnetId: Principal.fromText(NNS_SUBNET_ID),
        },
      },
    });
```
But now I get a bunch of message in my log

thread 'tokio-runtime-worker' panicked at rs/pocket_ic_server/src/state_api/routes.rs:959:10:
Failed to launch PocketIC: JoinError::Panic(Id(21), ...)
thread 'tokio-runtime-worker' panicked at rs/pocket_ic_server/src/pocket_ic.rs:125:60:

I notice that a bunch of other options are now available on the object, so maybe I'll play with those a bit? Since I constructed this with dfx I'm guessing everything is on the same subnet...maybe that is going to be a problem?

-------------------------

skilesare | 2024-07-10 19:34:08 UTC | #69

Ps. I'm running pic.js beta with a state produced with dfx 20.1

I did change to 

```
pic = await PocketIc.create(process.env.PIC_URL,{
      nns: {
        state: {
          type: SubnetStateType.FromPath,
          path: NNS_STATE_PATH,
          subnetId: Principal.fromText(NNS_SUBNET_ID),
        },
      },
      sns: {
        state: {
          type: SubnetStateType.New,
        },
      },
    });
```
...and the errors went away, but now I get a 
    TypeError: fetch failed

      at async makeRequest (node_modules/@hadronous/pic/src/http2-client.ts:59:19)
      at async intervalMs (node_modules/@hadronous/pic/src/http2-client.ts:130:21)
      at async Timeout.runPoll [as _onTimeout] (node_modules/@hadronous/pic/src/util/poll.ts:17:24)

    Cause:
    connect ECONNREFUSED 127.0.0.1:53189

-------------------------

skilesare | 2024-07-10 19:51:13 UTC | #70

Now I'm getting something. I think my debugs breaks were causing the server to stop:

Jul 10 19:35:48.586 WARN s:/n:/ic_state_manager/ic_state_manager No state available with certification.
Jul 10 19:35:48.590 WARN s:/n:/ic_messaging/message_routing mr_non_increasing_batch_time: Non-increasing batch time at height 6801: state_time = 2024-07-10 17:55:32.046328 UTC, batch_time = 2021-05-06 19:17:10.000000001 UTC.
thread 'tokio-runtime-worker' panicked at rs/state_machine_tests/src/lib.rs:1573:17:
Critical error mr_non_increasing_batch_time occurred.
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

But after this it kind of dies.

looks like it is getting to pic.tick() call but that is failing with:

Error: A request to the PocketIC server timed out.
    at eval (eval-b3e01baf.repl:1:1)
    at <anonymous>
    at EventTarget.<anonymous> (/Users/afat/Dropbox/development/origyn/gitlab/snsgovapp/node_modules/@hadronous/pic/src/http2-client.ts:51:11)
    at EventTarget.[nodejs.internal.kHybridDispatch] (node:internal/event_target:826:20)
    at EventTarget.dispatchEvent (node:internal/event_target:761:26)
    at abortSignal (node:internal/abort_controller:371:10)
    at AbortController.abort (node:internal/abort_controller:393:5)
    at makeRequest (/Users/afat/Dropbox/development/origyn/gitlab/snsgovapp/node_modules/@hadronous/pic/src/http2-client.ts:65:30)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at async intervalMs (/Users/afat/Dropbox/development/origyn/gitlab/snsgovapp/node_modules/@hadronous/pic/src/http2-client.ts:130:21)
    at async runPoll (/Users/afat/Dropbox/development/origyn/gitlab/snsgovapp/node_modules/@hadronous/pic/src/util/poll.ts:17:24) {stack: 'Error: A request to the PocketIC server timed…odules/@hadronous/pic/src/util/poll.ts:17:24)', message: 'A request to the PocketIC server timed out.'}


calling

{method: 'POST', path: '/instances/0/update/tick', headers: {…}, body: undefined}
body:
undefined
headers:
{Content-Type: 'application/json'}
Content-Type:
'application/json'
[[Prototype]]:
Object
method:
'POST'
path:
'/instances/0/update/tick'

Sometimes I get:
tokio-runtime-worker' panicked at rs/state_machine_tests/src/lib.rs:1573:17:
Critical error mr_non_increasing_batch_time occurred.
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
2024-07-10T19:47:40.803557Z  INFO pocket_ic_server: The PocketIC server will terminate

in my output.

-------------------------

peterparker | 2024-07-10 19:52:02 UTC | #71

[quote="skilesare, post:69, topic:24479"]
I’m running pic.js beta with a state produced with dfx 20.1
[/quote]

What version exactly? If you want I can quickly try to update the version in Juno and see if my tests are still running.

-------------------------

peterparker | 2024-07-10 19:58:33 UTC | #72

I'm using v0.8.1 and quickly tested v0.9.0-b0 but in both case, my test suite was ok. I fear I cannot really help.

-------------------------

skilesare | 2024-07-10 20:08:35 UTC | #73

I'm stupid. I had commented out my set time function.  I added it back in and set the time to just after I had created the state(that was showing up in my error) and now it works. 

![Bttfm Back GIF](upload://qkw1G5lCkJloiHvrEKvf8JnEHNw.gif)

-------------------------

skilesare | 2024-07-12 21:12:26 UTC | #74

This actually didn't work. :frowning: 

The first time I call list_neuons on my sns_governance canister I get this message repeated over and over in my console until things timeout:

  console.error
    PocketIC server encountered an error BadIngressMessage("Canister not found")

      at intervalMs (node_modules/@hadronous/pic/src/http2-client.ts:144:19)
      at async Timeout.runPoll [as _onTimeout] (node_modules/@hadronous/pic/src/util/poll.ts:17:24)

I've confirmed it is trying to make the ingress call for list neurons by putting break points in the pic client.

![image|690x92](upload://yYNFtdYO8cJGeGkdYWcgW7mMDfo.png)
![image|690x236](upload://ovNdX0ymV7rKNFmE6Ek74uv3rSA.png)


I've called list neurons on the same canister on my dfx state successfully, so I don't know what is going on unless there is something internal that maps that br5f7-7uaaa-aaaaa-qaaca-cai canister id to a theoretical SNS subnet.  My SNS canisters are all on the NNS subnet because I have to give the whole state to the nns when I fire it up:

```
pic = await PocketIc.create(process.env.PIC_URL,{
      processingTimeoutMs: 30000,
      nns: {
        state: {
          type: SubnetStateType.FromPath,
          path: NNS_STATE_PATH,
          subnetId: Principal.fromText(NNS_SUBNET_ID),
          
        },
      },
      
    });


    const snsGovActor = await pic.createActor<SNSGovenranceService>(
      snsgovIdlFactory,
      Principal.fromText(snsgovCanisterId),
    );

    const neurons = await snsGovActor.list_neurons({
      limit: 5,
      start_page_at:[],
      of_principal: []
    });

```

When I call getCanisterSubnet for the target canister I also get null.

The getSNSSubnet is also null, which I expect, but makes me suspicious if the range is hardcoded.

-------------------------

NathanosDev | 2024-07-13 16:52:16 UTC | #75

Can you outline what steps you followed to produce the replica state that you're importing into PocketIC?

You're sailing in unchartered territory now :laughing:

-------------------------

skilesare | 2024-07-14 13:55:46 UTC | #76

1. Ran the setup_locally and run_basic_scenario from the apple silicone instructions from https://github.com/dfinity/sns-testing(I think I did something to force dfx 0.20.1.


2. It produced this state with a SNS aggregator that put out the listed json:

https://github.com/icdevsorg/pic_js_sns_state

I exported it and used the import command listed there for your beta if pic.js

-------------------------

skilesare | 2024-07-22 14:05:50 UTC | #77

@NathanosDev Did you ever have a chance to look into this?

-------------------------

NathanosDev | 2024-07-22 15:14:56 UTC | #78

Sorry not yet, I'll let you know once I get a chance to look.

-------------------------

skilesare | 2024-07-22 16:32:08 UTC | #79

> targetCanisterId?[​](https://hadronous.github.io/pic-js/docs/pic-js/interfaces/CreateCanisterOptions#targetcanisterid)

> **`optional`** **targetCanisterId**: `Principal`

>The Id of the canister to create. Can only be used on Bitcoin, Fiduciary, II, SNS and NNS subnets.

Why can this only be used on these subnets? I have a canister that I've deployed to an application subnet on mainnet and I want to simulate it on pocket ic.  I'm currently getting told that I can't do it because of canister ranges....is there some way to adapt the topography of the network so I can install it to a particular place?

-------------------------

peterparker | 2024-07-22 19:39:58 UTC | #80

Is anyone using Vitest and noticing timeouts when running a test suite with Vitest v2, while everything was fine with v1 (e.g., v1.6.0)? How did you solve the issue?

```
 RUN  v2.0.3 /Users/daviddalbusco/projects/juno/juno

 ❯ src/tests/satellite.auth.spec.ts  (14 tests | 1 failed) 12300ms
   × Satellite authentication > admin > should have empty config per default
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ✓ src/tests/satellite.spec.ts  (21 tests) 13977ms
stderr | src/tests/orbiter.upgrade.spec.ts > Orbiter upgrade > v0.0.6 -> v0.0.7 > Page views > should be able to collect new entry and list both bounded and unbounded serialized data
PocketIC server encountered an error UpdateError { message: "Instance was deleted" }
etc.

vs

 RUN  v1.6.0 /Users/daviddalbusco/projects/juno/juno

 ✓ src/tests/satellite.storage.spec.ts  (34 tests) 2201ms
 ✓ src/tests/console.storage.spec.ts  (51 tests) 2371ms
 ✓ src/tests/satellite.upgrade.spec.ts  (14 tests) 58027ms
 ✓ src/tests/orbiter.upgrade.spec.ts  (6 tests) 21407ms
 ✓ src/tests/satellite.spec.ts  (21 tests) 1702ms
 ✓ src/tests/satellite.auth.spec.ts  (14 tests) 1617ms
etc.
```

-------------------------

NathanosDev | 2024-07-23 12:06:57 UTC | #81

> Why can this only be used on these subnets?

I can't answer _why_, since it pertains to the underlying PocketIC server. Maybe @mraszyk can shine some light on that.

In the meantime, the best I could personally come up with for Motoko is to inject the canister ID at runtime using init args. For example [here](https://github.com/hadronous/pic-js/blob/main/examples/multicanister/src/main.mo), and tested [here](https://github.com/hadronous/pic-js/blob/main/examples/multicanister/tests/src/multicanister.spec.ts#L89).

-------------------------

NathanosDev | 2024-07-23 12:07:41 UTC | #82

Can you try with the current beta version and see if it improves the situation?

```
npm i -D @hadronous/pic@beta
```

-------------------------

peterparker | 2024-07-23 12:35:38 UTC | #83

It's way better (thanks!) but, long lasting tests still fail.

Vitest 1.6.0 + "hadronous/pic 0.8.1

```
 RUN  v1.6.0 /Users/daviddalbusco/projects/juno/juno

 ✓ src/tests/satellite.storage.spec.ts  (34 tests) 2707ms
 ✓ src/tests/console.storage.spec.ts  (51 tests) 2502ms
 ✓ src/tests/satellite.upgrade.spec.ts  (14 tests) 61130ms
 ✓ src/tests/orbiter.upgrade.spec.ts  (6 tests) 23157ms
 ✓ src/tests/satellite.auth.spec.ts  (16 tests) 1630ms
 ✓ src/tests/satellite.spec.ts  (21 tests) 1588ms
 ✓ src/tests/satellite.datastore.spec.ts  (18 tests) 3966ms
 ✓ src/tests/orbiter.spec.ts  (11 tests) 1338ms
 ✓ src/tests/mission-control.set-unset.spec.ts  (10 tests) 3203ms
 ✓ src/tests/console.upgrade.spec.ts  (1 test) 10239ms
 ✓ src/tests/console.metadata.spec.ts  (3 tests) 4370ms
 ✓ src/tests/satellite.custom-domains.spec.ts  (11 tests) 2372ms
 ✓ src/tests/console.custom-domains.spec.ts  (9 tests) 3612ms
 ↓ src/tests/satellite.playground.spec.ts  (1 test | 1 skipped)
 ✓ src/tests/console.spec.ts  (1 test) 10116ms

 Test Files  14 passed | 1 skipped (15)
      Tests  206 passed | 1 skipped (207)
   Start at  14:31:31
   Duration  135.97s (transform 185ms, setup 0ms, collect 394ms, tests 131.93s, environment 0ms, prepare 41ms)

```

Vitest 2.0.4 + hadronous/pic@beta

```

 RUN  v2.0.4 /Users/daviddalbusco/projects/juno/juno

 ✓ src/tests/satellite.auth.spec.ts  (16 tests) 5303ms
 ✓ src/tests/satellite.spec.ts  (21 tests) 5416ms
 ✓ src/tests/satellite.storage.spec.ts  (34 tests) 8230ms
 ✓ src/tests/console.storage.spec.ts  (51 tests) 8418ms
 ✓ src/tests/orbiter.spec.ts  (11 tests) 5656ms
 ✓ src/tests/satellite.datastore.spec.ts  (18 tests) 14554ms
 ✓ src/tests/mission-control.set-unset.spec.ts  (10 tests) 9910ms
 ✓ src/tests/satellite.custom-domains.spec.ts  (11 tests) 4120ms
 ↓ src/tests/satellite.playground.spec.ts  (1 test | 1 skipped)
 ✓ src/tests/console.custom-domains.spec.ts  (9 tests) 4459ms
 ✓ src/tests/console.metadata.spec.ts  (3 tests) 10443ms
 ✓ src/tests/console.spec.ts  (1 test) 9457ms
 ✓ src/tests/console.upgrade.spec.ts  (1 test) 18656ms
 ❯ src/tests/orbiter.upgrade.spec.ts  (6 tests | 2 failed) 38849ms
   × Orbiter upgrade > v0.0.6 -> v0.0.7 > Page views > should still list all entries after upgrade
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
   × Orbiter upgrade > v0.0.6 -> v0.0.7 > Page views > should be able to collect new entry and list both bounded and unbounded serialized data
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
 ❯ src/tests/satellite.upgrade.spec.ts  (14 tests | 1 failed) 81419ms
   × Satellite upgrade > v0.0.15 -> v0.0.16 > should keep listing existing heap collections as such
     → Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".

⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Failed Tests 3 ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯

 FAIL  src/tests/orbiter.upgrade.spec.ts > Orbiter upgrade > v0.0.6 -> v0.0.7 > Page views > should still list all entries after upgrade
 FAIL  src/tests/orbiter.upgrade.spec.ts > Orbiter upgrade > v0.0.6 -> v0.0.7 > Page views > should be able to collect new entry and list both bounded and unbounded serialized data
 FAIL  src/tests/satellite.upgrade.spec.ts > Satellite upgrade > v0.0.15 -> v0.0.16 > should keep listing existing heap collections as such
Error: Test timed out in 5000ms.
If this is a long-running test, pass a timeout value as the last argument or configure it globally with "testTimeout".
⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯[1/3]⎯

 Test Files  2 failed | 12 passed | 1 skipped (15)
      Tests  3 failed | 203 passed | 1 skipped (207)
   Start at  14:27:51
   Duration  85.43s (transform 354ms, setup 1ms, collect 4.22s, tests 224.89s, environment 2ms, prepare 1.45s)

```

-------------------------

NathanosDev | 2024-07-23 12:52:53 UTC | #84

Did you try increasing the test timeout? I'm using a pretty long 60,000ms in my own tests. They involve some pretty heaving lifting with a full NNS so you probably don't need that long.

-------------------------

mraszyk | 2024-07-23 12:54:11 UTC | #85

[quote="skilesare, post:79, topic:24479"]
Why can this only be used on these subnets? I have a canister that I’ve deployed to an application subnet on mainnet and I want to simulate it on pocket ic.
[/quote]

This limitation is dropped in the upcoming PocketIC release that I'm about to announce on the forum tonight. If you're interested in more details why there was such a limitation, then I'm happy to share more about the PocketIC server internals.

-------------------------

peterparker | 2024-07-23 13:06:22 UTC | #86

I would say so because currently the test ends after a minute

```
✓ src/tests/satellite.upgrade.spec.ts  (14 tests) 61130ms
```

But, I can try to add some extra timeout for those that are failing that's a good point. I'll have a try and report.

-------------------------

peterparker | 2024-07-23 16:12:36 UTC | #87

Spotted this error, it should be resolved with adding more timeout?

```
❯ npm run test src/tests/mission-control.set-unset.spec.ts

> @junobuild/juno@0.0.31 test
> vitest src/tests/mission-control.set-unset.spec.ts


 RUN  v2.0.4 /Users/daviddalbusco/projects/juno/juno


 Test Files  no tests
      Tests  no tests
   Start at  18:12:06
   Duration  5.22s (transform 12ms, setup 0ms, collect 0ms, tests 0ms, environment 0ms, prepare 0ms)


⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ Unhandled Error ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯
Error: The PocketIC binary took too long to start. Please try again.
 ❯ intervalMs node_modules/@hadronous/pic/dist/pocket-ic-server.js:82:19
 ❯ Timeout.runPoll [as _onTimeout] node_modules/@hadronous/pic/dist/util/poll.js:10:32




close timed out after 10000ms
Tests closed successfully but something prevents Vite server from exiting
You can try to identify the cause by enabling "hanging-process" reporter. See https://vitest.dev/config/#reporters
```

-------------------------

NathanosDev | 2024-07-23 16:16:41 UTC | #88

That's odd... Is that happening consistently?

That timeout is not configurable because I never seen it taking more than 5 seconds to start the server.

-------------------------

peterparker | 2024-07-23 16:22:20 UTC | #89

Ah no good point. Trying again, it passes now.

-------------------------

zohaib29 | 2024-08-19 17:26:26 UTC | #90

Is the  `https outcalls`  feature added in the current release? And what about `Bitcoin Integration`?
@mraszyk @NathanosDev

-------------------------

mraszyk | 2024-08-19 17:40:27 UTC | #91

> Is the `https outcalls` feature added in the current release?

Yes.

> And what about `Bitcoin Integration` ?

This is on the roadmap, but I can't give an estimate just yet when it becomes available.

-------------------------

skilesare | 2024-08-19 20:15:40 UTC | #92

Did anyone ever get to the bottom of 

```
  console.error
    PocketIC server encountered an error UpdateError { message: "Instance was deleted" }
```

It seems to happen a good bit and then reruning seem to fix it...but it would be nice to get rid of it.

-------------------------

NathanosDev | 2024-08-20 07:46:05 UTC | #93

What version are you on?

-------------------------

skilesare | 2024-08-20 13:55:27 UTC | #94

This particular project is still on 0.8.1 as it works with my nns state.

-------------------------

NathanosDev | 2024-08-20 14:13:44 UTC | #95

Those issues are generally improved in the current beta version.

-------------------------

skilesare | 2024-08-20 14:37:23 UTC | #96

I'll give it a try when I get a chance to generate a new network state.

-------------------------

