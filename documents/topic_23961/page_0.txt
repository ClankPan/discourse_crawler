ildefons | 2023-10-23 17:46:34 UTC | #1

I would like to execute a function depending of the variable type. How can I do that?

For instance, it should be somethin like that:


```
let textVec = ["1", "2", "3", "1", "2", "3", "1"];
let aux = textVec[0];
switch (aux) {
  case (Text) {
    Debug.print("is a text:" # aux);
  };
```
};

-------------------------

kpeacock | 2023-10-23 19:35:33 UTC | #2

I'm assuming this is a Motoko question. 

I recommend creating a variant type that expresses the type you are storing in your array, and tagging the entry as a variant. This would look like this:

```swift
  type TextOrNat = {
    #text: Text;
    #nat: Nat
  };
  

  var list: [TextOrNat] = [#text "some text", #nat 0, #text "0"];
```

Here's an example: https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2689482111

-------------------------

kpeacock | 2023-10-23 19:44:35 UTC | #3

I've written up a simple explainer here: https://kyle-peacock.com/blog/motoko/using-variants/

-------------------------

skilesare | 2023-10-24 20:10:23 UTC | #4

Reflection in motoko has been an often requested feature.  There are apparently issues with implementing it:

https://forum.dfinity.org/t/improving-motokos-programmability/10952/7?u=skilesare

If you absolutely must have it, you may have some success with https://github.com/edjCase/motoko_candid.  You need to to_candid your object into a candid format and then parse through the resultant object.

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=3805643680

This would be useful if you were trying to read the memory store of a canister that just dumped state to a blob array and that contained unknown types and you were trying to marshal them to known types.

-------------------------

