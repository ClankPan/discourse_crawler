mindfulanon | 2022-12-29 11:25:28 UTC | #1

I am trying to create an ICRC-1 token. I am using this github repository: https://github.com/dfinity/ICRC-1. 

I can install the canister with this code:

```
dfx canister --network ic install --mode reinstall icrc1-ledger --argument "(record {
token_symbol = \"Token\";
token_name = \"Token Name\";
minting_account = record { of = principal \"$PRINCIPAL\" };
transfer_fee = 10_000;
metadata = vec {};
initial_balances = vec {};
archive_options = record {
num_blocks_to_archive = 2000;
trigger_threshold = 1000;
controller_id = principal \"$PRINCIPAL\";
  };
},)"

```

After installing, im trying to look at the canister on ICScan but I don't see any methods on the interface. Why are these missing and how to fix? 


Also, I would like to pass the initial_mints as an argument when I install the canister:

```
dfx canister --network ic install --mode reinstall icrc1-ledger --argument "(record {
token_symbol = \"Token\";
token_name = \"Token Name\";
minting_account = record { of = principal \"$PRINCIPAL\" };
initial_mints =  [{ record { of = principal \"$PRINCIPAL\"}; 1_000_000_000}];
transfer_fee = 10_000;
metadata = vec {};
initial_balances = vec {};
archive_options = record {
num_blocks_to_archive = 2000;
trigger_threshold = 1000;
controller_id = principal \"$PRINCIPAL\";
  };
},)"

```
I get this error:

```
error: parser error
  â”Œâ”€ Candid argument:5:18
  â”‚
5 â”‚ initial_mints =   [{ record { of = principal \"$PRINCIPAL\"}; 1_000_000_000}];
  â”‚                  ^ Unknown token [

Error: Failed to install wasm module to canister 'icrc1-ledger'.
Caused by: Failed to install wasm module to canister 'icrc1-ledger'.
  Failed to create argument blob.
    Invalid argument: Invalid Candid values: Candid parser error: Unknown token [ at 189..190
```

What am I doing wrong and what do I need to make the token fully functional? If you need more information I will be happy to provide it.

Thank you for your help!

-------------------------

paulyoung | 2022-12-31 09:37:30 UTC | #2

https://github.com/dfinity/ICRC-1/blob/0b57f3a85f20b178767192968867c4addeb076f2/test/ref/test.rs#L19-L19

https://github.com/dfinity/ICRC-1/blob/b5594b92d210dfa26884a7ca2aed058a592092f9/ref/ICRC1.mo#L12-L12

Based on the above, along with this section of the [Candid guide](https://github.com/dfinity/candid/blob/c25b5d10048d66bc258040a59e4c06605fc7f9e4/docs/modules/candid-guide/pages/candid-types.adoc#type-record--n--t--), I would try `initial_mints =  vec record { { owner = principal \"$PRINCIPAL\" }; 1_000_000_000; };`

-------------------------

mindfulanon | 2022-12-31 13:20:37 UTC | #3

This has helped me, thank you so much. It had to be formatted like this

```
initial_mints = vec { record { owner = principal \"$PRINCIPAL\" ; 1_000_000_000}};
```

The icrc1_transfer method works but when I call the icrc1_balance_of method
```
dfx canister --network ic call icrc1-ledger icrc1_balance_of '(record { of=principal "myprincipalid" },)'
```
this error always comes up

```
Caused by: Failed update call.
  The Replica returned an error: code 3, message: "Canister _____ has no update method 'icrc1_balance_of'"
```


Also, I still don't quite understand why I don't have an interface when I look at the canister on ICScan. Is there something I'm missing?

-------------------------

paulyoung | 2022-12-31 15:41:17 UTC | #4

Are you providing a path to the candid file for this canister?

-------------------------

skilesare | 2022-12-31 17:20:38 UTC | #5

If you're up for it, you may want to try out https://github.com/NatLabs/icrc1. It should have archive functionality, as well as Rosetta servers. Also, we need testing.ðŸ˜€

-------------------------

mindfulanon | 2023-01-13 12:09:20 UTC | #6

I have tried but I can't get any further

```
  dfx deploy icrc1 --argument "( record {\
      name = \"<Token name>\"; \
      symbol = \"<Token>\"; \
      decimals = 6; \
      fee = 100; \
      max_supply = 1_000_000_000; \
      initial_balances =vec { record { owner = principal \"$PRINCIPAL\" ; 1_000_000_000}}; \
      advanced_settings = null; \
  })"

```

Everytime this error is coming up

```
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'icrc1'.
      Failed to create argument blob.
        Invalid data: Unable to serialize Candid values: record field 0 not found
```
It is probably due to the line with initial_balances. What am I doing wrong? @skilesare

-------------------------

skilesare | 2023-01-13 12:09:13 UTC | #7

Account is:

```
public type Account = {
        owner : Principal;
        subaccount : ?Subaccount;
    };
```

So you likely need:

```
initial_balances =vec { record{ record { owner = principal \"$PRINCIPAL\"; subaccount= null} ; 1_000_000_000}}}; \
```
It is a vec of tuples, so I think you do a tuple with a record without "name =".

If that doesn't work, let me know.

-------------------------

mindfulanon | 2023-01-13 12:22:19 UTC | #8

[quote="skilesare, post:7, topic:17700"]
`initial_balances =vec { record{ record { owner = principal \"$PRINCIPAL\"; subaccount= null} ; 1_000_000_000}}}; \`
[/quote]

I tried this but i get
```
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'icrc1'.
      Failed to create argument blob.
        Invalid argument: Invalid Candid values: Candid parser error: Unrecognized token `Semi` found at 302:303
Expected one of ")" or ","
```
After that I tried it with a curly bracket at the end less but I get:

```
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'icrc1'.
      Failed to create argument blob.
        Invalid data: Unable to serialize Candid values: type mismatch: 10000000 can not be of type opt Balance
```
@skilesare

-------------------------

tomijaga | 2023-01-13 12:49:16 UTC | #9

Hey @mindfulanon,

[quote="skilesare, post:7, topic:17700"]
```
initial_balances =vec { record{ record { owner = principal \"$PRINCIPAL\"; subaccount= null} ; 1_000_000_000}}}; \
```
[/quote]

There is an extra curly bracket at the end of `1_000_000_000`. It should end with 2, not 3.

And from your initial arguments, I noticed that the `min_burn_amount` field is missing.
Try this and let me know if the error persists.
```
dfx deploy icrc1 --argument "( record {                     \
        name = \"<Token Name>\";                         \
        symbol = \"<Token>\";                           \
        decimals = 6;                                           \
        fee = 100;                                        \
        max_supply = 1_000_000_000_000;                         \
        initial_balances = vec {                                \
            record {                                            \
                record {                                        \
                    owner = principal \"$PRINCIPAL\";   \
                    subaccount = null;                          \
                };                                              \
                100_000_000_000                                 \
            }                                                   \
        };                                                      \
        min_burn_amount = 10_000;                           \
        minting_account = null;                                 \
        advanced_settings = null;                               \
    })"
```

-------------------------

mindfulanon | 2023-01-13 13:06:20 UTC | #10

Thank you that helped!! It does make sense to format it as you did to avoid confusion. However, min_burn_amount does not need to be specified. 


Two more question: 

Why do I not see any methods on the candid interface?

How can I set a logo for the ICRC-1 token?

-------------------------

mindfulanon | 2023-01-14 13:38:15 UTC | #11

[quote="mindfulanon, post:10, topic:17700"]
How can I set a logo for the ICRC-1 token?
[/quote]

I just added another field to Types.mo, Token.mo and lib.mo called logo and I initialized the canister again with the new field logo and the base64 code of the logo as a parameter.

-------------------------

mindfulanon | 2023-01-13 14:43:07 UTC | #12

What am I doing wrong with my transfer method? 
```

dfx canister --network ic call  icrc1 icrc1_transfer '(record{  
                    record{
                     from="principal abcd-....";
                     subaccount=null; 
                        };
                     record{
                       to="principal abcd-....";
                        subaccount = null; 
                        };
                    amount = 10_000_000
                })'            

```

```
  Invalid data: Unable to serialize Candid values: record field to not found
```

@tomijaga

-------------------------

skilesare | 2023-01-13 21:24:31 UTC | #13

It looks like you have the account signature wrong. I'm not at my desk, but I think if you fix that you might be good. Each account should have an owner and a sub account. The sub account can be no. The owner is a principal. Quotes go around the text to the principal but there's a modifier before that text, that does not have quotes around it.

-------------------------

mindfulanon | 2023-01-14 12:34:34 UTC | #14

Right, I have now changed that principal is outside the quote. Since 'from' is optional, I thought I might as well take it out. I keep getting the error
```
dfx canister --network ic call  icrc1 icrc1_transfer '(record{
                      record{
                       to= principal "abcd-...";
                        subaccount=null; 
                        };
                    amount = 10_000_000;
                },)'            

```

```
Error: Failed to create argument blob.
Caused by: Failed to create argument blob.
  Invalid data: Unable to serialize Candid values: record field to not found
```
![grafik|343x151](upload://mCcu6h0IOryqV9xmbp3DH2CHE55.png)

![grafik|690x45](upload://ubHz07TgGYnM0e2QbtolfmF7CEl.png)

Maybe I didn't quite understand what you meant. If you could write me the command again I would be very grateful. @skilesare

-------------------------

skilesare | 2023-01-14 13:15:23 UTC | #15

It isn't to it is owner:

```
record {to = record { owner = principal "xxxxxx"; subaccount=null}; from=....
```

-------------------------

mindfulanon | 2023-01-14 14:04:55 UTC | #16

It worked, thank you so much!

Unfortunately, the logo is not shown to me. 


I implemented the function myself and put in the Base64 code but it doesn't seem to do its job
*Token.mo*

```
       public shared query func icrc1_logo() : async Text {
        ICRC1.logo(token);
    };
```

*lib.mo*
```
    public func logo(token : TokenData) : Text {
        token.logo;
    };
```

*Types.mo*
```
        icrc1_logo : shared query () -> async Text;
```

When i do
```
dfx canister  --network ic call icrc1 icrc1_logo
```

I get the base64 but it doesn't show up as logo in icpswap or infinity wallet. What do I have to do for a logo? @skilesare

-------------------------

skilesare | 2023-01-14 15:19:40 UTC | #17

Maybe ping @Maxfinity and he may know what format it is in.

-------------------------

Dylan | 2023-01-14 19:05:42 UTC | #18

[quote="mindfulanon, post:16, topic:17700"]
I get the base64 but it doesnâ€™t show up as logo in icpswap or infinity wallet. What do I have to do for a logo?
[/quote]

Not sure this will help, but you can call `get_metadata` on the SNS-1 Governance canister using the [IC dashboard](https://dashboard.internetcomputer.org/canister/zqfso-syaaa-aaaaq-aaafq-cai), and see how it sets the `logo` string ("`data:image/png;base64,`...")

-------------------------

Dylan | 2023-01-14 19:13:30 UTC | #19

`icrc1_logo` isn't part of the [spec](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md), so I'm not sure if it expects the same Base64 representation that SNS does, or if there are any limits to the image dimensions or size in bytes.

-------------------------

mindfulanon | 2023-01-15 12:35:48 UTC | #20

Other functions work, such as the transfer, so I am confused. Could you explain me how to specify a path to the candid file for this canister? @paulyoung

-------------------------

mindfulanon | 2023-01-15 12:40:13 UTC | #21

That's good to know with the dashboard - thanks!

Unfortunately, I don't see a function in either of both github repository that implements the logo..

https://github.com/dfinity/ICRC-1
https://github.com/NatLabs/icrc1

-------------------------

Maxfinity | 2023-01-15 18:44:34 UTC | #22

Hi @mindfulanon, the logo is not a a part of the token itself. You can add the logo by creating a pull request here:it will show up in the infinity wallet and infinityswap. https://github.com/infinity-swap/token-lists/blob/main/src/tokenlist.json

for ICRC-1 tokens launched through SNS, the logo is stored by the root canisters.

-------------------------

mindfulanon | 2023-01-16 11:28:38 UTC | #23

Thank you for the reply Max! I have made the pull request. Hopefully I have done this correctly.

How can I make sure that my logo is not only displayed there but also in other decentralized exchanges / wallets?

-------------------------

blabagastered | 2023-01-21 15:12:13 UTC | #25

Is there a reason why `mint()` and `burn()` are not prefaced by `icrc_`, like the other functions are?
https://github.com/NatLabs/icrc1/blob/7af28bbfa7d41a20297ff6e349ee0374f9d1b576/example/icrc1/main.mo#L65


There're also not in the TokenInterface type: https://github.com/NatLabs/icrc1/blob/7af28bbfa7d41a20297ff6e349ee0374f9d1b576/src/ICRC1/Types.mo#L133

Another thing I noticed is when calling `burn()` from another canister, 


```
let icrc_canister = actor ("r7inp-6aaaa-aaaaa-aaabq-cai") : (ICRCTypes.TokenInterface and ICRCTypes.TokenInterfaceExtension);

(...)

    let burn_args : ICRCTypes.BurnArgs = {
      from_subaccount : ?Subaccount = null;
      amount : Balance = 12_000_000;
      memo : ?Blob = null;
      created_at_time : ?Nat64 = null;
    };

    let burn_receipt = await icrc_canister.burn(burn_args);
    Debug.print(debug_show (burn_receipt));
```

I get 

`#err(#GenericError({error_code = 0; message = "The sender cannot have the same account as the recipient."}))`

What is `burn()` supposed to do? I wonder if the error has anything to do with the fact that the canister calling `burn()` is also the icrc canister's `minting_account` as set on token deployment?

-------------------------

skilesare | 2023-01-21 16:32:41 UTC | #26

Right now mint and burn are not part of the spec.  Maybe ICRC-4?  These are left up to the implementation.

Typically you have a "minting" account that can mint by sending from and burn by sending to.

```
if (tx_req.from == tx_req.to) {
            return #err(
                #GenericError({
                    error_code = 0;
                    message = "The sender cannot have the same account as the recipient.";
                }),
            );
        };
```

The error you are seeing is from above. Basically you can't send to yourself.

If your canister is the minting account owner then maybe use sub-accounts and send from the minting sub-account to another sub-account for a mint and then send back to the minting sub-account for burn.  You really shouldn't need mint and burn with this setup.

-------------------------

blabagastered | 2023-01-21 20:58:38 UTC | #27

Thanks.

I just realised that when you icrc1_transfer() from the minting_account, it simply mints new tokens. It doesn't transfer existing tokens, even if minting_account has enough. The balance of minting_account stays unchanged. It may be good to emphasise this in the code / docs. It seems odd behaviour for an action labelled "transfer".

Though I still don't understand the behaviour of burn(). I need burn because I need to be able to reduce the total supply, not just make some of it permanently inaccessible (is reducing the total supply possible another way?). In what sense is calling burn() sending to "the same account as the recipient"?

It would appear from 


```
    public type BurnArgs = {
        from_subaccount : ?Subaccount;
        amount : Balance;
        memo : ?Blob;
        created_at_time : ?Nat64;
    };
```
that burn() is a function that any account could call, having to specify only an optional subaccount from which to subtract the to-be-burnt balance.

-------------------------

skilesare | 2023-01-21 22:05:10 UTC | #28

When someone wants to burn, just have them send tokens to the minting account. That's the burn mechanism. If you look in the code, it will check with the Minting account and then it will burn those tokens if that is the to address.

I think your issue is that you're trying to send from the meeting account to the meeting account and that just generally is it possible. Don't give the minting account a balance. It's balance should always be zero.

-------------------------

blabagastered | 2023-01-21 23:23:01 UTC | #29

Thanks again. That explains the logs and behaviour.

-------------------------

blabagastered | 2023-01-26 15:12:51 UTC | #30

For tokens where the maximum supply is flexible, eg a stablecoin, is the only existing solution setting max_supply to a stupidly large number on deployment, or is there a way for max_supply to track total_supply or something like it?

I guess max_supply might be changed by an owner either with an upgrade or with an ad hoc function perhaps callable only by the mint_account, so that on mint / burn, max supply is increased / reduced together with total supply.

Would that be a good approach, or better just leave max_supply fixed at a very large number?

-------------------------

