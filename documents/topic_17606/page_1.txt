0rions | 2023-04-12 07:34:51 UTC | #111

[quote="bytesun, post:110, topic:17606"]
NoNewUtxos
[/quote]
This means that your Bitcoin transaction is still pending, you can check on a Block explorer like https://blockstream.info/ how many confirmations your transaction has (it needs 12 confirmations to be considered valid).

-------------------------

bytesun | 2023-04-12 14:22:47 UTC | #112

[quote="0rions, post:111, topic:17606"]
needs 12 confirmati
[/quote]

it shows 961 CONFIRMATIONS as the link
https://blockstream.info/address/bc1qjhpde30llwqdx0qk2utm8ejs0lz00a0syvflx4

-------------------------

0rions | 2023-04-12 15:03:42 UTC | #113

[quote="bytesun, post:112, topic:17606"]
it shows 961 CONFIRMATIONS as the link

https://blockstream.info/address/bc1qjhpde30llwqdx0qk2utm8ejs0lz00a0syvflx4
[/quote]

Do you mind giving me the principal you are using so that I can try to see what is going on?

-------------------------

bytesun | 2023-04-12 15:05:43 UTC | #114

yes, just DM you, thanks!

-------------------------

EstherOA | 2023-04-17 08:14:26 UTC | #115

How to get information on bitcoin deposited to the bitcoin address assigned by the ckbtc minter? Eg. sender address, amount (utxos), time and fees deducted?

-------------------------

Jonathan | 2023-04-17 08:31:16 UTC | #116

https://637g5-siaaa-aaaaj-aasja-cai.raw.ic0.app/token/mxzaz-hqaaa-aaaar-qaada-cai

-------------------------

EstherOA | 2023-04-17 09:30:29 UTC | #117

@Jonathan the issue with this is that the ledger only shows ckbtc transfers (i.e from - to principal IDs). The scenario I'm describing is when you receive real btc to the btc address assigned by the ckbtc minter and you want to fetch details of this transaction (e.g sender btc address). Querying the ledger canister only returns information about the corresponding ckbtc tokens that were minted. Does the IC Bitcoin API give information on the actual btc transaction that received to the assigned btc address?

-------------------------

timo | 2023-04-17 10:59:27 UTC | #118

Do you want to get this information programatically from canister code or manually? Manually you can look at a Bitcoin blockchain explorer to get the information. The IC Bitcoin API gives access to the Bitcoin canister and the Bitcoin canister only stores the UTXO set, not the entire Bitcoin blockchain data. So that creates two problems for the information you are seeking. a) The UTXO set consists of just txid and vout. That doesn't tell you anything about the sender. b) Once the ckBTC canister has spent a deposit to satisfy a withdrawal, the output is no longer in the the UTXO set and you won't even get the txid anymore from the Bitcoin canister. So I believe you can't get the information you want programatically from a canister. Unless with an http outcall to a third-party Bitcoin blockchain explorer.

In the long run a canister (or a set of canisters) can be created that stores the entire Bitcoin blockchain, but nobody has written that yet.

-------------------------

timo | 2023-04-17 11:27:39 UTC | #119

What is the relation between this code https://github.com/dfinity/ic/blob/master/rs/bitcoin/ckbtc/minter/src/main.rs and the one that is deployed as the minter [mqygn-kiaaa-aaaar-qaadq-cai](https://dashboard.internetcomputer.org/canister/mqygn-kiaaa-aaaar-qaadq-cai)?

Where do I find the deployed code? Some other branch?

-------------------------

timo | 2023-04-17 11:59:51 UTC | #120

[quote="timo, post:118, topic:17606"]
b) Once the ckBTC canister has spent a deposit to satisfy a withdrawal, the output is no longer in the the UTXO set and you won’t even get the txid anymore from the Bitcoin canister.
[/quote]

You can still get that information from the ckBTC index and archive canisters. The ckBTC minting transactions contain the corresponding Bitcoin txid in their memo field. Just be careful with the byte order which is opposite to what common Bitcoin block explorers expect in their UI. Though this is probably Bitcoin's fault, not ckBTC's.

-------------------------

EstherOA | 2023-04-17 16:35:06 UTC | #121

Thanks I think I will get the information I need from the block explorers using the txid from the ckbtc minting transactions.

-------------------------

Manu | 2023-04-20 08:04:23 UTC | #122

You can derive this from the NNS proposals. The last ckBTC minter upgrade proposal was https://dashboard.internetcomputer.org/proposal/115473, which states that this release is built from git hash `d21c69ba055489905bf801a4aea7145f545c9ff8`, so the code at https://github.com/dfinity/ic/tree/d21c69ba055489905bf801a4aea7145f545c9ff8/rs/bitcoin/ckbtc/minter should be the currently deployed version.

After proposal https://dashboard.internetcomputer.org/proposal/118485 passes, it would be https://github.com/dfinity/ic/tree/3440457faa3b162d9e1877aaad91ce563c964a25/rs/bitcoin/ckbtc/minter.

-------------------------

noobmdev | 2023-05-19 04:06:38 UTC | #123

Why has ckBTC not implemented ICRC-2 standards, bro? It can make ckBTC used easily in other canisters (Dapps)

-------------------------

bogwar | 2023-05-19 07:35:28 UTC | #124

The ICRC-2 design was finalized this week and will be up for an approval vote on the NNS soon. It will be implemented for ckbtc and SNS ledger after that vote happens.

-------------------------

lastmjs | 2023-05-19 17:41:12 UTC | #125

What's the latest story on working with ckBTC/ICRC locally? Is there any easy solution like `dfx pull` yet?

-------------------------

skilesare | 2023-05-19 20:47:33 UTC | #126

What about the ICP ledger?

-------------------------

lastmjs | 2023-05-20 00:33:58 UTC | #127

[quote="cryptoschindler, post:70, topic:17606"]
`https://download.dfinity.systems/ic/$IC_VERSION/canisters/`
[/quote]

Is there a way to browse what's in this directory? How did you know to find the Wasm binary there with its specific name?

-------------------------

lastmjs | 2023-05-20 19:17:46 UTC | #128

Is there a guide to getting ckBTC with the minter setup locally? Is there any kind of development mode on the minter canister locally that allows you to turn off the KYT checks? I have the ckBTC ledger and minter deployed locally, but trying to use the functionality is giving me `BUG: upgrade procedure must ensure that the KYT principal is set` and now I'm afraid I'll have to setup an entire KYT local story.

-------------------------

lastmjs | 2023-05-20 19:23:42 UTC | #129

Yeah this little ckBTC example that I'm doing for Azle is getting quite complicated, I don't understand how a beginner would ever be able to figure this stuff out. There's got to be a better way to setup these canisters locally, I'm thinking `dfx pull` is going to do that right?

-------------------------

lastmjs | 2023-05-20 21:24:51 UTC | #130

I accidentally posted this elsewhere, thus I need to write something to distinguish from that message...

I have the kyt canister deployed with the following command:

```
dfx deploy kyt --specified-id bkyz2-fmaaa-aaaaa-qaaaq-cai --argument '(variant { InitArg = record { minter_id = principal "bd3sg-teaaa-aaaaa-qaaba-cai"; maintainers = vec {}; mode = variant { AcceptAll } } })'
```

I would expect that in mode `AcceptAll` that I wouldn't have to provide an API key, but I'm getting the error: 

```
(
  variant {
    Err = variant {
      TemporarilyUnavailable = "The KYT provider is temporarily unavailable: No valid API keys"
    }
  },
)
```

This error goes away when I set an empty "" as the api key, but this shouldn't be necessary IMO.

-------------------------

lastmjs | 2023-05-20 21:29:41 UTC | #131

I'm having a very hard time getting the `ckbtc` canister deployed with the appropriate did file and arguments. I'm not sure which did file is correct nor why this isn't working.

Here is my deploy command:

```
dfx deploy ckbtc --specified-id=be2us-64aaa-aaaaa-qaabq-cai --argument='(variant { Init = record { minting_account = record { owner = principal "bd3sg-teaaa-aaaaa-qaaba-cai" }; transfer_fee = 0 : nat64; token_symbol = "ckBTC"; token_name = "ckBTC"; metadata = vec {}; initial_balances = vec {}; archive_options = record { num_blocks_to_archive = 0 : nat64; trigger_threshold = 0 : nat64; controller_id = principal "aaaaa-aa" } } })'
```

Here's the did file I am using: https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/ledger.did

I am using the Wasm file from curl -o ledger.wasm.gz "https://download.dfinity.systems/ic/d6d395a480cd6986b4788f4aafffc5c03a07e46e/canisters/ic-icrc1-ledger.wasm.gz"

I am getting this error: 

```
Deploying: ckbtc
All canisters have already been created.
Building canisters...
Installing canisters...
Installing code for canister ckbtc, with canister ID be2us-64aaa-aaaaa-qaabq-cai
Error: Failed while trying to deploy canisters.
Caused by: Failed while trying to deploy canisters.
  Failed while trying to install all canisters.
    Failed to install wasm module to canister 'ckbtc'.
      Failed during wasm installation call: The Replica returned an error: code 5, message: "Canister be2us-64aaa-aaaaa-qaabq-cai trapped explicitly: Panicked at 'Deserialization Failed: "Fail to decode argument 0 from table0 to record {\n  send_whitelist : vec principal;\n  token_symbol : opt text;\n  transfer_fee : opt record { e8s : nat64 };\n  minting_account : text;\n  transaction_window : opt record { secs : nat64; nanos : nat32 };\n  max_message_size_bytes : opt nat64;\n  icrc1_minting_account : opt record {\n    owner : principal;\n    subaccount : opt vec nat8;\n  };\n  archive_options : opt record {\n    num_blocks_to_archive : nat64;\n    max_transactions_per_response : opt nat64;\n    trigger_threshold : nat64;\n    max_message_size_bytes : opt nat64;\n    cycles_for_archive_creation : opt nat64;\n    node_max_memory_size_bytes : opt nat64;\n    controller_id : principal;\n  };\n  initial_values : vec record { text; record { e8s : nat64 } };\n  token_name : opt text;\n}"', rs/rust_canisters/dfn_core/src/endpoint.rs:49:41"
```

The Candid file and the arguments in the command seem to match up fine, because when I leave something out I get an error about that. So there seems to be something wrong inside of the canister. Have I downloaded the incorrect Wasm somehow? Which is the correct Wasm and did file for the ckBTC canister?

-------------------------

Severin | 2023-05-22 07:30:47 UTC | #132

I have pinged the people that developed ckBTC for help. Otherwise I don't really know how to get it running at the moment. dfx still includes the old BTC integration architecture, so even if you get the canisters installed I'm not sure if everything will work. We're close to having dfx ready to go with the new BTC canister

-------------------------

bogwar | 2023-05-22 07:50:12 UTC | #133

We're planning on adding ICRC-2 to the ICP ledger as well.

-------------------------

0rions | 2023-05-22 07:51:02 UTC | #134

[quote="lastmjs, post:131, topic:17606"]
`Canister be2us-64aaa-aaaaa-qaabq-cai trapped explicitly: Panicked at 'Deserialization Failed: "Fail to decode argument 0 from table0 to record {\n  send_whitelist : vec principal;\n  token_symbol : opt text;\n  transfer_fee : opt record { e8s : nat64 };\n  minting_account : text;\n  transaction_window : opt record { secs : nat64; nanos : nat32 };\n  max_message_size_bytes : opt nat64;\n  icrc1_minting_account : opt record {\n    owner : principal;\n    subaccount : opt vec nat8;\n  };\n  archive_options : opt record {\n    num_blocks_to_archive : nat64;\n    max_transactions_per_response : opt nat64;\n    trigger_threshold : nat64;\n    max_message_size_bytes : opt nat64;\n    cycles_for_archive_creation : opt nat64;\n    node_max_memory_size_bytes : opt nat64;\n    controller_id : principal;\n  };\n  initial_values : vec record { text; record { e8s : nat64 } };\n  token_name : opt text;\n}"`
[/quote]

I am pretty sure that the did you are using is the right one but you are not using the icrc1 ledger here. The error you get is because you are trying to install the ICP ledger using ICRC1 installation args. Note that the link you provided seems to be the right one so you may need to check the wasm you are trying to install or the dfx config.

-------------------------

0rions | 2023-05-22 07:52:02 UTC | #135

That's right, I will try to see if I can fix that.

-------------------------

cryptoschindler | 2023-05-22 15:15:37 UTC | #136

Apparently this works

https://github.com/dfinity/ic/blob/master/publish/canisters/BUILD.bazel

`https://download.dfinity.systems/ic/$IC_VERSION/canisters/$CANISTER_NAME_IN_THE_LIST`

So for example
`https://download.dfinity.systems/ic/b3b00ba59c366384e3e0cd53a69457e9053ec987/canisters/ic-ckbtc-minter`

-------------------------

lastmjs | 2023-05-22 18:41:58 UTC | #137

Thanks! I redownloaded the Wasm binary and I suppose it was just wrong. I got it all working! When I mine BTC to an address and call the appropriate methods on the minter the balance reflects in the ckBTC canister, and the KYT is turned off locally (even though I have to provide an empty API string). Thanks everyone!

It's quite complicated to set this up though, as I'm sure everyone already knows.

-------------------------

lastmjs | 2023-05-23 22:36:28 UTC | #138

I'll share the result of my multi-day adventure getting ckBTC setup locally here, hopefully it's helpful.

You can see more in the [ckBTC example directory in Azle](https://github.com/demergent-labs/azle/tree/main/examples/ckbtc).

# Installation

## bitcoind

```bash
mkdir .bitcoin
mkdir .bitcoin/data

curl https://bitcoincore.org/bin/bitcoin-core-23.0/bitcoin-23.0-x86_64-linux-gnu.tar.gz -o bitcoin.tar.gz

tar xzf bitcoin.tar.gz --overwrite --strip-components=1 --directory=.bitcoin/ bitcoin-23.0/bin/

rm -rf bitcoin.tar.gz
```

## ckbtc ledger canister

```bash
# did file found here: https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/ledger.did
cd ckbtc
curl -o ledger.wasm.gz "https://download.dfinity.systems/ic/d6d395a480cd6986b4788f4aafffc5c03a07e46e/canisters/ic-icrc1-ledger.wasm.gz"
```

## internet identity canister

```bash
# did file found here: https://github.com/dfinity/internet-identity/blob/main/src/internet_identity/internet_identity.did
cd internet_identity
# Manually download this file from the browser
# https://github.com/dfinity/internet-identity/releases/download/release-2023-05-15/internet_identity_test.wasm.gz
```

## ckbtc kyt canister

```bash
# did file found here: https://github.com/dfinity/ic/blob/master/rs/bitcoin/ckbtc/kyt/kyt.did
cd kyt
curl -o kyt.wasm.gz "https://download.dfinity.systems/ic/d6d395a480cd6986b4788f4aafffc5c03a07e46e/canisters/ic-ckbtc-kyt.wasm.gz"
```

## ckbtc minter canister

```bash
# did file found here: https://github.com/dfinity/ic/blob/master/rs/bitcoin/ckbtc/minter/ckbtc_minter.did
cd minter
curl -o minter.wasm.gz "https://download.dfinity.systems/ic/d6d395a480cd6986b4788f4aafffc5c03a07e46e/canisters/ic-ckbtc-minter.wasm.gz"
```

# Deployment

## bitcoind

```bash
# Do this in its own terminal
.bitcoin/bin/bitcoind -conf=$(pwd)/.bitcoin.conf -datadir=$(pwd)/.bitcoin/data --port=18444
```

## dfx

```bash
# Do this in its own terminal
dfx start --clean --host 127.0.0.1:8000 --enable-bitcoin
```

## ckbtc ledger canister

```bash
dfx deploy ckbtc --specified-id=be2us-64aaa-aaaaa-qaabq-cai --argument='(variant { Init = record { minting_account = record { owner = principal "bd3sg-teaaa-aaaaa-qaaba-cai" }; transfer_fee = 0 : nat64; token_symbol = "ckBTC"; token_name = "ckBTC"; metadata = vec {}; initial_balances = vec {}; archive_options = record { num_blocks_to_archive = 0 : nat64; trigger_threshold = 0 : nat64; controller_id = principal "aaaaa-aa" } } })'
```

## internet identity canister

```bash
dfx deploy internet_identity --specified-id 4duc2-jqaaa-aaaaa-aabiq-cai --argument '(null)'
```

## ckbtc kyt canister

```bash
dfx deploy kyt --specified-id bkyz2-fmaaa-aaaaa-qaaaq-cai --argument "(variant { InitArg = record { minter_id = principal \"bd3sg-teaaa-aaaaa-qaaba-cai\"; maintainers = vec { principal \"$(dfx identity get-principal)\" }; mode = variant { AcceptAll } } })"

dfx canister call kyt set_api_key '(record { api_key = "" })'
```

## ckbtc minter canister

```bash
dfx deploy minter --specified-id bd3sg-teaaa-aaaaa-qaaba-cai --argument '(variant { Init = record {btc_network = variant { Regtest }; min_confirmations=opt 1; ledger_id = principal "be2us-64aaa-aaaaa-qaabq-cai"; kyt_principal = opt principal "bkyz2-fmaaa-aaaaa-qaaaq-cai"; ecdsa_key_name = "dfx_test_key";retrieve_btc_min_amount = 5_000; max_time_in_queue_nanos = 420_000_000_000; mode = variant {GeneralAvailability}} })'
```

# Usage

```bash
# Mine some BTC to that address
.bitcoin/bin/bitcoin-cli -conf=$(pwd)/.bitcoin.conf generatetoaddress 1 <your-canister-btc-address>
```

-------------------------

RoseBush | 2023-05-31 11:53:42 UTC | #139

@Manu thank you for sharing.

-------------------------

bobekas | 2023-06-01 14:51:34 UTC | #140

Dear ICP network,

I hope this message finds you well. I am reaching out with a concern regarding the recent minting of ckBTC and the associated BTC transfer. I would greatly appreciate your assistance in clarifying the situation.

Recently, I made the decision to mint some ckBTC, and as instructed by the nns app, I sent a certain amount of BTC to the provided address for receiving ckBTC via the BTC network. However, I now have concerns about the status of my BTC.

Could you kindly confirm whether my BTC is at risk or if there are any potential issues that I should be aware of? I would greatly appreciate any information or guidance you can provide to help me understand the current situation.

Thank you for your attention to this matter. I look forward to your prompt response and resolution.

-------------------------

Ang | 2023-06-01 14:52:38 UTC | #141

Could you please share what exactly leads you to believe their may be a problem with the transfer? 
 
12 confirmations are required, once this is complete, the button or link "Refresh balance" can be clicked. This will finalize the conversion from BTC to ckBTC. See

-------------------------

diegop | 2023-06-01 17:35:20 UTC | #143

Dear @bobekas 

Can you please elaborate on your question a bit more?

Your comment was flagged by some folks as being AI-generated because it is not quite clear what the concern is (but it is verbose). I suspect a quicklfollow up from you would clarify for folks to show them it is not AI spam. 

Thank you.

-------------------------

cymqqqq | 2023-06-02 07:37:46 UTC | #144

Hi there,
![image|690x305](upload://8YmKMtevOrz9aJyoKkC9z6Mh9u6.jpeg)
Does the picture mean we can directly transfer btc from the native btc network and no fee?

-------------------------

0rions | 2023-06-02 07:57:11 UTC | #145

Hi, for now, the fee is deducted from the amount that you can see on your screenshot. We are working on improving the info displayed. In the near future, you should be able to the fee paid for converting ckBTC to BTC.

-------------------------

roman-kashitsyn | 2023-06-02 09:05:12 UTC | #146

The picture is somewhat misleading; BTC -> ckBTC conversions incur two types of fees:
1. The fee you pay on the Bitcoin network for transferring BTC to the minter address.
2. The KYT fee minter draws for BTC -> ckBTC conversion.

Unfortunately, this information is not available in the Ledger. We're planning to make the fees a bit more transparent in the future.

-------------------------

roman-kashitsyn | 2023-06-02 18:18:15 UTC | #148

We cannot prevent users and canisters from burning ckBTC; that won't cause any problems in ckBTC.

The ckBTC promise is that ckBTC in circulation is less than or equal to the minter's BTC balance, ensuring that the ckBTC minter always holds enough BTC to fulfill BTC withdrawals.

-------------------------

EstherOA | 2023-06-19 10:37:49 UTC | #150

Hi everyone, I tried sending BTC to this Binance address `15CWY94BtR7Vj2XiRYV2bSMkG3A6AuJiCD` and I got this error: 
```
{
    "Err": {
        "MalformedAddress": "checksum mismatch expected fed2e77f, got 37a55c06"
    }
}
```
From what I know the address is a P2PKH address and that is supported by the ckBTC minter. What is the cause of this error and can it be resolved? If not is there a way to know beforehand which addresses are not supported so the withdrawal would not be attempted?

-------------------------

Manu | 2023-06-19 10:43:01 UTC | #151

We'll take a look! Thanks for reporting

-------------------------

0rions | 2023-06-19 12:51:48 UTC | #152

[quote="EstherOA, post:150, topic:17606"]
15CWY94BtR7Vj2XiRYV2bSMkG3A6AuJiCD
[/quote]

Hi EstherOA, I just tested and it seems the address you provided is right. Could you give more detail on where you tried to send BTC, were you using the NNS dapp? Could you try again and make sure that the pasted address is right?

-------------------------

EstherOA | 2023-06-19 14:29:37 UTC | #153

Hi @0rions you're right. I checked and the pasted address had some formatting applied that was causing the error. I tried the address once more and it worked! thanks.

@Manu my bad, there is no error but follow up question- aside taproot addresses are there other unsupported address types currently?

-------------------------

Manu | 2023-06-19 15:51:00 UTC | #154

No worries! Yes taproot is still missing, but that should change very soon (@0rions already made the [code changes](https://github.com/dfinity/ic/commit/9b525ec215e13b587f1563ee715d1c5950f35bf5) and we'll submit a proposal to upgrade the minter probably this week. 

I think there are some other address types that are not supported, but with taproot we should cover all the commonly used ones, @THLO probably knows the details.

-------------------------

THLO | 2023-06-19 17:21:31 UTC | #155

All address types except taproot are supported (as you can see [here](https://github.com/dfinity/ic/blob/76022b5173be3c79f6c3ff265cf2711944517659/rs/bitcoin/ckbtc/minter/src/address.rs#L19)) and, as @Manu mentioned, an upgrade proposal to add taproot support is coming soon.

However, the implementation doesn't cover every case that is valid according to the BIP specifications. For example, [BIP-173](https://en.bitcoin.it/wiki/BIP_0173) states that "implementations MUST allow the use of any version" (0 to 16). The ckBTC minter only accepts version-0 P2WPKH addresses and version-1 P2TR addresses.
If you use standard wallets, these restrictions shouldn't be an issue in practice.

-------------------------

Manu | 2023-07-27 09:08:56 UTC | #156

Hi everybody! I want to share some plans for an upgrade to the ckBTC minter that DFINITY plans to propose in the coming months. 

**Problem**

Currently, to redeem ckBTC for BTC, you 
1. do a transaction to send your ckBTC to a user-specific subaccount of the ckBTC minter, and then 
2. call "retrieve_btc" on the ckBTC minter, upon which it burns the ckBTC from the subaccount it has for the user and sends out the BTC. 

This is suboptimal because it could happen that step 1 succeeds, but step 2 does not (eg, you close your browser tab killing the dapp, or the KYT checks fail, ...). Now your funds are already moved, and all front ends need to have some support to resubmit step 2 in order to successfully withdraw BTC. This has already led to [confusion](https://forum.dfinity.org/t/lost-0-33-btc-using-icpswap-and-or-dfinitys-ckbtc/20806?u=manu). 

**Proposal**

Now that ICRC-2 is a standard, DFINITY plans to propose to upgrade the ckBTC minter to use that for the withdrawal flow. So if you have ckBTC and you want to get BTC, the steps would change to
1. do an `icrc2_approve` for the amount you want to withdraw, approving the ckBTC minter to transfer ckBTC out of your account
2. call "retrieve_btc", upon which the ckBTC minter burns bitcoin directly from the user's account (which it can do with the approval from step 1). 

This has the advantage that if for some reason a user does step 1 but not step 2, no funds are moved. 

We propose to roll this out in two stages:
1. upgrade the ckBTC minter to support both the existing (subaccount-based) withdrawal flow, as well as the ICRC-2 based withdrawal flow. This gives everybody that built front-ends to support this conversion time to switch to the ICRC-2 based flow, which should be easy (roughly, do an approve for x ckBTC instead of doing an ICRC-1 transfer of x ckBTC).
2. after some time, we would submit a second proposal that disables the subaccount-based withdrawal flow, so using ICRC-2 would then be the only way to go ckBTC -> BTC. We propose to do this because we think there are no downsides to the ICRC-2 flow, it's easy for everybody to use, and by disabling the subaccount-based flow we keep the code as small simple as possible, which is always good for security. 

One concern with disabling the old flow, some users / dapps may still send funds to the subaccount of the minter in an attempt to withdraw ckBTC, which then is no longer supported. To avoid funds getting stuck, we propose adding some functionality that funds from the ckBTC minter's subaccount specific to principal `p` can always be returned to principal `p`. 

Please let us know what you think!

**Edit to clarify**: This is really a heads up to developers of dapps that support ckBTC -> BTC. Users and holders of ckBTC can safely ignore this and keep their ckBTC in whichever wallet they prefer, no action required.

-------------------------

ZackDS | 2023-07-27 08:14:17 UTC | #157

So should we just get our ckBTC out of dApps and hold it on NNS until this is done  ? I already have some stuck in DSCVR for god know what reason.

-------------------------

THLO | 2023-07-27 08:25:33 UTC | #158

[quote="ZackDS, post:157, topic:17606"]
So should we just get our ckBTC out of dApps and hold it on NNS until this is done ?
[/quote]

The change would only introduce a new way to retrieve bitcoin.
If you don't want to retrieve bitcoin, you don't need to do anything.

-------------------------

ZackDS | 2023-07-27 08:29:47 UTC | #159

[quote="THLO, post:158, topic:17606"]
The change would only introduce a new way to retrieve bitcoin.
If you don’t want to retrieve bitcoin, you don’t need to do anything.
[/quote]
That's the point I want to retrieve BTC, other option would be to use a swap and get some ICP. 

[quote="Manu, post:156, topic:17606"]
One concern with disabling the old flow, some users / dapps may still send funds to the subaccount of the minter in an attempt to withdraw ckBTC, which then is no longer supported.
[/quote]

This confuses me.

-------------------------

curry | 2023-07-27 08:34:40 UTC | #160

[quote="Manu, post:156, topic:17606"]
为了避免资金被卡住，我们建议添加一些功能，使 ckBTC 铸币商的子账户中特定于本金的资金`p` 始终可以返回到本金
[/quote]

I think this feature is a must

-------------------------

timo | 2023-07-27 08:42:59 UTC | #161

Does the ckBTC ledger already support ICRC-2?

-------------------------

THLO | 2023-07-27 08:52:32 UTC | #162

ICRC-2 is not supported yet.

-------------------------

Manu | 2023-07-27 09:04:06 UTC | #163

Not yet, but DFINITY is working on an adding support for ICRC-2 to its standard ledger that ckBTC and SNS projects use, so when that is done, we would propose to upgrade the ckBTC ledger to include ICRC-2 support.

-------------------------

THLO | 2023-07-27 09:18:30 UTC | #164

[quote="ZackDS, post:159, topic:17606"]
This confuses me.
[/quote]

Could you please elaborate? What is confusing about the planned deprecation of the current retrieval flow?

-------------------------

ZackDS | 2023-07-27 09:31:33 UTC | #165

The part that got edited and clarified with how could some user/dapps after still send funds to the subaccount of the minter in an attempt to withdraw ckBTC, which then is no longer supported.

-------------------------

THLO | 2023-07-27 10:00:31 UTC | #166

In case there is still some confusion, after the switch to the ICRC-2-based flow, a user or canister could still send ckBTC to a withdrawal account. This is a regular ledger transfer and will always be possible.
The problem is that the ckBTC minter will no longer consider these withdrawal accounts, so the funds will simply be stuck.

The proposed solution is to introduce a new endpoint on the ckBTC minter that allows any user to transfer funds back out of the user-specific withdrawal account.

-------------------------

Manu | 2023-10-05 13:28:40 UTC | #167

Good news, ckBTC now supports [ICRC-2](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2)! The [ledger](https://dashboard.internetcomputer.org/proposal/124868), [index](https://dashboard.internetcomputer.org/proposal/124791), and [archive](https://dashboard.internetcomputer.org/proposal/124792) canisters were all upgraded to support the ICRC-2 standard. The ckBTC minter was also [upgraded](https://dashboard.internetcomputer.org/proposal/124794) such that it now supports a simpler flow for ckBTC -> BTC: instead of sending ckBTC to a minter-controlled subaccount, you can now instead approve the minter to take some of your ckBTC, and then obtain BTC with the new endpoint `retrieve_btc_with_approval` ([developer docs](https://internetcomputer.org/docs/current/developer-docs/integrations/bitcoin/ckbtc#retrieve_btc_with_approvaladdress-text-amount-nat64-from_subaccount-opt-blob)). 

This completes the plans that were [announced here a while back](https://forum.dfinity.org/t/ckbtc-a-canister-issued-bitcoin-twin-token-on-the-ic-1-1-backed-by-btc/17606/156?u=manu). Note that the NNS FE dapp still uses the old subaccount-based way of converting ckBTC into BTC, but we plan to update this in the near future.

-------------------------

ICPSwap | 2023-10-13 07:07:07 UTC | #168

Thanks a lot for the update, Manu. ICPSwap has already updated the ckBTC minting feature.

-------------------------

Manu | 2023-10-16 11:47:15 UTC | #169

Nice work @ICPSwap! I just tried it, works like a charm!

-------------------------

bobekas | 2023-10-20 03:33:08 UTC | #170

Case closed I found the UI where to update my balance! Thank you so much ICP Community!

-------------------------

Dylan | 2024-04-23 00:36:04 UTC | #171

Today's ICP Dashboard release contains new functionality for decoding and displaying the info in ckBTC mint and burn memos.

**ckBTC Mint and Burn Memo Decoding**
Decoded ckBTC mint and burn memos are now utilized to display fields related to the Bitcoin blockchain and know-your-transaction (KYT) checks, and to more specifically label mint transactions. The various ckBTC mint and burn transaction types and their memo-related fields are outlined below.

* **ckBTC Mint Transactions:**
  * **Convert (BTC → ckBTC)** ([example](https://dashboard.internetcomputer.org/bitcoin/transaction/1346171))
    * **Bitcoin Transaction:** Displays the Bitcoin transaction output (UTXO) used in the BTC to ckBTC conversion as a transaction outpoint (txid:vout), linked to both the Bitcoin transaction and specific output on [blockstream.info](http://blockstream.info/).
    * **KYT Fee:** Indicates the fee charged for the KYT check.
  * **KYT Remuneration** ([example](https://dashboard.internetcomputer.org/bitcoin/transaction/1288981))
    * Compensates KYT access key providers for their KYT service provider subscription costs.
  * **Reimbursement** ([KYT Status: Rejected example](https://dashboard.internetcomputer.org/bitcoin/transaction/1278213), [KYT Status: Call Failed example](https://dashboard.internetcomputer.org/bitcoin/transaction/1271916))
    * Occurs if a KYT check fails during an ICRC-2-based ckBTC to BTC conversion attempt.
    * **KYT Fee**
    * **KYT Status:** Indicates if the KYT check was Rejected or Call Failed.
    * **Reimbursed Transaction:** Shows the index of the failed ckBTC to BTC conversion, linked to the associated ckBTC Transaction page on the ICP Dashboard.
* **ckBTC Burn Transactions:**
  * **Convert (ckBTC → BTC)** ([ICRC-2 example](https://dashboard.internetcomputer.org/bitcoin/transaction/1271915), [ICRC-1 example](https://dashboard.internetcomputer.org/bitcoin/transaction/1346071))
    * **Bitcoin Address:** Shows the destination Bitcoin address where BTC is sent upon successful conversion of ckBTC to BTC, linked to the Bitcoin address on [blockstream.info](http://blockstream.info/).
    * **KYT Fee:** Only present for the ICRC-1-based withdrawal flow.
    * **KYT Status:** Only present for the ICRC-1-based withdrawal flow.

The ckBTC Transactions table now uses more specific labels for mint transactions, and includes Bitcoin transaction and address links in the From and To columns.
![image|690x125](upload://dLGNBmqPrVKwtodNotBboexWX3l.png)

The help text for a **KYT Remuneration** transaction.
![image|509x500](upload://yVhhUgehwydbB1HZyuJI280sHE0.png)

The help text for a **Reimbursement** transaction.
![image|457x500](upload://qa9j11g7mRL1muSUCEJgGLIBZXC.png)

**Convert (BTC → ckBTC)** transactions show the Bitcoin transaction outpoint and KYT fee.
![image|690x179](upload://teOGVvhsu5KII3KIx2qFKV2osaM.png)

**Reimbursement** transactions show the KYT fee, KYT status, and index of the failed ckBTC to BTC conversion transaction.
![image|690x426](upload://8x9Btzgdz9eIifQqz3Ry4dokjZH.png)

**Convert (ckBTC → BTC)** transactions show the destination Bitcoin address, and transactions that use the ICRC-1-based withdrawal flow also show the KYT fee and KYT status.
![image|690x303](upload://aVsQMgzUjpHA5OEZbNElUc2AzgW.png)

-------------------------

_Eric | 2024-04-25 08:59:46 UTC | #172

![image|690x66](upload://1xSx0DyMbGNesVbyCUYE3W0J7CQ.png)
Hello, update_balance in Canister on my Bitcoin test network is not working properly.

-------------------------

Manu | 2024-04-25 10:59:43 UTC | #173

Hey @_Eric, yes bitcoin testnet is behaving strangely in the last days, see also my comment here https://forum.dfinity.org/t/bitcoin-signet-support/29845/5?u=manu. So the bitcoin testnet canister can't always stay in sync with blocks every second and then you might see this error in ckTestBTC. We may want to switch to Bitcoin Signet at some point to avoid such issues.

-------------------------

PaulLiu | 2024-05-27 16:27:13 UTC | #174

Looks like the ckBTC minter has been running for a while now on a minimum confirmation setting of 12 blocks when converting from BTC to ckBTC. A popular opinion we gathered from developers is to further lower it to have a better user experience. So we plan to submit an NNS proposal to further lower it down to 6 blocks. Would appreciate your input and support. Thanks!

-------------------------

PaulLiu | 2024-05-28 07:00:45 UTC | #175

The proposal is open for vote https://dashboard.internetcomputer.org/proposal/130096

-------------------------

timo | 2024-08-18 20:28:38 UTC | #176

I ran into a question regarding the Bitcoin address derivation used by the ckBTC minter. I found this in the [ckBTC API reference](https://internetcomputer.org/docs/current/references/ckbtc-reference#get_btc_addressowner-opt-principal-subaccount-opt-blob):

> `get_btc_address(owner: opt principal, subaccount: opt blob)` [​](https://internetcomputer.org/docs/current/references/ckbtc-reference#get_btc_addressowner-opt-principal-subaccount-opt-blob)
> 
> The provided principal ID and subaccount are concatenated to form the derivation path for the [ecdsa_public_key](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-ecdsa_public_key) function, which returns the derived public key. If no principal ID is provided, then the sender’s principal ID is used. If no subaccount is provided, then the default subaccount (all zeros) is used.
> 
> This public key is encoded as a pay-to-witness-public-key-hash (P2WPKH) Bitcoin address and returned as a text.
> 
> Note that the key derivation is not BIP-32 compliant, where 31 bits are used for each derivation level. Instead, a single derivation is performed based on the full principal ID and subaccount. Since the derivation is deterministic, a canister can derive the Bitcoin address for a given principal ID and subaccount itself.

I am wondering what the last sentence refers to.

Option 1: A canister can call for example the `ecdsa_public_key` function on the management canister and  provide  as `canister_id` in the argument the ckBTC minter and the same derivation path.

Option 2: A canister can also obtain the root public key of the ckBTC minter once and then do the derivation in its own code without having to call the management canister every time. This option is what the last sentence refers to? Is there Motoko code available that does this derivation? I found Motoko code for BIP32 derivation but not for the non-standard derivation used here.

Option 3: Non-canister code, for example a frontend, can have the root public key of the ckBTC minter hard-coded and then can also do option 2. Is there a js library available that does this?

-------------------------

zohaib29 | 2024-08-19 05:16:27 UTC | #177

[quote="timo, post:176, topic:17606"]
Is there a js library available that does this?
[/quote]

https://github.com/dfinity/ic-js/tree/main/packages/ckbtc#features

-------------------------

timo | 2024-08-19 07:43:29 UTC | #178

I think that library makes async calls to the minter canister. I am wondering if there is something that does the derivation locally.

-------------------------

THLO | 2024-08-19 08:46:53 UTC | #179

The last sentence simply means that, given the public key and the derivation path (comprising the principal ID and subaccount), the Bitcoin address *can* be derived locally, i.e., there is no need to call this (convenience) function.

This argument applies to all three options - but I'm not aware of any library support.

-------------------------

dfisher | 2024-08-19 11:37:10 UTC | #180

We should get ckBTC up and running on Eth, and as soon as the Solana integration is running, get ckBTC on there too. 

Bringing the battle to the home turf of other chains should be part of our strategy! And Oisy is the perfect place for it to happen. The tvl of wBTC is enormous…

-------------------------

timo | 2024-08-19 11:40:14 UTC | #181

[quote="THLO, post:179, topic:17606"]
the Bitcoin address *can* be derived locally
[/quote]

Is there any documentation at least for what I have to do to derive it? I couldn't find documentation of it.

-------------------------

THLO | 2024-08-19 11:58:00 UTC | #182

[quote="timo, post:181, topic:17606"]
Is there any documentation at least for what I have to do to derive it?
[/quote]

You can check out how the ckBTC minter itself derives the public key [here](https://github.com/dfinity/ic/blob/db118af8a1689fb98cdb980857c0ca7a9fada111/rs/bitcoin/ckbtc/minter/src/address.rs#L102).
Does this help?

-------------------------

