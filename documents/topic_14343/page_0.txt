mariop | 2022-07-15 14:00:43 UTC | #1

Hi everyone,

The final draft of the ICRC-1 Fungible Token Standard is available at [dfinity/ICRC-1](https://github.com/dfinity/ICRC-1).

I’ve incorporated all the changes we discussed plus the missing transfer errors. Please have a look and feel free to give feedback here or on Discord.

I would like to share the next steps to make the standard official:

1. Next Tuesday the working group will have the opportunity to vote on the standard.
2. If the working group decides in favor of this standard, DFINITY will submit it as an NNS motion proposal, such that the community can decide whether or not they would like to make this a standard. DFINITY will voluntarily abstain from voting on the NNS proposal.
3. If the NNS vote is successful then the standard can be considered finalized.

Looking forward to the next working group meeting.

Best,
Mario

-------------------------

bobbylingus | 2022-07-15 20:23:26 UTC | #2

Are Timo's last minute suggestions of any value here?

https://forum.dfinity.org/t/thoughts-on-the-token-standard/4694/192?u=bobbylingus

-------------------------

jzxchiang | 2022-07-16 03:25:17 UTC | #3

I know it's a lot of work and there's a lot of detail involved, but I wouldn't feel comfortable voting yes on something as important as an "official" token standard until:

* Flow diagrams for basic use cases with ICRC-1 are made available. For example, I saw an excellent diagram by @infu on Discord for a payment flow (attached below), but how about 3rd party transfers or atomic swaps?

![icrc|660x500, 50%](upload://884Cs73B0uoaNefjiMpu4jZlc3x.png)

* A better explanation of fees. The github [repo](https://github.com/dfinity/ICRC-1#extensions) doesn't specify how the fee is determined or who pays it.

* A comparison of ICRC-1 with the current ICP ledger interface. Comparisons with DIP-20 and/or IS-20 would be even better.

* Clear next steps on what will or will not be covered by future extensions. It'd be helpful to have a table with rows as "features" and columns as "extensions" and a checkmark for a cell if that feature will be enabled by that extension.

* A clear statement on what this ICRC-1 standard will be used for moving forward.

----

This information would help voters make a better informed decision IMO. A lot of this stuff is buried in the forums or on Discord, but many of us don't follow every thread (and can't attend the working group meetings).

-------------------------

jzxchiang | 2022-07-16 03:26:28 UTC | #4

+1, I also liked what I read by @timo here. It seems quite general and powerful.

-------------------------

Maxfinity | 2022-07-16 09:50:39 UTC | #5

In support of this minimal standard which can be upgraded with extensions later. Right now it is not important for the ICRC-1 standard to be perfect, but for the ICRC-1 standard to be delivered so that the Foundation can deliver the SNS, BTC on-chain and remove uncertainty for canister developers.

-------------------------

mariop | 2022-07-16 13:12:58 UTC | #6

[quote="bobbylingus, post:2, topic:14343"]
Are Timo’s last minute suggestions of any value here?
[/quote]

They are but not for the base standard. We should consider them when we talk about the approve/transferFrom payment flow.

-------------------------

mariop | 2022-07-16 13:25:50 UTC | #7

[quote="jzxchiang, post:3, topic:14343"]
Flow diagrams for basic use cases with ICRC-1 are made available. For example, I saw an excellent diagram by @infu on Discord for a payment flow (attached below), but how about 3rd party transfers or atomic swaps?
[/quote]

There are existing examples such as NNS, SNS and CMC that use payment flows with the standard. Adding diagrams would require a lot of work and time that I don't have. Maybe that's where the community can step in?

[quote="jzxchiang, post:3, topic:14343"]
A better explanation of fees. The github [repo](https://github.com/dfinity/ICRC-1#extensions) doesn’t specify how the fee is determined or who pays it.
[/quote]

I've added to the README a sentence about [who pays the fee](https://github.com/dfinity/ICRC-1#icrc1_transfer). Note that no standard explains how the fee is determined because it depends on the implementation. There is no way for the standard to impose that.

[quote="jzxchiang, post:3, topic:14343"]
A comparison of ICRC-1 with the current ICP ledger interface. Comparisons with DIP-20 and/or IS-20 would be even better.
[/quote]

All the candid files are available for you to make a comparison.

[quote="jzxchiang, post:3, topic:14343"]
* A clear statement on what this ICRC-1 standard will be used for moving forward.
[/quote]

I'm not sure to understand. This is a standard that devs can use for the fungible tokens on the IC. Nothing less, nothing more. What else should be added? For comparison, this is the [page of EIP-20](https://eips.ethereum.org/EIPS/eip-20).

[quote="jzxchiang, post:3, topic:14343"]
This information would help voters make a better informed decision IMO. A lot of this stuff is buried in the forums or on Discord, but many of us don’t follow every thread (and can’t attend the working group meetings).
[/quote]

That's why the github page of ICRC-1 exists. It contains all the info needed. The forum and discord can be used to add more context.

-------------------------

timo | 2022-07-16 19:17:29 UTC | #8

[quote="jzxchiang, post:3, topic:14343"]
A better explanation of fees.
[/quote]

I also think a better explanation of fees is needed. We are saying the implementation can decide, but in which way and how much freedom does the implementation have? For example, can the implementation:
- charge a one-time fee when a subaccount is first used?
- charge a recurring fee for any subaccount that has a non-zero balance?
- charge a per-transfer fee in the token itself?
- charge a per-transfer fee in cycles?

Does our interface allow or forbid any of the above?
Do we want to allow or forbid any of the above?

It seems like the `fee` argument in `TransferArgs` is specifically targeted at a per transfer fee in the token itself. It is not clear (to me) if the other ways to charge fees are possible with the interface we have.

-------------------------

timo | 2022-07-16 20:33:19 UTC | #9

A couple of things that we should be aware of and should explicitly state in the description of the standard:

It is specifically designed for one-canister ledgers, i.e. not ledgers that are sharded over multiple canisters.

It does not guarantee the property that from a private key alone you can recover all your funds. If you used long subaccount ids and forgot them you can loose funds that way. You might be able to scan through all blocks and find all subaccount ids you ever used but blocks and their content are up to the implementation. The standard does not guarantee that that data is stored and accessible.

-------------------------

mariop | 2022-07-16 20:34:13 UTC | #10

[quote="timo, post:8, topic:14343"]
I also think a better explanation of fees is needed. We are saying the implementation can decide, but in which way and how much freedom does the implementation have? For example, can the implementation:

* charge a one-time fee when a subaccount is first used?
* charge a recurring fee for any subaccount that has a non-zero balance?
* charge a per-transfer fee in the token itself?
* charge a per-transfer fee in cycles?

Does our interface allow or forbid any of the above?
Do we want to allow or forbid any of the above?

It seems like the `fee` argument in `TransferArgs` is specifically targeted at a per transfer fee in the token itself. It is not clear (to me) if the other ways to charge fees are possible with the interface we have.
[/quote]

The implementation is free to decide when to apply the fee and how much it is. The idea is that the fee covers the cost of operations and the cost is based on the implementation.

The interface defines the fee in tokens of that ledger but the implementation can decide to charge the fee in e.g. cycles by just setting the fee to 0 tokens and require cycles attached to the call.

Generally speaking, an implementation of the interface is valid as long as it follows the description of the methods.

-------------------------

mariop | 2022-07-16 20:35:50 UTC | #11

[quote="timo, post:9, topic:14343"]
It is specifically designed for one-canister ledgers, i.e. not ledgers that are sharded over multiple canisters.
[/quote]

The ICP Ledger and the ICRC-1 Ledger from DFINITY are both multi-canister ledgers and both support the standard.

[quote="timo, post:9, topic:14343"]
It does not guarantee the property that from a private key alone you can recover all your funds. If you used long subaccount ids and forgot them you can loose funds that way. You might be able to scan through all blocks and find all subaccount ids you ever used but blocks and their content are up to the implementation. The standard does not guarantee that that data is stored and accessible.
[/quote]

This is visible from the interface. There is no need to put redundant information.

-------------------------

timo | 2022-07-16 21:05:18 UTC | #12

[quote="mariop, post:10, topic:14343"]
The interface defines the fee in tokens of that ledger but the implementation can decide to charge the fee in e.g. cycles by just setting the fee to 0 tokens and require cycles attached to the call.
[/quote]

Ok. I am struggling then a bit to understand to what extend it can be seen as a standard. Say for example a DEX implements something to handle ICRC-1 tokens. It expects to then be able to offer trading for _all_ ICRC-1 tokens out there automatically. But that's not the case if suddenly one of the tokens expects cycles attached to transfer calls. So either the usefulness of the standard is limited or we have to forbid that a token charges fees in cycles because the interface cannot express that fact.

More generally than this particular case, I am struggling with the argument that implementations can add arguments to calls and still satisfy the standard due to subtyping. While technically a correct argument, there may be issues coming up on a semantic level that break things for the user of the interface. Generally, I am afraid that for a standard to be standard we need to say many more words about semantics, properties and guarantees than we would like. More than just listing an interface.

As for the recurring account fees (maintenance fees for accounts with non-zero balance). That would mean if a principal runs out of funds then the account gets shut down or no new sub accounts can be opened. That in turn would mean there is a new TransferError type, one that is related to the receiver side, which occurs when the receiver can't pay its fees. So I think we have to add something to the TransferErrors at least.

-------------------------

timo | 2022-07-16 21:06:04 UTC | #13

[quote="mariop, post:11, topic:14343"]
The ICP Ledger and the ICRC-1 Ledger from DFINITY are both multi-canister ledgers and both support the standard.
[/quote]

How do they shard? Over ranges of principals?

-------------------------

skilesare | 2022-07-16 21:20:07 UTC | #14

Block ids. Queries return an index if it isn’t in the head canister.

-------------------------

skilesare | 2022-07-16 21:23:43 UTC | #15

[quote="timo, post:12, topic:14343"]
Ok. I am struggling then a bit to understand to what extend it can be seen as a standard.
[/quote]

I think calling this a standard is a vestige of the eth ecosystem. We’ve designed an interface to enable interoperability. We don’t say anything about required functionality, and I don’t think we want to at this point to enable on y.

-------------------------

timo | 2022-07-17 04:14:52 UTC | #16

[quote="skilesare, post:14, topic:14343"]
Block ids. Queries return an index if it isn’t in the head canister
[/quote]

Ok, got it. Sorry, my original statement wasn’t clear. What I meant to say was the standard isn’t designed for a multiple canister implementation that scales tps. Meaning an implementation where account balances are sharded over multiple canisters which can then be spread over multiple subnets. In your words, multiple “head canisters”.

-------------------------

mariop | 2022-07-17 09:49:31 UTC | #17

[quote="timo, post:16, topic:14343"]
What I meant to say was the standard isn’t designed for a multiple canister implementation that scales tps.
[/quote]

It depends on the approach used to scale and it's a big discussion. For instance, I think it should be possible for a gateway to implement the standard.

-------------------------

timo | 2022-07-17 17:32:46 UTC | #18

But a gateway means it is still one gateway canister and then multiple ledger canisters behind it, or is it something else?

If it is one gateway and then multiple ledgers behind it then it scales arbitrarily in the number of open accounts that can be hosted but still has the tps limit of a single subnet, where the gateway is, maybe 400 tps or so of transfers initiated by external user via ingress messages to the gateway.

Scaling the tps would require that there's one gateway on each subnet and all can be utilized by external users in parallel, so that 10 subnets would get ~4000 tps. That's what we ultimately want to demonstrate tps scalability.

Yes, it's a big discussion, and one for another thread. Here, I just wanted to make the point that unless we have written down all the details we have to assume that our standard may not support this and, moreover, if it does not and changes or extensions are required then at this point we do not know if breaking changes are required.

-------------------------

timo | 2022-07-18 05:26:17 UTC | #19

Here is a proposal for the next working group meeting which I think might lead to faster acceptance of ICRC-1.

ICRC-1 is supposed to be a base standard.
We acknowledge that it does not cover all future demands.
Through the concept of modular extensions we hope that an existing token can adapt to future demands, i.e. expand its interface by upgrading the ledger, without having to create a wrapped token.
We want to avoid having to create wrapped tokens at all costs, for good reason, because that would create fragmentation in tokens.

In short, I think extensions alone do not cut it.
The limitation of extensions is that they can only extend, they cannot remove and, most importantly, they cannot introduce anything that _conflicts_ the already existing interface.

I want to ask the question how can a single ledger support two conflicting interfaces for the same token?
To make an extreme, hypothetical example, only for the purpose of demonstrating how far-reaching the concept of conflicting interfaces is:
can a ledger at the same time support an account based transaction model and a UTXO based transaction model?

The answer is quite simple.
Yes. All we have to do is version the interface.
Say version 1 is the proposed ICRC-1 interface, a set of functions and corresponding account labels.
Version 2 is some other set of functions which may or may not use the same kind of account labels (the pairs of principal and subaccount of version 1).
Versioning the interface actually means versioning the account labels.
Conflicting means that there is a function in the old interface that cannot be applied to an account of the new version.
When version 2 is introduced then a transfer function must come with it that allows to transfer from a version 1 account to a version 2 account, and vice versa if desired.

So what do we have to do at this point to prepare ICRC-1 for this? Not much. All we have to do is version the account labels. That's all.
Instead of (principal, subaccount) we have (version, (principal, subaccount)) and the version is set to 1.

Note that when a new version N is created it must be a standard of course, i.e. all tokens that implement version N must implement the same interface including the same transfer functions to and from exisiting versions.

Again, to repeat the power of the concept.
With a new version number we are basically creating a new, non-overlapping realm for the token.
We are allowing everything that a wrapped token could do, but without wrapping and in the same already existing ledger canister.

Versioning the account labels is a very simple, natural change and a good practice.
It helps to make ICRC-1 future proof.
With it we have a good argument that any shortcoming of ICRC-1, known or unknown, can be overcome in the future.

-------------------------

mariop | 2022-07-18 08:20:19 UTC | #20

Hey Timo,

thanks for sharing. This is interesting idea. It's very flexible at the cost of introducing complexity. If you want to support any combination of APIs then you can do that.

Alternatively, you could create incompatible standards. They can still live in the same canister but they are not considered part of the same set of api (e.g. not part of `icrc1_supported_standards`). Namespacing takes care of name clashing.

The general rule could be that standards in `icrc1_supported_standards` are additive and compatible with ICRC-1 base standard while standards not in `icrc1_supported_standards` are incompatible with ICRC-1 and represent a separate set of APIs.

The role of the standard is to be as simple as possible. Let's avoid versioning and complexity in general when possible.

The ICRC-1 Fungible Token Standard is ready to be voted in the current state.

-------------------------

timo | 2022-07-18 17:53:59 UTC | #21

Hey Mario,

[quote="mariop, post:20, topic:14343"]
hey can still live in the same canister but they are not considered part of the same set of api (e.g. not part of `icrc1_supported_standards`). Namespacing takes care of name clashing.
[/quote]

You are right. There is nothing else to do here. We are good since we already have namespacing due to the prefix `icrc1_` for all functions. The only problem arises if there is a second incompatible interface that wants to use the same account labels of the kind `(principal, subaccount)` as ICRC-1. Then we need a way to distinguish if a given pair `(principal, subaccount)`, when exchanged between users, is meant to be used for the ICRC-1 interface or for the other interface. The version doesn't have to become an argument of the ICRC-1 functions.

[quote="mariop, post:20, topic:14343"]
at the cost of introducing complexity
[/quote]

It is really only a version byte in the serialization of `(principal, subaccount)` which is the account label that is being passed around between users. Btw, have we specified the serialization at all? It needs to be part of the standard. It can't be left to the implementation. 

It is common practice to have versions bytes in data structures and serializations. Bitcoin addresses have had version bytes for example (luckily).

-------------------------

jzxchiang | 2022-07-19 21:24:15 UTC | #22

> Btw, have we specified the serialization at all? It needs to be part of the standard. It can’t be left to the implementation.

I'm assuming the principal is standard Candid serialization, and subaccount is serialized [just like](https://internetcomputer.org/docs/current/references/ledger/#_accounts) with the ICP ledger canister.

-------------------------

timo | 2022-07-20 10:09:11 UTC | #23

That can’t be. ICP ledger hashes principal and subaccount together to get to an account id. Here we have to keep them separate. So I’m guessing it might be something like principal:subaccount where subaccount is decimal maybe?

-------------------------

skilesare | 2022-07-21 06:35:40 UTC | #24

Discount is an up to 32 byte array. Can’t that be a nat? Or a blob in base 64(or whatever account I’d is). Or do we Crc it like principal so it is harder to screw up? So a principal sub account ends up looking like principal-looking-thing.principal looking-thing. Is there a separator that double click doesn’t treat as a separator and thus a double click on mobile would select it all? I’m trying to optimize for usability here. Maybe —(double dash?)

nmkbs-aaaaa-aaaam-aadfa-cai—s6bzd-46mcd-mlbx5-cq2jv-m2mhx-nhj6y-erh6g-y73vq-fnfe6-zax3q-mqe

If we did this we could add an overloaded transfer function that backs out the sub account using the existing principal function(it is just a blob. We could call it the text-id-extension and it could be icrcx_transfer_by_id(to: Text,from:text;…..) that just unwraps the 2nd principal of the to to the blob, confirms the first from part is the caller, and passes to a icrc1_transfer function handler. Would also be a good replacement for send_dfx

-------------------------

timo | 2022-07-21 09:32:00 UTC | #25

[quote="skilesare, post:24, topic:14343"]
Is there a separator that double click doesn’t treat as a separator and thus a double click on mobile would select it all?
[/quote]

In my experience what double click selects highly depends on the environment, it is inconsistent between browsers, terminals and editors (even between different software in the same category).

-------------------------

timo | 2022-07-22 18:58:28 UTC | #26

If you want just one checksummed account identifier, encoded as one string, then we should have gone with the account ids of the ICP ledger, `Hash(principal, subaccount)`. I thought the reason we have an explicit pair `(principal, subaccount)` was that it is self-explanatory to a user who already knows what a principal is. And also that a user can visually parse it and identify the receiving principal. Creating one long string will be confusing to users and require additional explanation. We should just represent it naturally as something like `(nmkbs-aaaaa-aaaam-aadfa-cai,0)` or `nmkbs-aaaaa-aaaam-aadfa-cai:0` or `nmkbs-aaaaa-aaaam-aadfa-cai.0`. We could allow subaccount to be specified in decimal or hex where hex has the usual 0x prefix, for example `(nmkbs-aaaaa-aaaam-aadfa-cai,0x00)`. We just need to define how they map to blobs. 

Yes, unfortunately subaccount wouldn't be checksummed. At least the funds would be recoverable is subaccount is accidentally wrong but principal is correct.

-------------------------

skilesare | 2022-07-24 02:16:28 UTC | #27

[quote="timo, post:26, topic:14343"]
nmkbs-aaaaa-aaaam-aadfa-cai.0
[/quote]

I kind of like this one the best. Great point about the sub accounts being recoverable.

-------------------------

neeboo | 2022-07-24 04:07:20 UTC | #28

I prefer `{canisterId}`/subaccount

-------------------------

skilesare | 2022-07-24 20:13:41 UTC | #29

Slashes are not very url friendly. If we could keep it to something that won’t make a web dev’s life hell we should(I like slashes to, but try explaining how to enter in url encoded character your first customer and you will realize you’ve made a horrible mistake) 😂

Here are some basics https://stackoverflow.com/questions/695438/what-are-the-safe-characters-for-making-urls

-------------------------

timo | 2022-07-25 09:00:24 UTC | #30

We should also think about a prefix. We could make it a URI such as 
`icrc1:nmkbs-aaaaa-aaaam-aadfa-cai.0` or some other prefix instead of `icrc1`.

-------------------------

Tbd | 2022-07-25 11:16:03 UTC | #31

did:icp:nmkbs-aaaaa-aaaam-aadfa-cai.0 :stuck_out_tongue:

-------------------------

neeboo | 2022-07-25 13:25:28 UTC | #32

icpr should come first to the DID group :D

-------------------------

sci.jordan | 2022-07-25 20:42:18 UTC | #33

Why ICRC-1 as opposed to DIP-20 or IC-20?

-------------------------

bitbruce | 2022-07-26 03:30:51 UTC | #34

```
icrc1_transfer : (TransferArgs) -> (variant { Ok: nat; Err: TransferError; });
```

Type TransferError is from Ledger.did

```
public type TransferError = {
        #BadFee : { expected_fee : { e8s : Nat64; }; };
        #InsufficientFunds : { balance: { e8s : Nat64; }; };
        #TxTooOld : { allowed_window_nanos: Nat64 };
        #TxCreatedInFuture;
        #TxDuplicate : { duplicate_of: Nat64; }; // BlockIndex
    };
```

Is it misleading that the key representing the balance is named `e8s` in the tokens?

The Nat64 type will overflow if the total supply is large.

-------------------------

timo | 2022-07-26 07:15:18 UTC | #35

[quote="bitbruce, post:34, topic:14343"]
The Nat64 type will overflow if the total supply is large.
[/quote]

The type has already been changed to `nat` in current code.

-------------------------

timo | 2022-07-26 07:19:01 UTC | #36

[quote="neeboo, post:32, topic:14343, full:true"]
icpr should come first to the DID group :smiley:
[/quote]

As far as I understand the W3C standard, something that starts with `did:` is supposed to point to a document that describes a subject. That's not the case here. The account label identifies the account directly, not indirectly through another document.

But something like hierarchical like `ic:rc1:nmkbs-aaaaa-aaaam-aadfa-cai.0` would indeed be nice. Easier to remember because everything on the IC will start with `ic:`.

-------------------------

bitbruce | 2022-07-26 07:30:20 UTC | #37

https://github.com/dfinity/ICRC-1/issues/30

-------------------------

Embark | 2022-08-03 12:19:59 UTC | #38

Dear colleagues, what are your thoughts about adding a restricted transfer function where the token minter can define conditions for transfers? 
This is an active discussion in the EIP forums as it would open many more real world DeFi use-cases and the Internet Computer could leapfrog here:

Use-Cases include transfer-level conditions such as lock-up periods, identities to be known or accepted by Internet Identity personhood check as well as token-level conditions i.e. the token contract enforces a maximum number of investors or a cap on the percentage held by any single investor.

```
function canTransfer(address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);
function canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);
```

And asked differently as I understand that the ICRC token standard could be extended: Is it possible to add such a function and still be compatible with the standard?

-------------------------

timo | 2023-02-27 11:14:19 UTC | #39

Not sure if there's any active thread on ICRC1, so trying it here in this one.

I have always thought that the spec should specify more than just the interface. That it should also specify semantics of the API and aspects of behaviour.

So here is a question: If a client canister makes two calls to `icrc1_transfer` and `icrc1_balance_of` in that order, can the client canister assume to get the balance from after the transfer, not before the transfer? It is certainly true in a simple single-canister implementation of the ledger. But the spec doesn't guarantee it I suppose. Could it be possible that in some implementation that `ircrc1_balance_of` returns directly whereas `icrc1_transfer` makes an inter-canister call (even if just for logging) before committing the balance change?

-------------------------

levi | 2023-02-28 06:00:41 UTC | #40

[quote="timo, post:39, topic:14343"]
If a client canister makes two calls to `icrc1_transfer` and `icrc1_balance_of` in that order, can the client canister assume to get the balance from after the transfer, not before the transfer?
[/quote]

If the client canister waits for the `icrc1_transfer` call to come back with a successful response before making the `icrc1_balance_of` call, then the client canister can be sure that the balance is from after the transfer. 

If the client canister calls `icrc1_balance_of` without waiting for the `icrc1_transfer` call to come back with a successful response, then there is no guarantee whether the balance response is from before or after the transfer. 

[quote="timo, post:39, topic:14343"]
Could it be possible that in some implementation that `ircrc1_balance_of` returns directly whereas `icrc1_transfer` makes an inter-canister call (even if just for logging) before committing the balance change?
[/quote]
Yes. That is why a client must wait for a transfer call to come back with a response before calling for the balance.

-------------------------

skilesare | 2023-02-28 15:41:55 UTC | #41

I would assume this is the case. One should not query the balance until the new block is returned. @AlliDoizCode may have some direct expletive with this give all the hoop jumping YC does when a transaction happens. We are starting to see some real usage of these things.

-------------------------

