lastmjs | 2021-03-25 23:05:14 UTC | #1

Hey, I've looked through quite a few different places, and I'm not quite sure on the best way to generate custom principals or uuids with Rust.

How would I go about doing this? Is it possible to create custom principals? I think it would just be nice to be able to generate uuids that have the same format as IC principals.

-------------------------

hansl | 2021-03-25 23:15:00 UTC | #2

Custom or random? Random ones can be generated from a random private/public key pair.

Principals follow a pattern and don't make sense as a random blob; canister IDs are created by the system and cannot sign messages, only derived Principal IDs (derived from a private key) can sign messages.

So the only "custom" prinicpals I could see would be canister IDs, which you can use the text format to encode some. But the goal of Principals was always as an opaque blob that doesn't make sense as a random value.

-------------------------

lastmjs | 2021-03-25 23:16:45 UTC | #3

Thank you.

I want to be able to create UUIDs from within a canister. What is the best way to go about that? I think it would be nice for the UUID generated to have the same format as a principal, even if it doesn't have the special features of a principal. All of this in Rust

-------------------------

hansl | 2021-03-25 23:42:02 UTC | #4

You can use a PRNG, and you could seed it with the random beacon if you really want random stuff (otherwise timestamp would be enough?). The beacon API is here: https://sdk.dfinity.org/docs/interface-spec/index.html#ic-raw_rand (it's `raw_rand : () -> (blob)`).

Creating principals from a UUID wouldn't make much sense IMO.

Just to back up a little, what is the problem you're trying to solve by getting Principals in this manner? How are the principals going to be used?

-------------------------

lastmjs | 2021-03-25 23:47:50 UTC | #5

I'm just trying to generate UUIDs for database entries is all, and I would prefer to have UUIDs instead of incremental integers

-------------------------

lastmjs | 2021-03-25 23:50:43 UTC | #6

How do I access `raw_rand` from a Rust canister? I don't see it in the ic-cdk packages as far as I can tell. Am I supposed to treat the management canister as a canister and call it that way? Could you provide an example?

-------------------------

hansl | 2021-03-26 00:02:51 UTC | #7

[quote="lastmjs, post:6, topic:2294"]
Am I supposed to treat the management canister as a canister and call it that way?
[/quote]

Yes. It's a bit low level currently but it should work as any inter canister calls.

```rust
let (bytes,): (Vec<u8>,) = ic_cdk::api::call(Principal.management_canister(), "raw_rand", ()).await?;
```

-------------------------

lastmjs | 2021-03-26 00:06:40 UTC | #8

Thank you! Are inter-canister calls documented for Rust at all? There doesn't seem to be very much Rust documentation at all, unless I am not looking in the right places.

-------------------------

hansl | 2021-03-26 00:08:49 UTC | #9

The CDK is a bit low level for the time being, just mapping on top of the System API exports with a bit of functionality for making calls async. Sorry about that, it's still early in the development :) We will get better over time.

-------------------------

rckprtr | 2021-03-26 02:23:00 UTC | #10

Very cool, I was looking for something similar for UUID's, I ended up going with a global index.

-------------------------

Ori | 2021-03-26 10:53:00 UTC | #11

I did too for now. I was wondering about the cost of using raw_rand for this?

-------------------------

lastmjs | 2021-04-01 20:39:36 UTC | #12

I was able to get this working from a canister by creating a sha256 hash of the random bytes, which is awesome!

I am running into an issue with the IC's async/await implementation though, I think. I'm using `async-graphql`, and from within an async mutation resolver, I'm getting some crazy errors about threading. I'm sure I'll learn a lot more about this in the coming days and weeks, but can you give some insight into the async/await implementation that the IC has chosen? Here's the issue I've opened in the `async-graphql` repo: https://github.com/async-graphql/async-graphql/issues/110

I'm fearing that the IC's async/await implementation might not be compatible with `async-graphql`, perhaps because the IC's async/await has made an assumption that it will only operate in a single-threaded environment.

-------------------------

lastmjs | 2021-04-01 21:53:10 UTC | #13

Also, would it be possible to make the raw_rand function synchronous? For example, getting the current time is a simple synchronous call to ic_cdk::api::time, so nice and simple. ic_cdk::api::raw_rand would be really nice.

-------------------------

hansl | 2021-04-01 22:02:32 UTC | #14

The random value returned is guaranteed to be truly random (using a physical random beacon), so it cannot be synchronous. If you don't need that kind of security, I recommend to use a PRNG seeded with either the beacon or time.

-------------------------

lastmjs | 2021-04-02 00:21:47 UTC | #15

@hansl Sounds good on the sync, thank you. My bigger problem from a couple comments back remains...and I'm afraid it's going to become a very large problem once I need to do inter-canister calls

-------------------------

paulyoung | 2022-05-26 21:00:02 UTC | #16

[quote="rckprtr, post:10, topic:2294, full:true"]
Very cool, I was looking for something similar for UUID’s, I ended up going with a global index.
[/quote]

@rckprtr how does what you’re doing compare with what I wrote here?

https://github.com/roman-kashitsyn/mmapped.blog/issues/8

-------------------------

rckprtr | 2022-05-26 22:44:23 UTC | #17

Hey,

So we are probably going to use this method
https://github.com/dfinity/nns-dapp/blob/main/rs/src/state.rs

We have not had a chance to upgrade to `!thread_local` yet as we use the old paradigm 200+ times in our repo and figure it would be better to do a complete refactor instead of a quick fix.

Rick

-------------------------

AliSci | 2023-01-01 08:59:16 UTC | #18

Can you give me example about using PRNG?
is it like
```rs
let id = rand::prng().gen(0..16)
```
?
Because: when i tried `rand::prng` it `cannot find function `prng` in crate `rand` [E0425]`

-------------------------

paulyoung | 2023-01-01 22:57:12 UTC | #19

I think you’d need to do something like this:

https://github.com/codebase-labs/ic-auth-tokens/blob/76113cbaa8b788b1989a9d5ef0868cdb12ee46af/crates/ic-auth-tokens/src/lib.rs#L75-L95

-------------------------

