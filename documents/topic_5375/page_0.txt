flyq | 2021-06-20 13:03:57 UTC | #1

Try to use the Error from [base library](https://github.com/dfinity/motoko-base). 

```mo
import Error "mo:base/Error";

actor Main {
    var c = 1;

    public func add1() : async Nat {
        c += 100;
        throw Error.reject("test"); 
    };

    public func add2() : async Nat {
        c += 100;
        assert(false);
        return c;
    };

    public func reset() : async Nat {
        c := 1;
        return c;
    };

    public query func getc() : async Nat {
        return c;
    };
};
```
here is my log:
```sh
sudo dfx build main
Password:
Building canisters...

sudo dfx canister --no-wallet install main -m=reinstall
Reinstalling code for canister main, with canister_id rwlgt-iiaaa-aaaaa-aaaaa-cai

dfx canister --no-wallet call main getc
(1)

dfx canister --no-wallet call main add2
The Replica returned an error: code 5, message: "Canister rwlgt-iiaaa-aaaaa-aaaaa-cai trapped explicitly: assertion failed at /Users/flyq/workspace/test/pubfunc/src/main.mo:13.9-13.22"
dfx canister --no-wallet call main getc
(1)

dfx canister --no-wallet call main add1
The Replica returned an error: code 4, message: "test"

dfx canister --no-wallet call main getc
(101)
```

`assert` correctly throw an exception and successfully rolled back the state, meets expectations.

But `Error.reject` throws an exception, but there is no rollback state.

-------------------------

claudio | 2021-06-20 13:30:32 UTC | #2

That is the intended semantics, not a bug.

-------------------------

flyq | 2021-06-20 14:37:20 UTC | #3

1. If I want to throw an exception in Motoko, I want to be guaranteed the rollback state and throw the related information of the exception, what should I need to do?
2. Is there more information about Error.reject? I find [Overview of canister calling](https://sdk.dfinity.org/docs/interface-spec/index.html#http-call-overview), but not about Error.

-------------------------

paulyoung | 2021-06-20 18:10:47 UTC | #4

I found a little bit of info here but I donâ€™t think it fully answers your questions.

https://forum.dfinity.org/t/traps-and-commit-points-throw-confusion/5253/2?u=paulyoung

-------------------------

claudio | 2021-06-20 18:50:28 UTC | #5

An uncaught/escaping `throw` expression maps to the System API call `msg_reject`, which has the property of committing state changes, just like `msg_reply`. So the high-level semantics is largely determined by that of the low-level platform. 

https://sdk.dfinity.org/docs/interface-spec/index.html#system-api-imports

Note that throws can be locally caught using `try-catch` expressions, and it would be weird if those caught throws reverted state.

-------------------------

