haida | 2023-08-20 14:20:40 UTC | #1

I want to transfer money to the hex code of accountIdentifier, but I don't know how to parse out the subaccount?

My working steps are:

First: Generate a hexadecimal ICP address
```
  public query func generateHexIcpAaddress(identityToken : T.IdentityToken) : async Hex.Hex {
    let { addressId; token } = identityToken;
    let accountIdentifier = LedgerAccount.accountIdentifier(installer.caller, LedgerAccount.generateSubaccount(addressId));
    Hex.encode(accountIdentifier);
  };
```
Step 2: Deposit to this address:
```
  public func topUpICP(address : Hex.Hex, amount : Nat) : async ICPledger.TransferResult {
    switch (Hex.decode(address)) {
      case (#ok(accountIdentifier)) {
        let (isOk, accIdPart) = LedgerAccount.validateAccountIdentifier(accountIdentifier);
        if (not isOk) {
          Debug.trap("AccountIdentifier verification failed");
        };
        let principal = Principal.fromBlob(Blob.fromArray(accountIdentifier));
        Debug.print(debug_show (principal));
        await ICPledger.icrc1_transfer({
          from_subaccount = null; // ICP balance already exists in the Canister id
          to = {
            owner = principal; // ？？
            subaccount = // ??;
          };
          amount = amount * 10 ** 8;
          fee = null;
          memo = null;
          created_at_time = null;
        });
      };
      case (#err(err)) {
        Debug.trap(err);
      };
    };
  };
```

The problem is in the second step, I don't know how to correctly parse out to.owner and to.subaccount?
Hope to get support, thank you!

-------------------------

sea-snake | 2023-08-20 18:59:42 UTC | #2

An ICP account hash is a one-way hash of account principal and a sub account. You can't get the principal and sub account from this address.

In comparison the newer ICRC1 address format is not a hash but a textual format that describes the principal and sub account. In this format you can still get the principal and sub account from the address.

So for sending ICP to a non ICRC1 address (old hash format in hex) you can use the older `transfer` method instead of `icrc1_transfer` on the ledger canister.

-------------------------

haida | 2023-08-21 02:28:56 UTC | #3

I see, thanks a lot!
But at the same time a new problem arises,

` https://internetcomputer.org/docs/current/developer-docs/integrations/ledger/ledger-local-setup`

The old `transfer` function is not included in the candid and wasm files in the official example.
Because I found that the common ICP addresses on the market are all in the traditional Hex encoding format.

Can you please provide a candid and wasm file address that is compatible with the old method?

Thanks again! ! !

-------------------------

cyberowl | 2023-08-21 03:36:52 UTC | #4

So what is the diff from  Ledger canister and newer ICRC1 canister? Seems like ICRC1 is an extension of the Ledger canister.

-------------------------

curry | 2023-08-21 04:16:55 UTC | #5

https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icp_ledger/ledger.did

-------------------------

haida | 2023-08-21 04:31:17 UTC | #6

```
{
  "canisters": {
  "ledger": {
    "type": "custom",
    "candid": "https://raw.githubusercontent.com/dfinity/ic/a17247bd86c7aa4e87742bf74d108614580f216d/rs/rosetta-api/icrc1/ledger/ledger.did",
    "wasm": "https://download.dfinity.systems/ic/a17247bd86c7aa4e87742bf74d108614580f216d/canisters/ic-icrc1-ledger.wasm.gz",
    "remote": {
      "id": {
        "ic": "ryjl3-tyaaa-aaaaa-aaaba-cai"
      }
    }
  }
  },
  "defaults":{
    "replica": {
      "subnet_type":"system"
    }
  }
}
```
Is there a wasm url address in a similar configuration file?

-------------------------

icaten | 2023-08-21 19:50:51 UTC | #7

Be aware if you use system subnet type replica, the port will be 8080 instead of the default 4943.

-------------------------

haida | 2023-08-22 10:30:51 UTC | #8

Thank you. We have clarified the structure of the IC project and found the relevant address.

```
{
"candid": "https://raw.githubusercontent.com/dfinity/ic/f8f59f896499f2fef394d8321116f83351c59aa8/rs/rosetta-api/icp_ledger/ledger.did",
"wasm": "https://download.dfinity.systems/ic/f8f59f896499f2fef394d8321116f83351c59aa8/canisters/ledger-canister_notify-method.wasm.gz"
}
```

-------------------------

Damz | 2023-08-23 15:37:29 UTC | #9

I can see the `transfer` method in the `.did` file you've linked, but locally deploying this canister with the new wasm doesn't work for me. Deployed the ledger locally but still getting:

`DestinationInvalid, "IC0302: Canister has no update method 'transfer'"`

-------------------------

haida | 2023-08-24 02:51:24 UTC | #10

[quote="haida, post:8, topic:22284"]
```
{
"candid": "https://raw.githubusercontent.com/dfinity/ic/f8f59f896499f2fef394d8321116f83351c59aa8/rs/rosetta-api/icp_ledger/ledger.did",
"wasm": "https://download.dfinity.systems/ic/f8f59f896499f2fef394d8321116f83351c59aa8/canisters/ledger-canister_notify-method.wasm.gz"
}
```
[/quote]

Using the above "candid" and "wasm" files here, `transfer` works normally

-------------------------

Damz | 2023-08-24 08:32:47 UTC | #11

I deleted my .dfx folder but now I can't deploy this. At first it complains `record field send_whitelist not found`. After adding this in I get `cannot be of type variant { Upgrade : opt UpgradeArgs; Init : InitArgs }`

What command did you use to deploy this version locally?

-------------------------

Damz | 2023-08-24 09:53:07 UTC | #12

Figured it out, this version works with:

`dfx deploy ledger --argument '(variant {Init = record {minting_account = "${MINTER_ACC}"; initial_values = vec { record { "${DEPLOY_ACC}"; record { e8s=100_000_000_000 } }; }; send_whitelist = vec {}; archive_options = opt record { trigger_threshold = 2000; num_blocks_to_archive = 1000; controller_id = principal "'${DEPLOY_PRINCIPAL}'" }}})'`

-------------------------

