infu | 2022-10-07 18:11:07 UTC | #1


Check it out here
[https://jglts-daaaa-aaaai-qnpma-cai.ic0.app/]

I hope you have fun!

I will add some more blasts and announce in on Twitter in a few days.
If you have ideas or code for presets they will be much appreciated.

I will add soon:
- more blasts
- sharing
- better canister interface inspection

-------------------------

amircryptola1 | 2022-10-01 19:35:06 UTC | #2

Cool thank you for sharing! Should definitely help with onboarding newcomers

-------------------------

infu | 2022-10-03 10:57:50 UTC | #3

Added canister inspection
![image|690x424](upload://gc6qOWt78Xq5KQBPdQ9UaEKq8xT.png)

Tries a different approach when explaining interfaces
![image|690x268](upload://dSupD7bQJ8wnWeK5UtfHIWHAZKk.png)

Added table display
![image|561x500](upload://okf7AcdseELZaVhgBnHPM6HCCSC.png)

-------------------------

infu | 2022-10-07 18:12:50 UTC | #4

Added Motoko to the playground. 
![image|690x347](upload://7ZT44g7xa4UaLlH7Otk9h3D89qb.png)
 https://jglts-daaaa-aaaai-qnpma-cai.ic0.app/41.6e5cfc8600203fe513231b96d154c662b0da74f016c27a6373d5ed83 
You can deploy & redeploy test code. 
You can also hit "Make Immutable" and then share your blast.
I think it will fit when someone wants to make a small contract for the purposes of proving airdrop fairness & drawing a random number, etc.

I am using [ https://github.com/dfinity/node-motoko ] which I believe is originally intended for the VS Studio Code addon? and the Motoko Playground.
I very much appreciate that repository.

There is an issue I got, but figured out a temporary workaround [ https://github.com/dfinity/node-motoko/issues/25 ]
One of the problems is having deterministic compilations.
Which also includes finger-pointing Motoko compiler versions for older code.
@rvanasa 

If it's outside of the scope of this package, I will fork it, but it doesn't seem to be a lot of hassle to do.
I will also need to prove that Blast's front end isn't cheating, which probably means I'll give code to users to verify contracts on their own. Something using the node-motoko package.

-------------------------

infu | 2022-10-10 11:36:57 UTC | #5

Happy to announce that I've added inline Motoko (no need to install it in canisters)
This example demonstrates stable nested @ZhenyaUsenko's HashMap, probably something every new dev wants to do.

![image|444x500](upload://bwX4Ue5L8m48PZEc7Y79ujUUIPV.png)
Changed the editor from Codemirror to Monaco (used in VScode)
Added installing packages
Added Motoko syntax highlighting + compiler checks & errors

@rvanasa I ran into a problem (while using `run`). Adding more than 20 lines of code results in "Maximum call stack size exceeded" which somehow magically fixes after 3-4 retries. Can I increase the limit somehow?

My goal with these examples is to help the next Mark Zuckerberg make a web3 startup from his dorm room. I will be adding more, usually in response to discord #motoko questions. There are currently 3 pages (blasts) here [https://jglts-daaaa-aaaai-qnpma-cai.ic0.app/]


@claudio @rossberg @ggreif I hope you approve of what I am doing with your language. I will be happy to take any criticism.

Edit: I am wondering - are there plans to make classes stable? asking because the community is going towards rewriting all data structures to work on data instead of being inside the data - like the example above

-------------------------

rvanasa | 2022-10-10 16:10:24 UTC | #6

It's currently possible to compile and run WASI to get around the stack overflow issue ([example](https://github.com/dfinity/node-motoko/blob/main/examples/wasm.js)). My understanding is that this works for everything except actors / actor classes, so I'll ask the team if there's a way to add support for these so it could fully replace the interpreter in this situation.

-------------------------

rossberg | 2022-10-10 16:29:36 UTC | #7

[quote="infu, post:5, topic:15708"]
My goal with these examples is to help the next Mark Zuckerberg make a web3 startup from his dorm room. [...]
@claudio @rossberg @ggreif I hope you approve of what I am doing with your language
[/quote]

Well, except for the strange goal â€“ if there's one thing the world doesn't need, then it's another sociopath with way too much unchecked power. ; )

-------------------------

infu | 2022-10-10 16:49:52 UTC | #8

Oh, I didn't know that will solve it. Thanks, it's enough! 

It would be great if we can create an actor and call its functions (without installing), but I don't need that right now.

-------------------------

claudio | 2022-10-10 19:37:48 UTC | #9

I don't think the wasi compiled code will ever perform a GV, since GC is currently tied to IC messaging (unless @nomeata slipped that in somehow). I expect realistic examples will run out of memory.

-------------------------

claudio | 2022-10-10 19:44:55 UTC | #10

I'm not sure why the stack overflow occurs , but suspect it's because js_of_ocaml can't handle indirect tail calls, and the interpreter relies on them heavily.

http://ocsigen.org/js_of_ocaml/latest/manual/tailcall

-------------------------

