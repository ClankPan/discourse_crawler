roman-kashitsyn | 2022-09-05 20:43:59 UTC | #1

Hi!

As many of you know, the ICRC-1 interface was received very well and accepted: https://dashboard.internetcomputer.org/proposal/74740. If you want to learn more about the design principles behind the standard and the future steps, I wrote a [medium post](https://medium.com/p/f7f303a33300) on this topic.

The first item on the agenda is figuring out the textual encoding for accounts.
The Working Group unanimously agreed that re-using text encoding of principals is the best option. Here is a PR with the specification: https://github.com/dfinity/ICRC-1/pull/55. The encoding is not set in stone yet; feel free to comment on the PR!

We also realized that WG discussions are less productive than they could be. One reason is that the meeting agenda is usually unknown before the meeting starts. We hope that advertising the topic in advance might increase participation and productivity.

The next WG meeting is tomorrow; we'll finalize the textual encoding and discuss the acceptance test suite and the transaction log specs.

-------------------------

timo | 2022-09-07 04:17:06 UTC | #2

Are there meeting minutes of the WG meeting for those who weren't able to attend? What was the outcome?

-------------------------

roman-kashitsyn | 2022-09-07 07:19:57 UTC | #3

> Are there meeting minutes of the WG meeting for those who weren’t able to attend?

https://github.com/dfinity/ICRC-1/blob/main/Charters.md#2022-09-06

> What was the outcome?

Regarding the textual encoding: no objections to the encoding with explicit subaccount length and "not a principal" marker. Everyone agreed that having short subaccounts with automatic padding might be useful. We can specify that encoders are allowed to do such space optimizations, and decoders must respect them.

-------------------------

timo | 2022-09-07 07:54:17 UTC | #4

Ok, so encoders can use the abbreviation with automatic padding or can choose not to? That means there is no uniqueness, or, more precisely, we can have anywhere between 1-33 different encodings for the same account (because the encoder can choose to abbreviate any number of trailing zero bytes).

-------------------------

timo | 2022-09-07 07:55:14 UTC | #5

Regarding the choice of marker for "not a principal" I think we should also inform and ask people outside of the ICRC-1 group.

-------------------------

roman-kashitsyn | 2022-09-07 09:41:32 UTC | #6

[quote="timo, post:4, topic:15298"]
That means there is no uniqueness, or, more precisely, we can have anywhere between 1-33 different encodings for the same account (because the encoder can choose to abbreviate any number of trailing zero bytes).
[/quote]

Yes, but the encoding is already non-unique in the presence of default subaccounts. The WG agreed that we should be flexible in encodings that we accept and advice applications not to use textual representations as keys (in a map/database, etc), but rather decode the strings and normalize them. That's what the ledger has to do as well.

[quote="timo, post:5, topic:15298, full:true"]
Regarding the choice of marker for “not a principal” I think we should also inform and ask people outside of the ICRC-1 group.
[/quote]

Yes, I've talked to @bjoern about it before the WG meeting and he was cool with that. I'll prepare a spec change.

-------------------------

timo | 2022-09-07 09:50:32 UTC | #7

[quote="roman-kashitsyn, post:6, topic:15298"]
advice applications not to use textual representations as keys (in a map/database, etc)
[/quote]

Is that so easy? Thinking for example about a block explorer where you paste in the account identifier and then get back all transactions of it. So then I would paste in one encoding but in the transaction list that I see it may then appear in a different encoding? Or does it appear in a completely different way, as a pair with the subaccount id bytes exposed? Might be confusing. Whether the pair is exposed or the textual encoding is shown can be easily solved with a toggle. But not the same way between different textual encodings.

-------------------------

timo | 2022-09-07 09:52:22 UTC | #8

[quote="roman-kashitsyn, post:6, topic:15298"]
[quote="timo, post:5, topic:15298"]
Regarding the choice of marker for “not a principal” I think we should also inform and ask people outside of the ICRC-1 group.
[/quote]

Yes, I’ve talked to @bjoern about it before the WG meeting and he was cool with that. I’ll prepare a spec change.
[/quote]

Made a general post about the topic here: https://forum.dfinity.org/t/using-the-principals-textual-encoding-for-other-things-than-principals/15319?u=timo

-------------------------

roman-kashitsyn | 2022-09-07 09:58:14 UTC | #9

[quote="timo, post:7, topic:15298"]
Might be confusing. Whether the pair is exposed or the textual encoding is shown can be easily solved with a toggle. But not the same way between different textual encodings.
[/quote]

I also started thinking about block explorers and how users might be confused because some app didn't apply an optimization, but another did.

Then we have to enforce optimizations on the spec level and reject unoptimized encodings from the very start. This will give use uniqueness, but will break some natural properties, such as 

```
∀ a ∈ Account : decodeAccount(encodeAccount(a)) = a
```

I'm think that not a huge problem, but would be nice to listen to more opinions, e.g., from @bogdanwarinschi.

-------------------------

timo | 2022-09-07 10:02:11 UTC | #10

[quote="roman-kashitsyn, post:9, topic:15298"]
but will break some natural properties, such as

```
∀ a ∈ Account : decodeAccount(encodeAccount(a)) = a
```
[/quote]

What is `a` here? The pair `(principal, 32 bytes)`? Then the property isn't broken.

-------------------------

roman-kashitsyn | 2022-09-07 10:21:42 UTC | #11

[quote="timo, post:10, topic:15298"]
What is `a` here? The pair `(principal, 32 bytes)`? Then the property isn’t broken.
[/quote]

The pair is `(principal, opt blob)`. Optimizing `(principal, opt DEFAULT)` to `(principal, null)` is required for uniqueness, unless we remove the requirement that `(principal, opt DEFAULT)` is the same is `(principal, null)` (which will be incompatible with the ICP ledger).

-------------------------

timo | 2022-09-07 10:41:33 UTC | #12

Maybe I don't understand. The problem with the default account was always there, wasn't it? What changes with respect to it?

I am trying to understand the statement:

[quote="roman-kashitsyn, post:9, topic:15298"]
Then we have to enforce optimizations on the spec level and reject unoptimized encodings from the very start. This will give use uniqueness, but will break some natural properties, such as
[/quote]

Why does enforcing an optimization break a property that held before? The problem was already there without the optimization, or?

We would basically have to say that `(principal, 32*0x00)` is not a valid account, only `(principal, null)` is. If you want to have the cited property, the encoder has to reject `(principal, 32*0x00)`.

But maybe I'm misunderstanding something. What does `(principal, opt DEFAULT)` stand for by the way?

-------------------------

roman-kashitsyn | 2022-09-07 11:15:16 UTC | #13

[quote="timo, post:12, topic:15298"]
But maybe I’m misunderstanding something. What does `(principal, opt DEFAULT)` stand for by the way?
[/quote]

That's the same as `(principal, 32*0x00)`.

[quote="timo, post:12, topic:15298"]
The problem with the default account was always there, wasn’t it? What changes with respect to it?
[/quote]

If we want _uniqueness property_, we have to _enforce_ all optimizations, including the substitution of `(principal, 32*0x00)` for `(principal, null)`. So `decode(encode(principal, 32*0x00))` is equal to `(principal, null)`, which is _semantically equivalent_ to `(principal, 32*0x00)`, but _structurally different_ (all programming languages will consider these two objects non-equal). I think we can live with that, but that's what I meant by breaking a natural property. In the original proposal, `decode(encode(principal, 32*0x00)) = (principal, 32*0x00)`.

[quote="timo, post:12, topic:15298"]
We would basically have to say that `(principal, 32*0x00)` is not a valid account, only `(principal, null)` is. If you want to have the cited property, the encoder has to reject `(principal, 32*0x00)`.
[/quote]

Then we lose another natural property that encoding is a total function.

-------------------------

timo | 2022-09-07 11:27:14 UTC | #14

[quote="roman-kashitsyn, post:13, topic:15298"]
Then we lose another natural property that encoding is a total function.
[/quote]

Correct.

Well, within candid types and Motoko types it is not total anyway because blob/Blob doesn't limit the size to 32 bytes. So encode will always reject some things that passes as correct type. So we could also reject 32*0x00.

Anyway, remind me why we want account type to be `(principal, opt blob)` rather than `(principal, blob)`? Is it just more convenient to make calls by hand with dfx in the null case? Or does it make client code   look nicer when dealing with default accounts?

-------------------------

roman-kashitsyn | 2022-09-07 11:50:09 UTC | #15

[quote="timo, post:14, topic:15298"]
Is it just more convenient to make calls by hand with dfx in the null case? Or does it make client code look nicer when dealing with default accounts?
[/quote]

Both of these + the fact that most of users don't need to care about subaccounts.
And the killer feature IMO is that this way each principal can be a valid account.

-------------------------

timo | 2022-09-07 11:52:50 UTC | #16

[quote="roman-kashitsyn, post:15, topic:15298"]
And the killer feature IMO is that this way each principal can be a valid account.
[/quote]

Yes, but on which level? You mean (principal) is a subtype of (principal, opt blob)? So we don't even have to write "null" anywhere?

-------------------------

roman-kashitsyn | 2022-09-07 11:59:52 UTC | #17

[quote="timo, post:16, topic:15298"]
Yes, but on which level? You mean (principal) is a subtype of (principal, opt blob)? So we don’t even have to write “null” anywhere?
[/quote]

Ok, I think I see your point. You propose that we make the form `(principal, blob)` as a canonical form so blob always has to be specified in the Ledger interface, but the ledger and the client libraries can take liberties in how they store the "default" value?

I see the `null` case as a space and usability optimization for the most common case. We can live without it, but it's a bit hard to go back and change ICRC-1 to make subaccounts required.

-------------------------

timo | 2022-09-07 12:27:52 UTC | #18

Can we just live with the disambiguity of the default account and with not having some natural properties for this special case?

-------------------------

roman-kashitsyn | 2022-09-07 13:35:53 UTC | #19

I don't see any serious issues with that, I'll update the spec to require unique textual representation.

-------------------------

timo | 2022-09-07 18:03:57 UTC | #20

Alternatively, I think it also acceptable to tell the users that all zeros isn't a valid subaccount. They can either use the default account or they can specify a non-zero subaccount. It makes sense and the worry that a function isn't total seems minor. What the internal representation does with that is up to the developer. They can represent the default by all-zeros or in some other way. That is not visible to the user. But the encode and decode functions have to throw an error if you feed in what would result in an all-zero subaccount.

-------------------------

roman-kashitsyn | 2022-09-13 13:44:25 UTC | #21

I've [updated](https://github.com/dfinity/ICRC-1/pull/55/commits/c86651be44777f1c04e80d13105510bbd60693a9) the spec; valid textual representations are unique now. I've also sketched a [reference implementation](https://github.com/dfinity/ICRC-1/pull/55/commits/2b584cef8c1712267da0c163810bc52d81da082a) in Motoko.

-------------------------

timo | 2022-09-14 10:26:44 UTC | #22

Could we make the special trailing byte 0x7f instead of 0xff? 

In case the use of principals proliferates and more values of that byte get a meaning assigned to them then we don't close off the option to expand the space via leb encoding of those values.

-------------------------

dieter.sommer | 2022-09-19 20:51:32 UTC | #23

Dear community!

The next meeting of the Ledger & Tokenization Working Group is scheduled for tomorrow, September 20. Please note that it has been scheduled an hour earlier than the usual time slot due to various overlaps.

There are two topics on the agenda of tomorrow's Working group meeting, as agreed in the most recent meeting:

* Proposal for textual encoding for accounts. See https://github.com/dfinity/ICRC-1/pull/55.

* Proposal for an extension to ICRC-1 by Psychedelic.

We are looking forward to the discussions on those important aspects of the token standard!

-------------------------

Maxfinity | 2022-09-19 23:05:15 UTC | #24

Hi all, I want to raise an important security related issue, that the working group could include on the agenda for this week or for the next session.

Can we have a fixed size representation for the internal tokens. At the moment, I can see from the official [reference](https://github.com/dfinity/ICRC-1) implementation that:   
```
public type Tokens = Nat;
```
rather than: 
```
public type Tokens = Nat64; 
```
I believe this could lead to memory errors or attack vectors where attackers try to consume all the memory of a canister. 

The benefit of this using a wrapper over using u64/nat64 directly is that we can define  the behaviour for arithmetical overflow: in particular we can return an option rather than a panic on overflow. Other operations can also be defined. So, the internal use of the Tokens struct in the ledger made total sense from a safety perspective - we shouldn't get rid of this imo. We can, however, make this more ergonomic by serialising from Nat.  

Not sure how we would do all this in Motoko, but perhaps with a new type?

-------------------------

roman-kashitsyn | 2022-09-20 17:59:41 UTC | #25

[quote="Maxfinity, post:24, topic:15298"]
I believe this could lead to memory errors or attack vectors where attackers try to consume all the memory of a canister.
[/quote]

Hi @Maxfinity!
I don't think there is an attack vector. To create a transaction with a huge amount, you need to _own_ this amount first. So if the ledger author knows that there are no more than 2^64 tokens, the author is free to use `u64`/`Nat64` internally.

For example, here is how the DFINITY implementation of the ICRC-1 ledger works: https://sourcegraph.com/github.com/dfinity/ic@c0c1fa42fdc124189d843b03a1d80de3a132c636/-/blob/rs/rosetta-api/icrc1/ledger/src/main.rs?L135-143. All the externally visible balances are Nats, but internally all balances are u64. If the amount in the transfer arg doesn't fit into u64, we report an `InsufficientFunds` error.

-------------------------

dieter.sommer | 2022-10-03 18:23:10 UTC | #26

Dear Working Group!

The next meeting of the Ledger & Tokenization Working Group is scheduled for October 4. We propose to have the items agreed upon last time and one additional item requested by the community on the agenda for this meeting:
* Working Group governance
* ICRC-2 proposal by Psychedelic ([ICRC-2](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2))
* Textual encoding for accounts ([ICRC-1#55](https://github.com/dfinity/ICRC-1/pull/55)) (if time)

We are looking forward to the discussions in the upcoming meeting!

-------------------------

dfisher | 2022-10-04 06:06:04 UTC | #27

Do you mind reposting the zoom link ?

-------------------------

dieter.sommer | 2022-10-04 14:08:54 UTC | #28

If anybody requires the Zoom link for the working group meeting, please send it to @nikhil.ranjan or @dieter.sommer via a private forum message so that we can add you to the email invitation. We do not want to post the link publicly as we have been experiencing severe Zoom bombing with a public link.

-------------------------

inviscidpixels | 2022-10-04 17:08:19 UTC | #29

Sometimes useful to look how it's been done, here's a thread on "Rough Consensus" circa btc 2015:

https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2015-October/011457.html

-------------------------

infu | 2022-10-04 22:49:52 UTC | #30

Few notes from me: 

From a scalping trade, arbitrage bot, or leverage trader perspective, the best solution is when the trader funds are in an account controlled by the DEX/DeFI canister. This way there is no need to do ledger calls, trading can be done without async calls. The faster they are, the more profit they will make.

From the end user's perspective - the best solution is to use the Swapper pattern which I have published in forums (it lacks slippage, but that can be added). End-users make a few transfers a month and just want them to be successful. This pattern guarantees the user will get what they agreed for and no developer errors or malicious behavior can result in fund loss. 

So we have 3 ways of doing it. fast(risk) - medium(risk) - slow (guaranteed). I am not sure the medium one (approve flow) is worth it since the other two will beat it at everything. 

Both Swapper and the fastest approach can be done with the core we have right now.

To be more specific: I think `approve` in Ethereum was invented to make the fastest exchange with slippage possible. In IC the fastest exchange with slippage is just preloading an account = (dex_canister_principal, caller) and then trading (buying + selling) with a single call (or placing orders which get triggered). Once a trader is done, they withdraw funds. Now that Stable Memory got increased, there will be no need for a DEX to be multi-canister to be able to hold trader's accounts.
I think we shouldn't blindly copy Ethereum, instead work towards the most optimal solution. 

Even if approve flow gets approved, DEXes which do what's mentioned above will be better for traders and will make DEXes using approve obsolete. On the other hand, DEXes using swapping will be more secure so end users will prefer them.

Additionally, you can't have loans or leverage with approve flow. You will need to lock the funds inside the DeFI contract. The reason swaps in Ethereum don't work like Compound loans is the gas fee, which in IC is not a problem.

This means multi or single-canister ledgers :+1:
Single canister DeFi :+1:

And because a single canister DeFi at some point won't have the throughput, there will be many such and arbitrage synchronizing them. An arbitrage bot won't open an account in one DeFi canister, it will open accounts in all of them.

This is pretty far-fetched. I would like it if someone proves me wrong.

-------------------------

AndraGeorgescu | 2022-10-05 06:04:54 UTC | #31

Where can we find the info presented and proposed in yesterday’s working group?

-------------------------

roman-kashitsyn | 2022-10-05 06:54:02 UTC | #32

I put notes and links to slides in the Charters.md file in the ICRC-1 repo:
https://github.com/dfinity/ICRC-1/blob/7a3cdf510f675b644fc5c2d281bbe88ad590f52d/Charters.md#2022-10-04

Feel free to open a PR against this file if I misrepresented something or missed something important.

-------------------------

dieter.sommer | 2022-10-17 18:08:27 UTC | #33

Dear community!

The next meeting of the Ledger & Tokenization Working Group is scheduled for tomorrow, October 18, 2022.

We propose to discuss the following items in tomorrow's meeting:
* Working Group governance
  * Continuing the discussion from where we left off
* ICRC-2 proposal by Psychedelic (ICRC-2)
  * Asking the WG once more for feedback on the most recent version of the proposal (Note: The agreed-upon PR from the most recent meeting is still outstanding)
* Transaction log API (ICRC-3)
  * First overview of the proposal

We are looking forward to the discussions!

-------------------------

Embark | 2022-10-17 20:47:49 UTC | #34

Hi Dieter, how can I take part tomorrow?

Thanks :slight_smile:

-------------------------

dieter.sommer | 2022-10-19 06:04:38 UTC | #35

Hi @Embark 
Just saw this after the fact. If you want to take part in the future WG meetings, just send a private message with your email address to me. Then you will receive a Zoom invitation by mail.

-------------------------

dieter.sommer | 2022-10-19 07:03:53 UTC | #36

**Communications w.r.t. the Working Group**

The minutes of each WG meeting are in GitHub:
https://github.com/dfinity/ICRC-1/blob/main/Charters.md
This contains also the links to the slides presented.

The most recent minutes are in the below link and are still to be merged. Please comment on them if you think something that has been discussed is missing.
https://github.com/dfinity/ICRC-1/pull/67/files

-------------------------

dieter.sommer | 2022-10-27 07:05:43 UTC | #37


**Action required!**

**Defining our core team eligible for voting**

In the most recent ledger and tokenization WG meeting we agreed that we need to think about how to define the eligibility for voting for our WG. We discussed that it would make sense that *active members* are eligible to vote. Now, what does *active* mean in the context of the WG? What about using the following "definition" for being an "active member":
* Has a strong interest in the topic, either personal or driven by their startup or employer;
* Has a decent understanding of the technology being discussed and the implications of decisions;
* Follows the discussion in the meetings, on the forum, and on GitHub;
* Regularly makes contributions to discussions in meetings, on the forum, commenting on PRs on GitHub, or making PRs;

My suggestion is that we start with the below list of people who have been active so far in the WG and then ask the WG members to speak up if we have missed anyone. This way we can collect the list of voting members.

**Initial list of core team members:**
* Oz Waldorf
* Ossian Mapes
* Alessandro Rietmann
* Max Chamberlin
* Austin Fatheree
* Jordan Last
* Daniel Steren
* jxzchiang
* Witter Lee
* Roman Kashitsyn
* Mario Partorelli

**Please let us know (either here on the forum or a personal message to me, Mario, or Roman) if you are not on the list of voting members, but you think you should!**
Note that I assembled the list quickly from my memories of WG discussions and skimming through the forum to see active participants, so it is likely that I did not catch everyone who should be on the list. So, don't be shy and let us know if you should be on there!

Once we are done with this exercise, we have a list of core team members, who are eligible for voting in the name of the WG.

We think that constraining voting to one member per org (multiple may be part of the core group) would make sense.

Also, in the future, we want to try to be more inclusive of people in the goes that cannot participate in the meetings due to schedule (Asia here as the meeting would be after midnight for our Chinese teams). It would be great to get actively participating members from there, who would also be voting members. The idea is to reflect our discussions well on the forums and on GitHub, so that people not part of the meetings can also contribute and voice their opinions.

Opinions?

Thanks!

-------------------------

jzxchiang | 2022-10-29 05:47:40 UTC | #38

I think you should probably remove me from the core team, given that I haven't been active in the WG for a while. I'd definitely like to hear about any future updates with the WG though!

-------------------------

dieter.sommer | 2022-10-31 21:12:02 UTC | #39

Dear community!

The next meeting of the Ledger & Tokenization Working Group is scheduled for tomorrow, November 1, 2022.

Proposed agenda:

* Working Group governance
* ICRC-2 proposal by Psychedelic ([ICRC-2](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2))
* Transaction API: ICRC-3 proposal ([ICRC-3 PR](https://github.com/dfinity/ICRC-1/pull/66))
* NFT standard

Looking forward to the discussions!

-------------------------

dieter.sommer | 2022-11-01 16:27:13 UTC | #40

Today's meeting starts in half an hour at 18:00 UTC+1. Europe switched to winter time (UTC+1) from UTC+1 before this weekend and there seems to be some confusion with the invite as some people thought the meeting is over already...

-------------------------

dieter.sommer | 2022-11-10 14:53:52 UTC | #41

Dear WG Members!

**Vote open on textual encoding of ICRC-1 addresses**

**Who can vote? Core WG members**

**Voting period: 7 days**

As discussed in our recent WG meeting, we want to finalize the item [*textual encoding of ICRC-1 addresses*](https://github.com/dfinity/ICRC-1/pull/55). As we think that, based on the previous discussions on the item and the lack of further comments, we already have rough consensus, and thus we skip a hum and immediately proceed with a vote. If you think there is a need for further discussion, please speak up in the GitHub [voting issue](https://github.com/dfinity/ICRC-1/issues/70).

The voting mechanism uses *GitHub issues*, so you can vote and comment easily, just using your web browser. The voting period is 7 days from the date of this forum post. After the voting period, we will inform you about the outcome. You can comment on the issue and are kindly asked to do so in case you object the proposal.

Core team members, please vote here: https://github.com/dfinity/ICRC-1/issues/70

-------------------------

dieter.sommer | 2022-11-11 16:34:52 UTC | #42

Dear WG members!

We just created a PR with a proposal for the working group governance.
https://github.com/dfinity/ICRC-1/pull/71

This will be one of the items up for discussion in the next meeting. Please put any comments you have into the PR.

Have a nice weekend!

-------------------------

dieter.sommer | 2022-11-14 20:28:17 UTC | #43


Dear working group!

For the upcoming meeting on November 15, 2022, we propose the following agenda:

* [Working Group governance](https://github.com/dfinity/ICRC-1/pull/71)
  * Call for comments, discussion
* [ICRC-2 proposal by Psychedelic (ICRC-2)](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2)
  * Call for comments, technical discussions
* [Transaction API: ICRC-3 proposal (ICRC-3 PR)](https://github.com/dfinity/ICRC-1/pull/66)
  * Call for comments

Reminder: The vote for the [textual encoding of ICRC-1 addresses](https://github.com/dfinity/ICRC-1/pull/55) has been opened!

-------------------------

dieter.sommer | 2022-11-21 15:51:02 UTC | #44

Dear community!

As discussed in the recent WG meeting, Oz (Psychedelic) and Roman (DFINITY) will present the current stable draft of the ICRC-2 standard in a community conversation later this week to make the proposal known to a broad audience beyond the working group.

**Date and time:**

Thu, 24 Nov, 18:00-19:00 CET (UTC+1).

**Title:**

ICRC-2: Bringing "Approve" and "Transfer From" Functionality to the IC Token Standard

**Abstract:**

The Ledger and Tokenization technical working group has worked on an extension to the IC's token standard that brings the "approve" and "transfer from" functionality of Ethereum's ERC-20 token standard to the IC's token standard. The working group has reached a stable draft now and wants to present it to the wider community, with the goals of presenting the results to and soliciting feedback from the wider community before finalizing the extension. This talk explains the current stable draft of the ICRC-2 extension and motivates important design choices.

-------------------------

emmaperetti | 2022-11-24 16:39:46 UTC | #45

please sign up here for today's talk: [community conversation](https://internetcomputer.org/live-sessions/#Community-Conversation-ICRC-2-Bringing-Approve-and-Transfer-From-Functionality-to-the-IC-Token-Standard)

-------------------------

dieter.sommer | 2022-11-28 16:51:50 UTC | #46

As we are currently using multiple discussion topics for the WG, let's defragment and move over to the [other one](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925) for the future.

-------------------------

Embark | 2022-12-01 16:59:03 UTC | #47

Dear colleagues, what are your thoughts about adding a restricted transfer function where the token minter can define conditions for transfers in a future version of ICRC?

Use-Cases include transfer-level conditions such as lock-up periods, identities to be known or accepted by Internet Identity personhood check as well as token-level conditions i.e. the token contract enforces a maximum number of investors or a cap on the percentage held by any single investor.

```
function canTransfer(address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);
function canTransferFrom(address _from, address _to, uint256 _value, bytes _data) external view returns (byte, bytes32);
```

-------------------------

dieter.sommer | 2022-12-12 19:28:15 UTC | #48

@Embark 
This topic is abandoned (see [above](https://forum.dfinity.org/t/ledger-tokenization-working-group-update/15298/46)), can you please post your thoughts on the [main working group topic](https://forum.dfinity.org/t/announcing-token-standard-as-topic-of-the-first-meeting-of-the-ledger-tokenization-working-group/11925/)?

-------------------------

