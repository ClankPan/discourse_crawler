qwertytrewq | 2023-06-04 07:02:30 UTC | #1

As I know, in
```
f();
await g();
h();
```
there may be intermediary code execution from other calls between `f()` and `g()`.

Is it true also for
```
f();
await* g();
h();
```
or is in this case the entire sequence of three statements atomic?

-------------------------

rossberg | 2023-06-04 08:33:34 UTC | #2

No.

In the first version, there _definitely is_ a commit point and interleaving.

In the second version, there _may_ be a commit point and interleaving.

So the second case _may_ execute everything atomically, but you cannot predict that. If you could rely on that being the case, then you probably wouldn't need any await in the first place.

Furthermore, if there is an error (trap) during execution of h(), then in the first case, execution is rolled back to the await. In the second case execution is rolled back to either (somewhere inside) the await* _or beyond_, you can't predict it -- even f() may or may not be rolled back.

-------------------------

timo | 2023-06-04 11:22:09 UTC | #3

[quote="qwertytrewq, post:1, topic:20433"]
between `f()` and `g()`.
[/quote]

Do you mean between g and h?

-------------------------

qwertytrewq | 2023-06-04 11:49:37 UTC | #4

I meant _somewhere_ between `f` and `h`.

-------------------------

qwertytrewq | 2023-06-04 11:55:37 UTC | #5

@rossberg So, after
```
func f() { ... };
func h() { ... };
func g() async* {};
```

```
f();
await* g();
h();
```
may execute atomically and may not? (even though the context of `g` is predictable, empty in our case)

-------------------------

ZhenyaUsenko | 2023-06-04 12:08:51 UTC | #6

I will be unpredictable only if you have conditional awaits inside **g**

-------------------------

rossberg | 2023-06-04 14:14:30 UTC | #7

@qwertytrewq, yes, in that case it will be predictably atomic, but in that case the async* of course is pointless in the first place. In a case where async* is actually needed it will also be unpredictable, by construction.

-------------------------

