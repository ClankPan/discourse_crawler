matthewhammer | 2020-08-17 21:17:35 UTC | #1

Inspired by ongoing conversations in other threads, I've started some initial work (very WIP) to implement a general-purpose graph library in Motoko, for a wide variety of possible applications.

If you are interested, I invite you to follow along, post comments or ask questions:
  
[Initial API Design (RFC)](https://github.com/matthewhammer/motoko-graph/blob/master/src/Types.mo#L72)

I have several applications in mind:
 - Represent typical graphs (nodes and edges, with associated label data)
 - Represent entity-relational models (for database-like queries)
 - [Other ideas are in the readme file](https://github.com/matthewhammer/motoko-graph#potential-applications)

This is WIP.  I've gotten as far as designing the public API with these ideas in mind.  Any questions, comments or suggestions are welcome here.

I'll post further updates when there is more to show, including the MVP implementation of the api above.

-------------------------

matthewhammer | 2020-08-19 22:05:24 UTC | #2

Minor update:

Anticipating several needs, including this graph library, I wrote the start of a sequence library:
https://github.com/matthewhammer/motoko-sequence

It permits efficient `split` and `append` operations (O(log n)).  This complexity improves on other representations for sequences in Motoko (lists, arrays and buffers) and will be important for workloads that do lots of these operations over large sequences.

Like the `Trie` module in `base`, the representation used for these sequences is based on binary trees, is persistent (so no mutation, and no changes to the identity of a sequence once it exists).  I have another few steps before the graph library can use this sequence library to maintain its mutable edge sequence, but I am closer now.

-------------------------

matthewhammer | 2020-08-21 21:59:39 UTC | #3

https://github.com/matthewhammer/motoko-graph/pull/4

This PR is still WIP, but it shows more data modeling example code using this graph library.

This PR also demonstrates ideas from an internal demo app we did from last year ("produce exchange"), to work out the MVP features of the graph library.

(Little did we know how salient a decentralized produce exchange could be in 2020, and beyond.)

-------------------------

