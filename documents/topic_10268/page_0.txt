ArjaanBuijk | 2022-01-13 14:07:39 UTC | #1

I am trying to handcraft a `.did` file for a custom canister with multiple services from multiple `C functions`.

- Is it possible to import .did files into another .did file?
- Or alternatively, can you have multiple services in a single candid file ?

For example, using the examples I found for `counter.c` & `reverse.c`, who have a `counter.did` and a `reverse.did`.

I would love to be able to just import these into a main `my_services.did` for my canister, like:
```json
# file: my_services.did
<...somehow import file counter.did...>
<...somehow import file reverse.did...>
```
```json
# file: counter.did
service counter: {
  get : () -> (int) query;
  set : (int) -> ();
  inc : () -> ();
  dec : () -> ();
}
```
```json
# file: reverse.did
service reverse: {
  "go": (text) -> (text) query;
}
```

If importing is not possible, another good alternative would be to have multiple services, like:
```json
# file: my_services.did
service counter: {
  get : () -> (int) query;
  set : (int) -> ();
  inc : () -> ();
  dec : () -> ();
}
service reverse: {
  "go": (text) -> (text) query;
}
```

I could not figure out either of those approaches.
It works to just create a single service, but I would have to update the C code & rename the functions to distinguish between the counter & reverse service:
```json
# file: my_services.did
service : {
  "go": (text) -> (text) query;
  get : () -> (int) query;
  set : (int) -> ();
  inc : () -> ();
  dec : () -> ();
}
```

-------------------------

ArjaanBuijk | 2022-01-13 17:47:53 UTC | #2

I did find a way to group things within a single service:

```bash
# file: my_services.did
service: {
  "counter.get" : () -> (int) query;
  "counter.set" : (int) -> ();
  "counter.inc" : () -> ();
  "counter.dec" : () -> ();
  "reverse.go": (text) -> (text) query;
}
```

And then in the C code, use this:
```C
void go() WASM_EXPORT("canister_query reverse.go");
void go() {
 ...
}
```

And after deployment, you call this from the command line:
```bash
$ dfx canister call myCanister reverse.go reward
("drawer")
```

Candid is really flexible. Even spaces are allowed. For example, Instead of `reverse.go`, it works as well to use `reverse: go`. 

I will go with this approach for now.

-------------------------

chenyan | 2022-01-13 18:19:06 UTC | #3

You can use `import "a.did";` to import the *type declaration* of did file, but the main service will not be imported. Each did file can only contain a single main service. So you can import all your did files, and manually write the combined main service interface. The method name can be unicode as well, but some host language doesn't support unicode function names.

-------------------------

peterparker | 2024-01-11 18:20:54 UTC | #4

Is the above still valid two years later @chenyan ?

-------------------------

chenyan | 2024-01-11 19:24:18 UTC | #5

You can now use `import service "a.did"` to merge the main service definition as well.

-------------------------

peterparker | 2024-01-11 19:28:16 UTC | #6

That's good! I'll try thanks for the feedback.

-------------------------

peterparker | 2024-01-11 20:09:00 UTC | #7

[quote="chenyan, post:5, topic:10268"]
import service "a.did"
[/quote]

Mmmm

```
❯ dfx canister call dev_backend hello
error: parser error
  ┌─ /Users/daviddalbusco/projects/lab/experimentless/dev/src/dev_backend/dev_backend.did:1:8
  │
1 │ import service "lib.did"
  │        ^^^^^^^ Unexpected token
  │
  = Expects "text"
```

```
import service "lib.did"

service : { greet : (text) -> (text) query }
```

and lib.did

```
service : { hello : () -> (text) query }
```

Am I doing something wrong?

-------------------------

peterparker | 2024-01-11 20:19:41 UTC | #8

Ok I gues something like that:

lib.did

```
type A = service{ hello : () -> (text) query };
service : A
```

and

```
import "A.did";

type B = service { greet : (text) -> (text) query };

service B : A ;
```

-------------------------

chenyan | 2024-01-11 20:28:46 UTC | #9

Both should work in `didc`. dfx is not caught up with the lastest candid yet. Waiting for some dependency bump on the main ic repo.

-------------------------

peterparker | 2024-01-11 20:37:20 UTC | #10

You are right both work like a glove!

```
❯ didc bind -t ts src/dev_backend/dev_backend.did
import type { Principal } from '@dfinity/principal';
import type { ActorMethod } from '@dfinity/agent';
import type { IDL } from '@dfinity/candid';

export interface _SERVICE {
  'greet' : ActorMethod<[string], string>,
  'hello' : ActorMethod<[], string>,
}
export declare const idlFactory: IDL.InterfaceFactory;
~/projects/lab/experimentless/dev main +1 !2 ?1                                                                         
❯ 
```

I don't need dfx so it's totally fine for me. 

The first is a bit more compact and easier to grasp for me, so I might used that one (I'm researching things currently).

Thanks for the quick feedback.

-------------------------

