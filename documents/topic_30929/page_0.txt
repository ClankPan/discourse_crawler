Chitransh | 2024-05-18 16:42:12 UTC | #1

I'm currently working on developing canisters and I'm familiar with the development frameworks available for Solidity smart contracts, such as Hardhat and Foundry, which allow us to fork the mainnet and test smart contracts in a simulated environment.

I'm wondering if there is a similar framework or tool available in the Internet Computer Protocol (ICP) ecosystem that allows us to fork the mainnet and test canisters in a development environment.

Any guidance or pointers to relevant resources would be greatly appreciated!

-------------------------

zohaib29 | 2024-05-18 17:13:01 UTC | #2

You can use [PocketC](https://github.com/dfinity/pocketic) for testing canisters.

-------------------------

skilesare | 2024-05-18 22:43:35 UTC | #3

I think what you are wanting is to mirror mainnet locally with a forked state.  This is possible for your own canisters if you built some back up methods to pull down state. For other peoples canisters you need them to have a backup method or you  anre out of luck.

-------------------------

Chitransh | 2024-05-19 07:17:47 UTC | #4

I want to fork the mainnet because in my project we are integrating with all ICP dexes. And for testing I need to fork the mainnet for testing the swap.

-------------------------

b3hr4d | 2024-05-19 09:30:38 UTC | #5

Published on the mainnet then, its fast and cheap!
request some faucet token [here](https://anv4y-qiaaa-aaaal-qaqxq-cai.ic0.app/).

-------------------------

bitdivine | 2024-05-22 09:10:38 UTC | #6

Regarding forking mainnet, do you essentially get a copy of the Ethereum state?  All 250 GB?  For mainnet ICP, the total canister state is 4.34 TB and the rate of change is higher.  Or do you mean that you get something that _looks_ like mainnet, with say copy on write canisters/contracts so that you only download the canisters you interact with?

-------------------------

kpeacock | 2024-05-22 11:43:50 UTC | #7

There's a feature called `dfx pull` that will allow you to easily set up canisters and any canisters they depend upon, if the canisters have configured their metadata for it!

https://kaipeacock.com/blog/dfinity/use-dfx-pull/

-------------------------

