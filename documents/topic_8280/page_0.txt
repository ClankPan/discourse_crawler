alexeychirkov | 2021-11-02 09:45:00 UTC | #1

Hello developers!

If there is a possibility to ask the asset canister ({"type": "assets"} in dfx.json) for it's cycles balance programmatically? 

I would like to monitor cycles balance in Prometheus. 
Currently all my Motoko canisters has a public query method to return cycles using ExperimentalCycles module.
Is there is a way to do it with asset canisters?

Only way I know is to get it using "dfx" command line.

I am thinking... I can fork "certified-assets" repo and add additional logic to it...

-------------------------

nomeata | 2021-11-02 22:32:06 UTC | #2

For any canister you can add the [blackhole canister](https://github.com/ninegua/ic-blackhole) as an _additional_ controller and then anyone can query the cycle balance through that canister.

In fact, that should be considered best practice for anyone who don't mind the public to see this data. And then pages like ic.rocks (pinging @wang) can display cycle balances, maybe even graph them over timeâ€¦

-------------------------

rbole | 2022-09-28 11:08:59 UTC | #3

Is there any experience on this topic?

How we can monitor an asset canister without dfx command e.g.

> dfx wallet --network ic balance --precise

-------------------------

domwoe | 2022-09-28 11:37:43 UTC | #4

You need to make a call to the `canister_status` on the management canister with a caller that is listed as a controller of the respective canister.

Here @peterparker shared a snippet of how to do it using agent-js: https://forum.dfinity.org/t/how-to-make-ic-management-api-canister-status-call-with-dfinity-agent/7139

-------------------------

peterparker | 2022-09-28 11:40:37 UTC | #5

I even build my self an open source monitoring dapp that supports NNS and SNS canisters ðŸ‘‰ https://cycles.watch/

-------------------------

rbole | 2022-09-28 12:43:44 UTC | #6

Thank you very much, these are great examples. I will study it and try to build a nodejs script to fetch the balance.

-------------------------

cryptoschindler | 2022-09-29 06:30:43 UTC | #7

If you are interested in automatically topping up your canisters, this is a really helpful tool

https://forum.dfinity.org/t/worry-about-your-favorate-canister-running-low-on-cycles-you-got-it-covered/10307?u=cryptoschindler

-------------------------

rbole | 2022-10-01 14:20:39 UTC | #8

I'm sorry I need more help on this topic. In your example, see link2, your actor is calling the method canister_status.

 > const response = await actor.canister_status({
>        canister_id: Principal.fromText(canisterId)
>   })

In my example I receive the following error:

> myAgent.canister_status is not a function

I use the did.js file from the generated asset canister, but there is no service function canister_status in.

How can I add this function ?? What I'm missing ?

I would very grateful for some light.

-------------------------

domwoe | 2022-10-01 15:48:57 UTC | #9

Hey @rbole,

you need to call the [`canister_status` method of the "management canister"](https://github.com/dfinity/interface-spec/blob/f29fb083893c4d19de6373e1da6f74203a28679f/spec/ic.did#L101).

-------------------------

peterparker | 2022-10-01 16:10:08 UTC | #10

It's because in Papyrs I implement the canister status on the backend side while in Cycles.watch it's on the frontend side ðŸ˜œ

---

If you want to do it on the backend side, and then expose it through a custom actor function, you can  use `canister_status` basically summarized as following:

```
let ic = actor "aaaaa-aa";
await ic.canister_status({canister_id = canisterId});
// here expose the results you need through an actor function
```

Source: my [utils.mo](https://github.com/papyrs/ic/blob/97eeb34e6f2adc98d122f8100b50cbb2116521bd/canisters/src/utils/canister.utils.mo#L71) and [types.mo](https://github.com/papyrs/ic/blob/97eeb34e6f2adc98d122f8100b50cbb2116521bd/canisters/src/types/ic.types.mo#L30)

---

If you want to do it on the frontend side without exposing a custom function in your own canister you can also instantiate the IC and query directly the `canister_status`

```

const createICActor = (identity: Identity): Promise<ICActor> =>
  createActor<ICActor>({
    config: {
      canisterId: Principal.fromText('aaaaa-aa'),
      callTransform: transform,
      queryTransform: transform
    },
    idlFactory,
    identity
  });

const actor: ICActor = await createICActor(identity);

  const {cycles, status, memory_size} = await actor.canister_status({
    canister_id: Principal.fromText(canisterId)
  });
```

You just need a small transform function to convert the IC self canister id.

Source: function and actor in my cycles.watch [ic.services.ts](https://github.com/papyrs/cycles.watch/blob/503930f7d793533084665f2454772d50af82ade9/src/lib/services/ic.services.ts) and you also gonna need the ic [did](https://github.com/papyrs/cycles.watch/tree/503930f7d793533084665f2454772d50af82ade9/src/lib/canisters/ic) files

---

In both the ID to use to access the IC is `aaaaa-aa`.

Let me know if it works out.

---

Side note: in the [IC-js](https://github.com/dfinity/ic-js) repo we do have not yet implemented these functions for the IC but it's totally the plan to add some soon

-------------------------

