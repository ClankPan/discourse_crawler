saikatdas0790 | 2023-04-11 12:41:52 UTC | #1

This is what I'm seeing on my terminal when trying to upgrade a canister:

![image|690x155](upload://163UI6BAnNco4QyDCAkSUgUzMVi.png)

I can see that an optimized build was created from further up in the log:

![image|690x48](upload://fY0MbJrcd8Hy7FBP4MYiQcgK6Xp.png)

My build script looks something like this:
![image|690x481](upload://wMBDLqw2TgLhHnDiRVqDlKt1M3y.png)

Essentially I'm gzipping the created wasm and dfx directly accepts the `*.wasm.gz` as the wasm bundle to install.

Here's what the size of the `user_index` wasm gzipped looks like:
![image|664x239](upload://abMljVrbC5mELOmJQCcL6cWqDLN.png)

I'm on `dfx 0.13.1`

I'm kind of stuck on how to proceed. Any inputs are appreciated.

Thoughts?

Tagging @Severin and @lwshang since I had run into this before and had been able to solve this with their help

-------------------------

Severin | 2023-04-11 12:46:40 UTC | #2

It sounds to me like the install command is not picking up the gzipped file, but the uncompressed wasm instead. How does your dfx.json look like? I think you have to point it to the .gz file

-------------------------

saikatdas0790 | 2023-04-11 12:51:35 UTC | #3

This is what it looks like:
![image|504x227](upload://wjsqGj08Fk7so1yWbRFWFLfEo77.png)

I am using the "rust" type instead of "custom"

Also, my config hasn't changed since I solved this:
https://forum.dfinity.org/t/bug-since-upgrading-to-dfx-v0-12-running-into-failed-to-install-wasm-the-replica-returned-an-http-error-http-error-status-413-payload-too-large/16459/20

I only recently upgraded dfx to v0.13.1 from v0.12

Also, the gzip process removes the bare wasm file. The folder after the gzip step looks like this:

![image|690x171](upload://sffZG7xtUpgD4gP51QFN4mNsyV3.png)

So, not sure where it would pick up the uncompressed WASM from

-------------------------

Severin | 2023-04-11 12:56:38 UTC | #4

I see two ways to resolve this. Either you move to canister type `custom` and point it to the gzipped wasm or you point your build script at the gzipped wasm (using `--wasm target/wasm32-unknown-unknown/release/<canister>.wasm.gz`).

[quote="saikatdas0790, post:3, topic:19387"]
So, not sure where it would pick up the uncompressed WASM from
[/quote]

I haven't double-checked but I would assume dfx copies the wasm into a local cache inside of `.dfx`. It does that to do some more transformations like baking the .did file into the right metadata section so it shows up in chain explorers properly

-------------------------

saikatdas0790 | 2023-04-11 13:19:51 UTC | #5

@Severin That fixed it. Thank you so much :slight_smile: 

For anyone reading later, the solution that worked for me is to specify the exact `*.wasm.gz` as an additional argument as part of the `dfx canister install ..` step

Also, it might make sense to add the gzip step as part of `dfx deploy` or `dfx canister install`

-------------------------

Severin | 2023-04-11 13:52:53 UTC | #6

[quote="saikatdas0790, post:5, topic:19387"]
Also, it might make sense to add the gzip step as part of `dfx deploy` or `dfx canister install`
[/quote]

We've talked a lot about that internally. IIRC there are nondeterminism problems with gzip and that breaks some properties that we don't want to break

-------------------------

saikatdas0790 | 2023-04-21 15:25:08 UTC | #7

Hi @Severin 

I believe there's a bug with the --wasm flag.

My installation script looks like this:
![image|460x500](upload://7gyfydLJWVqzKEBjG3oRDOgMT9U.png)

When I install without the --wasm flag, the argument values are properly passed to the canister init function. However, when I use the --wasm flag, these values are not being passed into the canister's init function. Something I am missing?

Also, I found that when --wasm is specified, Candid UI isn't installed as well. Is this intended?

Thoughts?

Kinda stuck with this. Appreciate any help you can provide :slight_smile:

-------------------------

saikatdas0790 | 2023-04-24 04:34:43 UTC | #8

Hi @Severin 

Let me know if you have any thoughts on this?

-------------------------

Severin | 2023-04-24 09:02:46 UTC | #9

[quote="saikatdas0790, post:7, topic:19387"]
When I install without the --wasm flag, the argument values are properly passed to the canister init function. However, when I use the --wasm flag, these values are not being passed into the canisterâ€™s init function. Something I am missing?
[/quote]

If you use `--wasm` then the argument parsing is indeed [different](https://github.com/dfinity/sdk/blob/master/src/dfx/src/commands/canister/install.rs#L115) from the one used [otherwise](https://github.com/dfinity/sdk/blob/master/src/dfx/src/commands/canister/install.rs#L139) (see last arg to the function). But I don't understand why this would turn out so differently. If parsing fails, it would complain either way

[quote="saikatdas0790, post:7, topic:19387"]
Also, I found that when --wasm is specified, Candid UI isnâ€™t installed as well. Is this intended?
[/quote]
I'm not sure. Reading the code, I get the impression that `--wasm` is meant for a very manual process, but I'm not sure that it should skip Candid UI entirely. For now I can offer as a workaround that you install any random canister without the `--wasm` flag because that will then automatically install Candid UI.

-------------------------

saikatdas0790 | 2023-04-24 09:09:09 UTC | #10

@Severin 
The Candid UI isn't a blocker.

But the arguments not being passed is. Without it, we are unable to deploy and test locally.

Any suggestions on how I could help debug this? If you want, I can try creating a minimal reproduction

-------------------------

Severin | 2023-04-24 09:16:11 UTC | #11

A reproduction would be perfect. If you want an ugly workaround, you could copy the wasm to the place where dfx would expect it to be and hope that it works. It would expect the wasm to be at `.dfx/<network name>/canisters/<canister name>/<canister name>.wasm`

-------------------------

saikatdas0790 | 2023-04-24 15:47:37 UTC | #12

Hi @Severin 

I managed to reproduce this.

Here is a link to the repo:
https://github.com/saikatdas0790/dfx_arguments_not_passed

I am printing the passed arguments in the init function here:
https://github.com/saikatdas0790/dfx_arguments_not_passed/blob/058149a18b8bc5b74dee0a3b0f72abb5d8bf70e0/src/backend/src/lib.rs#L16-L19

When I am passing the `--wasm` flag here:
https://github.com/saikatdas0790/dfx_arguments_not_passed/blob/058149a18b8bc5b74dee0a3b0f72abb5d8bf70e0/build.sh#L22

I get this
![image|690x56](upload://8GPMP4j78HItN1YrYxvcq4DIkMC.png)

But when I don't pass the `--wasm`, I get both of the arguments as shown here:
![image|690x112](upload://G2sYHxE6osjnzjWKBUvk6tkzfW.png)

Thoughts?

-------------------------

Severin | 2023-04-25 09:06:07 UTC | #13

Thank you very much for the repro! I get the same result, and don't like it :smile: 

I filed the bug (note to future self: [internal ticket](https://dfinity.atlassian.net/browse/SDK-1094)) and hope we soon get around to fixing it.

Do you need help to find a workaround for now? I think if you put the gzipped wasm to `.dfx/local/canisters/backend/backend.wasm` (just strip the `.gz` extension`) then `dfx canister install` should pick it up even without the `--wasm` flag

-------------------------

saikatdas0790 | 2023-04-25 09:12:41 UTC | #14

Hi @Severin
Thank you for the acknowledgement. I'll try the manual copying workaround for now.

But we'll be eagerly awaiting an actual fix as the manual copying would be error prone and would need to be explained to and adopted by frontend for whom the flow was just:
- pull the latest commit
- run install script on local replica for local testing

-------------------------

Severin | 2023-04-25 09:14:21 UTC | #15

I think you can put it in the install script too and just put a comment there that this weird step is there because of a bug

-------------------------

saikatdas0790 | 2023-04-25 09:15:06 UTC | #16

Let me try and come back if I need more inputs

-------------------------

AdamS | 2023-05-02 17:26:35 UTC | #17

`--wasm` is used to interface with foreign canisters; it neither requires nor integrates with `dfx.json`. This means that it does not know about the full candid interface, which interacts badly with a bug in candid involving merging unknown variants into a common type. (The data is actually there, it's just being serialized with the wrong variant, and HashMap is pruning the duplicated key.) In general you should not be using `--wasm` as part of a general deployment strategy.

-------------------------

saikatdas0790 | 2023-05-07 09:26:36 UTC | #18

Is this Candid bug reported somewhere? Any way to track progress towards a fix?

Thanks for acknowledging and providing visibility on this. This was a head scratcher for us for a while ðŸ˜…

-------------------------

Severin | 2023-05-08 07:55:58 UTC | #19

No idea. Maybe @chenyan would know?

-------------------------

chenyan | 2023-05-08 16:59:05 UTC | #20

There is an internal ticket on the dfx side to fix this: dfx needs a way to get the type of the init args. Before this gets fixed, you can use `ic-repl` to deploy the canister. Here is an example: https://github.com/dfinity/examples/blob/master/motoko/basic_dao/tests/account.test.sh#L10-L21

-------------------------

jamesbeadle | 2024-01-14 16:35:35 UTC | #21

Hi Severin,

I have a similar problem with my Motoko backend:

![image|690x34](upload://qydsWZ6PR5UHTgOo7Z2l02wD0a8.png)

![image|583x131](upload://3XqMMutlnUYLmNvM3yzPVRSBKEF.png)

Any advice on how I could resolve this build error would be greatly appreciated.

-------------------------

sadernalwis | 2024-01-15 13:39:39 UTC | #22

You should try gzipping it. [Gzipping](https://github.com/B3Pay/B3Wallet/blob/19da80c3e1ea3940bc53d9cd24a7bef59afec0e3/scripts/predeploy.sh#L72C63-L72C63)
and have [dfx.json](https://github.com/B3Pay/B3Wallet/blob/19da80c3e1ea3940bc53d9cd24a7bef59afec0e3/dfx.json#L12) point to `wasm.gz`

-------------------------

