Mathias | 2022-11-10 01:27:04 UTC | #1

Iâ€˜ve started to use ic-repl but Iâ€˜m wondering what else is out there?

-------------------------

paulyoung | 2022-11-10 02:41:01 UTC | #2

I think these are some good resources:

https://kyle-peacock.com/blog/motoko/unit-testing

https://forum.dfinity.org/t/motoko-how-to-write-unit-tests/3463/3?u=paulyoung

https://forum.dfinity.org/t/motoko-how-to-write-unit-tests/3463/10?u=paulyoung

-------------------------

chenyan | 2022-11-10 03:40:44 UTC | #3

In addition to these, you can also try `ic_state_machine_tests`. Here is an example: https://github.com/dfinity/cdk-rs/blob/main/e2e-tests/tests/e2e.rs. You will have to write the tests in Rust, but it works for Motoko canisters as well. The benefit is that it is much faster than making calls to the replica.

Regarding `ic-repl`, may I know your pain points?

-------------------------

saikatdas0790 | 2022-11-10 05:34:50 UTC | #4

I second this. I use `ic_state_machine_tests` and it's a joy to use as compared to anything on Motoko. Although the execution times could definitely be lowered. The test suite run on our Github CI takes around 20 minutes to run ðŸ˜…

-------------------------

domwoe | 2022-11-10 09:41:07 UTC | #5

If anyone is up to writing down a best practice article on testing using the various tools available, we can bundle up a bounty for this.

-------------------------

saikatdas0790 | 2022-11-10 09:48:11 UTC | #6

I could take a stab at this for writing tests for Rust projects, both unit and integration, but it will have to wait till the 19th. We have a grant milestone check in coming up, and there's so much stuff we need to complete ðŸ˜…

-------------------------

h1teshtr1path1 | 2022-11-10 12:13:05 UTC | #7

Idk what kind of tests you want , but you can check this latest one from kyle.

https://kyle-peacock.com/blog/dfinity/simple-canister-e2e/

-------------------------

chenyan | 2022-11-10 19:02:52 UTC | #8

If you like the speed of `ic_state_machine_tests`, you can also try `drun`, which is running in our Motoko CI. It's like a CLI version of the state_machine_tests:
https://github.com/dfinity/motoko/blob/master/test/drun-wrapper.sh

The best way to get `drun` is probably to run `nix-shell` in the motoko repo. If there is more interests in this, we can spend time to improve the UX.

-------------------------

saikatdas0790 | 2022-11-10 19:15:22 UTC | #9

I prefer a language centric way like `ic_state_machine_tests`. That way, it integrates very well into existing Rust testing tooling, and all I need to run is `cargo test` and my entire test suite including the integration tests are run.

I was using `ic-repl` before that but I prefer `ic_state_machine_tests` owing to not have to run the tests manually. And also having all the power of a programming language like Rust as opposed to a custom scripting language

-------------------------

saikatdas0790 | 2022-11-10 19:28:24 UTC | #10

Wasn't `ic-repl` a CLI version of `state_machine_tests`? How is this different?

-------------------------

chenyan | 2022-11-10 20:18:54 UTC | #11

`ic-repl` runs on replica directly. Both `state_machine` and `drun` run on the execution layer of the replica, which is much faster, because messages don't go through consensus.

-------------------------

skilesare | 2022-11-10 20:27:20 UTC | #12

We have a large number of motoko tests written in motoko at https://github.com/ORIGYN-SA/origyn_nft.

If you follow the pattern there it works quite well. Make sure you use the             "args": "-v --compacting-gc -no-check-ir", in your dfx.json for your test canisters or they will take too long to build.

-------------------------

icme | 2022-11-11 05:09:30 UTC | #13

Ideally, you'd want to abstract as much logic as possible outside of the API and into modules that you can unit test more thoroughly. Then your API testing becomes moreso integration testing.

By having your API import function "routines" from an external module, this saves you the headache of writing more integration tests with ic-repl than you absolutely need to, especially since the more canister tests you write the longer you have to wait for your tests to complete (generally).

-------------------------

Mathias | 2022-11-11 14:06:55 UTC | #14

Thank you very much I will experiment with it, I have barely any rust skills though, unfortunately.

The pain points probably are rather on me than on the tool, I'm not an extremely experienced dev so I was just not sure exactly what it is that I'm writing. It felt like another thing with its own synthax and way of interacting with the canisters.

But I find it generally hard to deal with state across several canisters and the nuances of local vs. mainnet, so my way of thinking about testing canisters could generally be better...

-------------------------

Mathias | 2022-11-11 14:08:44 UTC | #15

Thank you! slightly scared of getting into rust though ;)

-------------------------

Mathias | 2022-11-11 14:13:01 UTC | #16

Thank you very much! That could in the end be what would feel the most natural to me, nice.

-------------------------

Mathias | 2022-12-13 16:08:59 UTC | #17

@skilesare may I ask; Does "test_wallet" exist simply to call the relevant canister from different principals? 
I like the pattern, it would be nice to use it if my project gets bigger. But I was also wondering if there are other ways of calling the canister from different principals in Motoko?

-------------------------

skilesare | 2022-12-13 21:51:29 UTC | #18

Exactly right. The testWallet acts as another address on the network. It is a stand in for a user outside the network.  Think of it as someone calling a function from plug.

-------------------------

Mathias | 2022-12-14 09:52:51 UTC | #19

Thank you, that makes sense. 
Your codebase is amazing to learn from btw!

-------------------------

