Mathias | 2022-12-14 11:19:59 UTC | #1

If I have an object that contains a variable of a specific type. Can I somehow access that type?

The following obviously doesn't work:
```
public type ObjectType = object {
    first: Text;
};

// not valid syntax!
let myVar: ObjectType.first = "John";
```
I'd ultimately like to access the Interface of an actor. I'd like to define a function that returns the same thing that the function of the interface returns (and takes the same args).

-------------------------

peterparker | 2022-12-14 11:27:11 UTC | #2

In Motoko?

Not an expert but I generally do something as following:

```
public type ObjectType = {
    first: Text;
};

let myVar: ObjectType = {
   first = "John"
};

// or

let first: Text = "John";

let myVar: ObjectType = {
   first
};
```

Does that help or I missed the point?

-------------------------

Mathias | 2022-12-14 11:57:46 UTC | #3

Thank you, that definitely helps me generally. I meant though that I could use the type Text from the object without ever creating the actual object. So no variable would directly be of type ObjectType but I could directly define a variable of sort of the specific inner type, which in that case is Text.

Do you know what I mean?

If there was a function on the ObjectType then I'd like to create a function with this specific type but without ever using the ObjectType directly. I just want the function to be of the same type as the function on the object. Hope that makes any sense...

-------------------------

peterparker | 2022-12-14 12:18:09 UTC | #4

For inner types I create other types, again not the expert and not sure it answer your question (ðŸ˜…)?

```
public type InnerType = {
    first: Text;
};

public type ObjectType = {
    something: InnerType;
};

let myVar: InnerType = {
   first = "John"
};

let myVar2: ObjectType {
   something = myVar
};
```

You can also rename primitive types the same way

```
public type let Firstname = Text;

public type ObjectType = {
    first: Firstname;
};

// then

let first: Firstname = "John";

let myVar: ObjectType {
   first
};
```

-------------------------

Mathias | 2022-12-14 13:49:19 UTC | #5

Thank you for the cheatsheet! :) 

I'm now confused if my question made any sense. In a way, I was wondering if I can create a sub-object that has to have let's say 2 specific properties of the "parent" object. And if I can make that a type. 

```
public type ParentObject = {
    first: Text;
    second: Int;
    third: Nat;
    fourth: Bool;
};
```
Given the object type above could I have a type that needs to have both "first:Text" and "second:Nat" but dependent on whether the parent still has these properties? So if I'd change the parent type not to have these properties anymore I'd get an error. 

But as I said this might not make any sense as we'd probably just define the types the other way around. Meaning that the parent would consist of the child and have some additional properties. 

I'm asking because it would be nice if I could define an actor that needs to implement a part of the interface of another actor. But I think it doesn't make much sense, my bad.

Thanks for the help.

-------------------------

peterparker | 2022-12-14 14:28:42 UTC | #6

Maybe using optional parameters?

```
public type ParentObject = {
    first: Text;
    second: Int;
    third: ?Nat;
    fourth: ?Bool;
};
```

Or union?

```
public type RecordId = {
    id : Text;
  };

  public type Record = RecordId and {
    data : Blob;
  };
```

But I feel like I am missing the exact answer that you need. Don't know if @Severin has maybe a better idea?

-------------------------

Severin | 2022-12-14 15:08:44 UTC | #7

I didn't exactly understand what you'd want to have, but I feel like you're interested in subtyping. Could you have a look at [this](https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/local-objects-classes#structural-subtyping) and [this](https://forum.dfinity.org/t/type-record-is-not-strict-allows-subtype-to-be-passed-in/14502) and tell me if this is useful?

-------------------------

Mathias | 2022-12-16 10:08:37 UTC | #8

@Severin & @peterparker

I managed to do what I wanted (slightly less elegant than I hoped). I'll have to think through if my question made generally sense or if I just thought of it the wrong way. 

 Thanks to both of you!

-------------------------

paulyoung | 2022-12-17 06:53:34 UTC | #9

[quote="Mathias, post:1, topic:17412"]
If I have an object that contains a variable of a specific type. Can I somehow access that type?

The following obviously doesnâ€™t work:

```
public type ObjectType = object {
    first: Text;
};

// not valid syntax!
let myVar: ObjectType.first = "John";
```
[/quote]

You can do this:

```
public let ObjectType = module {
    public type first = Text;
};


let myVar: ObjectType.first = "John";
```

Whether this is actually useful or not is a different question ðŸ™‚

-------------------------

Mathias | 2022-12-19 10:05:58 UTC | #10

interesting, thank you very much.

-------------------------

