designcoderepeat | 2021-12-05 15:01:02 UTC | #1

```
Failed to load resource: the server responded with a status of 500 ()
```
This is the exact error message. 
I am confused here, since the same asset is present and nothing has changed, and after some time randomly, it does load again. 

I am unable to explain this behaviour. 

Any help here will be highly useful. Thanks in advance

-------------------------

designcoderepeat | 2021-12-05 15:03:43 UTC | #2

my only guess might be that it is somehow related to cycles available? But thats a random guess

-------------------------

levi | 2021-12-05 19:28:36 UTC | #3

I think there might be something going on with the certified data feature. For a couple of days now, on my canisters, I make a public-method query that lets me see the current certified-data: 

```
#[query]
fn see_certified_data() -> Vec<u8> {
    data_certificate().unwrap_or_else(|| trap("can't get data certificate"))
}
```
This function started giving me back the strangest bytes, more than 1kb (1184-bytes yesterday, today 1404-bytes, starting with the bytes: [217, 217, 247, 163, 100, 116, .... [anyone know what these bytes are?]), when the certified data shouldnt be more than 32-bytes, and it gives me back this 1kb before i even set any certified data in the canister. Also this around 1kb keeps changing when i query it, without the canister changing the certified-data. I have been trying to debug it myself to make sure i am not missing something huge but this is what i am getting. I also forked the asset canister and added the function above and reinstalled on a different canister and without uploading any assets i called this above function and it gives me back some weird ~1kb of bytes. Has anyone seen this before? Does anyone want to try this to make sure i am not the only one seeing it? put the above function into a canister and query it to see what the certified-data is.

-------------------------

levi | 2021-12-05 20:26:09 UTC | #4

(not letting me edit the first comment)
Looks like the canisters on the subnet [yinp6](https://ic.rocks/subnet/yinp6-35cfo-wgcd2-oc4ty-2kqpf-t4dul-rfk33-fsq3r-mfmua-m2ngh-jqe) are giving back certified-data of the 1184 bytes, and the canisters on the subnet [mpubz](https://ic.rocks/subnet/mpubz-g52jc-grhjo-5oze5-qcj74-sex34-omprz-ivnsm-qvvhr-rfzpv-vae) are giving back certified-data of the 1404 bytes. Both canisters are running the same wasm-module with the above public-method. The wasm-module is the certified_assets-canister with the above public-method put in.

-------------------------

diegop | 2021-12-06 01:03:33 UTC | #5

Let me ping team to see if anybody has any info that can help

-------------------------

roman-kashitsyn | 2021-12-06 22:05:32 UTC | #6

[quote="levi, post:3, topic:9348"]
I make a public-method query that lets me see the current certified-data:
[/quote]

Hi @levi,

Note that `data_certificate` is not the same thing as `certified_data`.
[`certified_data`](https://smartcontracts.org/docs/interface-spec/index.html#system-api-certified-data) is a small (up to 32 bytes) blob that the canister can set in an update method.
[`data_certificate`](https://smartcontracts.org/docs/interface-spec/index.html#certification) is a CBOR-encoded structure that contains a hash tree and a threshold signature that act as a proof that the canister indeed set its `certified_data` to a specific value at some point in time.

Currently, there is no System API to get just the raw `certified_data` back within the canister (because the canister is supposed to know its certified data anyways, and there wasn't any compelling use case for providing this API so far).

This doesn't explain the original behavior though. Unfortunately, it's hard to tell where the 500 status comes from just by looking at the message. Does the request go through the service worker that validates certifications?

-------------------------

levi | 2021-12-07 04:03:58 UTC | #7

Hey @roman-kashitsyn. My apologies for the assumption. Turns out, when using the certified_assets-canister, if a file is set with a content_encoding: "" (empty text), the service-worker says `Body does not pass verification` and gives a 500. With the file encoded as a gzip and with the content-encoding set to gzip, it certifies with the success. Thank you.

Edit: I fixed it in a pull-request: https://github.com/dfinity/certified-assets/pull/12

-------------------------

cryptoschindler | 2021-12-08 11:03:26 UTC | #8

When a canister sets `certified_data`, does it request a canister signature? Is this how the internet identity canister signs the delegation to the session key? tagging @bjoern aswell

-------------------------

designcoderepeat | 2021-12-09 06:22:31 UTC | #9

Is there anything I can do from my side to avoid this issue? 

I am facing the issue too where I get the service-worker says `Body does not pass verification` and gives a 500.

-------------------------

designcoderepeat | 2021-12-09 09:40:17 UTC | #10

When I posted this question the app was broken, now its working again... no changes from our end either! 

And this has been happening ever since we launched the app

-------------------------

bitdivine | 2021-12-09 20:48:15 UTC | #11

A query call goes to just one replica, right?  And isn't the system meant to be reliable even if up to 1/3 of replicas are failing/evil?  Maybe the service worker should be retrying if it gets a 500 error from a query call.

That doesn't answer the question of why the replica is failing.  I just think that it should not matter if there is a non-replicated error.  What do you think?

-------------------------

designcoderepeat | 2021-12-10 02:57:56 UTC | #12

What exactly do you mean by service worker?


yes, maybe adding retries should help! 
thanks for the suggestions..

-------------------------

levi | 2021-12-10 03:26:58 UTC | #13

Does it go through if you refresh it a couple of times after you see a 500? Maybe try using a canister on a different subnet and see if the same thing happens.

-------------------------

designcoderepeat | 2021-12-10 03:57:14 UTC | #14

It does not go through! I have seen it take a day or so for it to get back to normal!

And yes, will try using a canister from a different subnet... is there any way to specify the subnet while creating the canister ?

-------------------------

faraz.shaikh | 2021-12-10 04:25:11 UTC | #15

Hello @designcoderepeat 

 To better assist you in resolving the issue, we would need more info exact steps to reproduce the issue. Looking at the thread there are 2/3 issues being reported

1. Asset canister 
2. Certified variables
3. Verification failure

Please can you 
Add more details, which canister, existing URL, code snippet etc

Thanks
Faraz

-------------------------

designcoderepeat | 2021-12-10 05:28:31 UTC | #16

I haven't certified any variables... 
the app works most of the time (whenever it is able to load the assets) 
and other times it does not with the 500 error

for example: the app is failing now with the same error 'body does not pass certification' 
but it was working fine last night

https://rbsr6-fyaaa-aaaai-aarwa-cai.ic0.app/ is the link to the app

-------------------------

designcoderepeat | 2021-12-10 05:30:45 UTC | #17

one of the assets which is not loading now, but was loading last night: 

https://rbsr6-fyaaa-aaaai-aarwa-cai.ic0.app/resources/hero/guru.fbx

-------------------------

faraz | 2021-12-10 05:59:30 UTC | #18

thanks - this url is failing consistently(100%) at my end. 
This is a 40MB file, do you have an example for an asset that loads successfully,

-------------------------

faraz | 2021-12-10 06:07:43 UTC | #19

is it possible for you to get the MD5SUM of the original file guru.fbx that you uploaded into the canister? 

on linux you can do it by 
# md5sum /tmp/guru.fbx


can you please take a look at this post 
https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673

-------------------------

faraz | 2021-12-10 06:47:57 UTC | #20

@designcoderepeat 

Hey I ran the same analysis as @neometa did in the following report
   'https://forum.dfinity.org/t/service-worker-bug-body-does-not-pass-verification/7673'

Due to lack of streaming support in the service worker, an asset greater than 1800K bytes in size will run into the body cannot be verified error.

> 
> sha256sum /tmp/guru.fbx 
> fddee745a1d9676221cdafe01d3168c58f6954e8c4361c178915b55dc5914f4a  /tmp/guru.fbx
> 
> # "/resources/hero/guru.fbx"
>                                              82 # array(2)
>                                                 03 # unsigned(3)
>                                                 58 20 # bytes(32)
>                                                    FDDEE745A1D9676221CDAFE01D3168C58F6954E8C4361C178915B55DC5914F4A # "\xFD\xDE\xE7E\xA1\xD9gb!

[CBOR dump of guru.fbx](https://cbor.me/?bytes=D9.D9F7(83(02-4B(687474705F617373657473)-83(01-82(04-58.20(693DDEE1C32BC63D10FE2FE8103ECB0E83DA21E685C8BDF862BE7790B485F6AA))-83(01-82(04-58.20(ACD96C85467178ED0930D4E8BE6DC2D9D8C7502907AAF17AE24C47CCA1149E12))-83(01-82(04-58.20(FABFC7F3C61A63180BCA04C75614B53CEB647D65AA4000EB0584AE30759D3F7A))-83(01-82(04-58.20(58CF0FA48BCB4E091FC1077B7AFC1B2C3E63C82E0AB193385DF27319BCF9816F))-83(01-82(04-58.20(5336DF0A3563F54ABC293D351485BD076E58D1771F31022D928C650A096DE3E3))-83(02-4B(2F313930306B622E706E67)-82(03-58.20(F883650C320109B0D9B5DF9DF42E4727A96DC90597434BC658DBE06A9F3C1BB9)))))))))))

-------------------------

designcoderepeat | 2021-12-10 07:31:13 UTC | #21

The same assets load at times.. also the smaller assets load always from the error messages

For example the 40mb one was loading fine last night and might load again later

-------------------------

faraz.shaikh | 2021-12-10 09:12:53 UTC | #22

40MB is consistently failing for me

-------------------------

designcoderepeat | 2021-12-10 13:58:18 UTC | #23

i can ascertain that the asset loads at times... 

this is what is confusing me.

any idea how I can work around this limitation?

-------------------------

designcoderepeat | 2021-12-10 14:04:23 UTC | #24

the same asset, if I change it to raw.ic0.app it does load... 
how can I make the front end call the raw URL instead? 

What do you think?

[https://rbsr6-fyaaa-aaaai-aarwa-cai.ic0.app/resources/guard/castle_guard_01.fbx](https://rbsr6-fyaaa-aaaai-aarwa-cai.ic0.app/resources/guard/castle_guard_01.fbx) does not load
https://rbsr6-fyaaa-aaaai-aarwa-cai.raw.ic0.app/resources/guard/castle_guard_01.fbx does indeed load

-------------------------

faraz | 2021-12-10 19:38:13 UTC | #26

[quote="designcoderepeat, post:23, topic:9348"]
s what is confusing me.

any idea how I can work around this limitation?
[/quote]

the overall workflow is.
1. For  raw URL xxxx.raw.ic0.app
     the flow bypasses the service worker so there is NO content signature verification.

2. For the non-raw URL xxxx.ic0.app
      this call goes through the service worker that performs the verification after downloading the complete asset. the service worker keeps aside memory to download the asset, if this memory is not enough to store the complete asset (as in your case) the verification bails out.



Do you really need the asset verification, can this requirement be relaxed ? If so then, a workaround would be to fetch via the raw endpoint. Of course, this is a temporary workaround. Once streaming is implemented you can switch back to using the service worker (aka non-raw endpoint)

-------------------------

designcoderepeat | 2021-12-11 00:11:19 UTC | #27

Thanks a lot for the detailed overview.

However I am not sure how to fetch from the raw.ic0.app endpoint in the code

One way I can think of is to hardcore the raw ic0 link where I am loading the asset, however I'm not sure if it's the best idea.


I have also seen apps where all the assets are loaded (with a loading screen) which I would like to implement. 

If you can point me to some code where this is being done, that would be super helpful.

Thanks for your help once again

-------------------------

faraz | 2021-12-13 08:03:43 UTC | #28

> One way I can think of is to hardcode the raw ic0 link where I am loading the asset, however, I’m not sure if it’s the best idea.

Yes, that's what I am suggesting, i.e. you change the fetch URL to xxx.raw.ic0.app.  

It's **not a**  solution, but avoids the worst-case scenario where you are not able to upload/download large assets

-------------------------

designcoderepeat | 2021-12-17 09:24:38 UTC | #29

I havent got around to trying this yet... Will update here once i try it

-------------------------

bjoern | 2022-01-05 11:31:34 UTC | #30

> When a canister sets `certified_data` , does it request a canister signature? Is this how the internet identity canister signs the delegation to the session key? tagging @bjoern aswell

Yes. See the [system API](https://smartcontracts.org/docs/interface-spec/index.html#system-api) in the interface specification. The system call `ic0.certified_data_set` sets a 32-byte value (which is usually the root of a Merke tree) and the `ic0.data_certificate_*` methods are used to retrieve the subnet signature on that value. This is exactly how [canister signatures](https://smartcontracts.org/docs/interface-spec/index.html#canister-signatures) are specified, and this is how II (or any other canister) can sign delegations.

-------------------------

designcoderepeat | 2022-01-07 07:36:17 UTC | #31

seems to be working fine when I use the xyz.raw.ic0.app instead of xyz.ic0.app - the assets are now loading from the raw url, and that seems to be doing the trick so far! 

Thanks for all your suggestions

-------------------------

