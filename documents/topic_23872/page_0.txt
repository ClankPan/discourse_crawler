massimoalbarello | 2023-10-18 17:47:24 UTC | #1

Hello IC community,

IC WebSocket is ready to be used in your canisters!
Compared to the [beta release](https://forum.dfinity.org/t/ic-websocket-beta-release/21962), the new IC WebSocket protocol is much simpler and lightweight.

We published the following SDKs as packages in the respective registries:
- [Javascript SDK](https://www.npmjs.com/package/ic-websocket-js)
- [Rust CDK](https://crates.io/crates/ic-websocket-cdk)
- [Motoko CDK](https://mops.one/ic-websocket-cdk)

As always, we are hosting a fully managed version of the [IC WebSocket Gateway](https://github.com/omnia-network/ic-websocket-gateway) which you can use for your canisters as explained at the end of the [getting started tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) that @ilbert wrote. This tutorial has been updated and still remains the easiest way for you to get started using IC WebSocket.

You can find some examples in the following repositories:
- [Ping pong](https://github.com/omnia-network/ic_websocket_example) (**Rust** backend + **JS** frontend): 
- [Ping pong](https://github.com/iamenochchirima/ic-websockets-pingpong-mo) (**Motoko** backend + **JS** frontend)
- [Chat](https://github.com/iamenochchirima/ic-websockets-chat-mo) (**Motoko** backend + **JS** frontend)

Thanks a lot @iamenochchirima for the Motoko examples!

If you have any feedback, feature request, bug report or simply want to reach out to us, join our [Discord](https://discord.gg/pkPY4AqT).

Looking forward to what you will build!

-------------------------

Gekctek | 2023-10-18 19:00:32 UTC | #2

Congratz guys, nice work. Perfect timing too, il want to be using this for a feature soon.

-------------------------

rbirkner | 2023-10-19 07:51:32 UTC | #3

Awesome! Really nice work @massimoalbarello and @ilbert!

-------------------------

lastmjs | 2023-10-19 14:20:31 UTC | #4

Can you explain the plans with the hosted gateway? Will it become a part of the boundary nodes? When?

-------------------------

rdobrik | 2023-10-19 15:59:43 UTC | #5

Awesome! Congrats! Starting to work implementing changes to our IC4J WebSocket Client. Should be out soon.

-------------------------

massimoalbarello | 2023-10-19 21:11:32 UTC | #6

In the short term the WS Gateway cannot be integrated into the API Boundary Node because this decision would have to be proposed and adopted by the community, as [API Boundary Nodes will soon be controlled by the NNS](https://forum.dfinity.org/t/boundary-node-roadmap/15562). 
This implies that only the API Boundary Node image can run on the server which the NNS will elect as a Boundary Node.
Therefore, the only way to put the WS Gateway into a Boundary Node would be to integrate it into the API Boundary Node image but this is not something we can do right now.

However, this does NOT mean that developers must run their own WS Gateway, in the same way as they do NOT have to run their own HTTP Gateway.
Once the the API Boundary Node is integrated into the NNS, both the HTTP Gateway and the WS Gateway will be hosted on separate servers "outside" of the IC. 
Dfinity will certainly host an HTTP Gateway - and hopefully also a WS Gateway - but many others will be able to do so. This way developers do NOT have to host their Gateway and do NOT have to rely on Dfinity (or on us) as the only providers of Gateways.
Designing a mechanism for rewarding the providers of WS Gateways (and maybe even HTTP Gateways) is something that we are considering and would be great to hear other people's opinion on this.

Regarding the guarantees, as of right now, we provide a way for the client and canister to detect whether the WS Gateway acted maliciously (tampered, reordered or blocked the messages) and in the future we could integrate a way to switch from one WS Gateway to another in case malicious behaviour is detected. Also, once [VetKeys](https://forum.dfinity.org/t/threshold-key-derivation-privacy-on-the-ic/16560) are implemented the SDK and CDK, the WS Gateway will not be able to read the messages it relays and therefore developers can consider it as a fully trustless intermediary.

Let me know if there is something I missed.

-------------------------

Mercury | 2023-10-20 03:47:17 UTC | #7

Awesome! Big round of applause to @massimoalbarello  & @ilbert , and also to Dfinity (@Kobi and the team).

-------------------------

Mercury | 2023-10-20 03:55:48 UTC | #8

WebSockets tech has a lot of vulnerabilities, is prone to many attack vectors. What could be the best ways to protect our new jewel in IC?

-------------------------

massimoalbarello | 2023-10-20 07:36:00 UTC | #9

Which attacks are you referring to?

-------------------------

Mercury | 2023-10-20 09:14:52 UTC | #10

I googled "websocket vulnerability OR attack" to check how things are circa 2023, plenty to be cautious about, imho.

-------------------------

RMCS | 2023-11-01 14:01:59 UTC | #11

Hi @massimoalbarello i was busy doing some tests and everything works pretty smooth except for the fact that initializing the websocket on the frontend required a `SignIdentity` / `Secp256k1KeyIdentity `
```ts
const ws = new IcWebSocket(gatewayUrl, undefined, {
    canisterId: backendCanisterId,
    identity: generateRandomIdentity(),
    networkUrl: icUrl
});
```
Is there any specific reason to not accept the same options as creating an `HttpAgent` for an `Actor` (a regular `Identity` or `Ed25519KeyIdentity`)?

The dapp i want to integrate this in has multiple options to login from an getting a `SignIdentity` or `Secp256k1KeyIdentity` isn't possible in all cases afaik.

-------------------------

ilbert | 2023-11-01 18:21:38 UTC | #12

Hi @RMCS, `SignIdentity` is just an `Identity that can sign blobs` as stated in the agent-js code: 
https://github.com/dfinity/agent-js/blob/74647b99253164ac0000594bd52a00d0d7408a6c/packages/agent/src/auth.ts#L53-L55

and both `Ed25519KeyIdentity` and `ECDSAKeyIdentity` implement it (see [here](https://github.com/dfinity/agent-js/blob/74647b99253164ac0000594bd52a00d0d7408a6c/packages/identity/src/identity/ecdsa.ts#L43) and [here](https://github.com/dfinity/agent-js/blob/74647b99253164ac0000594bd52a00d0d7408a6c/packages/identity/src/identity/ed25519.ts#L52)), so it should be possible for you to pass them to the `IcWebSocket` constructor. Isn't it working for you?

We **can't** just have an `Identity` in the parameters because that can also be an `AnonymousIdentity`, but the IC WebSocket protocol doesn't allow anonymous clients. We created the `generateRandomIdentity` function so that you can pass a temporary identity (newly generated every time you call that function) to the constructor without having the need to have a user identity.

By the way, we're working with @iamenochchirima to provide an example that uses the Internet Identity of a user to open an IC WebSocket connection.

-------------------------

RMCS | 2023-11-02 08:57:56 UTC | #13

to be honest i have no clue, why its not working, mainly because no errors are thrown that something is going wrong, the only confirmation i have is the `console.log` in the `ws.onopen`.

This is the code that i have, the `identity` here is the same as the one we pass into a agent so i would assume it should work. 

if i change the `identity` on the initialize ws params to `generateRandomIdentity()` it connects and goes into the `ws.onopen`.

We are using all dfinity packages on 0.19.3, so thats shouldnt be an issue

```ts
const identity = await getIdentity(); // returns `Ed25519KeyIdentity | DelegationIdentity` (both extends `SignIdentity`)

console.log(!!identity); // returns true;
if (identity) {
	const ws = new IcWebSocket(gatewayUrl, undefined, {
		canisterId: backendCanisterId,
		identity: identity,
		networkUrl: icUrl
	});

	ws.onopen = () => {
		console.log('WebSocket state:', ws?.readyState, 'is open:', ws?.readyState === ws?.OPEN);
	};
}
```

-------------------------

ilbert | 2023-11-02 09:06:35 UTC | #14

Let me try to reproduce it and I'll get back to you asap. @RMCS which IC WebSocket SDK version are you using?

-------------------------

RMCS | 2023-11-02 09:16:31 UTC | #15

Thanks, these are the versions im using

frontend
```json
"ic-websocket-js": "^0.1.2",
```
backend
```json
ic-websocket-cdk = "0.1.2"
```

-------------------------

RMCS | 2023-11-02 14:53:08 UTC | #16

Hi @ilbert,

Is this version really stable? 

Running the ping-pong example works like a charm but i've been trying to send messages to different principals / identities that are generated from a seedphrase and the behaviour is pretty unexpected where sometimes it connects, sometimes it don't, sometimes i receive messages, sometimes i don't (without doing any code changes).

Is there maybe a chance to get you on a call and see if i'm doing anything wrong?

-------------------------

ilbert | 2023-11-02 15:28:33 UTC | #17

[quote="RMCS, post:16, topic:23872"]
Is there maybe a chance to get you on a call and see if iâ€™m doing anything wrong?
[/quote]
Sure let's have a call, feel free to book a session on my calendar: https://cal.com/lucabertelli/ic-websocket.

-------------------------

pk34 | 2023-11-02 17:57:40 UTC | #18

I'm having the same issue.

I did the Ping Pong with the random identity function and works just fine.

Then i added my logic to front and backend and also works fine with the random identity but in the moment i added the identity from II, the ws just closes in the moment is open with no error or any log.

If i force and send `identity._inner` the websocket works again, but as it is another principal signing the calls it doesn't work for my use case.

As a note, i'm using motoko for the backend.

-------------------------

ilbert | 2023-11-04 14:09:21 UTC | #19

@RMCS @pk34 we managed to find the what was causing the issue and published the updates!
New versions:
- Rust CDK: [v0.2.1](https://crates.io/crates/ic-websocket-cdk/0.2.1)
- JS SDK: [v0.2.2](https://www.npmjs.com/package/ic-websocket-js/v/0.2.2)
- Motoko CDK: [v0.2.0](https://mops.one/ic-websocket-cdk@0.2.0)

If you're using a self-hosted gateway or running it locally, please update it to [v1.0.4](https://github.com/omnia-network/ic-websocket-gateway/releases/tag/v1.0.4).

We fixed the issue with Internet Identities: now you can pass an identity from `authClient.getIdentity()` to the `IcWebSocket` constructor.

These updates also introduce a new feature for serialization and deserialization of the messages: in the JS SDK, you must now create the ws config using the `createWsConfig()` function and pass the generated actor from the declarations in the `canisterActor` parameter. This way, you can:
- receive your application message in the `onmessage` callback without the need to explicitly deserialize it
- pass your application message directly to the `ws.send` method, without the need to serialize it

Head over to the updated [tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) and/or the [example](https://github.com/omnia-network/ic_websocket_example/blob/3a9c2ad18b35617e4929e40553357fc9fc2c19e1/src/ic_websocket_example_frontend/src/main.ts) for more details.

-------------------------

Alex43342 | 2023-11-03 08:11:11 UTC | #20

Fantastic work, excited to see what you'll create)!!!!

-------------------------

pk34 | 2023-11-03 23:17:26 UTC | #21

I've upgraded to JS v0.2.2 and Motoko v0.2.2, upgraded the code on the canister and generated with dfx the files for the frontend

When creating `new IcWebSocket(gatewayUrl, undefined, wsConfig);` I get the following error:

> ws_message method must have 2 arguments
    at extractApplicationMessageIdlFromActor

Do i have to make another change for this new version besides adding the createWsConfig()?

-------------------------

ilbert | 2023-11-04 14:07:07 UTC | #22

[quote="pk34, post:21, topic:23872"]
Do i have to make another change for this new version besides adding the createWsConfig()?
[/quote]
Based on what you said, you should be fine on the JS side.
You just have to update the `ws_message` exposed method in the canister to include a second argument with your message type, like we do in the [tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc):

```diff
- public shared ({ caller }) func ws_message(args : IcWebSocketCdk.CanisterWsMessageArguments) : async IcWebSocketCdk.CanisterWsMessageResult {
-   await ws.ws_message(caller, args);
+ public shared ({ caller }) func ws_message(args : IcWebSocketCdk.CanisterWsMessageArguments, msg_type: ?MyMessage) : async IcWebSocketCdk.CanisterWsMessageResult {
+   await ws.ws_message(caller, args, msg_type);
  };
```
You can also find an example in the docs of the `IcWebSocket.ws_message` method: https://mops.one/ic-websocket-cdk/docs/lib#IcWebSocket.ws_message.

I'll also leave here the [diff](https://github.com/omnia-network/ic_websocket_example/commit/4c08442dd36033d0269b1b7bacc70ebda3e2b890#diff-10c7bfad39e256ff2cee3f4fa5812c8e2bb7b417bc7f9ddf079279421d9dc7bdR52-R53) of the *Rust* example that shows what to change, which can be helpful.

Please remember to generate the JS declarations again after this change.

-------------------------

iamenochchirima | 2023-11-05 06:37:42 UTC | #23

To those who are following the Motoko websocket implementation, I have updated the examples as well, [chat](https://github.com/iamenochchirima/ic-websockets-chat-mo) and [pingpong](https://github.com/iamenochchirima/ic-websockets-pingpong-mo), they are now using the JS SDK v0.2.2 and Motoko CDK v0.2.0. Messages are now being sent and received without explicit serialization and deserialization.

-------------------------

ilbert | 2023-11-07 18:09:30 UTC | #24

IC WebSocket Gateway **Docker image** now available at [omniadevs/ic-websocket-gateway](https://hub.docker.com/r/omniadevs/ic-websocket-gateway)! :tada:

-------------------------

ilbert | 2023-11-22 08:11:28 UTC | #25

# New release, breaking changes!
Today we're releasing new IC WebSocket versions that affect both the SDKs and the gateway.

> :warning: With this release, the gateway hosted at gateway.icws.io will become **incompatible** with all clients running old SDKs versions! Please upgrade the SDKs!

## New versions
SDKs:
- Rust CDK: [v0.3.0](https://crates.io/crates/ic-websocket-cdk/0.3.0)
- JS SDK: [v0.3.0](https://www.npmjs.com/package/ic-websocket-js/v/0.3.0)
- Motoko CDK: [v0.3.0](https://mops.one/ic-websocket-cdk@0.3.0)

Gateway:
- [v1.1.0](https://github.com/omnia-network/ic-websocket-gateway/releases/tag/v1.1.0)
- Docker image: [v1.1.0](https://hub.docker.com/layers/omniadevs/ic-websocket-gateway/v1.1.0/images/sha256-09f6bdf31db504ac7c238cdc68f5ab786c6782dba9fe22aa0f6b8eddec4ed905)

## What's changed
The CDKs now support **multiple gateways**! This means that you can now specify an array of gateway principals in the CDK initialization, and those will be the gateways authorized to interact with the canister.

For the Gateway, we've updated the IC WebSocket protocol to meet the latest requirements and we've added the **tracing telemetry**! We're planning make a [Jaeger](https://www.jaegertracing.io/) UI dashboard publicly available.

## Actions required
1. in JS, if you have any `@dfinity/...` dependency, make sure you upgrade/downgrade them to **v0.20.1**
2. **upgrade** both JS and canister libraries to the latest versions
   *In case you can't upgrade the* `@dfinity/...` *dependencies, installing the latest ic-websocket-js version using* `npm install ic-websocket-js@0.3.0 --force` *should work as a temporary fix.*
3. if you're using **Rust** in your canister, change the initialization of the [WsInitParams](https://docs.rs/ic-websocket-cdk/0.3.0/ic_websocket_cdk/struct.WsInitParams.html) to:
   ```diff
   - let params = WsInitParams::new(handlers, gateway_principal);
   + let params = WsInitParams::new(handlers, vec![gateway_principal]);
   ```
   and eventually include other gateways' principals in the array.
4. if you're using **Motoko** in your canister, change the [IcWebSocketState](https://mops.one/ic-websocket-cdk@0.3.0/docs/lib#type.IcWebSocketState) initialization to:
   ```diff
   - var ws_state = IcWebSocketCdk.IcWebSocketState(gateway_principal);
   + var ws_state = IcWebSocketCdk.IcWebSocketState([gateway_principal]);
   ```
   and eventually include other gateways' principals in the array.

That's all you have to do!

You can also follow the updated [tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) for reference.

## Motivation

Following our https://forum.dfinity.org/t/proposal-enable-canisters-to-pay-in-icp-for-external-services/24459, we are moving towards a more decentralized deployment of the gateways.
We're now experimenting with [Flux](https://www.runonflux.io/) and we've already deployed some instances of the WS Gateway there. We will follow up with instructions on how to use those gateways as well.

*The hosted gateway at gateway.icws.io will remain available.*

-------------------------

Sormarler | 2023-11-22 03:07:27 UTC | #26

[quote="ilbert, post:25, topic:23872, full:true"]
# New release, breaking changes!

Today weâ€™re releasing new IC WebSocket versions that affect both the SDKs and the gateway.

> :warning: With this release, the gateway hosted at [gateway.icws.io ](http://gateway.icws.io) will become **incompatible** with all clients running old SDKs versions! Please upgrade the SDKs!

## New versions

SDKs:

* Rust CDK: [v0.3.0](https://crates.io/crates/ic-websocket-cdk/0.3.0)
* JS SDK: [v0.3.0 ](https://www.npmjs.com/package/ic-websocket-js/v/0.3.0)
* Motoko CDK: [v0.3.0 ](https://mops.one/ic-websocket-cdk@0.3.0)

Gateway:

* [v1.1.0](https://github.com/omnia-network/ic-websocket-gateway/releases/tag/v1.1.0)
* Docker image: [v1.1.0](https://hub.docker.com/layers/omniadevs/ic-websocket-gateway/v1.1.0/images/sha256-09f6bdf31db504ac7c238cdc68f5ab786c6782dba9fe22aa0f6b8eddec4ed905)

## Whatâ€™s changed

The CDKs now support **multiple gateways**! This means that you can now specify an array of gateway principals in the CDK initialization, and those will be the gateways authorized to interact with the canister.

For the Gateway, weâ€™ve updated the IC WebSocket protocol to meet the latest requirements and weâ€™ve added the **tracing telemetry**! Weâ€™re planning make a [Jaeger](https://www.jaegertracing.io/) UI dashboard publicly available.

## Actions required

1. in JS, if you have any `@dfinity/...` dependency, make sure you upgrade/downgrade them to **v0.20.1**
2. **upgrade** both JS and canister libraries to the latest versions
3. if youâ€™re using **Rust** in your canister, change the initialization of the [WsInitParams](https://docs.rs/ic-websocket-cdk/0.3.0/ic_websocket_cdk/struct.WsInitParams.html) to:

```
- let params = WsInitParams::new(handlers, gateway_principal);
+ let params = WsInitParams::new(handlers, vec![gateway_principal]);
```

and eventually include other gatewaysâ€™ principals in the array.
4. if youâ€™re using **Motoko** in your canister, change the [IcWebSocketState](https://mops.one/ic-websocket-cdk@0.3.0/docs/lib#type.IcWebSocketState) initialization to:

```
- var ws_state = IcWebSocketCdk.IcWebSocketState(gateway_principal);
+ var ws_state = IcWebSocketCdk.IcWebSocketState([gateway_principal]);
```

and eventually include other gatewaysâ€™ principals in the array.

Thatâ€™s all you have to do!

You can also follow the updated [tutorial ](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) for reference.

## Motivation

Following our [Proposal: Enable canisters to pay in ICP for external services ](https://forum.dfinity.org/t/proposal-enable-canisters-to-pay-in-icp-for-external-services/24459), we are moving towards a more decentralized deployment of the gateways.
Weâ€™re now experimenting with [Flux ](https://www.runonflux.io/) and weâ€™ve already deployed some instances of the WS Gateway there. We will follow up with instructions on how to use those gateways as well.

*The hosted gateway at [gateway.icws.io ](http://gateway.icws.io) will remain available.*
[/quote]

Is the experiment with the Flux Blockchain an isolated solution for Flux or is some integration with the IC?

-------------------------

ilbert | 2023-11-22 13:30:26 UTC | #27

We want to create a service in which canisters can pay for external services like servers, and we're experimenting with Flux to do so.

In the case of IC WebSockets, we want to enable developers to simply pay some tokens to spin up their own IC WebSocket Gateway on Flux nodes. This way, the Gateway is not controlled by us and the developers do not have to self host it.

I'd suggest you to have a look at the mentioned:
https://forum.dfinity.org/t/proposal-enable-canisters-to-pay-in-icp-for-external-services/24459

-------------------------

rdobrik | 2023-11-22 22:58:11 UTC | #28

Updated Java WS Agent according the latest spec. Working with @ilbert to resolve some issues with Keep Alive message. Thanks Luca for your help!

https://github.com/ic4j/ic4j-websocket

-------------------------

ilbert | 2023-11-23 09:12:09 UTC | #29

Thanks to you Roman for integrating IC WebSocket in Java and enable many more potential applications to use it!

-------------------------

rdobrik | 2023-11-25 23:25:11 UTC | #30

The latest version of IC4J WebSocket Agent library is out. It's compatible with the latest Gateway spec. We also resolved the problem with keep alive messages, thanks @ilbert!

https://github.com/ic4j/ic4j-websocket

-------------------------

ilbert | 2023-12-04 15:20:29 UTC | #31

# New release!

Today weâ€™re releasing new IC WebSocket versions that affect both the SDKs and the gateway.

## New versions

SDKs:

* Rust CDK: [v0.3.1](https://crates.io/crates/ic-websocket-cdk/0.3.1)
* JS SDK: [v0.3.1](https://www.npmjs.com/package/ic-websocket-js/v/0.3.1)
* Motoko CDK: [v0.3.1](https://mops.one/ic-websocket-cdk@0.3.1)

Gateway:

* [v1.2.0](https://github.com/omnia-network/ic-websocket-gateway/releases/tag/v1.2.0)
* Docker image: [v1.2.0](https://hub.docker.com/layers/omniadevs/ic-websocket-gateway/v1.2.0/images/sha256-a3e4eb95485c7c2261ce79aa89100086684ccdb5df4c304d1ec7ead0c5665031)

## Whatâ€™s changed

### SDKs

> We suggest you to update all your SDKs to the latest version.

You don't have to specify the gateway principals anymore in the parameters, the protocol handles it for you under the hood!

If youâ€™re using **Rust** in your canister, change the initialization of the [WsInitParams](https://docs.rs/ic-websocket-cdk/0.3.0/ic_websocket_cdk/struct.WsInitParams.html) to:

```
- let params = WsInitParams::new(handlers, vec![gateway_principal]);
+ let params = WsInitParams::new(handlers);
```

If youâ€™re using **Motoko** in your canister, import the new modules from the CDK and initialize it with:

```diff
import IcWebSocketCdk "mo:ic-websocket-cdk";
+ import IcWebSocketCdkState "mo:ic-websocket-cdk/State";
+ import IcWebSocketCdkTypes "mo:ic-websocket-cdk/Types";

actor class YourCansiter() {
+   let params = IcWebSocketCdkTypes.WsInitParams(null, null, null);

-   var ws_state = IcWebSocketCdk.IcWebSocketState([gateway_principal]);
+   let ws_state = IcWebSocketCdkState.IcWebSocketState(params);

    // on_open, on_message, on_close callbacks defined here...

-   let handlers = IcWebSocketCdk.WsHandlers(
+   let handlers = IcWebSocketCdkTypes.WsHandlers(
      ?on_open,
      ?on_message,
      ?on_close,
    );

-   let params = IcWebSocketCdk.WsInitParams(
-     handlers,
-     null,
-     null,
-     null,
-   );

-   let ws = IcWebSocketCdk.IcWebSocket(ws_state, params);
+   let ws = IcWebSocketCdk.IcWebSocket(ws_state, params, handlers);

    // expose the ws_... methods here
};
```

Thatâ€™s all you have to do!

You can also follow the updated [tutorial ](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) for reference.

### Gateway

- big refactoring of the gateway codebase, which involves the use of [dashmap](https://crates.io/crates/dashmap). Now a single state is shared across client session handlers and pollers.
- the polling logic has been changed, so that if there are still messages in the canister's queue, the poller immediately polls them, without waiting for the next polling iteration.
- errors returned from the replica/canister during polling are handled in a better way, so that the poller is not always terminated when they occur

-------------------------

iamenochchirima | 2023-12-10 09:10:08 UTC | #32

Apologies for the late update, to those following the Motoko examples for ic-websockets, the examples have been updated now to use the latest versions of the sdks here: [chat](https://github.com/iamenochchirima/ic-websockets-chat-mo), [ping-pong](https://github.com/iamenochchirima/ic-websockets-pingpong-mo).

-------------------------

ilbert | 2023-12-15 22:20:37 UTC | #33

# New release!

Today weâ€™re releasing new IC WebSocket versions that affect both the SDKs and the gateway.

## New versions

SDKs:

* Rust CDK: [v0.3.2 ](https://crates.io/crates/ic-websocket-cdk/0.3.2)
* JS SDK: [v0.3.2 ](https://www.npmjs.com/package/ic-websocket-js/v/0.3.2)
* Motoko CDK: [v0.3.2](https://mops.one/ic-websocket-cdk@0.3.2)

Gateway:

* [v1.2.2](https://github.com/omnia-network/ic-websocket-gateway/releases/tag/v1.2.2)
* Docker image: [v1.2.2](https://hub.docker.com/layers/omniadevs/ic-websocket-gateway/v1.2.2/images/sha256-d71095b4b8a745ea7eea3fb467f095fcc9c7340edd825eed48391390ee888bea)

## Whatâ€™s changed

### SDKs

> We suggest you to update all your SDKs to the latest version.

- you can **close** the connection with the client *from the canister* using the newly introduced `close` CDK method:
  - **Rust**:
    ```rust
    ic_websocket_cdk::close(client_principal);
    ```
  - **Motoko**:
    ```javascript
    await ws.close(client_principal);
    // or (but doesn't call the on_close callback):
    // await IcWebSocketCdk.close(ws_state, client_principal);
    ```
- you don't have to specify the keep alive timeout parameter anymore (if you were doing it)
  - **Rust**: the [WsInitParams](https://docs.rs/ic-websocket-cdk/0.3.2/ic_websocket_cdk/struct.WsInitParams.html) struct doesn't have the `keep_alive_timeout_ms` field anymore.
  - **Motoko**: WsInitParams are now initialized with one argument *less*:
    ```diff
    - let params = IcWebSocketCdkTypes.WsInitParams(null, null, null);
    + let params = IcWebSocketCdkTypes.WsInitParams(null, null);
    ```
- `ws_send` is **deprecated**, use `send` instead:
  - **Rust**:
    ```diff
    - ic_websocket_cdk::ws_send(client_principal, message_bytes);
    + ic_websocket_cdk::send(client_principal, message_bytes);
    ```
  - **Motoko**:
    ```diff
    - await IcWebSocketCdk.ws_send(ws_state, client_principal, msg_bytes)
    + await IcWebSocketCdk.send(ws_state, client_principal, msg_bytes)
    ```

You can also follow the updated [tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) for reference.

### Gateway

* fix: call `ws_close` when canister closes connection (even with an error)

-------------------------

Gekctek | 2023-12-16 01:42:51 UTC | #34

Are there any changes to the protocol itself?  Would i need to update the .NET client?

-------------------------

ilbert | 2023-12-16 09:15:34 UTC | #35

Yes, there are some small changes to do.

### Ack message timeout
The developer cannot specify the timeout for the acknowledgement of the messages anymore, as it's now is calculated as:
```javascript
ackMessageInterval + COMMUNICATION_LATENCY_BOUND_MS
```
where:
- `ackMessageInterval` can be configured by the developer and **must** be the same as the send_ack_interval_ms configured on the canister
- `COMMUNICATION_LATENCY_BOUND_MS` is a fixed number (`30_000`, 30 seconds) that also the canister uses

Main diff reference: https://github.com/omnia-network/ic-websocket-sdk-js/compare/v0.3.1...v0.3.2#diff-19e7d9c2fdfd44207ffbdf74b31eb876d01b1093ffd355bd259d1fb10cd731f5R184.

### Open timeout
The client now has a timeout when opening the connection and waiting for the `OpenMessage` from the canister, calculated as:
```javascript
2 * COMMUNICATION_LATENCY_BOUND_MS
```

Main diff reference: https://github.com/omnia-network/ic-websocket-sdk-js/compare/v0.3.1...v0.3.2#diff-19e7d9c2fdfd44207ffbdf74b31eb876d01b1093ffd355bd259d1fb10cd731f5R236-R368.

### Close connection from canister
The connection can now be closed also from the canister side. To do so, the canister sends a `WebsocketServiceMessageContent::CloseMessage(CloseMessageReason)` service message variant, to which the client has to react by simply closing the WebSocket connection with the gateway.

The service message Candid types are always available in the [ic-websocket-cdk-rs/src/ic-websocket-cdk/service_messages.did](https://github.com/omnia-network/ic-websocket-cdk-rs/blob/e897bccaa0bf75feaf287fbddb3c5b02a92ac760/src/ic-websocket-cdk/service_messages.did) file.

Main diff reference: https://github.com/omnia-network/ic-websocket-sdk-js/compare/v0.3.1...v0.3.2#diff-19e7d9c2fdfd44207ffbdf74b31eb876d01b1093ffd355bd259d1fb10cd731f5R375-R417.

Reach me out if you need any further help.

---

Adding also @rdobrik to the loop, for the ic4j WebSocket client.

-------------------------

ilbert | 2024-01-18 20:49:12 UTC | #36

# New release (minor changes)!

Weâ€™re releasing new IC WebSocket versions that affect some of the SDKs.

## New versions

SDKs:

* Rust CDK: [v0.3.3](https://crates.io/crates/ic-websocket-cdk/0.3.3)
* JS SDK: [v0.3.3](https://www.npmjs.com/package/ic-websocket-js/v/0.3.3)

-------------------------

iamenochchirima | 2024-02-04 20:57:35 UTC | #37

Hey Devs, I'm happy to announce that we've just completed our initial integration of IC websockets into our project, [tswaanda](https://tswaanda.com). Our first implementaion of websockets enables real-time notifications, facilitating instant message exchanges from the marketplace to the admin dashboard clients and vice versa in our project. This includes sending messages to specific clients as well as broadcasting to all marketplace clients. We're actively working on expanding our use cases, with more real-time features on the coming soon.

For those new to ic-websockets in Motoko and seeking inspiration, take a look at our implementation code below. If you're seasoned in this area, we warmly welcome and appreciate any suggestions to improve our current implementation and use cases. 
A huge shoutout and thanks to @ilbert and @massimoalbarello for bringing this awesome tool on IC to life, and for their support and assistance as well.

You can find the code for our implementation [here](https://github.com/Tswaanda/tswaanda-admin/blob/fa16d7f0e368fea7e4c46e94b57b1ec1b2893aaa/backend/tswaanda/main.mo#L120C1-L413C7).

-------------------------

ilbert | 2024-02-23 19:32:20 UTC | #38

We now have a status page for the IC WebSocket Gateway hosted on AWS, go check it out!
https://status.icws.io/

-------------------------

ilbert | 2024-02-26 20:03:13 UTC | #39

# New release!

Today weâ€™re releasing new IC WebSocket versions that affect all the SDKs.

## New versions

SDKs:

* Rust CDK: [v0.3.4](https://crates.io/crates/ic-websocket-cdk/0.3.4)
* JS SDK: [v0.3.4](https://www.npmjs.com/package/ic-websocket-js/v/0.3.4)
* Motoko CDK: [v0.3.4](https://mops.one/ic-websocket-cdk@0.3.4)

## Whatâ€™s changed

### SDKs

Dependencies have been updated.

For the **JS SDK**, we've bumped the `@dfinity/...` dependencies to v1.0.1.

-------------------------

krunal | 2024-05-31 06:43:19 UTC | #40

> We fixed the issue with Internet Identities: now you can pass an identity from `authClient.getIdentity()` to the `IcWebSocket` constructor.

I think this is not working.
`authClient.getIdentity()` return identity of type `Identity` but to initialize websocket we need identity of type `SignIdentity`.

-------------------------

ilbert | 2024-06-02 07:58:16 UTC | #41

I've answered in the thread that you started: https://forum.dfinity.org/t/problem-in-websocket-set-up/31403/3

Let us know if you encounter any other issues!

-------------------------

ilbert | 2024-06-18 17:38:28 UTC | #42

FYI, we plan to release updates for CDKs and SDKs to update their dependencies by the end of June.

Is there someone who needs the release sooner?

-------------------------

ilbert | 2024-07-21 21:00:53 UTC | #43

# New release!

Today weâ€™re releasing new IC WebSocket versions that affect all the SDKs.

## New versions

SDKs:

* Rust CDK: [v0.4.0](https://crates.io/crates/ic-websocket-cdk/0.4.0)
* JS SDK: [v0.4.0](https://www.npmjs.com/package/ic-websocket-js/v/0.4.0)
* Motoko CDK: [v0.4.0](https://mops.one/ic-websocket-cdk@0.4.0)

## Whatâ€™s changed

### SDKs

> We suggest you to update all your SDKs to the latest version.

* we've removed the _deprecated_ `ws_send` method from both the **Rust** and **Motoko** CDKs. The method was already deprecated in [v0.3.2](https://forum.dfinity.org/t/ic-websocket-stable-release/23872/33) and now has been removed completely. Use `send` instead.

#### Motoko
* Due to the newly introduced [Motoko v0.11.0 safety feature](https://internetcomputer.org/docs/current/motoko/main/migration-guides/0.11.0-migration-guide), calls to sensitive functions now require the `system` pseudo-type. For this reason, now it's required to initialize the IC WebSocket library using the newly introduced `init` function:
  ```diff
  let ws = IcWebSocketCdk.IcWebSocket(ws_state, params, handlers);
  + ws.init<system>(); // <- add this
  ```
  > Please refer to the [Motoko v0.11.0 migration guide](https://internetcomputer.org/docs/current/motoko/main/migration-guides/0.11.0-migration-guide) to understand when you can call functions that use the `system` pseudo-type.

#### JS

* we've updated the `@dfinity/...` dependencies to the new [v2.0.0 release](https://forum.dfinity.org/t/agent-js-v2-0-0-is-released/33290). Make sure you upgrade them in your dependencies too.
* we've additionally fixed an issue that was causing the IC WebSocket JS client to fail to verify the incoming messages certificates.

You can also follow the updated [tutorial](https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc) for reference.

-------------------------

iamenochchirima | 2024-07-31 08:43:20 UTC | #44

The Motoko examples for the for ic-websocket implementation have been updated as well to the latest ws SDKs and `@dfinity/...` packages and a few other frontend updates.

[Chat App](https://github.com/iamenochchirima/ic-websockets-chat-mo), [Pingpong](https://github.com/iamenochchirima/ic-websockets-pingpong-mo)

-------------------------

