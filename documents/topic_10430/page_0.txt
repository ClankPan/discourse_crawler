Motokoder | 2022-01-22 18:39:01 UTC | #1

Is the *inspect_message* function planned for Motoko in the near future?

Also, will inspecting and discarding an ingress message with a large payload prevent the canister from being charged cycles, other than the cost of cycles for the *inspect_message* function itself?

Lastly, even if Motoko gets *inspect_message*, how can a canister defend against a hacker deploying another canister and sending large inter-canister payloads to a function in a constant loop? I imagine the function logic could throttle or block repeated requests from the same principal (saving storage), but afaik, the cycles will still get drained.

Thanks.

-------------------------

skilesare | 2022-03-04 04:05:30 UTC | #2

Bump.  What is the status of inspect_message for motoko?

-------------------------

claudio | 2022-03-09 18:21:45 UTC | #3

Stalled in bikeshedding  https://github.com/dfinity/motoko/issues/2528

-------------------------

jzxchiang | 2022-04-18 03:41:47 UTC | #4

Will this be taken up again soon? I think inspect_message can be really valuable to use for early authentication in order to prevent cycle drainage attacks.

-------------------------

claudio | 2022-04-23 19:31:12 UTC | #5

I may have a go at this this week. 

If you have an strong opinion about the proposals in (https://github.com/dfinity/motoko/issues/2528)

do chime in.

-------------------------

Motokoder | 2022-04-23 20:00:47 UTC | #6

I have a strong opinion that it's needed. Without the ability to intercept messages, any canister written with Motoko is vulnerable to a cycle drain attack.

-------------------------

lastmjs | 2022-06-24 21:35:49 UTC | #7

Is this live in Motoko?

-------------------------

claudio | 2022-07-05 07:29:34 UTC | #8

Yes, it should be. Try it from the playground. 

https://internetcomputer.org/docs/current/developer-docs/build/languages/motoko/message-inspection/

-------------------------

Motokoder | 2022-07-06 14:13:07 UTC | #9

Thank you Claudio!!!

-------------------------

icme | 2022-11-16 05:54:41 UTC | #10

I'm currently unable to restrict query or shared query functions with `inspect_message` (update calls work fine).

I took the example from the documentation and put it on the playground.

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=4144018877

-------------------------

claudio | 2022-11-17 16:50:59 UTC | #11

Its probably not kicking in for queries because the playground issues them as query, not update, ingress messages. But I'm not sure.

-------------------------

chenyan | 2022-11-18 19:32:11 UTC | #12

`inspect_message` doesn't apply to query calls. See the interface spec: https://internetcomputer.org/docs/current/references/ic-interface-spec#system-api-inspect-message

-------------------------

icme | 2022-11-18 19:52:28 UTC | #13

Got it, thanks!

@claudio then the docs [here](https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/message-inspection/#example) should remove the query call from the `inspect_message` call? Does it make sense for query calls to be included in the `msg` arg since they won't be blocked regardless of the boolean returned?

-------------------------

claudio | 2022-11-24 18:18:34 UTC | #14

Confusingly, a `shared query` function *can* be called using a regular HTTP call to obtain a certified response: this is why the variant type also includes `shared query` functions.

You would probably need to use dfx with a manually issued, certified (not plain) query to observe the filtering.

-------------------------

skilesare | 2022-11-24 21:48:16 UTC | #15

If you are trying to restrict something you could force an update by using the http_upgrade header which would force an update.

-------------------------

icme | 2022-11-25 00:13:38 UTC | #16

A “nice-to-have” would be if inspect_message could apply to query calls as well. Any idea how difficult this change would be?

-------------------------

chenyan | 2022-11-25 04:22:49 UTC | #17

Okay, I'm confused. You mean I can call the `shared query` function as an update method, and this update call can be filtered by `inspect_messge`? Is this mentioned in the spec?

-------------------------

timo | 2022-11-25 08:37:03 UTC | #18

[quote="icme, post:16, topic:10430, full:true"]
A “nice-to-have” would be if inspect_message could apply to query calls as well. Any idea how difficult this change would be?
[/quote]

I understood that inspect_message is there so that you can run some code on one replica first before it goes through the expensive process of being run on all replicas. So for a query call (that is called as a query call) you can just put the filtering code directly into the query function. You don’t need inspect_message to achieve the same result.

-------------------------

claudio | 2022-11-30 19:17:09 UTC | #19


[quote="chenyan, post:17, topic:10430, full:true"]
Okay, I'm confused. You mean I can call the `shared query` function as an update method, and this update call can be filtered by `inspect_messge`? Is this mentioned in the spec?
[/quote]

Yes, I believe so, if you squint at the spec. The calls goes through concensus, state changes are transient, and filtering is applied. IIRC.

-------------------------

