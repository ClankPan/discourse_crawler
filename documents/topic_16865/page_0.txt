peterparker | 2022-11-25 14:49:23 UTC | #1

I've got a project with multiple Rust canisters, is it possible to share easily the same `struct` accross these?

Like having:

```
my_project/src/canister_a/src/lib.rs
my_project/src/canister_b/src/lib.rs
my_project/src/canister_c/src/lib.rs
```

That share the same

```
my_project/src/shared/types.rs
```

Which contains something like

```
pub mod types {
    pub struct Args {
        pub something: u64
    }
}
```

**Update** actually same question for any modules because it could be handy to share utils too

-------------------------

senior.joinu | 2022-11-25 16:21:46 UTC | #2

Just like you're able to use the same copy of a library from `cargo.toml` in your canisters, you are also able to reuse your own libraries.

I don't know what is your project structure, but for a multi-canister setup I would recommend putting each canister into a separate crate. So you would have something like this:

```
my_workspace/
  canister_a/
    src/
    cargo.toml
  canister_b/
    src/
    cargo.toml
  canister_c/
    src/
    cargo.toml

  # this one is special
  shared_lib/
    src/
      types.rs
    cargo.toml
```

If you do it like that, then you can simply put
```
shared_lib: { path: "../shared_lib" }
```
into `cargo.toml` of each of your canister.

Doing like this allows you to easily decouple canisters from each other later when your project scales.

-------------------------

peterparker | 2022-11-25 16:24:31 UTC | #3

Nice, thanks! That should do, I'll give it a try later (since I posted my question I broke everything in my project 🤣)

-------------------------

peterparker | 2022-11-25 18:13:49 UTC | #4

So, I'm really a noob 😅.

Once you have added the reference `shared = { path = "../shared" }` in a canister, how do you use your `types` modules?

Tried `use crate::shared::types::{Args};` but I am missing something...

```
  shared/
    src/
      types.rs
    cargo.toml
  canister_a/
    src/
      lib.rs <-- here I tried to use `use crate::shared::types::{Args};`
    cargo.toml <-- here I added the path
```

-------------------------

famouscat8 | 2022-11-25 18:17:40 UTC | #5

check rust book and rust cargo book

-------------------------

GLdev | 2022-11-25 18:20:16 UTC | #6

What IDE are you using? On VSCode it should work to simply write ```let something:Args...``` And then it will highlight Args, and if you ctrl+. on that highlight it would offer to import it for you, and should be pretty good at it since you defined it in Cargo.toml. 

I remember CLion having something similar, tho' I only used it for a brief period and can't remember the shortcut from memory.

-------------------------

peterparker | 2022-11-25 18:24:48 UTC | #7

I'm closer, forgot to add the `shared` folder as a `members` in the root `Cargo.toml`.

Next one, so I probably fck up something in my toml...

```
use shared::types::shared::{BucketArgs};
   |     ^^^^^^ use of undeclared crate or module `shared`
```

Good idea @GLdev! I use Webstorm with Rust plugin. If I remove my import and use the auto-import of the editor it resolves the same usage.

-------------------------

GLdev | 2022-11-25 18:27:36 UTC | #8

Just to make sure, in the folder shared/src do you have a lib.rs that contains ```mod types; mod ...```, right? It should work to call it like that...

-------------------------

peterparker | 2022-11-25 18:29:36 UTC | #9

Yes, even made it `mod public types;`.

-------------------------

peterparker | 2022-11-25 18:38:57 UTC | #10

It works out 🥳

No freaking clue why. I stashed my changes, hacked around, reverted everything and applied my shelfed changes again and...all good 🤷‍♂️

Thanks everybody!

-------------------------

GLdev | 2022-11-25 18:46:52 UTC | #11

[quote="peterparker, post:10, topic:16865"]
It works out :partying_face:

No freaking clue why.
[/quote]

One of us, one of us!!! :laughing:

-------------------------

