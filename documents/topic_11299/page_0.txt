Ashley | 2022-03-04 15:02:48 UTC | #1

Hi Everyone - I got DSocial working on React Native with Expo. Wooohooo. It's an awesome dev experience. Lots of hacks to get it working, but it now works.

Critical issue I have is on physical iOS devices (currently testing on iPhone 11 Pro Max), not virtual devices e.g. Simulators. **If at any point I make a call to function on the canister that is NOT a query i.e. a write/update func**, in this example an increment function....

**The entire app becomes unresponsive**. It's taken me around 3 weeks to find this issue through the sea of code I've written, it's actually very simple, I can make query calls all day long, performance of app is great. **BUT** If at any time I make a call to function that is a write/update func then the app becomes laggy and unresponsive.

Really need the help of DFINITY team and any React Native devs out there, to help find what could be causing the issue. My thoughts is it's something do with the BLS verification? I don't know. But currently DSocial is blocked on releasing to app store until this is resolved. Please look at the patches folder, maybe one of these is causing the issue.

I've packed the code into a simple increment/get example repo, here: https://github.com/ashr1987/expo-rn-dfinity-icp-slow-bug

I've deployed the canister to the mainnet, so you can run this code on a physical iOS device to see the issue live. Instructions are in the README. Hope someone can help 🙏

-------------------------

diegop | 2022-03-04 16:04:41 UTC | #2

Im not sure myself I can help, but I will escalate this internally to see if anyone can.

-------------------------

senior.joinu | 2022-03-04 16:21:57 UTC | #3

[quote="Ashley, post:1, topic:11299"]
**The entire app becomes unresponsive** .
[/quote]


Looks like you're making a call from a rendering function (since you're using functional components).

Try to move `inc()` function declaration outside the rendering function.

-------------------------

Ashley | 2022-03-04 16:28:35 UTC | #4

It's called when you click a button, not when the component is rendered, moving the function declaration outside function makes no difference. I've tried many variations. If the function is never called, performance stays normal, if at any point it is called the UI locks up. This is only on physical devices, not simulators so clearly an issue inside JS UI thread on device.

-------------------------

Ashley | 2022-03-04 22:24:02 UTC | #5

any update @diegop? :slight_smile:

-------------------------

alexa.smith | 2022-03-04 22:45:10 UTC | #6

@Ashley I saw your tweet and pinged a few others from the team as well, waiting to hear back.

-------------------------

jzxchiang | 2022-03-04 23:57:56 UTC | #7

It depends on your set up. AFAIK iOS 15 devices doesn't enable WebAssembly, which is available in the simulator. Have you tried on Android?

-------------------------

Ashley | 2022-03-07 11:47:51 UTC | #8

Thanks [jzxchiang](https://forum.dfinity.org/u/jzxchiang)

How do you get around this issue on RN on iOS devices then? Do I need to change the WebKit version? The device I was testing on was on iOS 14, now upgrading to iOS v15 to see if it makes a difference.

Android is get the same problem, but when making query calls too. 

Do you have an app on RN talking to IC without these issues? If so, do you have an example I can see?

This a kinda a deal breaker for making DSocial work on IC :frowning:

-------------------------

diegop | 2022-03-07 17:04:47 UTC | #9

[quote="alexa.smith, post:6, topic:11299, full:true"]
@Ashley I saw your tweet and pinged a few others from the team as well, waiting to hear back.
[/quote]

Update: Alexa and I pinged people within DFN, so far no one has felt comfortable with their react native experience, but well keep looking.

-------------------------

kpeacock | 2022-03-07 17:27:00 UTC | #10

Yeah, it would be me, most likely, and you're pushing past what I've been able to develop a proof of concept for while I'm working on other features. @jzxchiang is the only person I know of who has successfully gotten around the webassembly issue, and we certainly don't have a smooth path for you yet, unfortunately

-------------------------

jzxchiang | 2022-03-07 22:16:47 UTC | #11

If you were testing on an iOS 14 simulator and it worked but then tested on an iOS 14 device and it didn't work, then it's likely not due to the WebAssembly issue. Especially if Android has the same problem.

I wrote up my findings on how to get a RN mobile app talk to IC [here](https://forum.dfinity.org/t/making-http-calls-from-mobile-apps/5192/14?u=jzxchiang). What you're running into should be one of the issues I described.

-------------------------

peterparker | 2022-03-08 06:33:27 UTC | #12

I had a quick try to the sample repo even though I don't have much experience with React Native.
I can also reproduce the error on my real iPhone.

However, interesting things to note, the update calls themselves seem to succeed. OP example is a simple counter and I do notice the counter going up if I call the increment. On the other hand, the promise that call the backend does not resolve nor throws any errors.

from @Ashley provided [code sample](https://github.com/ashr1987/expo-rn-dfinity-icp-slow-bug/blob/703dd6eb2d451eca7506b91488dd619c1806728a/screens/VideoScreen.tsx#L15):

```
const inc = async () => {
    const start = Date.now()
    const backend = await getBackendActor()

    console.log('so far so good')
   
    await backend.inc() // backend is actually incremented

    console.log(`we do not reach this point - promise does not resolve`)
  } catch (err) {
     // no errors are thrown
  }
```

-------------------------

paulyoung | 2022-03-08 07:25:51 UTC | #13

What happens if you don’t `await` `backend.inc()`?

Meaning:

```diff
- await backend.inc()
+ backend.inc()
```

-------------------------

Ashley | 2022-03-08 11:20:27 UTC | #14

Thanks @paulyoung @peterparker @jzxchiang - really appreciate you looking at this. Weeks of pain :)

I've tried all variations of this, basically that promise does actually get resolved, it just takes about 30-60 seconds. If this `inc()` is called in anyway (with or without await), it blocks the UI thread and the app is unresponsive. 

Even once the promise finally resolves the app is still slow and unresponsive. On simulator, zero issues.

I'm now porting the code to standard RN and not with Expo, to see if it's something to do with Expo. Pain.

-------------------------

GLdev | 2022-03-08 11:43:02 UTC | #15

Does the agent use a for loop anywhere? Loops don't play nice with browsers. I've run into this with agent-rs -> agent-rs-wasm and I had to move from a loop { read_state, if state is answered break ...} to proper web-based intervals. I would also take a look at the agent to see if it has any kind of call_raw functions, so you can test just sending the update (and not checking for a response) to narrow down where the problem could be.

-------------------------

peterparker | 2022-03-08 17:15:53 UTC | #16

To follow @GLDev hypothesis I added some hardcoded `console.log` in the `node_modules` of agent-js (I'm not familiar with) of OP's sample repo to check if [pollForResponse](https://github.com/dfinity/agent-js/blob/2fe3dd99cddfcf45c6d9d5b7a199a86285ce9740/packages/agent/src/polling/index.ts#L24) would be called often.

Doing so, I actually noticed that the app is using the **CJS** bundle of agent-js and not the **esm** one. I am not familiar with react native enough, is that correct???

In frontend CJS is use on the backend side, in the browser we use the esm modules - CJS does not work in the browser. In addition, when I use CJS, I explicitly have to specify which `fetch` library I want to use with agent-js (passing [fetch](https://github.com/deckgo/deckdeckgo/blob/b32c98dede2b2998621ff557768a70ee51b61a57/canisters/scripts/ic.installcode.mjs#L62) to agent-js).

So it is correct? And if yes, should also a `fetch` library be configured by the app?

-------------------------

gohan | 2022-03-10 17:15:03 UTC | #17

Its not a best approach, but you can use `InteractionManager` from React Native to show loading indicator while JavaScript is busy.
[# InteractionManager](https://reactnative.dev/docs/interactionmanager)

The biggest bottle neck of React Native is that, it is single Javascript threaded process. 
Here are alternative solutions - `runAfterInteractions`, `react-native-threads` or `react-native-webview`

-------------------------

inviscidpixels | 2022-03-11 00:33:00 UTC | #18

I don't have an iPhone available to test if this will work, but here's one workaround you can see if this fixes the problem.

Change the React Navigation navigation.navigate(..) call to use navigation.push(...) call, since what I imagine might be happening is that the screen that originally does the write call is still on the App's screen stack, so even though you've backed out of the screen, when you try to navigate back to it, it's the same screen still awaiting the write call previously made and as a result locks up the screen. 

By default React Navigation returns any instances of a screen already created and on the App's screen stack before creating any new instances of a specific screen. However, it does provide a way to create new instances of a given screen, by instead using push(...) instead of navigate(...) on its navigation object.

See here: https://reactnavigation.org/docs/navigating/#navigate-to-a-route-multiple-times

While this may not be the desirable outcome since you'll be creating new screens, if would at least eliminate that as the culprit if it doesn't solve the problem. 

Alternatively, you could make a custom hook (similar to the one you have for loading fonts, but for handling all logic relating to canisters) that injects a wrapped context provider using useeffect to initialize the provider's value by getting the canister's data and caching it into an async storage (or the similar encrypted library Expo recommends in case it is sensitive data), which it could provide to any screen(s) wishing to access that data. If the custom hook knows an update is pending due to user action, it could poll the canister for the new state (as others have suggested) and when available update itself and rerender consumers otherwise provide the cached value. 

This custom hook could be combined with (or you could use this by itself) https://docs.expo.dev/versions/latest/sdk/background-fetch/ and/or https://chafikgharbi.com/expo-background-task/ to handle all interaction with the canister, so that the app itself only communicates to the canister through this background task through this custom hook.

Another thing to note is instead of using useState, you could use useReducer and dispatch when you either need to get or set state which would act as a processing queue and thus help avoid blocking. The --really-- cool thing about useReducer is it's closer to a state machine and so closer to being deterministic which is an ideal feature of any dapp.

Hope this helps!

*It also occurred to me that you might need to use useRef to hang on to the actor reference in your component, because if the component is continually recreating that reference (as it would with every rerender unless, for instance, it's a useRef reference) this would also explain why it becomes laggy/unresponsive since each time the component is rerendered a new reference to the actor is created in addition to repeating the query call from the useEffect.

-------------------------

Ashley | 2022-03-11 07:54:52 UTC | #19

Thanks everyone - I tried everything mentioned here, it still locks the app up. Either with raw RN, Expo, tiny sample app or DSocial full app.

Honestly after almost 4 weeks of grinding on this problem, I'm so desperate, that I'm now building a webview to make the calls to IC, it works but god knows how I'm going to be able to support authenticated/logged in users.

Does anyone have an RN app in the App Store that connects directly to IC?

-------------------------

Ashley | 2022-03-11 08:47:16 UTC | #20

I found the issue :raised_hands:

![Screenshot 2022-03-11 at 09.43.02|690x108](upload://cz2JziqJIJyJpBznBNT7cSN41ZK.png)

It's the pollForResponse function. If this is not called the app stays performant without any issues.

Here's the link in the source code: https://github.com/dfinity/agent-js/blob/f07ed959b5697f27ed360d94a140b859bbc054e0/packages/agent/src/actor.ts#L360

Obviously this is not a fix, but for now the functions I'm calling I don't care about the response, e.g. incrementView on a video etc etc. 

UNBLOCKED after 4 weeks of pain, thanks for everyones support above :two_hearts: :two_hearts: :two_hearts:

-------------------------

inviscidpixels | 2022-03-11 20:47:46 UTC | #21

Wow! I can imagine what that took, you are hard core (: 

Maybe if you overwrite the polling duration declared on line 19 in src/polling/strategy.ts to a value on the order of 5 seconds (or more) but more than the default value of one second (or similarly change the backoff parameterization on that same line) but within reason of your target ux this would resolve the issue while still providing for change of state feedback? Perhaps this can be customizable field set in the agent itself without hardcoding the modification in future releases of the js agent.

The bootcamp is ending this weekend, and afterwards I was planning on drafting a custom hook for use in React projects so I just wanted to say thanks for covering some of the ground work of getting things functional in React Native. Seems like while personal computers are great and all, things need to have mobile representation to be adopted in the way we hope they can be.

Thanks again for all your hard work.

-------------------------

paulyoung | 2022-03-12 00:41:35 UTC | #22

I was going to suggest that a GitHub issue at least be filed on this when I found the following:

https://github.com/dfinity/agent-js/issues/532

Perhaps there’s some error being thrown that needs to be caught.

-------------------------

jzxchiang | 2022-03-12 02:06:40 UTC | #23

I'm surprised this has been an issue.

The only place I've ever encountered an issue with that polling logic in agent-js is when I use it in Android HeadlessJS mode, since setTimeout does NOT work as expected... I'm not sure where you're making these calls?

-------------------------

Ashley | 2022-03-16 12:54:27 UTC | #24

This is for any calls that are not `query` calls. This is how the `agent-js` works.

-------------------------

inviscidpixels | 2022-03-17 20:28:10 UTC | #25

Seeing that the poll interval is ~ 1-2 seconds and the fact React Native, as others have said is single-threaded, if the UI thread (that single thread) is polling at 1-2 seconds until the write call finishes this would also explain the laggy, unresponsiveness. Curious though that call never "releases".

Instead of omitting the call, maybe changing the hard-coded numbers (or making them configurable in future agent-js releases) to something on the order of 5-10 seconds could be a possible if pragmatic solution?

Following your link, I'm referencing: https://github.com/dfinity/agent-js/blob/f07ed959b5697f27ed360d94a140b859bbc054e0/packages/agent/src/polling/strategy.ts line 19 which is what the polling strategy code you pointed to references (if I'm not mistaken).

-------------------------

diegop | 2022-03-24 03:58:17 UTC | #26

very impressive you were able to debug this!

-------------------------

