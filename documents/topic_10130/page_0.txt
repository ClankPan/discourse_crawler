Dustin | 2022-01-05 14:55:56 UTC | #1

Is there a way to list all the canisters that are running on IC?
I thought that the registry canister on the NNS subnet was storing that information but could find a method to query anything similar. Is there a way to do so? 
I would like to get the information directly from IC and not via a service like ic.rocks. How do they get that info?

-------------------------

akhilesh.singhania | 2022-01-05 17:49:53 UTC | #2

Hiya Dustin.

The NNS does not know which canisters actually exist.  But the following information is available that can allow you to build up the list.  

- The NNS does know which range of canister IDs are assigned to which subnet.  More specifically the registry does.  There is a routing table data structure in the registry that contains this information.
- Further, for each canister that actually exists, some metadata about it can be queried (in particular: https://smartcontracts.org/docs/interface-spec/index.html#state-tree-canister-information).  
- Finally, looking at https://github.com/dfinity/ic/blob/89446f5a04f053040b4863eab5458446d925ed0e/rs/execution_environment/src/canister_manager.rs#L1265, we see that each time a new canister is created, it gets assigned the next id in sequence.

So my understanding is that the way services like ic.rocks enumerate all the canisters is by first figuring out how many subnets exist and what canister ID ranges exist on them.  Then they look up the metadata for each canister in sequence till they find a canister for which there is no metadata.  

Maybe @wang can also comment on this.  Their source code for ic.rocks is available at https://github.com/ic-rocks/ic-rocks as well.

I hope this helps.

-------------------------

Dustin | 2022-01-06 08:13:49 UTC | #3

Hi Akhi,
thanks a lot for the thorough reply. This sounds pretty much like what I'm looking for. I'll give this a try.

-------------------------

Dustin | 2022-01-10 14:42:49 UTC | #4

It's me again, I've looked into this and have two questions to get started with this. Hope you or anyone else can help me here. 
- As a start, would you recommend implementing such a tool in Motoko or directly in a front-end language e.g. Typescript. The ic-rocks git only shows the front-end implementation and they call their own API, so I'm not sure how the API is implemented. 
- Where can I find and query the information about the different subnets? E.g. where do I find the documentation that describes the routing table data structure within the registry.

-------------------------

akhilesh.singhania | 2022-01-11 06:47:08 UTC | #5

Hey Dustin.  Both are good questions.  I am not sure if I am the best person to answer them though.  I haven't kept up with all the APIs, etc. that currently exist.  Maybe @free knows what documentation exist and can suggest how to get started.

-------------------------

free | 2022-01-11 08:41:48 UTC | #6

[This](https://github.com/dfinity/ic/blob/344b7c77c9b31dfa6941cbd2cafd16a5127ff603/rs/registry/client/src/helper/routing_table.rs) is the code that deserializes the registry routing table. It is encoded as a protocol buffer, defined [here](https://github.com/dfinity/ic/blob/344b7c77c9b31dfa6941cbd2cafd16a5127ff603/rs/protobuf/def/registry/routing_table/v1/routing_table.proto).

-------------------------

Dustin | 2022-01-12 14:05:35 UTC | #7

Hi @free, thanks a lot for the links. Please excuse my ignorance but my experience is too little to be able to work with that.

Is there an example available on how to call the routing table? I am struggling even on how to even start here. Should I do it in Rust, Motoko or another language? Do I take the canister API or the HTTPS interface? 

I was thinking this could be a good application to get going with developing on ICP but may turn out to be more complicated than expected.

-------------------------

free | 2022-01-12 15:09:25 UTC | #8

You need to query the registry canister for a specific key (namely [`"routing_table"`](https://github.com/dfinity/ic/blob/b3b365be45a91bb08cf8c3eca76591fb37b4ebe1/rs/registry/keys/src/lib.rs#L59)).

E.g. by going to https://ic.rocks/principal/rwlgt-iiaaa-aaaaa-aaaaa-cai, scrolling down to `get_value`, inputiing the registry version (can be grabbed from `get_latest_version`, just above) and UTF-8 string `routing_table`. The output is a [protocol buffer](https://en.wikipedia.org/wiki/Protocol_Buffers)-encoded `RoutingTable` struct, as defined [here](https://github.com/dfinity/ic/blob/344b7c77c9b31dfa6941cbd2cafd16a5127ff603/rs/protobuf/def/registry/routing_table/v1/routing_table.proto).

The code I linked to above actually retrieves that key and decodes it into a Rust struct. It is of course part of the IC replica, so it comes with a lot of dependencies.

-------------------------

Dustin | 2022-01-14 10:03:30 UTC | #9

Thanks a lot. With your links I was able to find the [agent-pb](https://github.com/ic-rocks/agent-pb) extension from ic-rocks. This allowed me to retrieve the routing table from the registry canister :slight_smile: I'm using the example code of the agent-pb and modified it to allow me to get the data for all the subnets. This looks like the image below
![image|428x116, 75%](upload://nf7wPA6GEXVZqYEiuMmL55oPoJs.png)

Now I'm stuck at decoding the principal Id for the subnets. It's encoded in a buffer of 29bytes and I'm struggling to find out how to decode that. I basically extended the showRegistry() method in the index.js of the example in the agent-pb by the code below.

```
let routingTableResponse = await registry.get_value({
    key: Buffer.from('routing_table'),
});
let output = root.lookupType('RoutingTable').decode(routingTableResponse.value);

let tmp = output.entries[0].subnetId.principalId.raw;
let subnetId = root.lookupType('PrincipalId').decode(tmp);
```

All works fine until the last line. There, I'm misunderstanding something on how to decode the principal id. I get the error as shown in the image below
![image|690x85](upload://fXqtb3MwAppNvOmLF8u2JfUV07M.png)

Any suggestions on how to solve this are highly appreciated :slight_smile:

-------------------------

Dustin | 2022-01-14 10:07:03 UTC | #10

I missed part of the error message of the bottom image and can't edit for some reason. Here's the entire image:
![image|690x130](upload://aRC7TUpS2YBDJ6fkuFYDiusgFNz.png)

-------------------------

Dustin | 2022-01-17 16:14:08 UTC | #11

Solved it. Was obviously a beginner's misunderstanding. I'm still gonna post the solution for anyone who might have the same issue in the future. 
The principalIDs (therefore also subnets, canisters, ..) are encoded using base32 as described [here](https://smartcontracts.org/docs/interface-spec/index.html#textual-ids). 
The step by step solution (also from that source) to get from principal byte array to string is described as:

> The textual representation of a blob `b` is `Grouped(Base32(CRC32(b) · b))` where 
> * `CRC32` is a four byte check sequence, calculated as defined by ISO 3309, ITU-T V.42 and [elsewhere](https://www.w3.org/TR/2003/REC-PNG-20031110/#5CRC-algorithm)
> * `Base32` is the Base32 encoding as defined in [RFC 4648](https://tools.ietf.org/html/rfc4648#section-6), with no padding character added.
> * The middle dot denotes concatenation.
> * `Grouped` takes an ASCII string and inserts the separator `-` (dash) every 5 characters. The last group may contain less than 5 characters. A separator never appears at the beginning or end.

Hope this helps anyone else who is also learning how things roll on IC.

-------------------------

apotheosis | 2022-04-26 05:38:32 UTC | #12

Do these methods still exist? I do not see get_value as a method anymore. Is there another way to do this now?

-------------------------

gohan | 2022-04-27 14:27:51 UTC | #13

Canisters list is required for internet computer public blockchain

-------------------------

Chris | 2022-05-23 08:31:03 UTC | #14

Is it still possible to do this?

I'm not seeing the method anymore...

-------------------------

Chris | 2022-05-23 15:58:18 UTC | #15

Does this still hold true? 


I ask because get_value is no longer listed on ic.rocks, and half of the site no longer works so I wonder if it was dependent on functionality has changed...

-------------------------

diegop | 2022-05-23 16:49:56 UTC | #16

[quote="Chris, post:14, topic:10130"]
I’m not seeing the method anymore
[/quote]

Let me ask and find out

-------------------------

Chris | 2022-05-24 02:30:43 UTC | #17

Thanks, got it sorted!

-------------------------

diegop | 2022-05-24 02:49:57 UTC | #18

Great to hear. I appreciate you followed up

-------------------------

gohan | 2022-06-14 22:17:01 UTC | #19

How is it sorted? Share some information please

-------------------------

lastmjs | 2023-01-27 19:03:56 UTC | #20

Can anyone share the current way to enumerate all subnets with their canister id ranges? I'm not finding a way to do this in the Candid of the registry canister.

-------------------------

lastmjs | 2023-01-29 03:10:12 UTC | #21

@diegop any help here? I'd like to enumerate subnets and scan canisters, but it's unclear from the Candid for the registry canister how to do this.

For context Azle and Kybra canisters now have public metadata sharing that they've been created with Azle or Kybra at a certain version, and we want to start tracking live how many canisters of each are actually deployed. Will probably be our best metric to measure our own adoption.

-------------------------

Severin | 2023-01-30 10:41:04 UTC | #22

[quote="lastmjs, post:20, topic:10130"]
Can anyone share the current way to enumerate all subnets with their canister id ranges?
[/quote]

@mraszyk shared this repo with me: https://github.com/mraszyk/sexp. This seems to be the crucial line: https://github.com/mraszyk/sexp/blob/main/src/main.rs#L50

-------------------------

mraszyk | 2023-01-30 11:11:47 UTC | #23

Please checkout the branch: https://github.com/mraszyk/sexp/tree/mraszyk/only-canister-ranges and follow the README to enumerate all subnets and its canister ranges.

-------------------------

diegop | 2023-01-30 21:01:23 UTC | #24

[quote="lastmjs, post:21, topic:10130"]
@diegop any help here?
[/quote]

@lastmjs were the responses presented helpful? (I admit I did not click through and try them out)

-------------------------

lastmjs | 2023-01-31 02:50:53 UTC | #25

Very helpful, thanks everyone!

-------------------------

lastmjs | 2023-02-03 23:31:31 UTC | #26

@mraszyk I've created an issue in the repo but am also posting here for more visability: https://github.com/mraszyk/sexp/issues/1

I keep getting errors about the effective canister id not being the same as the canister id in the state path...I'm not sure how batch requests can ever be made to the state tree if the effective canister id has to match each path. Does anyone know the answer to this?

-------------------------

mraszyk | 2023-02-04 08:18:51 UTC | #27

I've replied on the issue.

-------------------------

lastmjs | 2023-02-04 13:51:25 UTC | #28

I think it would be helpful to continue this discussion here.

So unfortunately the batching technique doesn't work anymore because the effective canister id in the state tree path must march the effective canister id of the request, which seems to make grabbing many state paths for different canisters not possible with one request.

Does anyone know of another way to batch these kinds of requests? I want to get some public metadata for all canisters and doing an individual request for each one is undesirable.

-------------------------

mraszyk | 2023-02-16 10:03:51 UTC | #29

@lastmjs Would it be possible for you to use our IC Dashboard: https://dashboard.internetcomputer.org/canisters or do you need the information to be up-to-date (the dashboard loads the data from a cache) and have the module hashes and subnet IDs available all at once (not sure if this can be achieved by crawling the IC dashboard with a script)? In the latter case, we would need to reenable batching the paths `/canisters/<canister_id>/module_hash` and `/canisters/<canister_id>/controllers` for multiple canister IDs in the replica code.

-------------------------

lastmjs | 2023-02-16 17:46:32 UTC | #30

My end goal is to be able to count all Azle and Kybra canisters on the IC, and it would be great to count all Rust and Motoko canisters as well. The way to do it is by reading a custom metadata section. Azle and Kybra canisters now provide a custom metadata section describing the CDK. It would be neat if all canisters did this eventually.

So, ideally IC Dashboard or other indexers would just do this work for us as they index canisters. Is that something you'd be interested in?

To sum up, indexers could provide this information for each canister and for the IC as a whole, and people could filter through all Rust, Motoko, Azle, Kybra, etc canisters.

-------------------------

mraszyk | 2023-02-16 21:04:09 UTC | #31

[quote="lastmjs, post:30, topic:10130"]
The way to do it is by reading a custom metadata section
[/quote]

Custom metadata sections cannot be fetched for multiple canister IDs in a single read_state for the sake of DoS prevention (every canister can have a custom metadata section of size up to 1MB). Hence, to get the custom metadata sections of all canisters, you'd need to query them one by one or use a dashboard that caches that information.

-------------------------

Dylan | 2023-02-21 16:54:14 UTC | #32

[quote="lastmjs, post:30, topic:10130"]
So, ideally IC Dashboard or other indexers would just do this work for us as they index canisters. Is that something you’d be interested in?

To sum up, indexers could provide this information for each canister and for the IC as a whole, and people could filter through all Rust, Motoko, Azle, Kybra, etc canisters.
[/quote]

Cool idea. Yes, if there was a standard way that canisters identified their *source code language* in the custom metadata section, the [IC Dashboard](https://dashboard.internetcomputer.org/canisters) could save that as a property of the canisters and then use it to filter or sort the Canisters table.

-------------------------

lastmjs | 2023-02-22 11:51:01 UTC | #33

All we need to do is come up with the convention then. I'd like to get this conversation started. I don't think it should be the source code language though, but the CDK name, considering there could be many different CDKs per language.

Thoughts?

-------------------------

Dylan | 2023-02-27 19:40:18 UTC | #34

Good point, the CDK name makes sense.

-------------------------

let4be | 2024-04-10 19:14:30 UTC | #35

would really love an up-to-date method of doing this, been trying to figure it out for the past day without much luck

how can you determine when to stop the iteration(checking next canister id)? what happens when canister is deleted?

-------------------------

