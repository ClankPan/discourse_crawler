peterparker | 2021-08-09 12:01:51 UTC | #1

I am looking at the "Map and Buckets" example ([GitHub](https://github.com/dfinity/examples/tree/db3775a8ead7c96c6993ed633f528ff85776ddd7/motoko/classes) / [Forum](https://forum.dfinity.org/t/map-and-buckets-example/2414)) but, cannot figure a way to implement a performant getter method.

The actor's [get](https://github.com/dfinity/examples/blob/db3775a8ead7c96c6993ed633f528ff85776ddd7/motoko/classes/src/map/Map.mo#L19) is not defined as `query` because, I guess, the Bucket [get](https://github.com/dfinity/examples/blob/db3775a8ead7c96c6993ed633f528ff85776ddd7/motoko/classes/src/map/Buckets.mo#L11)  has to return an `async` value.

Map (main canister):

```
 public func get(k : Key) : async ?Value {
    switch (buckets[k % n]) {
      case null null;
      case (?bucket) await bucket.get(k);
    };
  };
```

Bucket ("sub canister"):

```
public func get(k : Key) : async ?Value {
    assert((k % n) == i);
    map.get(k);
  };
```

I tried to remove the async in a playground but, get following error.

> shared query function must have syntactic return type 'async <typ>'

Is there a way to provide `query` functions with the "Map and Buckets" ("canister and sub-canisters") pattern?

-------------------------

rossberg | 2021-08-09 12:34:08 UTC | #2

Queries can (in fact, must) have async results. The reason that `get` is not a query is that query methods cannot call other canister methods (like bucket) at the moment. This is a current limitation of the IC. Until the IC is extended with support for cross-canister queries, you have to use regular update methods if they need to make secondary calls.

-------------------------

peterparker | 2021-08-09 12:34:05 UTC | #3

[quote="rossberg, post:2, topic:6374"]
Until the IC is extended with support for cross-canister queries
[/quote]

This would be neat!

Gotcha, thx for the answer.

-------------------------

skilesare | 2021-08-09 13:46:24 UTC | #4

If you run some performance metrics it would be interesting to see if two queries are faster than one update. If so you could query the map for the bucket principal and then query the bucket directly.

-------------------------

peterparker | 2021-08-09 13:53:36 UTC | #5

[quote="skilesare, post:4, topic:6374"]
If so you could query the map for the bucket principal and then query the bucket directly.
[/quote]

That's the path I gonna try to follow.

I am careful about the subject because in my early version of our proof of concept I did not implement the `query`üòÖ. It had for effect that requests (GET) took up to 10sec. I did changed these to query and now it tops 100ms (ü•≥) but, I don't have yet tried out this "map and buckets" pattern.

For the curious, without query (9937ms for a get):

![Capture d‚ÄôeÃÅcran 2021-08-06 aÃÄ 07.27.27|614x499](upload://ncaHm2GCgwOn2hlFyqt4NCvZxFk.jpeg)

With query (132ms for a get):

![Capture d‚ÄôeÃÅcran 2021-08-09 aÃÄ 07.43.03|636x500](upload://j9JP1KKGYWQc3RMWzIin2dXUhYg.jpeg)

-------------------------

