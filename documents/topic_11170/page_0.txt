jzxchiang | 2022-02-27 19:37:19 UTC | #1

Are there any plans to add limited support for nominal (as opposed to structural) typing in Motoko?

So that would let us define two separate types:
```
type Kilometer = Float;
type Mile = Float;
```
without the Motoko type checker treating them as equivalent.

-------------------------

paulyoung | 2022-02-27 19:44:21 UTC | #2

You could do something like this:

```
type Kilometer = { #kilometer : Float };
type Mile = { #mile : Float };
```

This is an approximation of what some languages call a “newtype” or “newtype wrapper”.

-------------------------

jzxchiang | 2022-02-27 19:47:44 UTC | #3

Hmm yeah that's actually not a bad idea.

-------------------------

paulyoung | 2022-02-27 19:55:09 UTC | #4

FWIW there used to be some runtime constructs to this effect (as evidenced by the following issue)

https://github.com/dfinity/motoko/issues/31

-------------------------

jzxchiang | 2022-02-27 20:00:22 UTC | #5

Oh wow, didn't know Motoko dated back to 2018.

Going back to the newtype idiom, I wish Motoko had the "tuple struct" construct that Rust has, so I could omit the `#kilometer` in `type Kilometer = { #kilometer : Float };`...

-------------------------

paulyoung | 2022-02-28 00:15:05 UTC | #6

Without the tag you wouldn’t be able to construct a value of that type though.

-------------------------

rossberg | 2022-02-28 07:52:56 UTC | #7

[quote="jzxchiang, post:5, topic:11170"]
so I could omit the `#kilometer`
[/quote]

Well, not being able to omit it is the whole point of the pattern, since it determines and makes explicit which unit is being used.

FWIW, a singleton record `{km : Float}` would work just as well.

[quote="paulyoung, post:4, topic:11170"]
there used to be some runtime constructs to this effect
[/quote]

There never were nominal types in the language, I believe we were merely hypothesising on that issue. Nominal types are rather problematic in a distributed setting, since somebody will "own" their definition locally. That is, you cannot really use them easily for messaging. So it was natural to avoid them altogether.

-------------------------

