Kobi | 2023-06-20 09:28:16 UTC | #1

We are happy to share with you our WebSockets proof-of-concept, which demonstrates the potential of enabling WebSockets on the IC through a dedicated gateway.
![|624x249](upload://yzWyrGrdnB6jRuhVKA0YhbGJyvi.png)
To facilitate WebSocket connections between frontends and canisters on the IC, we use a gateway. This gateway provides a standard WebSocket endpoint for frontends and handles the communication with the canister. It establishes WebSocket connections with canisters through update calls and uses polling to obtain the latest messages and deliver them to the client.

We invite you to explore the code on GitHub, available at https://github.com/dfinity/ic-websocket-poc. This repository can serve as a starting point for developers interested in leveraging WebSockets on the IC. However, please note that this proof-of-concept requires further improvements to enhance security and stability (e.g. using SSL and enhancing error handling) and is not usable in production.

We encourage you to give it a try and let us know what you think!

-------------------------

gladguy | 2023-06-20 13:33:12 UTC | #2

Amazing, Dfinity opening up its wide harms.

-------------------------

cristian-zam | 2023-06-20 23:32:24 UTC | #3

Hey! that's an amazing feature. Let people to create DApps where communication is not a problem. Congrats to Dfinity team!

-------------------------

bitdivine | 2023-07-18 04:20:25 UTC | #4

Supercool.

Regarding security, what is the vision there?  E.g. will the websockets support certified data, equivalent to certified queries?  I.e. will a developer be able to take data, sign it as for certified queries, then post it and have it validated by the service worker?  The crypto part is definitely possible to do oneself; does it make sense to include such functionality out of the box to make it easy for developers to write secure code first time?

-------------------------

Kobi | 2023-07-18 07:36:32 UTC | #5

The proof-of-concept already makes use of certification and signatures so that the gateway is trustless. :slight_smile: Messages from the canister (together with a timestamp and a sequence number) are certified. Likewise messages from the client are signed using the key the client registered in the first update call.

-------------------------

massimoalbarello | 2023-07-19 16:35:21 UTC | #6

Me and @ilbert are planning to continue the work on this PoC. If interested in more details check [this](https://forum.dfinity.org/t/ic-websocket-proposal/21503?u=massimoalbarello) out.

-------------------------

Mercury | 2023-10-14 09:30:06 UTC | #7

Powerful proof-of-concept ! Any updates or an ETA for production workloads?

-------------------------

Mercury | 2023-10-14 09:47:10 UTC | #8

Just saw the beta release from the community. Cool !

-------------------------

ilbert | 2023-10-15 09:49:03 UTC | #9

We're slowly starting to release a stable version out. In the tutorial that we wrote at https://medium.com/@ilbert/websockets-on-the-ic-getting-started-5f8bcdfaabdc you can find all the details to get started using the IC WebSocket integration.

**Motoko CDK** will follow.

The WebSocket Gateway can now be considered **trustless** as it cannot tamper, reorder or block the messages without being detected by both the client and the canister. We're waiting for the [vetKeys](https://forum.dfinity.org/t/threshold-key-derivation-privacy-on-the-ic/16560) to become generally available to integrate them into our libraries and make sure the Gateway can't even read the messages.

Let us know if you need any further help.

-------------------------

Mercury | 2023-10-15 14:32:53 UTC | #10

Nice tutorial, ping-pong is the hello world of network stack code, awesome! Imho, what matters isn't that it's available for multiple of languages, but instead it's rock :mountain: solid in just one language. There are definitely a couple of use cases w/o a sensitive message payload, and there are workarounds for encrypting a message payload before vetKeys goes GA. Great work @massimoalbarello & @ilbert, w(h)en production-ready :rocket:?

-------------------------

ilbert | 2023-10-15 16:16:15 UTC | #11

We expect in few weeks.

-------------------------

ilbert | 2023-10-19 07:09:03 UTC | #12

Check this out! There will likely be frequent minor updates in the next weeks to the SDKs, but they can already be used!

https://forum.dfinity.org/t/ic-websocket-stable-release/23872

-------------------------

Meer | 2024-07-23 04:23:47 UTC | #13

What specific measures are being considered to enhance the security and stability of the WebSocket connections in this proof-of-concept, particularly regarding SSL implementation and error handling improvements?

-------------------------

ilbert | 2024-07-27 11:51:16 UTC | #14

[quote="Meer, post:13, topic:20836"]
regarding SSL implementation
[/quote]
TLS/SSL is enabled on the production gateway at [wss://gateway.icws.io](wss://gateway.icws.io). More in general, the [IC WebSocket Gateway](https://github.com/omnia-network/ic-websocket-gateway) supports adding a TLS certificate.
If you self-host the gateway, you can use the `--tls-certificate-pem-path` and `--tls-certificate-key-pem-path` flags to configure the gateway to use your TLS certificate. Refer to the [Arguments available](https://github.com/omnia-network/ic-websocket-gateway#arguments-available) section of the README for more details.

[quote="Meer, post:13, topic:20836"]
error handling improvements
[/quote]
At the moment, the gateway is relaying the messages to the canister, mostly in a fire-and-forget way. We chose to do so in order to keep it simple and fast, and to keep the protocol as close as possible to the native WebSocket's one. 
Are you experiencing some issues with the current implementation?

I invite you to take a look at the following thread, which is the most updated and contains the changelogs of the releases that we have done in the past months:
https://forum.dfinity.org/t/23872

-------------------------

