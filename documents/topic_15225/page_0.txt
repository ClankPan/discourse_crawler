paulk | 2022-09-01 12:35:33 UTC | #1

I am getting the following error when upgrading a project to SDK 0.9.3 and later versions:

Stderr:
stable-types:4.5-4.9: syntax error [M0001], unexpected token 'type', expected one of token or <phrase> sequence:
  }
  seplist(<typ_field>,<semicolon>) }

Any idea what the issue is here?

-------------------------

paulk | 2022-09-01 15:43:44 UTC | #2

Note that the build works with SDK 0.9.2 and earlier versions

-------------------------

Severin | 2022-09-06 08:22:29 UTC | #3

From the error message I would guess you're writing Motoko. Guessing further form that is that a Motoko compiler upgrade changed acceptable syntax. Would you mind sharing the relevant section of the code?

-------------------------

paulk | 2022-09-07 14:59:15 UTC | #4

Thanks for replying Severin - we don't know what code is throwing the error, the output above is all we have. We have narrowed it down to one canister but not what code causes the issue.

-------------------------

Severin | 2022-09-07 16:03:25 UTC | #5

Since the error happens when moving from 0.9.2 to 0.9.3, I had a look at the dfx changelog. There, it says "Updated Motoko from 0.6.21 to 0.6.25.". Maybe the [Motoko changelog for those versions](https://github.com/dfinity/motoko/blob/master/Changelog.md#0625-2022-03-07) is helpful to narrow it down?

-------------------------

matthewhammer | 2022-09-08 17:51:39 UTC | #6


[quote="Severin, post:3, topic:15225"]
Would you mind sharing the relevant section of the code?
[/quote]

+1

[quote="Severin, post:5, topic:15225"]
Maybe the [Motoko changelog for those versions ](https://github.com/dfinity/motoko/blob/master/Changelog.md#0625-2022-03-07) is helpful to narrow it down?
[/quote]


That log provides some helpful clues, especially since we don't have the source code yet in the thread.

I wonder if one of the recent fixes exposed a latent issue in the stable variable definitions of the code?  It could be that it should not have parsed before, but only did because of that now-fixed issue being unfixed earlier.

@paulk if you share that line of the code, maybe we can help spot the relevant remedy.

-------------------------

modclub | 2022-09-08 18:59:42 UTC | #7

```-- Compiling .../Projects/modclub/src/modclub/main.mo:
-- Parsing stable-types:
.../Projects/modclub/src/modclub/service/poh/poh.mo:1583.25-1583.37: warning [M0154], field append is deprecated:
Array.append has critical performance flaws; use a Buffer, and Buffer.append, instead.
.../Projects/modclub/src/modclub/service/poh/poh.mo:1590.32-1590.44: warning [M0154], field append is deprecated:
Array.append has critical performance flaws; use a Buffer, and Buffer.append, instead.
.../Projects/modclub/src/modclub/service/poh/poh.mo:1595.20-1595.32: warning [M0154], field append is deprecated:
Array.append has critical performance flaws; use a Buffer, and Buffer.append, instead.
stable-types:8.5-8.9: syntax error [M0001], unexpected token 'type', expected one of token or <phrase> sequence:
  }
  seplist(<typ_field>,<semicolon>) }
```

We are having the same issue when upgrading from 0.9.2 to 0.11.2 . 

I attempted to build without the "stable-type" command but still got the same error:

```
"../.cache/dfinity/versions/0.11.2/moc" "../Projects/modclub/src/modclub/main.mo" "-o" "../Projects/modclub/.dfx/local/canisters/modclub/modclub.wasm" "-c" "--debug" "--idl" "-v" "--public-metadata" "candid:service" "--actor-idl" "../Projects/modclub/.dfx/local/canisters/idl/" "--actor-alias" "modclub" "rrkah-fqaaa-aaaaa-aaaaq-cai" "--package" "array" ".vessel/array/v0.2.0/src" "--package" "base" ".vessel/base/494824a2787aee24ab4a5888aa519deb05ecfd60/src" "--package" "crypto" ".vessel/crypto/v0.2.0/src" "--package" "encoding" ".vessel/encoding/v0.3.2/src" "--package" "io" ".vessel/io/v0.3.1/src" "--package" "matchers" ".vessel/matchers/v1.2.0/src" "--package" "rand" ".vessel/rand/v0.2.2/src" "--package" "sequence" ".vessel/sequence/v0.1.1/src" "--package" "uuid" ".vessel/uuid/v0.2.0/src"
```

cc / @claudio @chenyan

-------------------------

chenyan | 2022-09-08 20:47:09 UTC | #8

Feel likes you are missing a semicolon somewhere. If you can share the code around the error lines, it can help us to pinpoint the problem.

-------------------------

modclub | 2022-09-09 02:13:15 UTC | #9

How would I find the code for those error lines? This error doesn't seem to specify a file that's in our repo.

-------------------------

claudio | 2022-09-09 03:04:17 UTC | #10

The file is internally generated by moc from the  stable variable declarations in the code and embedded in a custom section of the wasm. 

Because earlier, buggy versions of moc sometimes produced ill-formed stable-type files, we added a check that verifies the generated file is valid by parsing and verifying it to detect bugs early. 

I think that check might be failing, and has detected a bug. 

If you can share the source code, or some cut down version of it including just the stable variables, then we might be able to pinpoint the issue.

-------------------------

claudio | 2022-09-09 03:22:20 UTC | #11

Another, perhaps easier, helpful thing to share might be the `.most` file produced by the working compiler (dfx 0.9.2, moc 0.6.21?) with option `--stable-types`.

-------------------------

Mitch | 2022-09-09 03:41:47 UTC | #12

Here is content of the .most file using dfx 0.9.2:
```
type Bucket/2 = Bucket/1;
type DataCanisterId = Principal;
type List<T> = ?(T, List<T>);
type UpgradeData/1 = UpgradeData;
actor {
  stable var _canistergeekMonitorUD : ?UpgradeData/1;
  stable var admins : ?(Text, List<Text>);
  stable var cgusers : ?(Text, List<Text>);
  stable var storageStateStable :
    {
      admins : [Text];
      contentIdToCanisterId : [(Text, DataCanisterId)];
      dataCanisters : [(DataCanisterId, Bucket/2)];
      retiredDataCanisterId : [(Text, Text)]
    }
};

```

-------------------------

modclub | 2022-09-10 02:59:07 UTC | #13

@claudio Sent you a github invite to our codebase

-------------------------

claudio | 2022-09-12 16:42:41 UTC | #14

Sorry for the delay. I'm on vacation. Got the invite and will try to investigate by mid week

-------------------------

chenyan | 2022-09-12 00:36:07 UTC | #15

This .most file is bad. `type Bucket/2 = Bucket/1`. `/` cannot be a valid variable character. I think we have fixed this, but the file produced by an earlier compiler still exists. Can you override the error? dfx usually asks if you want to continue deploy, you can just say "yes".

-------------------------

Mitch | 2022-09-12 00:47:50 UTC | #16

I see, I've tried to generate a new .most file by commenting out the canister, but found it still throws the error upon reinstall and doesn't offer a continue prompt, just Stderr.

-------------------------

chenyan | 2022-09-12 00:53:54 UTC | #17

Right, the bad .most file was in the deployed Wasm module. If dfx doesn't provide a continue prompt, that's a bug I need to fix.

-------------------------

Mitch | 2022-09-12 01:33:12 UTC | #18

Interesting, well if you need more detailed info to be sure, I'll be happy to provide.

-------------------------

chenyan | 2022-09-12 03:09:30 UTC | #19

Fixed here: https://github.com/dfinity/sdk/pull/2561. Should be available in the next dfx release. Or you can build dfx locally if you are eager to try.

-------------------------

claudio | 2022-09-13 21:57:07 UTC | #20

[quote="modclub, post:13, topic:15225, full:true"]
@claudio Sent you a github invite to our codebase
[/quote]

I've pushed a PR that works around the bug by making all the public type components of actor class Buckets.mo private. It now builds for me.

-------------------------

modclub | 2022-09-13 16:50:24 UTC | #21

:pray: Thank you @claudio that did the trick!

-------------------------

claudio | 2022-09-13 22:00:59 UTC | #22

We will need to fix motoko somehow - either by deeming type components not sharable/stable or supporting parsing of type components in object/actor types, but I'm not sure which yet.

My PR is just a workaround.

-------------------------

claudio | 2022-09-13 22:04:12 UTC | #23

BTW I noticed that 'dfx build' takes a rather long time for this code. That's my experience on a Windows Hyper-V VM running Ubutunu. Do you have the same experience?

-------------------------

Mitch | 2022-09-13 22:23:10 UTC | #24

@claudio first thank you, this fix worked for us as well. Out of curiosity, is this a difference in how private and public types are parsed? Is that why changing the type to private succeeds?

-------------------------

claudio | 2022-09-13 22:33:45 UTC | #25

The problem is that the type parser does not recognize type components in object/module/actor types. One fix is to extend the parser. The other is to forbid type components from appearing in shared/stable types, to ensure the parser won't encounter them in '.most' files.

Changing the types to private means they don't appear in the actor type in the '.most' file, avoiding the bug.

-------------------------

modclub | 2022-09-15 02:44:53 UTC | #26

That's expected, if you run just 'dfx build' alone then it will build all of our canister ( dev, qa, test ). Running just 'dfx build modclub' will result in 1-2 min build time which is manageable.

On a side note, we are seeing our wasm grow to more than 2mb now and we recently received this error: 

 `status 413 Payload Too Large, content type "", content: Request 0x8dbf9ecf67edb9da4aae5cbb40978255d79aa034dda66161edef9c900ba671bf is too large. Message byte size 2117804 is larger than the max allowed 2097152`

In the documentation it says the dfx deploy doesn't support Gzip, is that still the case in later versions of dfx?

-------------------------

claudio | 2022-09-15 05:35:20 UTC | #27

You can reduce the moc compile times considerably with flag '-no-check-ir', if you are prepared to live a little more dangerously. Maybe use for debug builds but not release.( I saw the compile time of modclub go from 40s to 4s.)

Im not sure about the gzip question. Maybe ask separately or check the dfx release notes.

-------------------------

Severin | 2022-09-15 06:24:31 UTC | #28

[quote="modclub, post:26, topic:15225"]
In the documentation it says the dfx deploy doesn’t support Gzip, is that still the case in later versions of dfx?
[/quote]

I'm not sure about the current version anymore (it's gzip support is very spotty), but if you use the latest master, gzipped wasm is supported.

Support on old(er) versions (say 0.10.0 and before) is AFAIK non-existent.

-------------------------

modclub | 2022-09-16 20:59:14 UTC | #29

Wow, that is very fast, what risks do we take on using that flag?

-------------------------

claudio | 2022-09-17 10:37:44 UTC | #30

The compiler does a number of transformations on the intermediate code. By default, as a sanity check  to detect compiler bugs, it type checks the code after each transformation using a type system appropriate to the result of that transformation.

The flag suppresses the check so might fail to detect compiler bugs. 

I would recommend to only turn it off during local development, but leave it on when producing the production deployed code (and final test run.)

-------------------------

cryptoschindler | 2022-09-18 10:49:40 UTC | #31

Can we keep the compiler reference up to date please? :slight_smile: 


[quote="claudio, post:27, topic:15225"]
with flag ‘-no-check-ir’
[/quote]

https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/compiler-ref/


And how do we pass moc flags to dfx? Is that possible?

-------------------------

Severin | 2022-09-19 08:41:24 UTC | #32

[quote="cryptoschindler, post:31, topic:15225"]
And how do we pass moc flags to dfx? Is that possible?
[/quote]

You would have to use a canister of type "custom" for this AFAIK. Full schema for custom canisters is here: https://internetcomputer.org/docs/current/references/dfx-json-reference/

-------------------------

claudio | 2022-09-23 23:16:47 UTC | #33

We don't document all the flags since some are for compiler development. This arguably is one of those. 

You actually can specify  flags to moc in the dfx.json file by adding an optional 'arg' (or maybe 'args') field in the motoko canister description.

-------------------------

skilesare | 2022-10-19 20:28:31 UTC | #34

Would it be possible to get an example of a custom canister that compiles motoko with the -no-check-ir flag?

I've looked at the schema, but I honestly can't figure out what I'm looking at and how to use it. :joy:

-------------------------

claudio | 2022-10-20 13:09:14 UTC | #35

Here's an example dfx.json that passes some command line args to moc for the "hello" canister.

```

{
  "version": 1,
  "dfx": "0.8.1",
  "canisters": {
    "hello": {
      "type": "motoko",
      "main": "src/hello/main.mo",
      "args": "-v --compacting-gc -no-check-ir"
    },
    "hello_assets": {
      "type": "assets",
      "source": [
        "src/hello_assets/assets"
      ],
      "dependencies": [
        "hello"
      ]
    }
  },
  "defaults": {
    "build": {
      "packtool": "",
      "args": ""
    }
  },
  "networks": {
    "local": {
      "bind": "127.0.0.1:8000",
      "type": "ephemeral"
    }
  }
}
```

-------------------------

skilesare | 2022-10-20 20:56:12 UTC | #36

[quote="claudio, post:35, topic:15225"]
`"args": "-v --compacting-gc -no-check-ir"`
[/quote]

So so so much faster! Thank you!

-------------------------

