nomeata | 2023-03-19 13:08:47 UTC | #1

When writing a canister that maintains accounts on the ledger, it is hard to get a reliable notion of “how much is in there”, due to the asynchronicity of calls. You can call `account_balance`, but when it comes back it is hard to tell what transactions are already included in it, and which are not.

This would help if the response would contain the `BlockIndex`, e.g. as in
```
service : {
  // Get the amount of ICP on the specified account.
  account_balance : (AccountBalanceArgs) -> (Tokens, BlockIndex) query;
}
```

Incidentally, this would actually be a backward-compatible change, thanks to Candid subtyping.

Would this be worth doing?

-------------------------

mariop | 2023-03-20 10:39:03 UTC | #2

The account balance is always at the last block index of the ledger at the moment the call is served. How would you use the block index exactly?

-------------------------

nomeata | 2023-03-20 16:58:15 UTC | #3

The crux is “The moment”  – these are asynchronous calls, so it is hard to say when the call was answered. Message ordering can help if only one canister is involved, but else you really need this “time” stamp.

Consider canister A telling canister B that it has “just” transferred money into an account (including the BockIndex). Shortly afterwards canister B receives a `balance` response. It cannot know whether that response includes the effect of A’s transaction, or not. With a BlockIndex, it could.

-------------------------

levi | 2023-03-20 19:29:52 UTC | #4

[quote="nomeata, post:3, topic:19008"]
Consider canister A telling canister B that it has “just” transferred money into an account (including the BockIndex). Shortly afterwards canister B receives a `balance` response.
[/quote]

If canister-A waits for the transfer call to come back with a success response, then tells canister-B that the money is transferred, and then canister-B makes the balance call, then the balance is sure to include the effect of A’s transaction.

If B makes a balance call before receiving A’s notification, or if A makes the notification call before the transfer callback comes back, then there’s no guarantee if the balance includes the effects of A’s transaction.

-------------------------

nomeata | 2023-03-20 20:16:33 UTC | #5

[quote="levi, post:4, topic:19008"]
then there’s no guarantee if the balance includes the effects of A’s transaction.
[/quote]

Exactly! And a timestamp would help.

The problem is even more pronounced when external users (not canisters) try to make sense of transfers and balances, especially when they use query calls for the balance (which has its own problems, but still).

Tangentially: The problem of understanding the order of update responses and query responses is however true for all canisters, which is one reason I’m happy we finally got the [canister state counter](https://github.com/dfinity/interface-spec/pull/106), so we can help here by including the canister state counter in the update and query call response on the platform level.

-------------------------

nomeata | 2023-03-20 20:20:28 UTC | #6

[quote="nomeata, post:5, topic:19008"]
I’m happy we finally got the [canister state counter](https://github.com/dfinity/interface-spec/pull/106),
[/quote]

Oh, nevermind, in the discussion it looked as if I managed to convince the relevant parties of the usefulness of a real state counter for a canister (incremented with each state change), but eventually we only got [the weaker version incremented with each code/settings change](https://ic-interface-spec.netlify.app/#system-api-canister-version). I still expect that we’ll get the full version eventually, probably the moment someone _inside_ DFINITY needs it for a concrete use-case.

-------------------------

PaulLiu | 2023-03-26 02:02:22 UTC | #7

[quote="levi, post:4, topic:19008"]
If canister-A waits for the transfer call to come back with a success response, then tells canister-B that the money is transferred, and then canister-B makes the balance call, then the balance is sure to include the effect of A’s transaction.

If B makes a balance call before receiving A’s notification, or if A makes the notification call before the transfer callback comes back, then there’s no guarantee if the balance includes the effects of A’s transaction.
[/quote]

I think the recommended practice for this kind of use case is to use subaccount. Then you would not rely on checking balance on the main account.

-------------------------

PaulLiu | 2023-03-26 02:04:25 UTC | #8

[quote="PaulLiu, post:7, topic:19008"]
I think the recommended practice for this kind of use case is to use subaccount
[/quote]

This video goes over the details https://www.youtube.com/watch?v=Hm-NWwiUQZw

-------------------------

