dsd | 2023-10-16 12:41:06 UTC | #1

ðŸŽ‰ **Today, we are excited to announce the official release of a new version of the [**Rust**](https://crates.io/crates/pocket-ic)- and [**Python**](https://pypi.org/project/pocket-ic/)-PocketIC testing library alongside a new version of the PocketIC-Server.** ðŸŽ‰

PocketIC is a canister testing platform that supports deterministic, programmatic canister testing. It is lightweight and integrates seamlessly into existing testing infrastructure (e.g. cargo test). It runs as a standalone binary on MacOS and Linux without requiring additional containers or Virtual Machines. All that is required is that this binary be present on your host system.

*Example*:

```rust
use candid::{encode_one, Principal};
use pocket_ic::PocketIc;

 #[test]
 fn test_counter_canister() {
    let pic = PocketIc::new();
    // Create an empty canister as the anonymous principal.
    let canister_id = pic.create_canister(None);
    pic.add_cycles(canister_id, 1_000_000_000_000_000);
    let wasm_bytes = load_counter_wasm(...);
    pic.install_canister(canister_id, wasm_bytes, vec![], None);
    // 'inc' is a counter canister method.
    call_counter_canister(&pic, canister_id, "inc");
    // Check if it had the desired effect.
    let reply = call_counter_canister(&pic, canister_id, "read");
    assert_eq!(reply, WasmResult::Reply(vec![0, 0, 0, 1]));
 }

fn call_counter_canister(pic: &PocketIc, canister_id: Principal, method: &str) -> WasmResult {
    pic.update_call(canister_id, Principal::anonymous(), method, encode_one(()).unwrap())
        .expect("Failed to call counter canister")
}
```

In principle, it can support any programming language. It achieves that by providing a REST-API to interact with a subset of deterministic replica-components (the Â«Execution EnvironmentÂ»).

Our vision is that PocketIC replaces all current canister testing methods.

## ðŸ¤” Why PocketIC?

* With PocketIC, test execution is **reproducible**, as non-deterministic components of the replica (such as consensus or networking) are replaced with deterministic counterparts.
* PocketIC allows for **fast** test execution, as networking related timeouts are removed.
* PocketIC is **versatile** and allows for more fine-grained control over the execution environment. For example, already today one can directly manipulate the stable memory of a canister and thus test canister upgrades.

## ðŸª„ Whatâ€™s next?

### Support for multiple subnets

The next big feature which is planned for November is support for multi-subnet testing: As a test author, you will be able to define a topology and test interaction between canisters installed on different subnets. Also, the cycles accounting should scale with the subnet size, similar to mainnet. In our estimate, this is useful in particularâ€”but not onlyâ€”for testing scenarios that involve the SNS.

### HTTP Outcalls

As a test author, you will be able to mock HTTP-responses in a test. Thus, you can test scenarios involving HTTP-outcalls deterministically.

### Minor Improvements & Optimizations

We are constantly on the lookout for ways to provide more power to the test author without hurting the consistency of the API. For example, in the current API every ingress message is executed in a separate block. In the future, we will provide an API that allows pooling ingress messages and executing them within a single block. This is not only closer to the scenario in production, but should also speed up tests.

## ðŸ¤— Questions?

Reach out to us in the forum or leave a post here! We are happy to answer questions and help with the setup!

-------------------------

itsyaasir | 2023-10-17 11:51:44 UTC | #2

Hi, Nice crate, but how is this different from using state machine tests with the client, is there some advantages using this ? Thanks

-------------------------

fxgst | 2023-10-18 08:08:16 UTC | #3

For a test author in Rust, the experience was intentionally left the same, but we have made some changes under the hood:
The IC instances run on a local server, not as one process per test thread. PocketIC now uses a local server with an HTTP/JSON API, so it supports any client library language. In particular, this has enabled our new [Python testing library](https://forum.dfinity.org/t/pocketic-testing-canisters-in-python/22490) for testing canister.
Also, it is now _possible_ for the community to take on the task of developing a JS, TS, C++, ... client library for PocketIC without depending on components from the IC repository, and we are currently exploring new features that are not possible with the StateMachine at the moment.

-------------------------

NathanosDev | 2023-10-18 14:07:10 UTC | #4

Today I've finished migrating tests that I wrote for a small side project over to PocketIC and the difference in test execution time is outrageous!

Previously I was running DFX, deploying a canister there and then making calls against that canister using `agent-js`. There's about 10 tests here that each make multiple calls to the canister and they took 53 seconds to run. After migrating to PocketIC, those same tests are running in less than 2 seconds!

Additionally, because deploying the canister with DFX was slow, I only deployed the canister once. This meant that canister state was persisting between tests and I had to be very careful to not use the same data in multiple tests. So I had some functions to generate random data for each test. Now with PocketIC I'm able to deploy a new canister and get fresh state for every test and I can get rid of all this code for generating random data.

This is really a huge improvement in developer experience when testing canisters.

For those interested, I'll be publishing the TypeScript client that I'm using in the coming weeks once I finish polishing it off!

-------------------------

michael-weigelt | 2023-10-19 13:00:22 UTC | #5

Thanks for sharing. It is good to see just how much difference this can make with real projects. 

It is also good to know that the REST API has already paid off, because it enabled you to make progress while we were still finalizing the Rust library.

-------------------------

timo | 2023-11-06 19:05:12 UTC | #6

Is it possible with PocketIC to simulate responses? For example say the CUT (canister under test) makes a call. Can I simulate that it gets a certain system error back? Or say it makes two calls. Can I control the order in which the responses come back?

-------------------------

icpp | 2023-11-07 03:46:14 UTC | #7

Very cool! 

Does the code run the same in pocketIC as in the dfx local network and in the main network? 

In icpp, the C++ CDK, you can currently run smoke tests against canisters deployed to either the local network or the main network by writing pytest tests that import a few predefined fixtures, and then passing the appropriate value for --network=[local/ic] to the pytest command.

I am interested to explore the benefits of adding pocketIC as an option too, perhaps by adding an additional predefined pytest fixtures. What would be the main benefit? Is it the speed?

-------------------------

fxgst | 2023-11-07 08:35:00 UTC | #8

Hi @icpp, PocketIC uses a different technology stack than the local replica. It tries to be as close to mainnet as possible, and it actually uses a lot of components from there.
You're right, for various applications, we saw great speed improvements over other solutions, so I would say that is the main benefit. In addition, we're exploring the integration of other features like support for multi-subnet in PocketIC.

-------------------------

fxgst | 2023-11-07 08:52:11 UTC | #9

Hi @timo, at the moment, PocketIC does not have these capabilities. It tries to be as close to mainnet as possible (while still being deterministic), so to get a system error, you would have to actually send a message that would be rejected by the IC. Further, the message ordering is currently fixed.

-------------------------

michael-weigelt | 2023-11-07 12:37:07 UTC | #10

[quote="icpp, post:7, topic:23793"]
Does the code run the same in pocketIC as in the dfx local network and in the main network?
[/quote]

The canister code runs on exactly the same environment as on the mainnet. We use the mainnet execution environment, just like the local replica does. 

The speed improvements compared to testing on the replica can be significant, as Nathan shows above.

-------------------------

itsyaasir | 2023-11-08 13:17:39 UTC | #11

[quote="michael-weigelt, post:10, topic:23793"]
We use the mainnet execution environment, just like the local replica does.
[/quote]

I used the PocketIC for some quick tests but it seems that it bypasses the inspect message checks. Am I doing something or it doesn't support inspect message checks ?

-------------------------

mraszyk | 2023-11-08 13:21:02 UTC | #12

inspect_message checks will be supported in a next release of pocketIC

-------------------------

fxgst | 2023-11-08 13:25:02 UTC | #13

The next release should be in a week or two from here

-------------------------

itsyaasir | 2023-11-08 13:26:23 UTC | #14

[quote="fxgst, post:13, topic:23793, full:true"]
The next release should be in a week or two from here
[/quote]

[quote="mraszyk, post:12, topic:23793, full:true"]
inspect_message checks will be supported in a next release of pocketIC
[/quote]

Thanks guy! appreciate the quick response. Looking forward to this release

-------------------------

ilbert | 2023-11-08 15:31:08 UTC | #15

How can I control canisters [timeout and timers](https://internetcomputer.org/docs/current/developer-docs/backend/periodic-tasks) on PocketIC? Should I just [advance the time](https://docs.rs/pocket-ic/1.0.0/pocket_ic/struct.PocketIc.html#method.advance_time) to make them expire?

By the way, is there an API specification of PocketIC?

-------------------------

NathanosDev | 2023-11-08 17:59:52 UTC | #16

Calling [advance_time()](https://docs.rs/pocket-ic/1.0.0/pocket_ic/struct.PocketIc.html#method.advance_time) and then [tick()](https://docs.rs/pocket-ic/1.0.0/pocket_ic/struct.PocketIc.html#method.tick) (otherwise PocketIC won't produce a new block) should do the job. I have an example of that [here](https://github.com/hadronous/pic-js/blob/main/examples/clock/tests/src/clock.spec.ts#L62-L77), it's in TypeScript but should translate easily to your Rust tests.

-------------------------

fxgst | 2023-11-09 17:51:29 UTC | #17

Hi @ilbert, regarding the API specification: we've tried to document all public functions of the Rust and Python libraries with docstrings. As for the REST API of the PocketIC server, we do not have a specification at the moment, but we are looking into adding one, as this has been requested by others as well.

-------------------------

saikatdas0790 | 2023-11-10 15:43:03 UTC | #18

[quote="dsd, post:1, topic:23793"]
`let pic = PocketIc::new();`
[/quote]

Just a quick question regarding this instantiation, does this spin up isolated execution environments/sandboxes for the separate integration tests that we run or are all of the canisters created running in the same execution environment and they share the environment.

The reason for the question is if they are separate sandboxes, I could have multiple integration tests being run by Cargo in parallel without them stepping on each other and this is the behaviour of state-machine-tests currently and it keeps things consistent and simple.

Thoughts?

-------------------------

fxgst | 2023-11-10 19:06:30 UTC | #19

Hi @saikatdas0790, what you've said is exactly right.
This line does the following:
It starts a PocketIC server if it's not already running, otherwise the server is reused. Then, a fresh and independent instance (think `StateMachine`) is created, which you can use in your test. You can then install canisters on this instance, make calls etc. You can have multiple such instances running in parallel, so it works well with Cargo. The instances do not influence each other, and you don't see canisters of other instances. When `pic` goes out of scope, the instance is automatically collected by the server. To see an example, please take a look at [this file](https://raw.githubusercontent.com/dfinity/ic/master/packages/pocket-ic/tests/tests.rs). Please let us know if you have any further questions!

-------------------------

infu | 2023-11-20 14:07:47 UTC | #20

It is pretty fast. Also when I try to push dfx (artificial delay 0) and populate the backend. I am getting `Server returned an error:  Code: 429 (Too Many Requests)  Body: The service is overloaded.`
While pocket-ic doesn't complain. 

Is it possible to add some of these optimisations to dfx, like 
```
dfx start --clean --fast
```
This way a full stack dev can also see how their frontend looks like after running the tests and populating canisters with data & various test scenarios.

-------------------------

michael-weigelt | 2023-11-21 09:31:44 UTC | #21

Hi infu, good to hear. 

We think that is possible, and we are exploring adding the IC's HTTP layer to PocketIc, which would make the agent libraries compatible and enable frontends. But this is currently in an early exploration stage and we cannot promise anything at this time. 

If you have any other feedback or feature requests, we are happy to learn them.

-------------------------

michael-weigelt | 2023-11-22 14:47:19 UTC | #22

Hi all, we have released a new version of PocketIC which supports multi-subnet testing. Have a look:

https://forum.dfinity.org/t/pocketic-multi-subnet-canister-testing/24901

-------------------------

ufoscout | 2024-02-12 07:33:07 UTC | #23

@michael-weigelt 
I would like to report a couple of issues we are encountering with PocketIC. Firstly, in version 2.1.0 of PocketIC, the default features of `reqwest` are not properly set to false. Consequently, both native-tls and rustls are enabled by default. This issue is causing complications in our CI build, where the use of OpenSSL is restricted, leading to failures in the build process.
Additionally, if a call is blocked by the `inspect_message` check, PocketIC currently panics instead of returning an error as expected. This behavior poses a challenge in testing the `inspect_message` functionality, as it prevents us from properly assessing its behavior.

-------------------------

michael-weigelt | 2024-02-12 08:17:33 UTC | #24

Hi ufoscout

Thank you for the feedback, we will look into it. 
Is your first point a regression with regards to a previous version?

-------------------------

ufoscout | 2024-02-12 08:25:32 UTC | #25

[quote="michael-weigelt, post:24, topic:23793"]
Is your first point a regression with regards to a previous version?
[/quote]

Yes, it is a regression

-------------------------

fxgst | 2024-02-12 15:38:11 UTC | #26

Hi @ufoscout, we've [updated](https://github.com/dfinity/ic/commit/7c14514b2b1ee758ee51827df9e1176a3219820c) the PocketIC Rust crate to not use default features again, it will be released with the next release. ~~Regarding the `inspect_message` check, could you please provide some more details where the panic is happening and where you'd expect an error? Maybe with a short code snippet, if that's possible! Thank you.~~ Update: see @mraszyk's comment

-------------------------

mraszyk | 2024-02-12 15:35:35 UTC | #27

[quote="ufoscout, post:23, topic:23793"]
Additionally, if a call is blocked by the `inspect_message` check, PocketIC currently panics instead of returning an error as expected.
[/quote]

This shouldn't be the case if you use PocketIC server v3.0.0 and PocketIC library v2.1.

-------------------------

ufoscout | 2024-02-12 16:44:22 UTC | #28

[quote="mraszyk, post:27, topic:23793"]
This shouldnâ€™t be the case if you use PocketIC server v3.0.0 and PocketIC library v2.1.
[/quote]

Thanks, I tested it and I confirm that it works as expected now

-------------------------

ufoscout | 2024-02-12 17:03:25 UTC | #29

[quote="fxgst, post:26, topic:23793"]
weâ€™ve [updated](https://github.com/dfinity/ic/commit/7c14514b2b1ee758ee51827df9e1176a3219820c) the PocketIC Rust crate to not use default features again, it will be released with the next release.
[/quote]

Do you plan to publish a `2.1.1` patch on crates.io anytime soon?

-------------------------

michael-weigelt | 2024-02-12 17:05:51 UTC | #30

Yes, I expect within 24h.

-------------------------

ufoscout | 2024-02-14 12:12:39 UTC | #31

Just out of curiosity, is there any plan to create a non-blocking/async version of pocket-ic?

-------------------------

michael-weigelt | 2024-02-14 12:28:51 UTC | #32

If there is demand, perhaps. If you would find this useful, it would be helpful to know a specific test scenario that you'd like to make possible. 

We are currently working on a feature that will make PocketIC compatible with the [IC's HTTP Interface](https://internetcomputer.org/docs/current/references/ic-interface-spec#http-interface). That is, it will be compatible with agent-based tools like DFX and other software that uses agent.rs / agent.js. This also sets the stage for frontend-dapp testing. So if these are your use cases, they are very likely coming soon, with certain caveats.

-------------------------

ufoscout | 2024-02-14 13:46:50 UTC | #33

@michael-weigelt 
For each of our canisters, we provide a fully-typed client. For instance, if the canister `canister_one` has a query endpoint `get_name() -> String`, invoking it through the client appears as follows:


```rust
// There are 4 supported backend types:
// 1. ic_backend: for canister-to-canister calls
// 2. ic-agent: for agent-to-canister calls
// 3. ic-state-machine-tests: for integration testing with state-machine-tests
// 4. pocket-ic: for integration testing with pocket-ic
let backend_type = ...;

// This is a fully-typed client for the CanisterOne canister
let canister_one_client = CanisterOneClient::new(backend_type);

// Performs a remote call to canister_one.
let endpoint_response = canister_one_client.get_name().await.unwrap(); 
```

The client has a single consistent API that can be used for testing and real scenarios.
The issue lies in the `backend_type`, as all types are asynchronous except for pocket-ic, which utilizes a blocking API. This necessitates wrapping each pocket-ic function call inside `tokio::spawn_blocking`, as shown below:

```rust
pub async fn canister_exists(&self, canister_id: CanisterId) -> bool {
    let pocket_ic = ...;
    tokio::task::spawn_blocking(move || pocket_ic.canister_exists(canister_id))
        .await
        .unwrap()
}
```

However, this approach fails to function as expected in multithreaded code.

-------------------------

michael-weigelt | 2024-02-14 17:19:55 UTC | #34

Thanks for the details! 

Here is server version 3.0.1 with the old default features (disabled):
https://github.com/dfinity/pocketic/releases/tag/3.0.1
And the rust library is now on version 2.2.0: 
https://crates.io/crates/pocket-ic

-------------------------

timo | 2024-02-22 16:05:27 UTC | #35

Can I use the performance counters with PocketIC?

And can I upgrade canisters on PocketIC?

-------------------------

fxgst | 2024-02-22 16:10:07 UTC | #36

Hi @timo, 
Both of these things can be done with PocketIC.

-------------------------

ufoscout | 2024-03-01 11:13:16 UTC | #37

Any update on when http outcalls will be available on pocket-ic? 
We are currently forced to use dfx for some integration tests due to this limitation.

-------------------------

fxgst | 2024-03-01 13:06:22 UTC | #38

Hi @ufoscout, we have HTTP outcalls on the radar, but haven't specified a timeline yet, as we prioritize other features for now. It's definitely on the roadmap though!

-------------------------

timo | 2024-03-12 19:00:57 UTC | #39

Is it supported in PocketIC to add cycles to inter-canister calls?
And, in particular, is it possible to use a cycle wallet and make wallet calls?

-------------------------

mraszyk | 2024-03-12 21:00:52 UTC | #40

> Is it supported in PocketIC to add cycles to inter-canister calls?

Sure, if a canister has sufficient cycles balance, it can attach cycles to its outgoing calls.

> And, in particular, is it possible to use a cycle wallet and make wallet calls?

Yes, indeed.

-------------------------

sudoshreyansh | 2024-03-14 17:56:17 UTC | #41

Hi, I am facing an issue while deploying Azle canisters in PocketIC.
```
Failed to submit ingress message: Request 0xe0f1ba98a0f5d58ba935b66d48dc348e216c8d1ca31010bb2bac95a4d9bf087a is too large. Message byte size 7278992 is larger than the max allowed 3670016.
```
I checked my canister's wasm file. It's indeed around 7MB. So is there any solution for this?
I tried optimizing the Azle binary but can't get it to go less than 3MB.

-------------------------

fxgst | 2024-03-15 08:53:46 UTC | #42

Hi @sudoshreyansh, you could try zipping your Wasm and then uploading it.

-------------------------

Samer | 2024-04-02 10:04:17 UTC | #43

[Rust crate](https://docs.rs/pocket-ic/2.2.0/pocket_ic/index.html) `pocket-ic 2.2.0` is not compiling with `candid ^0.10` and `ic_cdk ^0.13`. (due to pocket-ic depending a specific version of candid_derive)

The [PocketIC Server](https://github.com/dfinity/pocketic/releases) is at `3.0.1`. Should these versions follow each other?

I tried downgrading some deps but still could not find a version match for my workspace.

-------------------------

michael-weigelt | 2024-04-02 12:16:41 UTC | #44

This pinned dependency will be relaxed in the next release. Until then, please try to use an older version of ic_cdk. 
Apologies for the situation, I know it is not ideal. The root cause is a breaking change between ic_cdk 0.12.0 and 0.12.1 (which I did not expect in a version change in the least significant digit). 

The library 2.2.0 is compatible with server 3.0.1. The reason they diverge is that the server's API has had breaking changes, but the library did not have to change its user-facing API to be able to use the new server.

-------------------------

michael-weigelt | 2024-05-06 13:15:49 UTC | #45

Hi ufoscout, 

Some thoughts on offering an asynchronous API as well as the synchronous one:

This is like a common problem in the rust ecosystem ([here is just one recent example](https://nullderef.com/blog/rust-async-sync/)), and the language currently makes it difficult to solve without either duplicating code or making additional assumptions/demands on the consumer of the library. I can imagine that in some domains, a library core could be implemented in a pure fashion, and the IO could be its own, user-specified layer. But this is not how PocketIC is currently written, and it is (after some experimentation) not clear to me how to make it so. 

Apart from making things consistent for e.g. your framework, there also seems to be little benefit of asynchronicity in this instance, because calls to a PocketIC instance within a single test cannot be interleaved anyway*, making them in essence blocking calls (even if implemented via polling, as in the new PocketIC release). 

If you think there is some low-hanging fruit I am not seeing that would enable your use case, please let me know. 

*) In version 4 of the PocketIC server (and [Rust library v3.1](https://crates.io/crates/pocket-ic/)), PocketIC instances also expose the replica's API, which is the [IC HTTP interface as specified](https://internetcomputer.org/docs/current/references/ic-interface-spec#http-interface) and used on mainnet. Of course, that does not directly address your problem, as this asynchronous API is not compatible with the PocketIC's `tick`-based approach. But it is a asynchronous alternative to the blocking PocketIC API. 
There are also two new methods the server exposes, which enable interleaving messages, see the HowTo in the links above, which might be interesting for your use case if you decide to implement your own asynchronous code to communicate with the server.

-------------------------

