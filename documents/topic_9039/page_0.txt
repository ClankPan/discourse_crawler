nomeata | 2021-11-23 16:43:20 UTC | #1

The current incident where a problem on one subnet means that possibly, [the ledger cannot be upgraded](https://forum.dfinity.org/t/enable-canisters-to-hold-icp/6153/206?u=nomeata) puts a spotlight on a long-standing fundamental issue of our system, and hopefully is a wakeup call. I'd say it's crucial that developers of an important canister like the ledger _must_ be able to program it in a way to upgrade safely even with outstanding calls.

And we know how to do it:

1. Change (or extend, for compat) the system API to have _named_ entry points for the response callbacks. A spec proposal for that is floating around the relevant repository for a good while.
2. Change the ledger canister to use the new interface. This will require _not_ using `await`, but implement callback handlers explicitly, but for a canister like the ledger this is not a significant hurdle. In fact, it may make the code cleaner and easier to understand, and reduces the risks of await-related pitfalls.

It will likely not possible to use this from Motoko or from rust when using `await`, and that's okay - it just must be _possible_ to have safe instantaneous (i.e. no stopping) upgrade for those who can't afford to have their upgradability at the whims of possibly malicious other canisters.

Yes, its not a sexy feature, and unsatisfying that it's not compatible with `async/await`. But still sexier than getting stuck with an ungradedable ledger (and then having to resort to patch the replica to synthesize the responses, as happened before.)

-------------------------

jorgenbuilder | 2021-11-23 21:02:13 UTC | #2

Hear, hear. Seems like something that we should decide to make time for. If it would reduce drag on the process of upgrading the ledger, the sooner it's done the more time that could be saved. Also, reducing the likelihood of a foundation-backed "full stop" event on a proposal seems quite valuable. Such occurrences are bad PR, and I'm curious to see if the voting turnout is as good the second time around.

-------------------------

jzxchiang | 2021-11-24 06:34:28 UTC | #3

Can you explain why named entry points for response callbacks will solve the problem of upgrading canisters with outstanding call contexts?

My [understanding](https://smartcontracts.org/docs/interface-spec/index.html#system-api-call) is that right now inter-canister updates execute reply and reject callback functions that are stored in a WebAssembly [Table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table), which itself is stored inside the callee canister's wasm module. These callback functions are looked up using known table entry indexes (I think).

How does using entry points (i.e. `ic0.reply_callback` and  `ic0.reject_callback`) actually help? 

The core problem of:
```
Some canisters may not be able to make sense of callbacks after upgrades
```
still isn't addressed.

Or are you saying that the upcoming [work](https://forum.dfinity.org/t/canister-safe-upgrades/8654/8) in safe canister upgrades will fix this because now the callback function is part of the callee canister's Candid interface and can thus be statically analyzed for breaking changes?

-------------------------

akhilesh.singhania | 2021-11-24 12:42:21 UTC | #4

Thanks for the note @nomeata!  I agree.  I will take an action item to pull up the relevant PR and post it on the forum.  I am still hoping that the ic-ref repo will be open sourced soon and then publishing such PRs will be easier.

-------------------------

nomeata | 2021-11-24 14:09:03 UTC | #5

Yes, lots of answers to @jzxchiang 's questions in that repo. Maybe I'll wait if that becomes available soon, instead of typing long texts on the phone :-)

-------------------------

rckprtr | 2021-11-25 00:05:02 UTC | #6

Have the ability for a controller to download the entire state of a canister and analyze/process it.

-------------------------

Hazel | 2021-11-25 00:41:31 UTC | #7

^ This please. Can't stress how important this will eventually be.

-------------------------

rckprtr | 2021-11-25 00:52:00 UTC | #8

Pre upgrade can fail, post upgrade can fail, chunking can fail... many ways to lose everything.

-------------------------

akhilesh.singhania | 2021-11-25 09:02:34 UTC | #9

[quote="rckprtr, post:6, topic:9039, full:true"]
Have the ability for a controller to download the entire state of a canister and analyze/process it.
[/quote]

We have a feature request for that.  I am hoping to be able to prioritise it next year.

-------------------------

nomeata | 2021-11-26 18:16:53 UTC | #10

~~Slightly related: Motoko canisters can currently easily be rendered un-upgradeable by a single trap in a callback~~ ([Motoko issue](https://github.com/dfinity/motoko/issues/2937)).

False alarm, sorry.

-------------------------

jzxchiang | 2022-04-16 18:20:05 UTC | #11

Was @nomeata's suggestion ever implemented?

-------------------------

nomeata | 2022-04-17 16:55:29 UTC | #12

No, but with the Interface Specification repo accepting public contributions, we can at least do some steps towards that goal without relying only on DFINITY devs. This PR is a first step, but I still need to write down how named callbacks would look like:

https://github.com/dfinity/interface-spec/pull/19#

-------------------------

levi | 2022-04-17 17:23:57 UTC | #13

Genius 

[quote="nomeata, post:12, topic:9039"]
write down how named callbacks would look like:
[/quote]
Is there more to it than passing the name of the callback method when making a call?

-------------------------

nomeata | 2022-04-19 06:48:11 UTC | #14

The callback method names would be separate from the public methods (they receive different data, and it would be dangerous if they could be called by others nilly-willy), so it requires a new kind of entry point to the canister. No rocket science, but just needs doing. (The needs doing would be easier to fuel with motivation if I knew that DFINITY would actually plan to implement it, but writing it down may increase _their_ motivation to do it, so weâ€™ll see :-))

-------------------------

