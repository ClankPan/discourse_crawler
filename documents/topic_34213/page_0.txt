Reuben | 2024-08-16 15:26:11 UTC | #1

When we have many canisters, it is troublesome to upgrade them one by one.
Or if our canister is created by the root canister and we are not the controller.
And when we need to disperse permissions and do not want to deploy directly by someone's local identity.
You can consider using this method for version management through the motoko language

We need the `latest wasm file` of the module corresponding to the target canister, and when creating canister, you need to specify the module that calls the upgrade api as its controller.

First, you need to copy the ic-manage declaration to the local
`https://github.com/johnxiaohe/ICP-Spark/blob/dev/src/spark_backend/management.mo`

Then declare the IC management module client and upgrade method in the module responsible for the upgrade
```
actor{
        type Management = management.Management;
        let mng : Management = actor("aaaaa-aa");
        public shared func updatecodeWithoutArgs(wasm: [Nat8], cids:[Text]): async(Bool){
                for(cid in Iter.fromArray(cids)){
                        await mng.install_code({
                                arg = to_candid();
                                wasm_module = wasm;
                                mode = #upgrade;
                                canister_id = Principal.fromText(cid);
                        });
                };
                return true;
        };
        public shared func updatecodeWithArgs(wasm: [Nat8], cids:[Text]): async(Bool){
                for(cid in Iter.fromArray(cids)){
                        await mng.install_code({
                                arg = to_candid('arg1','arg2','arg3','arg4');
                                wasm_module = wasm;
                                mode = #upgrade;
                                canister_id = Principal.fromText(cid);
                        });
                };
                return true;
        };
}
```

wasm file stream can obtain wasm file generation stream through js client, call motoko canister to upgrade our main canister, child canister

When our child Canister has many dynamic init parameters. When updating the code, the same init parameters are needed as arg. You can use the following method to pass the parameters in order to generate blob.
```
to_candid('arg1','arg2','arg3','arg4')
```

Because the init parameters of child are dynamic and unpredictable. It is recommended that the child canister provide an argsblob interface, and obtain the init args blob information of the canister through the interface during the upgrade

Thanks to these authors for their ideas
https://forum.dfinity.org/t/encode-principal-to-candid-arguments/10465

https://github.com/peterpeterparker/motoko_to_rust_migration/blob/1d51608bbea4f7257d6ed0916a5238d4427ec13b/src/motoko_to_rust_migration_backend/main.mo

https://forum.dfinity.org/t/need-help-implementing-install-code-canister-method/18313

-------------------------

Reuben | 2024-08-16 15:28:15 UTC | #2

I created a versioning platform for my project because there were too many derived containers to manage. I will continue to develop this platform if you need it.
![image|690x276](upload://nYm4AWsLbh7N7TQLhbznKLatjWF.png)

-------------------------

Reuben | 2024-08-16 16:04:16 UTC | #3

But I think args is meaningless in update code, because it is only useful during initialization. Update code should not check args

-------------------------

