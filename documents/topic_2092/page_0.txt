Hazel | 2021-03-05 14:49:57 UTC | #1

Is there a way to introspect canister size / limits from Motoko at the moment?

-------------------------

claudio | 2021-03-10 19:10:55 UTC | #2

Hi Hazel,

There no official library at the moment, but if you are desperate, and with the caveat  that these APIs may change, there's some basic stats provided but the `Prim` (pseudo) library:
```
rts_version : () -> Text 
rts_memory_size: () -> Nat;
rts_heap_size: () -> Nat;
rts_total_allocation: () -> Nat;
rts_reclaimed : () -> Nat;
rts_max_live_size : () -> Nat;
```
(Sizes are in bytes.)

You can access `Prim` with a special import (as do many base libraries):

```
import Prim "mo:prim";

...Prim.rts_memory_size()...
```

The `Prim` module is not intended to be accessed by users but is used to implement `motoko-base`. It's API is liable to change so use at your own risk/discretion.

Note that Motoko currently uses a 2-space copying collector so the heap will be at most half the memory, and the heap is thus bounded by 2GB. We have another, compacting, GC in the pipeline that will allow access to much more of the 4GB for the heap.

Hope that helps,
Claudio

-------------------------

Hazel | 2021-03-05 18:12:16 UTC | #3

Thanks @claudio! This is perfect! Noted the instability, this works just fine for my hacks / POC stuffs.

-------------------------

alexeychirkov | 2021-06-18 09:32:01 UTC | #4

@claudio can you please describe what those getters really mean?
I could not find any comments in the source code about what kind of bytes those functions corresponds to.

* What is `rts_memory_size()` and is it correlated with  "Memory Size" mentioned in `dfx canister status <canister>` output?

* What is `rts_reclaimed()`?

* What is `rts_max_live_size()`?

* As I see from our tests `rts_total_allocation()` is the sum of `rts_reclaimed()` and `rts_heap_size()` - correct?

Thanks in advance...

-------------------------

nomeata | 2021-06-18 15:29:29 UTC | #5

I think Andreas just answered most of them in https://forum.dfinity.org/t/motoko-array-memory/5324/5?u=nomeata

-------------------------

jzxchiang | 2021-08-15 18:23:26 UTC | #6

As an aside, what does RTS stand for?

-------------------------

nomeata | 2021-08-15 21:00:22 UTC | #7

[quote="jzxchiang, post:6, topic:2092"]
RTS
[/quote]

Run time system. Think of it as all the code that’s included in the resulting wasm module, but that _you_ didn’t write nor import via modules, that comes with the compiler and that is (roughly) the same for _all_ Motoko canisters. It contains, among other things, the garbage collector.

-------------------------

claudio | 2021-08-15 21:01:29 UTC | #8

RTS is short for Run Time System and typically refers to infrastructure supporting program execution such as garbage collection, serialisation and low-level system calls.

-------------------------

cyberowl | 2022-01-30 05:05:04 UTC | #9

Are these those refs: https://github.com/dfinity/motoko/blob/master/src/mo_values/prim.ml#L189

-------------------------

cyberowl | 2022-01-30 05:28:18 UTC | #10

[quote="alexeychirkov, post:4, topic:2092"]
rts_total_allocation
[/quote]

Did you ever figure out what `rts_total_allocation` is? I see it keeps growing in my logs

-------------------------

alexeychirkov | 2022-01-30 10:37:12 UTC | #11

Answer is [here](https://forum.dfinity.org/t/motoko-array-memory/5324/5?u=alexeychirkov)

-------------------------

