borovan | 2022-06-05 17:17:27 UTC | #1

As our dapp has gained in complexity (and canisters), we've had to create a deep directory structure.  

![image|210x249](upload://ueR7Pe0kom3F3fveyO6rTCKYg1t.png)

and this is turning into a game of count the slashes and dots

![image|449x161](upload://uTcCO8IOt5ydUUtgEhmUBWszKwv.png)

is there any way we can import same-project Motoko files using absolute paths as opposed to relative?  Something like golang, go.mod would be great.

Thanks!

-------------------------

skilesare | 2022-06-05 17:16:59 UTC | #2

The struggle is real.

-------------------------

borovan | 2022-06-05 17:18:46 UTC | #3

![image|377x500](upload://kmqQieVEjhW0QsRSrYbT3JwuT10.png)

-------------------------

paulyoung | 2022-06-05 18:04:43 UTC | #4

[quote="borovan, post:1, topic:13519"]
is there any way we can import same-project Motoko files using absolute paths as opposed to relative?
[/quote]

You can do something like this:

`moc --package base $(dfx cache show)/base --package shared shared -r main.mo`

Then:

```
import DB "mo:shared/DB";
import M "mo:shared/gen/Mutator";
```

-------------------------

borovan | 2022-06-05 18:17:30 UTC | #5

Oh ok, so do you do that once, or do you add it to the compiler options when you do dfx build?  Does moc have a config file that it adds the packages to?

-------------------------

paulyoung | 2022-06-05 18:22:13 UTC | #6

You’d need to do something like this:

https://forum.dfinity.org/t/env-variables-for-motoko-builds/11640/10?u=paulyoung

I’m not aware of any config file.

-------------------------

paulyoung | 2022-06-05 18:23:02 UTC | #7

or maybe you can use Vessel to set up a local package.

-------------------------

paulyoung | 2022-06-05 18:28:01 UTC | #8

I think using the `packtool` field will mean you don’t need to change to a `custom` canister type.

Whether you’re using Vessel or not, it looks like you can add or edit the `packtool` field under `build` to return the directories you want to be loaded as packages.

The Vessel README gives this example:

```
...
"defaults": {
  "build": {
    "packtool": "vessel sources"
  }
}
...
```

You may or may not want to put this in `defaults` instead of in individual canisters depending on your setup.

-------------------------

borovan | 2022-06-05 18:29:06 UTC | #9

ok fantastic - gonna sleep on this and see if we can find something that works for us tomorrow.  Thanks again!

-------------------------

paulyoung | 2022-06-05 18:32:14 UTC | #10

Based on this:

https://github.com/dfinity/vessel/blob/13dd83fca5eddf48d63abc7a07cffa4fd44e4f6e/src/bin/vessel.rs#L102-L113

I think something like this will work:

`"packtool": "echo \"--package base $(dfx cache show)/base --package shared shared\""`

-------------------------

paulyoung | 2022-06-05 18:38:30 UTC | #11

If you’re already using Vessel you’d still need to use `vessel sources` and either add a new package to your `vessel.dhall` file or somehow manually add `--package shared shared`.

This might work:

`"packtool": "vessel sources && echo \"--package shared shared\""`

-------------------------

paulyoung | 2022-06-05 18:44:15 UTC | #12

The Vessel README explains how to add a local package to your package set:

https://github.com/dfinity/vessel#how-do-i-add-a-local-package-to-my-package-set

> How do I add a local package to my package set?
>
> Make sure your local package is a git repository, then add an entry like so to your additions in the `package-set.dhall` file:
>
> ```
> let additions = [
>    { name = "mypackage"
>    , repo = "file:///home/path/to/mypackage"
>    , version = "v1.0.0"
>    , dependencies = ["base"]
>    }
> ]
> ```
>
> Now you can depend on this package by adding `mypackage` to your `vessel.dhall` file.

-------------------------

diegop | 2022-06-06 03:30:47 UTC | #14

For visibility: removed a comment from @808mafia which was off topic and generally spammed

-------------------------

borovan | 2022-06-07 06:58:02 UTC | #15

Yeah the vessel solution isn't ideal as we have a lot of generated files and tend to move things around.  Committing the local repository and then pulling it on each change would fix it but is a bit unwieldy.

We're working on a solution, will let you know what we end up doing.  Would love it eventually if you could include local files with an absolute path but know its not very important in the whole scheme of things.

-------------------------

paulyoung | 2022-06-07 06:59:25 UTC | #16

[quote="paulyoung, post:10, topic:13519"]
I think something like this will work:

`"packtool": "echo \"--package base $(dfx cache show)/base --package shared shared\""`
[/quote]

Something like this is probably the simplest thing to do then.

-------------------------

