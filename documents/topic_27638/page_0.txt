LightningLad91 | 2024-02-16 21:26:08 UTC | #1

We are a few years into the Internet Computer's life and Motoko's base library still has a warning for ExperimentalCycles. 

https://internetcomputer.org/docs/current/motoko/main/base/ExperimentalCycles

Do I really need to be worried about this going away entirely or changing dramatically? I understand that DFINITY is working on a cycles ledger; but, this experimental library is all we've had for the longest time and I find it hard to believe this could be removed without breaking a bunch of apps.

I'm also concerned about losing the ability to simply send and receive cycles between canisters. I'd really hate to have to send an async request to and from a ledger like we do to transfer ICP.

-------------------------

claudio | 2024-02-19 08:57:19 UTC | #2

We'd like to deprecate it eventually but offer a better alternative for sending cycles with calls.

We've actually been discussing this internally quite recently.

-------------------------

LightningLad91 | 2024-02-19 09:29:30 UTC | #3

Thank you for addressing my question @claudio. I’m still confused on the difference between deprecating something and it disappearing entirely.

In my case, I’m building a dapp that will archive all of its transactions in ICRC3 blocks. These blocks will be stored in blackholed canisters to prevent tampering. I’ve developed a Motoko library that allows the parent canister to monitor and distribute cycles to its children. Both the parent canister and the children will rely on the ExperimentalCycles lib. 

Do I need to be worried about my archive canisters breaking because the underlying replica no longer supports the methods that make ExperimentalCycles work?

Edit: For context, this is the warning that causes me anxiety. I could be overthinking it, but the fact that it refers to a “low-level API” disappearing is what has me worried about my immutable canisters.

![IMG_0187|690x150](upload://jQ4pWb322KlgrLTtcjrXE1agBtb.jpeg)

-------------------------

claudio | 2024-02-19 18:28:23 UTC | #4

As far as I know, there's no plans to remove the ability to send cycles with canister calls in the protocol. All we might change is how we surface this in the Motoko language.
```
Cycles.add(1000);
receiver.send();
```
might become (just a sketch}
```
receiver.send() with [#cycles 1000];
```
coupling the cycle addition more closely with the call instead of using a side-effect some distance before the call.

-------------------------

LightningLad91 | 2024-02-19 11:46:56 UTC | #5

[quote="claudio, post:4, topic:27638"]
As far as I know, there’s no plans to remove the ability to send cycles with canister calls in the protocol. All we might change is how we surface this in the Motoko language.
[/quote]

That is a relief, thank you.


[quote="claudio, post:4, topic:27638"]
might become (just a sketch}

```
receiver.send() with [#cyles 1000];
```
[/quote]

This actually looks really convenient and coupling cycles addition to the call like this seems safer. 

Is it your hope that you can do something similar for accepting cycles and checking the canister’s balance as well? It seems like this would remove the need for a separate library altogether.

-------------------------

PanIndustrial | 2024-02-19 12:45:43 UTC | #6

If you wanted to merge in your cycle monitoring and make suggestions on new init args into https://github.com/PanIndustrial-Org/icrc3.mo we'd be very excited to take the pull request.

-------------------------

claudio | 2024-02-19 18:30:35 UTC | #7

I'm less worried about receiving and checking balance, so a library is ok, but it would indeed be safer to lockdown cycle transfer...

-------------------------

