dieter.sommer | 2024-04-12 10:28:36 UTC | #1

The NFT standards ICRC-7 and ICRC-37 are now considered ready by the WG for an NNS vote. ICRC-7 is the base NFT standard, while ICRC-37 defines the approve / transfer_from functionality.

[ICRC-7](https://github.com/dfinity/ICRC/blob/icrc_7_and_37/ICRCs/ICRC-7/ICRC-7.md)
[ICRC-37](https://github.com/dfinity/ICRC/blob/icrc_7_and_37/ICRCs/ICRC-37/ICRC-37.md)

Before initiating the vote, we would like to give the community and WG members the opportunity to have a final look at the proposal.

-------------------------

Mico | 2024-04-12 14:30:47 UTC | #2

This seems very exciting. I am not very technical but from what I am grasping is that this will allow you to be able to see transfers of nfts as well as do batch tx of nfts such as transfers and listings. 

If I am wrong I am sorry haha. But thank everyone who worked hard to get this done. Super exciting for ICP nfts moving forward.

-------------------------

hodlmes | 2024-04-13 07:23:34 UTC | #3

Long awaited indeed! Glad the migration from EXT is covered, at least partially. 

Quick question: Can ICRC-3 handle NFT transaction data as it does with fungible tokens, or do we need another standard? I ask because, without a unified standard, each new project tends to reinvent the wheel, bringing its own bugs and nuances. This has been a problem for memecoins, which can't be added to explorers like 221bravo or nftgeek due to their unique, often buggy transaction storage methods.

-------------------------

sea-snake | 2024-04-13 08:56:31 UTC | #4

ICRC-3 can handle it, both ICRC-7 and its extension ICRC-37 describe the ICRC-3 blocks that must be implemented for e.g. a transfer or transfer from.

-------------------------

dieter.sommer | 2024-04-15 06:28:05 UTC | #5

As @sea-snake mentioned above, ICRC-3 can handle NFT transactions. To give you some more information: ICRC-3 is a rather generic standard for keeping any kind of log in the form of a chain of blocks. It defines the basic structure of an ICRC-3 block. A standard that wants to be use ICRC-3 can, like ICRC-7 and ICRC-37 did, define its own ICRC-3 extension schema that defines the concrete shape of the blocks (i.e., the fields to be stored and the structure) for the kinds of transactions to be handled with ICRC-3. For example, ICRC-3 can be used to store the history of actions that happened in any canister to keep an untamperable log of things.

-------------------------

sudoshreyansh | 2024-04-16 14:44:28 UTC | #6

I have a couple of points:

- While the standard defines a metadata field `icrc7:atomic_batch_transfers` which is of bool type, it doesn't specify how to encode the bool and float type in the generic Value type. This makes it confusing to implement.

- The namespace idea for the metadata seems nice, but it might be scary to have each marketplace have their own namespace for any additional stuff.

-------------------------

dieter.sommer | 2024-04-16 15:49:41 UTC | #7

[quote="sudoshreyansh, post:6, topic:29618"]
While the standard defines a metadata field `icrc7:atomic_batch_transfers` which is of bool type, it doesn‚Äôt specify how to encode the bool and float type in the generic Value type. This makes it confusing to implement.
[/quote]

Good point! This specification does not fit well into ICRC-7 as it relates to the `Value` type and associated best practices / standards is useful for a much wider audience. Thus, we decided to defer this to best practices emerging in the ICRC-3 area. However, those are not there yet as you rightfully imply. We'll discuss this in the upcoming WG meeting.

[quote="sudoshreyansh, post:6, topic:29618"]
The namespace idea for the metadata seems nice, but it might be scary to have each marketplace have their own namespace for any additional stuff.
[/quote]

The idea here is to quickly come up with a standard that unifies the approach on how the core metadata related to marketplaces is handled. This is currently being actively discussed on Discord: https://discord.gg/NWd8D4FQCf

-------------------------

kayicp | 2024-04-24 04:32:13 UTC | #8

Sorry for the late comment as I've been implementing ICRC-3... but I'm satisfied with ICRC-7.

[quote="sudoshreyansh, post:6, topic:29618"]
While the standard defines a metadata field `icrc7:atomic_batch_transfers` which is of bool type, it doesn‚Äôt specify how to encode the bool and float type in the generic Value type. This makes it confusing to implement.
[/quote]
I think the WG agreed back then that batch transfers should always be atomic.

but regarding `Bool` value, cant we do it to be multiple optional types?
such as `1: Nat`, `"true": Text`, `[1]: Blob` to represent `true`..
and `0: Nat`, `"false": Text`, `[0]: Blob` (or anything that is not `true`) to represent `false`?
so the devs can implement like a utility function to check for boolean `Value` like this 
![image|684x214, 75%](upload://9dK4zvyH2GpyhdLpUzFMrkQ4ljN.png)

(i prefer to store it as Blob as u can make it to be only 1 byte)

-------------------------

dieter.sommer | 2024-04-24 06:26:33 UTC | #9

[quote="kayicp, post:8, topic:29618"]
I‚Äôve been implementing ICRC-3‚Ä¶ but I‚Äôm satisfied with ICRC-7.
[/quote]

Great to hear you are working on ICRC-3 and are happy with ICRC-7. :-)

[quote="kayicp, post:8, topic:29618"]
batch transfers should always be atomic.
[/quote]

Just as a note: Batch transfers are not atomic, i.e., each transfer in a batch is an individual transfer and can fail or succeed independently of other transfers.

[quote="kayicp, post:8, topic:29618"]
but regarding `Bool` value, cant we do it to be multiple optional types?
such as `1: Nat`, `"true": Text`, `[1]: Blob` to represent `true`‚Ä¶
and `0: Nat`, `"false": Text`, `[0]: Blob` (or anything that is not `true`) to represent `false`?
so the devs can implement like a utility function to check for boolean `Value` like this
[/quote]

Yes, this works, I think the main problem is that it would be great to have a standard or at least a best practice on how to encode types not native to `Value`. We should evolve some best practices or standards in the context of ICRC-3 for this purpose. What do you think!

-------------------------

kayicp | 2024-04-24 06:49:05 UTC | #10

[quote="dieter.sommer, post:9, topic:29618"]
Just as a note: Batch transfers are not atomic, i.e., each transfer in a batch is an individual transfer and can fail or succeed independently of other transfers.
[/quote]
Oh I see, thanks for the correction. I should re-read the ICRC-7 standard again.

[quote="dieter.sommer, post:9, topic:29618"]
We should evolve some best practices or standards in the context of ICRC-3 for this purpose.
[/quote]
Yes I think we should, as more devs will have this kind of issue later on.

-------------------------

kayicp | 2024-04-24 19:39:37 UTC | #11

after re-reading the draft, I'm happy with everything, but may I know why "from" on the Mint block schema and "to" on the Burn block schema are "MUST" instead of "MAY"? I'm asking because icrc1's Mint block schema dont have "from" and Burn block schema dont have "to".

also, on "37_appr" and "37_appr_coll", perhaps we can rename these to "37approve" and "37approve_coll" to appear standardized to the current "2approve", "37revoke" and "37revoke_coll". Sorry for this extremely late comment.

-------------------------

dieter.sommer | 2024-04-25 13:12:56 UTC | #12

[quote="kayicp, post:11, topic:29618"]
after re-reading the draft, I‚Äôm happy with everything
[/quote]

Excellent!

[quote="kayicp, post:11, topic:29618"]
but may I know why ‚Äúfrom‚Äù on the Mint block schema and ‚Äúto‚Äù on the Burn block schema are ‚ÄúMUST‚Äù instead of ‚ÄúMAY‚Äù? I‚Äôm asking because icrc1‚Äôs Mint block schema don't have ‚Äúfrom‚Äù and Burn block schema dont have ‚Äúto‚Äù.
[/quote]

The `from` in the mint schema in ICRC-7 has a *MAY*, and the `to` in the burn schema has a *MAY* as well. Therefore it is aligned with ICRC-1 unless I overlooked something.
Did you look at the right version? The current version is in the branch *icrc_7_and_37* in the following link: https://github.com/dfinity/ICRC/blob/icrc_7_and_37/ICRCs/ICRC-7/ICRC-7.md#mint-block-schema

[ICRC-3 on branch *main*](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-3/README.md)

-------------------------

dieter.sommer | 2024-04-25 13:17:50 UTC | #13

[quote="kayicp, post:11, topic:29618"]
also, on ‚Äú37_appr‚Äù and ‚Äú37_appr_coll‚Äù, perhaps we can rename these to ‚Äú37approve‚Äù and ‚Äú37approve_coll‚Äù to appear standardized to the current ‚Äú2approve‚Äù, ‚Äú37revoke‚Äù and ‚Äú37revoke_coll‚Äù.
[/quote]

That's a good point in the light of consistency.

For reference, [here](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-3/README.md#approve-block-schema) is the ICRC-3 spec for `icrc2_approve`.

I am fine with changing this in order to make it more consistent, however, we need the main contributors to agree to this.

@kayicp, @sea-snake, @skilesare, @benji

Please let me know as soon as possible whether you agree, than I change it. The draft is close to be submitted to the NNS.

-------------------------

kayicp | 2024-04-25 15:45:32 UTC | #14

[quote="dieter.sommer, post:12, topic:29618"]
unless I overlooked something.
[/quote]
No, you're the right one. I'm sorry, my mistake. :face_with_spiral_eyes:

-------------------------

sea-snake | 2024-04-25 16:24:55 UTC | #15

Agree to the chance, I'm all for consistency. Thanks @kayicp for catching this!

-------------------------

sea-snake | 2024-04-25 16:36:02 UTC | #16

@kayicp Uhm I think this has already been fixed in the branch @dieter.sommer mentioned.

Though apparently even I was looking at the wrong branch üòÖ

-------------------------

dieter.sommer | 2024-05-04 15:08:18 UTC | #17

The ICRC-7 proposal on a "Minimal Non-Fungible Token (NFT) Standard" has been submitted to the NNS yesterday.
NNS proposal: https://dashboard.internetcomputer.org/proposal/129626

Please vote!

ICRC-37 will follow early in the coming week.

-------------------------

Roman | 2024-05-04 16:31:37 UTC | #18

That's wonderful ! Again, thanks and congratulations to you all !

-------------------------

skilesare | 2024-05-05 12:51:46 UTC | #20

Cat, we never would have made it without you constant gritching to get us across the line. üòÄ

In all seriousness, we likely could have worked faster and we are exploring new and better ways to accelerate community collaboration.

The thing that has worked the best has been people jumping and doing the work. It is much easier to critique a solid effort at something than to attempt to all sit around a table and dream it up together.

-------------------------

dieter.sommer | 2024-05-07 10:44:20 UTC | #22

The ICRC-37 proposal has been submitted to the NNS yesterday.
NNS proposal: https://dashboard.internetcomputer.org/proposal/129640

Please vote!

-------------------------

