bitbruce | 2022-03-03 13:28:35 UTC | #1

There are multiple different implementations of the Dfinity token (Fungible Token and Non-Fungible Token) standards and no consensus can be formed. This will be detrimental to the development of Defi on IC network.

IC Canister's methods are not allowed polymorphism, which creates a barrier to token compatibility.

Is it possible to form a specification for different standards to be compatible with each other and achieve compatibility without intrusion?

I'm thinking about an idea and working on some examples.

# Idea:

main interface implements a standard scheme using the method names of ERC20. The optional compatibility interface implements self/other standard schemes with the method names plus the standard name prefix `xxx_`.

### standard method

Returns the list of supported token standards, in lowercase letters, separated by "`; `". The format is similar to "`main standard; compatible standard 1; compatible standard 2`". E.g. "`dip20; drc20`", "`dft`".

``` candid

standard: () -> (text) query;

```

### Main interface

Use the method names of ERC20 to define the main interface.

``` candid
For example:

name: () -> (text) query;
symbol: () -> (text) query;
decimals: () -> (nat8) query;
totalSupply: () -> (nat) query;
balanceOf: (...) -> (...) query;
transfer: (...) -> (...);
transferFrom: (...) -> (...);
approve: (...) -> (...);
allowance: (...) -> (...);
...

```

### Optional compatibility interface

Use the method names prefixed with standard name "xxx_" to define the compatibility interfaces.

``` candid
For example 1:

dip20_name: () -> (text) query;
dip20_symbol: () -> (text) query;
dip20_decimals: () -> (nat8) query;
dip20_totalSupply: () -> (nat) query;
dip20_balanceOf: (...) -> (...) query;
dip20_transfer: (...) -> (...);
dip20_transferFrom: (...) -> (...);
dip20_approve: (...) -> (...);
dip20_allowance: (...) -> (...);
...

```

``` candid
For example 2:

dft_name: () -> (text) query;
dft_symbol: () -> (text) query;
dft_decimals: () -> (nat8) query;
dft_totalSupply: () -> (nat) query;
dft_balanceOf: (...) -> (...) query;
dft_transfer: (...) -> (...);
dft_transferFrom: (...) -> (...);
dft_approve: (...) -> (...);
dft_allowance: (...) -> (...);
...

```

## Single-standard compatibility example

``` candid
standard: () -> (text) query; // “drc20”

// drc20
name: () -> (text) query;
symbol: () -> (text) query;
decimals: () -> (nat8) query;
totalSupply: () -> (nat) query;
balanceOf: (...) -> (...) query;
transfer: (...) -> (...);
transferFrom: (...) -> (...);
approve: (...) -> (...);
allowance: (...) -> (...);
...

// drc20 (Compatibility aliases)
drc20_name: () -> (text) query;
drc20_symbol: () -> (text) query;
drc20_decimals: () -> (nat8) query;
drc20_totalSupply: () -> (nat) query;
drc20_balanceOf: (...) -> (...) query;
drc20_transfer: (...) -> (...);
drc20_transferFrom: (...) -> (...);
drc20_approve: (...) -> (...);
drc20_allowance: (...) -> (...);
...

```

## Multi-standard compatibility example

``` candid
standard: () -> (text) query; // “dft; drc20”

// dft
name: () -> (text) query;
symbol: () -> (text) query;
decimals: () -> (nat8) query;
totalSupply: () -> (nat) query;
balanceOf: (...) -> (...) query;
transfer: (...) -> (...);
transferFrom: (...) -> (...);
approve: (...) -> (...);
allowance: (...) -> (...);
...

// drc20
drc20_name: () -> (text) query;
drc20_symbol: () -> (text) query;
drc20_decimals: () -> (nat8) query;
drc20_totalSupply: () -> (nat) query;
drc20_balanceOf: (...) -> (...) query;
drc20_transfer: (...) -> (...);
drc20_transferFrom: (...) -> (...);
drc20_approve: (...) -> (...);
drc20_allowance: (...) -> (...);
...

```

## Standard List.  
(Welcome to add new token standards!)

### Fungible Token

- dip20: https://github.com/Psychedelic/DIP20
- dft: https://github.com/Deland-Labs/dfinity-fungible-token-standard
- drc20: https://github.com/iclighthouse/DRC_standards/tree/main/DRC20
- ext: https://github.com/Toniq-Labs/extendable-token
- motokotoken: https://github.com/enzoh/motoko-token
- is20: https://github.com/infinity-swap/IS20

### Non-Fungible Token

- departureLabsnft: https://github.com/DepartureLabsIC/non-fungible-token
- ext: https://github.com/Toniq-Labs/extendable-token
- dip721: https://github.com/SuddenlyHazel/DIP721
- c3nft: https://github.com/C3-Protocol/NFT-standards

-------------------------

paulyoung | 2022-03-02 20:53:04 UTC | #2

This sounds similar to:

https://forum.dfinity.org/t/proposal-to-adopt-the-namespaced-interfaces-pattern-as-a-best-practice-for-ic-developers/9262?u=paulyoung

I think the suggestion to use a variant still has a lot of merit.

https://forum.dfinity.org/t/proposal-to-adopt-the-namespaced-interfaces-pattern-as-a-best-practice-for-ic-developers/9262/9?u=paulyoung

-------------------------

skilesare | 2022-03-02 21:04:02 UTC | #3

I backed off pushing the proposal during the ICDevs neuron stuff, but I'm glad to pick up the torch again.  I think it makes sense as a protocol and we've even had some discussions with the Foundation about the ICP ledger so maybe we can rope that in so that we can all interoperate like one big happy family!

-------------------------

bitbruce | 2022-03-03 00:22:59 UTC | #4

[quote="Proposal to Adopt the Namespaced Interfaces Pattern as a Best Practice for IC Developers, post:9, topic:9262"]
Maybe I’m missing something, but can’t we use variant type instead of namespaced-function names? In the transfer example, the proxy function can take variant { ext_nft: TransferRequest; departure_nft: (Principal, Text) }, then we can pattern match on the variant tag to call the corresponding service?
[/quote]

I hadn't noticed that topic before, this is to address the same issue.

[quote="paulyoung, post:2, topic:11246"]
I think the suggestion to use a variant still has a lot of merit.
[/quote]

Using variant-type is not a good solution, because variants are considered different types after extending members and are not forward compatible.

It looks like it will become difficult to drive this at the ic system level.

So I'm thinking about a non-forcing convention that is non-intrusive to the original code and maintains forward compatibility.

-------------------------

chenyan | 2022-03-03 01:20:09 UTC | #5

[quote="bitbruce, post:4, topic:11246"]
Using variant-type is not a good solution, because variants are considered different types after extending members and are not forward compatible.
[/quote]

We are updating the spec to make variant extension possible: https://github.com/dfinity/candid/pull/311

-------------------------

bitbruce | 2022-03-08 08:20:21 UTC | #6

Example:
https://github.com/iclighthouse/DRC_standards/tree/main/DRC20/examples/dip20-drc20

-------------------------

