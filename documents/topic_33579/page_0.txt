borovan | 2024-07-24 20:52:42 UTC | #1

I'd like to automate the addition of performance_counter to every endpoint in our application (probably using some sort of macro).  It doesn't have to be called every single time, we could sample it 1 in 100 if it caused additional overhead.

Is this a good idea, or is there a better way?  Thanks!

Using defer crate - https://crates.io/crates/defer

![image|690x427](upload://7QoyXnZsQOIVA6MMW4zYJuUk0Y.png)

![image|690x61](upload://wmefPxBuvM0aA699qDsHFMvHsNM.png)

-------------------------

jennifertran | 2024-07-24 23:55:08 UTC | #2

What is your goal of getting the performance counter info per update or query call?

-------------------------

borovan | 2024-07-25 08:11:45 UTC | #3

Just so we can have a really lightweight way of monitoring every call, a set and forget macro that gives us profiling information for every endpoint.

I guess we'd only be able to save it for the update calls however, but that's not a huge deal as they'll be the ones doing the work.

I could store it in a local HashMap with the endpoint name and the average cycles per call, so if anything was creating a spike in cycles burned we'd be able to find it early.

-------------------------

borovan | 2024-07-25 13:12:14 UTC | #4

![image|690x282](upload://8eiNo5FKUMz003k3UcMfvCXUUZc.png)

It works. If anybody's interested in a system like this I'm working on open sourcing it.

-------------------------

jennifertran | 2024-07-26 04:38:47 UTC | #5

The use case makes sense. Have you thought about using [Canister Geek](https://github.com/usergeek/canistergeek_ic_rust) as well?

-------------------------

lastmjs | 2024-08-02 01:40:50 UTC | #6

I really wish every call had the instructions and cycles used simply returned with the request. This seems very basic functionality, similar to how Ethereum transactions will have gas used attached to the metadata (or something like that IIRC).

-------------------------

