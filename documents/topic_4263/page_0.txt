hackape | 2021-05-24 09:18:14 UTC | #1

For some low level task, one would need to manipulate the underlying bytes. Do we have JS ArrayBuffer/TypedArray equivalent in motoko?

Take for example, currently I don't find a way to hash a big Nat. `Hash.hash` takes Nat, but it really just works on Nat32. I want to turn Nat to multiple Nat32 and hash them.

cc @Ori

-------------------------

stephenandrews | 2021-05-24 10:19:33 UTC | #2

You can use [Nat8] or Blob. This is how some of the hashing functions work current (SHA256 and SHA224)

-------------------------

hackape | 2021-05-24 10:21:25 UTC | #3

Could you explain how to convert an unbounded Nat into a [Nat8] or Blob?

-------------------------

hackape | 2021-05-24 10:25:06 UTC | #4

Theoretically I can loop and mod `0xff` like crazy to chunk a Nat down to pieces. But obviously I'd like to avoid that route, that's why I ask this question in the first place.

I wish to access the underlying bytes of a Nat, and simply map each byte into a Nat8.

-------------------------

stephenandrews | 2021-05-24 15:43:09 UTC | #5

Yeah that was my answer, chunk it down using bitwise commands and mod 255. This is essentially how it will work in future (e.g. someone will make an ArrayBuffer library that just uses [Nat8] and has functions for each of these). Currently doesn't exist in Motoko (publicly) but it's not too hard to create one.

-------------------------

hackape | 2021-05-24 10:33:36 UTC | #6

Oh, sad to learn that.

[quote="stephenandrews, post:5, topic:4263"]
doesnâ€™t exist in Motoko (publicly)
[/quote]

Does it exit privately? :sweat_smile: Like somewhere in "mo:prim" ?

-------------------------

stephenandrews | 2021-05-24 10:38:51 UTC | #7

I know there are some motoko libs out there that aren't public yet from community devs and most likely dfinity devs too. It may be within mo:pirm haha - although I think dfinity don't want people to rely on that going forward.

There are dev grants available, could be an idea for someone to apply for funding to build out additional types link ArrayBuffer etc (with corresponding functions like fromNat, fromText etc).

-------------------------

paulyoung | 2021-05-24 11:44:21 UTC | #8

How about using a `Buffer`?

https://github.com/dfinity/motoko-base/blob/master/src/Buffer.mo

-------------------------

claudio | 2021-05-24 14:59:55 UTC | #9

I don't think we have anything better in prim and would discourage anyone from relying on functionality exposed via prim.

For now, you'll need to do the arithmetic yourself, I'm afraid. Sorry about that.

-------------------------

hackape | 2021-05-25 02:57:28 UTC | #10

Might I ask, what does the byte encoding of a Nat looks like? Sorry I couldn't find corresponding ref resource :sweat_smile:

-------------------------

claudio | 2021-05-25 10:53:18 UTC | #11

Currently Nat and Int are implemented using wrappers around LibTomMath (https://www.libtom.net/) but that's an implementation detail that could change. There is no way to access the raw representation from Motoko (by design). That doesn't mean we couldn't provide some way to iterate over the raw bytes in future though, if desired.

-------------------------

