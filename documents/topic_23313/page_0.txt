dfx-json | 2023-11-01 00:39:48 UTC | #1

Hi everyone. If you attended today's Global R&D, then you heard that DFINITY is working on a managed Ethereum RPC canister as a service to help you build Ethereum integrations into your dapps.

We are still working out the details of the API and would love to get your feedback. Please let us know what you would like this canister to do if it isn't covered by the current incarnation of the API.

## Methods

`request`
this will send a JSON RPC request including your payload to an Ethereum node through a provider, authenticated by an API key, and will fully decode the response so that it is useful to you within the context of a canister.

We had to write a lot of code just to decode responses in our Ethereum starter project, so we think this will be a major value add.

One thing to note is that you will need to attach cycles to the call in order to use this method. if you donâ€™t attach any cycles, or donâ€™t attach enough cycles, an error will be returned that tells you how many cycles you need to send.

`verify_message` 
This refers to [Ethereum signed message verification](https://programtheblockchain.com/posts/2018/02/17/signing-and-verifying-messages-in-ethereum/). We found this method useful in our ethereum starter project, and we would like to extend it to this canister as well.

Let's discuss below. Thanks everyone.

-------------------------

let4be | 2023-09-27 19:32:38 UTC | #2

Does calling this canister instead of directly calling some eth provider via a HTTPS outcall introduce extra latency?
is it gonna be a query or an update call?

High level overview of how it's implemented inside would be interesting as well

-------------------------

Severin | 2023-09-28 09:17:01 UTC | #3

[quote="let4be, post:2, topic:23313"]
Does calling this canister instead of directly calling some eth provider via a HTTPS outcall introduce extra latency?
[/quote]

Yes, if you do everything in your own canister you can save one call+response at minimum, which would be ~2 seconds.

[quote="let4be, post:2, topic:23313"]
is it gonna be a query or an update call?
[/quote]

Query calls don't have all the required capabilities. It will be an update call

-------------------------

benji | 2023-09-28 12:45:22 UTC | #4

Any plans on adding support for getting events?

-------------------------

skilesare | 2023-09-28 15:14:52 UTC | #5

[quote="dfx-json, post:1, topic:23313"]
e had to write a lot of code just to decode responses in our Ethereum starter project, so we think this will be a major value add.
[/quote]

One of the most powerful things will be able to get variables from specific contracts on different networks in a reliable way(with witness verification).  We just had someone finish up https://forum.dfinity.org/t/open-icdevs-org-bounty-16-evm-witness-library-8-000/11346, but a bit of infrastructure around it so that I can ask things like "give me the value of the owner value of token id "X" for contract "Z" on polygon would really explode what we are able to do.

edit: Put another way....we want to call pure functions and/or access variables on contracts on different networks and have the RPC canister do the witness validation and block height confirmation.

-------------------------

rvanasa | 2023-09-28 20:10:13 UTC | #6

100% agreed. The current scope of the Ethereum RPC canister is mostly based on requirements for the internal ckETH project, so I will make sure to represent this use case (calling smart contracts) in future design meetings. 

In case anyone wants to do this while the RPC canister is under development, the [IC ðŸ”— ETH starter project](https://github.com/dfinity/ic-eth-starter) includes some [example code](https://github.com/dfinity/ic-eth-starter/blob/main/canisters/ic_eth/src/lib.rs) for calling smart contract functions via [HTTPS outcalls](https://internetcomputer.org/https-outcalls). One way to increase reliability is to call multiple RPC services ([Cloudflare](https://www.cloudflare.com/application-services/products/web3/), [Alchemy](https://docs.alchemy.com/reference/ethereum-api-quickstart), [Gateway.fm](https://gateway.fm/public-rpc/), [etc.](https://chainlist.org/?testnets=true)) and check that the results are consistent with each other. 

For everyone reading this: now is your best chance to suggest or vote on a feature for the Ethereum RPC canister! We are actively using this forum topic to prioritize features with the most overall value to the community.

-------------------------

cryptoschindler | 2023-10-05 16:03:39 UTC | #7

[quote="benji, post:4, topic:23313, full:true"]
Any plans on adding support for getting events?
[/quote]

If not already available I second this.

-------------------------

rvanasa | 2023-10-05 16:44:01 UTC | #8

Yep! In addition to a general-purpose JSON endpoint, we're initially planning to include fully typed "Candid RPC" implementations for the following methods:

- [eth_getLogs](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getlogs)
- [eth_getBlockByNumber](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getblockbynumber)
- [eth_getTransactionReceipt](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactionreceipt)
- [eth_feeHistory](https://docs.alchemy.com/reference/eth-feehistory)
- [eth_sendRawTransaction](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)
- [eth_getTransactionCount](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_gettransactioncount)

We are also keeping an eye on this forum conversation to inform priorities for additional Candid endpoints ([eth_call](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_call), [eth_getBalance](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_getbalance), etc.).

-------------------------

skilesare | 2023-10-05 18:33:56 UTC | #9

Other of interest:

eth_getStorageAt -> Hugely important for canisters to be able to inspect the variable at a particular block and confirm that, for instance, a user changed a flag from true to false....or to inspect other storage that is not exposed by function calls but may be important.  Huge for interoperability.

eth_blockNumber -> Important for treating blocks like a nonce if you are checking storage above.  Canisters will need to be self disciplined to know how many blocks to wait for finality.

eth_getCode -> useful for checking the hash and contract deployed on the evm chain and making sure that your canister can compare the code to a whitelist for contracts you want to interoperate at.

eth_estimateGas -> Very important to make sure your canister has enough eth at its tecdsa address to do what it is trying to do.  If gas is two high you can delay with a timer.

-------------------------

Mercury | 2023-10-06 07:24:20 UTC | #10

[quote="dfx-json, post:1, topic:23313"]
through a provider, authenticated by an API key,
[/quote]

Which entity stores that API key? Pre-vetKD, one can't keep any secrets from nodes.

-------------------------

rvanasa | 2023-10-11 16:14:29 UTC | #11

You're correct that there isn't a way to hide secrets from nodes. The current plan (if I understand correctly) is to use public API keys with IP allowlists for the relevant subnet. If someone tries to use these API keys on the same IC subnet, that's totally fair game (although we might replace the keys from time to time). This is alright because most of the cost comes from [HTTPS outcall](https://internetcomputer.org/https-outcalls) consensus rather than the RPC request itself. 

In the future, we may switch to using something along the lines of [SEV-SNP](https://www.amd.com/en/developer/sev.html) or a [sovereign network](https://internetcomputer.org/capabilities/sovereign-network) to secure the API keys.

-------------------------

Mercury | 2023-10-12 04:33:16 UTC | #12

IMHO, leveraging TEE would be a big step forward for IC, as it would unlock many use cases for IC builders.

-------------------------

dfx-json | 2023-10-17 22:33:18 UTC | #13

Hi all. I'd like to give you a quick update on the Ethereum RPC Canister we're building. We have settled on the scope for the MVP. It is as follows:

## Typed Candid-RPC requests
With the primary goal of supporting the internal ckETH project, the canister initially offers first-class support (i.e. fully-typed interfaces) for the following 6 RPC methods:

* `eth_getLogs`: Retrieves the logs of a specified block or transaction based on filter criteria.
* `eth_getBlockByNumber`: Returns information about a block, given its block number.
* `eth_getTransactionReceipt`: Retrieves details about a submitted transaction.
* `eth_feeHistory`: Provides historical fee data to estimate gas prices for transactions.
* `eth_sendRawTransaction`: Sends a signed transaction to the Ethereum network.
* `eth_getTransactionCount`: Retrieves the number of transactions for a specified address.

We will continue to support more endpoints after the release of the MVP.

## General JSON-RPC requests
A general-purpose JSON-RPC endpoint is available for use cases requiring functionality beyond the supported Candid-RPC endpoints. This makes it possible to call a wider range of RPC services and EVM blockchains ([reference list](https://chainlist.org/)) and is used internally by both the [ckICP airdrop canister](https://github.com/benjizhai/ckicp-ethereum-contracts) and [ic-eth-starter](https://github.com/dfinity/ic-eth-starter) project.**

## Cycles cost estimation
This query method accepts the same arguments as `request` and returns the number of cycles to send with an equivalent call to the `request` method.

This is an optional convenience method inspired by `[provable_getPrice()](https://docs.provable.xyz/#ethereum-quick-start)` used in Solidity oracles.

An alternative approach is to send a large number of cycles and then use the `TooFewCycles` error message to send a follow-up request with an exact payment if necessary. The canister will return any unused cycles.

## RPC provider registry
Returns a list of available RPC providers in the current canister. 

The main purpose of this list is to indicate which combinations of chain id and service are available in the given environment, since the registered API keys may vary between the local replica and the mainnet canister. 

## Error handling
The canister uses the following representations for errors returned by RPC methods:
* `RpcError`: Error types which may occur when calling an RPC service.
* `HttpOutcallError`: An error encountered when performing an HTTPS outcall.
* `JsonRpcError`: An error returned in a valid JSON-RPC response.
* `ProviderError`: Errors which may occur when calling a provider registered in the canister.

## Signature verification
This query method provides equivalent functionality to [EIP-1271 signed message verification](https://ethereum.org/fr/developers/tutorials/eip-1271-smart-contract-signatures/), a cryptographic operation which is highly useful for a wide range of use cases involving cross-chain communication. For example, the [ic-eth-starter](https://github.com/dfinity/ic-eth-starter) example project uses this operation to confirm that an Internet Identity principal is associated with an Ethereum wallet.**

I will continue to keep you in the loop as we make progress on this service. If you think we're missing anything, let's discuss in this thread!

Thanks everyone.

-------------------------

lastmjs | 2023-10-20 04:11:13 UTC | #14

Is there a public repo where we can see the development of the canister?

-------------------------

dfx-json | 2023-10-20 15:37:25 UTC | #15

Yes! It's here: https://github.com/internet-computer-protocol/ic-eth-rpc

-------------------------

Maxfinity | 2023-11-16 21:46:54 UTC | #16

Yes, you can also use the EVM client which is part of Bitfinity's repo. Also, there is the IC EVM with https://bitfinity.network/

-------------------------

lastmjs | 2024-01-18 03:58:57 UTC | #17

What's the latest update? Can you share any information on timelines? The test canisters, what are the drawbacks to using them, especially in regards to API keys?

-------------------------

THLO | 2024-01-18 08:35:26 UTC | #18

[quote="lastmjs, post:17, topic:23313"]
Whatâ€™s the latest update?
[/quote]

The implementation of the EVM RPC canister is basically complete and the security review is currently ongoing. If there are no findings that incur a lot of additional effort, we should be able to announce a release plan fairly soon.

-------------------------

w3tester | 2024-01-22 11:21:00 UTC | #19

[quote="dfx-json, post:13, topic:23313"]
ckICP airdrop canister
[/quote]

Will you support the BASE L2 chain?

-------------------------

dfx-json | 2024-01-23 23:54:48 UTC | #20

[quote="w3tester, post:19, topic:23313"]
Will you support the BASE L2 chain?
[/quote]

L2s are currently supported in the JSON-RPC `request` method. You should be able to utilize that method to integrate with BASE, although you won't have the same luxury as with the Candid-RPC endpoints.

We will look at supporting custom Candid-RPC providers in the next iteration of the canister!

-------------------------

dfx-json | 2024-02-01 00:31:33 UTC | #21

Hello devs! I am pleased to announce that the EVM RPC Canister is now live. Thank you all for your feedback and comments while we developed this service.

The canister is still in beta, and while we put it through some real-world battle testing, it will remain managed by DFINITY. Once we are confident it can serve the needs of all of your dapps safely and performantly, we will publish a GA release and put it under NNS control.

You can find the latest beta release here on github: https://github.com/internet-computer-protocol/ic-eth-rpc/releases/tag/release-2024-01-31 

Big thank you to @THLO @gregory-demay @Manu and most of all @rvanasa for all of the hard work in getting this out. I don't think I can give enough credit to @rvanasa â€” he really put his heart and soul into this to give you all a fast and easy way to bridge your canisters to EVM smart contracts. Incredible work, Ryan!

As you begin your integrations, please let us know of any issues you come across. We will address feedback as quickly as possible, but will give priority to bugs and security issues.

Thank you all and hear from you soon!

-------------------------

lastmjs | 2024-02-01 20:16:46 UTC | #22

Hey I have a major question, does the canister rely on making on request to one Ethereum provider? Or does it make multiple requests and compare them? I don't see any way to control that so far in the Candid file.

@THLO @gregory-demay @Manu @rvanasa

If there is no capability to use multiple providers and have the responses compared, I would like to understand the reasoning and suggest that this be implemented so that applications can choose to increase the security of their Ethereum integration until we have a direct integration.

-------------------------

dfx-json | 2024-02-01 20:32:24 UTC | #23

[quote="lastmjs, post:22, topic:23313"]
Or does it make multiple requests and compare them
[/quote]

This is the case specifically for the candid RPC methods. The general RPC endpoint accepts a provider id as a param and will leave the normalization / canonicalization up to the developer.

Is there something that isn't obvious when you run one of the candid RPC methods? Perhaps @rvanasa can help out

-------------------------

rvanasa | 2024-02-01 23:07:15 UTC | #24

By default, the canister makes requests to 3 different JSON-RPC providers ([Cloudflare Web3](https://www.cloudflare.com/application-services/products/web3/), [Ankr](https://www.ankr.com/), and [Public Node](https://publicnode.com/)). We also support [Alchemy](https://www.alchemy.com/) and [BlockPI](https://blockpi.io/) out of the box. 

It's possible to select any number or combination of these RPC providers. Here is an example dfx command for making an RPC request with all 5 built-in Ethereum providers:

```bash
dfx canister call evm_rpc eth_getTransactionCount '(
  variant {EthMainnet = opt vec {
    variant {Cloudflare};
    variant {Ankr};
    variant {PublicNode};
    variant {Alchemy};
    variant {BlockPi};
  }},
  null,
  record {
    address = "0xdAC17F958D2ee523a2206206994597C13D831ec7";
    block = variant {Latest};
  }
)' --with-cycles 10000000000 --wallet=$(dfx identity get-wallet --network ic) --network ic
```

Note that using more RPC providers increases the chance of encountering HTTP outcall consensus errors, but this may be worth it for the added security depending on the situation. 

We are in the process of rolling out documentation and examples for how to use the canister; hopefully this is useful as a reference point for the time being.

-------------------------

lastmjs | 2024-02-02 19:39:42 UTC | #25

Okay I understand now, I didn't see the vec for providing the providers.

I am trying to get a basic example working, and `eth_getBlockByNumber` so far no matter what provider I try is returning "missing field `baseFeePerGas`:

```
{"Consistent":{"Err":{"HttpOutcallError":{"InvalidHttpJsonRpcResponse":{"status":200,"body":"{\"jsonrpc\":\"2.0\",\"id\":13,\"result\":{\"difficulty\":\"0x400000000\",\"extraData\":\"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\"gasLimit\":\"0x1388\",\"gasUsed\":\"0x0\",\"hash\":\"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\"logsBloom\":\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\",\"miner\":\"0x0000000000000000000000000000000000000000\",\"mixHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"nonce\":\"0x0000000000000042\",\"number\":\"0x0\",\"parentHash\":\"0x0000000000000000000000000000000000000000000000000000000000000000\",\"receiptsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"sha3Uncles\":\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\",\"size\":\"0x21c\",\"stateRoot\":\"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\",\"timestamp\":\"0x0\",\"totalDifficulty\":\"0x400000000\",\"transactions\":[],\"transactionsRoot\":\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\",\"uncles\":[]}}\n","parsingError":["missing field `baseFeePerGas` at line 1 column 1473"]}}}}}
```

-------------------------

rvanasa | 2024-02-02 19:54:20 UTC | #26

Is this in your local replica? I'm using the following dfx command to try and reproduce the issue:

```
dfx canister call evm_rpc eth_getBlockByNumber '(variant {EthMainnet}, null, variant {Latest})' --with-cycles 10000000000 --wallet=$(dfx identity get-wallet)
```

Does this command work for you? Feel free to send me a DM and we can try to narrow down what's happening.

-------------------------

rvanasa | 2024-02-09 17:16:09 UTC | #27

Hello everyone,

Be sure to check out @dfx-json's [announcement blog post](https://internetcomputer.org/blog/features/evm-rpc-canister-launch) which gives some great background for the EVM RPC canister along with detailed installation instructions. 

[Documentation](https://internetcomputer.org/docs/current/developer-docs/integrations/ethereum/evm-rpc/) is now available for those interested in the full capabilities of the EVM RPC canister. 

I also set up a [full-stack starter project](https://github.com/rvanasa/vite-react-motoko/tree/evm-rpc) as an example of how to call RPC methods from a Motoko dapp. Here is a [browser-based development environment](https://gitpod.io/#https://github.com/rvanasa/vite-react-motoko/tree/evm-rpc) so you can get started without downloading anything on your local machine. 

Let us know if you run into any issues or have any questions; your feedback is highly important during this beta testing phase. Feel free to [open an issue](https://github.com/internet-computer-protocol/evm-rpc-canister/issues) or even [contribute a PR](https://github.com/internet-computer-protocol/evm-rpc-canister/blob/main/.github/CONTRIBUTING.md) on the project's [GitHub repository](https://github.com/internet-computer-protocol/evm-rpc-canister).

Cheers!

-------------------------

rvanasa | 2024-02-12 20:57:00 UTC | #28

Hello again! We just updated the EVM RPC canister to make it significantly easier to use custom EVM chains based directly on community feedback. 

Here is an example command to get the latest block information on the [Arbitrum](https://arbitrum.io/) L2 network:

```bash
dfx canister call evm_rpc eth_getBlockByNumber '(variant {Custom = record {chainId = 42161; services = vec {record {url = "https://1rpc.io/arb"}}}}, null, variant {Latest})' --with-cycles 10000000000 --wallet=$(dfx identity get-wallet)
```

Equivalent in Motoko:

```motoko
let source = #Custom {
  chainId = 42161;
  services = [{ url = "https://1rpc.io/arb"; headers = null }];
};
Cycles.add(1000000000);
let result = await EvmRpc.eth_getBlockByNumber(source, null, #Latest);
```

A full list of chain ids and RPC services can be found on [ChainList.org](https://chainlist.org/?testnets=true).

We appreciate your involvement during this beta testing phase and encourage you to reach out with any questions or requests here or on the [GitHub repository](https://github.com/internet-computer-protocol/ic-eth-rpc).

-------------------------

w3tester | 2024-02-19 06:19:48 UTC | #29

Hello @rvanasa, are all the chains in the Chainlist website supported already?

-------------------------

domwoe | 2024-02-19 08:24:47 UTC | #30

I don't think so, as it depends on which chains the RPC providers support.

-------------------------

rvanasa | 2024-02-19 20:38:48 UTC | #31

+1. It's possible to use most networks listed on ChainList by specifying a custom provider ([relevant documentation](https://internetcomputer.org/docs/current/developer-docs/integrations/ethereum/evm-rpc/#specifying-rpc-services)), although support varies depending on the specific chain and RPC method.

-------------------------

dfisher | 2024-02-26 11:27:45 UTC | #32

Exciting developments. When will it be fully rolled out in production?

-------------------------

dfx-json | 2024-02-27 15:13:20 UTC | #33

We don't have a clear timeline for when it will be out of beta. Basically, we want to gather enough data to make sure the canister is a) safe for production use and b) polished enough from a DX standpoint for production use. The more feedback devs like you can give us, the sooner we can get it out of beta, so I encourage everyone to run it through the wringer.

-------------------------

lastmjs | 2024-03-01 18:02:38 UTC | #34

Okay I am confused again here. Why is `JsonRpcSource` different than `RpcSource` for `Request`? If I want to do a raw Json RPC Request, not one of the pre-provided methods like `eth_feeHistory`, why is the Source different? Does JsonRpcSource also do consensus among various providers?

I was trying to do `eth_getBalance` and realized there wasn't a candid method provided, so I switched to making a raw Request, put the Source is very different, that's where this confusion is coming from.

-------------------------

lastmjs | 2024-03-01 18:07:18 UTC | #35

Also what is the third parameter in the request args? `request : (JsonRpcSource, text, nat64) -> (RequestResult);`?

-------------------------

skilesare | 2024-03-02 14:49:36 UTC | #36

[quote="lastmjs, post:34, topic:23313"]
realized there wasnâ€™t a candid method provided, so I switched to making a raw Request, put the Source is very different, thatâ€™s where this confusion is coming from.
[/quote]

The Text is just JSON Text specifying what you want to do.  The nat64 is the expected return size that the function likely uses in the HTTP outcall to allocate space and charge for gas.

If you are getting a balance you can set it pretty low because the response is likely a just at 256bit Number. If you are calling a function that might have a bigger size you may need to make it bigger....I this setup to try to get the recommended gas fee but it turned out being pretty useless as most L2 just have this hard coded:

```
/// Retrieve the latest block on the Ethereum blockchain.
  public func getEthGas() : async Nat {

    nonce_api_id += 1;

    // Select RPC services
    let services = #EthMainnet(#Alchemy);

    // Call `eth_getBlockByNumber` RPC method (unused cycles will be refunded)
    Cycles.add(1000000000);
    let result = await EvmRpc.request(services, "{\"id\": " # Nat.toText(nonce_api_id) # ", \"jsonrpc\": \"2.0\", \"method\": \"eth_maxPriorityFeePerGas\"}", 1000);

    switch result {
      // Consistent, successful results
      case (#Ok(val)){
        let myJSON = JSON.parse(val);
        Debug.print(debug_show(myJSON));
        let ?(#Object(array)) = myJSON;
         Debug.print(debug_show(array));
        let ?myNode = Array.find<(Text, JSON.JSON)>(array, func (x) {
          switch x {
            case ("result", _){
              true;
            };
            case (_, _){
              false;
            };
          };
        });
         Debug.print(debug_show(myNode));

        let #String(myHex) = myNode.1;
        Debug.print(debug_show(myHex));
        let ?justbytes = Text.stripStart(myHex, #text("0x"));
         Debug.print(debug_show(justbytes));
        let #ok(myBytes) = HEX.decode(justbytes);
        Debug.print(debug_show(myBytes));
        let myNat = Conversion.bytesToNat(myBytes);
        Debug.print(debug_show("ethgas" # debug_show(myNat)));
        myNat;
      };
      // Consistent error message
      case (#Err(err)) 15;
    };
  };
```

-------------------------

lastmjs | 2024-03-02 15:49:32 UTC | #37

Thanks for the info on the last parameter, I'm mostly concerned with the first parameter, the RpcSource or JsonRpcSource, I don't understand why they're different and it's confusing.

I'm more and more coming at this from a teaching angle, these small things cause confusion when introducing developers new to the IC.

-------------------------

skilesare | 2024-03-02 20:17:44 UTC | #38

Hmm...must be an error in the docs. The did file has RpcSource as the first parameter. They are the same thing.

-------------------------

rvanasa | 2024-03-06 19:33:42 UTC | #39

[quote="lastmjs, post:34, topic:23313"]
Why is `JsonRpcSource` different than `RpcSource` for `Request`?
[/quote]

This indeed sounds like outdated documentation. In the latest EVM RPC version, `JsonRpcSource` is removed in favor of names which more clearly explain the distinction (`RpcService` and `RpcServices`). 

Since everything appears up-to-date in the [developer docs](https://internetcomputer.org/docs/current/developer-docs/multi-chain/ethereum/evm-rpc#specifying-rpc-services) and GitHub repository, definitely let me know if any other website still uses the original Candid interface so we can fix that.

[quote="lastmjs, post:35, topic:23313, full:true"]
Also what is the third parameter in the request args? `request : (JsonRpcSource, text, nat64) -> (RequestResult);`?
[/quote]

The `nat64` arg is the maximum number of bytes in the response, which is used to determine the cost of the RPC request. I opened a PR to clarify this in the Candid interface ([#181](https://github.com/internet-computer-protocol/evm-rpc-canister/pull/181)).

Hopefully this helps, and please feel free to mention any other usability issues. The goal is to smooth out these details before we lock the canister into the NNS.

-------------------------

rvanasa | 2024-03-26 22:40:22 UTC | #40

Hello everyone! 

We released a new version of the EVM RPC canister. Here are the most notable changes:

* `eth_sendRawTransaction` now returns the transaction hash on success.
* The Candid interface now includes more input / output parameter names for clarity.

https://github.com/internet-computer-protocol/evm-rpc-canister/releases/tag/release-2024-03-26

-------------------------

lastmjs | 2024-04-02 13:18:36 UTC | #41

I would like to share some rough thoughts after using the EVM RPC canister a bit and building examples in Azle (TypeScript/JavaScript CDK).

First off, I call into question the need for the EVM RPC canister if you have a library like Ethers.js, as long as the EVM RPC canister does not have a direct integration with Ethereum and simply relies on underlying RPC providers. I would have to double-check to be certain, but I remember reading while building my examples, which use Ethers.js, that Ethers.js has a provider that will send requests to mulitple RPC providers and essentially come to consensus on their results. If that's the case, isn't that exactly what the EVM RPC canister is doing? Then what benefit does the canister have if Ethers.js is fully available to the developer? Seems a much simpler and more standard experience to just use a library that already exists.

With that being said, perhaps not all languages available on ICP will have access to a nice library like Ethers.js. Even if that's the case, I call into question why the EVM RPC canister is using Candid as the main interface language for this functionality. It's quite complicated and confusing to use, and especially to teach to someone new to ICP. Wouldn't it be better to just create an HTTP canister that acts identically to the other RPC providers? Not only could canisters within ICP interact with it using an HTTP API (for example Azle canisters can use `fetch` and `icp://` and probably soon `https://` to do cross-canister calls), but also we could expose this API to the internet. Perhaps while it just proxies other providers it might not be such a good idea, but if we ever get a more direct integration this could possibly be the most secure and transparent Ethereum JSON RPC provider in existence.

In short...can we embrace HTTP for the EVM RPC canister? And do we even need the canister (assuming a non-direct integration) in the presence of libraries like Ethers.js?

-------------------------

lastmjs | 2024-04-02 13:20:16 UTC | #42

In shorter short: make the EVM RPC canister a true Ethereum JSON RPC API provider, just use HTTP.

-------------------------

rvanasa | 2024-04-02 16:25:49 UTC | #43

Hi @lastmjs,

I agree with everything you've stated above and made a similar case to use libraries in place of a canister earlier on in development. After looking deeply into this problem, our conclusion was that although libraries such as Ethers.js exist, we also wanted a solution that would work consistently across all CDKs without requiring callers to configure their own API keys. 

> I would have to double-check to be certain, but I remember reading while building my examples, which use Ethers.js, that Ethers.js has a provider that will send requests to mulitple RPC providers and essentially come to consensus on their results.

If I understand correctly, this refers to the [FallbackProvider](https://docs.ethers.org/v5/api/providers/other/#FallbackProvider) in Ethers.js. There are certainly situations where it would make sense to use this over the EVM RPC canister. 

The main reason to use the canister from a TypeScript project is the managed API keys. Default and free API keys often have an IP-based rate limit, which can become a problem if another project is running on the same subnet. In other words, Ethers.js would be ideal for those who are willing to pay for their own provider API keys. 

> With that being said, perhaps not all languages available on ICP will have access to a nice library like Ethers.js.

This is another big reason. To my knowledge, the [ethers-providers](https://docs.rs/ethers/latest/ethers/providers/index.html) Rust crate does not contain a way to check for agreement between providers. Motoko currently doesn't have anything equivalent to Ethers at all, so the goal is to have a language-agnostic, batteries-included default solution. That being said, there are plenty of situations where it makes sense to use a library, especially for larger-scale Ethereum integrations. 

> Wouldnâ€™t it be better to just create an HTTP canister that acts identically to the other RPC providers?

At first glance, this seems like a great solution. The reasoning for initially using a Candid interface is that we need to charge for HTTP outcalls. We could introduce ways to do this using our own API keys and prepayment, but this quickly becomes very complex compared to passing cycles with a canister call. However, I see your point and think that we could eventually offer this as an alternate way to make RPC requests. 

Hopefully this makes sense! Let me know if you'd like any further clarification.

-------------------------

lastmjs | 2024-04-02 18:12:25 UTC | #44

[quote="rvanasa, post:43, topic:23313"]
At first glance, this seems like a great solution. The reasoning for initially using a Candid interface is that we need to charge for HTTP outcalls. We could introduce ways to do this using our own API keys and prepayment, but this quickly becomes very complex compared to passing cycles with a canister call. However, I see your point and think that we could eventually offer this as an alternate way to make RPC requests.

Hopefully this makes sense! Let me know if youâ€™d like any further clarification.
[/quote]

I wonder if future ICRC improvements, such as pre-signed payments, or even ERC tokens with approve/transferFrom could allow some kind of nice payment integration in the future.

But I am also talking about exposing the HTTP interface to other canisters. Soon Azle canisters will be able to use fetch and `https://` URLs to talk directly to canisters that expose the http_request and http_request_update methods...it might be nice for the EVM RPC canister to expose these methods now, as cross-canister calls would still work with them.

-------------------------

rvanasa | 2024-04-02 22:45:48 UTC | #45

Makes sense! Doing this properly will require some time. I'll add the HTTP interface to the backlog so we can decide how to prioritize this.

-------------------------

lastmjs | 2024-04-03 13:21:01 UTC | #46

This would be awesome and probably the default way that we teach and document for Azle and eventually Kybra users

-------------------------

diegop | 2024-05-23 08:03:40 UTC | #47

update:

**its live!**

https://medium.com/dfinity/icp-ethereum-how-icps-evm-rpc-canister-connects-the-networks-b57909efecf6

-------------------------

w3tester | 2024-05-23 09:23:05 UTC | #48

Congratulations! :laughing: :laughing:

-------------------------

asjn3e | 2024-05-28 19:00:28 UTC | #49

Hey everyone, Just wanted to bring some thoughts i had in mind,
As far as i know EVM RPC canister relies on multiple RPC providers, which brings more security since its not dependent on a single RPC provider. However what if we could run nodes on a canister in order to get direct access to those EVM chains without being dependent on those RPC providers?
I was just thinking about it's feasibility, and i would like to know your thoughts on that

-------------------------

dfx-json | 2024-05-28 20:27:45 UTC | #50

This is how the bitcoin integration works, and it's how we would ultimately like ICP to integrate with Ethereum. However, it is quite challenging to pull off and will take resources and time. We decided to launch the EVM RPC canister to provide these capabilities sooner. In my opinion, it's a good tradeoff because it means devs can build integrations now while we (DFINITY) put in the work to achieve a secure, robust solution that accomplishes the long-term vision.

-------------------------

asjn3e | 2024-05-29 13:48:01 UTC | #51

That sounds nice, is there any timeline for the direct EVM integration?

-------------------------

dfx-json | 2024-05-29 20:55:21 UTC | #52

No timeline at the moment. But we will keep the community informed as things progress.

-------------------------

