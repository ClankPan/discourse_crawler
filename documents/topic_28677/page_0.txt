blockbolt | 2024-03-20 12:41:01 UTC | #1

Hello Community,

We have some questions regarding Motoko and Canister.

We are using Motoko to build a Canister that will be used to transfer ICRC-1 & 2 token from our canister to other principal id.

However, we are stuck at the transfer stage after approval. Here's the process:

First, we are using the ckBTC Canister ID `mxzaz-hqaaa-aaaar-qaada-cai`. We tried to approve ckBTC from the Canister and it worked fine.

We used this command for approval: 
`dfx canister call bza44-ciaaa-aaaan-qlvna-cai approve '(88)' --network ic`

> (variant { ok = 1_305_047 : nat })

So basically, we approve the Canister ID with the respective principal ID. You can see all the approved

[Our canister id: bza44-ciaaa-aaaan-qlvna-cai](https://dashboard.internetcomputer.org/bitcoin/account/bza44-ciaaa-aaaan-qlvna-cai)

After approval from the ckBTC ledger, we are transferring it to another wallet (principal ID). 

`dfx canister call bza44-ciaaa-aaaan-qlvna-cai transfer '(30, principal "3zm3c-qhy2j-5vvce-il3fu-il4ai-wf5fs-bwwjp-dbary-numis-kgxui-rae")' --network ic`

However, we are getting the following error:

> (variant { err = "Unknown transfer error" })

We want to send ICRC1, ICRC2, and ICP through our Canister freely. 

Can you please guide us on how we can solve this issue?

Thank you!

-------------------------

Severin | 2024-03-21 10:30:11 UTC | #2

Can you show what canister/principal makes what calls to the ckBTC canister? What you show here is how you call your own canister which doesn't really help to debug

-------------------------

karangoraniya | 2024-03-21 11:22:45 UTC | #4

Hello @Severin,

Thank you for your response.

We are using the following canister to interact with the ckBTC ledger:

> bza44-ciaaa-aaaan-qlvna-cai

ckBTC canister id

>mxzaz-hqaaa-aaaar-qaada-cai

Below is the code. Initially, we call this function in the canister to approve ckBTC:



```
public shared ({ caller = owner }) func approve(amount : Nat) : async Result.Result<Nat,Text> {
    let args = {
        amount;
        created_at_time = null;
        expected_allowance = null;
        expires_at = null;
        fee = null;
        from_subaccount = null;
        memo = null;
        spender = { owner; subaccount = null };
    };
    let result_Trans = await ckbtc_ledger.icrc2_approve(args);
};
```

Following approval, I attempt a transfer using this principal ID:

> uonvj-rdj5h-pft2p-pdo2w-qaolc-ojdyo-3btrc-o27pt-xg2lz-an2ga-qqe

Here is the transfer function:

```
public shared ({ caller }) func transfer(amount : Nat, to : Principal) : async Result.Result<Nat, Text> {
    let args = {
        to = { owner = to; subaccount = null };
        fee = null;
        spender_subaccount = null;
        from = { owner = caller; subaccount = null };
        memo = null;
        created_at_time = null;
        amount = amount;
    };
    let transf_Result = await ckbtc_ledger.icrc2_transfer_from(args);
};
```

However, during the transfer process, I'm encountering the following error:

`(variant { err = "Unknown transfer error" })`

-------------------------

Severin | 2024-03-21 12:41:26 UTC | #5

When you make the `icrc2_transfer_from` call the ckBTC canister sees `bza44-ciaaa-aaaan-qlvna-cai` as the caller. This is different from e.g. ETH where the TX creator gets forwarded between contract calls. If you want to do that transfer you can use a standard `icrc1_transfer`, no need to go through the approval process

The `approve` function seems to work. If I [check the approved amount](https://dashboard.internetcomputer.org/canister/mxzaz-hqaaa-aaaar-qaada-cai#icrc2_allowance) using the principals you posted above I get `(record { allowance = 100 : nat; expires_at = null })`

-------------------------

karangoraniya | 2024-03-22 02:05:17 UTC | #6

I've tried that approach initially, but it didn't work as expected. Instead of deducting ckBTC from the user's wallet, it was taking the amount from the canister.

Here's an example:

[Transfer amount](https://dashboard.internetcomputer.org/bitcoin/transaction/1313946)

I'm looking for a way to directly deduct from the user's wallet and transfer it to another account, but it needs to go through our canister because we have additional data that needs to be passed along with the transaction.

-------------------------

Severin | 2024-03-22 08:05:02 UTC | #7

If you want to spend the user's ckBTC then the user needs to call `icrc2_approve` directly, and not through your canister

-------------------------

karangoraniya | 2024-03-28 10:07:55 UTC | #8

I have also tried using the `icrc2_approve` function on the frontend side with the ckBTC ledger. However, I encountered an error while transferring the tokens. Here are the links to the repository and the live demo:

*  [Github](https://github.com/karangoraniya/icp-approve)
* [Live Link](https://icp-approve.vercel.app/)
* [Canister ID](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=bza44-ciaaa-aaaan-qlvna-cai)

There are two arguments, but it's still giving the 
`wrong number of message arguments' error`.

-------------------------

icnerd | 2024-03-29 23:26:31 UTC | #9

there is no `from` field in `ApproveArgs`
```
export interface ApproveArgs {
  fee: [] | [bigint];
  memo: [] | [Uint8Array | number[]];
  from_subaccount: [] | [Uint8Array | number[]];
  created_at_time: [] | [bigint];
  amount: bigint;
  expected_allowance: [] | [bigint];
  expires_at: [] | [bigint];
  spender: Account;
}
```
https://github.com/karangoraniya/icp-approve/blob/main/src/app/Transfer.tsx#L135

address of the caller is fetched automatically by the ledger canister.

when the `icrc2_approve` function is called,
it will perform the step to build the `from`
```rs
fn icrc2_approve(arg: ApproveArgs) -> ... {
  let caller = ic_cdk::caller();
  let from = Account{
    owner: caller,
   subaccount: arg.from_subaccount,
  };
  .....
```

-------------------------

karangoraniya | 2024-03-31 11:56:37 UTC | #10

The approve function is working fine. I am getting an error while transferring ckBTC.

I just approved it with this code

[ckBTC Dashboard](https://dashboard.internetcomputer.org/bitcoin/transaction/1332419)

-------------------------

karangoraniya | 2024-04-06 19:12:26 UTC | #11

@Severin, could you assist me with this issue ?

-------------------------

icnerd | 2024-04-07 06:20:16 UTC | #12

[quote="karangoraniya, post:10, topic:28677"]
The approve function is working fine. I am getting an error while transferring ckBTC
[/quote]

I don't think canisters are that lenient to accept non declared argument.

Also the txn fee for CKBTC is 10000.
you won't be able to transfer 100.

-------------------------

Severin | 2024-04-08 09:35:01 UTC | #13

What is the error you're currently stuck with? And can you link me to the lines where you make the transfer?

-------------------------

karangoraniya | 2024-04-08 10:09:14 UTC | #14

sure

here is the approve ckBTC code 

[Approve Code](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/app/Transfer.tsx#L110)

here is the send ckBTC code
[Transfer ckBTC code](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/app/Transfer.tsx#L159)

when i try to transfer the ckBTC i am getting error

Wrong number of message arguments.

-------------------------

Severin | 2024-04-08 11:18:00 UTC | #15

Approve: declaration [says](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/utils/ledger.did.js#L264) it takes an `ApproveArgs`, you create an `ApproveArgs` object [here](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/app/Transfer.tsx#L134-L150)

Transfer: declaration [says](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/utils/bolt.did.js#L7) it takes a `Nat` and a `Principal`, but you [construct an object](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/app/Transfer.tsx#L174-L181) with a `amount` and `from`. In Candid notation: expected: `(nat, principal)`, you supply `(record{amount: nat; to: principal})`. The tuple is supposed to be 2 elements, but you give only 1, therefore `Wrong number of arguments`

-------------------------

karangoraniya | 2024-04-08 13:01:32 UTC | #16

[quote="Severin, post:15, topic:28677"]
Transfer: declaration [says](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/utils/bolt.did.js#L7) it takes a `Nat` and a `Principal`, but you [construct an object](https://github.com/karangoraniya/icp-approve/blob/df3fe5339821c0c4953b724ac5c76fe873874279/src/app/Transfer.tsx#L174-L181) with a `amount` and `from`. In Candid notation: expected: `(nat, principal)`, you supply `(record{amount: nat; to: principal})`. The tuple is supposed to be 2 elements, but you give only 1, therefore `Wrong number of arguments`
[/quote]

Okay, got it 

I tried to trigger the transaction, but got error


 
**Unknown transfer error**

which i define in the code the same error i got while using direct in dfx UI

-------------------------

Severin | 2024-04-08 13:10:06 UTC | #17

For that I'll ask some other people since this sounds like some ckBTC internal problem...

-------------------------

blockbolt | 2024-04-10 12:20:35 UTC | #18

We would appreciate it if you could provide us with any updates regarding the issue we mentioned earlier. Our infrastructure and backend processes are in place; we just need a solution for the requested error. This will enable us to implement the proposed payment solution on ICP as soon as possible.

-------------------------

mariop | 2024-04-10 13:16:28 UTC | #19

[quote="karangoraniya, post:16, topic:28677"]
I tried to trigger the transaction, but got error

**Unknown transfer error**

which i define in the code the same error i got while using direct in dfx UI
[/quote]

The Ledger doesn't not return any **Unknown transfer error**. Where does this error come from?

-------------------------

karangoraniya | 2024-04-11 06:40:58 UTC | #20

Initially, I used the ckBTC approve function on the frontend to authorized my canister to access a specific amount of funds. Subsequently, I integrated the ckBTC canister into my contract for fund transfer purposes. I encountered an error from my canister during this process, and the relevant code is available in my GitHub repository [here](https://github.com/karangoraniya/ckBTC-icp/blob/118d038fab05d256b9982b07ffbc447eb7cf9825/src/fortune_cookie_backend/main.mo#L207).

To summarize, our objective is to enable our canister to transfer ckBTC and, simultaneously, send additional values as needed.

-------------------------

mariop | 2024-04-11 07:01:02 UTC | #21

[quote="karangoraniya, post:20, topic:28677"]
I encountered an error from my canister during this process, and the relevant code is available in my GitHub repository [here](https://github.com/karangoraniya/ckBTC-icp/blob/118d038fab05d256b9982b07ffbc447eb7cf9825/src/fortune_cookie_backend/main.mo#L207).
[/quote]

It's difficult to help without knowing the exact error. Can you change  https://github.com/karangoraniya/ckBTC-icp/blob/118d038fab05d256b9982b07ffbc447eb7cf9825/src/fortune_cookie_backend/main.mo#L232 to print out the error received from the Ledger and then try again? I'm sure that will tell us why it is not working.

-------------------------

cryptoschindler | 2024-04-11 08:47:36 UTC | #22

There is an example of how to use the approve / transfer_from flow with a canister [here](https://github.com/dfinity/examples/tree/master/motoko/token_transfer_from).

-------------------------

karangoraniya | 2024-04-11 09:26:40 UTC | #23

Okay, I have updated the code to print errors like this:

```
case (#Err(error)) {
                 let errorMessage = switch (error) {
                     case (#BadFee(_)) { "Bad fee" };
                     case (#InsufficientFunds(_)) { "Insufficient funds" };
                     case (#GenericError(_)) { "Generic error" };
                     case (#TemporarilyUnavailable) { "Temporarily unavailable" };
                     case (#BadBurn(_)) { "Bad burn" };
                     case (#Duplicate(_)) { "Duplicate" };
                     case (#CreatedInFuture(_)) { "Created in future" };
                     case (#TooOld) { "Too old" };
                 };
                 Debug.print(errorMessage);
                 return #err(errorMessage);
             };
```

When trying to execute this on the frontend, I received the following error:

```
Call was rejected: Request ID: 4af89411d85f9ae4fe2b44aa3626539433a66d02c36a631cef3b895075d5722f Reject code:  Reject text: Canister bza44-ciaaa-aaaan-qlvna-cai trapped explicitly: pattern failed```

[Canister Id](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/?id=bza44-ciaaa-aaaan-qlvna-cai)

-------------------------

karangoraniya | 2024-04-11 09:29:35 UTC | #24

This will deduct ICRC1 tokens from the canister, correct? Not from the user's wallet.

-------------------------

cryptoschindler | 2024-04-11 14:58:12 UTC | #25

No, the canister has been approved to transfer funds from the users wallet.

-------------------------

karangoraniya | 2024-05-04 12:01:31 UTC | #26

@cryptoschindler 

I encountered an error while deploying the canister using the code you provided.

```
expression of type
  Account__1 = {owner : Principal; subaccount : ?[Nat8]}
cannot produce expected type
  {owner : Principal; subaccount : ?Subaccount}
```

> so i change to ?Subaccount

[GIthub](https://github.com/dfinity/examples/blob/2270eac5be6e029302f6e377b6e18269c325cf88/motoko/token_transfer_from/src/token_transfer_from_backend/main.mo#L12)

-------------------------

cryptoschindler | 2024-05-06 07:32:49 UTC | #27

I provided a fix here, can you try again and report back?

https://github.com/dfinity/examples/pull/860

-------------------------

karangoraniya | 2024-05-06 09:30:35 UTC | #28

Thank you for the quick fix. I will try it and get back to you.

```dfx --version
zsh: command not found: dfx
```
Initially, everything was working fine. However, since I upgraded dfx, whenever I use the dfx command or anything related to it, I receive an error message.

-------------------------

cryptoschindler | 2024-05-06 09:43:13 UTC | #29

Maybe you need to install dfx via dfxvm? Did you follow the steps outlined [here?](https://internetcomputer.org/docs/current/developer-docs/getting-started/install/)

-------------------------

karangoraniya | 2024-05-06 09:55:25 UTC | #30

I followed these steps:

First, I executed the command:

```
sh -ci "$(curl -fsSL https://internetcomputer.org/install.sh)"
```

Then, I checked the installation by typing:

```
dfx --version
```

This worked until I closed the terminal. When I reopened the terminal and tried to check the version again with:

```
dfx --version
```

I received an error:

```
zsh: command not found: dfx
```

-------------------------

cryptoschindler | 2024-05-06 12:34:37 UTC | #31

Please follow the steps outlined in [Using the `dfx` version manager](https://internetcomputer.org/docs/current/developer-docs/getting-started/install/#using-the-dfx-version-manager)

-------------------------

karangoraniya | 2024-05-15 18:41:21 UTC | #32

Hello @cryptoschindler 

The dfx CLI error was solved; the problem was with the PATH. I have successfully deployed the above code, and the transfer one is working fine.

I have some questions related to that:

1. If someone approves, can anyone transfer from the canister? How can this be secured?

2. Is there any API so I can fetch the transactions of a particular canister?

I want to run my own canister code locally in the NNS. For running it locally, I have to follow this guide:

[GitHub](https://github.com/dfinity/nns-dapp/blob/main/HACKING.md)

-------------------------

h1teshtr1path1 | 2024-05-15 18:49:37 UTC | #33

1. For good understanding of approve and transfer_from functions : https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md
2. You can check get_transactions/get_blocks functions in ledger canister of any icrc-2 std token to fetch transactions.

-------------------------

karangoraniya | 2024-05-15 18:58:26 UTC | #34

Thanks for the links. I'll check them out!

-------------------------

karangoraniya | 2024-05-20 08:58:36 UTC | #35

@h1teshtr1path1, I've gone through the docs; it's the same as the ERC-20 approve method that I know. My concern is that if I give the approve to the canister, then it can take the approved amount (x) from that user's wallet. In the example canister, there is a transfer function that sends ICRC-1 tokens to any address once it gets the approval. I was referring to that. If you input your address and x amount and call the transfer function, it will transfer to that address. In the canister, when you call the transfer function, it will not pop up the wallet because it will use cycles for that. So, is there anything I can put, like an owner cap type, so that x address can withdraw this amount?

-------------------------

