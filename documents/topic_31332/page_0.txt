qwertytrewq | 2024-05-30 02:48:16 UTC | #1

I do a HTTPS request to my software (further "the proxy"):
```
public func checkedHttpRequest(checker: HttpRequestsChecker, request: Types.HttpRequestArgs, params: {timeout: Nat}): async* Types.HttpResponsePayload {
    announceHttpRequest(checker, request, params);
    await Types.ic.http_request(request);
};
```

Then the proxy checks by calling back to IC that the request has been recently "announced" (that `announceHttpRequest` has been called recently) by calling back as update:

```
public shared func checkRequest(hash: Blob): async () {
    if (not Http.checkHttpRequest(requestsChecker, hash)) {
        Debug.trap("hacked HTTP request");
    }
};
```

I, apparently, have the following problem: the `checkRequest` call from the proxy happens before IC saves in the state that the call has been announced. So, proxy mistakenly assumes that it has been hacked.

But I don't understand how that can happen: After the request was announced (call of `announceHttpRequest`) it is placed `await`, that is `Types.ic.http_request` should behave like a separate update call. That is, `http_request` should happen only after the `announceHttpRequest` is fully finished (there is a consensus that the HTTP request has been announced). But the proxy, as I explained above, is not informed that it has been announced. Is it a bug?

Note that I tested it as `dfx start` (without additional arguments) inside a docker container on localhost.

-------------------------

qwertytrewq | 2024-05-29 20:03:04 UTC | #2

If it is a bug (and I think so, atomicity of operations is broken), should I create a minimal testing example (possibly, as a Docker container running IC and a server)?

-------------------------

skilesare | 2024-05-29 21:05:35 UTC | #3

[quote="qwertytrewq, post:1, topic:31332"]
`checkedHttpRequest`
[/quote]

This an async * type and you are not await* in your second function so it is a future and never  null? But maybe there are two checkHttpRequest?

-------------------------

qwertytrewq | 2024-05-30 02:16:06 UTC | #5

[quote="skilesare, post:3, topic:31332"]
This an async * type and you are not await* in your second function so it is a future and never null? But maybe there are two checkHttpRequest?
[/quote]

I don't understand your question. There is just one `checkHttpRequest` and there is also `checkRequest` (see above).

Here is `checkHttpRequest`:
```
    public func checkHttpRequest(checker: HttpRequestsChecker, hash: Blob): Bool {
        BTree.has(checker.hashes, Blob.compare, hash);
    };
```

-------------------------

qwertytrewq | 2024-05-30 02:54:05 UTC | #6

Probably, this isn't a bug because "[There is no particular order guarantee for ingress messages submitted via the HTTPS interface.](https://internetcomputer.org/docs/current/references/ic-interface-spec#ordering-guarantees)".

But this ordering would be useful. Probably we should add `Types.ic.http_request_sync` with the order guarantee?

-------------------------

qwertytrewq | 2024-05-30 06:00:39 UTC | #7

Oh, I am not sure that the problem (with order of operations) that I raised really exists. Maybe, it was my mis-testing.

-------------------------

qwertytrewq | 2024-06-09 22:27:02 UTC | #8

Apparently, there is no bug. I just tested it wrong. Sorry for a fake alarm.

-------------------------

