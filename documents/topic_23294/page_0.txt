0kenx | 2023-09-24 09:21:40 UTC | #1

Hi fam,

I'm writing a canister in Rust. I wonder what's the best way to do unit tests (not integration tests) using `cargo test`?

Currently anything involving `ic_cdk::api::{caller, id, time}` panics:
```panicked at 'msg_caller_size should only be called inside canisters.'```

I understand they can be tested in integration tests, but is there a way to unit test them?

-------------------------

Severin | 2023-09-25 07:20:55 UTC | #2

IMO the best way is to split canister interface and canister logic so you can test the logic without a canister interface. Have a look at how we do it for the asset canister: [interface](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/lib.rs) and [canister logic](https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/state_machine.rs)

Another option is to use use the [StateMachine](https://github.com/dfinity/test-state-machine-client) to run your canister on a replica with a Rust interface. I don't know of a public example of StateMachine tests off the top of my head :frowning_face:

-------------------------

0kenx | 2023-09-25 20:57:50 UTC | #3

I'm writing an on-chain governance framework that heavily relies on `caller` and `time`, I don't think it's possible to separate the logic for testing.

I will take a look at StateMachine though, it looks interesting.

-------------------------

Maxfinity | 2023-09-25 21:30:29 UTC | #4

you can use the Bitfinity sdk for this. https://github.com/bitfinity-network/canister-sdk/tree/main/ic-canister/tests

Or ic-state machine tests.

-------------------------

