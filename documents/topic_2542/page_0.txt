diegop | 2021-04-20 22:25:14 UTC | #1

Hello IC devs!

I want to talk to you all about a very important canister within the Internet Computer — **"The Ledger Canister."**

This single canister, The Ledger Canister, is basically a smart contract that holds accounts and transactions. These transactions either mint ICP utility tokens for accounts, transfer ICP tokens from one account to another, or burn ICP tokens, eliminating them from existence. The Ledger Canister maintains a traceable history of all transactions starting from its genesis or beginning state.

But at the end of the day... important to remember, it's just another canister, no special magic.

To help explain its intent, we are releasing documentation on it, but I want to highlight the main take-aways:

**1. The document has an explanation of the Ledger Canister's functionality and intent — this is mostly prose.**

**2. There are two ways to interact with the Ledger Canister:**

a. **Standard messages via canister's interface**: Despite its big-sounding name, the Ledger Canister is just another canister so any one person or canister can interact with it by sending it messages using the canister's interface. This is how we expect most people will interact with it as it is very lightweight. This interface is NOT in the docs (yet) — we are updating it soon.

b. **Rosetta API**: There are entities such as Exchanges that need to comply with lots of regulations. As a result, we built a way for entities to interact with Ledger Canister via the very common crypto standard of the Rosetta API (https://www.rosetta-api.org/). Using the Rosetta API and its client (https://github.com/dfinity/rosetta-client) is in the documentation linked, but it is NOT how we expect most people to interact with Ledger Canister. To be frank, if you are wondering "should I use Rosetta API?" — the answer is likely "No."

**3. Many external partners have been helping kicking the tires on this doc and the Rosetta API implementation, so we are very grateful to them.**

That's it!

Without further ado...Take a read and help us improve! The Ledger Canister in the docs: https://sdk.dfinity.org/docs/integration/ledger-quick-start.html

Diego

-------------------------

dpdp | 2021-04-20 22:28:57 UTC | #2

Excellent news!

> a. **Standard messages via canister’s interface** : Despite its big-sounding name, the Ledger Canister is just another canister so any one person or canister can interact with it by sending it messages using the canister’s interface. This is how we expect most people will interact with it as it is very lightweight. This interface is NOT in the docs (yet) — we are updating it soon.

What is the canister ID of this Ledger in the different networks? (so we could get the canister's interface before the docs?)

will there be any faucet? :slight_smile:

-------------------------

Fulco | 2021-04-21 10:39:10 UTC | #3

Hey Diego 

Is the ledger Canister really just another canister in every way or does it have some special privileges? Wondering how it gets around the 4gb limit.

-------------------------

diegop | 2021-04-21 19:39:30 UTC | #4

Hi David,

Good question. The Ledger Canister is NOT deployed on Sodium yet but on one of the testnets, so there is no helpful canister ID (yet), as soon as it is deployed to Mercury and folks added there, we will let folks know.

-------------------------

diegop | 2021-04-21 19:38:21 UTC | #5

Good question. The like Ledger Canister can scale *itself* . It is written in a way so that it can create new canisters as needed.

The Ledger Canister can do this is via custom code that the team wrote for the Ledger Canister but using the same APIs and primitives that would be available to any canister developer. No special secret APIs for doing this.

-------------------------

wang | 2021-04-22 04:22:04 UTC | #6

Very good to see this!

This canister will be open sourced, right? This will give us a standard interface for token transaction history, which can be consumed by DeFi apps and analytics platforms eg. block explorers.

-------------------------

levi | 2021-04-22 19:57:47 UTC | #7

What language is the ledger-canister written in? And will it be open source in that language? What kind of auto-scaling bigmap is used?

-------------------------

ililic | 2021-04-22 20:07:12 UTC | #8

Hi folks,

The ledger canister is written in Rust. Stay tuned for more details re: open sourcing and implementation details!

-------------------------

heldrida | 2021-05-09 15:44:18 UTC | #9

Hi,

Would like to have an update on this, is the ledger 
**Standard messages** available and can you provide a working app example to test and learn please?

-------------------------

dpdp | 2021-05-09 15:55:45 UTC | #10

It seems the interfaces and canister IDs are available here:

https://github.com/dfinity/nns-ifaces

-------------------------

wang | 2021-05-10 05:29:24 UTC | #11

Very nice! Are there any UIs available yet?

-------------------------

wang | 2021-05-10 07:13:05 UTC | #12

Some questions on the ledger interface, specifically for integration with other canisters:

* What is the difference between an `AccountIdentifier` and a Principal? The docs state:
> Account identifiers are 32 bytes and are roughly the equivalent of the hash of a public key, optionally together with some additional sub-account specifier.
* How do subaccounts work? Is there a max number of subaccounts per account? Can I transfer to a specific subaccount? Do canisters have subaccounts?
* Why do methods end in `_dfx`? Would be cleaner without it
* Is there a name for the minimum denomination of ICP, ie. `1 * 10^-8 ICP`?
* Is there any validation done on the `memo` field? Are we expected to just set it to our ingress message nonce?
* How do we query for the suggested fee? What happens if we specify a fee that is too low?
* How does a canister receive a notification?
* How do I get the current `BlockHeight`?

-------------------------

dpdp | 2021-05-10 10:02:38 UTC | #13

https://github.com/dfinity/ic/tree/master/rs/rosetta-api/ledger_canister :tada:

-------------------------

uney | 2021-05-11 09:33:44 UTC | #14

[quote="diegop, post:1, topic:2542"]
a. **Standard messages via canister’s interface** : Despite its big-sounding name, the Ledger Canister is just another canister so any one person or canister can interact with it by sending it messages using the canister’s interface. This is how we expect most people will interact with it as it is very lightweight. This interface is NOT in the docs (yet) — we are updating it soon.
[/quote]

Is there any document yet? If not, can I have an example of how to transfer ICP token using Rosetta API?

-------------------------

dpdp | 2021-05-11 09:41:25 UTC | #15

I think there is some Rosetta documentation here: https://github.com/dfinity/rosetta-client

-------------------------

dpdp | 2021-05-11 15:50:32 UTC | #16

And the canisterIDs on mainnet:

https://github.com/dfinity/nns-ifaces/blob/master/canister_ids.json

-------------------------

thomasb | 2021-05-11 23:21:50 UTC | #17

I am trying to get the Rosetta API working with the mainnet Ledger Canister but I get 403 errors. I'm using the following arguments with the Rosetta API:
-c ryjl3-tyaaa-aaaaa-aaaba-cai --ic-url https://ic0.app --mainnet

Did anybody successfully connect to the mainnet ledger canister with the Rosetta API?

-------------------------

senior.joinu | 2021-05-13 15:03:26 UTC | #18

What is the advantage of the `notify()` mechanism of this canister over the ERC677 (for example) `sendAndCall()`? Is it cheaper to do it this way or what?

@wang I know you've been working on IC-compatible tokens for a while now, do you have any ideas why didn't they stick with the classics?

Thanks in advance.

-------------------------

wang | 2021-05-13 16:23:06 UTC | #19

Good question, maybe @nomeata can enlighten us.

It seems like in order to create a canister from a canister, we need to send a transaction to the ledger and then notify with memo `0x41455243`. Is there an example of this in Motoko?

-------------------------

Tomo | 2021-05-14 07:37:54 UTC | #20

can't sync rosseta-api to mainnet...

$ docker run \                          
    --interactive \
    --tty \
    --publish 8080 \
    --rm \
   dfinity/rosetta-api --mainnet

then 

ERROR [main] ic_rosetta_api::rosetta_server - Error in syncing blocks: InternalError(false, Some({"error_message": String("In tip: HTTP Client: Request for https://rosetta.dfinity.network/api/v2/canister/ryjl3-tyaaa-aaaaa-aaaba-cai/query failed: Response { status: 403,

-------------------------

Tomo | 2021-05-14 08:10:07 UTC | #21

Airgapped approach is not available for the option? 
> a. **Standard messages via canister’s interface** : Despite its big-sounding name, the Ledger Canister is just another canister so any one person or canister can interact with it by sending it messages using the canister’s interface. This is how we expect most people will interact with it as it is very lightweight. This interface is NOT in the docs (yet) — we are updating it soon.

-------------------------

senior.joinu | 2021-05-15 21:10:02 UTC | #22

So, it looks like I've figured it out myself. There are two main advantages of Dfinity's approach over ERCs. And I think one could find more.

1. Onchain ledger frees us from writing other offchain tools to analyze this ledger. With ERCs it is not possible to access transaction history onchain.

2. Separate method to reference some transaction lets you split `send` and `call` parts in time. It's easy to imagine some "airdrop based on previous activity" usecase with this approach.

-------------------------

pattad | 2021-05-17 16:07:01 UTC | #23

I would be interested on how to call ledger methods inside a canister.
The thing I would like to do is to create a wallet(private key) inside a canister and afterwards send some coins to another wallet via the ledger.

-------------------------

mac | 2021-05-17 16:11:06 UTC | #24

Diego, 

Just wanted to say I really appreciate your explanation style... so helpful and conscientious.  A rarity in technical spaces. Thanks so much. Onward and Upward.

-------------------------

diegop | 2021-05-17 17:08:30 UTC | #25

Thank you so very much!

-------------------------

Vishal | 2021-05-19 12:10:27 UTC | #26

Hi, were you able to fix this?

-------------------------

Jesse | 2021-10-12 00:04:52 UTC | #27

has the documentation for interacting with the ledger canister via a standard message from another canister been updated and released yet?

-------------------------

diegop | 2021-10-12 00:21:12 UTC | #28

Good question, let me ping the team and find out.

-------------------------

bogwar | 2021-10-12 08:00:06 UTC | #29

Hi Jesse, not yet -- we're in the process of doing this

-------------------------

Jesse | 2021-10-12 23:32:29 UTC | #30

ok. do you have an approximate date when the documentation might be released?

-------------------------

bogwar | 2021-10-13 13:05:08 UTC | #31

We develop the documentation in conjunction with the new Candid interface, which in turn is somewhat aligned with the "Canisters can transfer ICP" feature. This makes it a bit hard to estimate, but I would say 2 - 3 weeks.

-------------------------

levi | 2021-10-13 13:22:17 UTC | #32

Is the create-canister functions of the ledger going to be a part of the new public candid interface? is it going to change, and if it will change, will there be the documentation for it?

-------------------------

bogwar | 2021-10-14 20:41:57 UTC | #33

The ledger itself does not have a create-canister function, per se. Perhaps you may be referring to the method notify() which can be used to create canisters. Our plans are to modify/replace that method so I think that this replacement will not be immediately (if at all) available as part of the candid interface.

-------------------------

levi | 2021-10-14 21:34:25 UTC | #34

Got it, thanks. Yes I meant the functionality. Can it be public what the plans are for the change?

-------------------------

Jesse | 2022-01-13 14:47:56 UTC | #35

just following up on this. I was looking for the documentation of interacting with the ledger canister via canister calls, and wasn't quite able to find anything.

-------------------------

roman-kashitsyn | 2022-01-13 16:21:23 UTC | #36

Hi @Jesse!

Here is the current public interface of the Ledger canister: https://github.com/dfinity/ic/blob/09af55f2e9975aa19ea8fb5136d8b245d6d0e003/rs/rosetta-api/ledger_canister/ledger.did

Ledger canister id: `ryjl3-tyaaa-aaaaa-aaaba-cai`

Instructions how to setup ledger locally for testing: https://github.com/dfinity/ic/tree/master/rs/rosetta-api/ledger_canister#deploying-locally

If you use Rust, you might find this library helpful: https://docs.rs/ic-ledger-types/0.1.0/ic_ledger_types/

Examples of canisters in Rust and Motoko talking to the Ledger:
* https://github.com/dfinity/examples/tree/master/rust/tokens_transfer
* https://github.com/dfinity/examples/tree/master/motoko/ledger-transfer

Community conversation talk explaining how you could implement payments on top of transfers:
https://youtu.be/Hm-NWwiUQZw

Please let me know if you have questions that aren't answered by this documentation!

-------------------------

Jesse | 2022-01-13 23:49:11 UTC | #37

Thank you! I've taken some time to look over the examples you gave me. I have one question so far, how do i get a canister to be able to receive ICP? is it as simple as going into my wallet and sending ICP to the canister's wallet address? if so, how do i get the canister's wallet address?

-------------------------

kpeacock | 2022-01-14 00:24:33 UTC | #38

I'm learning this now! It's a little non-trivial, although it is covered in the examples Roman provided.

You can get an `account-identifier` by hashing the principal of the canister together with a "subaccount" which can be pretty much any other value converted into a blob. Any `account-identifier` that starts with your canister's principal can be controlled by your canister.

You'll need to convert it into a string, for people to send money to it, though.

Because this isn't very easy to drop into an existing app, I'm building an invoice canister that will simplify the experience for a lot of use cases. [Payments - Invoice Canister Design Review](https://forum.dfinity.org/t/payments-invoice-canister-design-review/9843). With the invoice, you'll be able to run a simple query to find out your default account-identifier to transfer into, and you'll be able to make an invoice for an amount to be paid, and easily check whether the payment has been satisfied

-------------------------

roman-kashitsyn | 2022-01-14 09:30:26 UTC | #39

[quote="Jesse, post:37, topic:2542"]
is it as simple as going into my wallet and sending ICP to the canister’s wallet address? if so, how do i get the canister’s wallet address?
[/quote]

Yep, transfer to a canister is regular ledger transfer.

I'd say the easiest way to figure out the canister account identifier is to add a query endpoint that returns it: https://github.com/dfinity/examples/blob/85e31a49a8f9ac095ac8eda4a1dc3613d4a4e77d/motoko/ledger-transfer/src/ledger_transfer/main.mo#L38-L42

You convert the binary AccountIdentifier to hex, this will be the ledger account id that you can use on the mainnet with the tool of your choice (`dfx ledger transfer`, NNS Dapp, Coinbase, etc.).

Unfortunately, the workflow for local ledger deployments is a bit more complicated and needs a direct call to the local ledger canister, something like
```sh
dfx canister call ledger transfer '(record { to = blob "\08.\cf.?dz\c6\00\f4?8\a6\83B\fb\a5\b8\e6\8b\08_\02Y+w\f3\98\08\a8\d2\b5"; memo = 1; amount = record { e8s = 2_00_000_000 }; fee = record { e8s = 10_000 }; })'
```
Where `to` is the binary account id that your canister reports.

It seems that we need the following:
1. Extend `dfx` to include tools that allow you to compute canister ledger account identifier without writing any code (https://github.com/dfinity/sdk/issues/1981)
2. Document how to do transfer ICP to a canister given canister id (https://github.com/dfinity/docs/issues/655)
3. (Long term) extend `dfx` to allow everyone to easily install ledger in a way that integrates well with `dfx ledger` commands (https://github.com/dfinity/sdk/issues/1982).

The first two points are simple, I'll try to implement them in the next couple of weeks. The third point is a bit more involved and will take longer.

-------------------------

Jesse | 2022-01-15 16:35:12 UTC | #40

in the `accountIdentifier` function within the `Account.mo` file of the example you gave, as I understand it, you perform the following: 
1.) first, you hash an array consisting of a single entry. that entry is `0x0A`.
2.) next, you hash the text "account-id".
3.) next, you hash the user's principal.
4.) next, you hash the user's subaccount.
5.) then you concatenate those hashes together to get the hashsum.
6.) then you get the CRC32 checksum of the hashsum.
7.) then you run the checksum though the `beBytes` function.
8.)finally, you append the array returned from running the checksum through the `beBytes` function with the hashsum array. 

My first question is, why'd you have to hash that first array with the `0x0A` entry? whats the significance of that?

my second question is, why'd you have to run the checksum through the `beBytes` function and append the result to the hashsum array? 


https://github.com/dfinity/examples/blob/master/motoko/ledger-transfer/src/ledger_transfer/Account.mo

-------------------------

Jesse | 2022-01-15 20:34:28 UTC | #41

I did a bit more researching. I think i may know the answer to my first question. Still clueless about the second question though. 

Initially, i was wondering if that specific byte (`0x0A`) had some sort of significance in particular, but, now I'm guessing the answer to why you hashed the first array with the single entry of `0x0A` was just to add an extra layer of hashing to minimize the probability of someone being able to decrypt the real data you intend to hash which are the text ('account-id'), the principal and the subaccount. `0x0A` is just an arbitrary byte that was chosen, it could have been any byte. is that correct?

-------------------------

roman-kashitsyn | 2022-01-16 00:10:37 UTC | #42

> why’d you have to hash that first array with the `0x0A` entry? whats the significance of that?

0x0A is 10, which is the length of the string "account-id" that follows. This technique of prefixing values being hashed with an identifier is called *domain separators*. The IC uses domain separators almost every time when something needs to be hashed (search for "domain separator" in https://smartcontracts.org/docs/interface-spec/index.html for more examples).

> why’d you have to run the checksum through the `beBytes` function and append the result to the hashsum array?

We prepend the CRC32 sum of the hash to form an account identifier as an additional safety measure. It's a bit like the Luhn check for credit card numbers. The price of a mistake is high: someone might select a wrong hex string that happens to have the right length and lose ICP by transferring to that "account". That actually happened before with the Protobuf interface that accepts 28-byte identifiers (these don't have the checksum).
The `beBytes` function converts the checksum, which is a 32-bit unsigned integer, into a byte array. There is more than one way to do that, and `beBytes` stands for "big-endian bytes" (see https://en.wikipedia.org/wiki/Endianness for more information on this).

The [Ledger Canister Specification](https://github.com/dfinity/ic/blob/master/rs/rosetta-api/docs/modules/rosetta-api/pages/ledger.adoc#accounts) also has a section describing the formation of account identifiers.

-------------------------

Jesse | 2022-01-16 15:46:10 UTC | #43

Thanks a ton! this was enlightening.

-------------------------

jzxchiang | 2022-04-13 06:44:19 UTC | #44

[quote="senior.joinu, post:22, topic:2542, full:true"]
So, it looks like I've figured it out myself. There are two main advantages of Dfinity's approach over ERCs. And I think one could find more.

1. Onchain ledger frees us from writing other offchain tools to analyze this ledger. With ERCs it is not possible to access transaction history onchain.

2. Separate method to reference some transaction lets you split `send` and `call` parts in time. It's easy to imagine some "airdrop based on previous activity" usecase with this approach.
[/quote]


The issue is that on Ethereum a `transferAndCall` method would be atomic...  Imagine a user is trying to pay a dapp canister tokens for some service. Then, the user would call the `transferAndCall` method on the token ledger canister, which would then call some `tokenFallback` method on the dapp canister. If any part of this fails, the entire transaction is reverted.

But on the IC, inter-canister calls are not atomic... so porting `transferAndCall` over to the IC as is doesn't really make sense since it can't be treated as atomic anyways. But then, why create a new `notify` method on the ICP ledger canister? It still makes an inter-canister call to the destination canister...

In general, one thing that bothers me is that we jump through all these hoops to avoid making inter-canister calls due to safety concerns with upgrades, atomicity, etc... But inter-canister calls are an essential ingredient in the IC's vision of composability. I hope they can be made safer and more ergonomic so that developers can be encouraged to use them.

-------------------------

ueyamamasashi | 2022-06-11 00:51:49 UTC | #45

I can't use this ledger canister id "ryjl3-tyaaa-aaaaa-aaaba-cai" in motoko playground with the following error when I import it. is there any ledger canister that can be used in motoko playground?

> file idl/ryjl3-tyaaa-aaaaa-aaaba-cai.did uses Candid types without corresponding Motoko type

-------------------------

chenyan | 2022-06-11 04:16:23 UTC | #46

I think it's fixed now. Can you try again in the playground?

-------------------------

ueyamamasashi | 2022-06-11 05:43:22 UTC | #47

Thank you! The error is done. I can use it!

-------------------------

