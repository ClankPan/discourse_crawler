AVOlight | 2023-06-07 06:54:45 UTC | #1

After retrieve_btc the ckBTC was transferred to mqygn-kiaaa-aaaar-qaadq-cai
Usually a burn happens next, is this just network congestion or ...

-------------------------

mariop | 2023-06-07 07:24:42 UTC | #2

The burn operation in our ledger is done by transfering tokens to the minting account. In the case of ckBTC, the minting account is owned by `mqygn-kiaaa-aaaar-qaadq-cai`, i.e. the minter, and has default subaccount. You can double check this by calling `icrc1_minting_account` in the ckBTC Ledger e.g. by using the [canister UI](https://dashboard.internetcomputer.org/canister/mxzaz-hqaaa-aaaar-qaada-cai) or via dfx:
```
$ dfx canister --network ic call --query mxzaz-hqaaa-aaaar-qaada-cai icrc1_minting_account '()'
(
  opt record {
    owner = principal "mqygn-kiaaa-aaaar-qaadq-cai";
    subaccount = null;
  },
)

```

The relevant code is:

* ckBTC Minter's [`burn_ckbtc` function](https://github.com/dfinity/ic/blob/48bd267bb46f77ebb541d0bcc7eaa107a2f38080/rs/bitcoin/ckbtc/minter/src/updates/retrieve_btc.rs#L229-L229) that makes the burn by sending ckbtc to the minting account
* ckBTC Ledger's [`icrc1_transfer`function](https://github.com/dfinity/ic/blob/48bd267bb46f77ebb541d0bcc7eaa107a2f38080/rs/rosetta-api/icrc1/ledger/src/main.rs#L287) that creates a burn operation in case the `to` address is the `minting_account`

-------------------------

AVOlight | 2023-06-07 08:11:33 UTC | #3

what options does one have after the ckBTC has been transferred to the minting account?

retrieve_btc worked with a Native Segwit address.
https://icscan.io/canister/mqygn-kiaaa-aaaar-qaadq-cai

-------------------------

Manu | 2023-06-07 14:02:49 UTC | #4

Hi @AVOlight, if I understand correctly, you're trying to do retrieve_btc to a taproot address right? If so: 
* We don't support that yet (but we'll add it asap!).
* It sounds like you already transferred ckBTC to your "withdrawal" subaccount of the ckBTC minter. Since a retrieve_btc call with a taproot address gets rejected (due to it not being supported yet), your ckBTC is still there are not burnt. 
* you can get your bitcoin out by calling retrieve_btc with a different non-taproot address.

Hope this helps!

-------------------------

cymqqqq | 2023-12-12 12:57:17 UTC | #5

Hi @Manu , what do you think about PSBT(partially signed bitcoin transaction)? Does Difnity have a roadmap for how to implement PSBT on ICP network?

-------------------------

THLO | 2023-12-12 14:30:15 UTC | #6

[quote="cymqqqq, post:5, topic:20506"]
Does Difnity have a roadmap for how to implement PSBT on ICP network?
[/quote]

This is not on the roadmap.
What functionality do you think is missing? You can already create any kind of Bitcoin transaction (except for Taproot transactions, which the IC cannot sign).

-------------------------

cymqqqq | 2023-12-12 16:11:37 UTC | #7

So are there any updates on t-schoor signature?

-------------------------

cymqqqq | 2023-12-22 09:02:12 UTC | #8

Hi @Manu , I know that you know a lot of things about the BTC, so here I want to ask you a question:
There are two rust-electrum clients and rust-bitcoin client, I found the send_transaction in the rust-bitcoin, and the blockchain.transaction.broadcast in the rust-electrum clients, so do you know what are the differences between the two interfaces? Or can I use the send_transaction instead of broadcast_transaction? 
Anyone who knows something about it can post here, thx:)

-------------------------

THLO | 2024-01-03 17:24:31 UTC | #9

[quote="cymqqqq, post:8, topic:20506"]
do you know what are the differences between the two interfaces?
[/quote]

Could you please provide some more information on what you're trying to do?
In case it is not clear, you cannot run any of these clients in a canister. At the very least, the networking part wouldn't work.
A canister can send a Bitcoin transaction by calling the function [bitcoin_send_transaction](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-bitcoin_send_transaction) on the management canister.

-------------------------

cymqqqq | 2024-01-04 02:44:27 UTC | #10

Yeah, I found the send_transaction interface in the ckbtc canister, and now I want to build my own bitcoin dapp canister, first, it needs to sign a psbt(Partially Signed Bitcoin Transaction), and then it needs to broadcast transactions to the BTC mainnet(I found it in the rust-electrum), but I don't know the low-level fundamentals of the broadcast.

-------------------------

THLO | 2024-01-04 09:25:08 UTC | #11

I suggest that you take a look at this [sample code](https://github.com/dfinity/examples/tree/master/motoko/basic_bitcoin) (if you prefer Rust, check out this [sample code](https://github.com/dfinity/examples/tree/master/rust/basic_bitcoin) instead).

Basically, you create the transaction, (partially) sign it using the threshold ECDSA API (check out this [Motoko function](https://github.com/dfinity/examples/blob/1ce27ef14fa45f0714f9d5fcad191a628ee2b773/motoko/basic_bitcoin/src/basic_bitcoin/src/EcdsaApi.mo#L39) or this [Rust function](https://github.com/dfinity/examples/blob/1ce27ef14fa45f0714f9d5fcad191a628ee2b773/rust/basic_bitcoin/src/basic_bitcoin/src/ecdsa_api.rs#L29) for inspiration), and then simply serialize the transaction and call `bitcoin_send_transaction`.
The transaction will then be advertised in the Bitcoin network (mainnet or testnet).

-------------------------

lshoo | 2024-04-27 04:57:56 UTC | #12

Will ck-schnorr signature support psbt?

-------------------------

