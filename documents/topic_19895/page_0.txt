THLO | 2023-05-11 08:52:26 UTC | #1

Hi everyone!

A major pain point for developers is cycle management ("Removal of Cycles Wallet" is currently at the number-2 spot on the [DX feedback board](https://dx.internetcomputer.org/?sort=votes)).

We'd like to pick up work on this topic soon but would like to collect some community feedback first, of course.

We currently envision the following change to `dfx`: A new subcommand (tentatively called) `cycles` would be introduced that enables you to check the **cycles balance of your principal ID** (`dfx cycles balance`). This new subcommand can also be used to transfer cycles to another principal ID or to any canister.
Naturally, it would also be possible to increase the cycles balance using ICP.

A promising approach to implement this functionality is the introduction of a cycles ledger, which would adhere to the [ICRC-1](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-1/README.md) (and probably also the [ICRC-2](https://github.com/dfinity/ICRC-1/blob/main/standards/ICRC-2/README.md)) standard.
There seems to be interest in such a ledger in general as the topic was brought up again recently [on the forum](https://forum.dfinity.org/t/has-anyone-created-an-icrc-cycle-token/19518).

Note that the cycles wallet will continue to exist for those who wish to use it. The cycles wallet can be used to call other canisters with cycles attached. A global cycles ledger would not have this functionality.

If you have any requests, questions, or feedback about this feature, please share them here!

-------------------------

alejandrade | 2023-05-14 01:23:41 UTC | #2

I currently use the cycle token xtc for all my cycle needs. It would be cool if I could just keep doing that but with an ICRC token. We just need better documentations so new people know about the token. 

We donâ€™t need more dfx commands. Dfx is already complicated enough.

Maybe a redesign.

-------------------------

THLO | 2023-05-15 06:47:52 UTC | #3

[quote="alejandrade, post:2, topic:19895"]
It would be cool if I could just keep doing that but with an ICRC token. We just need better documentations so new people know about the token.
[/quote]

The process should be very similar, one of the differences being that the new ledger would be ICRC-1/2 compliant.
And yes, we will definitely try to create good/better documentation.   :slight_smile: 

[quote]
Maybe a redesign.
[/quote]

This activity can be considered part of a redesign (rather than adding more stuff on top) to make cycle management more user-friendly.

-------------------------

alejandrade | 2023-05-15 19:57:45 UTC | #4

A nice gui and a way to bind it all to my internet identity would be really nice. And some oauth type things so I can write cli tools that people can just plug into their dfx identity.

The ability for me to customize my own tools would be much more powerful than you guys trying to guess my needs.

-------------------------

THLO | 2023-10-09 15:15:08 UTC | #5

Hey everyone!

Let me give you an update about our work on the cycles ledger:

The implementation of the ledger itself is nearly done. The ledger complies with the ICRC-1 and ICRC-2 standards. Moreover, it will also support ICRC-3, providing a standardized way to access the transaction log.

Once the implementation is ready, which should happen in the next couple of weeks, we will propose to deploy the cycles ledger on a system subnet. If the proposal is accepted and the ledger is up and running, it can then already be used to transfer cycles between principal IDs.

We are working in parallel on the required changes to use the cycles ledger from `dfx` with the goal of simplifying cycles management through a dedicated subcommand.
It is too early to say when this functionality will be available but the current goal is to release it in the next couple of months.

-------------------------

THLO | 2023-10-17 08:39:48 UTC | #6

It's time for another update: We had an internal security review of the cycles ledger implementation and are now in the process of fixing the issues that the security team identified.

Since we anticipate that most issues will be fixed within the next couple of weeks, we'd like to initiate the deployment process by creating a proposal to whitelist a principal ID to install the cycles ledger on the [uzr34](https://dashboard.internetcomputer.org/canisters?subnet=uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe) system subnet.

Once the proposal is live, I'll post the link here. As always, if you have any questions or concerns, please let me know!

-------------------------

icme | 2023-10-17 15:55:58 UTC | #7

Is there any preliminary documentation or API that we can work off of if we want to integrate with the cycles ledger once it launches?

Also, is this something that can first be integrated with dfx pull so we can test out the intended functionality in the meantime?

-------------------------

THLO | 2023-10-17 20:18:52 UTC | #8

There is no public documentation yet but I can provide the current API here. Note that there is still a chance that the API will change.

As mentioned before, the cycles ledger complies with the [ICRC-1](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-1) and [ICRC-2](https://github.com/dfinity/ICRC-1/tree/main/standards/ICRC-2) standards. Additionally, it implements the endpoints defined in the proposed [ICRC-3](https://github.com/dfinity/ICRC-1/pull/128) standard.
Apart from the endpoints defined in these three standards, the cycles ledger only has two additional endpoints:

```
type Account = record { owner : principal; subaccount : opt vec nat8 };

type BlockIndex = nat;

type DepositArgs = record {
  to : Account;
  memo : opt vec nat8;
};

type DepositResult = record { balance : nat; txid : nat };

type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};

type SendArgs = record {
    amount : nat;
    from_subaccount : opt vec nat8;
    to : principal;
    created_at_time : opt nat64;
};

type SendError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  FailedToSend : record {
    fee_block : opt nat;
    rejection_code : RejectionCode;
    rejection_reason : text;
  };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  InvalidReceiver : record { receiver : principal };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};

service : (ledger_args : LedgerArgs) -> {
  deposit : (DepositArgs) -> (DepositResult);
  [ICRC endpoints]
  send : (SendArgs) -> (variant { Ok : BlockIndex; Err : SendError });
}
```

The `deposit` endpoint makes it possible to deposit cycles in the cycles ledger: The `to` account in the `DepositArgs` is credited for the cycles attached to the call.
Conversely, the `send` endpoint is called to instruct the cycles ledger to send the `amount` (of cycles) specified in the `SendArgs`  to the canister specified in the `to` field of the `SendArgs`.

The integration with `dfx deps` shouldn't be too hard. @lwshang, what do you think?

-------------------------

THLO | 2023-10-20 16:17:10 UTC | #9

Hey everyone! The proposal to create the cycles ledger canister on the uzr34 subnet is now [live](https://dashboard.internetcomputer.org/proposal/125317), so please vote!   :slight_smile: 

The principal ID of the cycles ledger team is

`` b6f5g-tu3kx-cqx6r-dygkz-xevyv-fwi3i-vsqej-5ugqi-7hnsk-2scby-fae``,

which should be the same as the principal ID in the proposal.

Note that, if the proposal goes through, we will first create an empty canister, which will give us the canister ID of the cycles ledger.
If all goes according to plan, the cycles ledger will then be installed in the next couple of weeks.

-------------------------

Severin | 2023-10-25 09:32:06 UTC | #10

We now created two canisters on [subnet uzr34](https://dashboard.internetcomputer.org/canisters?subnet=uzr34-akd3s-xrdag-3ql62-ocgoh-ld2ao-tamcv-54e7j-krwgb-2gm4z-oqe):

* [cycles ledger](https://dashboard.internetcomputer.org/canister/um5iw-rqaaa-aaaaq-qaaba-cai)
* [index canister](https://dashboard.internetcomputer.org/canister/ul4oc-4iaaa-aaaaq-qaabq-cai) so that integrating with the cycles ledger is much easier

We don't plan to install anything to these canisters just yet, but once we do we'll let you know here

-------------------------

peterparker | 2023-11-16 17:29:09 UTC | #11

What's the ETA? Will there be a proposal soon to introduce this cycles ledger on mainnet?

I'm asking to determine if it makes sense for me to build such a feature for Juno myself or if I should wait. I will need this feature to allow developers to delete their canisters. So, ideally, I'd prefer the second option, but depending on the timeline, if it's another feature I depend on and which takes months again, I might opt for the former. Thanks in advance for the feedback.

-------------------------

THLO | 2023-11-16 21:14:24 UTC | #12

Thanks for reminding me to provide an update! I said a few weeks ago that the cycles ledger should be ready soon if all goes according to plan. However, other work took priority, so unfortunately progress on this feature was slower than anticipated.
The tentative goal is now to have it ready by the end of the year.

The repository should be publicly available very soon. While the code is not yet ready for production, you could use it for your own purposes if you wish. But waiting a bit longer is also an option, if that works for you.   :slightly_smiling_face: 

Regarding the release process, the cycles ledger team has a principal ID that is authorized to deploy the cycles ledger on a system subnet, so no proposal will be required to install the cycles ledger.

-------------------------

peterparker | 2023-11-17 06:04:44 UTC | #13

[quote="THLO, post:12, topic:19895"]
The tentative goal
[/quote]

Thanks for the feedback. I'll think about it,

-------------------------

peterparker | 2023-11-17 13:14:26 UTC | #14

Considering the ratio of developer effort to another waiting time, I've decided to implement my feature using `deposit_cycles` ([PR](https://github.com/junobuild/juno/pull/312)). I'm still looking forward to the potential usefulness of the cycles ledger in the future.

-------------------------

THLO | 2023-12-15 21:36:32 UTC | #15

Hey everyone!
Quick update: Unfortunately, the required resources to finish up the implementation work have not been available in the last couple of weeks, which unfortunately means that we have to postpone the release of the cycles ledger until early 2024.
The good news is that the source code is now publicly available [here](https://github.com/dfinity/cycles-ledger), so everybody can check it out.

-------------------------

cycle_express | 2024-01-11 01:22:31 UTC | #16

Any update on when the cycle ledger would be available? This is one of the highly anticipated feature by a lot of people, and we hope the foundation can prioritize. For one, the cycle ledger would keep records of every burn (via the `send` function), so that we can legitimately show to people that a cycle transfer to a canister did take place.

-------------------------

THLO | 2024-01-11 08:37:12 UTC | #17

[quote="cycle_express, post:16, topic:19895"]
Any update on when the cycle ledger would be available?
[/quote]

Good news: Work on the cycles ledger has been picked up again.
I can't give an accurate release date yet but the plan is to release it at some point in Q1 2024.
Once we're ready to set a release date, I'll announce it here!

-------------------------

icme | 2024-01-26 15:54:32 UTC | #18

In the context of https://forum.dfinity.org/t/scalable-messaging-model/26920, is there a possibility of extending the cycles ledger with a `batchSend()` API that has the following signature:

Candid
`send : (vec SendArgs) -> (vec variant { Ok : BlockIndex; Err : SendError });`

Motoko
```
send : ([SendArgs]) -> async [{
  #Ok : BlockIndex;
  #Err : SendError;
}]
```

-------------------------

THLO | 2024-01-26 16:44:47 UTC | #19

I'm not sure I understand the idea behind your proposed `batchSend` endpoint.
Are you trying to address the problem that the response of a `send` call may not tell you whether the cycles were transferred out to the target canister?
If I understand the proposal correctly, the only potential advantage of batching is that you can get a response (or not) for multiple transfers at the same time. However, the case where the response does not reveal whether the batched execution went through must still be handled.

Is that the intention or did I get it wrong?

-------------------------

icme | 2024-01-26 18:17:35 UTC | #20

[quote="THLO, post:19, topic:19895"]
the only potential advantage of batching is that you can get a response (or not) for multiple transfers at the same time
[/quote]

The batched endpoint will return an array of results indicated if each send was successful or not. Providing a batch endpoint helps with the scalability of canisters that interact with the cycles ledger (or any ledger) when there are spikes in transaction requests. 

As a use case, I would like to in a single request, send 100 `SendArgs` to the cycles ledger asking 100 different ledger accounts to transfer cycles to a specific canister. I would like to receive responses for each of the 100 transfer attempts indicating if they were successful or if they failed. In this case, I am trusting the result response from the cycles ledger that the cycles were successfully sent/transferred to a canister, and I don't need to confirm after the fact that the cycles were actually sent.

This is **not** the same as a transactional update (where one would expect all messages or succeed, or would fail if one of the messages does not succeed)


Here's my reasoning for providing a batch endpoint:

1. Canisters have output queue limitations, so batching requests helps improve throughput to the cycles ledger. https://forum.dfinity.org/t/canister-output-message-queue-limits-and-ic-management-canister-throttling-limits/15972/2
2. Every outgoing request and outstanding call context requires a memory reservation, which is one of the reasons that the https://forum.dfinity.org/t/scalable-messaging-model/26920 is being implemented. Providing a batch endpoint on a ledger reduces the number of outstanding calls at a single time (i.e. alternatively making parallel requests to the cycles ledger), which frees up this memory and increases the scalability of the subnet.

-------------------------

icme | 2024-01-26 18:46:31 UTC | #21

One additional question - @peterparker  will users be able to manage their cycles balances through the NNS app once the cycles ledger is released?

-------------------------

peterparker | 2024-01-26 21:44:30 UTC | #22

I can unfortunately not answer your question, @icme. I only participated in this thread as a user. I have no idea what the status, outcome, and roadmap of the cycles ledger are, nor where it will be used.

-------------------------

skilesare | 2024-01-27 12:57:11 UTC | #23

@THLO , @Severin 

Can you address the question above about NNS access to cycle ledger?

Also:

1. Does the existing get_blocks exist in the ledger so that a rosetta could at least work in read-only mode?
2. What is the clean-up threshold at which time old approvals begin to be cleaned up by the ledger?
3. Is the current beta of the cycle ledger set up to be pullable by dfx yet(or installed as part of the local nns deployment commands)?

-------------------------

THLO | 2024-01-29 10:57:51 UTC | #24

Thanks, @icme, for the detailed explanation! We'll discuss your proposal in the team.

-------------------------

THLO | 2024-01-29 12:16:49 UTC | #25

[quote="skilesare, post:23, topic:19895"]
Can you address the question above about NNS access to cycle ledger?
[/quote]

I think there is currently no effort to add support in the NNS dapp; however, that's certainly a reasonable request.
Obviously, we currently focus on getting the cycles ledger released. I suggest posting your request on the [feedback board](https://dx.internetcomputer.org/) to get it prioritized!   :-)

Regarding your other questions:

1. The cycles ledger will be [ICRC-3](https://github.com/dfinity/ICRC-1/pull/128/files) compliant. As you can see [here](https://github.com/dfinity/cycles-ledger/blob/7b6e6a22988403c10bcb4b45b077087bc139a064/cycles-ledger/cycles-ledger.did#L251), there is a function called `icrc3_get_transactions`, which was the proposed name at some point. The function will be renamed to `icrc3_get_blocks` before the release.
2. Approvals where `expires_at = None` do not expire, i.e., approvals are only pruned when they actually expire.
3. That's a good question! The cycles ledger should be pullable but that's not the case yet. We'll add that item to the list of outstanding tasks.

-------------------------

skilesare | 2024-01-30 18:37:13 UTC | #26

[quote="THLO, post:25, topic:19895"]
Approvals where `expires_at = None` do not expire, i.e., approvals are only pruned when they actually expire.
[/quote]

While this is great news, I'm curious as to the mechanism you are using as even the ICP ledger clears out accounts if the collection gets too large. Have you guys cracked this or is it more of a function of with the larger stable memory size you don't anticipate a problem emerging before you'd be able to deal with it(if it ever gets to that).

-------------------------

skilesare | 2024-01-30 19:06:28 UTC | #27

@THLO Maybe a bit of a dumb question here, but in the depositor, is the ledger_id the ICP ledger or the cycles ledger?

-------------------------

THLO | 2024-01-31 08:15:29 UTC | #28

[quote="skilesare, post:26, topic:19895"]
Have you guys cracked this or is it more of a function of with the larger stable memory size
[/quote]

It is the latter. Given that the cycles ledger can now use 400 GiB of stable memory, and likely more in the future, we believe that the state size will not become a concern any time soon.
Obviously, we will closely monitor the growth of the state so that we could react if our assumption turned out to be wrong.

> in the depositor, is the ledger_id the ICP ledger or the cycles ledger?

It is the cycles ledger. As you can see [here](https://github.com/dfinity/cycles-ledger/blob/fc5a0138fee0afb6111a8948c04cc75be47aefb4/depositor/src/main.rs#L33), the depositor uses this canister ID to call the `deposit` function on the cycles ledger.

-------------------------

dfx-json | 2024-02-20 20:45:12 UTC | #29

Hey @icme - this is a good suggestion. For the initial release, we are doing everything we can to keep the Cycles Ledger simple. However, this would be a good addition to the feedback board. Care to add it? https://dx.internetcomputer.org

TY!

-------------------------

Samer | 2024-02-21 22:37:17 UTC | #30

If my understanding is correct then:

This would allow a user who obtained a principal through auth with II in a browser frontend, to create a canister by sending a call to the cycles ledger. (From the same frontend)

The principal should hold cycles obviously.

And this was not possible before, because the same principal would not be able to call `create_canister` in the management canister, since that is only possible from another canister, correct?

-------------------------

Severin | 2024-02-22 09:28:12 UTC | #31

Yes, that's correct.

-------------------------

skilesare | 2024-02-22 20:46:54 UTC | #32

After some integration work, I think a transfer_from_and_send(Account, Amount, CanisterID) function would be great that would combine the icrc2 transfer from with the custom send.

I guess going the other way, deposit_and_transfer would be cool too.

-------------------------

THLO | 2024-02-23 08:17:23 UTC | #33

[quote="skilesare, post:32, topic:19895"]
I think a transfer_from_and_send(Account, Amount, CanisterID) function would be great that would combine the icrc2 transfer from with the custom send.
[/quote]

I think that's an interesting idea. Thanks for the suggestion!
Note that the custom `send` function has been renamed to [withdraw](https://github.com/dfinity/cycles-ledger/blob/2e8f850afaf5890c108360b63f50377923242050/cycles-ledger/cycles-ledger.did#L252).

What would `deposit_and_transfer` do? Note that the `deposit` function allows the user to specify any destination account directly.

-------------------------

skilesare | 2024-02-23 13:24:08 UTC | #34

[quote="THLO, post:33, topic:19895"]
`deposit_and_transfer`
[/quote]

Good point!

Thanks for the updated did!

-------------------------

skilesare | 2024-02-26 00:50:14 UTC | #35

(Nevermind...figured it out)

-------------------------

ahdrahees | 2024-03-06 14:46:10 UTC | #36

is there any timeline for cycles ledger to be live on mainnet?

-------------------------

THLO | 2024-03-06 18:10:52 UTC | #37

As I wrote in January, the goal is to release the cycles ledger in Q1 2024, so there isn't much time left.   :slight_smile: 

There are still some changes required but I hope that I can provide a more precise release date soon.

I can provide some additional information already now: We will release the cycles ledger first, followed by an update to `dfx` with the new `dfx cycles` command.
The `index` canister will follow a bit later, depending on available resources, but hopefully not more than a few weeks later. Once everything is up and running as expected, we will *hand over control to the NNS*. Before this happens, the  cycles ledger is considered to be in *beta stage* and should be used for *testing only* (i.e., transferring small amounts of cycles).

-------------------------

THLO | 2024-03-18 15:17:49 UTC | #38

Good news! The cycles ledger is now almost ready to be deployed (we only need to merge changes to the ICRC metadata).

We are planning to launch the cycles ledger on Wednesday, **March 20, 2024**.

As mentioned before, the launch will start the testing phase in production. Everybody is encouraged to try it out and report any feedback here!

-------------------------

Severin | 2024-03-20 16:05:05 UTC | #39

We just installed the cycles ledger to `um5iw-rqaaa-aaaaq-qaaba-cai`. You can find the wasm [here](https://github.com/dfinity/cycles-ledger/releases/tag/cycles-ledger-v0.4.0). We will test it thoroughly over the next few weeks and invite you to do the same. Please let us know if you run into any unexpected behavior!

Important: This is still a beta. Please don't store any significant cycle amounts. While we don't plan to break anything, things can still go wrong. Also, we are still controllers of the canister, so we can rug you at any time :smiling_imp:

The next dfx release will contain an opt-in way to use the cycles ledger by default. I'll update you how to use it once it's released.

-------------------------

Severin | 2024-03-20 17:22:15 UTC | #40

Well that was quick... @mariop found a bug already with block encoding and we'll have to reinstall the canister. I stopped the canister for now so nobody can deposit cycles anymore that they won't be able to withdraw

On a positive note: nobody except myself has deposited cycles so far, so nobody gets rugged :tada:

-------------------------

Severin | 2024-03-21 08:51:24 UTC | #41

The bug is [fixed](https://github.com/dfinity/cycles-ledger/pull/123) and the cycles ledger is reinstalled with the [latest version](https://github.com/dfinity/cycles-ledger/releases/tag/cycles-ledger-v0.5.0). The canister is running again

-------------------------

skilesare | 2024-03-22 19:00:06 UTC | #42

Maybe one more?  ICRC3 specifies Nats for amount and fees and timestamps, but the current block 3 has Ints. @mariop 

![image|690x407](upload://npMAAtwn1elmpved4kE1v0nDV9a.png)

![image|690x191](upload://hs67Hv9343TZwag4uaxb2BXLiLq.png)

-------------------------

mariop | 2024-03-22 19:26:32 UTC | #43

[quote="skilesare, post:42, topic:19895"]
Maybe one more? ICRC3 specifies Nats for amount and fees and timestamps, but the current block 3 has Ints. @mariop
[/quote]

We are aware and we will patch it sometime soon. The issue is caused by the way the serializing library `ciborium` works with numbers, which results in our Ledgers using `int` for positive numbers instead of `nat`. The fix requires some work. In the meanwhile clients of the cycles-ledger will have to interpret `int`s as `nat`s. Note that out internal library is [calculating the hash of positive ints as hash of the leb128 representation](https://github.com/dfinity/ic/blob/c70bc267dfdc1143d8af70b32a4b51619aa71b80/packages/icrc-ledger-types/src/icrc/generic_value.rs#L76) which is also different from the ICRC-3 specification but has the benefit that the hash is already correct despite the type being different. The fix will just have to switch `int` for `nat`.

This kind of inconsistencies can happen when the standard and the implementation are developed in parallel. The reason why we decided to proceed anyway is that the issue affects only certain clients off-chain that need to verify the Ledger.

-------------------------

skilesare | 2024-03-22 20:22:45 UTC | #44

Ugh....ok...so Will they stay Ints on this are or they going to get fixed to nats in the get_block response?  I have implemented rep indy hash in Typescript and will be calling hashes client side....do I need to do some custom code here?

In motoko I'm slebing all Ints...not just positive ones:

https://github.com/skilesare/RepIndyHash.mo/blob/f0bdba4cededeb7b1fad5d729debd7fafd7df9ae/src/lib.mo#L36

Correct or incorrect?  I'm assuming what you are saying is that the the rust code is doing it wrong for positive ints and that helps you fix it because they are supposed use leb anyway?

-------------------------

mariop | 2024-03-22 20:29:35 UTC | #45

> Will they stay Ints on this are or they going to get fixed to nats in the get_block response?

They will get fixed to nats. The cycles-ledger will be fully ICRC-3 compatible.

> do I need to do some custom code here?

No, just wait for the fix.

> Iâ€™m assuming what you are saying is that the the rust code is doing it wrong for positive ints and that helps you fix it because they are supposed use leb anyway?

Our library is doing it wrong which in this case works in out favor as there is no difference between `int` and `nat` for block hashing. A correct implementation should always use `sleb128` for `int`.

-------------------------

Severin | 2024-03-25 13:23:02 UTC | #46

The fix is deployed. Since the total supply was only 700M cycles we decided it's worth reinstalling (one last time?) instead of maintaining even a few lines of backwards compatibility code for the rest of time

-------------------------

mariop | 2024-03-26 15:45:05 UTC | #47

The latest release of the cycles-ledger fixes this issue. Now amounts are `Nat`.

![image|690x227](upload://p9Xd3CCl5fUlFUgufnVTe7vSMHN.png)

-------------------------

cycle_express | 2024-04-15 07:43:15 UTC | #48

Command `dfx cycles --ic` seems to be working just fine. So is cycle ledger considered launched? Can people start using it without worrying funds disappearing?

-------------------------

Severin | 2024-04-15 08:30:01 UTC | #49

We consider it beta-launched. The dev team still holds control over the canister, so it is still possible for us to change the code without NNS approval, but we plan on handing over control soon :tm:

We have not deployed the index canister yet (still under development), so that part is not tested live yet, but we expect that things should go smoothly. I personally would be happy to store $XXX worth of cycles in there, but I have enough insider knowledge so that I trust the team.

-------------------------

saikatdas0790 | 2024-05-10 05:41:10 UTC | #50

Wait, so I shouldn't be custodying $$$'s of cycles in there, yet?

-------------------------

Severin | 2024-05-10 08:04:37 UTC | #52

Depends on how much you trust me :wink: Seriously speaking: we (the cycles ledger team, 3 people total) still have control over the canister, so we could always rugpull you. But the code is now stable and we don't have any more security relevant work planned. Next week we'll discuss if we can finally hand the canister over to the NNS and remove ourselves as controllers.

-------------------------

saikatdas0790 | 2024-05-13 10:09:35 UTC | #53

Too late. All our cycles are with you now ðŸŒš

P.S.

We found another cool hack that we're using for a UI right now.

Previously we relied on the Cycles Wallet UI for our non-CLI users in case they needed to topup canisters. But that's been a bit wonky for some time now. It looks like it's not widely supported anymore without any updates.

So, instead, what we're doing for a UI for cycles is use the [Candid UI here](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.ic0.app/?id=um5iw-rqaaa-aaaaq-qaaba-cai) and open the Cycles Ledger address and then use II to login and obtain a principal and then transfer cycles on the cycles ledger to that principal that can be checked with the `icrc1_balance_of` method.

And subsequently they can use the `withdraw` method to top up canisters with this UI. No need to wait for the NNS support to land.

@Severin 
Quick question, any reason why the Candid UI Internet Identity uses `identity.internetcomputer.org` instead of `identity.ic0.app`?

-------------------------

Severin | 2024-05-13 09:10:51 UTC | #54

[quote="saikatdas0790, post:53, topic:19895"]
Quick question, any reason why the Candid UI Internet Identity uses `identity.internetcomputer.org` instead of `identity.ic0.app`?
[/quote]

See this for context:
https://forum.dfinity.org/t/internet-identity-and-login/21137/2

-------------------------

icme | 2024-05-22 15:26:57 UTC | #55

:wave: Wanted to check in on this to see how close we are to an NNS controlled cycles ledger.

Will the cycle ledger be NNS controlled before the index canister gets deployed, or visa-versa?

-------------------------

Severin | 2024-05-23 08:13:03 UTC | #56

We ran into some serious problems with verifiability. If there's no 100% guaranteed way for people to verify the cycles ledger we won't hand it over. We'll have a plan ready early next week.

-------------------------

Severin | 2024-05-29 09:00:07 UTC | #57

TLDR: We will reinstall one last time. Please withdraw your cycles.

Long version:
Hello everyone, bad news with verifiability.

**The problem:**
The first few versions of the cycles ledger we deployed were not reproducible builds, meaning that it is not obvious that there are no hidden balances or approvals in the state. Obviously, we canâ€™t hand the cycles ledger over to the NNS and expect people to trust it this way.

**Options considered:**
The two options we have moving forward are 1) reinstalling the cycles ledger with verifiable code or 2) add extra endpoints to the cycles ledger and develop tooling that allows everyone to verify that the state is correct. Option 2 would take a good amount of development time but verification would remain complex: To trust the cycles ledger you wouldnâ€™t only have to verify the cycles ledger code, but also the verification protocol and the tools used for that. We concluded that option 1 causes less pain.

**The way forward:**
Since there is a significant amount of cycles in the cycles ledger (at the time of writing a bit over 51k TC), we execute the following migration plan:
* Today (May 29):
  * We have [disabled the deposit function](https://github.com/dfinity/cycles-ledger/pull/132/files) so that people donâ€™t deposit more cycles.
  * I will reach out to @icme and @saikatdas0790 since they seem to be the two people most affected.
* Today until ~June 3: Please withdraw your cycles!
* ~June 3 (next Monday):
  * We [disable all endpoints that allow modifying the state](https://github.com/dfinity/cycles-ledger/pull/133/files) of the cycles ledger.
  * We make a snapshot of all balances.
  * We hand over control of the cycles ledger canister and index canister over to the NNS.
  * We submit a proposal to reinstall the cycles ledger.
  * We submit a proposal to reinstall the index canister in order to wipe its state so it doesnâ€™t supply outdated information.
* Once the proposal is adopted and executed (probably ~3 days after submitting):
  * We refund the balances of everyone that lost their balance using the snapshot from June 3

-------------------------

icme | 2024-05-31 21:53:43 UTC | #58

Thanks for the communication Severin. 

We've alerted all CycleOps customers that are currently using the Cycle Ledger, and sent out this PSA to get the word out to developers.

https://twitter.com/CycleOps/status/1796657977015078986

-------------------------

Severin | 2024-06-04 07:42:16 UTC | #59

Status update:
* Everything is going as planned
* Thank you everyone for withdrawing so diligently! We went down from ~51k TC down to 90 TC in total supply
* We disabled all endpoints that allow modifying the state
* We made the NNS Root canister the sole controller of cycles ledger and cycles index canister
* We made a new state snapshot with all remaining balances
* We submitted proposal [130151](https://dashboard.internetcomputer.org/proposal/130151) to reinstall the cycles ledger
* We submitted proposal [130152](https://dashboard.internetcomputer.org/proposal/130152) to reinstall the cycles index

-------------------------

tiago89 | 2024-06-04 15:15:59 UTC | #60

Hi @Severin,

Noticed Dfinity voted to refuse the 2 reinstall proposals. I did the build verification and was able to reproduce both the Index and the Ledger.

But the Arguments hash are not matching, in neither proposal. Maybe that was the reason Dfinity refused?

Can you share what was the reason and how that changes the original plan?

Thanks,
Tiago

Printscreens of my results:
![Screenshot 2024-06-04 at 16.06.09|690x169](upload://j26fehsPwTwpqlorUZCeZVHqjmD.png)
![Screenshot 2024-06-04 at 16.13.12|690x194](upload://knZQOabgMhse83CU67Xzb3BK1a9.png)

-------------------------

THLO | 2024-06-04 15:26:33 UTC | #61

Exactly, there is an issue with the arguments, so we had to create two new proposals:

- If proposal [130287](https://dashboard.internetcomputer.org/proposal/130287) is accepted, the cycles ledger will be reinstalled.
- If proposal [130288](https://dashboard.internetcomputer.org/proposal/130288) is accepted, the cycles index canister will be reinstalled.

-------------------------

THLO | 2024-06-07 15:51:45 UTC | #62

Unfortunately, there was another bug in one of the proposals and, as a result, the cycles ledger was not reinstalled.

We will have to do another round of voting:

* If proposal [130327 ](https://dashboard.internetcomputer.org/proposal/130327) is accepted, the cycles ledger will be reinstalled.
* If proposal [130328 ](https://dashboard.internetcomputer.org/proposal/130328) is accepted, the cycles index canister will be reinstalled.

-------------------------

Severin | 2024-06-11 11:55:43 UTC | #63

The cycles ledger and the index have successfully been reinstalled and we reimbursed the accounts that existed before reinstallation.

-------------------------

rbole | 2024-06-25 05:14:18 UTC | #64

Hi, I have a question about the current state of the cycles ledger. Is it ready to use it in production right now  or itâ€˜s experimental right now? 

The reason why i ask is I found different opinions about that.

-------------------------

THLO | 2024-06-25 06:38:39 UTC | #65

[quote="rbole, post:64, topic:19895"]
Is it ready to use it in production right now or itâ€˜s experimental right now?
[/quote]

The cycles ledger is ready for use in production.

-------------------------

Severin | 2024-07-19 08:48:07 UTC | #66

We just submitted an [upgrade proposal](https://dashboard.internetcomputer.org/proposal/131362) for the cycles ledger.

The proposal adds a logo to the cycles ledger and fixes a bug where a newly created canister was controlled by the cycles ledger instead of the principal that asked the cycles ledger to create a canister for it. Thank you very much @chenyan for the bug report.

-------------------------

ZackDS | 2024-07-22 06:35:24 UTC | #67

The CodeGov project team completed reviews for the proposal and voted to adopt it. You can find details on [OpenChat](https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/168083459961697538699863191526193241390/116)

-------------------------

icme | 2024-07-27 22:05:18 UTC | #68

Are there plans for the cycles ledger to make it into the dfx nns extension?

-------------------------

THLO | 2024-07-30 06:50:07 UTC | #69

There are currently no such plans. What functionality would you like to see there?

-------------------------

icme | 2024-07-30 12:43:15 UTC | #70

To be able to install and import the cycles ledger locally via the dfx nns extension, or a specific dfx install cycles-ledger extension.

This would reduce adoption friction for those that want to test against the cycles ledger without needing to manually set things up by go to the by downloading the latest wasm from the GitHub releases page and then setting that up in dfx.

-------------------------

THLO | 2024-07-30 13:22:55 UTC | #71

The cycles ledger is [pullable](https://github.com/dfinity/cycles-ledger/blob/121f9cb9036b5587483ca3148c78ce38f5e69f9c/dfx.json#L10), so you can use [dfx deps](https://internetcomputer.org/docs/current/developer-docs/developer-tools/cli-tools/cli-reference/dfx-deps) to set it up locally.

Isn't this sufficient for your use case?

-------------------------

icme | 2024-07-30 13:41:21 UTC | #72

Ah, hadn't used the `dfx deps` feature yet :sweat_smile: - that should work great though, thanks :pray:

-------------------------

