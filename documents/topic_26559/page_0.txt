Jesse | 2024-01-12 19:58:44 UTC | #1

I have a motoko-based canister that I’d like to construct a self-authenticating principal for. I mean to retrieve the canister’s public key using the `ecdsa_public_key` function that is present within the canister manager interface. After retrieving the public key, how do I go about manipulating that public key in order to get a self-authenticating principal from it?

-------------------------

Samer | 2024-01-12 22:28:41 UTC | #2

You hash it and add the 0x02 byte to the hash
https://internetcomputer.org/docs/current/references/ic-interface-spec#principal

May I ask why?

And another question to anyone who can answer: will that principal be the same as the canister principle?

-------------------------

domwoe | 2024-01-13 10:31:49 UTC | #3

[quote="Samer, post:2, topic:26559"]
And another question to anyone who can answer: will that principal be the same as the canister principle?
[/quote]

No, the canister principal is essentially like a serial number.

-------------------------

Jesse | 2024-01-13 11:35:04 UTC | #4

Thank you! some functions within the NNS's governance canister are required to be called using a self-authenticating principal. So I've got to derive one in order to use them.

-------------------------

Samer | 2024-01-13 11:48:44 UTC | #5

So how are you making the call, if not an inter canister call whereby the canister principal is the caller?

Do you need `ecdsa_public_key` to call the NNS canister?

I might be missing something

-------------------------

Jesse | 2024-01-13 11:52:20 UTC | #6

I make the call via an HTTP outcall where the body is a request that has been signed by the canister and the sender of the call is the self-authenticating principal that I derive from the `ecdsa_public_key `.

-------------------------

Samer | 2024-01-13 12:08:44 UTC | #7

I see. So a HTTP out to icp-api.io? 
Curious to learn what we gain from this compared to inter canister call to nns?

-------------------------

