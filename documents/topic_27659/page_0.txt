peterparker | 2024-02-18 15:12:09 UTC | #1

Is it expected that generating two identities consecutively with agent-js would produce the same principal?

```
const tmp1 = Ed25519KeyIdentity.generate();
const tmp2 = Ed25519KeyIdentity.generate();
expect(tmp1.getPrincipal().toText()).toEqual(tmp2.getPrincipal().toText())); // success
```

I assumed the process would be randomized, but perhaps I misunderstood.

-------------------------

sea-snake | 2024-02-19 01:47:16 UTC | #2

I think a mistake was made in the lib: https://github.com/dfinity/agent-js/blob/166df8d729bf46fdd801df33884a6731d19a3265/packages/identity/src/identity/ed25519.ts#L109

It seems to have a line that generates a random seed when the seed is falsy but this line will never be true when no arguments are passed since the argument has a zeroed seed as fallback.

It should at least currently generate a random seed when you explicitly pass null as argument.

Change seems to be from November last year: https://github.com/dfinity/agent-js/commit/c115480b3b04eacf6e7d52847df043bdef505be1

Hopefully it didn't break any production dapps (create zeroed instead of random identities) ðŸ˜…

@kpeacock

-------------------------

peterparker | 2024-02-18 21:13:42 UTC | #3

Actually, if this function is supposed to genrate random principal, this can be dangerous because according my test `Ed25519KeyIdentity.generate()` generates always the same principal `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`!

-------------------------

peterparker | 2024-02-18 21:16:13 UTC | #4

[quote="sea-snake, post:2, topic:27659"]
It should at least currently generate a random seed when you explicitly pass undefined as argument.
[/quote]

Thanks. `undefined` does not work because if so, the seed is always set to the default value. A workaround is passing `null`.

-------------------------

peterparker | 2024-02-18 21:47:01 UTC | #5

:warning: It turns out to be some sort of risk for Juno devs. If you have manually created controllers in the past two months in Juno's console, please verify that none of your controllers are set to `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe`. If this applies, delete or replace it immediately!

The console has been patched with the above post's [workaround](https://forum.dfinity.org/t/ed25519keyidentity-generate-without-args-generates-same-principal/27659/4?u=peterparker).

-------------------------

peterparker | 2024-02-19 07:03:17 UTC | #6

:warning: Juno CLI is also impacted by this issue. If you are using `@junobuild/cli` version >= v0.0.44 to <= v0.0.50, please upgrade now. Additionally, double-check in the console that `535yc-uxytb-gfk7h-tny7p-vjkoe-i4krp-3qmcl-uqfgr-cpgej-yqtjq-rqe` is not assigned to any of your satellites, mission control, or orbiter!

Those versions have been deprecated on npmjs, and a hotfix, version v0.0.51, has been released: `npm i -g @junobuild/cli`.

-------------------------

Severin | 2024-02-19 12:01:28 UTC | #7



-------------------------

Severin | 2024-02-21 10:46:39 UTC | #8



-------------------------

Severin | 2024-02-21 10:47:23 UTC | #9

Resolved here: https://forum.dfinity.org/t/agent-js-insecure-key-generation-in-ed25519keyidentity-generate/27732

-------------------------

peterparker | 2024-02-21 10:56:00 UTC | #10

I'll share additional information on Juno's [discord](https://discord.gg/wHZ57Z2RAG) later today, as I've already informed the community on Sunday. However, concerning my previous posts, it's important to clarify that the problem was neither due to my misunderstanding nor my incorrect implementation, but rather a security issue with Agent-js, as described in the above-linked post.

Many thanks to the foundation's security team for their outstanding work in managing the incident over the past two days!

![image|603x315](upload://qHfvS79D8M48HfWGFREnWmKRUjB.jpeg)

-------------------------

