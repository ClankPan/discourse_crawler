qwertytrewq | 2023-09-13 23:52:13 UTC | #1

[This question](https://forum.dfinity.org/t/weird-simple-actor-does-not-compile/23017) shows that I can't import an actor.

So, if having several actors in `dfx.json`, how do I pass principals of canisters from one actor to another?

```
{
  "canisters": {
    "A": {
      "main": "src/A.mo",
      "type": "motoko"
    },
    "B": {
      "main": "src/B.mo",
      "type": "motoko"
    }
  }
}
```

For example, how to call B from A (if they are actors, not actor classes)?

-------------------------

qwertytrewq | 2023-09-13 23:51:24 UTC | #2

So, I can create a canister matching an interface, then initialize another canister with ID of the first canister, obtained like `dfx canister id B` and use that interface to access the first canister.

Is the above the recommended way to use single actors (not actor classes)?

-------------------------

Gekctek | 2023-09-14 05:07:17 UTC | #3

`import B "canister:B" `

https://dev.icpl.app/docs/language-guide/modules-and-imports.html#_importing_from_another_canister_smart_contract

-------------------------

rabbithole | 2023-09-14 09:28:59 UTC | #4

[quote="qwertytrewq, post:1, topic:23018"]
For example, how to call B from A (if they are actors, not actor classes)?
[/quote]
add `B` as a dependency to `A`

```json
{
  "canisters": {
    "A": {
      "main": "src/A.mo",
      "type": "motoko",
      "dependencies": ["B"]
    },
    "B": {
      "main": "src/B.mo",
      "type": "motoko"
    }
  }
}
```
then import in `A.mo`
```mo
import B "canister:B";
```

-------------------------

