saikatdas0790 | 2022-10-13 10:23:20 UTC | #1

The [install_code](https://docs.rs/ic-cdk/latest/ic_cdk/api/management_canister/main/fn.install_code.html)  function provided by the Rust CDK has a mechanism to pass arguments to the target canister as part of the `InstallCodeArgument` as documented [here](https://docs.rs/ic-cdk/latest/ic_cdk/api/management_canister/main/struct.InstallCodeArgument.html).

Is there a minimal example I can refer that demonstrates how to use this to correctly encode and decode  the argument that I wish to pass. I wish to be able to refer to that value in the `post_upgrade` as documented is [possible](https://docs.rs/ic-cdk/latest/ic_cdk/api/management_canister/main/struct.InstallCodeArgument.html#structfield.arg)

The argument that I wish to pass is a custom struct containing some primitive values.

Thoughts?

-------------------------

domwoe | 2022-10-13 10:55:43 UTC | #2

I think you just need to candid encode the struct, e.g. with https://docs.rs/candid/latest/candid/#operating-on-user-defined-structenum, but I haven't done this myself.

-------------------------

saikatdas0790 | 2022-10-13 11:08:46 UTC | #3

Thank you. Let me try and come back with findings

-------------------------

saikatdas0790 | 2022-10-13 12:13:09 UTC | #4

For someone else stumbling onto this,

The solution is to encode using [`candid::encode_args`](https://docs.rs/candid/0.8.2/candid/utils/fn.encode_args.html) as demonstrated in the example

And on the receiving end, use [`call::arg_data`](https://docs.rs/ic-cdk/latest/ic_cdk/api/call/fn.arg_data.html). Specifically, use the [turbofish syntax](https://techblog.tonsser.com/posts/what-is-rusts-turbofish) to parse it to the exact shape you expect it to be. 

Btw, it also requires them to be in a tuple even if passing a single argument.

This is what my code looks like:

## Sender side
```rust
let arg = candid::encode_args((version_number,))
                .expect("Failed to serialize the install argument.");
```

## Receiving side
```rust
call::arg_data::<(u64, )>().0
```

-------------------------

AdamS | 2022-10-21 23:07:29 UTC | #5

On the receiving side, if you are using `#[ic_cdk_macros::init]`, you can just add a function parameter, same as with `query` or `update`.

-------------------------

saikatdas0790 | 2022-10-25 03:34:01 UTC | #6

Oh, that's quite cool that it's taken care of by the CDK macro.

~~We really need to better document these nuggets of information~~

EDIT: It's already documented [here](https://docs.rs/ic-cdk-macros/0.6.1/ic_cdk_macros/attr.init.html#example)

-------------------------

AdamS | 2022-10-24 16:17:24 UTC | #7

It is documented in the `init` macro's docs :wink:

-------------------------

GLdev | 2022-10-25 06:22:45 UTC | #8

Hey, I've played with this before. Here's how I handled it:

1. In code, from rust to rust. You can create a struct however you'd like, and pass it in install_code, like so: https://github.com/GLicDEV/quickstart_scaling/blob/3c9a65ee19c0fa458d4ddc8582c76d7bd6dbdbdf/src/quickstart_scaling_index/src/businesslogic.rs#L253

On the receiving side, you get it like so: https://github.com/GLicDEV/quickstart_scaling/blob/3c9a65ee19c0fa458d4ddc8582c76d7bd6dbdbdf/src/quickstart_scaling_bucket/src/lifetime.rs#L34

2. For compatibility with dfx, and for automatic did generation, you can append your init function with the proper macro, as described here: https://forum.dfinity.org/t/how-to-pass-install-arguments-from-dfx/12977/1

Hope this helps

-------------------------

