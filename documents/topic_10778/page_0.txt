shashika | 2022-02-09 11:32:53 UTC | #1

Is there any way to extend the type without creating a new type containing similar properties as given in Typescript interfaces?
as an example, I have type like this
```
public type AuditRecord = {
        fileId: Text;
        action: Action;
        userId: Text;
        timestamp: ?Time.Time;
        organizationId: ?Text;
    };
```
I wanted to create a new type with additional properties like 
```
public type AuditOrgdto = {
        ...AuditRecord ,
      date: ?Text;
    };
```

-------------------------

rossberg | 2022-02-09 14:47:34 UTC | #2

You can use type intersection:
```motoko
type AuditOrgdto = AuditRecord and { date : ?Text };
```

-------------------------

shashika | 2022-02-09 11:42:41 UTC | #3

I tried that but I'm getting this error
```
syntax error [M0001], unexpected token 'and', expected one of token or <phrase> sequence:
  }
  <typ_args>?
  ; seplist(<dec_field>,<semicolon>)
  . <id>
  -> <typ>
```

-------------------------

rossberg | 2022-02-09 11:44:58 UTC | #4

What version of Motoko are you using? This should work since 0.6.12 from last October.

https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=1419889693

-------------------------

shashika | 2022-02-09 11:47:44 UTC | #5

My dfx version is dfx 0.8.4

-------------------------

rossberg | 2022-02-09 11:52:36 UTC | #6

Hm, apparently, SDK 0.8.4 still uses Motoko 0.6.11 by default. You should probably update your SDK to version 0.9.

https://smartcontracts.org/docs/release-notes/0.9.0-rn.html

-------------------------

shashika | 2022-02-09 11:57:14 UTC | #7

I upgrade the SDK. But I'm getting the same error.

-------------------------

shashika | 2022-02-09 12:03:24 UTC | #8

It worked. I have to change the version of dfx in dfx.json because I used package vessel package manager. Really thanks for the help  @rossberg.

-------------------------

jzxchiang | 2022-03-04 06:25:00 UTC | #9

It's a little strange how I can easily declare a type intersection like this, but I can't actually construct an object as easily.

For example, there's no support for:

```
{
  ...auditRecord,
  date,
}
```
like there is in JS... right?

-------------------------

shashika | 2022-03-04 06:31:38 UTC | #10

Yes, you are right. There is no spread operator in Motoko. But type intersection worked as expected for me.

-------------------------

manubodhi | 2022-06-21 08:06:16 UTC | #11

posting here believing you guys might be able to help
Is there any way to do this?
I am having a type 
```
public type DishType = { 
        name : Text;
        dishTypeId : Nat;
        parentDishTypeId : Nat;
        description: Text;
    };
```
and my data is 
```
record {3; record {parentDishTypeId=0; name="Main Course"; description=""; dishTypeId=3}};
```
Now if I want to update the `name = "Main Course"` field, what is the best way? How can i send only name to the backend? how can i make parameters optional? and how can i spread the name field to replace inside my api? 

This is my main.mo code
```
public func updateDishtype (dishType : Types.DishType) : async Result.Result<Types.DishType, Types.Error> {
        
        let existingDishType = dishTypeRepository.getDishType(dishType.dishTypeId);
      
        switch(existingDishType) {
            case null {
                #err(#NotFound);
            };

            case (? v) {
                dishTypeRepository.upsertDishtype(dishType.dishTypeId, dishType);
                #ok(dishType);
            };
        };

    };
```

This is the DishTypeRepository code

```
public class DishTypeRepository() {
    
    let dishTypesHashMap = HashMap.HashMap<Types.DishTypeId, Types.DishType>(0, isDishTypeIdEq, Hash.hash);

    public func upsertDishtype (dishTypeId : Types.DishTypeId, dishType : Types.DishType) {
      dishTypesHashMap.put(dishTypeId, dishType);
    };

    public func getDishType(dishTypeId : Types.DishTypeId): ?Types.DishType {
      return dishTypesHashMap.get(dishTypeId);
    };
}
```

-------------------------

ggreif | 2022-08-17 20:00:46 UTC | #12

It is coming: https://github.com/dfinity/motoko/pull/3084

-------------------------

jzxchiang | 2022-08-18 00:35:29 UTC | #13

[quote="ggreif, post:12, topic:10778"]
Field extensions/updates to existing objects by ggreif Â· Pull Request #3084 Â· dfinity/motoko Â· GitHub
[/quote]

The most exciting change since the BTC integration.

-------------------------

icme | 2022-08-18 02:12:50 UTC | #14

[quote="jzxchiang, post:13, topic:10778"]
The most exciting change since the BTC integration.
[/quote]

Motoko devs when we get some sweet sugary syntax that will save us hundreds of lines of code.

 ![Jack Nicholson Yes GIFs | Tenor](upload://d4SaSf6kqV2LRoUm4EhrziHfxwp.gif)

-------------------------

ggreif | 2022-08-25 13:14:23 UTC | #15

[quote="jzxchiang, post:13, topic:10778"]
The most exciting change since the BTC integration.
[/quote]

Thanks! As a quick heads-up I'll just point to https://github.com/dfinity/motoko/releases/tag/0.7.0, which contains the feature (and more :-). `dfx` will naturally lag a bit in picking this up, but if you are of the brave kind and want to give this a try, then feel free to download the binary. (And report back. Remember that `.0` caveats apply!) We'll do some broader messaging when it is readily available through the usual channels.

-------------------------

skilesare | 2022-08-25 13:25:20 UTC | #16

[quote="ggreif, post:15, topic:10778"]
Remember that `.0` caveats apply
[/quote]

What does this mean? ðŸ˜¬

-------------------------

ggreif | 2022-08-25 14:29:22 UTC | #17

Nothing nefarious, but the features are right out of the press and may contain minor bugs. We decided to jump from `0.6.30` to `0.7.0`, so that people pay attention and file bug reports!

See also the middle paragraph in https://mroach.com/2019/03/upgrades-and-dot-zero-versions.

-------------------------

ggreif | 2022-08-26 14:12:10 UTC | #18

In the Motoko Playground you can now take the 0.7.0 version to a test drive: https://forum.dfinity.org/t/motoko-playground-update-actor-classes-are-now-enabled/15071/4

-------------------------

