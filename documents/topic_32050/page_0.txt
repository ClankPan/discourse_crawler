kayicp | 2024-06-17 06:41:57 UTC | #1

for now this is my implementation: 
```
stable var tip_cert = MerkleTree.empty();
func updateTipCert() = CertifiedData.set(MerkleTree.treeHash(tip_cert));
system func postupgrade() = updateTipCert();

// whenever there's a new block
// ...
tip_cert := MerkleTree.empty();
tip_cert := MerkleTree.put(tip_cert, [Text.encodeUtf8(Constants.LAST_BLOCK_INDEX)], block_id);
tip_cert := MerkleTree.put(tip_cert, [Text.encodeUtf8(Constants.LAST_BLOCK_HASH)], block_hash);
updateTipCert();

// getting the tip cert
public shared query func icrc3_get_tip_certificate() : async ?Types.DataCertificate {
  let certificate = switch (CertifiedData.getCertificate()) {
    case (?found) found;
    case _ return null;
  };
  let index_witness = MerkleTree.reveal(tip_cert, [Text.encodeUtf8(Constants.LAST_BLOCK_INDEX)]);
  let hash_witness = MerkleTree.reveal(tip_cert, [Text.encodeUtf8(Constants.LAST_BLOCK_HASH)]);
  let merge = MerkleTree.merge(index_witness, hash_witness);
  let witness = MerkleTree.encodeWitness(merge); // CBOR encoded
  return ?{ certificate; hash_tree = witness };
};
```

*(did i miss anything important that i should add to my implementation? if so, pls let me know)*

As for the `hash_tree`, since it's CBOR encoded, I decoded it and it returned me this;
![image|690x109](upload://yn3Vx3QupNdmb5ulq5PsDARGvH.png)
not sure how to make sense from that. I want to get the `last_block_id` and `last_block_hash` to validate all blocks, but I dont know how to start.

and as for `certificate`, how do I verify it? or this is too low-level for me?
![image|690x374](upload://xJbpBMa4QSmuHIR8Ski3z1PYFFk.png)

in case you're wondering about `system func postupgrade() = updateTipCert();`, it's something i picked up from @nomeata 's [Certified Asset tutorial](https://gist.github.com/nomeata/f325fcd2a6692df06e38adedf9ca1877):
![image|690x342](upload://55gJzedi23H9CWjavGFrZuKCDpg.png)

-------------------------

skilesare | 2024-06-17 11:32:24 UTC | #2

I have some tests here: https://github.com/PanIndustrial-Org/icrc3.mo/blob/df223cdd9b3802e7504299edca166c72e6b2bc47/testActor/test_runner.mo#L105

Of course they assume that the underlying repindyhash module is correct x if you come up with any bright ideas, let me know as I'd love to add the tests here as well.

-------------------------

