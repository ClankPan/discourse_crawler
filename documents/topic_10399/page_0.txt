diegop | 2022-01-20 21:10:29 UTC | #1


Ahoy IC devs!

I would like to take the time to introduce Linwei Shang (@lwshang). Linwei has been working on the SDK team for a while now, more importantly he has been working to improve the Rust Canister developer experience.

The most notable changes are:

- `dfx` now recognize ‚Äúrust‚Äù type canisters
- `dfx new --type=rust` to start new project with Rust canister

For more details, please check out the following links:

- The refreshed Rust guide: [https://smartcontracts.org/docs/rust-guide/rust-quickstart.html](https://smartcontracts.org/docs/rust-guide/rust-quickstart.html)
- The cdk-rs repo which host `ic-cdk` crate: https://github.com/dfinity/cdk-rs
- The sdk repo which host `dfx` tool: https://github.com/dfinity/cdk-rs

I encourage folks to ping this thread or create new ones for any Rust developer experience questions. @lwshang is here to help.

-------------------------

lwshang | 2022-01-20 21:43:53 UTC | #2

Hi all, I'm Linwei, a software engineer in the SDK team.
It's my pleasure to support IC developers around the world, especially those who want to develop IC dapps in Rust.
Let me know if you have any questions or advices about Rust Canister Development.

-------------------------

lastmjs | 2022-01-21 00:39:21 UTC | #3

I'm really excited for an even better Rust CDK, which has been fantastic to work with already.

I could really use some help or guidance on this thread post: https://forum.dfinity.org/t/condvar-wait-not-supported/9052

and this issue: https://github.com/dfinity/cdk-rs/issues/7

I need to figure out how to perform an asynchronous operation from within a function that is not async. I have a dependency that has an API that requires a synchronous function. From within that synchronous function I need to call asynchronous functions such as to do a cross-canister call. This doesn't work and I really need to find a workaround.

Really if this issue could get resolved somehow that would do it: https://github.com/dfinity/cdk-rs/issues/7

I'm afraid I'm going to have to do some crazy engineering to get around this, I would love some help.

-------------------------

lastmjs | 2022-01-21 00:38:44 UTC | #4

See this comment as well: https://forum.dfinity.org/t/condvar-wait-not-supported/9052/3?u=lastmjs

I seem to run into a lot of issues with Rust futures when trying to get already-existing Rust libraries to run on the IC. Async code doesn't just work, and I wish it would.

-------------------------

GLdev | 2022-01-21 06:09:10 UTC | #5

[quote="diegop, post:1, topic:10399"]
`dfx new --type=rust` to start new project with Rust canister
[/quote]

It's certainly nice to have this option, but I feel the rust projects / workflows still need some love. Unfortunately the default binary coming out of dfx new --type rust + deploy can't be handled by the live IC out of the box. That's frustrating for the newcomers, especially since the tutorials and quick start guides are a bit incomplete on these issues.

Rick (from DSCVR) has shared some startup scripts, where they use the size optimization tool, and others already had the flow running from past versions of dfx, but I think it's a bit disappointing for new-comers to start a new project (with defaults) and be met by an error right out of the gate.

I'd suggest either promoting the "ic-cdk-optimizer" tool to the default install, or updating the docs with clear instructions highlighting that this would be a *required* step, or work with the team to support larger uploads on the replica, out of the box.

-------------------------

lwshang | 2022-01-21 21:00:39 UTC | #6

Hi @lastmjs, those two issues are realized by our team. We are considering them together with other upcoming improvements in Rust CDK. We want to provide a consistent develop experience.

-------------------------

lwshang | 2022-01-21 21:05:14 UTC | #7

Hi @GLdev, thanks for the advice.
When build a Rust type canister, dfx will suggest the user to install ic-cdk-optimizer if it is not installed.

-------------------------

rckprtr | 2022-01-21 21:46:20 UTC | #8

Common feedback is the DID file is not generated, is this possible? I saw a fleek example of them generating it but can't recall the github repo.

Rick

-------------------------

paulyoung | 2022-01-22 00:16:19 UTC | #9

[quote="lastmjs, post:3, topic:10399"]
I need to figure out how to perform an asynchronous operation from within a function that is not async.
[/quote]

@lastmjs, one workaround could be to model your effects as data.

That way, you would return a value from the synchronous function that represents the asynchronous operation you want to perform. You would then interpret the value in an asynchronous context to run it.

-------------------------

lastmjs | 2022-01-22 00:48:12 UTC | #10

I think I get what you're saying but unfortunately I don't think that will work. I have a very specific API that I must adhere to, boa the JavaScript engine provides me a way to basically hook up an FFI so that I can expose a Rust function as a JavaScript function.

The Rust function must be asynchronous because that is what the API expects. I basically give boa a Rust function and a name, and then from a JavaScript environment I can call that name and have the Rust function execute.

It seems like either boa needs to accept an async function, or the IC needs to allow me to resolve a future from within a synchronous function.

-------------------------

paulyoung | 2022-01-22 01:00:31 UTC | #11

@lastmjs I don‚Äôt want to derail the thread but I‚Äôm interested in this problem and trying to help you out.

If you could provide the link to the specific boa function you‚Äôre trying to work with, I‚Äôd like to take a look.

Outside of this thread is probably best üôÇ

-------------------------

rckprtr | 2022-01-22 17:42:11 UTC | #12

One more thing on DID generation, when Im browsing a repo, reading the DID lets me know what an application is trying to achieve.  So the fact that rust devs need to write their DID means it will be part of the repository, so I would like to keep this as a feature.  Next, I believe these DID files + comments will be used to generate documentation for your IC projects.  So if Motoko could by default drop the DID to the repo it would be nice.

-------------------------

lastmjs | 2022-01-22 18:04:31 UTC | #13

I appreciate the help! I've DMd you as you know.

For anyone else, I've created a very small example where you can try to tackle the issue. Just clone the repo and you can try to get it to work: https://github.com/lastmjs/test-ic-boa-async

-------------------------

lastmjs | 2022-01-22 18:14:37 UTC | #14

I agree, having it checked in is awesome, but generating it would be really nice. I plan to do this with Azle (TypeScript) and I don't foresee any issues with generating the Candid, so not sure why Rust wouldn't be able to do it as well.

-------------------------

kpeacock | 2022-01-22 19:51:33 UTC | #15

Wait, I thought more people knew about generating Candid from Rust code. You can see it in this thread: https://forum.dfinity.org/t/automatically-generate-candid-from-rust-sources/5924/3

and I set up auto-generation on my IC Canvas project because I cannot be bothered to hand-code a candid declaration. If you tag your methods, you can use the  `export_service()`  pattern to auto-generate: https://github.com/krpeacock/canvas/blob/main/src/canvas_backend/src/api.rs#L210

We definitely need to document this flow and add it to our Rust examples

-------------------------

chenyan | 2022-01-22 20:41:50 UTC | #16

I think we want to support both. A developer can choose to start with writing the did file and then generating the types and methods in the host language (similar to protobuf). Or they can start with writing the methods in the host language and then generating the did file.

-------------------------

rckprtr | 2022-01-22 22:21:55 UTC | #17

I agree, I really don't mind writing my own did file.  It really doesn't add that much work.

-------------------------

lastmjs | 2022-02-11 22:30:30 UTC | #18

Can we lift the binary size limit? I believe it's 2MB right now. That's really small. It's becoming a problem for the users of Sudograph, as once their GraphQL schema reaches a certain size they simply can't deploy their database anymore.

-------------------------

diegop | 2022-02-11 22:41:21 UTC | #19

@lwshang thought you may have an idea... or if a constraint set at lower layers (i suspect it is a constraint at lower layer.... but one you can communicate down the stack)

-------------------------

scarecrow | 2022-02-14 14:45:28 UTC | #20

It's good news for Rust developer. thank you. can we add function which generating candid file while cargo-candid build?  I think we can add new utility cargo-candid. @diegop @lwshang

-------------------------

scarecrow | 2022-02-14 14:48:32 UTC | #21

I think we can add new utility cargo-did or cargo-candid which responsible for both build and generating did file.

-------------------------

lwshang | 2022-02-14 16:14:34 UTC | #22

The size limit is likely a constraint from the canister execution environment. So I'm afraid we may not be able to bypass it in Rust CDK.
Let me confirm it with my colleague in execution team.

-------------------------

lwshang | 2022-02-14 16:18:18 UTC | #23

Thanks for the suggestion. We will carefully consider the options and provide consistent and ergonomic tools.

-------------------------

lastmjs | 2022-04-04 20:07:22 UTC | #24

Any update on this? Getting that 2mb limit higher is extremely important to Azle/Sudograph

-------------------------

diegop | 2022-04-04 20:17:06 UTC | #25

Let me ping @lwshang

-------------------------

roman-kashitsyn | 2022-04-04 21:53:14 UTC | #26

Hi @lastmjs !

The only improvement that I have in mind is GZIP-compressed canister modules.
I implemented them a couple of weeks ago (I found quite an elegant implementation that is backward-compatible with all the existing tooling). I can confirm they work on the mainnet:

```
$ curl -o ledger.wasm.gz -L https://download.dfinity.systems/ic/0618091c39002acee22d507bc7d3e79c0f173ba8/canisters/ledger-canister_notify-method.wasm.gz

$ shasum -a 256 ledger.wasm.gz 
27dd88e6070e0081e90e6a98c8d264dc205fe14f7c115b8df0acf3903cb826e7  ledger.wasm.gz

# Install the ledger on the mainnet...

$ dfx canister --network ic info 4d3iv-hqaaa-aaaag-qaf6q-cai
Controllers: 7czmi-pyaaa-aaaag-qaciq-cai jlcmz-cojlk-zdm46-mshzl-dtlre-ricph-khpzu-tqxrk-qo3ow-7jdsw-tae
Module hash: 0x27dd88e6070e0081e90e6a98c8d264dc205fe14f7c115b8df0acf3903cb826e7
```

Let me know if gzip compression helps in your case. Note that there is still 10MiB limit on uncompressed canister size.

-------------------------

lastmjs | 2022-04-05 13:54:13 UTC | #27

I'm sure this would help, 10MiB is much better than 2. Is this already live and in dfx? It would be nice if the dx didn't have to change.

And can you shed light or point me to info on why there is such a low limit?

-------------------------

roman-kashitsyn | 2022-04-05 14:34:52 UTC | #28

[quote="lastmjs, post:27, topic:10399"]
Is this already live and in dfx? It would be nice if the dx didn‚Äôt have to change.
[/quote]

Yes, I installed the compressed ledger above using DFX 0.8.3, which is rather old.
```json
{
  "canisters": {
    "ledger": {
      "type": "custom",
      "candid": "ledger.private.did",
      "wasm": "ledger.wasm.gz"
    }
  }
}
```

[quote="lastmjs, post:27, topic:10399"]
And can you shed light or point me to info on why there is such a low limit?
[/quote]

You mean the 2MiB limit?

I believe the primary reason for this limit is that we want to keep consensus blocks relatively small for better latency and efficiency. Reasonable message sizes are also important for XNet communication performance.

The ultimate solution would be to chunk large messages into pieces and allow partial message transfers. This feature introduces a lot of complexity and requires quite a few changes in the system, it is not scoped yet.

-------------------------

lastmjs | 2022-04-05 14:44:29 UTC | #29

What's the issue with chunking up the Wasm binary into multiple messages when first deploying? And will deterministic time slicing help (maybe that's what you're talking about)?

-------------------------

roman-kashitsyn | 2022-04-05 15:01:04 UTC | #30

[quote="lastmjs, post:29, topic:10399"]
What‚Äôs the issue with chunking up the Wasm binary into multiple messages when first deploying?
[/quote]

The question is whether this feature should work only for canister install messages or whether we want all messages in the system to be chunkable. Implementing chunking just for canister modules is not particularly hard, but it will need changes in a lot of tooling.

By the way, do you know what contributes to your canister size? 2MiB looks tiny for bloated modern software, but you can pack _a lot_ of logic into 2 MiB. This article has some excellent advice: https://rustwasm.github.io/book/reference/code-size.html

-------------------------

lastmjs | 2022-04-05 15:33:58 UTC | #31

I'm dealing with generated code for Azle and Sudograph, so proc macros and similar code generation type things. It's all a bit unoptimized now, but there is still a limit that will be reached. Each project takes the user's defined types and expands them to provide all sorts of functionality, so eventually that just adds up.

I think with my own optimizations plus gzip, we should be good for a while. Maybe for an easy path forward, could dfx automatically gzip? Otherwise it's just another thing we have to add to the installation process outside of the dfx build system probably.

-------------------------

cryptoschindler | 2022-04-07 08:16:51 UTC | #32

I think the gzip stuff should be promoted more widely, this is the first time I hear about this. I'll open a PR on the docs repo.

-------------------------

cryptoschindler | 2022-04-07 08:22:43 UTC | #33

https://github.com/dfinity/docs/issues/727

-------------------------

lastmjs | 2022-04-12 16:13:53 UTC | #34

I'm trying this out now. It seems to work when deploying to the IC, but does it not work locally? I am on dfx 0.9.3

-------------------------

roman-kashitsyn | 2022-04-13 08:04:28 UTC | #35

That's correct; the latest DFX has not yet shipped with a replica supporting gzip-compressed canisters. That's one reason I haven't announced the support for GZIP compression anywhere yet (except for this thread).

-------------------------

lastmjs | 2022-04-13 12:49:53 UTC | #36

What do you think about dfx just automatically gzipping the Wasm binary so the developer never has to do it manually?

-------------------------

roman-kashitsyn | 2022-04-13 16:01:38 UTC | #37

It depends on whether you care about build reproducibility. The replica exposes the SHA256 hash of the compressed module (it stores exactly the bytes that you've sent), and compression is not deterministic in general. I would not want automatic compression by DFX for canisters I work on: we use a custom build procedure anyways; we could just as well add a compression step there (1 extra line).

-------------------------

lastmjs | 2022-06-25 21:14:59 UTC | #38

@roman-kashitsyn I just upgraded from dfx 0.9.3 to 0.10.2-btcbeta.0, and now locally my Wasm files are too big. I've tried deploying the gzipped versions just like I've been doing in production and like you explained here, but they don't work locally on the new version of dfx.

So 0.9.3 let me install Wasm binaries locally over 2mb, but 0.10.2-btcbeta.0 doesn't and it won't let me install a gzip version with `dfx deploy`. Looking here: https://internetcomputer.org/docs/current/developer-docs/deploy/larger-wasm it says that `dfx deploy` isn't supported for gzip Wasm files.

Why is that? It was really nice just changing the file extension in `dfx.json`, now we'll have to do a command with a manual path to the binary every time. Will `dfx deploy` be supported in the future?

-------------------------

rckprtr | 2022-06-25 21:47:17 UTC | #39

So, if you want to test performance without waiting for a response.

Use the latest cdk-rs `0.5.2` and install DFX `0.10.1`.
Next open your dfx.json and set it to `0.10.2-btcbeta.0` and start your `dfx start`.
Then switch your dfx.json to `0.10.1` and build/deploy with the gzipd file.

Im getting an error also with the gzipd file on `0.10.2-btcbeta.0`

Rick

-------------------------

lastmjs | 2022-06-26 00:35:25 UTC | #40

It's all working for me, I just want to be able to use the .wasm.gz files with the `dfx deploy` command is all

-------------------------

lastmjs | 2022-09-22 03:15:45 UTC | #42

@roman-kashitsyn I'm working on Kybra, a Python CDK, and unfortunately I just ran into the Wasm binary size limit again, even with gzip. When I include the stdlib for Python using the RustPython VM, the binary after optimization and gzipping is ~10mb and it gets rejected. I hope I can get around this by optimizing somehow, but here I am reaching the limit again as I'm trying to implement the same tech we have on Web2.

-------------------------

roman-kashitsyn | 2022-09-22 20:37:15 UTC | #43

I believe the next step will be implementing a chunking protocol for the canister module installation. I created an IC feature for that in May, but there has been a lot of more urgent stuff on the execution's team plate (DTS & scheduling, firefighting & squeezing perf, bitcoin integration, etc.).

-------------------------

ovictor | 2022-09-23 03:31:53 UTC | #44

I have being using ss uploader:
https://forum.dfinity.org/t/icdevs-org-bounty-20-quickstart-dapp-scaling-with-canisters-200-icp-100-icp-50-icp-multiple-winners/11756/30?u=ovictor

It creates chunks of the wasm module, works very well!

-------------------------

lastmjs | 2022-10-04 22:37:35 UTC | #45

You're able to initialize a canister with this? How large can the Wasm binary be? My understanding is that there's still a ~10mb limit if you chunk the Wasm, is this true?

-------------------------

lastmjs | 2022-10-05 22:11:02 UTC | #46

Is there a public ticket/issue that we can follow? And FYI if the limit can be increased significantly it would unlock a major blocker for Kybra, which is allowing the inclusion of the entire Python stdlib: https://github.com/demergent-labs/kybra/issues/12

-------------------------

lastmjs | 2022-10-06 17:48:45 UTC | #47

@roman-kashitsyn Is it true that there is a 10mb limit on cross-canister messages? Could you then install a canister with a Wasm binary up to 10mb in size if you first chunked the Wasm binary into a canister, and used that canister to call install on the management canister?

I thought I read this somewhere in the past, but I'm having a hard time finding that information.

-------------------------

roman-kashitsyn | 2022-10-07 07:49:39 UTC | #48

[quote="lastmjs, post:47, topic:10399"]
Is it true that there is a 10mb limit on cross-canister messages?
[/quote]

Currently, the inter-canister message limit *within a single subnet* is 10 MiB, while the limit on messages *between subnets* is 2 MiB.

This setup is very problematic because it breaks the transparency of XNet communication. Generally, canisters should not care about the destination‚Äôs subnet when they make the call, except for this difference in max message size. This difference also blocks subnets splitting work: separating canisters can break people‚Äôs code because they might be sending large payloads, and separating them will break the code.

> I‚Äôm having a hard time finding that information.

Yes, the size difference is not documented anywhere, mainly because it‚Äôs a horrible hack that we don‚Äôt want people to use. I‚Äôm not sure why we raised the limit for inter-canister messages in the first place, my hunch is that someone really wanted to install a large canister :face_exhaling:

-------------------------

ovictor | 2022-12-11 16:23:10 UTC | #49

Sory for the late message. The code I have mentioned create chunks so you can upload a large wasm file.

-------------------------

lastmjs | 2023-04-24 14:10:03 UTC | #50

So the small Wasm binary limit is causing a lot of problems for Azle and Kybra, as documented and actively discussed here: https://forum.dfinity.org/t/allow-installation-of-large-wasm-modules/17372

We're starting to explore an interim solution beyond Wasm binary optimization and gzipping, as that is no longer enough in all use cases we have come across. The only remaining solution before the protocol-level Wasm binary limit lift seems to be to chunk upload to an intermediate canister, and have that canister install the Wasm binary to the destination canister.

> Currently, the inter-canister message limit *within a single subnet* is 10 MiB, while the limit on messages *between subnets* is 2 MiB.

My question is if this "hack" will hold until the Wasm binary limit can be lifted. Can we depend on this and introduce this as part of the official Azle/Kybra deploy process?

Also, how can I ensure that the intermediate canister and the destination canister are deployed into the same subnet? If they're not, then this hack cannot be used as the 10MiB limit would be reduced to 2MiB for a cross-subnet call.

Perhaps this is the answer to ensuring subsequent canisters are deployed to the same subnet? Each canister deployed from the same cycles wallet is automatically deployed to the same subnet? https://forum.dfinity.org/t/could-we-deploy-a-canister-on-a-specified-subnet/7936/4?u=lastmjs

-------------------------

Severin | 2023-04-24 14:13:13 UTC | #51

[quote="lastmjs, post:50, topic:10399"]
Each canister deployed from the same cycles wallet is automatically deployed to the same subnet?
[/quote]

That's correct. Every canister created through the management canister (as opposed to the CMC flow that uses ICP, not cycles) is created on the same subnet as the calling canister. This is the mechanism the cycles wallet uses. It doesn't have any special permissions to achieve this.

I'm not sure what happens if the subnet is full, but I don't expect that to be a problem

-------------------------

lastmjs | 2023-04-24 21:16:52 UTC | #52

Wait does the limit not include gzipping? I have a canister that is ~13MiB uncompressed, ~3MiB compressed but when installing from the intermediate canister using install_code I'm getting an error that it's over the 10MiB limit.

-------------------------

lastmjs | 2023-04-24 21:18:33 UTC | #53

I would think that a ~3MiB Wasm binary passed into install _code wouldn't trigger the 10MiB limit...

-------------------------

Severin | 2023-04-25 07:14:00 UTC | #54

That sounds _really_ weird. I'll ask the team about it.

Aside: Are you accidentally trying to install the non-gzipped one? That sounds like a mistake I could make...

-------------------------

dsarlis | 2023-04-25 07:42:07 UTC | #55

There's an additional 10MiB limit for the Wasm module at the runtime level. You're not hitting the inter-canister call limit here.

-------------------------

