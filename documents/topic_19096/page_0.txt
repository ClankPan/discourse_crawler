cymqqqq | 2023-03-26 09:55:39 UTC | #1

Hi everyone && Difinity teams, I have read all about the code of ckbtc minter, so I have some questions about ck-token here:
1. Is chain-key(t-ECDSA) only an attribute of the ck-token?
2. Are each transaction(includes mint, transfer, and approve, etc) should perform chain-key signature?
3. What else can we do for the chain-key signature in ck-token?

-------------------------

THLO | 2023-03-28 08:13:34 UTC | #2

Hi!
Let me try to answer your questions.

[quote]
1. Is chain-key(t-ECDSA) only an attribute of the ck-token?
[/quote]

I'm not sure what you mean by that. Did you read the [chain-key tokens page](https://internetcomputer.org/how-it-works/chain-key-tokens/)? If the information there does not answer your question, feel free to ask again!

[quote]
2. Are each transaction(includes mint, transfer, and approve, etc) should perform chain-key signature?
[/quote]

The transactions that have an effect on the blockchain where the underlying asset lives require threshold-ECDSA signatures.
In the case of ckBTC, only burning ckBTC requires threshold-ECDSA signatures because the underlying bitcoins must be transferred (on the Bitcoin blockchain).

[quote]
3. What else can we do for the chain-key signature in ck-token?
[/quote]

Threshold ECDSA makes it possible to get ECDSA signatures in a secure and decentralized manner. In theory, you can build any kind of dApp that uses/requires ECDSA signatures using this functionality.
As an example, the upcoming Ethereum integration also makes use of it to sign Ethereum transactions.

-------------------------

cymqqqq | 2023-03-29 10:39:11 UTC | #3

Hi THLO, thx for your answer, and:
for question 1, yes, I have read the chain-key tokens page, what I mean is that in ckbtc minter code, there is ecdsa public key in CkBTCRequestState datastructure, so personally, I think maybe it's an attribute of ckbtc.
for question 2, 

[quote="THLO, post:2, topic:19096"]
In the case of ckBTC, only burning ckBTC requires threshold-ECDSA signatures because the underlying bitcoins must be transferred (on the Bitcoin blockchain).
[/quote]
I have a question, for your word, why does mint ckBTC not need t-ECDSA? Because  when you mint a ckBTC, we need to transfer a BTC, then you can mint ckBTC,

-------------------------

Severin | 2023-03-29 10:45:51 UTC | #4

[quote="cymqqqq, post:3, topic:19096"]
why does mint ckBTC not need t-ECDSA? Because when you mint a ckBTC, we need to transfer a BTC, then you can mint ckBTC,
[/quote]

AFAIU it is not needed because transferring something *to* the ckBTC minter does not require a transaction initiated by the IC. It only has to check if the transaction arrived properly (unless it's transferred from some other account that's backed by some canister on the IC).

-------------------------

cymqqqq | 2023-03-29 11:03:07 UTC | #5

So you mean the minter just checks if the transaction arrived properly, and the burner process needs to perform a transaction, do I understand right?

-------------------------

Severin | 2023-03-29 11:48:52 UTC | #6

yes, that is correct

-------------------------

cymqqqq | 2023-03-30 01:29:19 UTC | #7

another question is, if we integrate with the eth network, and mint or burn a ckETH. Can we just do the same as the ckBTC?

-------------------------

benji | 2023-03-30 10:04:35 UTC | #8

In a very similar way, yes.

-------------------------

cymqqqq | 2023-04-15 07:19:38 UTC | #9

Hi there, I have been considering a new question these days:
When we transfer a btc token to a canister address on btc network and mint a ckbtc on IC, there is a t-ecdsa signed transaction sent to btc network.
So if I want to build a new native chain key token on IC, should I write a specific canister(or ledger like icrc1) for recording transactions(mint, transfer, and burn transaction) that are signed by t-ecdsa algorithm? Then we can query the t-ecdsa transaction hash in that canister.

-------------------------

THLO | 2023-04-17 11:33:41 UTC | #10

I think it would be a good practice to copy the ckBTC model: You can use a standard (e.g.  ICRC-1) ledger canister to manage balances and carry out transfers. An additional canister is used to mint and burn tokens and interact with the underlying asset. If ECDSA signatures are required to transfer the underlying asset, you would use the threshold ECDSA API here.

Of course, you may choose to pack everything into a single canister, or use more than two canisters...

-------------------------

cymqqqq | 2024-04-10 02:30:52 UTC | #11

Hi team, I'm here again, I have a question about the time of sending transaction to the bitcoin testnet, I just sent a transaction of ckbtc and returned a transaction id, but it can not be found in the mempool testnet. So it will take a long time to send a transaction from IC network?(I have waited about 1 hour)
https://mempool.space/testnet/tx/73aee260a498e6d0f8fce961b9fc98d4a54aadc8a2fc75bcc2ab97b27a3b79fd

-------------------------

THLO | 2024-04-10 07:12:36 UTC | #12

What do you mean by you "sent a transaction of ckbtc"?
Are you using the ckBTC codebase, connected to the Bitcoin testnet, and you called `retrieve_btc` (or `retrieve_btc_with_approval`) to transfer (test) bitcoins out?

Are you running your code locally or on mainnet? In either case, once the transaction is sent, it usually appears in the mempool after a few seconds.

-------------------------

cymqqqq | 2024-04-10 07:19:11 UTC | #13

Sorry, not ckbtc, I run the dfinity/examples/basic_bitcoin canister, then call the send transaction interface, and it returns a txid that is not found in the mempool.
https://github.com/dfinity/examples/issues/845(I posted on this issue)

-------------------------

cymqqqq | 2024-04-10 07:20:26 UTC | #14

:slight_smile: Maybe the code is out of date, I will check it later.:)

-------------------------

THLO | 2024-04-10 11:41:53 UTC | #15

Sounds good. Let me know if the issue persists!

-------------------------

cymqqqq | 2024-04-15 01:28:10 UTC | #16

Hello again, I visited the ckbtc transaction in the dashboard.internetcomputer website, so that is: I filtered the transaction from ICP=>BTC(transfer ckbtc to btc), then I can see the following data:
![image|141x500](upload://oQyprManG51v5alP7AmWzYmC6gM.png)
Then I have a new question: how do we track the transaction submitted to the bitcoin network, there is no transaction hash here(we can track the txid in the mempool).

-------------------------

cymqqqq | 2024-04-15 08:31:23 UTC | #17

New question: I read the https://internetcomputer.org/docs/current/references/ic-interface-spec/#ic-bitcoin_send_transaction again, here are the words:
If the transaction passes these tests, the transaction is forwarded to the specified Bitcoin network. Note that the function does not provide any guarantees that the transaction will make it into the mempool or that the transaction will ever appear in a block.
So, the `bitcoin_send_transaction` returns a txid, how do we check it(Or track its transaction on btc network) ?

-------------------------

cymqqqq | 2024-04-15 10:12:14 UTC | #18

So, the ckbtc minter first submits a transaction by a bitcoin canister API, then the submitted transaction is sent to the bitcoin adapter, then the adapter sends it to the bitcoin network, right?
Now maybe I know why I can not find the txid in the mempool, maybe the transaction was not sent to the bitcoin adapter.

-------------------------

PaulLiu | 2024-04-15 10:21:25 UTC | #19

Each successful BTC->ckBTC mint transaction contains a memo. For example, [this transaction](https://dashboard.internetcomputer.org/bitcoin/transaction/1366657) has a memo field that reads:

```
8200835820cdc257ab5d4ce0e240d1dc417d79c68130c1d8b56b91ce448eb093303b246ca0001907d0
```

This is a bytes (in hex) encoded using the CBOR encoding. Using a [CBOR decoder](https://cbor.me/?bytes=8200835820cdc257ab5d4ce0e240d1dc417d79c68130c1d8b56b91ce448eb093303b246ca0001907d0) it shows following record:

```
82                                      # array(2)
   00                                   # unsigned(0)
   83                                   # array(3)
      58 20                             # bytes(32)
         CDC257AB5D4CE0E240D1DC417D79C68130C1D8B56B91CE448EB093303B246CA0 # "\xCD\xC2W\xAB]L\xE0\xE2@\xD1\xDCA}yƁ0\xC1صk\x91\xCED\x8E\xB0\x930;$l\xA0"
      00                                # unsigned(0)
      19 07D0                           # unsigned(2000)
```

The first number `unsigned(0)` means it is a `Convert` message (according to the schema [defined in Rust code](https://github.com/dfinity/ic/blob/c22a5aebd4f26ae2e4016de55e3f7aa00d086479/rs/bitcoin/ckbtc/minter/src/memo.rs#L25)):

```
    Convert {
        #[cbor(n(0), with = "minicbor::bytes")]
        /// The transaction ID of the accepted UTXO.
        txid: Option<&'a [u8]>,
        #[n(1)]
        /// UTXO's output index within the BTC transaction.
        vout: Option<u32>,
        #[n(2)]
        /// The KYT check fee.
        kyt_fee: Option<u64>,
    },
```

If we read further the decoded CBOR data, we can see the following correspondence:

```
txid = bytes32("0xCDC257AB5D4CE0E240D1DC417D79C68130C1D8B56B91CE448EB093303B246CA0")
vout = unsigned(0)
kyt_fee = unsigned(2000)
```

BTC likes to have its txid stored in reversed order. so the actual txid to search in a block explore would be [`A06C243B3093B08E44CE916BB5D8C13081C6797D41DCD140E2E04C5DAB57C2CD`](https://blockstream.info/tx/a06c243b3093b08e44ce916bb5d8c13081c6797d41dcd140e2e04c5dab57c2cd). It shows that there is an output of `0.00242422 BTC`. If we then subtract the KYT fee of 2000 satoshi from it, the result would be the same as [the amount of ckBTC minted](https://dashboard.internetcomputer.org/bitcoin/transaction/1366657).

I know that this is a convoluted process of finding out the corresponding BTC transaction, because it was really meant to be automated by code. Hopefully we'll see such decoding included in a future version of the ckBTC transaction dashboard so that users don't have to do this manually.

-------------------------

Dylan | 2024-04-15 16:22:29 UTC | #20

[quote="PaulLiu, post:19, topic:19096"]
Hopefully we’ll see such decoding included in a future version of the ckBTC transaction dashboard so that users don’t have to do this manually.
[/quote]

Indeed, we are adding ckBTC memo decoding to the ICP Dashboard soon. It may be released as early as this week.
cc: @cymqqqq

-------------------------

cymqqqq | 2024-04-15 16:40:16 UTC | #21

Thanks for answering my question! Another question is: I wrote a bitcoin canister, then I sent a transaction from ICP to BTC, here I called the `send_transaction` interface(I also found it in the ckbtc minter source code), and it returns a txid, but I can not find it in the mempool or blockstream, so do I miss any steps? (I checked the ckbtc source code again and again, and found that maybe I need an adapter to send my transaction to the bitcoin network?)

-------------------------

PaulLiu | 2024-04-16 01:27:02 UTC | #22

[quote="cymqqqq, post:21, topic:19096"]
`send_transaction`
[/quote]

The `bitcoin_send_transaction` method does not return any value, according to the interface specification https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-bitcoin_send_transaction.

If you crafted your own bitcoin transaction (e.g. using some btc library), you can already calculate its txid. The `bitcoin_send_transaction` method only sends it out, but it does not promise that your transaction will be picked up by a bitcoin full node and become part of a future block. There could be many reasons for failures, the most common one is that your transaction blob is of a wrong format. You can debug this by trying to send the transaction yourself via bitcoin command line tools.

-------------------------

cymqqqq | 2024-04-16 01:38:15 UTC | #23

Yes, it doesn't return any value, I just call the transaction.compute_txid() for the rust_bitcoin 0.32.1 version.
Thanks for the answer! I will check the transaction blob.

-------------------------

