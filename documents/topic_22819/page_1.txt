JoakimEQ | 2023-12-05 16:03:48 UTC | #106

This is great! cant wait for the EVM RPC canister too!

-------------------------

timo | 2023-12-05 17:23:32 UTC | #107

The fee difference that I saw is explained by @gregory-demay s post above. The „reserved fee“ (aka estimated fee) was about 1 mETC higher than the actual network fee. That is more than 50% but less than 100% overestimation. Overestimation is unavoidable due to how Ethereum works. I think currently the minter doesn’t have a way to do refunds to the ckETH side. But in the future it can have that and any overpayment would go away.

-------------------------

Dylan | 2023-12-05 18:45:11 UTC | #108

ckETH support has been added to the ICP Dashboard.
https://dashboard.internetcomputer.org/ethereum

-------------------------

timo | 2023-12-06 22:12:33 UTC | #109

ckETH support has also been added to the ICRC-1 wallet at https://e4hv6-7yaaa-aaaao-a2ida-cai.icp0.io/

The wallet has been updated and the new version includes ckETH as a pre-defined token. The index canister is integrated. When you mint directly to your principal in this wallet then the transaction history show "Mint" as the source.

EDIT: An exchange rate source is also integrated to show the USD-equivalent value of balances.

Note that you currently cannot burn (aka withdraw to ETH) directly from this wallet because the wallet does not have ICRC-2 support and the withdrawal process requires that. You can withdraw by sending to your dfx principal first and withdraw from there by following the steps in the README that was posted above.

To try it out, the first person who logs in with the "Seed method" with seed "ckETH" and adds the subaccount whose index is "ckETH" in hex will find some milli ETH in there. Good luck!

-------------------------

gatsby_esp | 2023-12-06 00:12:04 UTC | #110

Is this a bug???
![IMG_5843|308x500](upload://krhaqbMDIItLswklLu9kFodsMSd.jpeg)

-------------------------

bogwar | 2023-12-06 03:18:20 UTC | #111

No, it's an ICRC2 approve transaction where the amount approved to be withdrawn can be bigger than the amount actually held on the account.

-------------------------

JMVR | 2023-12-08 02:16:09 UTC | #112

Is it possible right now to convert ETH to ckETH? How and where can I do it?

-------------------------

daijianlin | 2023-12-08 02:48:16 UTC | #113

Here is from Manu, it is working for me. FYI

[quote="Manu, post:95, topic:22819, full:true"]
I expect the token support in the NNS FE soon, but not conversions. [ICLighthouse ](https://iclight.io/account) has support for ckETH and conversions live, so you could give that a try.
[/quote]

-------------------------

timo | 2023-12-08 08:42:17 UTC | #114

[quote="JMVR, post:112, topic:22819, full:true"]
Is it possible right now to convert ETH to ckETH? How and where can I do it?
[/quote]

It is with dfx. The process described in this [README](https://github.com/dfinity/ic/blob/master/rs/ethereum/cketh/minter/README.adoc) works.

-------------------------

BitGonzi | 2023-12-08 11:36:01 UTC | #115

just minted, ckETH ... everything works fine, done it via etherscan, calls to helper contract

question on the the finality and block sync. How is finality determined? Fixed time passed of block epoch finality? 

My tx took abt 22 mins to show up on IC and the block epoch finality was reached a couple of mins earlier.

-------------------------

Manu | 2023-12-08 12:34:46 UTC | #116

the ckETH minter only looks at finalized blocks, and finality on ETH takes around 13 - 19 minutes. The ckETH minter does this periodically, ever 6 min it scans for new finalized deposits, so that adds 0 - 6 minutes.

-------------------------

lastmjs | 2023-12-08 15:14:01 UTC | #117

13-19 minutes? Can you explain? I thought that the block and epoch times were much more precise now, so we should really expect epochs to finalize in 12.8 minutes without much variability (12 sec block x 32 block per epoch x 2 epochs for finality). Just interested to understand this.

-------------------------

lastmjs | 2023-12-08 15:45:33 UTC | #118

I agree on the relative importance of ckUSDC. Do we have a thread for tracking ckERC20 and ckUSDC in particular?

-------------------------

gregory-demay | 2023-12-08 19:08:09 UTC | #119

Hi @lastmjs 

> we should really expect epochs to finalize in 12.8 minutes without much variability (12 sec block x 32 block per epoch x 2 epochs for finality)

You're absolutely correct. However, this is not the full picture. It also depends on the place of the block containing the mined transaction in its own epoch. This is because [Ethereum commitment levels are done per epoch](https://www.alchemy.com/overviews/ethereum-commitment-levels). So if a transaction was mined in the first block of its epoch, then it would only be finalized after waiting for the end of the current epoch plus two additional epochs leading to a waiting time of 19 minutes (`12s x 31 + 12s x 32 x 2`)

-------------------------

lastmjs | 2023-12-08 19:12:46 UTC | #120

Oh...I thought that all blocks were finalized in the previous two epochs at each finalization point no matter which block...interesting

-------------------------

ICPSwap | 2023-12-09 16:10:58 UTC | #121

Hello everyone! We wanted to let you know that our ckETH minting page is now live. It's as simple as connecting your Metamask wallet for minting. Feel free to give it a try! https://twitter.com/ICPSwap/status/1733516179699089464

-------------------------

jennifertran | 2023-12-10 02:32:46 UTC | #122

Hello all, in addition to the [Ethereum section](https://dashboard.internetcomputer.org/) on the IC Data Dashboard, we also created a [Dune Dashboard on ckETH](https://dune.com/jennifertran/cketh).

We've included:
* Input a wallet address and check if it has owned ckETH (deposited to the helper contract)
* General data on deposits and withdrawals including TVL and volume
* Wallet addresses and Ethereum Name Service domains of depositors and withdrawers

Please let us know if there is any other data that you are interested in seeing!

-------------------------

stablemood | 2023-12-12 00:22:56 UTC | #123

When will we able to just send native ETH to the NNS just like BTC?

-------------------------

lmuntaner | 2023-12-12 10:38:41 UTC | #124

Hi @stablemood 

It's on the NNS Dapp roadmap, but now with the holidays and so, I can't estimate any date except to assure you that it's going to happen at some point.

-------------------------

hokosugi | 2024-01-01 23:04:40 UTC | #125


Is the gas cost fee for the "ckERC20" scheduled for the middle of this month ckETH? Or is it individual ckERC20?

What is the whereabouts of the ckETH fee (0.000002 ckETH). ckETH does not deserve it, as ICP's transfer fee is Burn, but ckETH has no user benefits such as deflation that Burn provides. If so, will the fees be converted to Cycles to pay for gas?

-------------------------

jennifertran | 2024-01-02 21:11:08 UTC | #126

Happy New Year all!

Here is a tutorial on [how to acquire ckETH](https://medium.com/dfinity/how-to-acquire-cketh-02d863c835fc). Please feel free to share!

-------------------------

Manu | 2024-01-31 12:15:12 UTC | #127

Hi everybody!

Now that ckETH is up and running, DFINTIY is shifting focus to ckERC20. 

**What is ckERC20?** 

Ethereum has many more valuable assets than just ETH, and many of them follow the ERC-20 token standard. With ckERC20, we plan to support "twin tokens" on ICP for a subset of those ERC20 tokens. For example, USDC is an ERC20 token, and (after the ckERC20 project is up and running) we would have ckUSDC on ICP. Similarly to ckBTC and ckETH, the ckUSDC token would be fully backed by native USDC which is held by a canister, and anybody can convert between USDC and ckUSDC. 

**How do we propose to build it?** 

The ckETH project currently consists of a standard ledger suite (consisting of a ledger canister, an index canister, and an archive canister) and the ckETH minter, which is responsible for converting between ETH and ckETH, and holding the native ETH that backs all ckETH. We propose to extend the ckETH minter canister to also support conversions for ERC-20 tokens. 

**Converting a native ERC20 token into ckERC20**

We propose to have an Ethereum smart contract specifically to help with ckERC20 deposits. To convert a native ERC20 token on ethereum into ckERC20, the user would
1. approve the ckERC20 helper smart contract to take some of their ERC20 tokens (eg, approve that the helper contract takes 10 USDC out of my account)
2. call the "deposit" function on the helper smart contract, specifying which ERC20 token the user wants to convert and the amount, and the user's ICP principal that would receive the corresponding ckERC20 tokens. The helper smart contract would take the specified amount of the user's tokens (as approved in step 1), emit an event showing that a deposit happened, and forward the funds to the ckETH minter EOA address (controlled via threshold ECDSA). 

This is all that the user needs to do. Behind the scenes, the ckETH minter will periodically look for such deposit events in finalized Ethereum blocks and mint the corresponding ckERC20 for the users. 

**Converting ckERC20 into native ERC20**

If a user has ckERC20, they can request to receive the native ERC20 token back. However, this would lead to an Ethereum transaction that costs gas in ETH. Our proposal is to let the user pay that fee in ckETH. The flow could then look like:
1. ICRC2 approve the ckETH minter to take some amount of ckETH 
2. ICRC2 approve the ckETH minter to take some amount of some ckERC20 token
3. call the ckETH minter requesting to withdraw some specified amount of some ckERC20 token to a specified Ethereum address

Behind the scenes, the ckETH minter will burn the user's ckERC20 and ckETH tokens, and submit an Ethereum transaction to send the user the native ERC20 tokens to the specified address. 

**How to manage all these ledger suites under NNS control?**

We propose to have ckERC20 all under NNS control. However, since every supported ERC20 token leads to a separate ledger canister suite, this may lead to many canisters that have to be upgraded via NNS proposals. We propose to introduce a "ledger suite orchestrator" canister. This LSO canister would be controlled by the NNS, and all ckERC20 ledger suites would be controlled by the LSO canister. This means we could have one NNS proposal to the LSO canister saying "upgrade all ledgers to version X", rather than requiring many separate proposals. The LSO would also be useful in keeping all these separate canisters topped up with cycles. 

**Which ERC20 tokens would be supported?**

We propose to start with USDC and USDT, as this would bring trusted stablecoins to the ICP ecosystem, and stablecoins are super important for DeFi. After that, more tokens could be added via NNS proposals. 

**Discussion**

Please let us know what you think! Suggestions, ideas, questions are all very welcome.

-------------------------

lastmjs | 2024-01-31 13:43:56 UTC | #128

I have a concern and some questions. I am not very familiar with the design of ckETH and these tokens yet. My concern is around Circle being able to freeze USDC addresses. I'm not arguing against their ability to do this for legal reasons, but I'm worried that if all ckUSDC is locked in the same smart contract on Ethereum, and that is reflected in a single or small number of USDC addresses on Ethereum, then any illicit activity could prompt the need for Circle to block all of ckUSDC on Ethereum, halting the ability to withdraw from ICP back to Ethereum.

Is this how the architecture works at a high level? Is this a valid concern if so?

If this is a valid concern, could ckUSDC be architected to not flow through one address on Ethereum, thus allowing individual addresses to be accountable for their own actions and removing the centralized point of failure for the entire bridge if Circle decides they must freeze an account?

-------------------------

christian | 2024-01-31 15:08:12 UTC | #129

Thanks Jordan! The concern is valid and is applicable to any kind of smart contract using one address to store all funds. In fact, this is how Circle also [blocked](https://www.theblock.co/post/162172/circle-freezes-usdc-funds-in-tornado-cashs-us-treasury-sanctioned-wallets) the Tornado Cash assets, IIRC.

In my opinion, this is not a problem of the architecture, but a consequence of the centralised nature of the asset. E.g. LUSD would not have any problems like this.

The proposed way of keeping separate deposits on separate addresses is not feasible, as ckUSDC tokens on the ICP side are fungible and the canister needs to be able to operate knowing that it has full access to all deposited ETH backing ckETH. If we would keep the deposits on individual addresses owned by this canister, then it would not be even possible to know in advance how much ETH the canister owns effectively: in contrast to the UTXO model, the ETH from every individual address would require an individual transaction with individual fees which can fluctuate arbitrary. For example, imagine that after a year the funds are scattered across millions of addresses, mostly with small balances.

-------------------------

Stefs-2142 | 2024-01-31 17:00:38 UTC | #130

This is very exciting news! It's a logical and expected development after the addition of ckETH. I'm confident that over time, you'll be able to expand the standards to ERC-721/1155 as well.

I wanted to share my perspective as an average DeFi user in EVM networks. With the development of L2 and some EVM-compatible sidechains, conducting daily transactions with stablecoins such as USDT, USDC on the main ETH network is becoming impractical due to high fees, sometimes exceeding the transaction amount itself. Do you plan to deploy canister groups for L2 and sidechains in the future? As far as I understand, this is a feasible task considering the similar RPC node interface. I believe that the availability of L2 and sidechains from IC will unlock a significant amount of liquidity. Thanks in advance for your response!

-------------------------

Manu | 2024-02-01 09:27:45 UTC | #131

> conducting daily transactions with stablecoins such as USDT, USDC on the main ETH network is becoming impractical due to high fees

Yes, that's a very good point. How much of a problem that is though depends on how people end up using ckERC20. I would imagine that for most users, converting small amounts of eg USDC into ckUSDC  or vice versa does not make sense due to the fees. Instead, they would just trade ckUSDC against ckBTC, ckETH, ICP, SNS tokens etc on ICP dexes like Sonic/ICPSwap/ICDex etc, with very low fees. The fact that it is possible to convert between ckUSDC and native USDC means it will always be worth approximately as much as USDC (otherwise there is an arbitrage opportunity, and for larger value conversions the transaction fee is irrelevant), which should ensure you always get a fair price on a DEX. 

If you have some small amount of ckUSDC and want to convert it to fiat, it's likely cheaper to trade ckUSDC/ICP on a dex, and send ICP to a CEX to convert to fiat. All of the above applies equally to ckBTC and ckETH.

> Do you plan to deploy canister groups for L2 and sidechains in the future?

DFINITY currently does not have concrete plans, but I do expect that in the future we would see eg ckArbitrumUSDC on ICP, perhaps DFINITY works on that at some point, or someone else in the ICP community creates it.

-------------------------

Sawyer | 2024-02-02 17:01:28 UTC | #132

Manu can there be a way to burn ckusdc back to usdc by not having two txns involving cketh for gas fees. It's a bad ux. Can't you just deduct from ckusdc for gas fees?

-------------------------

christian | 2024-02-02 17:46:53 UTC | #133

@Sawyer this would require a decentralized market with excellent liquidity for converting this ckUSDC to ckETH because the minter can only pay for the transactions with ETH. It's not really feasible on IC right now. Moreover, the bridging is not expected to be on the agenda of an average IC user, like it's not the case with Ethereum L2s as well.

-------------------------

hokosugi | 2024-02-02 21:35:18 UTC | #134


Has it been decided which token will pay the ckERC20 fee?
If it is in order, it will be ckETH, but I would like to be able to pay with each of my own tokens. If ICP is not required to pay for gas with native tokens, we can bring in non-crypto users who only hold ckUSDC or ckUSDT as payment.

-------------------------

Sormarler | 2024-02-06 12:52:36 UTC | #135

Agreed.  An integration with an L2 would be more beneficial as you can withdraw directly to a CEX address.

-------------------------

Don_W | 2024-02-06 20:04:39 UTC | #136

Good Idea. We need stable coins on IC. Only risk is what will be when eth blockchain will go down? Then this token might be worthless. Target picture would be better to have direct stablecoins minted on IC.

-------------------------

Sawyer | 2024-02-08 09:26:43 UTC | #137

Team what's the current timeline of launching these tokens as the ICP defi ecosystem seems to be holding its breath for native stablecoins or ck stablecoins?

-------------------------

Manu | 2024-02-08 16:06:30 UTC | #138

Our current very rough estimate is ~3 months, but of course we may run into unexpected issues that delay things.

-------------------------

ic.aitubi | 2024-02-14 15:53:37 UTC | #139

[quote="Manu, post:127, topic:22819"]
We propose to introduce a “ledger suite orchestrator” canister.
[/quote]

Does this mean that an NNS (self custody user) will be able to swap between USDC and ckUSDC, in the same way as what is now possible for ckBTC and ckETH?

-------------------------

Manu | 2024-02-14 16:44:05 UTC | #140

Yes exactly, the NNS FE and other front ends can support conversion between USDC and ckUSDC

-------------------------

Manu | 2024-03-14 14:36:11 UTC | #141

Heads up: ckETH is currently processing ETH -> ckETH deposits with a delay. This is due to cloudflare's ethereum gateway is one of the gateways that are used by ckETH, and cloudflare's gateway seems to have problems since yesterday's Dencun ethereum upgrade. The deposits will be processed eventually, as soon as the RPC providers used by ckETH report consistent data, which means as soon as cloudflare returns correct data.

-------------------------

marcpp | 2024-03-14 15:59:42 UTC | #142

But.. I thought we didn't depend on big tech :flushed:

-------------------------

christian | 2024-03-14 16:18:45 UTC | #143

The Ethereum integration is still in the so called "phase 1" stage (see [this post](https://forum.dfinity.org/t/long-term-r-d-integration-with-the-ethereum-network/9382) and attached links for more details). In this phase the IC minter canister fetches the Ethereum state from multiple providers (Cloudlfare, Anker, etc.) via HTTP outcalls and only if they all agree, uses this data.

-------------------------

marcpp | 2024-03-14 16:21:37 UTC | #144

Ah, great to hear, thanks! I'll take a closer look at that post.

-------------------------

diegop | 2024-03-14 16:35:20 UTC | #145

This shows some of the phases of the project:

https://internetcomputer.org/docs/current/developer-docs/multi-chain/faq/cketh-faq#can-you-provide-examples-of-current-applications-that-utilize-cketh

-------------------------

Manu | 2024-03-14 18:46:45 UTC | #146

Note also that ckETH currently prioritizes correctness and security over availability, as it requires cloudflare, publicnode, and ankr to all fully agree on the state of ethereum. Any disagreement means ckETH waits and tries again until agreement is found. This is great for security & correctness, as it's incredibly unlikely that cloudflare publicnode and ankr are all at the same time returning the same incorrect data. On the other hand, it sacrifices some availability, as one provider being incorrect/unavailable means delays in ETH<>ckETH conversions. 

This could easily be changed of course, so if this would happen more often, perhaps saying something like "3 out of 4 providers must agree" makes more sense.

-------------------------

ckMood | 2024-03-16 03:52:34 UTC | #147

Pretty sure you can.

-------------------------

Mutrix | 2024-03-17 12:09:03 UTC | #148

We've been waiting to long, for user experience, I think it's time to fix this.

-------------------------

Manu | 2024-03-18 20:16:02 UTC | #149

Quick update on this issue: we notice that the cloudflare RPC interface is still returning very strange responses, returning incorrect tx counts, omitting events, etc. We hoped it would perhaps resolve itself (nodes perhaps needing to resync after upgrade) but it hasn't, and we did not manage to get into contact with cloudflare to resolve the issue on their side. To that end, we submitted NNS proposal [128365](https://dashboard.internetcomputer.org/proposal/128365), which proposes to upgrade the ckETH minter to remove its dependency on cloudflare, replacing it with [LlamaNodes](https://llamanodes.com/). We expect that all pending ETH -> ckETH conversions would go through soon after the upgrade is adopted.

-------------------------

PaulVonVon | 2024-03-18 23:37:10 UTC | #150

Guys, any update on this? I've had ETH that I converted in to ckETH tied up on IC Light now for over 5 days. Massivly inconvenient. It's also not a small amount of funds that I have zero access to or a way of reversing.

Any update would be appreciated. 

Thank you.

-------------------------

PaulVonVon | 2024-03-18 23:44:49 UTC | #151

Sorry, ignore my question. Just saw this.

-------------------------

wpb | 2024-03-19 19:02:52 UTC | #152

The CodeGov team has reviewed this proposal ([128365](https://dashboard.internetcomputer.org/proposal/128365)) and voted to adopt.  Our results and comments can be found on OpenChat at [this link](https://oc.app/community/32l35-yaaaa-aaaar-aw57q-cai/channel/168083459961697538699863191526193241390/37).

-------------------------

Manu | 2024-03-20 08:10:04 UTC | #153

Proposal [128365](https://dashboard.internetcomputer.org/proposal/128365) was just adopted and the ckETH minter can read the Ethereum state again now that the problematic cloudflare RPC node was replaced. All pending ETH -> ckETH transactions have been processed.

-------------------------

PaulVonVon | 2024-03-20 08:38:35 UTC | #154

Great, thanks Manu for the update. Appreciate it.

-------------------------

christian | 2024-04-15 12:34:08 UTC | #155

Hi everyone,

Those who’re interested in testing the ckERC20 tokens, we have upgraded the **testing** version of the ckETH minter on ICP mainnet and added the Sepolia version of the USDC token to it.

You can obtain Sepolia ETH (from some faucet, like [this](https://sepoliafaucet.com/) or [this](https://www.infura.io/faucet/sepolia) or [this](https://faucet.quicknode.com/ethereum/sepolia)) and Sepolia USDC from [here](https://faucet.circle.com).

Once you have both the Sepolia ETH and USDC, you can deposit ETH to mint ckETH as before and deposit USDC to mint ckUSDC. Note that while you don’t need ckETH to deposit USDC, you will need it to withdraw ckUSDC and receive USDC back. Some of your ckSepoliaETH will be used by the minter canister to pay for the transfer transaction on the Sepolia testnet.

You can find all instructions [here](https://github.com/dfinity/ic/blob/master/rs/ethereum/cketh/README.adoc).

The canister IDs of ckSepoliaETH minter can be found [here](https://github.com/dfinity/ic/blob/master/rs/ethereum/cketh/testnet/canister_ids.json), and the ckSepoliaETH minter also exposes a [dashboard](https://jzenf-aiaaa-aaaar-qaa7q-cai.raw.icp0.io/dashboard) showing conversions and the corresponding Ethereum transactions both for ckETH and ckERC20 transactions.

Please note that you can also invoke the [get_minter_info](https://dashboard.internetcomputer.org/canister/jzenf-aiaaa-aaaar-qaa7q-cai) on the Sepolia minter dashboard to get all ids and ckERC20 tokens supported.

Note that there is no nice front-end yet, so you’ll have to be comfortable with some dfx calls especially for the last step. If you’re a developer and aim to support converting between ERC20 and the corresponding ck-twin token in your dapp, then you can also start experimenting with ckUSDC.

**Please keep the following in mind:**
* This is still under development, so things may break, and the state of the canister might be reset upon upgrades.
* It is expected that there are still bugs. Please help us make ckETH/ckUSDC rock solid by reporting those here.
* In case the instructions don’t work for you, please report back, and we’ll be happy to help and improve the instructions.

-------------------------

ICPSwap | 2024-04-16 18:29:31 UTC | #156

That's fantastic, huge news indeed! Thanks so much for the dedicated work of the DFINITY team!

-------------------------

vxyagr | 2024-04-19 03:40:10 UTC | #157

where can we check ckETH liquidity (and future ckUSDC)?

-------------------------

domwoe | 2024-04-19 06:42:44 UTC | #158

On the dashboard: https://dashboard.internetcomputer.org/ethereum.

I assume, that ckUSDC will be made available there as well.

-------------------------

Robert_Hon | 2024-04-21 04:45:39 UTC | #159

During the iteration process of ckETH and ckERC20, why not design extensive marketing campaigns and invite users from the entire blockchain market to participate in small-scale, large-scale testing activities transitioning from USDC to ckUSDC?

Dfinity should collaborate with Dapp and swap developers, using ICP or other SNS token airdrops as subsidies to invite more potential users to participate in minting and testing. Otherwise, relying solely on high-end development tools and professional developers will severely limit its impact. Even if ckUSDC is launched, the audience and user base will be very limited.

Many Layer 2 projects are adept at rallying a wide range of users for testing and airdrops. It is hoped that developers can learn from the excellent marketing techniques of other projects.

-------------------------

curry | 2024-04-23 09:04:01 UTC | #160

@christian @Manu It's been 5 hours and my ckSepoliaUSDC withdrawal is still pending.
![1713862220100|690x277](upload://qPFOpu9gDOOSdLtL6q27lnx6VRC.jpeg)
![1713862261921|690x273](upload://ziYn5IVLsET2kl4StA5hX0Czs2m.jpeg)

-------------------------

gregory-demay | 2024-04-23 10:14:42 UTC | #161

Hi @curry 

Looking at the logs, it seems there was unfortunately a huge spike of transaction fees on Sepolia and that explains why your withdrawal is currently not being processed, because the burned amount of ckETH currently doesn't cover the transaction fees. This should resolved itself, once the transaction fees decrease

In more details:

* Your withdrawal request was accepted around block [5_757_343](https://sepolia.etherscan.io/block/5757343), where the base fee per gas was `16` wei. 
* So the maximum transaction fee was evaluated as `((2 * base_fee_per_gas) + max_priority_fee_per_gas) * 65_000 == 97_500_002_080_000` , where the factor `2` accounts (most of the time) for potential increase in `base_fee_per_gas` and `max_priority_fee_per_gas` was in that case `1.5 gwei`. This amount was burn on the ckETH ledger to pay for the (future) transaction fee and so the corresponding transaction will not be crafted if the currently estimated transaction fee is higher than this value.
* The current (Block [5_759_470](https://sepolia.etherscan.io/block/5759470)) base fee per gas is `203_989` wei and the minter expects to have at least `97_524_096_930_000` wei to pay for the transaction fee.

-------------------------

gregory-demay | 2024-04-24 07:22:24 UTC | #162

Good news @curry 

As expected, once the fees were back to normal your withdrawal was processed by the minter and the corresponding Ethereum [transaction](https://sepolia.etherscan.io/tx/0x8b6a87a720d8a776fc188fe87ff4d3e30ef5f49cde96e0f1d485d693c934a158) was successfully sent.

-------------------------

simpson | 2024-04-25 06:09:00 UTC | #163

It's a pleasure to share that the ICLight front-end already supports. 

[quote="christian, post:155, topic:22819"]
Note that there is no nice front-end yet, so you’ll have to be comfortable with some dfx calls especially for the last step. If you’re a developer and aim to support converting between ERC20 and the corresponding ck-twin token in your dapp, then you can also start experimenting with ckUSDC.
[/quote]

-------------------------

Mico | 2024-04-25 14:16:58 UTC | #164

Yes it does. And yes it is super clean of a UI. :handshake:

-------------------------

gregory-demay | 2024-05-02 15:26:40 UTC | #165

Hi everyone,

An important update regarding ckERC20 on Sepolia: the deposit helper smart contract was [changed](https://github.com/dfinity/ic/commit/69788412804d0cc338a6a58bafa7c021f4ca87fb) to use OpenZeppelin SafeERC20 methods to be able to also support not fully ERC-20 compliant tokens (e.g. USDT) in the future. 

That means that ckERC20 deposits are only processed when going through the new helper smart contract:
1. Before: ~~[0xE1788E4834c896F1932188645cc36c54d1b80AC1](https://sepolia.etherscan.io/address/0xE1788E4834c896F1932188645cc36c54d1b80AC1)~~
2. Now: [0x70e02Abf44E62Da8206130Cd7ca5279a8F6d6241](https://sepolia.etherscan.io/address/0x70e02Abf44E62Da8206130Cd7ca5279a8F6d6241)

:information_source: As mentioned in the [doc](https://github.com/dfinity/ic/blob/master/rs/ethereum/cketh/docs/ckerc20.adoc#deposit-erc20-to-ckerc20), you should always retrieve the `erc20_helper_contract_address` from the `get_minter_info` endpoint before making a deposit. This is particularly relevant for front-ends.

-------------------------

honopu | 2024-05-11 06:25:36 UTC | #166

![image|690x466](upload://dcl1q8qxIyccWJL5SlwJuaYoCKR.png)

I think `token_id` is needed in WithdrawalDetail

-------------------------

Gotcha | 2024-05-12 10:22:28 UTC | #167

Seem like ckETH mint is experiecing serious delay (more than 24 hours by comparing ETH and ckETH mint trasactions timestamp), is there something wrong?

-------------------------

gregory-demay | 2024-05-12 18:47:53 UTC | #168

@Gotcha 

Looking at the logs it seems that one of the 3 JSON-RPC providers used (`eth.llamarpc.com`) is experiencing some problems since 2024.05.09. Locally this can be reproduced by making some concurrent requests, some of them being responded by an expected `502`, which could be the reason behind the many errors of the type `Canister http responses were different across replicas, and no consensus was reached` that the minter receives.

-------------------------

Manu | 2024-05-23 07:31:08 UTC | #169

Hi everybody! Good news, ckUSDC is now live on mainnet! With the acceptance of proposal [129750](https://dashboard.internetcomputer.org/proposal/129750), the ckERC20 "ledeger suite orchestrator" canister ([vxkom-oyaaa-aaaar-qafda-cai](https://dashboard.internetcomputer.org/canister/vxkom-oyaaa-aaaar-qafda-cai)) created a ledger & index canister for ckUSDC, and the ckETH minter canister is now also responsible for converting between native USDC and ckUSDC. The [ckETH minter dashboard](https://sv3dd-oaaaa-aaaar-qacoa-cai.raw.icp0.io/dashboard) now also shows its progress on converting between USDC and ckUSDC.  

The canister ids for all ckERC20 tokens can always be obtained from the ledger suite orchestrator canister's [get_orchestrator_info](https://dashboard.internetcomputer.org/canister/vxkom-oyaaa-aaaar-qafda-cai#get_orchestrator_info) method, which currently returns 

```
    managed_canisters = vec {
      record {
        erc20_contract = record { chain_id = 1 : nat; address = "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" };
        ledger = opt variant {
          Installed = record {
            canister_id = principal "xevnm-gaaaa-aaaar-qafnq-cai";
            installed_wasm_hash = "4ca82938d223c77909dcf594a49ea72c07fd513726cfa7a367dd0be0d6abc679";
          }
        };
        index = opt variant {
          Installed = record {
            canister_id = principal "xrs4b-hiaaa-aaaar-qafoa-cai";
            installed_wasm_hash = "55dd5ea22b65adf877cea893765561ae290b52e7fdfdc043b5c18ffbaaa78f33";
          }
        };
        archives = vec {};
        ckerc20_token_symbol = "ckUSDC";
      };
```

Instructions on how to use the backend canisters can be found [here](https://github.com/dfinity/ic/blob/master/rs/ethereum/cketh/docs/ckerc20.adoc), and I expect that many dapps will have nice front-end support for ckUSDC soon. The [dashboard](https://dashboard.internetcomputer.org/ethereum/xevnm-gaaaa-aaaar-qafnq-cai) already has support showing all ckUSDC transactions. Please share any feedback / issues / questions in this forum thread!

-------------------------

Roman | 2024-05-23 08:01:17 UTC | #170

Congratulations to you all. You all are stars.

-------------------------

ICPSwap | 2024-05-23 08:41:55 UTC | #171

Many thanks to Manu and the DFINITY team for hard work! Congratulations on the launch of ckUSDC!

DFINITY (ICP) Happy 3rd Anniversary! 🎉

The minting and dissolving functions for $ckUSDC are live on ICPSwap: https://app.icpswap.com/wallet/ckToken?type=mint&tokenId=xevnm-gaaaa-aaaar-qafnq-cai

-------------------------

DHemingway | 2024-05-23 11:43:41 UTC | #172

ShibaInu looks like the next largest ERC20 token by MC and has over 1 Million holders. Shiba coming next week?

-------------------------

skilesare | 2024-05-23 13:59:33 UTC | #173

Amazing achievement! Congrats. You have unlocked 18 items on my todo list. This is rocket fuel.

-------------------------

Sormarler | 2024-05-23 18:22:44 UTC | #174

Congratulations! Job well done! 

Now how hard would it be to support other USDC from other EVMs like Avalanche and L2s?

-------------------------

roman-kashitsyn | 2024-05-24 08:39:56 UTC | #175

Amazing! Great work, folks! Perfect present for the third anniversary.
@gregory-demay, you are a superhuman.

-------------------------

gregory-demay | 2024-05-24 08:58:11 UTC | #176

Thanks a lot @roman-kashitsyn for the kind words!

-------------------------

Jdcv97 | 2024-05-25 04:50:04 UTC | #177

That’s useless, why would you want usdcs from a lot of different blockchains, sounds like losing valuable time

-------------------------

kolexstrings | 2024-05-29 07:40:45 UTC | #178

Please is there a guide on how I can get some USDC on the Sepolia testnet, I tried using the Circles faucet and after pasting my Metamask address I don't recieve any Sepolia USDC

-------------------------

Manu | 2024-05-29 07:43:04 UTC | #179

I think the circle faucet is the only way unfortunately. You can also DM me your address and i'll send you some testnet USDC.

-------------------------

asjn3e | 2024-05-29 16:35:30 UTC | #180

Hey everyone, 
Hope you're having a great time, i just went trough the ckETH smart contract code, and i found the event only accepts the principal id, so if i understood it right, there is no way to specify in which subbaccount of that principal id we can mint the ckETH to. If that's the case, considering that the updating process for ETH smart contracts are not so easy, will it be possible in the future to add this functionality to specify the subAcoount?

-------------------------

christian | 2024-05-30 08:31:11 UTC | #181

In the future, we could add a new smart contract and make the minter parse minting events from both of them, yes.

Could you explain please the use case for subaccounts you have in mind?

-------------------------

asjn3e | 2024-05-30 14:12:11 UTC | #182

Thank you so much for the reply,
If that second smart contract could be added, would be amazing.
I'm working on a cross-chain swap POC, that allows all the users to swap a token from blockchain A to blockchain B. The core of the swapping mechanism is a canister on icp which manages the whole process. Since I want to make this crosschain swap in a way that user does not need to connect or provide an ICP wallet, the tokens need to be deposited in a specific subaccount for each user in that canister.
That is one the models i though about and i found the best. 
Do you have any suggestions related to it?

-------------------------

christian | 2024-05-30 15:18:10 UTC | #183

Is my understanding correct, that you want to "bridge" the tokens from external blockchains to ICP, then swap to another ck-* token and then bridge back to the destination blockchain on every such swap? If yes, that might be more slow and expensive than needed. Instead of maintaining IC liquidity pools, you could consider maintaining the liquidity in the native pools of corresponding blockchains and then use the EVM RPC canister (I assume we're talking about EVM blockchains) to orchestrate them?

-------------------------

asjn3e | 2024-05-30 16:46:49 UTC | #184

The reason i am considering this way despite being slow, is cheap fees. once the token is minted in icp the fees are relatively cheaper and due to reverse gas model all the hassle related to the gas fees on EVM chains will be removed. but your point is also valid. we still have to decide on that.

-------------------------

asjn3e | 2024-06-01 03:58:41 UTC | #185

This question might sound dumb, but can you explain would it be possible to use Helios instead of relying on RPC providers for minter canister?

-------------------------

domwoe | 2024-06-05 12:29:44 UTC | #187

You would still need to call an RPC provider, but you could get responses that include merkle proofs (for certain requests). This means you wouldn't need to call multiple RPC providers to increase security. However, depending on the call you need to make, you might need a lot more calls, and AFAIK you can't get proofs for log inclusion yet (ckETH currently relies on listening for event logs), but there is ongoing work in the Ethereum community for better Light Client support.

-------------------------

domwoe | 2024-06-05 13:04:54 UTC | #188

[quote="asjn3e, post:185, topic:22819, full:true"]
This question might sound dumb, but can you explain would it be possible to use Helios instead of relying on RPC providers for minter canister?
[/quote]

Btw, have you seen that there is a PoC of Helios running in a canister? 

https://github.com/eigerco/ethereum-canister

-------------------------

asjn3e | 2024-06-06 15:02:38 UTC | #189

Thank you so much i will take a look into it

-------------------------

Gotcha | 2024-06-17 14:11:32 UTC | #190

ERC20 withdraw is stuck, problem from RPC nodes?

-------------------------

christian | 2024-06-17 14:23:08 UTC | #191

Yes, see the [minter's logs](https://sv3dd-oaaaa-aaaar-qacoa-cai.raw.icp0.io/logs):

> {"timestamp":1718397532829896092,"priority":"Info","file":"rs/ethereum/cketh/minter/src/deposit.rs","line":385,"message":"Failed to get the latest finalized block number: ConsistentHttpOutcallError(IcError { code: SysTransient, message: \"Canister http responses were different across replicas, and no consensus was reached\" })","counter":5405}

One of the providers returns a deviating result, so the minter keeps trying until consistent results are delivered.

-------------------------

christian | 2024-06-18 13:45:02 UTC | #192

Quick update: we still have a couple of transactions stuck. Why?

This issue is an unfortunate combination of two independent problems that have overlapped yesterday: first one of the RPC providers returned inconsistent results, then the fees have spiked and still didn't come down (see the gas heat map over the last 24h: https://beaconcha.in/gasnow).

The problem will definitely resolve itself as soon as fees go down a bit more.

Why are some of the transactions getting processed?

This is because when a transaction is created, the fee is estimated according to the current fee and gets attached to the transaction (because a corresponding amount of ckETH was burned already). When some people created their TXs yesterday, the fee was low, but the minter could not process these transaction because of the aforementioned error regarding the RPC providers. So now it always retries, but discovers a much higher fee and then puts these transactions back to the end of the queue.

Sorry for the inconvenience everyone! We're **already** working on making the minter more resilient, but it will take time.

-------------------------

kolexstrings | 2024-06-19 05:42:27 UTC | #193

When I try to mint ckETH from ETH following the outlined steps in the documentation using Etherscan to call the deposit method of the helper smart contract, it works fine, but when I try to implement this with code, that is, calling the smart contract from my code, I receive an error that the transaction fails because of this very huge gas fee that is required. I am most likely missing something here because it does the same thing for ckUSDC as well.
![metamask|690x185](upload://6jSTxDNvB0olejtVVGqPUYTyRMD.png)

-------------------------

Manu | 2024-06-20 11:15:42 UTC | #194

It seems like you're not creating a valid transaction with sufficient gas attached, which your wallet does for you if you call the smart contract via etherscan.

-------------------------

Mar | 2024-06-27 09:46:30 UTC | #195

Hi Manu,

Apologies if this has already been addressed, but is it possible to add ckstETH? Thanks!

-------------------------

gregory-demay | 2024-07-22 07:51:12 UTC | #196

Hi everyone :wave: !

A couple of updates regarding ckERC20:

1. *Simplify adding new ckERC20 tokens*. After having written a few proposals to add new ckERC20 tokens and communication with the community (e.g., see [Proposal to add OCT as a new ckERC20 token](https://forum.dfinity.org/t/proposal-to-add-oct-as-a-new-ckerc20-token/32108)), we realized that the arguments for the ledger suite orchestrator to add a new token could be greatly simplified. This requires, however, an upgrade of the ledger suite orchestrator, which is planed by proposal [131373](https://dashboard.internetcomputer.org/proposal/131373) (that proposal also plans on upgrading the managed ledger suites, see the proposal summary for more details). If the proposal is executed, any token afterwards will be able to use the new simplified syntax, as shown in the documentation on [Adding a new ckERC20 token](https://github.com/dfinity/ic/blob/1925b70649dd7f83f91aba61fb7ecbf891bc6a32/rs/ethereum/ledger-suite-orchestrator/README.adoc?plain=1#L83).
3. *Add new ckERC20 token: ckUSDT* ![ckUSDT-token|360x360, 10%](upload://sjaQLyscDFINUfpid8UgU00l2d2.png). [Proposal 131374](https://dashboard.internetcomputer.org/proposal/131374) plans on adding ckUSDT, the twin token of [USDT](https://etherscan.io/token/0xdac17f958d2ee523a2206206994597c13d831ec7), which should be executed after proposal [131373](https://dashboard.internetcomputer.org/proposal/131373), since it uses the new simplified syntax mentioned above.

-------------------------

Stephen-Kimoi | 2024-08-08 12:17:11 UTC | #197

Yes [circle's faucet](https://faucet.circle.com/) seems to fail the first few times you try acquiring sepolia USDC, I had to try like 5 more times for it to work on my end.

-------------------------

dfisher | 2024-08-13 21:59:00 UTC | #198

I’m sure everyone saw here the news on wBTC (on Ethereum) having a new structure to its custodian with Bitgo. Amazing how big wBTC is given how vulnerable wBTC is…

In any case, it got me wondering what the plans are to introduce ckBTC on Ethereum to compete with wBTC. It would also be great to have ckBTC on Solana etc etc, and for it all to be managed inside of Oisy. 

Is this the current plan @peterparker ?

-------------------------

hokosugi | 2024-08-14 00:27:36 UTC | #199

There was an idea to bring CkICP to the Ethereum network as an ERC20 token. Could this concept be applied to bring ckBTC to ERC20 as well?

-------------------------

peterparker | 2024-08-14 04:15:24 UTC | #200

[quote="dfisher, post:198, topic:22819"]
Is this the current plan
[/quote]

Absolutely no idea. The others in this thread have probably more insight.

-------------------------

Lorimer | 2024-08-14 06:10:59 UTC | #201

There are up and coming SNS projects working on this. @Bitomni is one -> https://forum.dfinity.org/t/upcoming-bitomni-sns-decentralization-sale/33384/36

There's also a very interesting project currently being designed/prototyped called Supersolid -> https://x.com/isaac_icp/status/1822312204147802429?t=RtWF35pfGfcZukHKfP4PGQ&s=19

-------------------------

hude | 2024-08-14 06:18:59 UTC | #202

ckBTC may be technically superior to Coinbase’s cbBTC, but once cbBTC becomes mainstream, ckBTC may not be used. There isn’t much time left.
Why don’t they create an ERC20 token?

-------------------------

