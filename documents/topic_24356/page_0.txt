josephgranata | 2023-11-02 14:38:13 UTC | #1

Good Day Folks,

We are struggling to find Rust or Motoko code that would allow us to receive ckBTC, convert it to ICP, and then to cycles so that we can create storage canisters for our users.

I did find this Motoko library: https://internetcomputer.org/docs/current/motoko/main/cycles.

But no guidance for Rust, and no examples yet on how to go from one type of IC coin to another. Especially from ckBTC to ICP, and then to cycles.

Can anyone point us to the right libraries / or examples please?

Thanks so much!

-------------------------

Severin | 2023-11-02 15:27:10 UTC | #2

To turn ckBTC to ICP you have to go through an exchange, which I don't know enough about. To turn ICP into cycles, you either want to use an exchange and then unwrap XTC (a form of wrapped cycles, see [dank](https://docs.dank.ooo/xtc/overview/)), or via the Cycles Minting Canister's [notify_top_up](https://github.com/dfinity/ic/blob/master/rs/nns/cmc/cmc.did#L198) function. For some Rust code that shows how to use it you can look at [how dfx does it](https://github.com/dfinity/sdk/blob/master/src/dfx/src/commands/ledger/top_up.rs#L72-L84).

-------------------------

domwoe | 2023-11-02 17:39:38 UTC | #3

@cakemaker1 @ICPSwap @bitbruce Do you have docs or examples to share?

-------------------------

josephgranata | 2023-11-03 04:45:39 UTC | #4

@Severin and @domwoe first thanks for the reply.

We truly want to avoid going through an exchange, unless that exchange can be automated, and the conversion can be programmed instead of doing it manually.

Given that the NNS supports ICP and ckBTC natively we were hoping that this conversion, at least the one from ICP to cycles could be done fully on-chain without an exchange. 

I would appreciate very much any news from @ICPSwap, @cakemaker1, or @bitbruce about this. We do not mind the exchange as long as it can be automated. 

As a suggestion, please do make the IC support this feature natively, it would be a huge improvement on all other chains. As of now, if there is truly no way to do this, it's bad news for any software that wants to automate the creation of canisters for users. We want to do precisely this, take ICP or ckBTC from users and automate the creation of canisters for them, but for this we need cycles, and a way to convert those coins into those cycles.

I do hope it's possible.

-------------------------

ICPSwap | 2023-11-03 07:23:39 UTC | #5

Thank you for the mark, @domwoe , and thanks for the response, @Severin 

Hello, @josephgranata , I'd like to inquire further. Based on your requirements, there's a native method for ICP <> Cycles integration. Severin already mentioned.

And well, so we just aim to implement the method for ckBTC <> ICP. This will involve utilizing ICPSwap's interface to facilitate ckBTC swapping into ICP. The ultimate goal is to programmatically manage ckBTC <> ICP <> Cycles, and to create cycles storage canisters for your users.

Is this understanding correct? Will you intend to use a programmatic to interact with ICPSwap's interface for the swap functionality? If this is accurate, I will provide this feedback to the team to discuss potential solutions.

-------------------------

bjoern | 2023-11-03 07:52:00 UTC | #6

Just in case there is any confusion: Going from ICP to cycles is a functionality that is implemented by the cycles minting canister, which is part of the NNS. That transition, during which cycles are created and ICP is burned, is thus provided by the system and [described in the developer documentation](https://internetcomputer.org/docs/current/developer-docs/production/topping-up-canister#option-1-if-you-have-icp-on-your-account).

The route from ckBTC is a bit more complicated since it wouldn't make sense to _burn_ the ckBTC. So there needs to be some transition from ckBTC to ICP in the process. As @domwoe indicated, you can use [Sonic](https://app.sonic.ooo) or [ICPSwap](https://app.icpswap.com/swap) to swap ckBTC to ICP. Or, as @Severin indicated, you can even save some bucks by going through XTC, but that's probably a bit more complicated to automate.

-------------------------

timo | 2023-11-03 08:33:27 UTC | #7

What’s stopping us from calling Sonic and ICSwap from a canister?

-------------------------

josephgranata | 2023-11-03 17:27:32 UTC | #8

Bjoern,

Thanks for your answer, it does help, the docs you mention show how to use DFX to convert ICP to cycles and send them to a canister.

Now, where is the code to do this in Rust? How could we do this in a smart contract? DFX is coded in Rust, so for sure this is possible, how? If anyone can share where this is in the code, or an example that does it, it would help us a lot.

The reason we need to do this programmatically is that we intend to do the following:
- A user pays us to get a canister in the IC, that canister will hold their files, and will be used mostly for storage. To simplify, let's say that he pays using ICP. 
- Once we receive payment we must then convert that ICP into cycles and create, and initialize a canister for that user. That is why we need to automate the process, there could be way more users that we can manually handle, also the speed of software is much faster than a batch process.

About ckBTC, I do realize the process is much more complicated, and indeed we will need to use an exchange. I will continue that conversation with them.

Thanks.

-------------------------

josephgranata | 2023-11-03 17:35:46 UTC | #9

ICSwap,

I just re-read @Severin's answer, yes I noticed he does link to a canister top-up function of the NNS, I will have to examine the code, but it seems it is possible to convert ICP to cycles ourselves... I do hope so. Just for clarity, I repost here an explanation of what we intend to do, and the reason for the need for this conversion from ICP and ckBTC to cycles:

1.- A user pays us to get a canister in the IC, that canister will hold their files, and will be used mostly for storage. To simplify, let’s say that he pays using ICP or ckBTC.
2.- Once we receive payment we must then convert that ICP into cycles and create, and initialize a canister for that user. That is why we need to automate the process, there could be way more users that we can manually handle, also the speed of software is much faster than a batch process.

For ICP I think we have a clue thanks to @Severin's response.

For ckBTC or Bitcoin, how could we first tell our users to send the money to an address that we can somehow automate to pay your DAPP the fees for the exchange, and ultimately just have ICP for us to do the work for the user? Could you help us integrate with your exchange? Feel free to DM me, this is quite important for us.

-------------------------

josephgranata | 2023-11-03 17:37:21 UTC | #10

How to do it exactly, how to automate the whole process, as I explain on this thread, we receive tokens from users, we then use those tokens to buy canisters for the user. 

Automation with Sonic and ICSwap is easy to say, the problem is how, I am asking them here, and fortunately ICSwap is helping.

-------------------------

ICPSwap | 2023-11-04 06:59:01 UTC | #11

@josephgranata Sir. We Understood your requirements.

So, to address this, we will work on invoking the swap interface of ICPSwap through your program to convert ckBTC to ICP, correct?

We've sent you a private message containing the "Swap process and API interface" that ICPSwap uses for integration with other projects. Please check if it meets your needs for programmatic swap calls. If you encounter any other issues, feel free to reach out, and we can discuss and resolve them together. Thank you!

-------------------------

RMCS | 2023-11-04 07:46:13 UTC | #12

Here you have a code example for converting ICP to cycles.

This is based on the code that dfx uses to do the same thing. Note that the memo needs to be set correctly for the action you are trying to do and the “to” AccountIdentifier for the transaction to the CMC canister needs to have the correct subaccount.

And to explain how it works, you send ICP to the canister that holds this code, run the “top_up_self” with the correct args and the canister itself gets topped up. Which then could be used to spin up other canisters for example

Got this with the help of @Severin



https://github.com/Catalyze-Software/multisig_index/blob/master/src/logic/store.rs#L141

-------------------------

josephgranata | 2023-11-06 15:28:57 UTC | #13

Correct, I will review your document and come back to you.

Can you please DM you your email, or preferred instant messanger to chat about it?

Thanks!

-------------------------

josephgranata | 2023-11-06 15:31:15 UTC | #14

Thanks a lot RMCS, yes this is great and it shows @Severin's link in context.

So in your example, one canister gets cycles and it can use them to even create another canister correct?

-------------------------

ICPSwap | 2023-11-06 15:48:12 UTC | #15

Of course, you can DM me or contact us via "contact@icpswap.org"!

-------------------------

josephgranata | 2023-11-06 17:23:59 UTC | #16

I just DMed you a few questions, please reply :)

-------------------------

RMCS | 2023-11-06 22:30:12 UTC | #17

Yes there are 2 paths you can take;
- the one we use is where we add cycles to the “parent” canister that is doing the call to the CMC canister and spin up a “child” canister with an other call (which subtracts cycles from the parent canister)
- directly spin up a canister through the CMC by passing in the correct memo as seen in the link. 

https://github.com/Catalyze-Software/multisig_index/blob/master/src/logic/store.rs#L36

I do not have experience in directly spinning up a canister from the CMC, but it should be pretty straight forward. 

I prefer the method I choose because there is a single canister that holds all the cycles and all child canisters spun up from the parent canister are on the same subnet, this is valuable if you want to do composite query calls for example.

-------------------------

josephgranata | 2023-11-07 02:15:29 UTC | #18

Thanks for the extra information, we will take a look at this for sure. I am glad we are using Rust now, since all of this is Rust centric.

-------------------------

ICPSwap | 2023-11-07 04:07:57 UTC | #19

Got it, it has been forwarded to the team, and we'll get back to you with any updates. Thank you.

-------------------------

kayicp | 2023-11-07 07:24:34 UTC | #20

can one do this with Motoko?
if no, then how can I send ICP to a running canister so that the canister can convert it to Cycles and ready to consume it?

-------------------------

Severin | 2023-11-07 08:47:13 UTC | #21

Here's a snippet from one of my canisters. It uses ICP to `notify_create_canister`, but it shouldn't be too hard to adapt it to use [`notify_top_up`](https://dashboard.internetcomputer.org/canister/rkp4c-7iaaa-aaaaa-aaaca-cai#notify_top_up) instead.

    // transfer some ICP to CMC
    let ledger_response = await LEDGER.transfer({
      memo = CANISTER_CREATE_MEMO;
      from_subaccount = null;
      to = CMC_CREATE_ADDRESS;
      amount = { e8s = amount_e8s };
      fee = { e8s = 10_000 };
      created_at_time = ?{
        timestamp_nanos = Nat64.fromNat(Int.abs(Time.now()) - Nat64.toNat(n));
      };
    });
    switch ledger_response {
      case (#Ok(blockIndex)) {
        block_index := blockIndex;
      };
      case (#Err(#TxDuplicate(rec))) {
        add_to_latest_create_errors("TxDuplicate Error");
        // not that bad. can continue
        block_index := rec.duplicate_of;
      };
      case (#Err(#InsufficientFunds(_))) {
        add_to_latest_create_errors("Not enough ICP balance to create canister.");
        return;
      };
      case (#Err(#TxCreatedInFuture)) {
        add_to_latest_create_errors("TxCreatedInFuture Error");
        return;
      };
      case (#Err(#TxTooOld(_))) {
        add_to_latest_create_errors("TxTooOld Error");
        return;
      };
      case (#Err(#BadFee(_))) {
        add_to_latest_create_errors("Bad Fee. Unreachable.");
        return;
      };
    };

    // notify_create
    let cmc_response = await CMC.notify_create_canister({
      block_index = block_index;
      controller = THIS_CANISTERS_PRINCIPAL;
    });

    switch cmc_response {
      case (#Ok(new_canister_id)) {
        ignore Queue.pushBack(canisters_reserve, new_canister_id);
      };
      case (#Err(#Refunded({ reason; block_index }))) {
        add_to_latest_create_errors("Refunded because " # reason);
        return;
      };
      case (#Err(#Processing)) {
        add_to_latest_create_errors("Error: still processing");
        return;
      };
      case (#Err(#InvalidTransaction(reason))) {
        add_to_latest_create_errors("InvalidTransaction Error " # reason);
        return;
      };
      case (#Err(#Other({ error_code; error_message }))) {
        add_to_latest_create_errors("Other Error " # error_message);
        return;
      };
      case (#Err(#TransactionTooOld(_))) {
        add_to_latest_create_errors("TransactionTooOld Error");
        return;
      };
    };

-------------------------

kayicp | 2023-11-07 12:25:19 UTC | #22

[quote="Severin, post:21, topic:24356"]
```
created_at_time = ?{
  timestamp_nanos = Nat64.fromNat(Int.abs(Time.now()) - Nat64.toNat(n));
};
```
[/quote]
What is that `n` supposed to be? and what happens if I didn't supply the `created_at_time` value? Sorry I know this is supposed to be asked on a new post.

[quote="Severin, post:21, topic:24356"]
`to = CMC_CREATE_ADDRESS;`
[/quote]
Also, the address I should ICP to, will be `rkp4c-7iaaa-aaaaa-aaaca-cai` right? or should I convert it from Principal to Account with null subaccount?

edit: sorry I shouldve read the NNS Ledger documentation.

-------------------------

Severin | 2023-11-07 12:06:32 UTC | #23

Ah, right, should have scratched that line. It's part of circumventing some deduplication logic if you're triggering multiple transfers at once. Please disregard unless you run into errors because of deduplication. `Time.now()` should be just fine

-------------------------

