jakepeg | 2021-08-16 13:56:44 UTC | #1

I followed Kyle Peacocks tut on static site generators..

https://kyle-peacock.com/blog/dfinity/static-site-generators-ic

All was working until I upgraded dfx to 0.8. Now I'm getting a build error when deploying 

`Can't resolve 'dfx-generated/contacts'` in Actor.js

I've tried building the frontend then deploying the canisters, and tried deploying the canisters then building the frontend.

-------------------------

kpeacock | 2021-08-16 14:46:20 UTC | #2

I'll update that post today, thanks for the heads-up. The issue requires an update to the webpack configuration, which you can read here, or just wait for me to update the guide

https://sdk.dfinity.org/docs/release-notes/0.8.0-rn.html#_instructions_on_migrating_to_dfx_0_8_0

-------------------------

jakepeg | 2021-08-16 16:11:22 UTC | #3

Thatâ€™s great, thanks Kyle. Loving your tutorial series by the way

-------------------------

kpeacock | 2021-08-16 22:26:13 UTC | #4

Okay, I've updated the post and the https://github.com/krpeacock/ic-vcf-gatsby/ reference code

-------------------------

jakepeg | 2021-08-17 09:26:10 UTC | #5

Cool thanks.

On your readme, shouldn't it be "**dfx** deploy --network=ic" ? not "**npm** deploy..."

-------------------------

jakepeg | 2021-09-28 15:10:40 UTC | #6

It's broken again - probably me this time but I can't figure it out. I integrated Internet Identity and it seemed to work. I stopped the service and redeployed and it wont run the build of the pages now.

This is what I'm getting..

 ERROR #95313

Building static HTML failed


```
  31 |                 ? undefined
  32 |                 : self.fetch.bind(self)
> 33 |             : global.fetch.bind(global)
     | ^
  34 |         : window.fetch.bind(window);
  35 |     if (!result) {
  36 |         throw new Error('Could not find default `fetch`
implementation.');


  WebpackError: TypeError: Cannot read property 'bind' of undefined

  - index.js:33
    [doocoins]/[@dfinity]/agent/lib/esm/agent/http/index.js:33:1

  - index.js:66
    [doocoins]/[@dfinity]/agent/lib/esm/agent/http/index.js:66:1
```

-------------------------

kpeacock | 2021-10-06 08:07:17 UTC | #7

https://www.gatsbyjs.com/docs/conceptual/data-fetching/

You will need to either polyfill `global.fetch` during build time with `isomorphic-fetch` or something similar, or you can delay initializing your actor until the first page load, using a `useEffect` hook

-------------------------

peterparker | 2021-09-28 17:57:01 UTC | #8

If `agent` is not absolutely necessary for your pre-rendering, maybe you can also try to use the lib only on the client side (https://www.gatsbyjs.com/docs/using-client-side-only-packages/) ?

Just a guess though...

-------------------------

jakepeg | 2021-10-06 08:07:17 UTC | #9

I initialized the Actor in a useEffect hook. Like so..

```

  const initActor = () => {
    import("../declarations/doocoins")
    .then((module) => {
      const actor = module.createActor(module.canisterId, {
        agentOptions: {
          identity: authClient?.getIdentity(),
        },
      });
      setActor(actor);
    })
  };

  React.useEffect(() => {
    AuthClient.create().then(async (client) => {
      const isAuthenticated = await client.isAuthenticated();
      setAuthClient(client);
      setIsAuthenticated(true);
    });
  }, []);

  React.useEffect(() => {
    if (isAuthenticated) initActor();
  }, [isAuthenticated]);
```

-------------------------

