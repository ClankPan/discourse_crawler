skilesare | 2023-04-14 12:43:45 UTC | #1

# Motoko NoKey Wallet - #27a

## Current Status: Discussion

* Discussion (10/21/2022)

* Ratification

* Open for application

* Assigned

* In Review

* Closed

[Official Link](https://icdevs.org/bounties/2022/09/14/NoKey-Wallet-Motoko.html)

## Bounty Details

* Bounty Amount: $5,000 USD of ICP at award date - $5000 USD of ICP Match Available

* ICDevs.org DFINITY Foundation Grant Match Available: $2000 USD of ICP at award time - (For every ICP sent to 6e8afebab59f703356e189297e3f49fbe18ace5150ccc43f74f30ceb3f6b5ece, ICDevs.org will add $40 USD of ICP at award date to the bounty, up to the first 125 ICP donated, After 125 ICP, donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)

* Project Type: Team

* Opened: 09/05/2022

* Time Commitment: Weeks

* Project Type: Library

* Experience Type: Intermediate - Motoko;

## Description

This motoko class is allows for canisters to hold assets on other EVM based chains.

This bounty gives the opportunity to

* learn motoko

* learn about signing transactions

* learn about evm transactions

* learn about t-ecdsa

* learn about managing nonces

The NoKey wallet is a stable class that any Motoko canister can add that will allow it to act as a wallet for Evm-based chains. It should implement the following features:

* Derive a t-ecdsa key according to a consistent derivation scheme.

* Save that derivation for the user in a (Nat,Text) pair.

* Sign Evm-based transactions with a t-ecdsa key selected by the wallet owner. The transaction will be passed in as part of the sign function sign(rawtrx, {#derivation([Nat], #named(id)}, nonce, other Info?, saveHistory)

* Keep a history of signed transactions.

* Enable clearing the history

* Provide an upgrade strategy, preferably using stable vars.

* Suggest and follow a safe nonce generation/management scheme that protects the user.

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).

* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.

* Give an estimated timeline on completing the task.

* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates. Code commits count as updates if you link to your branch/fork from the bounty thread. We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work. We will review and award the bounty reward if the terms have been met. If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it. We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 6e8afebab59f703356e189297e3f49fbe18ace5150ccc43f74f30ceb3f6b5ece. ICDevs will match the bounty $40:1 ICP for the first 125 ICP out of the DFINITY grant and then 0.25:1 after that. All donations will be tax deductible for US Citizens and Corporations. If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org. More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).

## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty. Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post. The council will consider these as they come in and propose a vote to award the bounty to one of the applicants. If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

# Matches

DFINITY Foundation Grant: - $5000 USD of ICP at award date

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

LiveDuo | 2022-10-21 20:21:38 UTC | #2

We just applied for the Rust version of this bounty on https://forum.dfinity.org/t/icdevs-org-bounty-27b-nokeywallet-rust-up-to-10k/16055/2. 

This bounty is of potential interest for us too as it’s very similar. If not assigned elsewhere we will apply when we are closer to complete #27b (assuming we are assigned to #27b).

-------------------------

darkdrag00n | 2023-04-11 09:59:23 UTC | #3

Hi @skilesare, is this up for grabs? If yes and @LiveDuo is not available for this anymore, then I would like to work on it.

-------------------------

skilesare | 2023-04-11 17:32:45 UTC | #4

I have submitted it to be assigned. I expect it to pass:

https://77i6o-oqaaa-aaaag-qbm6q-cai.ic0.app/axon/1/proposal/41

Good luck.  I'd advise using the EVM utility canister for the actual EVM based stuff and keep the wallet management and nonce stuff in motoko:

https://forum.dfinity.org/t/completed-icdevs-org-bounty-28-evm-utility-canister-6-000/17880

-------------------------

darkdrag00n | 2023-04-23 20:28:57 UTC | #5

Thanks @skilesare!

I've started the implementation in the following repository: https://github.com/darkdrag00nv2/ic_no_key_wallet.mo

Added the basic structure of the project and support for creating address. Will keep you posted on future upates.

-------------------------

darkdrag00n | 2023-04-20 21:05:03 UTC | #6

Status update: I am ~75% done.

The following items are remaining:
- Implement getRecoveryId to derive the recovery id from s and v
- Encode txn in transferErc20
- Implement encoding sign support in evm utility canister - this is needed because currently the canister does not expose support for encoding signature data in the txn. Asked about it here - https://forum.dfinity.org/t/completed-icdevs-org-bounty-28-evm-utility-canister-6-000/17880/21?u=darkdrag00n and https://github.com/icopen/evm_utils_ic/issues/3. I'll see if I can implement it in the evm utility canister
- Tests and Bug fixes
- Documentation

-------------------------

darkdrag00n | 2023-04-23 20:34:42 UTC | #7

Status update: ~90% done

The following items are remaining:

* Getting https://github.com/icopen/evm_utils_ic/pull/4 merged in the EVM utility canister. I went ahead and exposed the support for encoding the signing information in the canister.
* Write some tests & fix bugs

-------------------------

darkdrag00n | 2023-04-24 21:30:49 UTC | #8

Actually, now I am a bit confused about the scope of this bounty and #32.

https://forum.dfinity.org/t/open-icdevs-org-bounty-32-evm-transactions-motoko-8-000/17884/15?u=darkdrag00n

[quote="skilesare, post:4, topic:16054"]
I’d advise using the EVM utility canister for the actual EVM based stuff
[/quote]

@skilesare Did we want to do this as this would mean that I make inter-canister calls from my library?

In #32, it is mentioned that we want to avoid async calls to a utility canister and the library from #32 is supposed to use this library for signing transactions. So if this library makes inter-canister calls, then how would the library from #32 avoid them? :thinking:

See https://forum.dfinity.org/t/open-icdevs-org-bounty-32-evm-transactions-motoko-8-000/17884/16?u=darkdrag00n

-------------------------

darkdrag00n | 2023-04-27 18:42:14 UTC | #9

@skilesare Gentle ping about my questions.

Basically, I have the following questions:
1. Am I correct in using the evm-util library for signing the transaction?
2. It seems like in #32 also, we are implementing signing transaction as well. So not sure why we want to repeat the same in here.

I'm parking this one up for now. Most of the work is done but I don't know if it aligns with what was expected in the bounty. Will pick it up once you're able to respond.

-------------------------

Mercury | 2023-07-16 16:01:27 UTC | #10

Hi, any updates on this? Thx :slight_smile:

-------------------------

skilesare | 2023-07-17 15:57:40 UTC | #11

@darkdrag00n I completely missed this message and it just bubbled up.  What do we need to get settled?  You should be able to use #32 as a resource and there is no reason for you rewrite it.

As far as signing goes, I'd imagine you would use t-ecda. To the extent that evm-utils uses tecdsa you can use it.

-------------------------

