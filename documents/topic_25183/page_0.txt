bytesun | 2023-12-01 05:54:30 UTC | #1

this is the sample code in document, but Hash.hash is **deprecated** as below picture, is there a better way to create a TrieMap?
![image|690x315](upload://uoBNTQQ9N7pRxXZ7AmjfGM2oUz1.png)


![image|690x315](upload://pq4KtlHUExadN3wi9yr3AskoPkX.png)

-------------------------

claudio | 2023-12-02 02:09:38 UTC | #2

The warning is just the Hash.hash is not a very good hash function because it only uses the least significant 32 bits of the Nat and you might want to supply your own function that uses all the bits of the Nat. If your Nats are actually smaller than 2^32, then you should be ok.

I'm sorry that we still don't have something better available, but we've been discussing options off-line.

-------------------------

skilesare | 2023-12-01 15:08:03 UTC | #3

You may want to look at https://github.com/ZhenyaUsenko/motoko-hash-map for better performance and more features.

-------------------------

tiago89 | 2024-01-01 09:04:51 UTC | #4

Claudio, this and post (https://forum.dfinity.org/t/field-hash-is-deprecated/14367) are still the first result when querying this problem, and unfortunately no example of a bespoke function is given (that can use >32 bits Nat).

I looked into Zhenya lib and this bespoke function seems to work:
```
public func hashNat(key: Nat): Nat32 {
    var hash = Prim.intToNat64Wrap(key);

    hash := hash >> 30 ^ hash *% 0xbf58476d1ce4e5b9;
    hash := hash >> 27 ^ hash *% 0x94d049bb133111eb;

    Prim.nat64ToNat32(hash >> 31 ^ hash & 0x3fffffff);
  };
```
(Source: https://github.com/ZhenyaUsenko/motoko-hash-map/blob/428f4a7f8c7ca811de0a6afb3f54329bbd8750fd/src/Set/utils.mo#L64)

Do you see anything wrong in using it as a temporary solution, while we wait for Base library to provide a solution to this problem?

-------------------------

