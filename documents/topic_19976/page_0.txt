qwertytrewq | 2023-05-14 01:09:42 UTC | #1

I have in `DBPartition.mo`:
```
  public shared({caller = caller}) func delete(options: CanDB.DeleteOptions) {
    if (checkCaller(caller)) {
      CanDB.delete(db, options);
    };
  };
```

In `main.mo` it is called like:
```
    var db: DBPartition.DBPartition = actor(Principal.toText(paymentCanisterId));
    db.delete({sk = "p/" # Principal.toText(userId)}); // FIXME: `await`?
```

I wonder how an inter-canister call `db.delete` works without `await` (and even does not compile if I add `await`).

`func delete` looks like a synchronous call because I didn't added result type `async ()`, but isn't it (as a shared function) async by default?

As I understand, inter-canister calls are always asynchronous.

I do not understand something.

-------------------------

timo | 2023-05-14 05:46:17 UTC | #2

It is a "one-way call" that has no response and can't be awaited.

The implicit return type when no return type is given is `()`. These are equivalent:
```
public func f() { ... };
public func f() () { ... };
```

But `()` is different from `async ()`. The latter creates an empty response which can be awaited. The former doesn't create a response and cannot be awaited. Those are called one-way calls.

A public function can have return type `()` or `async X`, nothing else.

-------------------------

rossberg | 2023-05-14 09:21:32 UTC | #3

[quote="timo, post:2, topic:19976"]
The implicit return type when no return type is given is `()`. These are equivalent:
```
public func f() { ... };
public func f() () { ... };
```
[/quote]

You probably meant:
```
public func f() { ... };
public func f() : () { ... };
```

-------------------------

icme | 2023-05-14 22:13:14 UTC | #4

CanDBâ€™s delete API is synchronous (within a single canister) and does not involve any inter-canister calls.

https://www.candb.canscale.dev/CanDB.html#delete

https://github.com/canscale/CanDB/blob/4386531b22eb8832176bd87e8d7503e46dc03a81/src/CanDB.mo#L296

-------------------------

