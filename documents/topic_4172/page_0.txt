zawy | 2021-05-22 10:58:27 UTC | #1

From Dr Tackmann's article 2 days ago:

"...in web authentication flow, the secure device provides a digital signature on the [random] challenge sent by the server....we use the request itself [ from the client ! ] as the challenge"

Does not sound secure.

-------------------------

dpdp | 2021-05-22 11:05:15 UTC | #3

I think he is referring that the request (eg. `public shared(msg) func get_my_profile()` is signed by the client. The server will recover the public key `pk` from the signature of this request.
The actor code will be able to retrieve this public key (or canisterId if called via a wallet canister) as a typed `Principal`.  (via `msg.caller` )

cf. https://sdk.dfinity.org/docs/developers-guide/tutorials/access-control.html

-------------------------

zawy | 2021-05-22 11:10:58 UTC | #4

It's not a standard because they indicate they rolled their own crypto due to cannisters not being servers ("we had to overcome a few hurdles") and my quote describes how they changed it so that **your** computer is verifying **your** 2FA device, so it appears to be just 1-factor authorization.

-------------------------

Tbd | 2021-05-22 11:17:51 UTC | #5

Ok my bad, I drew some hasty conclusions there.

-------------------------

dpdp | 2021-05-22 11:40:51 UTC | #6

You might have a read of https://github.com/dfinity/internet-identity/blob/main/docs/internet-identity-spec.adoc

-------------------------

zawy | 2021-05-22 14:46:40 UTC | #7

Thanks for the link.

My complaint is that his overview did not indicate a random challenge or even a challenge. It appears the identity service challenges the user's device on behalf of the cannisters to get them a session key. The challenge is the user_id which is random but always the same for a given identity and frontend.  If I've got that much right, my wild guess is that the identity service is randomly choosing from a set of generated delegation keys so that the session key isn't always the same.

-------------------------

