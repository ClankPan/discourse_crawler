sat | 2022-12-02 22:10:44 UTC | #1

Hello there!

we are happy to announce that voting is now open for [a new IC release ](https://github.com/dfinity/ic/tree/rc--2022-12-01_18-31).
The NNS proposal is here: [IC NNS Proposal 94953 ](https://dashboard.internetcomputer.org/proposal/94953).

Here is a summary of the changes since the last release:

```
* Consensus: fix: Fix formatting difference in ECDSA test check
* Crypto: feat: change IDkgProtocol API to create signed dealing
* Crypto: fix: add scope to existing MEGaPrivateKey in secret key store
* Crypto: fix: increase the tarpc message size limit for the CSP vault
* Execution: chore: Improve error message for oversized inter canister messages
* Execution: feat: Allow usage of specified canister Ids allocation range through ic-starter
* Execution: feat: Enable cycles cost scaling
* Execution: feat: Modify method provisional_create_canister_with_cycles to accept canister ID
* Execution: feat: prettify printing cycles with underscore thousands separator
* Execution: fix: prevent cycles overflow when scaling costs
* Message Routing: Enable timing out requests
* Message Routing: Force removal of diverged state, even if it is the last one
* Message Routing: Load all checkpoints on startup
* Message Routing: fix: Cache state sync chunk groups correctly
* Networking: [H2 Migration] Read message duration bug fix
* Networking: chore: fix rps_max type in json [benchmark]
* Networking: chore: remove the SerializeAs associated type of ArtifactKind
* Networking: feat:[H2] Optimize poll-capacity logic to send only whatever is available
* Networking: fix: Btc adapter should always prune block below anchor
* Networking: fix: Max artifact timeout
* Networking: fix: Use registry to fetch root key instead of local state
* Networking: fix: defer the block crypto calls to a dedicated OS thread
* Networking: fix: remove the TlsStreamReadHalf and TlsStreamWriteHalf traits
* Networking: fix: when fetching root delegation do it over TLS
* Node: Add sanity checks to upgrade tests
* Node: Cleanup unused scripts from SetupOS
* Node: Only pull images as needed and switch to zst
* Orchestrator: feat(ic-recovery): minor improvements
* Orchestrator: fix(ic-replay): Add a helpful deserialization error message
* Runtime: Add metrics for scheduler induction
* Runtime: Deduplicate page allocators on deserialization
* Runtime: Disable rate limiting features in drun
* Runtime: Increase the DTS message instruction limit to 20B
* Runtime: Replace parity-wasm
* Various tech-debt management: code refactoring, docs, bug fixes, test updates
```

And a complete list of changes can of course be found on GitHub.
Please reply to this message if you have any questions or comments.

-------------------------

icme | 2022-12-02 23:04:27 UTC | #2

[quote="sat, post:1, topic:17017"]
`Runtime: Disable rate limiting features in drun`
[/quote]

What does this rate limiting apply to? What is drun?

[quote="sat, post:1, topic:17017"]
`Runtime: Increase the DTS message instruction limit to 20B`
[/quote]

ðŸŽ‰ ðŸŽ‰

Also can you elaborate on what the cycles cost scaling feature is and what the fix was ðŸ‘‡

[quote="sat, post:1, topic:17017"]
`Execution: feat: Enable cycles cost scaling`
[/quote]

Are there GitHub commit hashes associated with each of these features?

-------------------------

sat | 2022-12-08 10:20:06 UTC | #3

[quote="icme, post:2, topic:17017, full:true"]
[quote="sat, post:1, topic:17017"]
`Runtime: Disable rate limiting features in drun`
[/quote]

What does this rate limiting apply to? What is drun?
[/quote]

`drun` is a tool that can be used to run a single-node instance of the IC. Similar to what dfx is doing, but simpler. It's used by the Motoko team for development/testing.

[quote="icme, post:2, topic:17017, full:true"]
[quote="sat, post:1, topic:17017"]
`Runtime: Increase the DTS message instruction limit to 20B`
[/quote]

:tada: :tada:

Also can you elaborate on what the cycles cost scaling feature is and what the fix was :point_down:
[/quote]

Cost scaling feature means that the bigger subnets (i.e. subnet with more nodes) will cost more than smaller subnets. The scaling of the cost is linear with the subnet size. So running on a (fictional) 26 node subnet would cost 2x more than running on a 13 node subnet.

[quote="icme, post:2, topic:17017, full:true"]
[quote="sat, post:1, topic:17017"]
`Execution: feat: Enable cycles cost scaling`
[/quote]

Are there GitHub commit hashes associated with each of these features?
[/quote]

There are GitHub commit hashes, of course. If you click on the `new IC release` link above, it takes you to the github tree and a list of commits https://github.com/dfinity/ic/commits/rc--2022-12-01_18-31 from where with a bit of search you can find:
* https://github.com/dfinity/ic/commit/0768d3d185ba40c44bb11cffe595ccd7651593e5
* https://github.com/dfinity/ic/commit/81178fc3097ef631708697fab130a13581b23f73
* https://github.com/dfinity/ic/commit/ca19cd6a97ee09634683b3beb916995eba770769

HTH

-------------------------

