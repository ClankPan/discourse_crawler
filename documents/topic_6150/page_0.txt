diegop | 2021-08-19 20:28:44 UTC | #1

**Summary**

Improvements to the Rosetta API in order to enable exchanges and other ecosystem participants to create neurons for staking and voting rewards.

**Status**  
Discussing

**What you can do to help**
- Ask questions
- Propose ideas

**Documentation**
-  [Financial Integrations & Ledger Canister](https://www.reddit.com/r/dfinity/comments/p0z2bz/ama_we_are_bogdan_maciej_and_roman_ask_us/) - *We are Bogdan, Maciej, and Roman. Ask us Anything about the ICP ledger.* (August 9, 2021) 

**Key people involved** 
 @bogwar , Maciej Kot, @roman-kashitsyn

**Documentation**
-  [Financial Integrations & Ledger Canister](https://www.reddit.com/r/dfinity/comments/p0z2bz/ama_we_are_bogdan_maciej_and_roman_ask_us/) - *We are Bogdan, Maciej, and Roman. Ask us Anything about the ICP ledger.* (August 9, 2021) 

**Relevant Background**

- Neuron custody via Rosetta (Phase 1 - Deposit). We're going to divide this up into 3 releases, deposit, withdraw and manage.

-------------------------

lastmjs | 2021-08-16 22:55:35 UTC | #2

So basically Coinbase could become another frontend to the NNS?

-------------------------

diegop | 2021-08-17 19:53:40 UTC | #3

Interesting way to put it, but I guess yes, it would mean Coinbase could have a lot of the functionality of the NNS Dapp (staking, voting, etc...)

-------------------------

bogwar | 2021-08-20 07:24:06 UTC | #4

Depending on how many of the features they'll surface in the UI that would be lead essentially to another frontend to the NNS

-------------------------

Marci | 2021-10-24 11:11:06 UTC | #5

Is it possible for Binance and Coinbase to hold on their design for the staking products? Or do they need to build an another especially for ICP? e.g. Binance has as default a 30/60/90 Days option, but within Neurons it is possible to lock up ICP for much longer.

-------------------------

skilesare | 2021-08-31 15:20:29 UTC | #6

Hmm......do we want this?  These guys have enough power in the ecosystem as it is.  It would seem to me that centralized exchanges holding the rights to a large portion of neurons is pretty antithetical to further decentralization.  Not your keys, not your neurons.  Community efforts like axon are at least keeping centralization at arm's length with their approach.

On the other hand, I guess this stuff is going to emerge via other means if it isn't provided.

All in all, it seems like a low priority to me.

-------------------------

diegop | 2021-09-04 01:31:37 UTC | #7

I am not sure it is obvious but one large benefit of this project is that it would allow people to stake and vote through Coinbase (and other exchanges) so it would greatly increase both the pool and participation of the IC community. I think having people vote and stake in their provider of choice will reduce friction greatly.

-------------------------

LightningLad91 | 2021-09-15 18:27:12 UTC | #8

I share @skilesare concerns. What would prevent a centralized exchange from issuing/voting on proposals that only benefit them? In an extreme case; let's say an exchange like FTX wants to harm the IC because we become a credible threat to Solana. What keeps FTX from accumulating enough voting power to do something crazy like disconnect a data center? Unlike normal stakeholders, these exchanges would not be incentivized to vote in the best interest of the network because it's not their money that they are playing with.

I agree that this is low priority.

Edit: I guess what I'm asking is whether or not we can prevent an exchange from voting as a proxy for the individual stakeholders. What would prevent the exchange from creating its own neuron (minimum amount staked) and setting all other neurons to follow at creation? Will the exchange be required to provide the stakeholder with a full neuron management interface?

-------------------------

wpb | 2021-09-15 23:33:26 UTC | #9

Hey @diegop would you please clarify what this proposal means.  I can envision two options (described below) that an exchange like Coinbase could provide.  Option 1 seems like a very attractive option because it would improve decentralization and quickly move us closer to the 90% staking goal.  I think this should be a high priority if the intent of the Rosetta API aligns with Option 1.  Option 2 seems like a disaster to decentralization because it would put exchanges in a position to have a lot of voting power using other people’s money.  I would not want Option 2 at all.

Option 1:  Coinbase offers a front end for staking where a user is subject to all the same rules as we are with the NNS.  Their ICP is actually staked in their own neurons and they have full control of their voting power and their vote following is set up by default in the same way as the NNS app default configurations.

Option 2:  Coinbase offers a staking return that is slightly less than governance rewards.  They take customer ICP and stake it in neurons that Coinbase owns and Coinbase controls the voting power.  Coinbase earns the voting rewards and redistributes to their customers at a discounted rate to account for administrative costs and a small Coinbase profit.  The key concern here would be that Coinbase would own the voting power that comes from other peoples investment in ICP.

-------------------------

LightningLad91 | 2022-01-13 12:49:45 UTC | #10

I was reminded of this Roadmap topic after the recent Binance announcement.

I'm curious, are these Rosetta updates required for an exchange to offer NNS staking; or does this just make it easier for them to do so? To put it another way; is there something preventing an exchange, like Coinbase, from offering their customers an NNS staking option today?

Thanks.

-------------------------

roman-kashitsyn | 2022-01-13 15:36:07 UTC | #11

Hi @LightningLad91 !

[quote="LightningLad91, post:10, topic:6150"]
I’m curious, are these Rosetta updates required for an exchange to offer NNS staking; or does this just make it easier for them to do so?
[/quote]

That's a very good question!

The Rosetta node is by no means required to offer staking. Staking is a feature of the Governance smart contract, anybody can interact with that contract by sending messages to the IC. For example, [Sygnum](https://www.sygnum.com/) offers staking and neuron custody already. They are using [quill](https://github.com/dfinity/quill) and working on a more scalable and automated architecture based on Rosetta.

The Rosetta node doesn't contain any magic when it comes to submitting transactions, it's a simple translation layer between the JSON-RPC language of [Rosetta API](https://rosetta-api.org) to the language of the IC ingress messages.

The main disadvantage of implementing staking directly is that there is not much documentation on how to do that, and there are many moving parts to take care of.

Rosetta API provides a common framework that is reasonably well documented and widely adopted. It's much easier to start with Rosetta at the moment. This is very important for the financial integrations team because building a good financial product is hard, and we want to simplify this on our side as much as we can.

I hope one day we'll have a comprehensive well-documented library that makes interaction with the Ledger and Governance much easier, and Rosetta node will become less important.

-------------------------

LightningLad91 | 2022-01-13 21:38:00 UTC | #12

Thank you for the response @roman-kashitsyn 

I spoke to @lastmjs about my concern (plz see my comment from September) and he explained that there was nothing we could really do to prevent an exchange from trying to accumulate voting power by taking control of their customer's neurons. Your response seems to support his assessment.

I don't want to rob potential stakeholders of convenience if it doesn't buy us any extra security so i'll likely vote to adopt this proposal.

-------------------------

plsak | 2023-05-12 09:41:59 UTC | #13

Hi @diegop, as I can't find much info for this wanted to ask what is the status of Rosetta API and eventually if there is some release schedule... Thanks!

-------------------------

diegop | 2023-05-12 13:12:04 UTC | #14

Let me ping some folks who may know more.

-------------------------

mariop | 2023-05-15 05:48:49 UTC | #15

Hi @plsak ,

Rosetta API is available already as [docker image](https://hub.docker.com/r/dfinity/rosetta-api). It is already used to integrate the NNS with many exchanges. The last Rosetta API released is 1.8.0 and supports stake maturity (see the [CHANGELOG](https://sourcegraph.com/github.com/dfinity/ic/-/blob/rs/rosetta-api/CHANGELOG.md)). Since then, the team has added the remaining NNS operations to Rosetta API. You can see the list of supported operations [`here`](https://sourcegraph.com/github.com/dfinity/ic/-/blob/rs/rosetta-api/src/request_types.rs?L20). It also supports the ability to list pending proposals from the nns and to get info about a certain proposals via the [call](https://www.rosetta-api.org/docs/CallApi.html#call) endpoint.

Rosetta API should be ready to be used to manage neuron and integrate with the NNS. The main advantage of Rosetta over a direct integration is that it deals with the complexities of integrating with the IC for you. If you know how to make REST calls then you can use it to write something that talks with the NNS.

If you plan to test it then I would suggest to start with the [Rosetta documentation](https://internetcomputer.org/docs/current/developer-docs/integrations/rosetta/). We have a testing replica that can be used to try Rosetta out. If you don't pass `--mainnet`, Rosetta will connect that that testnet.
For example, this is how I run it locally to my laptop to play with the ICP Ledger:

```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api
14:45:17.602411 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
14:45:17.602453 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
14:45:17.602465 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
14:45:17.603304 INFO [main] ic_rosetta_api - Token symbol set to ICP
14:45:17.605532 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
14:45:17.715255 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Loading blocks from store
14:45:17.715349 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Ledger client is up. Loaded 0 blocks from store. First block at None, last at None
14:45:17.715992 INFO [main] ic_rosetta_api - Network id: NetworkIdentifier { blockchain: "Internet Computer", network: "00000000000000020101", sub_network_identifier: None }
14:45:17.716961 INFO [main] ic_rosetta_api::rosetta_server - Starting Rosetta API server
14:45:17.765085 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Syncing 1107 blocks. New tip will be 1106
14:45:17.809118 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Synced took 0.044014034 seconds
14:45:17.814857 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - You are all caught up to block 1106
```

and then I can ask for the list of networks and work from there:

```
$ curl -XPOST  localhost:8080/network/list -H'Content-Type: application/json' -d'{}'
{"network_identifiers":[{"blockchain":"Internet Computer","network":"00000000000000020101"}]}
```

-------------------------

plsak | 2023-05-15 13:45:14 UTC | #16

[quote="mariop, post:15, topic:6150"]
`docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api`
[/quote]

Thank you @mariop, I'm just trying to play around but am getting following errors - in general to me it seems like invalid returned value from https://exchanges.testnet.dfinity.network/api/v2/status - shouldn't that be some JSON (as per REST specs - if it's REST, assumed it as per `/api/v2/status`)?

Please not that I didn't have much time for the debug so sorry if just overlooked something, below is the procedure and outputs I used.
Also I'm trying this on Mac (with Intel CPU) where the docker is somehow weird, but the errors don't seems to be related to that (in the beginning I thought I have just occupied port `8080` but doesn't seems like that from further debug).

```
$ curl -s https://exchanges.testnet.dfinity.network/api/v2/status | jq .
parse error: Invalid numeric literal at line 1, column 44

$ curl -s https://exchanges.testnet.dfinity.network/api/v2/status > /tmp/api.v2.status

$ file /tmp/api.v2.status
/tmp/api.v2.status: Concise Binary Object Representation (CBOR) container (array) (map)

$ cat /tmp/api.v2.status
+��|ic_api_versionf0.18.0hroot_keyX�0��0
s��&�Z�Oa��ZA��VD�nI۪A�r:}&���	ĨS��s~>����+f����0$t�S��C)�F��+)�-Y��ɡ��<
        89��!L�limpl_versionx(0182cb9e96355780b178c40edde1936053c9333ciimpl_hashx@bfb88232221ac400f77c443b521fe56f739d2ac60c1a878b9cff6b3eb0e7a043ureplica_health_statusghealthy
```

```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api
13:33:44.365681 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
13:33:44.365699 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
13:33:44.365708 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
13:33:44.365725 INFO [main] ic_rosetta_api - Token symbol set to ICP
13:33:44.365854 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

$ docker run --interactive --tty --publish 8080:8080 -e 'RUST_BACKTRACE=1' --rm dfinity/rosetta-api
13:34:05.138140 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
13:34:05.138204 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
13:34:05.138248 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
13:34:05.138305 INFO [main] ic_rosetta_api - Token symbol set to ICP
13:34:05.138513 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
stack backtrace:
   0: rust_begin_unwind
             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5
   1: core::panicking::panic_fmt
             at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14
   2: ic_rosetta_api::main::{{closure}}
   3: std::thread::local::LocalKey<T>::with
   4: <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll
   5: tokio::runtime::scheduler::current_thread::Context::enter
   6: tokio::macros::scoped_tls::ScopedKey<T>::set
   7: tokio::runtime::runtime::Runtime::block_on
   8: ic_rosetta_api::main
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.

$ docker run --interactive --tty --publish 8080:8080 -e 'RUST_BACKTRACE=full' --rm dfinity/rosetta-api
13:34:24.361627 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
13:34:24.361687 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
13:34:24.361698 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
13:34:24.361718 INFO [main] ic_rosetta_api - Token symbol set to ICP
13:34:24.361917 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
stack backtrace:
   0:     0x5584bb79cc50 - std::backtrace_rs::backtrace::libunwind::trace::h32eb3e08e874dd27
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5
   1:     0x5584bb79cc50 - std::backtrace_rs::backtrace::trace_unsynchronized::haa3f451d27bc11a5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
   2:     0x5584bb79cc50 - std::sys_common::backtrace::_print_fmt::h5b94a01bb4289bb5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:66:5
   3:     0x5584bb79cc50 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hb070b7fa7e3175df
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:45:22
   4:     0x5584bb7c250e - core::fmt::write::hd5207aebbb9a86e9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/fmt/mod.rs:1202:17
   5:     0x5584bb795ec5 - std::io::Write::write_fmt::h3bd699bbd129ab8a
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/io/mod.rs:1679:15
   6:     0x5584bb79e453 - std::sys_common::backtrace::_print::h7a21be552fdf58da
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:48:5
   7:     0x5584bb79e453 - std::sys_common::backtrace::print::ha85c41fe4dd80b13
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:35:9
   8:     0x5584bb79e453 - std::panicking::default_hook::{{closure}}::h04cca40023d0eeca
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:295:22
   9:     0x5584bb79e13f - std::panicking::default_hook::haa3ca8c310ed5402
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:314:9
  10:     0x5584bb79eb5a - std::panicking::rust_panic_with_hook::h7b190ce1a948faac
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:698:17
  11:     0x5584bb79ea57 - std::panicking::begin_panic_handler::{{closure}}::hbafbfdc3e1b97f68
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:588:13
  12:     0x5584bb79d0fc - std::sys_common::backtrace::__rust_end_short_backtrace::hda93e5fef243b4c0
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:138:18
  13:     0x5584bb79e772 - rust_begin_unwind
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5
  14:     0x5584bb7bfbd3 - core::panicking::panic_fmt::h8d17ca1073d9a733
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14
  15:     0x5584baaaa30e - ic_rosetta_api::main::{{closure}}::h799450387c351464
  16:     0x5584bab22d5d - std::thread::local::LocalKey<T>::with::h048ad4042cc1c2ae
  17:     0x5584baaa51f8 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::ha7ea65f8031aec79
  18:     0x5584baad4060 - tokio::runtime::scheduler::current_thread::Context::enter::hd49f70e033169598
  19:     0x5584bab40ff1 - tokio::macros::scoped_tls::ScopedKey<T>::set::hf2a10f0988424376
  20:     0x5584baad3c8f - tokio::runtime::runtime::Runtime::block_on::hc3b55ecb8eabc9ae
  21:     0x5584baabd285 - ic_rosetta_api::main::h7426bf004f709972
  22:     0x5584baab0b13 - std::sys_common::backtrace::__rust_begin_short_backtrace::h930e0d924b1945e7
  23:     0x5584baac9439 - std::rt::lang_start::{{closure}}::hd61fb70ac743a4c4
  24:     0x5584bb7908bf - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb69be6e0857c6cfb
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:283:13
  25:     0x5584bb7908bf - std::panicking::try::do_call::h396dfc441ee9c786
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40
  26:     0x5584bb7908bf - std::panicking::try::h6cdda972d28b3a4f
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19
  27:     0x5584bb7908bf - std::panic::catch_unwind::h376039ec264e8ef9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14
  28:     0x5584bb7908bf - std::rt::lang_start_internal::{{closure}}::hc94720ca3d4cb727
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:48
  29:     0x5584bb7908bf - std::panicking::try::do_call::h2422fb95933fa2d5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40
  30:     0x5584bb7908bf - std::panicking::try::h488286b5ec8333ff
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19
  31:     0x5584bb7908bf - std::panic::catch_unwind::h81636549836d2a25
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14
  32:     0x5584bb7908bf - std::rt::lang_start_internal::h6ba1bb743c1e9df9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:20
  33:     0x5584baabd2e8 - main
  34:     0x7f3832047d0a - __libc_start_main
  35:     0x5584baa6a6ee - _start
  36:                0x0 - <unknown>
```

-------------------------

mariop | 2023-05-15 13:56:36 UTC | #17

`/api/v2/status` is a replica endpoint and should return cbor as per [specification](https://internetcomputer.org/docs/current/references/ic-interface-spec#http-interface). You need to talk to the rosetta node via curl in order to get the REST API, not the replica.

As per Rosetta, the error `tcp connect error: Cannot assign requested address (os error 99)` means that the port 8080 is already used and you should pick another port or close the application that is using 8080.

-------------------------

plsak | 2023-05-15 14:07:41 UTC | #18

Well, that is something what I suspected and checked as a first thing before was checking more - so I guess it's more related to my macos setup, version and limitations (any upgrade breaks anything...) - I'll re-try again later when get to some linux distro then.

Thanks anyway!

-------------------------

plsak | 2023-05-15 14:32:05 UTC | #19

FYI, just tried from linux (with standard GNU tooling) and got the same - below first made sure that I can start to listen on `8080` and then that it's free, working as `root`...
 - pointing it out as it could mean that the problem is different

```
~ #> netstat -lnp | grep 8080
~ #> nc -l 8080 &
[1] 23037
~ #> netstat -lnp | grep 8080
tcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      23037/nc

~ #> kill %1
~ #> netstat -lnp | grep 8080
[1]+  Terminated              nc -l 8080
~ #> netstat -lnp | grep 8080
~ #> netstat -lnp | grep 8080

~ #> docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api
14:25:22.762052 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
14:25:22.762081 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
14:25:22.762099 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
14:25:22.762135 INFO [main] ic_rosetta_api - Token symbol set to ICP
14:25:22.762363 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```

-------------------------

plsak | 2023-05-15 15:33:50 UTC | #20

To help with the root cause isolation I tried **older version** of the image (`20221018`) - **started without any problems** (on mac), so probably there is some gotcha in the `latest` version:
```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:20221018
15:25:03.372327 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.7.2
15:25:03.372364 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
15:25:03.372386 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
15:25:03.372430 INFO [main] ic_rosetta_api - Token symbol set to ICP
15:25:03.735321 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Loading blocks from store
15:25:03.735403 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Ledger client is up. Loaded 0 blocks from store. First block at None, last at None
15:25:03.735465 INFO [main] ic_rosetta_api - Network id: NetworkIdentifier { blockchain: "Internet Computer", network: "00000000000000020101", sub_network_identifier: None }
15:25:03.735722 INFO [main] ic_rosetta_api::rosetta_server - Starting Rosetta API server
15:25:03.772266 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Syncing 1107 blocks. New tip will be 1106
15:25:04.040814 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - You are all caught up to block 1106
```

**Other window:**
```
$ curl -s -X POST  localhost:8080/network/list -H 'Content-Type: application/json' -d '{}' | jq .
{
  "network_identifiers": [
    {
      "blockchain": "Internet Computer",
      "network": "00000000000000020101"
    }
  ]
}
```

-------------------------

mariop | 2023-05-15 16:40:23 UTC | #21

I just tried with both versions and both worked for me. I don't know what's going on but I know that the latest version is being used by various companies atm.

-------------------------

plsak | 2023-05-15 18:02:49 UTC | #22

Thank you, as I got the older version working it should be enough for me to poke around when have a time - if it's working for others then it's not so important anyways (I personally suspect some change/problem with `ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set`).

FYI this is the error response when `8080` is already in use (reported by `docker` as it does the OS bind) - the error I'm getting seems to be related to internal `rust` execution - that's why I included the backtrace:
```
docker: Error response from daemon: driver failed programming external connectivity on endpoint great_shaw (0f527c4c4281216ef62475b82fff9737d2cbd2fac950eeae25d4a074b6eb180d): Bind for 0.0.0.0:8080 failed: port is already allocated.
```

Plus, actually **my main interest is if I can 'import' my `II` created neurons for management via the REST API** (didn't have time to go though the documentation yet).
- **if yes**, I'd also suggest to give the container **secondary purpose** - include `bash`, `curl`, basic CLI utils and prepare functions to give users option to:
  - start container as a daemon a connect to it via `docker exec ... bash`
  - use simple CLI commands for personalized configuration and to access all the API functionality - to manage own neurons (**as mentioned, not sure if that is currently possible**)
  - I could eventually even help with this as have done it for my REST API server in one of previous jobs - and it was very very useful

### Re-testing of the older/latest version (on my mac):
![image|690x77](upload://cXiupq0Iqd27KUdm7b2xvWaXzIG.png)

```
$ docker images | grep dfinity
dfinity/rosetta-api                                          latest     2e50562006e8   3 months ago    56MB
dfinity/rosetta-api                                          20221018   37ebf03533c3   6 months ago    53.8MB

$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:latest
16:43:46.724998 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
16:43:46.725042 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
16:43:46.725052 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
16:43:46.725076 INFO [main] ic_rosetta_api - Token symbol set to ICP
16:43:46.725358 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:20221018
16:44:04.731286 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.7.2
16:44:04.731411 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
16:44:04.731430 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
16:44:04.731473 INFO [main] ic_rosetta_api - Token symbol set to ICP
16:44:05.061400 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Loading blocks from store
16:44:05.061480 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Ledger client is up. Loaded 0 blocks from store. First block at None, last at None
16:44:05.061579 INFO [main] ic_rosetta_api - Network id: NetworkIdentifier { blockchain: "Internet Computer", network: "00000000000000020101", sub_network_identifier: None }
16:44:05.061949 INFO [main] ic_rosetta_api::rosetta_server - Starting Rosetta API server
16:44:05.184503 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Syncing 1107 blocks. New tip will be 1106
16:44:05.446169 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - You are all caught up to block 1106
...
```

### `RUST_BACKTRACE=full`:
```
16:59:55.323244 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.8.0
16:59:55.323295 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
16:59:55.323337 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
16:59:55.323415 INFO [main] ic_rosetta_api - Token symbol set to ICP
16:59:55.323581 WARN [main] ic_ledger_canister_blocks_synchronizer::canister_access - Fetching the root key from the replica because it was not set
thread 'main' panicked at 'Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })', rs/rosetta-api/src/main.rs:183:35
stack backtrace:
   0:     0x55a069463c50 - std::backtrace_rs::backtrace::libunwind::trace::h32eb3e08e874dd27
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5
   1:     0x55a069463c50 - std::backtrace_rs::backtrace::trace_unsynchronized::haa3f451d27bc11a5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5
   2:     0x55a069463c50 - std::sys_common::backtrace::_print_fmt::h5b94a01bb4289bb5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:66:5
   3:     0x55a069463c50 - <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt::hb070b7fa7e3175df
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:45:22
   4:     0x55a06948950e - core::fmt::write::hd5207aebbb9a86e9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/fmt/mod.rs:1202:17
   5:     0x55a06945cec5 - std::io::Write::write_fmt::h3bd699bbd129ab8a
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/io/mod.rs:1679:15
   6:     0x55a069465453 - std::sys_common::backtrace::_print::h7a21be552fdf58da
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:48:5
   7:     0x55a069465453 - std::sys_common::backtrace::print::ha85c41fe4dd80b13
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:35:9
   8:     0x55a069465453 - std::panicking::default_hook::{{closure}}::h04cca40023d0eeca
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:295:22
   9:     0x55a06946513f - std::panicking::default_hook::haa3ca8c310ed5402
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:314:9
  10:     0x55a069465b5a - std::panicking::rust_panic_with_hook::h7b190ce1a948faac
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:698:17
  11:     0x55a069465a57 - std::panicking::begin_panic_handler::{{closure}}::hbafbfdc3e1b97f68
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:588:13
  12:     0x55a0694640fc - std::sys_common::backtrace::__rust_end_short_backtrace::hda93e5fef243b4c0
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/sys_common/backtrace.rs:138:18
  13:     0x55a069465772 - rust_begin_unwind
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:584:5
  14:     0x55a069486bd3 - core::panicking::panic_fmt::h8d17ca1073d9a733
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/panicking.rs:142:14
  15:     0x55a06877130e - ic_rosetta_api::main::{{closure}}::h799450387c351464
  16:     0x55a0687e9d5d - std::thread::local::LocalKey<T>::with::h048ad4042cc1c2ae
  17:     0x55a06876c1f8 - <core::future::from_generator::GenFuture<T> as core::future::future::Future>::poll::ha7ea65f8031aec79
  18:     0x55a06879b060 - tokio::runtime::scheduler::current_thread::Context::enter::hd49f70e033169598
  19:     0x55a068807ff1 - tokio::macros::scoped_tls::ScopedKey<T>::set::hf2a10f0988424376
  20:     0x55a06879ac8f - tokio::runtime::runtime::Runtime::block_on::hc3b55ecb8eabc9ae
  21:     0x55a068784285 - ic_rosetta_api::main::h7426bf004f709972
  22:     0x55a068777b13 - std::sys_common::backtrace::__rust_begin_short_backtrace::h930e0d924b1945e7
  23:     0x55a068790439 - std::rt::lang_start::{{closure}}::hd61fb70ac743a4c4
  24:     0x55a0694578bf - core::ops::function::impls::<impl core::ops::function::FnOnce<A> for &F>::call_once::hb69be6e0857c6cfb
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/core/src/ops/function.rs:283:13
  25:     0x55a0694578bf - std::panicking::try::do_call::h396dfc441ee9c786
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40
  26:     0x55a0694578bf - std::panicking::try::h6cdda972d28b3a4f
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19
  27:     0x55a0694578bf - std::panic::catch_unwind::h376039ec264e8ef9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14
  28:     0x55a0694578bf - std::rt::lang_start_internal::{{closure}}::hc94720ca3d4cb727
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:48
  29:     0x55a0694578bf - std::panicking::try::do_call::h2422fb95933fa2d5
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:492:40
  30:     0x55a0694578bf - std::panicking::try::h488286b5ec8333ff
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panicking.rs:456:19
  31:     0x55a0694578bf - std::panic::catch_unwind::h81636549836d2a25
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/panic.rs:137:14
  32:     0x55a0694578bf - std::rt::lang_start_internal::h6ba1bb743c1e9df9
                               at /rustc/897e37553bba8b42751c67658967889d11ecd120/library/std/src/rt.rs:148:20
  33:     0x55a0687842e8 - main
  34:     0x7f5b3fa7cd0a - __libc_start_main
  35:     0x55a0687316ee - _start
  36:                0x0 - <unknown>
```

-------------------------

ICdex | 2024-01-24 15:13:12 UTC | #23

Have you made any progress? When will the ICRC-1 token be launched on the exchange?please

-------------------------

plsak | 2024-01-28 10:22:16 UTC | #24

FYI @mariop, so it seems that more people (still) have a problem with the latest image and it might be worth doing more investigation:
https://forum.dfinity.org/t/rosetta-question-dfinity-rosetta-api-docker-image/26992/5?u=plsak
https://forum.dfinity.org/t/rosetta-question-dfinity-rosetta-api-docker-image/26992/6?u=plsak

-------------------------

mariop | 2024-01-29 09:16:19 UTC | #25

[quote="plsak, post:22, topic:6150"]
`docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:latest`
[/quote]

I see. Maybe the issue is the connection from your machine to the testnet. Can you try to run the following command:

```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:v2.0.0 --mainnet
```

-------------------------

plsak | 2024-01-29 11:21:42 UTC | #26

Unfortunately I might not be able to do here more testing for personal/business reasons anytime soon, but possibly @vafi (who reported the last problem) might be able to help?

-------------------------

vafi | 2024-01-29 10:56:53 UTC | #27

the old image produces problems for me as well, different problems. The dev team will need to revise the rosetta docker image. 

Not to backseat drive, I can help @dfinity

-------------------------

vafi | 2024-01-29 11:00:12 UTC | #28

Hi, @plsak and I were having a similar experience trying to connect to testnet from our local machines and remote server. The command you provided works for me and I am able to run successfully when connecting to mainnet, there appears to be an issue with the testnet.

-------------------------

plsak | 2024-01-29 11:46:54 UTC | #29

Finally also got access to one convenient (linux) environment, following are results of the tests - not sure about network of the older version (starts fine, based on `network: "00000000000000020101"` looks like mainnet) but for the new one looks like problem with the testnet:
```
$ docker images | grep dfinity
dfinity/rosetta-api   latest           06f73feccee9   11 days ago     54.8MB
dfinity/rosetta-api   v2.0.0           1c939589db70   11 days ago     54.8MB
dfinity/rosetta-api   20221018         37ebf03533c3   15 months ago   53.8MB
```

---
### `v2.0.0`

```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:v2.0.0
2024-01-29T11:23:42.452464Z  INFO rs/rosetta-api/src/main.rs:141: Starting ic-rosetta-api, pkg_version: 2.0.0
2024-01-29T11:23:42.452507Z  INFO rs/rosetta-api/src/main.rs:147: Listening on 0.0.0.0:8081
2024-01-29T11:23:42.452546Z  INFO rs/rosetta-api/src/main.rs:150: Internet Computer URL set to https://exchanges.testnet.dfinity.network/
2024-01-29T11:23:42.452559Z  WARN rs/rosetta-api/src/main.rs:182: Data certificate will not be verified due to missing root key
2024-01-29T11:23:42.452576Z  INFO rs/rosetta-api/src/main.rs:207: Token symbol set to ICP
2024-01-29T11:23:42.452796Z  WARN rs/rosetta-api/ledger_canister_blocks_synchronizer/src/canister_access.rs:71: Fetching the root key from the replica because it was not set
thread 'main' panicked at rs/rosetta-api/src/main.rs:248:35:
Failed to initialize ledger client: InternalError(false, Details { error_message: Some("An error happened during communication with the replica: error sending request for url (https://exchanges.testnet.dfinity.network/api/v2/status): error trying to connect: tcp connect error: Cannot assign requested address (os error 99)"), extra_fields: {} })
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
```
- **`Internet Computer URL set to https://exchanges.testnet.dfinity.network/`**

---

```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:v2.0.0 --mainnet
2024-01-29T11:25:29.203666Z  INFO rs/rosetta-api/src/main.rs:141: Starting ic-rosetta-api, pkg_version: 2.0.0
2024-01-29T11:25:29.203706Z  INFO rs/rosetta-api/src/main.rs:147: Listening on 0.0.0.0:8081
2024-01-29T11:25:29.203745Z  INFO rs/rosetta-api/src/main.rs:150: Internet Computer URL set to https://ic0.app/
2024-01-29T11:25:29.203793Z  INFO rs/rosetta-api/src/main.rs:207: Token symbol set to ICP
2024-01-29T11:25:29.794386Z  INFO rs/rosetta-api/ledger_canister_blocks_synchronizer/src/ledger_blocks_sync.rs:87: Loading blocks from store
2024-01-29T11:25:29.794529Z  INFO rs/rosetta-api/ledger_canister_blocks_synchronizer/src/ledger_blocks_sync.rs:98: Ledger client is up. Loaded 0 blocks from store. First block at None, last at None
2024-01-29T11:25:29.794610Z  INFO rs/rosetta-api/src/main.rs:253: Network id: NetworkIdentifier(NetworkIdentifier { blockchain: "Internet Computer", network: "00000000000000020101", sub_network_identifier: None })
2024-01-29T11:25:29.795086Z  INFO rs/rosetta-api/src/rosetta_server.rs:425: Starting Rosetta API server
2024-01-29T11:25:29.839957Z  INFO rs/rosetta-api/ledger_canister_blocks_synchronizer/src/ledger_blocks_sync.rs:339: Syncing 10100649 blocks. New tip will be 10100648
```
- **`Internet Computer URL set to https://ic0.app/`**
- **`blockchain: "Internet Computer", network: "00000000000000020101"`**

---
### `20221018`
```
$ docker run --interactive --tty --publish 8080:8080 --rm dfinity/rosetta-api:20221018
11:31:41.215627 INFO [main] ic_rosetta_api - Starting ic-rosetta-api, pkg_version: 1.7.2
11:31:41.215660 INFO [main] ic_rosetta_api - Listening on 0.0.0.0:8080
11:31:41.215682 WARN [main] ic_rosetta_api - Data certificate will not be verified due to missing root key
11:31:41.215720 INFO [main] ic_rosetta_api - Token symbol set to ICP
11:31:41.685269 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Loading blocks from store
11:31:41.685406 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - Ledger client is up. Loaded 0 blocks from store. First block at None, last at None
11:31:41.685495 INFO [main] ic_rosetta_api - Network id: NetworkIdentifier { blockchain: "Internet Computer", network: "00000000000000020101", sub_network_identifier: None }
11:31:41.686181 INFO [main] ic_rosetta_api::rosetta_server - Starting Rosetta API server
11:31:42.052324 INFO [main] ic_ledger_canister_blocks_synchronizer::ledger_blocks_sync - You are all caught up to block 138
```
- **`blockchain: "Internet Computer", network: "00000000000000020101"`**

-------------------------

plsak | 2024-01-29 12:40:37 UTC | #30

@mariop thanks for the tip, so if the problem is with connection to `testnet` there is probably no more investigation needed :pray:

Now looking at the recent major version bump (`2.0.0`) this could mean a large functionality upgrade, could you please share more details or a link to the release notes (I didn't find more info on [Docker Hub](https://hub.docker.com/r/dfinity/rosetta-api))?

-------------------------

mariop | 2024-01-31 09:23:58 UTC | #31

[quote="plsak, post:30, topic:6150"]
Now looking at the recent major version bump (`2.0.0`) this could mean a large functionality upgrade, could you please share more details or a link to the release notes (I didn’t find more info on [Docker Hub ](https://hub.docker.com/r/dfinity/rosetta-api))?
[/quote]

The CHANGELOG can be found at https://github.com/dfinity/ic/blob/29567e4ad17f91a0f65259e372a5237b6430acd3/rs/rosetta-api/CHANGELOG.md but the 2.0.0 section is not ready yet. The changes are the following:

* BREAKING: new logging library that replaces the old one. Log configuration file is deprecated
* FIX: Prohibit Rosetta from spamming the ledger in case of errors at the ledger client
* Add `timestamp` to the `blocks` table
* Add support for `list_neurons`. Let's a user query a list of all they neurons a user has created.
* Add support for `list_known_neurons`. Let's a user query a list of all publicly known neurons.

-------------------------

Sawyer | 2024-02-15 04:18:15 UTC | #32

When does rosseta api come for cex listing of icp tokens?

-------------------------

mariop | 2024-02-15 09:25:42 UTC | #33

Q1, we are working on it right now.

-------------------------

daijianlin | 2024-02-29 12:31:23 UTC | #34

Hey is there any update? any detailed schedule? the last month of Q1 is coming.

-------------------------

mariop | 2024-02-29 19:29:45 UTC | #35

We aim for end of Q1, but that we are working on improving certain bottlenecks which may result in a delay. A preliminary alpha version could be made available in the next weeks.

-------------------------

gatsby_esp | 2024-03-01 01:21:56 UTC | #36

So there’s no CEXs for ICP Defi during this bullrun. Amazing. 
Can’t believe dfinity let this happen.

-------------------------

daijianlin | 2024-03-01 05:20:40 UTC | #37

Thanks for the reply, I appreciate that. Hope you could speed up the work, without the function then all icpcoins could not be listed on cex is ridiculous.

-------------------------

daijianlin | 2024-03-06 13:29:39 UTC | #38

Have a look at this, I believe you need to speed up the process of development.

https://twitter.com/coinexcom/status/1765281437555843468?s=46&t=HGJG2M7_0h9MmY3ZrrYkbA

-------------------------

