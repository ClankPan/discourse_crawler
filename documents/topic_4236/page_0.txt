senior.joinu | 2021-05-23 23:36:05 UTC | #1

I have a simple canister with the code like this
```rust
static mut TOKEN: Option<VotingToken> = None;

#[init]
fn init() {
    ic_cdk::print("!!! Calling init");

    unsafe {
        TOKEN = Some(VotingToken {
            name: "Default token".into(),
            balances: HashMap::new(),
        });
    }
}
```

But it seems like `init()` function is not called automatically after canister deployment. What am I doing wrong?

Another question: on the docs site there are several rust canister tutorials, two of which propose different storage management approaches (https://sdk.dfinity.org/docs/rust-guide/rust-profile.html / https://sdk.dfinity.org/docs/rust-guide/rust-counter.html). What's the difference?

-------------------------

senior.joinu | 2021-05-24 00:25:56 UTC | #2

Nevermind, was using the old version of DFX.

But the second question still matters.

-------------------------

senior.joinu | 2021-05-24 18:13:36 UTC | #3

Hm... it looks like it doesn't get called on upgrade also.
After a canister upgrade there is no `TOKEN` anymore - it is uninitialized.

dfx 0.7.0

-------------------------

flyq | 2021-06-05 07:32:55 UTC | #4

Yes, there are too few examples about rust canister. 

about your first question, I run in 0.7.0 dfx and it inits succeed: 
```rs
#[init]
fn init() {
    unsafe {
        COUNTER = Some(candid::Nat::from(0));
    }
}
```
```sh
sudo dfx canister call hello_rs get
(0)
```
the result is (0), not (null).

The second question I am also very confused, when do I need to choose different storage? What are their advantages and disadvantages.

The problem I have is that if I want to enter a parameter during initialization, I don’t know how to do it:
```rs
#[init]
fn init(a : candid::Nat) {
    unsafe {
        COUNTER = Some(candid::Nat::from(a));
    }
}
```
the results:
```sh
sudo dfx canister install hello_rs --argument='(1)' -m=reinstall
Reinstalling code for canister hello_rs, with canister_id ryjl3-tyaaa-aaaaa-aaaba-cai
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Canister ryjl3-tyaaa-aaaaa-aaaba-cai trapped explicitly: Custom("No more values to deserialize")

sudo dfx canister install hello_rs -m=reinstall
Reinstalling code for canister hello_rs, with canister_id ryjl3-tyaaa-aaaaa-aaaba-cai
The invocation to the wallet call forward method failed with the error: An error happened during the call: 5: Canister ryjl3-tyaaa-aaaaa-aaaba-cai trapped explicitly: Custom("No more values to deserialize")
```

-------------------------

flyq | 2021-07-06 20:32:00 UTC | #5

[quote="flyq, post:4, topic:4236"]
The problem I have is that if I want to enter a parameter during initialization, I don’t know how to do it
[/quote]

change the did file to:
```did
service : (nat) -> {
  "increment": () -> ();
  "get": () -> (nat) query;
  "set": (nat) -> ();
}
```
and try `dfx build --all`

-------------------------

jboulineau | 2021-07-05 14:50:38 UTC | #6

I'm looking at the 'incrementing a counter' example and it looks like this may not be working again in 0.7.2. 

Expected Results:

```
dfx canister call rust_counter get
(0)
```

Actual Results:

```
dfx canister call rust_counter get
[Canister ryjl3-tyaaa-aaaaa-aaaba-cai] Panicked at 'called `Option::unwrap()` on a `None` value'
```

Using debug prints I was able to confirm that init() is not called on canister startup.

-------------------------

jboulineau | 2021-07-05 20:57:20 UTC | #7

Interesting behavior: when `dfx.json` has two canisters to deploy, init() IS called.

-------------------------

roman-kashitsyn | 2021-07-06 20:32:00 UTC | #8

Hi @jboulineau!

I believe I need to clarify the canister lifecycle a bit.
1. The first time you install canister code, the `init` function is called.
2. If you decide to wipe out the old version of your canister and replace it with new code (by specifying `--mode=reinstall` option of the dfx canister install command), the `init` function is called after the new code is installed.
3. If you upgrade your canister, the `init` function is *not* called. The system first calls `canister_pre_upgrade` function on the old version of the canister and then calls `canister_post_upgrade` on the new version.

This means that if you don't specify upgrade hooks that use stable memory and upgrade the canister, all the state is lost. In case of something `static mut TOKEN: Option<VotingToken> = None;`, `TOKEN` becomes `None` again.

So my guess is that you upgraded your canister after the first installation without any upgrade hooks. This wiped away the initialized state, leading to this error. Re-installing the canister should fix the issue.

> Interesting behavior: when dfx.json has two canisters to deploy, init() IS called.

Most likely, in this case a new canister was created, which triggered the (1) case in the lifecycle above.

-------------------------

jboulineau | 2021-07-06 20:31:11 UTC | #9

Thanks @roman-kashitsyn! That was the missing piece for me.

-------------------------

