Hazel | 2022-02-02 15:58:35 UTC | #1

Is there any chance to get Motoko to support async functions when compiling to standalone wasm? Even if the calls aren't truly async.

https://github.com/dfinity/motoko/blob/399b8e8b0b47890388cd38ee0ace7638d9092b1a/test/run/bad-async-func.mo#L1

We're trying to mock calling an external service but have hit a wall because we can't write even pretend async functions.

Little example:

```
public type ExternalServiceCaller<T, V> = (T, V) -> async ();

let mockCaller : ExternalServiceCaller<shared () -> async (), ()> = func (f, _) : async () {
 //Noop. Maybe increment counter or capture args.. 
}

let realCaller : ExternalServiceCaller<shared () -> async (), ()> = func (f, _) : async () {
 ignore f();
 // Call service.. Tick call counter... something else
}
```

-------------------------

paulyoung | 2022-02-02 18:17:16 UTC | #2

Could you help me understand why youâ€™re compiling to standalone Wasm?

-------------------------

Hazel | 2022-02-02 18:29:32 UTC | #3

For unit testing. 

Like

```shell
moc $(shell vessel sources) -wasi-system-api -o Test.wasm test/*unit_test_runner.mo && wasmtime test.wasm
rm -f test.wasm
```

-------------------------

paulyoung | 2022-02-02 18:36:58 UTC | #4

I used to just use `moc -r <filepath>`.

Can you do that instead?

-------------------------

paulyoung | 2022-02-02 18:38:35 UTC | #5

I guess the interpreter was all I had back then, and may not be close enough to the real environment.

-------------------------

Hazel | 2022-02-02 18:46:02 UTC | #6

:woman_facepalming: yes this solves the problem lol. Good call, thank you!

-------------------------

paulyoung | 2022-02-02 18:49:12 UTC | #7

As long as youâ€™re comfortable testing interpreted code rather than compiled code ðŸ™‚

-------------------------

claudio | 2022-02-04 17:02:00 UTC | #8

We don't really have the resources to extend the wasi backend to support faux actors, although that would be a cool project.

Motoko matchers had some rudimentary support for unit testing canisters https://kritzcreek.github.io/motoko-matchers/Canister.html 
but that doesn't solve your mocking problem. 

I wonder if you could just write the canister under test as a class, parameterised by the mock/real code and then write another test harness that instantiates it with the mock and runs some tests and run both on the local replica or real IC.

Alternatively, ic-repl might be useful for the testing process.

https://github.com/chenyan2002/ic-repl

-------------------------

Hazel | 2022-02-04 17:07:20 UTC | #9

Thank you @claudio - the interpreter has been working fine so far. Going to look into ic-repl!

 I did hit one loosely related bug : https://github.com/dfinity/motoko/issues/3096

-------------------------

Mathias | 2022-12-12 12:11:22 UTC | #10

Hi @Hazel 

I'd be very curious to know what your current testing flow is? It's not so easy to understand how to do that well as a beginner. I'm trying to understand how the leading devs in the ecosystem are doing it. 

Thanks in advance for any advice!

-------------------------

