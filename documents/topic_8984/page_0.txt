peterparker | 2021-11-22 14:51:37 UTC | #1

I've got a main canister ("manager") that generates actor class canisters ("data"). In other words, each users of my web app get a canister.

I try to implement the `install_code` function to be able to upgrade these canisters that are generated on the fly or at least for now, implement a proof of concept of such process.

I have implement it as following:

1. Instantiate my manager actor with agent-js in a NodeJS script using my private key and actor principal ([Code](https://github.com/deckgo/deckdeckgo/blob/6d5942dc70baf0f8a98c5e22380f947ad94994a8/canisters/scripts/ic.installcode.mjs#L39))

2. Read the wasm file that has been generated with dfx and sent it to my main canister as a blob ([Code](https://github.com/deckgo/deckdeckgo/blob/6d5942dc70baf0f8a98c5e22380f947ad94994a8/canisters/scripts/ic.installcode.mjs#L46))

3. In the main canister, in Motoko, declare a function (that still needs to be access protected but that's another question) that iterate on each canisters ([Code](https://github.com/deckgo/deckdeckgo/blob/6d5942dc70baf0f8a98c5e22380f947ad94994a8/canisters/src/manager/manager.mo#L191) and [Code](https://github.com/deckgo/deckdeckgo/blob/6d5942dc70baf0f8a98c5e22380f947ad94994a8/canisters/src/manager/buckets.store.mo#L87))

4. In a Motoko utility, effectively call `install_code` with the Blob data ([Code](https://github.com/deckgo/deckdeckgo/blob/6d5942dc70baf0f8a98c5e22380f947ad94994a8/canisters/src/utils/canister.utils.mo#L38))

When I call my script, I can confirm that the function is effectively triggered and that the user canister is most probably called too (as I get another Principal as the one of my manager in the console output) but, I get the following error anyway:

> Error: Call was rejected:
>  Request ID: 0b96b73711842469a7772d...
>  Reject code: 4
>  Reject text: Canister 4wnqn-...-cai trapped explicitly: IDL error: empty input. Expected Candid-encoded argument, but received a zero-length argument

Any idea what am I missing or what is wrong in my implementation ?

-------------------------

levi | 2021-11-21 21:23:12 UTC | #2

Is there a call that you are sending with an empty argument? try sendiing these bytes for the arg:  [68, 73, 68, 76, 0, 0] .

[see this ](https://forum.dfinity.org/t/canister-xxx-trapped-explicitly-idl-error-empty-input/6002) and [and this](https://forum.dfinity.org/t/calling-canisters-without-an-argument-requires-a-candid-bytes-with-no-values/8250)

-------------------------

peterparker | 2021-11-22 14:51:16 UTC | #3

[quote="levi, post:2, topic:8984"]
Is there a call that you are sending with an empty argument? try sendiing these bytes for the arg: [68, 73, 68, 76, 0, 0] .
[/quote]

Thanks. It seems it helped but, landed now on another error ðŸ¤ª

> Reject code: 4
>   Reject text: Canister 4wnqn-...-cai trapped explicitly: IDL error: too few arguments P

-------------------------

peterparker | 2021-11-22 15:02:13 UTC | #4

I tried following in which both `canister_id` and `wasm_module` are values loaded locally and passed to my main canister.

```
await ic.install_code({
                arg = [68, 73, 68, 76, 0, 0];
                wasm_module = wasmModule;
                mode = #upgrade;
                canister_id = canisterId;
            });
```

-------------------------

levi | 2021-11-22 15:12:58 UTC | #5

Looks like maybe your canister-init function, or your post-upgrade function in your canister takes some candid-parameters. If so, create those candid-parameters, serialize them into the bytes, and put those bytes as the value for the 'arg' field.

-------------------------

peterparker | 2021-11-22 15:14:50 UTC | #6

Oh interesting, those parameters respectively the `owner` of the canister you mean?

```
actor class DataBucket(owner: Types.UserId) = this {
```

[source](https://github.com/deckgo/deckdeckgo/blob/main/canisters/src/data/data.mo#L17) / [ic.rocks](https://ic.rocks/principal/4wnqn-nqaaa-aaaai-aa4sq-cai)

-------------------------

peterparker | 2022-01-24 21:40:32 UTC | #7

Took me more than a night of sleep ðŸ˜‰.

Yes indeed @levi was correct, it needed a candid-parameter to update the code of the canister because my canister constructor takes a parameter, the user principal.

That solved this question but then I had to encode the parameters. This was solved today in my following question: https://forum.dfinity.org/t/encode-principal-to-candid-arguments/10465/10?u=peterparker

-------------------------

