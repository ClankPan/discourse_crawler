skilesare | 2024-02-12 09:24:23 UTC | #1

# Signing Tree and DER Encoding - Motoko - #36

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification: (01/09/2023) 
* Open for application: (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2023/01/09/36-Signing-Tree-and-DER-Encoding.html)

## Bounty Details

* Bounty Amount: $10,000 USD of ICP at award date.
* ICDevs.org Bounty Acceleration: For each 1 ICP sent to 25a63a3dfafde9da5ca73e63b66e6a5912cc61e8cb3581e9df8cd96ca5faa6ab, ICDevs.org will add  .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Individual
* Opened: 01/09/2023
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Advanced - Motoko; Advanced - Crypto;

## Description

IC Subnets are able to sign a set of data and provide certified variables to applications outside of the IC.  This functionality can also be used have the subnet sign messages and transactions from the IC.

Reference Material:

[Canister signatures available to canisters on all subnets ](https://forum.dfinity.org/t/canister-signatures-available-to-canisters-on-all-subnets/11240)
[Certified Data API](https://smartcontracts.org/docs/base-libraries/certifieddata)
[Haskell example](https://github.com/dfinity/ic-hs/blob/master/src/IC/Crypto/CanisterSig.hs)
[Signature Spec](https://internetcomputer.org/docs/current/references/ic-interface-spec#signatures)
[There was an attempt](https://m7sm4-2iaaa-aaaab-qabra-cai.raw.ic0.app/?tag=2473530532)
[Structure of transactions for signing](https://internetcomputer.org/docs/current/references/ic-interface-spec/#hash-of-map)
[Haskell DER Encoding](https://github.com/dfinity/ic-hs/blob/master/src/IC/Crypto/DER.hs#L45)
[Tree Example](https://gist.github.com/nomeata/f325fcd2a6692df06e38adedf9ca1877)
[Asset Cert Example](https://github.com/nomeata/motoko-certified-http)
[Video walking through some of it](https://www.youtube.com/watch?v=gaVuMaTP2lQ)

This bounty has three parts

1. Produce a DER encoding library and make it compatible with Vessel and MOPS
2. Produce a Merkle Tree library that will integrate well with the Certified Data API. Nometa has an example of a one level tree, but we need one that has many levels and allows the creation and verification of witnesses.
3. Create an example of a canister signing a DER Encoded transaction that can be queried later to find the bytes needed to submit a request to IC.

The developer that completes this bounty will qualify to pursue bounty [23a - Metacalls - Motoko](https://forum.dfinity.org/t/icdevs-org-bounty-23a-metacalls-motoko-up-to-10k/15422)

The following library may be a good starter. https://github.com/icdevs/motoko-merkle-tree. Likely a number of things need to be added such as deleting values from tree.  Please evaluate and update the library if it is missing something.

This bounty gives the opportunity to

* learn about certified data and variables
* learn about DER Encoding
* learn how IC transactions are structured

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread


## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 25a63a3dfafde9da5ca73e63b66e6a5912cc61e8cb3581e9df8cd96ca5faa6ab.  ICDevs will match the bounty $40:1 ICP for the first 125 ICP out of the DFINITY grant and then 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification: (01/09/2023)

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

nomeata | 2023-03-08 08:24:04 UTC | #2

Nice! Some questions about the precise scope:

[quote="skilesare, post:1, topic:17889"]
Produce a DER encoding library and make it compatible with Vessel and MOPS
[/quote]

Is this expected to be a full-fledged DER encoding library, or only just enough code to create an IC Canister Signature, i.e. create a  “The public key is encoded as a DER-wrapped COSE key”?

[quote="skilesare, post:1, topic:17889"]
Create an example of a canister signing a DER Encoded transaction that can be queried later to find the bytes needed to submit a request to IC.
[/quote]

Does the canister have to create the transaction (including implementing the “representation independent hash” and CBOR encoding)? Or is it enough if the canister signs arbitrary blobs, and some other tool (e.g. `dfx`) creates the transaction, and uses the canister merely as a signature oracle?

-------------------------

skilesare | 2023-03-08 13:37:40 UTC | #3

[quote="nomeata, post:2, topic:17889"]
Is this expected to be a full-fledged DER encoding library, or only just enough code to create an IC Canister Signature, i.e. create a “The public key is encoded as a DER-wrapped COSE key”?
[/quote]

I think that for the bounty, the ability to produce an IC transaction is enough.  If someone needs robust DER support they can always enhance it later.  Having the basics would be great.

> Does the canister have to create the transaction (including implementing the “representation independent hash” and CBOR encoding)? Or is it enough if the canister signs arbitrary blobs, and some other tool (e.g. `dfx` ) creates the transaction, and uses the canister merely as a signature oracle?

I think the end goal would be for a canister to post the message to the IC itself, so CBOR would be nice...but an alternate pathway is probably fine. Likely someone would want to set up a proxy that supports IPv6 and can do this step.  If the tool can hand the signature off via https outcalls, that is likely enough.  We do have a CBOR library though, so maybe it isn't difficult:  https://github.com/edjCase/motoko_cbor

It would be cool to close the circle.

-------------------------

nomeata | 2023-03-08 20:56:57 UTC | #4

[quote="skilesare, post:3, topic:17889"]
I think the end goal would be for a canister to post the message to the IC itself,
[/quote]

Ha, I completely forgot that since we last talked about this, HTTP calls from canisters have become a thing! Yes, the canister posting this is surely nicest for the demo :-D

-------------------------

NathanosDev | 2023-03-09 13:28:22 UTC | #5

Great bounty! I'm particularly interested in a Motoko implementation of a Merkle Tree library that will integrate with Certified Data API. Internally in Dfinity we've been working on an update to the Rust/JS versions of asset certification and verification: https://github.com/dfinity/response-verification/. If anyone picks this up, I think it would be great to get some of this work integrated into that repository.

-------------------------

Safik | 2023-03-09 13:41:16 UTC | #6

A few clarifications are possible. It's not entirely clear to me.
Let's say the user has a public key (a keyring with a private one)
This public is encoded in DER encoding. (according to secp256r1 and Ed25519 specifications)

> let pubKey = DER.decode(pub);

Next, we can save it in the canister CertifiedData.set(pubKey);
And extract, if necessary,

> let pubKey = CertifiedData.getCertificate();

For example, we can sign the data:

>  let signVal = Crypto.Ed25519.sign(pubKey, value);

We can send signed data and verify it to users using the user's private key.
Did I understand correctly?
I'm also interested in how the Merkle Tree should participate in all this?

-------------------------

skilesare | 2023-03-09 14:24:45 UTC | #7

My understanding is that if you keep things in a Merkle tree that you can sign a witness and it will be considered signed.  I get a bit lost in it and I really wish we had a good visual of how all of this worked. I started playing with some of this at [playground](https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=2473530532) but I made some bad assumptions...specifically:

> "The `/` in the spec are not literal text, but separate the keys in the tree structure! so there is a key `sig` at the root, containing a subtree with keys that is the seed and at each key a subtree with keys that are `m` ."

-------------------------

domwoe | 2023-03-09 15:51:19 UTC | #8

This is a really cool bounty!

Here's how I would do it. Not sure if this is entirely correct, though. The best role model would be the [Internet Identity implementation](https://github.com/dfinity/internet-identity). 

I think the most important and high-leverage part would be an implementation of [ic-certified-map](https://github.com/dfinity/cdk-rs/tree/main/library/ic-certified-map) in Motoko. (Though the [HashTree](https://github.com/dfinity/cdk-rs/blob/main/library/ic-certified-map/src/hashtree.rs) part would be sufficient here if I understand correctly.)

Then you do the following:

You start with a proper unauthenticated IC message `m`, i.e. a content map according to https://internetcomputer.org/docs/current/references/ic-interface-spec#http-call

Then, in an update call:

1. Put `m` into the hash tree at position `sig/<something>/m` `<something>` is some arbitrary string that allows your canister to have multiple canister "public keys"
2. Get the root hash of the tree and set this as [CertifiedData](CertifiedData.set(blob);)

Then you need to do a query call because the certificate is only available in a query call. 
The query call should return (if you want to work outside the IC for the rest):
- The certificate
- The witness for `m` in the tree as well.
- The canister "public key". See https://github.com/dfinity/internet-identity/blob/main/src/internet_identity/src/delegation.rs#L112 where `seed` is the `<something>`

With the first two elements, you can form the signature according to the interface spec:
```
* The signature is a CBOR value consisting of a data item with major type 6 ("Semantic tag") and tag value `55799` (see [Self-Describe CBOR](https://tools.ietf.org/html/rfc7049#section-2.4.5)), followed by a map with two mandatory fields:
  * `certificate` (`blob`): A CBOR-encoded certificate as per [Encoding of certificates](https://internetcomputer.org/docs/current/references/ic-interface-spec#certification-encoding).
  * `tree` (`hash-tree`): A hash tree as per [Encoding of certificates](https://internetcomputer.org/docs/current/references/ic-interface-spec#certification-encoding).
```
Then you need to assemble the properly authenticated call according to https://internetcomputer.org/docs/current/references/ic-interface-spec#authentication

-------------------------

nomeata | 2023-03-11 22:24:05 UTC | #9

@skilesare nudged me to consider this bounty, and I am sufficiently tempted to take it on. Here is my plan of attack:

 * Build on <https://github.com/nomeata/motoko-merkle-tree> (and maybe <https://github.com/icdevs/motoko-merkle-tree>), because half the hard parts are already there, and it has a decent testing story already set up. Then:
   * Generalize the trie therein from fixed-length blobs to arbitrary length-blobs. This may yield an independently useful and usable `BlobTrie` data structure.
   * Generalize from one nesting level to arbitrary nesting level.
   * Add more operations: `delete` and `get`; maybe `union`.
* Write a small library that performs DER, as needed to create Canister Signatures and IC transactions. 
* Write an example canister that can produce IC transactions accepted by the IC HTTP Interface, and maybe even submit them themselves.
* Add to Vessel and Mops.
* Decide on a suitable charity to receive the bounty, as I’ll do this [pro-charity](https://www.joachim-breitner.de/blog/798-Pro-charity_consulting). I guess this means that if others find that cause worth supporting, they can up the bounty :-)

I am fairly certain that I will find enough spare time until April 17 to do this (and will likely be done earlier).

-------------------------

skilesare | 2023-03-12 16:53:40 UTC | #10

Awesome! Thanks, @nomeata!

-------------------------

nomeata | 2023-03-14 09:21:15 UTC | #11

Allright, I felt productive. Here is what works so far:

 * My `motoko-merkle-tree` library at <https://github.com/nomeata/motoko-merkle-tree> has gained new features:
   * Keys can be arbitrary blobs (not only 32-bit long hashes). This required modifications to the trie-like structure of the tree.
   * No longer single level, arbitrary paths work now.
   * New operations: `lookup`, `delete`, `labelsAt`

   See the documentation at <https://nomeata.github.io/motoko-merkle-tree/MerkleTree.html>

* I updated my previous certified-assets-in-Motoko example to use this library. Code at <https://github.com/nomeata/motoko-merkle-tree/tree/main/demo> and live instance running at <https://wpsi7-7aaaa-aaaai-acpzq-cai.ic0.app/>.

    It now implements a simple key-value store, so you can use the Candid UI (linked from the start page) to store and delete entries, the main page shows the list of keys stored, and each has its view; this demonstrated certifying multiple keys.

Left to do: Creating Canister Signatures, submitting a request to the IC, uploading libraries to vessel and MOPS.

I just noticed that the bounty also mentions “verification of witnesses in motoko”. I’d expect verification to be purely client side. What would be the use-case for that?

-------------------------

Safik | 2023-03-14 12:07:08 UTC | #12

Hi
I don't know much about these things. I want to clarify for myself. Do I understand correctly that we get a certified value from the func `value_page(key : Text): Blob` function?

That is, we have created a tree in accordance with the specification
#1
Internet Computer Specification
```
public type witness = {
# empty;
#sliced : Hash;
#fork : (Witness, witness);
#marked : (Key, witness);
#sheet : Value;
};
````
#2
Recorded this data in `CertifiedData.set(MerkleTree.treeHash(mt))`;
#3
If necessary, we request data from `CertifiedData.GetCertificate()`; Then we find the key data in this merkle tree. The found value is certified. Is it like that?

-------------------------

nomeata | 2023-03-14 12:43:18 UTC | #13

`value_page` returns the body of the page at, for example, <https://wpsi7-7aaaa-aaaai-acpzq-cai.ic0.app/get/key1>.

For this to be certified, we have to put a hash of that value also in the canister's hash tree:
```
        mt := MerkleTree.put(mt, ["http_assets", T.encodeUtf8("/get/" # k)], h(value_page(k)));
…
    CertifiedData.set(MerkleTree.treeHash(mt));
```
and when the user requests that page, we include a witness and the certificate in the response headers:
```
  func certification_header(url : Text) : HeaderField {
    let witness = MerkleTree.reveal(mt, ["http_assets", T.encodeUtf8(url)]);
    let encoded = MerkleTree.encodeWitness(witness);
    let cert = switch (CertifiedData.getCertificate()) {
      case (?c) c;
      case null { … }
    };
    return
      ("ic-certificate",
        "certificate=:" # base64(cert) # ":, " #
        "tree=:" # base64(encoded) # ":"
      )
  };
```

-------------------------

skilesare | 2023-03-14 13:13:25 UTC | #14

[quote="nomeata, post:11, topic:17889"]
I just noticed that the bounty also mentions “verification of witnesses in motoko”. I’d expect verification to be purely client side. What would be the use-case for that?
[/quote]

Unit testing?  I'm trying to think of some use cases. 

One may be where you want to store witnesses for easy distribution...but this may not be practical.  

Or perhaps some service that doesn't have to hold the tree but needs to use the tree and trusts the tree.  Say we have a parent that keeps the tree and files the root. It creates a bunch of child canisters and we don't want to distribute the tree to all the children. Instead, we want a client to directly relay a witness and instructions to the child and the child will only do the processing if the witness proves a certified variable.

-------------------------

Safik | 2023-03-14 13:53:12 UTC | #15

Most likely that we cannot check under the subtree (witness) separately. We can send the certificate and the tree. Bypass the tree and if the root cache is equal to the certificate, then all the witnesses are "correct". Although I'm not sure there aren't other options.

-------------------------

nomeata | 2023-03-14 15:30:54 UTC | #16

More progress:

I made the canister produce a request, signed using a Canister Signature of the canister, that was accepted by the IC, and encoded using CBOR.

I used `dfx` to get that request and submit it with `curl`.

What seems to be impossible right now is to let the canister submit it directly, for annoying reasons:

 * The signature requires access to the certificate, which is only available in query methods.
 * The [Management Canister’ `http_request`](https://internetcomputer.org/docs/current/references/ic-interface-spec#ic-http_request) method is only available in update methods.

I tried to work my way around it by using `http_request` to invoke the IC’s query call HTTP API, and get the certificate out. But `http_request` fires the request off multiple times, and requires the responses to be the same (for consensus etc.). In our case, they are not the same, e.g. different block times. Or maybe other issues, I am not sure – I could not make it work. I don’t think it’s useful to pursue this further – those who want their canisters to sign and send requests can probably use an external proxy that queries the canisters and sends the request.

I think this crosses all the boxes in terms of functionality. What’s left is some cleanup:

* Some of the code that’s currently in the `demo/` directory is worth promoting to the actual library.
* Maybe I’ll rename the library, as it contains more than just the Merkle Tree. Maybe `ic-interface`, given that it contains a bunch of definitions related to the IC Interface Specification?
* The library needs to be uploaded. It uses depenencies from all over the place (`cbor`, `xtended-numbers`, `sha224`); these need to be uploaded/added to the vessel package set as well.
* Maybe write a blog post about how things fit together, or record a talk.

Does that sound about right?

-------------------------

skilesare | 2023-03-14 16:13:05 UTC | #17

Awesome!!

That sounds fantastic.

-------------------------

nomeata | 2023-03-14 18:36:06 UTC | #18

Did you or someone else have a concrete application in mind that was pending on this bounty? Now is already a good time to pick up my library and see if it provides the expected features, and provide early feedback.

-------------------------

nomeata | 2023-03-16 12:14:06 UTC | #19

Latest status:

* The library is now called `ic-certification`.
* The Canister Signature code is now part of the library, not the demo; see the docs: https://nomeata.github.io/ic-certification/
* There is a Canister Signature Manager class that purges signatures after some times (and after hopefully the signatures has been fetched with a `query` function).
* PR to add dependencies (`cbor`) to the package set: https://github.com/dfinity/vessel-package-set/pull/66
* PR to add `ic-certification` to the package set: https://github.com/dfinity/vessel-package-set/pull/67
* `ic-certification` on mops: https://mops.one/ic-certification

I’ll consider this as “done” now, and hand it over to @skilesare or whoever to evaluate if this fulfils the bounty or if there are pieces still missing or worth improving, before then making a 1.0.0 release.

Also, @skilesare, probably the bounty status needs to be updated :-)

-------------------------

Safik | 2023-06-28 11:40:42 UTC | #20

Hi! @[nomeata](https://forum.dfinity.org/u/nomeata)
Can we do the following?

Let's say two canisters **A** and **B**
Canister **A** supports certified data.
Canister **B** is the consumer, that is, the recipient of data from canister A.
Canister **A** receives a request from canister B to process the data and get the result (back to B).
Canister **A** processes this data, certifies, temporarily stores and sends the result.
Canister **B** receives the result, and makes sure that canister A really sent this data to her. Using Certificate **A**. (There was no substitution)

Is it possible?

-------------------------

nomeata | 2023-06-28 17:59:47 UTC | #21

Maybe, but if only canisters are involved, why bother with certification? If you get a message from canister A, it will be from canister A, all in the trusted environment of the IC .

Or put differently: inter canister messages are already automatically certified by the IC.

-------------------------

skilesare | 2023-06-28 18:59:52 UTC | #22

This scenario that I considered here was when you wanted to process a time shifted certification without having to involve the other canister again.

For example, if I have a canister that lets me record nonrevocable data, I could produce a certificate of this and give it to someone for use later. They could wait to present it later, and have a different canister trust it since it was certified.

like a check, but for data.

-------------------------

nomeata | 2023-06-28 20:04:21 UTC | #23

Yes, that should be possible. A minor wrinkle is that the certificate will have to be be fetched via a query call (not update call, not inter-canister call), so you need some external tooling for that. But once you have the certificate you can of course keep it, store it in canister, and validate it in a canister (the validation is just some code to run, no difference whether you run it outside or inside the IC).

-------------------------

Safik | 2023-06-29 12:11:32 UTC | #24

Thanks, @[nomeata](https://forum.dfinity.org/u/nomeata)
I'm not sure, but the certificate is temporary. I wanted to link it with the assignment of roles to cans (instead of tokens), an elegant solution would turn out. Details in (Bounty #62)

-------------------------

Iceypee | 2023-06-29 19:23:19 UTC | #25

I really appreciate this library. It was extremely needed. I just wanted to make sure I was understanding this correctly to properly use it as my understanding of merkle trees is well, subpar. :smiling_face_with_tear:

 So is the merkle tree itself not stable memory therefore limiting us to storing 4gb of info or less this data structure? But somehow, I can upgrade my canister and the lookup function still retrieves my data properly...?

And to further this question, you use CertifiedData to hash the entire merkle tree structure in pic below. So The limiting amount of info wouldnt actually be the amount of data but actually the cycle limit to hash the entire tree which would be less than 4gb right?

![image|690x141](upload://n500xPeNtxr1MIopU6lNeOHCwh1.png)

-------------------------

nomeata | 2023-06-30 07:55:33 UTC | #26

[quote="Iceypee, post:25, topic:17889"]
So is the merkle tree itself not stable memory therefore limiting us to storing 4gb of info or less this data structure? But somehow, I can upgrade my canister and the lookup function still retrieves my data properly…?
[/quote]

Correct, although depending on how you use it, you are only storing hashes in its leafs (e.g. for the HTTP Certification use case), and these hashes can of course come from much larger data.

[quote="Iceypee, post:25, topic:17889"]
And to further this question, you use CertifiedData to hash the entire merkle tree structure in pic below. So The limiting amount of info wouldnt actually be the amount of data but actually the cycle limit to hash the entire tree which would be less than 4gb right?
[/quote]

Good question! The `treeHash` is actually cached, so this functional call is cheap. Whenever you modify the tree, only a few hashes are updated – if the tree is nicely balanced, `O(log(n))` hashes need to be recomputed.

But yes, always on the IC there is a risk of running out of cycles, and I always suggest to stress test your canisters against (more than) the expected load to see if you are on the safe side.

-------------------------

Iceypee | 2023-06-30 21:56:30 UTC | #27

>Correct, although depending on how you use it, you are only storing hashes in its leafs (e.g. for the HTTP Certification use case), and these hashes can of course come from much larger data.

But okay so if youre storing the hash only of raw data. Returning the data in a query won't be gauranteed to be certified right?  Only verified? Let me give an example.

 lets say I had a list of token balances in a hashmap<Principal,Nat>. Not as a merkle tree. call it 
```
balance_hashmap<Principal,Nat>
```

And I certify each balance every time I update a users balance doing 
```
ct.put([Principal.toBlob(\<principalX\>)], hash(BlobfromNat(\<balanceX\>) ) 
```


Then if I have a query function 
```
public query func get_balance(principal:Principal): BalanceInNat, CertificationHeader
{
//return some form of the function name, the names arent exatcly correct.
ct.certification_header[Principal.toBlob(\<principalX\>)]; //the witness and certification header
balance_hashmap.get(\<principalX>);
//return some form of the two combined above
}
```

My issue is that there still is no gaurantee that the balance is returned correctly. A node can still return an improper balance only thing now is we can verify that it is wrong right?. Having the certHeadder only verifies that the balances returned is correct then right after the caller of get_balance recieves the function output. Or is my example improper in usage?



Also, how is it possible to be limited to 4gb/Whatever the unstable memory limit is but also able to be stable in terms of upgrade (as I dont seem to need to do anything with the CertifiedTree in pre/post upgrade)? Doens't make sense to me. I did run a test just populating a bunch of 3000byte arrays and verified the memory limit is definately not that larger 32-64gb of stable memory

-------------------------

skilesare | 2023-06-30 21:56:08 UTC | #28

It is only stable in the motoko sense( var stable). A better description would have been managed.  The motoko machine pushes stable vars to stable memory for upgrades and then loads it back in post upgrade.

-------------------------

Iceypee | 2023-06-30 22:19:06 UTC | #29

Yea but stable in motoko is still quite large i.e. greater than at least 15 Gb no?
I ran this test below with the certified tree. 
Basically what below does is it stores 3000 bytes as the value and 2, 35 byte arrays for the key into the merkle tree of the library Joachim wrote. Lets just round up to 4000 bytes per key,value pair. 
![image|690x90](upload://mTj8EkhcCzornxN2BcBBhSAf77s.png)

Then I looped through it like 400k times using a js script 
![image|690x80](upload://bM9Up6KnB0XllgpIyhW33Rp7EOV.png)

The exact number of counts.
![image|377x67](upload://r48pSOGBriPvIM0ZkQcPrQcbTCV.png)


I can still populate it but when i run upgrade I get the memory error below.  I have no post/pre upgrade function either
![image|690x34](upload://3n8QrB3YjgDjlBBrbSM34e3X0nd.png)

If you do the math, 
(4000 bytes +lets say 2000 byte padding for the merkle tree structure)\*500,000 counts rounded up from counts = 6000\*5e5 = 3e9 = 3Gb. Even for motoko stable thats not even close to the limit. Maybe im missing something in my understanding. Would appreciate any clarification or correction. I know its not going to be the 32GB or 64 GB limit (whichever it currently is) but 3GBs and an a memory error doesn't seem correct.

-------------------------

skilesare | 2023-06-30 22:25:18 UTC | #30

Stable is 64GB but managed stable is maxed at 4GB I think.  Different things. Very confusing.

If you want 64GB you need to use @sardariuss 's library. You could retrofit what @nomeata did here in stable, but I'd imagine your rebalance calc might get out of hand.

-------------------------

Iceypee | 2023-06-30 22:34:46 UTC | #31

Ohhh, that clears things up. Appreciate it. But oh okay, so if using @sardariuss's implementation, I'd have to implement the hash computation part for each insertion or deletion then. Hmm

-------------------------

skilesare | 2023-06-30 22:39:31 UTC | #32

Yes, but you could stick that hash into the  managed  memory tree. That way you get 4 GB of tree, space, and 64 GB of storage space. You'd have an extra step to add the base of your witness, but I think that should work.

-------------------------

