chchrist | 2021-03-09 18:30:46 UTC | #1

I populate a list from an array

    type Card = {
                getName: () -> Text;
                getValue: () -> Nat;
            };
    private let cards:[var Card] = Array.init(numberOfCards, Cards.Card("","",0));
    private var cardsToDeal: List.List<Card> = List.fromVarArray<Card>(cards);

    public func deal(): Card {
        let (card, list) = List.pop<Card>(cardsToDeal);
        Debug.print(debug_show(cards[0].getName()));
        Debug.print(debug_show(card.getName()));
    }

This works:
 `Debug.print(debug_show(cards[0].getName()));`

This doesn't:
`Debug.print(debug_show(card.getName()));`

and errors with:

> type error [M0070], expected object type, but expression produces type ?Card/1

What does the List.pop() return?

-------------------------

kritzcreek | 2021-03-09 18:42:34 UTC | #2

`List.pop` returns an optional value as indicated by the `?` in the error. A `?Card` is a value that is either `null` or a `Card`. This is because the `List` could be empty, in which case there would be no `Card` that `pop` could return. See the documentation for `Option` in the base library for the different ways of working with these values: https://sdk.dfinity.org/docs/base-libraries/option

The section on [error handling and options](https://sdk.dfinity.org/docs/language-guide/errors.html) is more thorough, but probably a little overkill for the problem you're looking at right now.

-------------------------

chchrist | 2021-03-09 18:44:32 UTC | #3

ty!

this worked just fine :slight_smile: 

    switch(card) {
        case (null) {};
        case (?card) {
            Debug.print(debug_show(card.getName()));
        }
    }

-------------------------

