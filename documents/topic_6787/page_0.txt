nomeata | 2021-08-29 16:05:46 UTC | #1

I wrote up a lengthy text explaining various aspects of Candid. I broke it up into multiple posts, the first one of which is now available:
https://www.joachim-breitner.de/blog/782-A_Candid_explainer__The_rough_idea

I’ll create new posts here when I publish the other installments, for easier commenting on the forum. Enjoy!

-------------------------

nomeata | 2021-08-29 16:07:53 UTC | #2

Thanks to @claudio for early feedback!

-------------------------

levi | 2021-09-05 19:48:33 UTC | #3

Looking forward for the post bout the Option, that was a tricky one . Why is there a Null type if there is an Option type?

-------------------------

nomeata | 2021-09-05 20:15:42 UTC | #4

Hmm, that won't be in that post. I think the reason for the `null` type is that the `null` _value_ ought to have a principal type, and although `opt empty` would work for that, that's maybe too confusing.

Hmm, reading that reasoning again I see how it would apply to Motoko, but I'm less sure whether it really applies to Candid. So maybe simply an artifact of co-design?

It _is_ handy to have an idiomatic unit type (type with one value), for example as the argument type that we use when expressing enum types via variants (`variant {foo; bar}` is a shorthand for `variant {foo : null; bar; null}`). Although that alone is not a strong enough reason, I'd be fine with using `reserved` here (although I expect there is an interesting philosophical debate to be had about whether `reserved` is a unit type or not…)

@rossberg might have a better explanation for why Candid has `null`.

-------------------------

levi | 2021-09-05 20:36:36 UTC | #5

[quote="nomeata, post:4, topic:6787"]
I’d be fine with using `reserved` here` 
[/quote]

or  `variant {foo : empty; bar; empty}`

-------------------------

rossberg | 2021-09-06 10:19:17 UTC | #6

@nomeata, I don't fully remember, but having a unit type probably was a reason.

I don't think `reserved` counts as a unit type – it is a top type, which isn't the same: semantically, it contains *all* values, not just one. Even though coercive subtyping blurs this distinction.

@levi, a variant with only empty cases has no values, so is itself empty. IOW, it's isomorphic to the empty type, not the unit type.

-------------------------

levi | 2021-09-06 21:51:49 UTC | #7

[quote="rossberg, post:6, topic:6787"]
@levi, a variant with only empty cases has no values, so is itself empty. IOW, it’s isomorphic to the empty type, not the unit type.
[/quote]

@rossberg i could say the same thing bout the null type. A variant with only null cases is itself null, and thus is null and void.

The way I see it, empty makes more sense for the variants without a type and as a unit-type because there is a lack(empty) of a **type** associated with the variant-hash-key. The variant still has a hash-key, but a lack of a type associated with it. ‘ { foo: null }’ seems like the variant-key: foo is itself null. 

What is the value of null by it self? The value of the Option is: it holds the possibility that a specific-value will not be returned. What is the value of null ? It is a value without a value, a negative value, a contradiction in it’s self.

-------------------------

rossberg | 2021-09-07 07:13:54 UTC | #8

@levi, you could say that, but it wouldn't be correct. ;) The type `null` is inhabited by exactly one value: the value `null`. That's a perfectly fine value, it just carries no information, exactly because it cannot be anything else. In contrast, the empty type is not inhabited by _any_ value.

These aren't just random definitions, these are algebraic properties (in type theory, such types are often written 1 and 0). The difference is fundamental. For example, if you have a function with return type `null`, a caller knows that it will return the value `null`. If they have a function with return type `empty`, they know it cannot actually return at all, ever. It can only diverge or throw.

The variant with no cases is isomorphic to the empty type as well – that's simply a special case of a variant with all cases having empty type. Dually, a record with at least one empty field is also isomorphic to the empty type – you can construct no values for it either. And a record with all fields having type `null` is itself isomorphic to type `null`, because there is only one possible value for the entire record.

More succinctly, if we write `|T|` for the number of values a type has (its cardinality), then the following holds:
```
|empty| = 0
|null| = 1
|opt T| = 1 + |T|
|variant {T1,...,TN}| = |T1| + ... + |TN|
|record {T1,...,TN}| = |T1| * ... * |TN|
|func T1 -> T2| = |T2|^|T1|     (ignoring side effects or functions that don't return)     
```
Consequently, in type theory, variants are called sum types and records or tuples are product types. Functions are sometimes called exponentials.

-------------------------

nomeata | 2021-09-07 10:55:45 UTC | #9

[quote="rossberg, post:6, topic:6787"]
I don’t think `reserved` counts as a unit type
[/quote]
I knew you'd say that :slight_smile: 

Would you say `record { foo : null }` is a unit type?

This is getting philosophical, of course, and there is no serious disagreement here. To me, in order to count elements of a type I need a equality relation on the elements. And that depends on the type I look at them. But yeah, noncoercive subtyping blues the distinction :-)

-------------------------

rossberg | 2021-09-07 11:10:05 UTC | #10

@nomeata, not every type of cardinality 1 is the/a unit type. They're merely isomorphic.

But more importantly, the cardinality of a top type isn't even 1, rather, it is ∞. At least semantically. The fact that this isn't necessarily true at the representation level in Candid (due to lossy coercions) is mostly an implementation detail.

-------------------------

nomeata | 2021-09-07 11:46:05 UTC | #11

Oh, what's your definition of a unit type then, if not via cardinality? Neutral element of the product type former? (But that'd be also up to some form of type equivalence.) Or maybe that it is an terminal object in the category of types and functions (but that definition seems to have the same fate)?

-------------------------

rossberg | 2021-09-07 13:35:31 UTC | #12

@nomeata, fair question. In the abstract, one often conveniently identifies isomorphic types (and I suppose HoTT provides a whole theory for that), but in a concrete type system that has many distinguishable types of cardinality 1, we usually pick a specific representative that is canonical in some way. Typically, it's either terminal or the empty product type.

-------------------------

nomeata | 2021-09-07 14:16:30 UTC | #13

So, what's your definition of “terminal” here?

But I guess what you are saying is that the statement “type t is the unit type of Candid” isn’t based on some property of `t` that `t` has, but simply a declaration: We say (by decree or convention) that `null` is “the” unit type of Candid, and therefore it is. I can live with that.

-------------------------

levi | 2021-09-07 21:28:50 UTC | #14

[quote="rossberg, post:8, topic:6787"]
`|null| = 1`
[/quote]

What is this 1 value that is in the null type? If you can show me 1 scenario where the Null type is needed where empty or option is not sufficient then I will concede. There is a lack of a scenario in which using the type Null is **valuable** for the people using candid.
[quote="rossberg, post:8, topic:6787"]
The type `null` is inhabited by exactly one value: the value `null`
[/quote]
A value is something that is valuable for the people using it in some way. 
[quote="rossberg, post:8, topic:6787"]
For example, if you have a function with return type `null` , a caller knows that it will return the value `null` . If they have a function with return type `empty` , they know it cannot actually return at all, ever. It can only diverge or throw.
[/quote]

I know the difference in how it gets used, but this is inviting overcomplications in people’s code. Why would a function ever need to return Null ? When it can return empty or option. ?


[quote="rossberg, post:8, topic:6787"]
`|empty| = 0`
[/quote]
Makes perfect sense for a unit-type. 0 = NEUTRAL. 

Theory is there to serve the facts, not the other way around.

-------------------------

matthewhammer | 2021-09-07 23:53:35 UTC | #15

[quote="levi, post:14, topic:6787"]
What is this 1 value that is in the null type?
[/quote]

I believe that the `| |` operator is giving the cardinality of the type, as if it were a set (whose members are the distinct values of that type).

The 1 and only member value of type `null` is value `null`.

I think it's problematic to think of types as sets (but that operator is still fine by me) so I'd say it a bit differently:

_The number of values classified by type `null` is 1, and its value `null`_.

(I like "classification" rather than "containment" for the action that types do to their values.)

[quote="levi, post:14, topic:6787"]
A value is something that is valuable for the people using it in some way.
[/quote]

Here, we mean "value" in the PL theory sense, not in the everyday sense (like practical utility).

A value is an "introduction form" of data that:
- has a type
- has no "evaluation" left before being "used" (so 3 is a value, but "1 + 2" is not).

To be a value with an elimination form (a "practical use") is an extra requirement of values, and not strictly needed.  `null` and unit value `()` are two (distinct) examples of values without productive elimination forms in Motoko and in Candid.

[quote="levi, post:14, topic:6787"]
Theory is there to serve the facts, not the other way around.
[/quote]

What are the "facts" of PL design, I wonder?

FWIW, I subscribe to a prescriptive stance for PL design, not a descriptive one.  Perhaps you are arguing for a more descriptive stance?

In my view, the history of PL design and implementation tells us that the prescriptive approaches are the ones whose theories are sufficiently simple enough to withstand the test of time.  Following theory afterwards, as some reaction to practice, seems to invite regret onto everyone involved in the theory and the practice.

-------------------------

matthewhammer | 2021-09-07 23:59:42 UTC | #16

[quote="levi, post:14, topic:6787"]
Why would a function ever need to return Null
[/quote]

I use this typing feature of the language every single day.

Step 1: Stub a function in Motoko that has a non-unit return type.
Step 2: Call the stubbed function from where I want to use it.
Step 3: Use the compiler to type-check the stub without implementing it.

These steps are a regular pattern for my style of programming ("hole-directed"?).

To get the holes to be accepted by the compiler, I use the fact that `None` (the equivalent of `empty`) exists in the Motoko type system, and can be inhabited by `loop { assert false }` (or even the less useful, simpler version `loop{}`).

-------------------------

matthewhammer | 2021-09-08 00:02:21 UTC | #17

And the base library uses this pattern for the same purpose, and so each of these return `None`:
https://github.com/dfinity/motoko-base/blob/aa0fe3fcee2ea6b0a6fd8ff2bb3a268803abac84/src/Prelude.mo#L18

-------------------------

rossberg | 2021-09-13 14:46:28 UTC | #18

[quote="levi, post:14, topic:6787"]
What is this 1 value that is in the null type? If you can show me 1 scenario where the Null type is needed where empty or option is not sufficient then I will concede. There is a lack of a scenario in which using the type Null is **valuable** for the people using candid.
[/quote]

First of all, the technical definition of value is not dependent on usefulness of values, that would be absurd. You can construct many useless values for many types. As I said: `null` is a perfectly fine value, it just carries no information. That's in fact the defining property of any unit type.

Maybe the name `null` is misleading, because it makes you think too much in terms of low-level notions like "null pointers". Perhaps it becomes clearer when you view `opt` as a variant type, because that's what it really is semantically. Effectively:
```
type opt T = variant {_null; _opt : T};
type null  = variant {_null};
type empty = variant {};
```
Now, the `null` variant is a subtype of the `opt` variant. Furthermore, it obviously has a value, namely `_null`, unlike the empty variant.

-------------------------

rossberg | 2021-09-08 07:49:11 UTC | #19

[Grr, Forum giving me a 403 again when my reply was only half-done, and I can't edit it anymore. Rest of reply follows.]

Having said all that, the type `null` also is in fact useful. For example, it allows the use of variants as enums in the first place: in Candid, the type `variant {a; b}` is in fact just a shorthand for `variant {a : null; b : null}`. This way, Candid needs no special handling of such variant cases. (With that in mind, my above pseudo-definitions wouldn't really work in practice, because they would be circular – you'd need another unit type.)

This role of unit types is a general scheme when using generic types. Candid does not have generics yet, but once it has you could imagine an interface to a map canister like (making up some Motoko-style syntax):
```
{
    put : <K,V> (K, V) -> ();
    get : <K,V> (K) -> (opt V);
    has : <K> (K) -> (bool);
}
```
Now, assume you just need a set. Then you can use this canister with type `V = null`, effectively ignoring the value part. Note that you could _not_ use `V = empty`, because then you'd never be able to call `put`.

There are potential use cases without generics, e.g., when evolving some interfaces. For example, say a canister has a function
```
foo : (bar : func (nat, opt nat) -> (nat)) -> (nat)
```
During some upgrade, the canister evolves to not using or needing the optional parameter of the callback anymore. It cannot remove it, because that would break existing clients. But it can indicate it's unused from now on by refining the type of the callback to:
```
foo : (bar : func (nat, null) -> (nat)) -> (nat)
```
This documents the intent while being backwards compatible with callers passing a callback that still allows an option. New clients o.t.o.h. can implement this callback with a null parameter as well, and thereby ignore it.

[quote]
```
|empty| = 0
```

Makes perfect sense for a unit-type. 0 = NEUTRAL.
[/quote]

No, sorry, not at all. You can write a function with return type `null`, because there is a value for it. You cannot write a function with return type `empty`. Also see my map-as-set example above.

-------------------------

levi | 2021-09-15 17:25:04 UTC | #20

[quote="matthewhammer, post:16, topic:6787"]
Step 1: Stub a function in Motoko that has a non-unit return type.
[/quote]

The Reserved type works perfect as a stub. 
[quote="matthewhammer, post:15, topic:6787"]
What are the “facts” of PL design, I wonder?
[/quote]

Good question. The facts are the factual-usage of the system by a coder/user. What are the facts of the usage. How will the coder use the candid library and how can he use it, and how simple or complex (how many steps) it takes do use it in certain ways. These are the facts. 
[quote="matthewhammer, post:15, topic:6787"]
FWIW, I subscribe to a prescriptive stance for PL design, not a descriptive one. Perhaps you are arguing for a more descriptive stance?
[/quote]

“Perspective stance” , “descriptive stance”. These are **VAGUE AND AMBIGUOUS** terms. The opposite of the facts. If you want to use words like that in a conversation I need the factual-terms behind those words.

-------------------------

levi | 2021-09-15 17:45:32 UTC | #21

[quote="rossberg, post:18, topic:6787"]
First of all, the technical definition of value is not dependent on usefulness of values, that would be absurd.
[/quote]

HA!

[quote="rossberg, post:18, topic:6787"]
Now, the `null` variant is a subtype of the `opt` variant.
[/quote]

If you want to make null a variant that is fine with me and even a shortcut Null candid keyword as long as over the wire it is a variant. The Option-type can as well be a variant over the wire I think that is better 
[quote="rossberg, post:19, topic:6787"]
Having said all that, the type `null` also is in fact useful. For example, it allows the use of variants as enums in the first place: in Candid, the type `variant {a; b}` is in fact just a shorthand for `variant {a : null; b : null}` .
[/quote]

We already went over this, reserved can be used here (or empty). 
[quote="rossberg, post:19, topic:6787"]
Now, assume you just need a set. Then you can use this canister with type `V = null`
[/quote]

You can use reserved here as well. (And side point why on earth would anyone want to use a canister that is made specific for a map key,value store as a set? What an example.)
[quote="rossberg, post:19, topic:6787"]
```
foo : (bar : func (nat, null) -> (nat)) -> (nat)
```

This documents the intent while being backwards compatible with callers passing a callback that still allows an option.
[/quote]

 - This can only be backwards compatible if the canister checks for people sending options and skips them.
 -  a canister which makes new clients send it a null value is just a waste. 
 - if this was a legitimate case, the canister can use the type: Reserved .

-------------------------

rossberg | 2021-09-16 06:48:24 UTC | #22

[quote="levi, post:21, topic:6787"]
[quote="rossberg, post:19, topic:6787"]
Having said all that, the type `null` also is in fact useful. For example, it allows the use of variants as enums in the first place: in Candid, the type `variant {a; b}` is in fact just a shorthand for `variant {a : null; b : null}` .
[/quote]

We already went over this, reserved can be used here (or empty).
[/quote]

Indeed, we already went over this, and I already explained earlier that `empty` can _not_ be used, since you would not be able to construct any values of the variant then.

Technically, `reserved` could be used, but would not convey the same information, namely that the argument is unused and doesn't need to be stored. Reserved rather means that the argument can be anything but you don't care (yet) what it is.

[quote="levi, post:21, topic:6787"]
(And side point why on earth would anyone want to use a canister that is made specific for a map key,value store as a set? What an example.)
[/quote]

Quite a practical example, in fact. When you only have a map at your disposal but need a set, that's what you do. Been there done that.

[quote="levi, post:21, topic:6787"]
* This can only be backwards compatible if the canister checks for people sending options and skips them.
[/quote]

I think you missed out on the higher-order nature of this example: it's the canister itself who sends these values.

[quote="levi, post:21, topic:6787"]
* a canister which makes new clients send it a null value is just a waste.
[/quote]

It has no choice if it wants to avoid breaking existing clients. And FWIW, sending values of type `null` takes up zero space in the wire format.

[quote="levi, post:21, topic:6787"]
* if this was a legitimate case, the canister can use the type: Reserved .
[/quote]

Again, that would not be a backwards-compatible choice.

-------------------------

levi | 2021-09-17 18:07:28 UTC | #23

[quote="rossberg, post:22, topic:6787"]
[quote="levi, post:21, topic:6787"]
[quote="rossberg, post:19, topic:6787"]
Having said all that, the type `null` also is in fact useful. For example, it allows the use of variants as enums in the first place: in Candid, the type `variant {a; b}` is in fact just a shorthand for `variant {a : null; b : null}` .
[/quote]

We already went over this, reserved can be used here (or empty).
[/quote]

Indeed, we already went over this, and I already explained earlier that `empty` can *not* be used, since you would not be able to construct any values of the variant then.
[/quote]

@rossberg I see, you put this line in the spec: 
`// NB: M(_ : empty) will never be called` 
This line is a waste. Only there to make the null value try to make sense. If this line (the M-function of the Empty type) is: `M(_ : empty)     = .` this is correct because it is, in the most literal and logical sense, an empty data-sequence (as it says in the spec: “The following notation is used: '.' is the empty byte sequence.” the spec uses the word empty here because the '.' is an empty byte-sequence which fits with the word empty. ). The Empty-type has a type-code in the current-spec: 0x6f, the only reason you are saying it can’t be used as the value of a variant is because of this line: `// NB: M(_ : empty) will never be called`  , which can change for the line: `M(_ : empty)     = .` which will make the Empty-type good for the use as a value in the variants (it already has a type-code). Then we can get rid of that null type.

-------------------------

nomeata | 2021-09-18 06:42:26 UTC | #24

Now you are confusing `null` and `empty`, which are very different beasts.

-------------------------

rossberg | 2021-09-20 06:49:22 UTC | #25

One take-away from this thread perhaps is that the name `empty` is confusing – apparently, some read that as "type with an empty value", not "empty type", and even explaining it several times doesn't make up for the initial misunderstanding.

I wonder if we should rename it to `impossible`?

-------------------------

nomeata | 2021-09-20 07:39:52 UTC | #26

Maybe. How about `none`?

-------------------------

nomeata | 2021-09-20 07:53:16 UTC | #27

But TBH I think `empty` is a fine name, and I am pessimistic that there exists a name that will significantly reduce confusion. Some things just need to be explained, no matter what the name, and the concept of a type without any values is certainly not intuitive.

-------------------------

Sherlocked | 2021-09-24 20:49:22 UTC | #28

the explainer was useful, thank you!

-------------------------

