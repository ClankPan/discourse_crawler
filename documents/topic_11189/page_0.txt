skilesare | 2024-02-12 09:25:20 UTC | #1

This is the first bounty in a series of bounties we are releasing this week in the run up to [Motoko Bootcamp](https://www.dfinitycommunity.com/motoko-bootcamp/). Winners of the Bootcamp's Intermediate level will get first crack at selecting one of these bounties to complete.

# PNG Encoder/Decoder - #12

## Current Status: Discussion

* Discussion (02/20/2022)
* Ratification 
* Open for application
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2022/02/20/PNG-Encoder-Decoder.html)

## Bounty Details

* Bounty Amount: $5,000 USD of ICP at award date - $5000 USD of ICP Match Available
* ICDevs.org DFINITY Bounty Accelerator Grant Match Available: $5000 USD of ICP at award time - (For every ICP sent to 9c935803b4ee39d89d6b4eaf2ead548df6c1cf7314cc74721d06f5d1a131b37c, ICDevs.org will add $125 USD of ICP at award date to the bounty, up to the first 40 ICP donated, After 40 ICP, donations to the above address will add .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives)
* Project Type: Single Contributor
* Opened: 02/20/2021
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Intermediate - Motoko
* Issue Type: Motoko Library

## Description

This bounty gives the opportunity to

* learn how png works
* learn advanced motoko parsing and type management
* learn about cycle management and multi step processes

The goal of this bounty is to create an encoder/decoder for PNG written in Motoko.  PNG is an image format that compresses raw pixels into a manageable file size. PNG is supported by most browsers as an image format for natively displaying pictures.

More info about PNG can be found at:

[https://www.w3.org/TR/2003/REC-PNG-20031110/](https://www.w3.org/TR/2003/REC-PNG-20031110/)

Example PNG libraries can be found at:

* [https://github.com/image-rs/image-png](https://github.com/image-rs/image-png)
* [https://docs.rs/png/0.17.3/png/](https://docs.rs/png/0.17.3/png/)
* [https://github.com/saschaklick/jspng](https://github.com/saschaklick/jspng)


The library will need to support decoding and encoding large images that likely outrun the current cycle limit. You will need to use a library like [Pipelinify.mo](https://github.com/skilesare/pipelinify.mo). Using pipelinify is not required if another, better method is available.  The bounty applicant may also enhance pipelinify.mo for their needs.

Some work on this issue can be found at [https://github.com/aviate-labs/png.mo](https://github.com/aviate-labs/png.mo)

The library will need to provide the following functions(or equivalent with a different multi-step processing library):

```
decode_meta(Buffer<Buffer.Buffer<nat8>>) -> PNG // this may need to be a step process if you have to access the whole file to get meta data

decode(Pipelinify.ProcessRequest) -> Pipelinify.ProcessResponse; //sets up a decode process

decode_process(Pipelinify.StepRequest) -> Result<ProcessResponse,ProcessError>; //executes a step

encode(Pipelinify.ProcessRequest) -> Pipelinify.ProcessResponse; //sets up a encode process

encode_process(Pipelinify.StepRequest) -> Result<ProcessResponse,ProcessError>; //executes a step

decode_result(Pipelinify.ProcessingStatusRequest) -> Buffer<Buffer.Buffer<nat8>>, metadata: PNG};

encode_result(Pipelinify.ProcessingStatusRequest) -> Buffer<Buffer.Buffer<nat8>>;

clear_cache(?Pipelinify.ProcessingStatusRequest) -> bool; //clean out any pipelinify cache for a status request, or the entire cache if null

type PNG = {
    //see the PNG spec and define this type
}

```

The ProcessRequest variables will need to be defined by the developer to conform with the spec.  For this bounty, the dev may implement one optimal configuration of the compression inputs.  A future bounty can allow for more customization.

Results should generally be returned in Buffer.Buffer<Buffer.Buffer<Nat8>> so that files can be manipulated in memory.  The subchunks should not exceed 2MB so that they can be shipped to other canisters under the file transfer limit. The Candy Libray that Pipelinify uses provides a number of functions to help with these limitations.  Feel free to refactor candy and submit improvement pull requests.

The developer will need to experiment with process chunking strategies and make recommendations about how much data can be processed during one process cycle.  Hopefully, we can remove this requirement once deterministic time slicing is integrated.

The final delivery should include test cases for both single step and multistep encoding/decoding.

The package should be deployed as a vessel package.


## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation Accelerator. If you would like to turbocharge this bounty you can seed additional donations of ICP to 9c935803b4ee39d89d6b4eaf2ead548df6c1cf7314cc74721d06f5d1a131b37c.  ICDevs will match the bounty 5:1 for the first 40 ICP out of the DFINITY grant and then 0.25:1 after that.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has be been given and the bounty is closed.

# Matches

DFINITY Accelerator Grant: - $5000 USD of ICP at award date


[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

jzxchiang | 2022-03-01 01:47:02 UTC | #2

Ah, this is one of those superhero bounties.

FWIW, this would be really useful.

-------------------------

skilesare | 2022-03-01 03:16:21 UTC | #3

And we have more coming!

-------------------------

tomoyo | 2022-03-12 16:26:45 UTC | #4

I am very interested in this project. I specialize in image recognition and deal with images on a regular basis. I think this would be useful.
However, I am new to motoko so I'm not sure how much I can do. I will first clone your uploaded github code and see how it works.

-------------------------

Gekctek | 2022-03-12 16:37:20 UTC | #5

Everyone is new to Motoko, i wouldn't worry about that lol

-------------------------

skilesare | 2022-03-12 17:46:56 UTC | #6

This would be a great way to learn Motoko and get paid to do it.  Worst case you can't quite finish the bounty but you get us some percent of the way there.  If you decide that you don't want to finish we can always reassign it.

There are very few low-level binary parsing libraries so some of this may require you to start at the base level.  It might almost be easier to start with the GZIP library as it likely is a bit easier to complete and this one would use a bunch of the similar methods used in that one.

Did you participate in the BootCamp this past week?  If non of the winners want to work on this one you are welcome to give it a shot.  Let's loop back early next week after the BootCamp prices are handed out.

-------------------------

tomoyo | 2022-03-13 16:30:21 UTC | #7

I participate in the BootCamp, but have not yet finished the assignment.
Please let me know if you have new information about this bounty.

-------------------------

inviscidpixels | 2022-04-12 04:58:37 UTC | #8

Hello, I've been interested in this bounty for a while, as I have some related interest in making visual file formats more accessible on the IC... I was also fortunate enough to participate in the Motoko bootcamp, and have been working on making a different kind of minter; as it were, a functional PNG encoder / decoder would be very helpful for the ecosystem and instructive to implement if I can be assigned to do this bounty.

Also, I see tomoyo above had also expressed interest, if you are still interested maybe we can work together because, from what I hear, this is "no simple task". 

Let me know!
Thanks

-------------------------

skilesare | 2022-04-12 12:57:23 UTC | #9

@tomoyo and @inviscidpixels Would you all like to work on this one together?

-------------------------

tomoyo | 2022-04-14 14:40:15 UTC | #10

I'm still learning motoko and haven't finished the boot camp yet, so @inviscidpixels can take this bounty.

-------------------------

skilesare | 2022-04-14 14:49:08 UTC | #11

Sounds good, @inviscidpixels, it is yours.

-------------------------

inviscidpixels | 2022-04-18 13:38:19 UTC | #12

Great... thank you for the opportunity.

-------------------------

Iceypee | 2022-04-26 20:44:13 UTC | #13

@inviscidpixels
are you still down to share this task with someone? I'm doing my masters in imaging related work with matrices, transformations, and stuff, and I've coded in motoko. If youre still cool with partnering up, I'd like to help.

oh and if @skilesare is cool with it too. I know he gave you the approval already.

-------------------------

skilesare | 2022-05-01 15:33:38 UTC | #14

Assigned to @Iceypee with @inviscidpixels maybe providing some assistance.

-------------------------

Iceypee | 2022-05-06 11:24:37 UTC | #15

https://github.com/professionalGithub99/PNG-Encoder-Decoder.git
Just beginning but I think I'm starting to understand the bigger picture.

-------------------------

Iceypee | 2022-05-18 03:50:58 UTC | #16

Just an update pushed an indexing and alpha separation method. For now, I'm just going to do inside one canister. I'm still trying to wrap my head around that pipelinify thing. Once I figure that out, I'll make it scale for two.

-------------------------

jzxchiang | 2022-05-18 06:54:36 UTC | #17

If you can get this to work, that would be superhuman!

-------------------------

skilesare | 2022-05-18 12:21:30 UTC | #18

I'm happy to give a tutorial on pipelinify as well. I've been meaning to document for a while now.

-------------------------

mparikh | 2022-05-18 14:01:17 UTC | #19

That would be awesome to have a tutorial on pipelinfy. I looked at the source; but very little documentation in code. This pipelinfy would be awesome in other large jobs as well.

-------------------------

Iceypee | 2022-05-23 07:57:27 UTC | #20

Just a weekly update, pushed some test functions and added partial index function. please see github for changes

-------------------------

inviscidpixels | 2022-05-23 15:01:36 UTC | #21

You might find it helpful to look up existing PNG decoders/encoders that have already been written in WebAssembly in particular, if you are looking for any more resources as to how to do it all. 

For instance there's some interesting and useful discussion here: https://mpetroff.net/2021/02/space-efficient-embedding-of-webassembly-in-javascript/ even though that's a little more generic than the task at hand. 

In case you hadn't seen these, I had also found (besides the original PNG W3 spec) helpful:
* https://medium.com/achiev/understanding-and-decoding-png-format-example-in-ts-b31fdde1151b
* https://vivaxyblog.github.io/2019/11/07/decode-a-png-image-with-javascript.html
* https://handmade.network/forums/wip/t/2363-implementing_a_basic_png_reader_the_handmade_way

Also in case you haven't seen Quint's work already done to this end: https://github.com/aviate-labs/png.mo his repos, like the examples Dfinity and associates provide, are often a good source of understanding how to code on the IC. On that note let me also point out skilesare's work towards multi-canister scalability: https://github.com/skilesare/pipelinify.mo.

I've got tasks at hand, but I'll keep up with your repo and do code review/etc until I can spend more time actively on this task.

-------------------------

Iceypee | 2022-05-24 11:02:35 UTC | #22

This is quite helpful. I will most likely be using these resources soon as this looks like the decoding part but right now still on encoding/ rgba image to png conversion.  
This source seems most in depth [Implementing a Basic PNG reader the handmade way | Handmade Network](https://handmade.network/forums/wip/t/2363-implementing_a_basic_png_reader_the_handmade_way) . May probably follow this when I get there.

>I’ve got tasks at hand, but I’ll keep up with your repo and do code review/etc until I can spend more time actively on this task.

And of course, anything you can help with would be great.

-------------------------

Iceypee | 2022-05-28 10:17:11 UTC | #23

Another weekly update. Finished all raw image preprocessing operations before encoding procedures. Each of the functions push the data structure that holds the state of a single chunk so that it transfers over to the nth chunk (i.e. for indexing, the pallete gets returned for mapping the next chunk with previous chunk pixels)
![image|690x292](upload://gKXpBN4REL2GUiXLvCeKAcO3Ujp.png)

-------------------------

Iceypee | 2022-05-28 10:27:48 UTC | #24

Disclosure this is only for  8 bith depth channels i.e. rgba =(0-255,0-255,0-255,0-255). It is the most general use case and in the bounty introduction, it uses Buffer.Buffer<Buffer.Buffer<Nat8>> (see picrel below) so I assume its cool. I shall wait a week to see if there is any objection. I am praying none of you raise one as it will make my life much easier haha :sweat_smile:. But in all seriousness, i'll wait a little and if no one objects, I  will continue past this point of no return.


![image|690x298](upload://rO16pJThDn3bhRcrXUiXeKVQgpc.png)

-------------------------

skilesare | 2022-05-28 11:47:37 UTC | #25

I've used Buffer.Buffer<Buffer.Buffer<#candyvalue>> ->workspace in some past work.  It is a good construct for data that you need to manipulate.  It also is helpful to keep things in 2MB chunks which is important if you want to ship data around the IC. https://github.com/aramakme/candy_library/blob/main/src/workspace.mo

It basically creates a data structure  like [[#Nat(height)],[#Nat(width)], [#Bytes(chunk1),#Bytes(chunk2)]]. It also has helper functions that will let you ship the thing to AddressedChunks that can be shipped to stable memory for upgrades and reconstituted.

I've been considering playing with @icme 's StableBuffer https://github.com/canscale/StableRBTree, but haven't had a chance.

-------------------------

Iceypee | 2022-05-28 16:08:26 UTC | #26

Ooouu wait I see how youre using that now. That buffer \<buffer> is for initial params as opposed to raw data. That actually wasn't what I was unsure about, it was about the raw chunk format. But actually, you answered my question indirectly. I just checked the #bytes type for candy and it matches exactly what I was trying to do. Thanks. I will continue to give little updates weekly.

-------------------------

Iceypee | 2022-07-11 02:33:23 UTC | #27

New update, just added alpha compaction -> I forgot to do this the last update for preprocessing. 
Check the github and the test folder to view my progress summary. Got a little busy the last few weeks but back to getting this done.
Now moving onto the actual encoding of the raw image preprocessing. 
![image|519x500](upload://tIjnCUi5VLlIVs4J8vxTW9pD2Eo.png)

-------------------------

Iceypee | 2022-07-11 02:35:09 UTC | #28

btw, im literally reading down this spec sheet:
https://www.w3.org/TR/2003/REC-PNG-20031110/
 while keeping my implementation aesthetic similar to https://github.com/saschaklick/jspng 
in case you're following along.

-------------------------

skilesare | 2022-08-10 13:18:29 UTC | #29

Any updates on this?

-------------------------

Iceypee | 2022-08-10 18:06:22 UTC | #30

Been backed up this last month but I still planning to work on it. If there’s anyone that wants to fill in and work faster either to takeover or work in conjunction I’m okay with that.

-------------------------

skilesare | 2023-01-18 23:06:56 UTC | #31

This Bounty has increased to $14,000.

-------------------------

tommy-a | 2023-02-28 22:46:33 UTC | #32

Hi there!  Have a bit of a background in image processing and have been thinking about exploring Motoko -- just curious, but has there been any further progress on this bounty / is it still open?

If not, would love to make a proper application!

Cheers,
Tommy

-------------------------

skilesare | 2023-03-01 15:07:09 UTC | #33

It is open. I can request that you be assigned. You can get started. I am at ETHDenver this week, so I may be a bit out of pocket.

-------------------------

tommy-a | 2023-03-02 01:25:11 UTC | #34

Awesome, ty! I'll get a repo and more info about what I'm thinking about out tomorrow, have fun at ETHDenver!

-------------------------

piens | 2023-03-02 23:27:31 UTC | #35

I'm also open if any help is needed, although it doesn't seem like collabs are allowed. Will keep an eye.

-------------------------

hanbu97 | 2023-03-03 02:11:29 UTC | #36

Hi, I'm quite interested in this bounty. I have finished a sha3 lib in motoko by myself. And I'm a experienced rust developer in Crypto area. Before I came into crypto, I was a graduate student major in Bio Imaging(cryoEM denoise and reconstruction), so I have knowledge in image processing.

It seems like this task has already been assigned, but my understanding is that being assigned doesn't guarantee its completion. Therefore, I would like to give it a try and do my best to complete the task. If I succeed, I would appreciate it if I could receive the bounty just like the person who was originally assigned to it.

Thank you.

-------------------------

skilesare | 2023-03-03 04:34:23 UTC | #37

Collars are fine if you guys organize it yourself and let me know.

-------------------------

piens | 2023-03-03 15:20:04 UTC | #38

The package you referenced, `png.mo`, is strictly an Adler32 implementation and is better kept seperate. 

Work should first focus on implementing zlib correctly, as it is a prerequesite for png anyway. Iceypee seems to have instead taken a bottom-up approach so far.
Focusing on the subtasks, namely the independent subformats of PNG, I see that we could greatly benefit from sharing work between us three. Zlib, and hence DEFLATE, is an important step towards a working enco/deco and should reside in their own packages. In the meanwhile, someone else could independently focus on, say, filters and color modes.

Hence, I propose the following subtasks, which, if you're down for it, each one of us should pick from and start working on.

* A DEFLATE package, and later a Zlib package utilizing it, both independent from PNG itself
* chunk stream parsing, filling out metadata structs
* pixel encoding/decoding itself, along with filters and interlacing (if we want to support it from the start)
* crc32, in its own package, and paeth filtering in its own file

We should agree on an interface to metadata, both global and chunk-wise, if we are to proceed with PNG-specific implementation seperately. I'd like to know your thoughts.

-------------------------

skilesare | 2023-03-07 18:40:14 UTC | #39

@tommy-a, @piens, @hanbu97 

Any updates or desire to coordinate?  Sounds like much of this might depend on @tomijaga 's work on the zip lib.

It looks like he hasn't done any work in the last month so he may be willing to hand the bounty off to someone else.  https://github.com/NatLabs/deflate.mo

-------------------------

hanbu97 | 2023-03-08 02:11:12 UTC | #40

I would like to take over this project. And I am happy to share the bounty if others have independent and complete work in subtasks as piens says above. @skilesare

-------------------------

hanbu97 | 2023-03-08 02:28:22 UTC | #41

I will first simplify Rust lib image-rs/image-png and separate deflate related part. 

Second, test NatLabs/deflate.mo lib according to result from Rust.

Third, handle the easiest case based on Rust implemention.

Then, consider chunk and other things to fit more complicated situation.

-------------------------

piens | 2023-03-10 10:59:26 UTC | #42

Hey, I've had serious hardware failure the last couple of days but back online now. I'm getting started with chunk parsing and metadata decoding after I get dfx set up on my backup

-------------------------

piens | 2023-03-10 10:41:16 UTC | #43

Could you clarify what you're looking for in the Rust lib and how it relates to our Motoko implementation?

-------------------------

piens | 2023-03-10 22:29:43 UTC | #44

For our purposes, the library is quite lacking in that it does not implement decoders. Also, keep in mind that Gzip != zlib. Nevertheless, the encoders are great to have for now.

-------------------------

piens | 2023-03-10 22:35:28 UTC | #45

Please take a peek at deflate.mo and let me know if you'll be able to adapt it for decoding and a later zlib implementation. I'm finished with chunk/config decoding and will get onto palettes and pixels next. If you have any trouble with zlib we can also collaborate on it, since only encoding is missing from deflate and we have nothing for zlib yet.

-------------------------

piens | 2023-03-13 12:08:19 UTC | #46

I've implemented much of the spec directly but haven't had a chance to properly test it yet. I'd like to deploy some testing suite. So far, I've written a simple frontend that was supposed to send files over the javascript candid interface, but it doesn't seem like javascript can serialize to Candid's `vec uint8`.
The precise specification of javascript-Candid mappings does not seem to be available right now (or has been moved).
 Is there any preferred way to load file data into canisters?

-------------------------

icaten | 2023-03-13 15:48:03 UTC | #47

Here's some examples on how to upload data which can be a png:

[From Node.js NFT Minting - Developer Docs](https://internetcomputer.org/docs/current/developer-docs/agents/nodejs).
[Motoko - FileUpload](https://github.com/carstenjacobsen/ic-docs/tree/0c3fdd7c35a996752cd035574dfc7c45a7d37a9b/motoko-fileupload)

Under 2MB and you won't have to worry about chunking if that makes things simpler to get working. 

To do integration or E2E testing, I would recomend using Vitetest: [Testing Your Canister With Vitest](https://kyle-peacock.com/blog/dfinity/simple-canister-e2e). Note you can also set the node compatibility flag for the generated declarations (in `dfx.json` of each Motoko canister you are testing) to simplify this process if you also set the test project's `package.json` field `"type": "module"`. This will make each `.js` file in the test project an ESM module which will be automatically compatible with what the declarations are generated with (import/export). Configuring Jest to do this is a bit more of a pain. On that note, if work for the bounty is still being split up, I'd be happy to take on setting up unit and/or e2e tests.

-------------------------

piens | 2023-03-15 14:58:23 UTC | #48

I've received no response from the others and the Zip bounty is incomplete and will thus proceed to implement a Zlib/DEFLATE decoder. After that's done, the decoding part of this bounty will be complete. I hope encoding will go equally as well. I'll post a repo up soon.

-------------------------

piens | 2023-03-19 14:41:26 UTC | #49

I've been adapting to motoko quite well up to this point but there are some uncertainties which have affected the implementation that I'd like to work out with you. The most prominent of those is one related
 directly to the low-level nature of this task, and is the issue of memory addressing. As has been acknowledged in the documentation, Motoko does not provide direct memory pointers. What's more, no method exists as either built-in or a standard library function of changing what memory an array refers to.
Although I have managed to disect the png stream with a base `readBytes()` method of my decoder so far, the task of Zlib decoding has been complicated considerably, so much so that I am unable to continue in the current architecture. 
For example, in the function
```
func decode(b : [Nat8]) {
  ... parse the first two bytes ...
  ... Deflate.decode(..the rest..) ...
}
```
I would like to be able to copy b,
adjusted to begin 2 positions beyond the original, while being sure that the underlying memory is not copied. In fact, javascript's `slice()` function, which does provide such guarantees, is exactly what the jspng library you cited in the body of this bounty uses.

-------------------------

piens | 2023-03-19 15:15:08 UTC | #50

The above issue of course stems from the fact that all components of the library, as of now, assume that the entire buffer is available, and many accept byte arrays as arguments. This has been done for simplicity, so as to focus on the _specification_ first, and later adjust the implementation to the task's requirement of multistep processing. It could, of course, be alievated by defining decode as a method of a `Deflate` _class_ (rather than module, as in the above example), which would inherit the offset in the input buffer from an enclosed object. That is, a base `reader` object would be accepted as argument of every function (or object constructor) that wants to access the source buffer, and its `readBytes` method called. This is in contrast to the current implementation where `readBytes` is  a method of the PNG decoder itself.
Regardless, I am unsure whether that would make up for the lack of pointer arithmetic or any kind of reference adjustment, and hope a sufficient solution for Motoko exists.

The above leads me to the issue of working on incomplete input. Currently, the `decode()` and `decodeConfig()` methods of the PNG decoder accept arrays of bytes (`[Nat8]`. I am aware that Blob is preferred but, for simplicity, I rely on Nats for now). By adopting a scheme similar  to that described above, namely of the `decode()` function accepting a `reader` object with a `readBytes` method, the decoder could be made to accept its input _incrementally_.
The library you cited, Pipelinify, does not seem to be documented. This prevents me from making any decision on the case. What I need of you is a reference to the documentation, if any, or a summary of the aspects involved. That is, I would like to learn how the design of the Pipelinify library was influenced by the structure of IC, and what requirements/special cases would need to be handled for the PNG decoder. As the bases of further discussion, I would like to learn why the approach of accepting a `reader` object (equivalent to Golang's `io.Reader` interface)  might be insufficient.

-------------------------

skilesare | 2023-03-20 16:02:09 UTC | #51

I'll give a bit of background on pipelinify. Unfortunately, documentation has been on my todo list for over a year and doesn't look like it will surface any time soon.

I was working with images. I was using the browser to convert pngs to bitmaps and then pushing the entire bitmap into the IC and then processing each pixel to do things like blur, greyscale, and resize. I had to adapt all algos to block-based and I was storing all data in 2MB chunks.

We didn't really even have heartbeat in motoko at that point I don't think, so the process had to be run by calling an update call over and over until the process finished.  This would be massively simplified with the timers API we have now.

Pipelinify basically lets you 1. Create a workspace, 2. Push data into that workspace in chunks, 3 ask a canister to process that data in a loop until it is done. 5. reports the status 6. deliver the resulting content in chunks.

The key was having data in ready to access workspaces where I could view and manipulate the bits without having to copy massive streams of data.  Then I had to adapt the processing functions to operate on those arrays instead of streams.

-------------------------

piens | 2023-03-20 17:17:18 UTC | #52

So, Pipelinify is a tiny *protocol* for abstracting the pecularities of IO from IC applications. After a second thought, I see that it is basically a CSP concurrency model (isn't it?). The requests/responses would correspond to send and receive operation on named channels (from the peek I took at the source, I remember that Pipelinify connections have IDs). The `encode_result()` would then correspond to a channel receive.

The approach I suggested. that of reader objects, is an appropriate one for the inter-component (decompressor<->decoder<->...) input propagation. The top-level (chunk) decoder would share its reader with the compressor that need later be called, ensuring that the position in the byte array is maintained (which was what I worried about earlier, due to the lack of reference modification in Motoko -- a modified pointer to the array can't be passed to the decompressor).

At this stage of development, I believe such scheme would also suffice for the top level decode function.
Input would be consumed by the decoder at the rate that it is produced by a reader, and the complete pixmap returned completely once, as the return result of a single function. 

Later, when we have a complete spec compliant implementation, I will adjust the interface to one that yields results in chunks, be it with Pipelinify or a custom solution.

As far as Pipelinify is concerned, I should get familiar with the `*Request` and `*Response` types next, which should clear some things out.

For now, the interface of the decoder changes from
```
decode(b : [Nat8]) : PNG
```
to
```
decode(r : Reader) : PNG
```
where
```
type Reader = {
  read(n : Nat) : Blob;
};
```

-------------------------

piens | 2023-03-20 17:40:34 UTC | #53

Still, the lack of any way to adjust what references (arrays in our case) point to is a major obstacle. Surprisingly, even javascript provides a 'shallow-copy' `slice()` operation. I'm not sure of the performance implications of interfaces (through subtyping), in the style of the Readers mentioned above, so any reassurance about the characteristics of the implementation of subtyping in motoko would be welcome.

-------------------------

piens | 2023-03-20 17:44:33 UTC | #54

On another note, I recall that a bounty was also placed at Pipelinify documentation and refinements. As the current bounty is leading me onto Pipelinify, I could, by passage, do some work on that case.
For now, the Regexp bounty, for which I submitted a week ago, is still not closed. I would apprieciate if you could put some attention to it such that we can proceed further.

-------------------------

Immutable | 2023-03-20 18:51:26 UTC | #55

Awesome bounty. Very useful post and bounty.

-------------------------

skilesare | 2023-03-20 22:30:25 UTC | #56

I had a meeting with dfinity today and we should be in the next round of payouts.  When I get the payment I'll submit closeout votes to the board at that price and then pay out as they are improved.

-------------------------

skilesare | 2023-03-20 22:31:00 UTC | #57

Also check your DMs for more pipelinify info.

-------------------------

piens | 2023-03-22 21:53:54 UTC | #58

Everything is looking good at this point and I'll try to share the repo with you tomorrow. I got started with the Zlib/Deflate decoder today. I have a general interface for pixel data access (with pixel channel descriptors and all) in mind and will lay some stubs for the _encoder_ soon. The repo you shared illustrated how image manipulation in motoko might look like and gave some valueable insight to what your expectations might be, on top of the obvious of illustrating how pipelining might be set up. I'd say we're a good bit over half-way done, and I have a  good general idea of how my current codebase could be adjusted for pipelining.

-------------------------

piens | 2023-03-27 19:27:18 UTC | #59

I wanted to get zlib/deflate working properly before I share it with you, but faced some serious obstacles. Overall, I've spent the last 4 full working days on the issue and am certain that work can continue smoothly now. I will take a one day break and get it all wired up right after. Then, we'll finally have acess to raw pixels.

On the topic of deflate issues (zlib was trivial and was working the day of the last message), here are two quotes from the official documentation:

>[....] the code length code lengths (really).

>[...] code length code lengths (you come up with a better name!)

....
What can I say. Huffman codes encoded with Huffman codes (themselves encoded with a prefix code, run-length encoded) are real fun.

I have one more issue with Motoko's type system not liking some things the spec requires but I'm sure it won't be as bad. I'll reprot back if I need anything.

-------------------------

skilesare | 2023-03-27 21:50:34 UTC | #60

Oh my...that sounds annoying. Thanks for the amazing work and pushing through it!

-------------------------

piens | 2023-04-08 19:15:24 UTC | #61

Hello again, Zlib and Deflate are both working and you can expect the repo here soon. That will be it for the decoder, save for the changes we'll need for multi-step. Tomijaga also finished their own Deflate decoder so I'll be sure to take a look at it and see how it compares. Tomijaga did fixed Huffman codes, which I skipped in my implementation, so I might be able to incorporate now that it's available.

-------------------------

hanbu97 | 2023-09-29 12:20:28 UTC | #62

@skilesare I previously expressed interest in taking it on, but it was not assigned to me. It appears that Piens has done some work on this, but I haven't seen their output. It has been half a year since their last update. I'm unsure about the current progress of the project. 

If the project has not yet been completed, could it be reassigned to me? I have already done some preliminary work on this. 

Could you please provide me with current status? I would like to contribute to this project and help to bring it to completion.

-------------------------

hanbu97 | 2023-09-30 01:27:47 UTC | #63

Hi @diegop, @skilesare, maybe we can rectify the PNG encoder/decoder developing process and get it back on track.

-------------------------

diegop | 2023-10-02 21:12:19 UTC | #64

@hanbu97 Fair point. I do not run the bounty, so I will let @skilesare answer.

-------------------------

skilesare | 2023-10-03 02:16:19 UTC | #65

[quote="hanbu97, post:62, topic:11189"]
on this, but I haven’t seen their output. It has been half a year since their last update. I’m unsure about the current progress of the project.

If the project has not yet been completed, could it be reassigned to me? I have already done some preliminary work on this.

Could you please provide me with current status? I would like to contribute to this project and help to bring it to completion.
[/quote]

I'm doing some restructuring on the Bounty program.  This one is pretty stale and didn't get past the finish line. Give me a bit and if this one still fits the profile on the new program we'll reopen it.

-------------------------

hanbu97 | 2023-10-03 02:19:28 UTC | #66

Thanks for the update on the Bounty program! I'm excited to jump in and contribute to the new projects. Keep me in the loop!

-------------------------

W_work | 2023-10-06 12:19:36 UTC | #67

Would you like to team up I start working on gzip but sort of stucked. It would be awesome to pair program this or sort of.

-------------------------

hanbu97 | 2023-10-07 02:24:13 UTC | #68

Absolutely, I'd be happy to team up with you! However, I'd like to wait until the updated Bounty program is officially released. Once projects are formally assigned, we can then decide on which tasks to collaborate on and start developing. Looking forward to it!

-------------------------

hanbu97 | 2023-10-07 02:26:15 UTC | #69

@skilesare Hi, any updates on the new Bounty program? Thanks!

-------------------------

