senior.joinu | 2021-07-15 16:17:06 UTC | #1

I see the macros `candid::export_service!()`, but how do I use it?
Should I implement another macros that will call `__export_service()` and write a file with the content it returns or what?

-------------------------

nomeata | 2021-07-16 21:17:55 UTC | #2

Try this
```
}

export_service!();

#[ic_cdk_macros::query(name = "__get_candid_interface_tmp_hack")]
fn export_candid() -> String {
    __export_service()
}
```
(taken from https://github.com/dfinity/candid/blob/a555d77704d691bb8f34e21a049d44ba0acee3f8/tools/ui/src/didjs/lib.rs#L72-L77).

It would probably a reasonable feature request for cdk-rs to provide all of the above under a single macro (`expose_candid_interface()`). This would especially be useful if the underlying interface changes – then people just have to recompile their canisters, but not change any code.

-------------------------

senior.joinu | 2021-07-16 20:25:18 UTC | #3

Thanks!

But what do I write under `candid` key in my `dfx.json`?
In the mentioned example there is a valid candid file already written by hand. 

The problem I want to solve is to generate `.did` file automatically.

-------------------------

chenyan | 2021-07-16 21:17:55 UTC | #4

There is a PR for generating did files: https://github.com/dfinity/cdk-rs/pull/28

The proposed solution requires compiling the code twice, one for WASI and one for IC. Not ideal, but works.

-------------------------

roman-kashitsyn | 2021-07-16 20:44:24 UTC | #5

I believe it pays off to have your .did file committed to the repository, documented, and curated manually. This is the face of your canister, the main thing that people who integrate with your canister will care about. It's a lot like a header file for a C/C++ library or a module interface file in OCaml.

Being able to generate a .did file automatically is still very useful:
1. You can use it get the first version of the .did file that you can edit by hand afterwards.
2. You can use it to generate the _actual_ interface of your canister and pipe it to `didc subtype` as a precommit hook to make sure that the manually curated `.did` file is not obsolete.

IC governance canister adds a `main` function that outputs the `.did` file when compiled in native mode:
https://github.com/dfinity/ic/blob/40ab84f4fcb9e6c2441e91a59cfaa5acf84fe38d/rs/nns/governance/canister/canister.rs#L742-L756
The generated `governance.did` file is also committed to the repository: https://github.com/dfinity/ic/blob/40ab84f4fcb9e6c2441e91a59cfaa5acf84fe38d/rs/nns/governance/canister/governance.did

-------------------------

lastmjs | 2022-02-11 22:38:22 UTC | #6

[quote="nomeata, post:2, topic:5924"]
`export_service`
[/quote]

I would love to see this! Is the team interested in adding this? I'm happy to do the PR if it will be accepted

-------------------------

lastmjs | 2022-02-11 22:47:49 UTC | #7

Why is this macro necessary `#[candid_method(query)]` to generate the candid types? If I expose a canister method as through `#[query]` or `#[update]`, then shouldn't it be part of the Candid interface?

Even if it is desirable to allow not exposing an already-exposed method in the Candid interface, would it not be better to opt out instead of having to opt in?

I've already gone through the work of annotating my functions with `#[query]` or `#[update]`, thus they are exposed, thus I want them in the Candid.

-------------------------

lastmjs | 2022-02-11 22:49:23 UTC | #8

Also, has anyone written a tool that will convert a `.did` file into Rust types? That would be super useful for interoperability between canisters written in different languages. I once spent most of my integration time with a canister just writing Rust types because all I had was the `.did` files. The logic was relatively simple but so much of my time was spent basically transpiling Candid into Rust.

-------------------------

senior.joinu | 2022-02-11 23:08:40 UTC | #9

[quote="lastmjs, post:8, topic:5924"]
Also, has anyone written a tool that will convert a `.did` file into Rust types?
[/quote]

https://github.com/dfinity/candid/blob/master/rust/candid/src/codegen/rust.rs
I don't know if such a tool exists, but  ``#[import]`` macro does exactly that in a background.

-------------------------

chenyan | 2022-02-11 23:15:54 UTC | #10

`didc bind a.did -t rs`

-------------------------

lastmjs | 2022-02-12 14:46:29 UTC | #11

I am forever changed

-------------------------

coin_master | 2022-02-12 15:06:50 UTC | #12

I am getting this error
```
> didc bind can.did -t rs 
error: 'rs' isn't a valid value for '--target <target>'
        [possible values: did, js, mo, ts]
```
Is that a newer version?
I have v `0.1.0`

-------------------------

chenyan | 2022-02-12 17:22:29 UTC | #13

Yes, please download the latest release, which is v0.1.3: https://github.com/dfinity/candid/releases

-------------------------

paulyoung | 2022-04-18 15:51:34 UTC | #14

[Generating service descriptions](https://smartcontracts.org/docs/candid-guide/candid-concepts.html#_generating_service_descriptions) says:

> After you develop a service in a language like Rust, however, there’s currently no way to automatically generate the service description in Candid. Therefore, if you write a program for a service in Rust or C, you need to write the Candid interface description manually

-------------------------

chenyan | 2022-04-18 18:23:39 UTC | #15

The doc is correct in the sense that we don't have a user-friendly solution to automatically generate Rust bindings yet. `didc` can generate a Rust binding, but in many cases, you still need to hand-tune the output, for example, to derive more traits, add lifetime, add `Box`/`Arc`. Will update the doc once we have a configurable way to guide the binding generation.

-------------------------

nomeata | 2022-04-19 06:50:22 UTC | #16

There may be confusion: Paul linked to “generating service description”, i.e. going from rust to Candid. Yan seems to talk about going from Candid to Rust.

For Rust-to-Candid, we do have some macros, don’t we? The Candid guide should be updated to reflect that.

-------------------------

chenyan | 2022-04-19 15:26:00 UTC | #17

Ah, right. Rust-to-Candid is fine. We plan to include that macros into the CDK, so that users don't need to write them anymore.

-------------------------

saikatdas0790 | 2022-07-30 10:48:13 UTC | #18

any tentative timeline for this? including docs

-------------------------

lastmjs | 2023-03-08 21:38:25 UTC | #19

Any update on automatically generating the Candid from Rust? It would be so nice for Rust/custom canisters to have the same experience as Motoko where all of the Candid generation is hidden away unless the developer explicitly wants to write a Candid file by hand.

This would help the Azle and Kybra CDKs a lot.

-------------------------

lwshang | 2023-03-09 14:24:14 UTC | #20

We prioritized this work in 2023 Q2. If everything goes well, we will get it in April.

-------------------------

lastmjs | 2023-03-09 17:42:34 UTC | #21

So excited for this!!!

-------------------------

lastmjs | 2023-05-01 15:49:57 UTC | #22

Hey! April is now over, any update on this?

-------------------------

chenyan | 2023-05-01 17:49:01 UTC | #23

Will be part of the new CDK release: https://github.com/dfinity/cdk-rs/pull/386

-------------------------

lastmjs | 2023-05-01 17:56:09 UTC | #24

To clarify, will this allow developers to remove the `candid` property from their `dfx.json` file?

What we're after is removing that requirement and having dfx automatically retrieve Candid from Rust (and custom canisters that use Rust), unless the developer explicitly specifies a Candid file.

-------------------------

chenyan | 2023-05-01 18:29:43 UTC | #25

The main goal is that developers no longer need to use the `candid_method` attributes to generate the did file. 

You can use the generated did file as the final did file, so the `candid` field in dfx.json will be optional. It's still recommended that the developer provides the final did file for better readability. `dfx build` can check if the provided did file is out of sync with the generated did file.

-------------------------

lastmjs | 2023-05-01 18:39:25 UTC | #26

So will we still have to run wasmtime or something ourselves to get the generated did file? Or will we simply be able to upgrade dfx and remove the candid property? It looks like there's still commands that the developer will need to run to generate this?

-------------------------

lastmjs | 2023-05-01 18:42:01 UTC | #27

Just trying to understand, will dfx be able to generate and find the did file on its own? Will it be automatically included in the public metadata section?

-------------------------

chenyan | 2023-05-01 19:07:33 UTC | #28

Yes, dfx will run wasmtime and store the did file in the metadata if the canister type is Rust. The build script is for custom type projects.

-------------------------

lastmjs | 2023-05-01 19:45:16 UTC | #29

Okay I understand, and that's great. Can we get the same functionality somehow for custom canisters that use Rust? Azle and Kybra create Rust canisters, but we use the custom type to insert our own build process. Otherwise we won't be able to take advantage of this.

-------------------------

chenyan | 2023-05-01 20:10:52 UTC | #30

The build script in that PR should work for custom canisters?

-------------------------

lastmjs | 2023-05-01 21:11:21 UTC | #31

But that build script requires wasmtime and ic-wasm, both dependencies we would need to figure out how to install automatically for Azle and Kybra devs. These dependencies and extra build steps cause complications for our CDKs, if dfx can do it all that provides a really nice experience for us.

-------------------------

lastmjs | 2023-06-05 16:15:51 UTC | #32

Has this functionality been released yet?

-------------------------

lastmjs | 2023-06-05 16:17:41 UTC | #33

And just bumping this question, will we be able to use the same Rust functionality in custom canisters? It's very desirable for us to not have to run our own wasmtime or other infrastructure to generate the did file for our users, we would love for dfx to do all of this for us.

-------------------------

chenyan | 2023-07-10 23:42:53 UTC | #34

The goal is to support Rust canister type in dfx. If the custom canister is based on Rust, you can include [the script listed in the PR](https://github.com/dfinity/cdk-rs/pull/386) in your own build process without waiting for the dfx release.

There are still a few design decisions we want to make in that PR. Would be good to know how your use case fits in.

* Generating did file requires building a binary either in Wasm or in the host architecture. There are pros and cons to both options: 1) running in Wasm requires wasmtime, which dfx will provide in its cache. The build time is shorter, since we only need to build for one architecture; 2) running in host architecture doesn't require wasmtime, but the build time is longer. However, if you already have unit tests running, you are already building in the host architecture, so there is no extra build time needed. We may end up supporting both depending on the use cases.
* The current PR requires putting `ic_cdk::export_candid!()` at the end of the main file, which looks weird and is easy to forget. We are trying to find a better way to do this.

-------------------------

lastmjs | 2023-07-11 04:31:51 UTC | #35

Our use case is a general-purpose build step abstracted away from the developer, and simpler than what we have now.

We've already been doing this in Azle and Kybra, compiling for wasm32-unknown-unknown in Azle and now Wasi in Kybra. I think it's better to compile for Wasm and not the host environment, we've run into some strange issues while compiling for the host environment, and especially considering the various different host environments it seems much safer and simpler to compile for wasm32-unknown-unknown or Wasi. Please keep in mind Wasi as that support is coming for the IC soon, and we had to do some extra work to run the Wasm binary plain when compiled to Wasi.

Just to make sure, will this work for custom canisters? If it won't work for custom canisters then it is not useful to Azle and Kybra. We are already running our own build step that compiles the canister to Wasm and runs it through a local Wasm VM (Node's Wasm VM for Azle and Wasmer for Kybra). The reason I am pushing for dfx to handle this is to reduce the complexity of our build systems and having to install a Wasm VM generally across all possible systems that our devs may have.

I just ran into this problem on Mac M1's with our new version of Kybra using Wasmer, it simply broke because Wasmer was not supported on those chips. Also our work-around is to add to the post_install script a call to the canister to get the Candid file, but this doesn't allow an easy way to put the candid into the Wasm metadata, because we've already deployed the binary.

dfx handling all of this for custom canisters will be very nice and solve issues we've been dealing with for a long time.

-------------------------

lastmjs | 2023-07-11 04:35:37 UTC | #36

[quote="chenyan, post:34, topic:5924"]
The goal is to support Rust canister type in dfx. If the custom canister is based on Rust, you can include [the script listed in the PR ](https://github.com/dfinity/cdk-rs/pull/386) in your own build process without waiting for the dfx release.
[/quote]

We need this to work for the custom canister type as well, using the script is not useful to us as we're already doing that and the main purpose of this functionality for us is to not have to run our own process to generate the Candid file.

Also, can we remove the need to provide the Candid property in dfx.json? That's another goal we have, the dev should not have to provide that. Motoko has this dx and it is very nice. If they want to override the Candid they can provide a path to a hand-written Candid file, otherwise I don't see why they should need to deal with this IMO unnecessary complexity.

-------------------------

chenyan | 2023-07-11 23:29:36 UTC | #37

> we’ve run into some strange issues while compiling for the host environment, and especially considering the various different host environments it seems much safer and simpler to compile for wasm32-unknown-unknown or Wasi.

Do you have an example where things go wrong? `cargo test` is building binaries for the host environment. As long as the platform is supported by Rust, we should be fine?

> Just to make sure, will this work for custom canisters?

The short term focus is for Rust canister type only. For custom canisters, it's unclear how dfx can help. It's possible that the canister is not even based on Rust. What's the problem of adapting the build script, which is essential what dfx will do behind the scene?

> The reason I am pushing for dfx to handle this is to reduce the complexity of our build systems and having to install a Wasm VM generally across all possible systems that our devs may have.

Does it help if `wasmtime` is packaged in dfx, which can be called from `.cache/dfinity/version`?

> We need this to work for the custom canister type as well, using the script is not useful to us as we’re already doing that and the main purpose of this functionality for us is to not have to run our own process to generate the Candid file.

You have your own build script anyway. What's the difficulty in adding a few more lines?

> Also, can we remove the need to provide the Candid property in dfx.json?

Yep, candid field will become optional.

-------------------------

lastmjs | 2023-07-12 22:00:13 UTC | #38

[quote="chenyan, post:37, topic:5924"]
Do you have an example where things go wrong? `cargo test` is building binaries for the host environment. As long as the platform is supported by Rust, we should be fine?
[/quote]

It was a while ago and the situation was rather complicated, somewhere in our dependencies, possibly with ic-cdk or similar crates, compiling on my laptop's architecture broke but compiling to wasm32-uknown-unknown did not. We tracked it down to compiling for two different architectures.

-------------------------

lastmjs | 2023-07-12 22:03:54 UTC | #39

[quote="chenyan, post:37, topic:5924"]
The short term focus is for Rust canister type only. For custom canisters, it’s unclear how dfx can help. It’s possible that the canister is not even based on Rust. What’s the problem of adapting the build script, which is essential what dfx will do behind the scene?
[/quote]

It's not too difficult to add an option to dfx.json to allow custom canisters to do this right? If a custom canister is actually a Rust canister under-the-hood, like all Azle and Kybra canisters are, then we still would want to take advantage of this feature.

Adding a flag/property to dfx.json to turn this on optionally seems like a great solution to me.

The build script is the whole reason we want this functionality in the first place, we don't want to have to run that build script and install wasmtime onto the developer's machine automatically. We are trying to build a general-purpose build process that works for everyone, and dealing with wasmtime/wasmer adds unnecessary complexity if dfx can just do it for us. We want to remove as many dependencies as possible, so that the dev only has to install dfx and Azle/Kybra.

We've already had issues with wasmtime, I had to remove it in favor wasmer when we switched to Wasi, and wasmer is currently broken on Mac M1s. Now I'm stuck again, because getting the Candid out of post_install causes problems since the canister has to be entirely deployed first.

The issues with this are many and it's caused us major setbacks.

-------------------------

lastmjs | 2023-07-12 22:13:18 UTC | #40

[quote="chenyan, post:37, topic:5924"]
Does it help if `wasmtime` is packaged in dfx, which can be called from `.cache/dfinity/version`?
[/quote]

Yes this helps a lot, but allowing custom canisters to turn on this option seems the more ideal solution so that we can remove this code entirely from our build process.

Actually this might not help, as I mentioned above I switched from wasmtime to wasmer because of issues with wasi, but perhaps you've overcome those issues in the cdk. There were some problems with the ic-wasi-polyfill, wasi2ic, or something like that. I assume you've overcome those in the cdk but we'll have to see.

-------------------------

lastmjs | 2023-07-12 22:11:59 UTC | #41

[quote="chenyan, post:37, topic:5924"]
You have your own build script anyway. What’s the difficulty in adding a few more lines?
[/quote]

It's not about adding a few lines, it's about the complexity of installing yet another dependency, a Wasm runtime, on an arbitrary developer's machine. DFINITY has done a great job of getting dfx to work very well across architectures, we currently don't have the infrastructure setup to easily precompile dependencies across architectures...maybe we've been doing it wrong, but it's been difficult to deal with these issues.

cargo test caused problems in the past because of long compile times and issues compiling across architectures like I mentioned, then we switched to installing a wasm runtime across architectures which as had its own problems, the latest being that wasmer (and we had to switch away from wasmtime because there were issues with wasi) not working on Mac M1s, and now we're trying to get the Candid out in post_install using `__export_service` which is problematic for other reasons.

The developer experience for us and our users will be excellent if dfx can remove the requirement to specify a candid file and if it can automatically generate and obtain it from Rust canisters, even if those canisters are declared as custom.

-------------------------

lastmjs | 2023-07-12 22:18:48 UTC | #42

There are at least two problems with retrieving the Candid in post_install:

1. There is no way to put the Candid into the metadata before the first deploy
2. init/post_upgrade params don't work when deploying with dfx because apparently the `--argument` is not encoded or recognized by dfx since the Candid file is empty (in our case it is empty because on the first deploy we create a Candid file with an empty service, then on that post_install we request the Candid and write it to disk, then on subsequent deploys everything is good unless the init/post_upgrade params change)

I'm currently stuck on this problem right now, 1 isn't too bad for the moment because `__get_candid_interface_tmp_hack` is supported by tooling, but 2 seems like a blocking issue (that I just discovered).

-------------------------

chenyan | 2023-07-12 22:54:31 UTC | #43


> Yes this helps a lot, but allowing custom canisters to turn on this option seems the more ideal solution so that we can remove this code entirely from our build process.

It's not possible to remove this code entirely from the build process. dfx has no knowledge of how your build script works, so you will have to adapt the build script. dfx can certainly help by providing the necessary dependencies, e.g., wasmtime and ic-wasm in the cache. Your current approach for using post_install is certainly problematic, and that's what we want to fix.

> Actually this might not help, as I mentioned above I switched from wasmtime to wasmer because of issues with wasi, but perhaps you’ve overcome those issues in the cdk.

Maybe. We will have to see. Can you show me your build script, so that I can take a deeper look?

-------------------------

lastmjs | 2023-07-12 23:13:12 UTC | #44

[quote="chenyan, post:43, topic:5924"]
It’s not possible to remove this code entirely from the build process. dfx has no knowledge of how your build script works, so you will have to adapt the build script
[/quote]

If dfx sees a custom canister that has a property turned on to automatically generate the Candid from Rust code, couldn't it look at the wasm binary path in the dfx.json and generate the Candid? I don't see why this would require dfx to know anything about the custom build script. In fact I don't even think dfx needs to care about the language, since it's just running the Wasm binary through wasmtime. If dfx sees a property in the dfx.json instructing it to run the Wasm binary through wasmtime to retrieve the Candid, can't it do that without needing to know anything else? This could be on by default for Rust canisters and off by default for custom canisters but with the option to turn it on.

Here's our script on main for Kybra (doesn't have the local wasmtime/wasmer execution, we now do everything in a post_install script): https://github.com/demergent-labs/kybra/blob/main/kybra/__main__.py

Here's where we used to run wasmer: https://github.com/demergent-labs/kybra/blob/3e74103a75faeafe6f5c9e6f433cb34888383332/kybra/candid.py

Here's where we used to run Candid test: https://github.com/demergent-labs/kybra/blob/0.4.0/kybra/__main__.py#L440

I might have been mistaken about my reasons for not using wasmtime, I think we may have been using wasmer from the beginning, I'm pretty sure I tried wasmtime first and then switched over to wasmer for reasons I don't now remember.

P.S. we do something similar in Azle, the situation is much better in Azle because Node.js uses V8 which has Wasm support by default so we can just use that to generate the Candid relatively easily: https://github.com/demergent-labs/azle/blob/main/src/compiler/generate_candid_file.ts

-------------------------

lastmjs | 2023-07-28 21:54:42 UTC | #45

So I want to reply to this comment: https://forum.dfinity.org/t/ic-cdk-wasi-feature/21796/8

Any updated thoughts on allowing custom canisters to turn this functionality on?

-------------------------

chenyan | 2023-07-28 22:00:40 UTC | #46

By definition, dfx won't interfere with custom canisters. For Azle, you will have to adapt the build script https://github.com/dfinity/cdk-rs/blob/main/examples/build.sh to use the new ic-cdk feature. 

If the difficulty is in the extra dependency of wasmtime and ic-wasm, we will provide the binaries in dfx cache.

-------------------------

lastmjs | 2023-07-28 22:02:28 UTC | #47

I didn't realize that there were two different binaries, I think I understand some of the issues now. In that case I would ask if that situation can ever be addressed, so that there is only ever one binary produced that the candid can be extracted from and can be deployed. We are doing that right now, one compilation produces a binary that can be executed in a Wasm VM to obtain the Candid, and that same binary can be deployed to the IC.

-------------------------

lastmjs | 2023-07-28 22:09:22 UTC | #49

This is how we're able to produce just one Wasm binary that the Candid can be extracted from and that can be deployed to the IC:

Essentially we do this in the canister:

```rust
        candid::export_service!();

        // Heavily inspired by https://stackoverflow.com/a/47676844
        #[no_mangle]
        pub fn get_candid_pointer() -> *mut std::os::raw::c_char {
            let c_string = std::ffi::CString::new(__export_service()).unwrap();

            c_string.into_raw()
        }
```

And we do this in Node.js during the build step:

```typescript
import { readFileSync, writeFileSync } from 'fs';

export function generateCandidFile(candidPath: string, wasmFilePath: string) {
    const wasmBuffer = readFileSync(wasmFilePath);

    const wasmModule = new WebAssembly.Module(wasmBuffer);
    const wasmInstance = new WebAssembly.Instance(wasmModule, {
        ic0: {
            accept_message: () => {},
            call_cycles_add: () => {},
            call_cycles_add128: () => {},
            call_data_append: () => {},
            call_new: () => {},
            call_on_cleanup: () => {},
            call_perform: () => {},
            canister_cycle_balance: () => {},
            canister_cycle_balance128: () => {},
            canister_self_copy: () => {},
            canister_self_size: () => {},
            canister_version: () => {},
            certified_data_set: () => {},
            data_certificate_copy: () => {},
            data_certificate_present: () => {},
            data_certificate_size: () => {},
            debug_print: () => {},
            global_timer_set: () => {},
            instruction_counter: () => {},
            is_controller: () => {},
            msg_arg_data_copy: () => {},
            msg_arg_data_size: () => {},
            msg_caller_copy: () => {},
            msg_caller_size: () => {},
            msg_cycles_accept: () => {},
            msg_cycles_accept128: () => {},
            msg_cycles_available: () => {},
            msg_cycles_refunded: () => {},
            msg_cycles_refunded128: () => {},
            msg_method_name_copy: () => {},
            msg_method_name_size: () => {},
            msg_reject_code: () => {},
            msg_reject_msg_copy: () => {},
            msg_reject_msg_size: () => {},
            msg_reject: () => {},
            msg_reply_data_append: () => {},
            msg_reply: () => {},
            performance_counter: () => {},
            stable_grow: () => {},
            stable_read: () => {},
            stable_size: () => {},
            stable_write: () => {},
            stable64_grow: () => {},
            stable64_read: () => {},
            stable64_size: () => {},
            stable64_write: () => {},
            time: () => {},
            trap: () => {}
        }
    });

    const candidPointer = (wasmInstance.exports as any).get_candid_pointer();

    const memory = new Uint8Array((wasmInstance.exports.memory as any).buffer);

    let candidBytes = [];
    let i = candidPointer;
    while (memory[i] !== 0) {
        candidBytes.push(memory[i]);
        i += 1;
    }

    writeFileSync(candidPath, Buffer.from(candidBytes));
}

```

-------------------------

chenyan | 2023-07-28 22:11:04 UTC | #50

> We are doing that right now, one compilation produces a binary that can be executed in a Wasm VM to obtain the Candid

IIUC, you are taking a more complicated detour to achieve that. So using the new ic-cdk feature is an improvement.

> In that case I would ask if that situation can ever be addressed, so that there is only ever one binary produced that the candid can be extracted from and can be deployed.

Probably not. Not without changing rustc or the rust analyzer. However, developer can also choose an opposite direction similar to protobuf: Developers write candid file as the source of truth to define data types and API. We can then provide tools to generate bindings from candid to the host language. If we go with this approach, we don't need to generate did file anymore.

-------------------------

lastmjs | 2023-07-28 22:12:02 UTC | #51

Ideally we could remove this code, remove the similar code in Kybra, not be required to generate Candid at all, and remove the need for the developer to specify a path to a Candid file in dfx.json.

-------------------------

dfx-json | 2023-08-02 15:17:25 UTC | #52

Hi @lastmjs - we have a developer tooling working group session tomorrow (8/3) and this will be one of the topics we will discuss. I encourage you to attend to voice what you'd like to see and help us shape the feature.

-------------------------

lwshang | 2023-08-02 16:29:11 UTC | #53

For the upcoming group session, I summarized my thoughts [here](https://forum.dfinity.org/t/technical-working-group-developer-tooling/11941/49).

-------------------------

lastmjs | 2023-08-05 04:28:23 UTC | #54

Unfortunately I wasn't able to attend the session.

-------------------------

Dustin | 2023-08-19 08:44:22 UTC | #55

Is the feature to automatically generate .did files from rust code available somewhere? If not, is there an expected timeline for the release? I'm fully with @lastmjs on this. This feature is important for a good developer experience. Spent the last few hours looking for the problem until I realised the automatic generation for rust canisters wasn't available.

-------------------------

peterparker | 2023-08-19 13:21:14 UTC | #56

[quote="Dustin, post:55, topic:5924"]
Is the feature to automatically generate .did files from rust code available somewhere?
[/quote]

Yes you can now generate the did from Rust without workaround but, it needs an additional script / call to wastime afterwards. Ultimately I understand the goal is to make all automatic.

I wrote a post about last improvements and current state, hope that helps:

https://daviddalbusco.medium.com/automatic-candid-generation-in-rust-exploring-the-ic-cdk-v0-10-0-update-d1ad76bd4f69

-------------------------

Dustin | 2023-08-19 13:43:14 UTC | #57

This is perfect, thanks!

-------------------------

sadernalwis | 2023-09-14 16:33:25 UTC | #59

Well @peterparker's solution works up until ```stable--structures``` are used.
the workaround for the original workaround involving updating "ic-cdk"
[PR](https://github.com/dfinity/stable-structures/pull/108)
has been rejected.
Is there a way to do it all within ic sdk?

-------------------------

peterparker | 2023-09-14 16:40:09 UTC | #60

I literally complained about this today and literally also shared the wording "it's a pain in the a" with my colleagues.

The PR you mention wasn't a proper solution for a definitive implementation. Team is now trying their best to push the effort. 

There is a draft PR opened in the cdk-rs (https://github.com/dfinity/cdk-rs/pull/424), there will be a new CLI tool and now there are discussing the integration in dfx.

Meanwhile, using above PR (https://github.com/dfinity/stable-structures/pull/108) remains the workaround I know.

i.e. I generally develop and only when I want to generate the did files, I switch the source of the crate in the toml file.

-------------------------

sadernalwis | 2023-09-14 17:21:49 UTC | #61

definitely a pain in the A :sweat_smile: .
seems like I will have to keep both solutions,
ur script and "__get_candid_interface_tmp_hack"
```
"generate_old": "scripts/build_did.sh && dfx generate backend",
"generate": "cargo test generate_candid && dfx generate backend",
```
thank you really for the script and pushing this. :pray:

-------------------------

peterparker | 2023-09-18 19:08:49 UTC | #62

Great news @sadernalwis , the `stable--structures` incompatibility has been resolved by today's release of the new `ic_cdk@0.11.0` and the new CLI tool [candid-extractor](https://crates.io/crates/candid-extractor).

I updated my blog post but, to summarize the difference:

1. bump ic_cdk and related libraries

2. install `candid-extractor`

3. update the `did.sh` script I provided as follow

```
#!/usr/bin/env bash

function generate_did() {
  local canister=$1
  canister_root="src/$canister"

  cargo build --manifest-path="$canister_root/Cargo.toml" \
      --target wasm32-unknown-unknown \
      --release --package "$canister"

  candid-extractor "target/wasm32-unknown-unknown/release/$canister.wasm" > "$canister_root/$canister.did"
}

# The list of canisters of your project
CANISTERS=console,observatory,mission_control,satellite

for canister in $(echo $CANISTERS | sed "s/,/ /g")
do
    generate_did "$canister"
done
```

Big shout-out to @lwshang for this improvement 🙏. Not all heroes wear capes!!!

-------------------------

Dustin | 2023-09-27 11:22:30 UTC | #63

I had the issue that the candid was no longer available on icscan.io and the [Candid UI](https://a4gq6-oaaaa-aaaab-qaa4q-cai.raw.icp0.io/).

I solved it by adding this to my canister code (taken from [here](https://github.com/dfinity/internet-identity/blob/d0babbab9e14b23bd7d626c01db04e0dfd45424e/src/internet_identity/src/main.rs#L608-L614)).
```rs
/// This makes this Candid service self-describing, so that for example Candid UI, but also other
/// tools, can seamlessly integrate with it. The concrete interface (method name etc.) is
/// provisional, but works.
#[query]
fn __get_candid_interface_tmp_hack() -> String {
    include_str!("<my_canister_name>.did").to_string()
}
```

I had the understanding the `export_candid!()` from [the guide](https://forum.dfinity.org/t/automatically-generate-candid-from-rust-sources/5924/56?u=dustin) covered this. Is that not the case?

-------------------------

lwshang | 2023-09-28 13:37:06 UTC | #64

The "export Candid" workflow in Rust CDK has been changed since the guide you were referring.

This [page](https://internetcomputer.org/docs/current/developer-docs/backend/candid/generating-candid/) describes the steps in `ic-cdk` v0.11.

-------------------------

Dustin | 2023-09-28 13:52:27 UTC | #65

Yes, I have `ic_cdk` with v0.11.0 but I still needed to add the `__get_candid_interface_tmp_hack()` for candid UI and icscan to be able to extract the candid. 

I guess this shouldn't be the case and adding at `ic_cdk::export_candid!();` to my code should cover that normally?

-------------------------

sadernalwis | 2023-09-30 12:34:40 UTC | #66

Thanx @peterparker and @lwshang,

I also saw in the discord thread.
Finally some good news,
Cant wait to test it out. 
Gonna take a few more days until I circle back.

I will report back how it goes.

-------------------------

b3hr4d | 2023-10-01 06:28:23 UTC | #67

If you get the candid file correctly by running this.

> Step 3: Extract candid from the Wasm module and save to a file:
```
candid-extractor target/wasm32-unknown-unknown/release/<CANISTER>.wasm > <CANISTER>.did
```

You already have the candid implementation on your wasm, it will generate a candid file from your WASM file!

-------------------------

saikatdas0790 | 2023-11-06 13:42:23 UTC | #68

Why do we need a separate binary to be installed?

Why not put this in dfx itself and let it be done as part of `dfx build`, `dfx generate` or `dfx deploy` for project types of `rust` in the `dfx.json` file?

-------------------------

peterparker | 2023-11-06 15:49:59 UTC | #69

Because you don't necessary need dfx to build canisters I would say.

That said, I understand that the DX will improve over time, and this was a good initial step and it will ultimatelly be integrated in dfx as well. Again if I understand correctly.

-------------------------

saikatdas0790 | 2023-11-06 16:28:37 UTC | #70

I kinda disagree. I would argue that almost all canister developers use dfx to build their canisters.

And it's a good idea to co-locate all functionality related to canister building into dfx instead of maintaining different tooling for related tasks

-------------------------

peterparker | 2023-11-06 16:48:41 UTC | #71

[quote="saikatdas0790, post:70, topic:5924"]
I would argue that almost all canister developers use dfx to build their canisters.
[/quote]

I don't build Juno with dfx, nor do we build Internet Identity with it :wink:.

(Not that I unfluenced the design in any ways, not part of that team)

I also guess it was first useful to build the feature as a standalone before integrating it within the dfx kitchen sink.

Anyways, like I said, the ultimate plan I understand is to improve the DX and also integrate it with DFX commands.

-------------------------

