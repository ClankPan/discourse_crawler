cryptoschindler | 2021-06-13 20:33:49 UTC | #1

```
    func test (dynamicCase: {#a; #b}, pattern: {#a; #b}) : Bool{
        switch(pattern) {
            case(dynamicCase) {
                return true
            };
            case (_) {
                return false
            }
        } 
    };
```

How would I achieve something like this @claudio @nomeata ?
I want the first case to be either `#a` or `#b` depending on what i feed into `test`

-------------------------

paulyoung | 2021-06-13 22:05:59 UTC | #2

Iâ€™m not sure I understand your question, but you can do something like this:

```
type MyVariant = {
  #a;
  #b;
  #c
};

func isA(x: MyVariant) : Bool {
  switch(x) {
    case (#a) true;
    case _ false;
  }
};

func isB(x: MyVariant) : Bool {
  switch(x) {
    case (#b) true;
    case _ false;
  }
};

func isC(x: MyVariant) : Bool {
  switch(x) {
    case (#c) true;
    case _ false;
  }
};

func test<A>(x : A, f : A -> Bool) : Bool {
  f(x);
};

assert(true == test(#a, isA));
assert(false == test(#a, isB));

assert(true == test(#a, func (x : MyVariant) : Bool {
  isA(x) or isB(x);
}));

assert(false == test(#c, func (x : MyVariant) : Bool {
  isA(x) or isB(x);
}));
```

-------------------------

paulyoung | 2021-06-13 22:08:54 UTC | #3

The `test` wrapper is a bit redundant of course but it works if you need a common interface.

-------------------------

claudio | 2021-06-13 22:15:43 UTC | #4


For these simple tests, you can also just use equality.

[quote="paulyoung, post:2, topic:5139"]
```
func isA(x: MyVariant) : Bool {
  x == #a
};
```
[/quote]


The dynamic case you were asking for isn't directly expressible with switch - that's the price you pay for the benefit of compile-time coverage checking of cases - the case patterns need to be static, not dynamic.

-------------------------

cryptoschindler | 2021-06-13 22:31:22 UTC | #5

That's what I ended up doing, but it felt a bit odd that I needed to repeat this for every variant :confused: If I have a lot of different variants in a variant this becomes a lot of code and a lot of work :smiley:

-------------------------

cryptoschindler | 2021-06-13 22:34:05 UTC | #6

This should work! I'll test and get back to you

-------------------------

