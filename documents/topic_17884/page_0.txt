skilesare | 2024-02-12 09:24:16 UTC | #1

# EVM Transactions - Motoko - #32

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification: (01/09/2023) 
* Open for application: (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2023/01/09/32-EVM-Transactions-Motoko.html)

## Bounty Details

* Bounty Amount: $8,000 USD of ICP at award date
* ICDevs.org Bounty Acceleration: For each 1 ICP sent to 4dc0678d04c632921a7e5b913a4e3f185a3b48e2da6cba71f4be1e86272a789b, ICDevs.org will add  .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Team
* Opened: 01/09/2023
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Intermediate - Motoko; Intermediate - EVM;

## Description

As we make progress to further integrating EVM based blockchains with motoko, we need more EVM based tools.  While Bounty #29 seeks a short term solution, this bounty seeks to implement the fundamental libraries needed to build and verify transactions and data on motoko canisters without having make an async call to a utility canister.

To execute this bounty you need to implement the creation, encoding, and decoding of EVM based transactions in Motoko. This work has been replicated in RUST at https://github.com/nikolas-con/ic-evm-sign and you should generally follow the candid structures used in this project and replicate the functionality in motoko. The library should be set up to work with vessel and MOPS.

The library should support multiple network ids and transaction types like Legacy, EIP1559, EIP2930.

You should also implement the various helper functions in the Ethereum js library:  https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/util with proper tests.

Completing this bounty will give the developer the chance to tackle [Bounty 27a - No Key Wallet Motoko](/bounties/2022/09/14/NoKey-Wallet-Motoko.html) which will finalize the functionality and use t-ecdsa to sign and manage these transactions.

This bounty gives the opportunity to:

* learn motoko
* learn about evms and transaction types

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 4dc0678d04c632921a7e5b913a4e3f185a3b48e2da6cba71f4be1e86272a789b.  ICDevs will match the bounty $40:1 ICP for the first 75 ICP out of the DFINITY grant and then 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification: (01/09/2023)

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.

[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

v1ctor | 2023-03-08 01:36:07 UTC | #2

Hi, @skilesare, I would like to work on this bounty. 

Now with the RLP and keccak256 motoko libraries it's possible to tackle this challenge. 

My github: https://github.com/av1ctor

Thanks in advance!

-------------------------

darkdrag00n | 2023-04-11 09:50:46 UTC | #3

Hi @skilesare, is this up for grabs? If yes and @v1ctor is not available to tackle this, then I would like to take this up.

-------------------------

agentDPS | 2023-04-15 15:05:50 UTC | #4

Hey , has this been implemented , because i am working on this ..

-------------------------

skilesare | 2023-04-15 15:15:29 UTC | #5

@v1ctor are you working on this at the moment?

-------------------------

agentDPS | 2023-04-15 16:41:32 UTC | #6

[quote="skilesare, post:1, topic:17884"]
Discussion
[/quote]

here's my github , https://github.com/dipanshuhappy

-------------------------

v1ctor | 2023-04-15 16:48:52 UTC | #7

Hi, @skilesare, yes I'm working on it, but I never got any answer since I posted that message applying for this bounty. 

There's a doubt though: the bounty description tells it should replicate the ic-evm-sign, but signing the tx is not part of the scope, right? That would need libsecp256k1 to be ported to motoko, and I didn't find a library yet that could do that (implementing one in motoko would not be a simple task).

-------------------------

skilesare | 2023-04-15 17:04:49 UTC | #8

I apologize for the delay....you're approved to work on it.

...and yes...I assume that the signature is part of this... Maybe this is far enough along:  https://github.com/mix-labs/libsecp256k1

If it is just impossible we can talk about it.  Give that library and look and see how short it falls.

-------------------------

skilesare | 2023-04-15 17:05:33 UTC | #9

Looks like V1ctor is already working on it.  Is there something else that would be cool for you to work on?  We just release a bunch of new bounties here:  https://forum.dfinity.org/c/developers/bounties/37

-------------------------

agentDPS | 2023-04-15 17:07:42 UTC | #10

Well @v1ctor  , waiting on it  :+1: , i guess i will use the rust sdk for now , but yeah i do plan on working on bounties , i will look into them.

-------------------------

agentDPS | 2023-04-15 17:08:28 UTC | #11

Any  idea on when the ICP <> Eth integration  will be done?

-------------------------

skilesare | 2023-04-15 17:19:15 UTC | #12

You should be able.to.use the output of https://forum.dfinity.org/t/completed-icdevs-org-bounty-28-evm-utility-canister-6-000/1788. Until viscor finishes if you need motoko. It will be async, but should get your eth transactions signed.

As far as eth integration goes, this is a bit of what we are doing here! I think the community is working on se.more robust canistesnfor querying state and roots from services, but there is no reason you can't do those yourself if you are willing to rely on just, say, infura and trust it.

-------------------------

v1ctor | 2023-04-15 17:19:46 UTC | #13

No prob, thanks!

Nice, I was not aware of that secp256k1 port to Motoko. It shows it's 70% done, that's a great start. If there's something missing I will try to port myself from C or Rust and open a PR at the repository.

-------------------------

agentDPS | 2023-04-15 17:21:14 UTC | #14

Well i can use that for now .. because i just need to get a proof of concept ready , not the final stuff...

-------------------------

darkdrag00n | 2023-04-23 22:45:12 UTC | #15

@skilesare 

[quote="skilesare, post:8, topic:17884"]
…and yes…I assume that the signature is part of this…
[/quote]

Isn't signing the evm-transaction part of https://forum.dfinity.org/t/assigned-icdevs-org-bounty-27a-nokeywallet-motoko-up-to-10k/16054?

I've already implemented it in my Motoko library - https://github.com/darkdrag00nv2/ic_no_key_wallet.mo/blob/474808c71ee7d275771a99c2df0d022d16430a8b/src/lib/NoKeyWalletLib.mo#L97-L102. It is very close to completion and only e2e testing is remaining.

That being said, it makes inter-canister calls to the [evm-utility library](https://github.com/icopen/evm_utils_ic) for encoding/decoding/hashing as per [your suggestion here](https://forum.dfinity.org/t/assigned-icdevs-org-bounty-27a-nokeywallet-motoko-up-to-10k/16054/4). If we're trying to avoid inter-canister calls, then it might make sense to implement it here in pure Motoko.
Otherwise @v1ctor can just use my library to sign the evm-transactions which will make async inter-canister call. May be I am missing something here :thinking:

-------------------------

darkdrag00n | 2023-04-23 22:44:53 UTC | #16

Ok, after reading & thinking a bit more. I've realized that I might have overdone it in the no-key-wallet lib from #27a.

I think the no-key-wallet lib is just supposed to sign the raw transaction and return the signature in the method response. This part does not require any inter-canister calls. I actually went ahead and also used the evm-utility library to encode the transaction along with the signature data. Hence, the inter-canister call. I can remove that part and just return the signature eliminating the async call. 

Encoding/Decoding the transaction along with the signature information can be implemented in pure Motoko by @v1ctor as part of this bounty.

Sorry for the confusion :slight_smile: Do let me know in case I am wrong.

-------------------------

v1ctor | 2023-04-24 18:42:55 UTC | #17

Yeah, the idea is not depend on inter-canister calls and do everything in pure Motoko.

The problem is: the current state of the only (known?) port of the libsec256k1 to Motoko (https://github.com/mix-labs/libsecp256k1) is completely broken and has no tests. I forked it and am trying to get it done (at https://github.com/av1ctor/mo-libsecp256k1) but the challenge is way harder than just getting evm-utility library (that could use stable and tested Rust libraries) ported to Motoko - what was the objective of this bounty.

-------------------------

domwoe | 2023-04-24 20:21:20 UTC | #18

[quote="v1ctor, post:17, topic:17884"]
The problem is: the current state of the only (known?) port of the libsec256k1 to Motoko ([GitHub - mix-labs/libsecp256k1: Pure Motoko Implementation of secp256k1.](https://github.com/mix-labs/libsecp256k1)) is completely broken and has no tests.
[/quote]

Have you checked https://github.com/tgalal/motoko-bitcoin/tree/main/src/ecdsa ?

-------------------------

v1ctor | 2023-04-26 00:47:01 UTC | #19

It doesn't use the "v" component when verifying the signature and I'm not a cryptographer, so I have no ideia how to implement the missing methods :slight_smile: 

Thanks anyway! I will still trying to debug the libsecp256k1 Motoko port.

-------------------------

darkdrag00n | 2023-04-26 05:53:33 UTC | #20

FWIW, I ended up implementing (sort of) the derivation of `v` from the signature (`r` and `s`) in my NoKeyWallet library (bounty #27a) - [code](https://github.com/darkdrag00nv2/ic_no_key_wallet.mo/blob/474808c71ee7d275771a99c2df0d022d16430a8b/src/lib/NoKeyWalletLib.mo#L188-L209). I did use the `evm_utility` canister for calculation of recovery_key though but you should be able to see its code on how it implements `recover_public_key` and try to replicate that in Motoko. My library is untested as well, so might have bugs but the high level logic should be correct.

Of course, it might be very hard to do, so definitely up to you :slight_smile:

-------------------------

skilesare | 2023-04-26 09:42:10 UTC | #21

Not sure if this is helpful(or which library you were referring to), but:(looks like this is just verification...I think you need signing)

In the given Motoko code, the value "v" is not explicitly calculated, but rather it is implicitly derived as a part of the signature verification process using the values "r" and "s" from the signature, and the public key and the message being verified.

Specifically, the code first checks that "r" and "s" are valid and within the curve's range, and then converts them to Fp elements "r" and "s" using the curve's modulus "r". It then calculates the hash "h" of the message using SHA256 and converts it to an Fp element.

Next, the code calculates the inverse of "s" as "sInverse", and uses it to compute two Fp elements "a" and "b" as:

a = h * sInverse
b = r * sInverse

These values are then used to calculate a point on the curve using the Jacobi function, as:

Jacobi.add(
Jacobi.mulBase(a.value, curve),
Jacobi.mul(Jacobi.fromAffine(#point (x, y, curve)), b.value)
)

This point is then checked to see if it matches the value of "r", which is the x-coordinate of the signature point. If it does match, then the signature is considered valid and the function returns "true". Otherwise, it returns "false".

So, while the code doesn't explicitly calculate the value of "v", it does use "r" and "s" to calculate a point on the curve, and then checks whether the x-coordinate of that point matches "r". This effectively determines the value of "v" and ensures that the signature is valid.

-------------------------

v1ctor | 2023-04-26 11:40:49 UTC | #22

Sorry. When I said verify the signature, it was actually recover the public key from the signature.

To be able sign a evm transaction (https://github.com/nikolas-con/ic-evm-sign/blob/master/lib/src/transaction.rs#L107), the ecdsa module from bitcoin-motoko would need a recovery function like libsec256k1's recover_raw(): https://github.com/paritytech/libsecp256k1/blob/master/core/src/ecdsa.rs#L58

That's the one I'm trying to get to work, but there's something wrong with the ecmult() function on the Motoko port (https://github.com/av1ctor/mo-libsecp256k1/blob/main/src/core/ecmult.mo).

-------------------------

v1ctor | 2023-04-26 21:05:49 UTC | #23

The libsec256k1's ecdsa.recover() was fixed :smile: 

Now back to the EVM transactions.

-------------------------

v1ctor | 2023-05-02 20:22:57 UTC | #24

Alright, I think it's done:

1. https://github.com/av1ctor/evm-txs.mo
2. https://github.com/av1ctor/libsecp256k1.mo

There's also a demo backend in Motoko: https://github.com/av1ctor/evm-txs.mo/tree/main/e2e/tx_tools

All tests ported from https://github.com/nikolas-con/ic-evm-sign are passing.

@skilesare: If there's something missing, please let me know, thanks.

-------------------------

Mercury | 2023-07-18 12:44:48 UTC | #25

Hey @v1ctor, congrats on completing this. Has it been vetted by @skilesare or his colleagues? I'm eager to take it for a spin :racing_car:, and eventually use it in production :rocket:

-------------------------

v1ctor | 2023-07-19 21:37:27 UTC | #26

With version v.0.1.3 fixes it should be OK to use in production.

-------------------------

Mercury | 2023-07-20 06:22:50 UTC | #27

Awesome, thx @v1ctor ! This unlocks plenty of use-cases for those who prefer Motoko over Rust on IC.

-------------------------

cryptoschindler | 2023-08-28 05:51:27 UTC | #28

do you mind adding your libsecp256k1 library to https://github.com/motoko-unofficial/awesome-motoko?

-------------------------

v1ctor | 2023-08-28 13:00:41 UTC | #29

Right, pull request opened :)

-------------------------

