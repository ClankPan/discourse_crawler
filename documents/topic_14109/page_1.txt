mariop | 2022-07-12 07:51:24 UTC | #102

[quote="link2020, post:99, topic:14109"]
The tokens issued by ICRC -1 use Principal ID. But ICP uses Account ID.
Will users feel confused?
[/quote]

ICRC-1 uses Principal plus subaccount. It's similar and compatible to ICP account identifier except for the block format.
What that means is that any Principal on the IC has multiple accounts on an ICRC-1 Ledger. This is done because Canisters have single Principal but should be able to have multiple accounts.

-------------------------

mariop | 2022-07-12 07:55:41 UTC | #103

[quote="zran, post:100, topic:14109"]
if there is a token in the player’s Principal, the game can directly call transfer to steal the player’s token without the player’s confirmation. Whether ICRC-1 solves this problem。
[/quote]

In none of the standards on the IC this can happen. The only authorised Principal that can call transfer from an account is the owner of the account or an approved Principal. In both cases the owner is in control. ICRC-1 goes one step further by trying to make the approval more secure (this is still under discussion though).

-------------------------

mariop | 2022-07-12 08:01:41 UTC | #104

[quote="jzxchiang, post:101, topic:14109, full:true"]
@mariop Apologies if this has been asked before, but what is the difference between this ICRC [interface ](https://github.com/dfinity/ic/blob/master/rs/rosetta-api/icrc1/ledger/icrc1.did) and this [one ](https://github.com/dfinity/ICRC-1/blob/main/ICRC-1.did)? Which should I believe? Why are there two?
[/quote]

The one in the [ICRC-1 repository](https://github.com/dfinity/ICRC-1/blob/main/ICRC-1.did). That's the one you should believe. It's still WIP.

DFINITY implementation is a prototype developed while we are working on the standard. When the standard will be completed, our implementation will align with the standard.

Sorry for the confusion @jzxchiang .

-------------------------

infu | 2022-07-12 09:01:16 UTC | #105

[quote="mariop, post:102, topic:14109"]
ICRC-1 uses Principal plus subaccount. It’s similar and compatible to ICP account identifier except for the block format.
[/quote]

Can we see what the new Account Identifier ( a merged Principal + subaccount) looks like?
If one user wants to send tokens to another, what do they copy/paste?

Or no AccountIdentifiers at all and users work with Principals only and subaccounts are reserved for canisters usage under the hood. But then this would mean a canister can't be a multi-user wallet, because it can produce only one UI level address.
Or when users send funds to another user they fill in two boxes, Principal and subaccount?

-------------------------

zran | 2022-07-12 09:06:33 UTC | #106

I means if user use a principal as his dapp account, and use this principal to hold tokens, like ICP. Then the dapp can invoke the transfer method with javascript code to send his token to others.

-------------------------

mariop | 2022-07-12 10:48:02 UTC | #107

[quote="infu, post:105, topic:14109"]
Can we see what the new Account Identifier ( a merged Principal + subaccount) looks like?
[/quote]

Yes, it looks like this:
```
type Account = record {
    of : principal;
    subaccount : opt Subaccount;
};
```

[quote="infu, post:105, topic:14109"]
If one user wants to send tokens to another, what do they copy/paste?
[/quote]

If this is just a direct transfer via dfx from the main account of user1 to the main account of user2 and user2 principal is `pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae` then they would write

```
dfx canister call icrc-1-ledger icrc1_transfer '(record {
  to_principal=principal "pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae",
  amount=10
},)'
```

For more advanced example where user1 transfers tokens to an account of user2 that is not the default, e.g. account 1, the subaccount needs to be specified:

```
dfx canister call icrc-1-ledger icrc1_transfer '(record {
  to_principal=principal "pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae",
  to_subaccount=opt vec {0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;};
  amount=10
},)'
```

Finally, an even more advanced example is moving tokens between non-default accounts. Let's say user2 now wants to move 4 tokens from its account 1 to its account 2, then it needs to specify both the `from_subaccount` and the `to_subaccount`:

```
dfx canister call icrc-1-ledger icrc1_transfer '(record {
  from_subaccount=opt vec {0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;1;};
  to_principal=principal "pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae";
  to_subaccount=opt vec {0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;2;};
  amount=4;
})'
```

All the transfers above look simpler when done programmatically via rust or motoko.

-------------------------

infu | 2022-07-12 12:55:34 UTC | #108

I am interested in how this will change end-user interfaces. I guess our ecosystem was the only one using the addresses NNS used, along with EXT NFT tokens used by Entrepot.

Now there are few cons if the UI level address is a Principal:

- end-users can't manually send tokens to subaccounts, they can only target the main account, unless we give them a second input field to put things in.
- a canister can't be a multi-user wallet/proxy anymore, it only has one UI level address - its Principal.
- Internet Identity gives us only one pub/private key, which means one UI level account
- You cant have a canister offering multi-sig to thousands of users, each wallet has to be its own canister

Can't we agree on a UI-level address all wallets will understand and split properly, so a user can target them easily? 

main account: pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae 
second account: pcotu-nluuc-vzney-2ugxz-y2uis-duoyw-unfos-x6uyo-lnvgj-ohijr-sae-y2uis-duoyw-unfos-x6uyo-lnvgj

-------------------------

infu | 2022-07-13 18:41:11 UTC | #109

Ok, let's see how we can encode the account record {Principal, Subaccount} for better UX. The requirement is that every client(browser) can decode the address easily into Principal 29bytes and Subaccount 32bytes


**Which one do you like most?**

[poll type=regular results=always chartType=bar]
* **using Principal encoding** 
7oxcw-qurpx-fcebq-q5ocd-gvdyn-2pf2n-vec43-o5f4a-zx43m-d6uln-tqe-miyz7-tabae-aqcai-baeaq-caiba-eaqca-ibaea-qcaib-aeaqc-aibae-aqcai-bae
* **using Principal encoding adaptive*** 
miyz7-tabae-aqcai-baeaq-caiba-eaqca-ibaea-qcaib-aeaqc-aibae-aqcai-baeae-aqcai
* **using base58 (Bitcoin)** 
2xoMuudmMrMNJHVXhij52NfjKUDNk3rZgT5tqjQ1RPmtJfa8P4yjZDufTP4kejWnmNR5oomvjBcSKe9xXYnL
* **adaptive * base58 (Bitcoin)**
AnwNBG7a4rVJizGXQWTSQc69pFCUTCQJTC951zbLUCaY
[/poll]

*The adaptive one doesn't show zeroes. The size will increase and match non-adaptive one if fully used, but such addresses will probably will be used only by canisters internally, so the perceived size will be small.

-------------------------

Zane | 2022-07-13 11:48:09 UTC | #110

Does moving funds between subaccounts require a fee?

-------------------------

infu | 2022-07-13 12:35:56 UTC | #111

I suppose yes if it uses the same transfer function. It depends on the implementation I guess, not the standard.

-------------------------

Zane | 2022-07-13 13:02:36 UTC | #112

I see, how about the ICP ledger? Does it have a fee?

-------------------------

mariop | 2022-07-14 12:29:59 UTC | #113

Yes. Everything that creates a block has a fee.

-------------------------

Zane | 2022-07-14 13:04:17 UTC | #114

I understand, that might be a problem for some use cases and perhaps is one of the reasons some don't like subaccounts. Say I have a dApp where lots of users deposit funds and only one can withdraw them, with subaccounts you'd have to pay for N transfers based on the number of users.

-------------------------

mariop | 2022-07-14 13:12:32 UTC | #115

N needs to be very big in order to really affect the service. The fee can also be split between user and service. The fee was designed to have basically no impact on normal transfers.

-------------------------

Zane | 2022-07-14 14:38:31 UTC | #116

[quote="mariop, post:115, topic:14109"]
N needs to be very big in order to really affect the service
[/quote]
True but that also depends on how high the fees are in case of custom tokens, considering many have expressed their concerns about having to pay fees, even a small amount might be an issue for some, especially if the number isn't predictable. 

There is also the scenario where the dApp frequently moves funds between subaccount, the fee even if small will eventually add up.

-------------------------

Pwoseidon | 2022-07-15 12:30:44 UTC | #117

Mario, sir,

I understand that projects need NNS approval before they can access SNS services.

However, if a project wants to issue a ICRC-1 token, will they be able to implement this without requiring an SNS (and therefore NNS approval)?

i.e. will the community have access to issue tokens under the ICRC-1 standard in a permissionless/non-gated way?

Thank you

-------------------------

bobbylingus | 2022-07-15 12:38:26 UTC | #118

https://forum.dfinity.org/t/thoughts-on-the-token-standard/4694/192

For visibility

-------------------------

mariop | 2022-07-15 13:17:37 UTC | #119

[quote="Zane, post:116, topic:14109"]
True but that also depends on how high the fees are in case of custom tokens, considering many have expressed their concerns about having to pay fees, even a small amount might be an issue for some, especially if the number isn’t predictable.

There is also the scenario where the dApp frequently moves funds between subaccount, the fee even if small will eventually add up.
[/quote]

@Zane the double fee for the payment flow is true for all the flows (except the one that checks blocks). With approve/transferFrom you still have to pay two fees: one to approve and one to transferFrom. The amount of total fee is the same. I don't see the fact that you have to pay fees a good reason to not use subaccounts.

-------------------------

mariop | 2022-07-15 12:52:38 UTC | #120

[quote="Pwoseidon, post:117, topic:14109"]
will the community have access to issue tokens under the ICRC-1 standard in a permissionless/non-gated way?
[/quote]

The icrc1 ledger, like all the code from DFINITY, is open source and available to be used by anybody. You deploy your ledger and issue your tokens. No NNS nor SNS involved. It's your decision.

-------------------------

hpeebles | 2022-07-15 13:19:38 UTC | #121

Allowing subaccounts doesn't mean you have to use them.

You could simply use the default subaccount for each principal and then you have the exact same behaviour as if subaccounts didn't exist.

-------------------------

Zane | 2022-07-15 15:28:01 UTC | #122

I might be missing something so correct me if I'm wrong.

If a dex keeps track of user balances using an internal data structure, there should be no need to contact the ledger to modify the internal state, all funds are kept in a single account owned by the canister, so a transfer would only require modifying the dex's data structure, funds on the ledger aren't moved. The same isn't true if subaccounts are used for user balances. 

The only downside is if a bug occurs a user could withdraw funds from other users. Or is there more to it? 
The docs state canister with subaccounts can be used to act as joint accounts, but that could be done even without them, or does the subaccount act like a multisig wallet and doesn't allow the canister to move funds out of a subaccount derived from a user's principal without his authorization?

-------------------------

skilesare | 2022-07-15 16:13:12 UTC | #123

[quote="Zane, post:122, topic:14109"]
The only downside is if a bug occurs a user could withdraw funds from other users. Or is there more to it?
[/quote]

There is a lot to discuss here in a small statement!  As a canister owner, I'm struggling through this.  I want to use sub-accounts so that I reduce my attack surface, but it increases fees and makes transfers an async process.  I'd love to talk about best practices here!

I like having a full transaction log on the ledger and generally don't like wrapping because it reduces the power of a ledger to have smart contract features. Wrapping is also hard to keep from happening though.

-------------------------

Pwoseidon | 2022-07-16 11:06:24 UTC | #124

Wow awesome! Thank you!

We’ll be patiently waiting :)

-------------------------

Harsh | 2022-07-16 11:23:37 UTC | #125

Hi Mario
Would it be possible to have an unlock(time: T) function as well, in case someone wants to implement token locking or vesting? Would save a lot of effort for people building their own tokens on IC.

-------------------------

mariop | 2022-07-16 13:27:41 UTC | #126

[quote="Zane, post:122, topic:14109"]
If a dex keeps track of user balances using an internal data structure, there should be no need to contact the ledger to modify the internal state, all funds are kept in a single account owned by the canister, so a transfer would only require modifying the dex’s data structure, funds on the ledger aren’t moved. The same isn’t true if subaccounts are used for user balances.
[/quote]

I'm not sure I'm following. The Ledger is always contacted twice, once by the user and once by the DEX. With subaccounts, the user moves funds to a subaccount of the DEX and then the DEX moves the funds from that subaccount to their main account. With approve, the user approves the funds to be taken and then the DEX moves the funds from the user account to their main account.

I cannot stress enough @Zane how subaccount and approve are very similar approaches that in most cases work the same. Same fee costs, same amount of messages.

[quote="Zane, post:122, topic:14109"]
The docs state canister with subaccounts can be used to act as joint accounts, but that could be done even without them, or does the subaccount act like a multisig wallet and doesn’t allow the canister to move funds out of a subaccount derived from a user’s principal without his authorization?
[/quote]

Joint accounts can be possible only via approve for an infinite amount of tokens. It's not possible in any other way. With subaccounts there is always only one owner of the tokens. In my opinion approving for an infinite amount of tokens is extremely dangerous as many bad experiences on Ethereum have proven.

-------------------------

mariop | 2022-07-16 13:11:53 UTC | #127

[quote="Harsh, post:125, topic:14109"]
Would it be possible to have an unlock(time: T) function as well, in case someone wants to implement token locking or vesting? Would save a lot of effort for people building their own tokens on IC.
[/quote]

It would be possible but I would be against it. We want the ICRC-1 standard to be as slim as possible to reduce overhead for devs and users. It's fairly easy to build a locking canister which holds tokens of the user for a certain amount of time. The NNS is a good example of such canister.

-------------------------

Harsh | 2022-07-16 19:52:31 UTC | #128

Mario: if you mean a canister that transfers the tokens as per the vesting schedule every few months, then yes that is certainly possible. But is there really a way to give someone the tokens but keep them locked, without creating such a locking function at the smart contract level itself?

-------------------------

mariop | 2022-07-16 20:22:01 UTC | #129

[quote="Harsh, post:128, topic:14109"]
But is there really a way to give someone the tokens but keep them locked, without creating such a locking function at the smart contract level itself?
[/quote]

The locking function increases the complexity of the ledger which we don't want. A ledger should as simple as possible.

Whenever possible I think we should prefer having multiple canisters, each one with a clear role, than having one canister doing too much.

-------------------------

iBardak | 2022-09-22 11:20:02 UTC | #130

As you know Eimolad is changing our token standard to ICRC-1 
Github link for our ICRC-1 files 
https://github.com/eimolad/eimolad_icrc-1 
We welcome any criticism. Please share your ideas with us. 
More about the architecture of the token: 
https://dscvr.one/post/3874354/new-tokens-feature-tocenomics

-------------------------

