0xlup3x | 2022-05-29 12:59:19 UTC | #1

As of my understanding from here https://forum.dfinity.org/t/how-would-internet-identity-handle-a-denial-of-service-attack/12791/7 I cannot have more than 500 queries / second and 50 updates / second subnet/boundary node and here I have 2 questions:

1)Are boundary nodes 1 per subnet? If not, how do they scale? 
2)What are the rate limits for between canisters calls?

Moving on from these questions, the system that I'm building requires having an actor being able to receive a lot more than 500 queries and 50 updates, somewhere between [10^2, 10^3] of those numbers and I will be having this high traffic between canisters as well, is there any workaround for the b nodes / canister rates? 

Thank you!

-------------------------

domwoe | 2022-05-30 15:39:10 UTC | #2

Hey @0xlup3x ,

[quote="0xlup3x, post:1, topic:13344"]
1)Are boundary nodes 1 per subnet? If not, how do they scale?
[/quote]
Boundary nodes serve the entire Internet Computer. According to https://dashboard.internetcomputer.org/, there are currently 12, but there is ongoing work on [decentralizing boundary nodes](https://forum.dfinity.org/t/long-term-r-d-boundary-nodes-proposal/9401/16).

[quote="0xlup3x, post:1, topic:13344"]
2)What are the rate limits for between canisters calls?
[/quote]
I'm not sure if there's a clear answer. Inter-canister calls aren't limited by any boundary node limits obviously, but are limited by the actual execution of those calls. So one approach too scaling is to shard your application across subnets.

-------------------------

icme | 2022-05-30 15:46:18 UTC | #3

Another approach would be to split your application into multiple canisters. This ha the added benefit of splitting up the concerns of you application, while effectively doubling the throughput and data storage.

[quote="domwoe, post:2, topic:13344"]
Inter-canister calls aren‚Äôt limited by any boundary node limits obviously, but are limited by the actual execution of those calls. So one approach too scaling is to shard your application across subnets.
[/quote]

I thought that each canister was spread across a single subnet?

-------------------------

domwoe | 2022-05-30 15:58:53 UTC | #4

[quote="icme, post:3, topic:13344"]
I thought that each canister was spread across a single subnet?
[/quote]

I'm not sure I'm following. Yes, each canister runs on a specific subnet and in order to shard across subnets your application needs a multi-canister architecture.

-------------------------

icme | 2022-05-30 16:08:28 UTC | #5

@domwoe 

Got it, but don‚Äôt application developers currently have no control over which subnet their application gets deployed to? 

Also, there a certain benefits to deploying one‚Äôs multi-canister application to the same subnet? 
Why does it matter if the canister is shared across the same subnet vs. across different subnets?

-------------------------

0xlup3x | 2022-05-30 16:11:36 UTC | #6

Thank you @domwoe, deploying on different subnets is actually a wonderful idea.

@icme https://forum.dfinity.org/t/tips-for-deploying-to-a-specific-subnet/12335 you can basically do a trial and error for deploying on different subnets.

-------------------------

Zane | 2022-05-30 16:24:16 UTC | #7

https://forum.dfinity.org/t/can-i-run-multiple-inter-canister-update-calls-in-parallel/13115/6

-------------------------

free | 2022-05-30 16:45:01 UTC | #8

To add to the above, inter-canister calls are only limited by execution throughput when both canisters are on the same subnet. So e.g. given very little computation per message (and very little subnet load), you could conceivably execute thousands of them per second per canister.

Actual XNet (cross-subnet) canister-to-canister messages are additionally limited by block size (4 MB) and canister queue size (any 2 canisters can have up to 500 in-flight messages between the two of them). But considering that message size is on the order of 70 bytes plus payload, you could again squeeze quite a lot of them in a block.

(We had some idle chats about not putting message payloads into blocks, only headers and payload hashes; and relying on the gossip protocol plus some additional logic to ensure the payloads are all available to a majority of replicas. But no one has yet spent time thinking it through.)

If you want to go beyond the numbers above in the near future (or be able to handle larger messages / more computation / moderately loaded subnets) you need to consider sharding your application across multiple canisters and/or subnets.

-------------------------

0xlup3x | 2022-05-30 17:04:18 UTC | #9

Very insightful information!! In a scenario where my app architecture is sharded over multiple subnets I suppose I would have to make my own load balancer deployed off chain so a client is redirected to an appropiate subnet as canisters calls are limited to their own subnet.

Correct me if I am wrong.

Thank you!

-------------------------

free | 2022-05-30 17:09:52 UTC | #10

Not sure what you mean by "canisters calls are limited to their own subnet". There are two kinds of messages: ingress (user to canister) and canister-to-canister. But in both cases you are calling a specific canister, so the message will be routed to the subnet hosting that canister, yes.

As for load balancing, you could either randomly pick one canister (if they are e.g. identical "frontend canisters") or (in case your data is sharded across multiple canisters) query some index canister for which canister the ingress message needs to be routed to and send it there.

-------------------------

0xlup3x | 2022-05-30 17:40:42 UTC | #11

Was indeed referring to canister-canister calls.

I would have to shard data on user demand on different subnets but I need to have an external orchestrator that constantly pings subnet canisters for load checking so I can shard it on free nets. Doing a round robin or random sharding won‚Äôt work.

maybe it does not make sense without knowing the scope of my system exactly but I don‚Äôt wanna spoil it here, haha üòÖ

-------------------------

GLdev | 2022-05-30 19:26:08 UTC | #12

You shouldn't have to host anything off-chain. Your "worker" canisters can send usage stats to an "index" canister and your client code can constantly check the index and decide where to take a new user based on that.

-------------------------

icme | 2022-05-30 22:29:20 UTC | #13

[quote="free, post:10, topic:13344"]
As for load balancing, you could either randomly pick one canister (if they are e.g. identical ‚Äúfrontend canisters‚Äù) or (in case your data is sharded across multiple canisters) query some index canister for which canister the ingress message needs to be routed to and send it there.
[/quote]

I would opt for the second option here. However, 500 query requests/sec for an index canister (i.e. your whole application hits this endpoint a lot) is not nearly enough throughput. Is there an option for a case such as an indexing canister that is read-heavy to be able to specify a higher replication factor (or specific read replicas) so even if update calls are slower on the index canister (b/c more canisters need to reach consensus), there's a much higher read throughput?

-------------------------

free | 2022-05-31 06:32:01 UTC | #14

[quote="0xlup3x, post:11, topic:13344"]
Was indeed referring to canister-canister calls.
[/quote]

Canister-to-canister calls are not limited to the local subnet. Any canister can transparently call any other canister. The only difference between subnet-local and XNet calls is the additional latency and throughput.

-------------------------

free | 2022-05-31 06:31:27 UTC | #15

[quote="icme, post:13, topic:13344"]
However, 500 query requests/sec for an index canister (i.e. your whole application hits this endpoint a lot) is not nearly enough throughput.
[/quote]

You can run way more (as in orders of magnitude more) than 500 queries per second against a single canister, especially if we're taking the "which canister hosts data item X" sort of calls.

Queries don't need to go through consensus, so they're handled very much the same as your average request on a Web 2.0 service. I.e. you're only limited by available CPU, memory and bandwidth.

-------------------------

domwoe | 2022-05-31 07:26:01 UTC | #16

[quote="free, post:15, topic:13344"]
You can run way more (as in orders of magnitude more) than 500 queries per second against a single canister, especially if we‚Äôre taking the ‚Äúwhich canister hosts data item X‚Äù sort of calls.
[/quote]

This came up because this is the rate limit an individual boundary node applies to a given subnet.

-------------------------

avi | 2022-05-31 08:11:56 UTC | #17

In my opinion, this problem should not be considered by the business side. It should be the performance expansion that the bottom layer of icp should support. Officials and others say that the business side needs to expand the container to handle the business. I want to know this logic Is it correct? This kind of problem does not need to be considered by the business side under other blockchains.

-------------------------

avi | 2022-05-31 08:13:37 UTC | #18

If the business side needs to maintain the container and the performance, then is the concept of icp upside down? Shouldn't it be to let the business side get rid of the troubles of operation and maintenance?

-------------------------

haida | 2023-02-09 02:12:26 UTC | #19

[quote="icme, post:13, topic:13344"]
Á¥¢ÂºïÂÆπÂô®ÊØèÁßí 500 ‰∏™Êü•ËØ¢ËØ∑Ê±ÇÔºàÂç≥ÊÇ®ÁöÑÊï¥‰∏™Â∫î
[/quote]

It is difficult to solve this problem by designing business logic through multiple code containers, because most data must be associated and updated in a business system. Assuming there is an account container and an order container, calling the order container to generate a transaction not only needs to write order data in the order container, but also needs to call the account container to update the balance, so the number of calls to the account container is difficult to reduce.
This reality, as mentioned above, is best handled at the bottom of the ICP. I wonder if the core team has a solution or an available architecture?
Thanks!

-------------------------

