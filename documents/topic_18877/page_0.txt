CapuzR | 2023-03-11 12:24:11 UTC | #1

## **Context**

The proposed ICRC-14 Game General Stats standard is important because it establishes a common format for games to expose their main game stats and player stats. This format can be used by various ICP games, tools, and gamers to query gaming data in a standardized way, thereby improving interoperability between games and enabling collaboration between multiple projects.

## **Data details**

* icrc: 14
* title: ICRC-14 Game General Stats
* author: Ricardo Capuz <ricardo@byvibrant.xyz> & Esteban Suárez <esteban@byvibrant.xyz>,
* status: Deliberating
* category: ICRC
* requires: None
* created: 2023-03-09
* updated: 2023-03-09

## **Summary**

Minimal set of types and methods for games to expose their main game stats and players stats to boost collaboration and side tooling.

## **Introduction**

This proposal describes the minimal set of types and methods that will help games to have standard stats for their main stats and player stats. We hope that this will boost ICP games interoperability and thrive the collaborations between multiple projects.

## **Goals**

* Allow games, tools and gamers to query main gaming stats for any game.
* Allow gamers to query their gaming data.
* Allow authorized third-parties to query their gaming data (Should be on another standard).
* Provide an authorization mechanism for gamers to approve who manages their data (Should be on another standard).

## **References**

 * [ICRC-11](https://github.com/dfinity/ICRC/issues/11)

## **icrc14_get_game_stats**

```
type StatsRequest = variant {
    StartDate : Int;
    EndDate : Int;
};

type Stats = record {
    active_players : Nat;
    unique_players : Nat;
    peak_concurrent_players : Nat;
    hours_played : Nat;
    cycles_burned : Nat;
    session_time_average : Nat;
    extras : vec {Property};
};

type RangeRequested = variant {
    StartDate : Int;
    EndDate : Int;
};

type Property = record {name : text; value : Value};

type Value = variant {
    Array : vec {Value};
    Principal : principal;
    Class : vec {Property};
    Option : opt Value;
    Bytes : vec {Nat8};

    Nat : nat;
    Nat8 : nat8;
    Nat16 : nat16;
    Nat32 : nat32;
    Nat64 : nat64;
   
    Int : int;
    Int8 : int8;
    Int16 : int16;
    Int32 : int32;
    Int64 : int64;


    Blob : blob;
    Bool : bool;
    Text : text;
    Float : float64;
};


service : {
icrc14_get_game_stats: (StatsRequest, ?RangeRequested ) -> (Stats);
}
```

## **icrc14_get_gamer_stats**

```
type Identity = variant {
    Principal : principal;
};

type GamerStatsResults = variant {
    Ok : GamerStats;
    Err : opt GamerStatsError;
};

type GamerStats = record {
    hours_played : Nat;
    session_time_average : Nat;
    extras : vec {Property};
};

type GamerStatsError = variant {
    NotAuthorized: record { reason: text };
};

service : {
    icrc14_get_gamer_stats: (Identity, ?RangeRequested ) -> (GamerStatsResults);
}
```

## **Complementary standards**

There should probably be a standard to manage gamer data authorization and multiple standards to manage genre specific stats.


Hope to receive a lot of ideas and contributions to go forward with this standard.

-------------------------

Hazel | 2023-03-09 22:42:50 UTC | #2

Great ideas here @CapuzR. 

Some questions / feedback



---
```candid
type Identity = variant {
    Principal : principal;
};

```
Is the intention here to allow for additional identity types to be added in the future? If so you might have to rethink this part a bit; check the feedback Andreas left [here](https://forum.dfinity.org/t/canister-events/18697/2?u=hazel). 

Applying his his advice above to the Results type..

```candid
type GamerStatsResults = variant {
    Ok : GamerStats;
    Err : opt GamerStatsError;  
};
```

---
Next, regarding:

```candid
type GamerStats = record {
    hours_played : Nat;
    session_time_average : Nat;
    extras : Value;
};
```
and 
```candid
type Stats = record {
    active_players : Nat;
    unique_players : Nat;
    peak_concurrent_players : Nat;
    hours_played : Nat;
    cycles_burned : Nat;
    session_time_average : Nat;
    extras : Value;
};
```

What are your thoughts about potentially typing `extras` as a `vec Property`? Essentially, making it easily interpreted as a map by consumers. 

I think this would also make it easier to quickly find some agreement on, and implement, genre specific stats as you allude to. e.g. fps games implementing ICRC-14 MUST include `accuracy : Float` in extras.

-------------------------

iBardak | 2023-03-10 17:07:34 UTC | #3

We (Eimolad) have added only one text variable in JSON format to the backend for ease of operation. In your case, it might look something like this:

**type metadata = Text;**

**metadata = "\"metadata\": [{\"active_players\": 10, \"unique_players\": 3, \"name\": \"eimolad\", ....},{\"active_players\": 8, \"unique_players\":5, \"name\": \"othername\", ......}, ..... {} ]\";**

This way we can easily add or change variables.

In fact, no one can predict the variety of upcoming games and determine the entire list of stats for the future. We use our NFT (EXT standard) as an account access key. The player's account contains all stats. In different games, players can have different types of stats. Therefore, it would be reasonable to get stats from players' game accounts, and not from tokens. This does not require any standard of token. Any programming language can easily parse the JSON format.

You can see how we get stats for dwarves from our game accounts on the website: https://ictokens.app/
![1|690x446](upload://qnLCVJv25ZkLVWOLRP0310pLSFu.jpeg)

-------------------------

CapuzR | 2023-03-11 12:23:06 UTC | #4

Thanks for the feedback @Hazel 

### Optional to support backwards compatibility in older clients 
I have done some tests and I think Andrea's feedback applies for GamerStatsError (Already updated) but my tests allows me to add identity variants without breaking frontends/otherCanis.

Here's my [basic test on motoko playground](https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=1465003755)

Here's a [test using ICRC-11's AuthRequest on motoko playground](https://m7sm4-2iaaa-aaaab-qabra-cai.ic0.app/?tag=518247275)

In both of them, you can remove commented Text variant and check what  I mean. Maybe I'm missing something, please let me know.

### vec Property
Agreed and already updated!! Love to use a vec record and not a vec tuple that is usually a pain on frontends imo. DAB uses vec tuple for details, maybe we could talk/suggest Funded to change this to vec record, do you see any advantage on vec tuple approach?

I'm going to write this answer on [ICRC-14 Github issue](https://github.com/dfinity/ICRC/issues/15) also and will tag you. Please answer there.

-------------------------

iBardak | 2023-03-11 12:58:05 UTC | #5

Let's try to do this in practice. We need any two games for that

-------------------------

CapuzR | 2023-03-11 13:58:16 UTC | #6

Thanks a lot for taking the time to collab on this @iBardak 

I want to clarify, this is **not** a token standard, these are just types and methods to be added on the main game canister if the game supports the standard.

The idea is to have an standard as simple as possible here (These are Game Stats). In Stats record you can see stats that every game normally have (I think):

```
type Stats = record {
    active_players : Nat;
    unique_players : Nat;
    peak_concurrent_players : Nat;
    hours_played : Nat;
    cycles_burned : Nat;
    session_time_average : Nat;
    extras : vec {Property};
};
```

and for Players is the same, I think these stats applies for every game:

```
type GamerStats = record {
    hours_played : Nat;
    session_time_average : Nat;
    extras : vec {Property};
};
```

I would love if you can give us your thoughts on this stats, if you consider that they are important enough to be on the basic standard and what other do you think that applies for all games.

Of course there are a lot of stats that varies between projects and this isn't by any means a restriction to use whatever stats a game wants to manage. 

If we agree and use this standard, all the games on the IC can interoperate -with stats- easily based on that, and it will be super easy for additional tools (Internal and external to the IC) to map games and stats on the IC Game Ecosystem and give additional benefits to everyone.

After this basic standard we can work in by genre specific stats standard to complement this one (this will not be a restriction for games to use others than the ones on the standard though).

I’m going to write this answer on [ICRC-14 Github issue](https://github.com/dfinity/ICRC/issues/15) also and will tag you. Please answer there.

-------------------------

CapuzR | 2023-03-11 13:54:44 UTC | #7

Awesome!! Let's agree on an initial one and test it with a couple of games.

-------------------------

iBardak | 2023-03-11 15:20:05 UTC | #8

is there a ready-made implementation of this functionality on motoko? Starting from recording, ending with storing and issuing information

-------------------------

skilesare | 2023-03-11 16:06:51 UTC | #9

I've referenced this ICRC from ICRC-16:  https://forum.dfinity.org/t/icrc-16-candyshared-standardizing-unstructured-data-interoperability/18893/4

I'd propose we use CandyShared as the "Value" type for this library so devs get prebuilt libraries to have fast access to handle the data types inside their canisters.

-------------------------

Hazel | 2023-03-11 17:15:01 UTC | #10

[quote="CapuzR, post:4, topic:18877"]
### Optional to support backwards compatibility in older clients
[/quote]

This is more-so about adding a variant type

The following is a screenshot from the candid spec [here](https://internetcomputer.org/docs/current/references/candid-ref#type-variant--n--t--)
![image|690x318](upload://oop8hlwjliy2DR8VxVlbQxnRMzi.png)

[quote="CapuzR, post:4, topic:18877"]
Agreed and already updated!! Love to use a vec record and not a vec tuple that is usually a pain on frontends imo. DAB uses vec tuple for details, maybe we could talk/suggest Funded to change this to vec record, do you see any advantage on vec tuple approach?
[/quote]

Great work! Personally, I do not. However, I'm a bit biased. I did a lot of backend development as a result I prefer to have my Request / Responses wrapped in records (its JSON all the way down).

-------------------------

iBardak | 2023-03-11 20:00:25 UTC | #11

Yeah!! JSON is most proper for backend (Motoko)

-------------------------

CapuzR | 2023-03-12 11:51:56 UTC | #12

[quote="Hazel, post:10, topic:18877"]
This is more-so about adding a variant type

The following is a screenshot from the candid spec [here](https://internetcomputer.org/docs/current/references/candid-ref#type-variant--n--t--)
[/quote]

Yes but is only on method results, right? Identity is used only on method arguments so that shouldn't be a problem.

[quote="Hazel, post:10, topic:18877"]
Great work! Personally, I do not. However, I’m a bit biased. I did a lot of backend development as a result I prefer to have my Request / Responses wrapped in records (its JSON all the way down).
[/quote]

Yep, agree.

-------------------------

ohsalmeron | 2023-03-14 12:41:59 UTC | #13

I have a question about NFTs and metadata. Is there a way to give permission to an authorized canister to upgrade or update the metadata associated with an NFT? ex. Level 1, Level 2 with different properties

and I'm wondering if it's possible to merge different NFTs into one. For example, if I have two NFTs that represent same parts, can I combine them into a single NFT that represents and upgraded version?

Btw, great job and thanks for this proposal!

-------------------------

iBardak | 2023-03-14 14:35:07 UTC | #14

Yes, Eimolad uses this for in-game crafting. You can burn several NFTs and tokens and the mint of a new NFT. The sequence of these actions can be linked by a smart contract. This way you won't have to change registry entries.

-------------------------

