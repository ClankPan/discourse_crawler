blabagastered | 2023-01-18 17:16:43 UTC | #1

What's the simplest / best way to make inter-canister calls in Motoko?

I tried the pattern here: https://github.com/dfinity/linkedup/blob/master/src/linkedup/main.mo#L2

But on deployment of the canister that has the import statement, I get 

`import error [M0011], canister alias "canister_name" not defined`

Despite dfx.json including it in the canister list, and indeed "canister_name" itself being already deployed on the local replica.

-------------------------

Severin | 2023-01-19 07:36:54 UTC | #2

Did you add the canister in the `dependencies` list? Like here: https://github.com/dfinity/linkedup/blob/master/dfx.json#L10

-------------------------

h1teshtr1path1 | 2023-01-19 10:07:13 UTC | #3

```
let canisterB = actor ("canister_id") : actor {
      service : (Text, Int, ....) -> async (Text);
//you can define as many services here.
};

//Calling
let t : Text = await canisterB.service(arg1, arg2);

//Make canisterB instance like above in any other canisterA like this. 
```

-------------------------

blabagastered | 2023-01-19 10:52:55 UTC | #4

Yes, it turns out the problem was class actor canisters can't be imported with `canister:`, which is the only way I found the docs and examples made reference to:

https://forum.dfinity.org/t/import-canister-canistername-error/6225/2?u=blabagastered

By using the service pattern, it worked. In my case:

`  let icrc_token_canister = actor ("r7inp-6aaaa-aaaaa-aaabq-cai") : ICRCTypes.TokenInterface;`

@Severin If you have any say in the docs / examples, I suggest making clear that

`import AAA "canister:aaa";` 

does not and cannot work with class actors. I spent quite a while trying to make `canister:` work yesterday.

-------------------------

claudio | 2023-01-19 17:35:32 UTC | #5

In case you haven't found the relevant documentation, here are some links.

Apologies if it's not clear enough.

Intro discussion

https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/modules-and-imports


Reference material:

Imports

https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/language-manual#imports

Libraries and actor classes 

https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/language-manual#libraries

-------------------------

blabagastered | 2023-01-19 18:17:47 UTC | #6

There seems to be guidance on how to create a new class actor canister from inside another canister but not on how to simply call a deployed class actor canister from another canister, eg how to achieve the last line here:

`let icrc_canister = actor ("r7inp-6aaaa-aaaaa-aaabq-cai") : ICRCTypes.TokenInterface;`


`let token_symbol = await icrc_canister.icrc1_symbol();`

In particular, no mention that `canister:` only works for certain types of canisters (non-class-actor canisters), which was the main cause for my confusion:
https://internetcomputer.org/docs/current/developer-docs/build/cdks/motoko-dfinity/language-manual#imports

I assume the confusion would not arise if I had a deeper understanding of the complete IC but at least for me, it arose.

-------------------------

claudio | 2023-01-20 16:21:57 UTC | #7

That's useful feedback, thanks!

We do have a related sample here https://github.com/dfinity/examples/tree/master/motoko%2Factor_reference

But that's obviously too hard to find and should be covered more directly in the doc.

-------------------------

cryptoschindler | 2023-02-07 19:47:18 UTC | #8

Those URLs too seem broken, I experienced something similar with a link to the docs posted by Kyle. Can we fix this?

-------------------------

Severin | 2023-02-08 13:15:25 UTC | #9

We just had a major redesign of the docs and there will be a lot more broken links. I just fixed the ones you pointed out, but please keep reporting them

-------------------------

augchan42 | 2024-01-04 06:27:37 UTC | #10

Agree that its way too hard to find a simple example of doing intercanister call to a mainnet canister 
Don't even get me started on doing candid to motoko type translation

-------------------------

