gravity_vi | 2024-07-11 17:11:08 UTC | #1

## Scoped Delegated Identity

In our use case we need to restrict Delegated Identities to make calls to some of the restricted functions based on certain arguments. Is there a way to add arguments to the DelegatedIdentity that can be retrieved on canister side in a verifiable manner? 

Target Canisters in Delegation would not work for our use case as Ideally I would want to it access other functions in the canister but not the restricted ones.

Is there a way to mention custom parameters inside Delegation object that can be used inside cansiter.

```rs
pub struct Delegation {
    pub pubkey: Vec<u8>,
    pub expiration: u64,
    pub targets: Option<Vec<Principal>>,
    pub arguments: CustomArguments //ideally would need this sort of field
}
```

-------------------------

gravity_vi | 2024-07-12 05:38:33 UTC | #2

@frederikrothenberger any thoughts on how to tackle this?

-------------------------

frederikrothenberger | 2024-07-12 11:28:49 UTC | #3

Hi @gravity_vi 

Currently, additional restrictions on delegations are _not_ supported. I agree, that this would be a quite useful feature and is something that we should look into in the future.

Meanwhile, I would suggest that you solve this issue in the application code itself. I.e. rather than using a delegated identity, have the client use a different principal, and submit a token detailing the permissions / restrictions alongside the rest of the arguments.

This token should be signed by the same entity that would now issue the delegation.

-------------------------

