lastmjs | 2021-07-08 23:45:22 UTC | #1

So I have a struct with a field that is of type `serde_json::Value`. I keep getting this error: `error[E0277]: the trait bound sudograph::serde_json::Value: CandidType is not satisfied`.

I'm not sure if there is an easy way to use a macro to satisfy the trait for `serde_json::Value`. Is there? If not, do I need to implement the `CandidType` for `serde_json::Value` by myself?

Any help is greatly appreciated.

-------------------------

chenyan | 2021-07-08 23:49:24 UTC | #2

If you cannot derive CandidType, then you need to implement it. There are some examples here: https://github.com/dfinity/candid/blob/master/rust/candid/src/types/impls.rs

-------------------------

lastmjs | 2021-07-09 02:35:16 UTC | #3

Perfect, this should help a lot, thank you

-------------------------

lastmjs | 2021-07-09 15:34:51 UTC | #4

Wold you consider adding an implementation for `CandidType` for `serde_json::Value` in the candid library? Seems there are already some other `serde` implementations, and being able to send JSON structures between canisters seems like something people would want (I know I want it for Sudograph).

-------------------------

lastmjs | 2021-07-09 16:07:59 UTC | #5

I'm running into some issues because `serde_json::Value` and `CandidType` are both not defined in my crate, thus I get the `error[E0117]: only traits defined in the current crate can be implemented for arbitrary types`. I am using `serde_json::Value` as the types for some fields on structs that I am automatically generating in my own procedural macro. The `async_graphql` library seems to be built to handle `serde_json::Value` directly, thus I don't want to have to create some kind of wrapper type to be able to implement `CandidType`.

Is there any way to provide the `CandidType` functionality now, without creating some kind of wrapper type over `serde_json::Value` in my crate?

-------------------------

chenyan | 2021-07-09 17:55:48 UTC | #6

New type wrapper is a common pattern in Rust, e.g. `struct JsonValue(serde_json::Value)`, then you can implement CandidType for JsonValue. Maybe you can start with this, and then see if there is a need to include it directly in the candid crate?

Also, I think there is a way to transform `serde_json::Value` to native Rust values, then you can use candid to send the values over the wire.

-------------------------

bitdivine | 2022-10-05 15:45:53 UTC | #7

A bit late, but I have in the past written a Candid -> Json converter and a Yaml->candid converter (this uses the did file and type to get exact Candid types).  It would not take much effort to make these into libraries and expand the family of conversions.

-------------------------

