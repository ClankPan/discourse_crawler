jzxchiang | 2021-09-19 00:41:40 UTC | #1

For example, if I pass a record (with mutable fields) as an argument to a function, will the function be able to mutate the original record?

(I suppose I could try this myself, but I wanted to get official clarification as well.)

-------------------------

nomeata | 2021-09-19 18:18:34 UTC | #2

It passes the reference.

-------------------------

rossberg | 2021-09-20 08:14:46 UTC | #3

I would rephrase this. By-value and by-reference are notions of more low-level languages. In Motoko, there is no observable difference, it is an implementation detail.

Instead, some values are _mutable_. But a mutable value has identity and is never implicitly copied, no matter what you do with it (because copying would in fact create a _different_ value).

See also my reply [here](https://forum.dfinity.org/t/is-buffer-clone-a-deep-clone/6791/5).

-------------------------

jzxchiang | 2022-01-01 18:16:48 UTC | #4

> Instead, some values are *mutable* . But a mutable value has identity and is never implicitly copied, no matter what you do with it (because copying would in fact create a *different* value).

To clarify, does this mean that a function like this works as expected:

```
func foo(arg : { var bar : Nat }) {
  arg.bar := 10;
};
```

How about if I wanted to pass a mutable value directly to a function and mutate it within the body of the function?

For example, the compiler complains when I do this:

```
func foo(var s : Nat) {
  s := 10;
};
```

In lower-level languages, I could pass a pointer and mutate its contents, but is there an equivalent in Motoko? Or do I need to wrap the mutable variable in a record (as a mutable field), like in the first example?

-------------------------

nomeata | 2022-01-02 09:08:33 UTC | #5

[quote="jzxchiang, post:4, topic:7382"]
Or do I need to wrap the mutable variable in a record (as a mutable field), like in the first example?
[/quote]

Yes. In other words, mutable variables are not “first class”.

-------------------------

