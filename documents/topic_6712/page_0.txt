Maxfinity | 2021-08-25 22:32:28 UTC | #1

Is there a way to create an actor class from rust?
Is it possible to take some rust source code and generate wasm with a candid file simialr to that of an actor class in motoko:, i.e. 

```
type Counter = 
 service {
  "inc": () -> ();
  "read": () -> (nat) query;
  "write": (nat) -> ();
 };
service: () -> Counter

```

-------------------------

ericswanson | 2021-08-25 23:28:33 UTC | #2

Yes!  The rust CDK has a few [examples](https://github.com/dfinity/cdk-rs/tree/main/examples), one of which is similar to the Motoko counter example. 

https://github.com/dfinity/cdk-rs/blob/main/examples/counter/src/counter_rs/lib.rs

-------------------------

Maxfinity | 2021-08-25 23:57:23 UTC | #3

Thanks Eric, I had seen these but they all seem to initialise an actor rather than an actor class (unless I am mistaken). I'm looking for a factory method that can be used to create more instances, something like this in the service definition:  

```
type Counter = 
 service {
  "inc": () -> ();
  "read": () -> (nat) query;
  "write": (nat) -> ();
 };
service: () -> Counter

```

And then perhaps reimported with a  macro like this?

```
#[import(canister = "counter")]
struct CounterCanister;
```

Do you have any tips?

-------------------------

witter | 2021-08-26 05:47:53 UTC | #4

This doesn’t look like the way of class，
 for example (motoko): 
```
 let actor = await ActorClass.Actor(arguments); 
```
 I did not find such a way in rust

-------------------------

levi | 2021-08-27 17:37:16 UTC | #5

I haven’t tested this out myself yet but I think in the rust you can compile the canister(actor-class) in a separate-folder to wasm, then take those wasm-bytes and hardcode them into the rust canister that is creating the new actors and have it call the create_canister method on the management-canister with the wasm-bytes as the parameter for the wasm-module.

-------------------------

Maxfinity | 2021-08-27 17:56:34 UTC | #6

Thanks,  unfortunately the main reason I am wanting to do this is to create actors through a factory method locally on dfx, bypassing the lack of management canister.

-------------------------

claudio | 2021-08-29 13:00:24 UTC | #7

Even with local deployment, there should be a ManagementCanister available (unless something has changed recently).

The Motoko compiler does pretty much what levi describes, so if that (still) works locally, the Rust code should too.

-------------------------

Maxfinity | 2021-08-29 18:00:56 UTC | #8

But I think this would be the solution if anyone has a 

[quote="claudio, post:7, topic:6712"]
The Motoko compiler does pretty much what levi describes, so if that (still) works locally, the Rust code should too.
[/quote]
When I try to access it through Principal::management_canister_id(), seems to refer to an empty canister?  Do you know how I could find the id locally?

-------------------------

Maxfinity | 2021-08-29 18:35:26 UTC | #9

This code shows how dfx is doing it, but it seems the management canister is accessed in a different way? 

https://gist.github.com/krpeacock/1a57f38d5141678a288fa034fae1398d

-------------------------

levi | 2021-08-29 19:02:28 UTC | #10

The management-canister’s-principal is the empty blob.

-------------------------

claudio | 2021-08-29 19:06:44 UTC | #11

It should just be "aaaaa-aa". Not sure how to construct that in Rust, sorry.

https://sdk.dfinity.org/docs/interface-spec/index.html#ic-management-canister

-------------------------

claudio | 2021-08-29 19:18:55 UTC | #12

If it's any help, here part of the Motoko code used by the Motoko compiler:

https://github.com/dfinity/motoko/blob/2734414efcf9f4ae70fa9d1c1367f196c607b5dc/src/prelude/internals.mo#L401

-------------------------

Maxfinity | 2021-08-29 19:57:51 UTC | #13

Thanks, possibly a mistake on my end. Will try again and revert to you.

-------------------------

