dymayday | 2022-06-05 21:13:54 UTC | #1

I was wondering how we could return an Error variant and then trap so the canister would roll back to its previous state safety.

Returning a Result is important for nice error handling form the consumer side but a Rust error is just an enum and the update to the state that occurred before the error are kept.

If it is not possible right now, might be cool to have a way to do it in the cdk.

P.S. : I know I can do it from my side by using temporary states and only commit the state at the end of my call, when nothing else can fail. But still, this feature looks nice and shiny in my developer experience dreamland.

-------------------------

chenyan | 2022-06-05 22:20:42 UTC | #2

You can trap by calling by `ic_cdk::api::trap(&str)`, but the state won't rollback.

-------------------------

dymayday | 2022-06-06 16:32:12 UTC | #3

I meant combining the `Err` variant of a `Result` enum with the trap api call.
Effectively returning this `Err` like a normal Rust function do for nice error handling and trap behind the scene.

FYI, From the [documentation](https://internetcomputer.org/docs/current/developer-docs/build/languages/motoko/actors-async#traps-and-commit-points) :

> A trap will only revoke changes made since the last commit point.

So trap roll back the state unless it's used in multiple async calls, where its behavior need to be treated carefully.

-------------------------

dymayday | 2022-06-06 19:56:17 UTC | #4

@ulan @diegop @dsarlis Maybe one of you guys will know :slight_smile:

-------------------------

diegop | 2022-06-06 20:28:37 UTC | #5

Let me ask folks internally.

-------------------------

diegop | 2022-06-06 21:01:00 UTC | #6

According to @roman-kashitsyn , itâ€™s not possible at the moment.

-------------------------

