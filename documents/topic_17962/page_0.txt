skilesare | 2024-02-12 09:24:36 UTC | #1

# File Uploader Pattern - JS, Rust, Motoko - #45

## Current Status: Discussion

* Discussion (01/09/2023)
* Ratification: (01/09/2023) 
* Open for application: (01/09/2023)
* Assigned 
* In Review 
* Closed 

[Official Link](https://icdevs.org/bounties/2023/01/09/45-File-Uploader-Pattern-JS,-Rust,-Motoko.html)

## Bounty Details

* Bounty Amount: $10,000 USD of ICP at award date.
* ICDevs.org Bounty Acceleration: For each 1 ICP sent to 88159b4fcc365576856c3d9c12a8d5b0e9614660dd30d507894466dabd58e92b, ICDevs.org will add  .25 ICP to this issue and .75 ICP to fund other ICDevs.org initiatives.
* Project Type: Individual
* Opened: 01/09/2023
* Time Commitment: Weeks
* Project Type: Library
* Experience Type: Intermediate - Motoko; Intermediate - Rust; Intermediate - JS;

## Description

Uploading files to the IC has been difficult up to this point.  The root cause of this is that the IC has an ingress limit of 2MB. Therefore, if you need to upload a file, you need a custom integration that chunks the files into 2MB chunks and handles the processing and repeated calling of the IC to get the file into your canister.

This bounty call for the developer to create a best-practices tutorial, motoko implementation, rust implementation, and agent-js handler to simplify this function.

The example canisters should have the following interface:

```
com_uploader_chunk({bytes : [Nat8], file_id: ?Nat, chunk : Nat}) -> Nat; 
```

This function should assemble files into a Map of <Nat, [[Nat8]]> or <Nat, Buffer<[Nat8]>]>.

The canister author is free elsewhere to handle the association of the file_id with a file name.

Code elsewhere in the library should be able to retrieve the files in chunked format from this state variable.

The developer should add a function to the dfinity agent that auto handles the uploading of a byte array into this function. Under the hood there is likely much code you can repurpose from https://www.npmjs.com/package/@dfinity/assets.  you should adapt this library so that its not as specific for the asset canister and returns/notifies of the file id. The following offers another approach https://github.com/ORIGYN-SA/mintjs/blob/3cba559c5cd20e233aec211651cc42c59f9504d3/src/methods/nft/stage.ts#L83.

Create a package in https://github.com/dfinity/agent-js/tree/main/packages called fileUploader.  This should take an actor and an identity.  You should be able to pass it a file and await the upload of that file:

```
let file_id = await fileUploader(actor, bytes);
let result = actor.notify_of_file(file_id, "myfile.txt");
```

This bounty gives the opportunity to

* learn about Motoko
* learn about Rust
* learn about IC File uploads

## To apply for this bounty you should:

* Include links to previous work writing tutorials and any other open-source contributions(ie. your github).
* Include a brief overview of how you will complete the task. This can include things like which dependencies you will use, how you will make it self-contained, the sacrifices you would have to make to achieve that, or how you will make it simple. Anything that can convince us you are taking a thoughtful and expert approach to this design.
* Give an estimated timeline on completing the task.
* Post your application text to the Bounty Thread

## Selection Process

The ICDevs.org developer's advisors will propose a vote to award the bounty and the Developer Advisors will vote.

## Bounty Completion

Please keep your ongoing code in a public repository(fork or branch is ok). Please provide regular (at least weekly) updates.  Code commits count as updates if you link to your branch/fork from the bounty thread.  We just need to be able to see that you are making progress.

The balance of the bounty will be paid out at completion.

Once you have finished, please alert the dev forum thread that you have completed work and where we can find that work.  We will review and award the bounty reward if the terms have been met.  If there is any coordination work(like a pull request) or additional documentation needed we will inform you of what is needed before we can award the reward.

## Bounty Abandonment and Re-awarding

If you cease work on the bounty for a prolonged(at the Developer Advisory Board's discretion) or if the quality of work degrades to the point that we think someone else should be working on the bounty we may re-award it.  We will be transparent about this and try to work with you to push through and complete the project, but sometimes, it may be necessary to move on or to augment your contribution with another resource which would result in a split bounty.

## Funding

The bounty was generously funded by the DFINITY Foundation. If you would like to turbocharge this bounty you can seed additional donations of ICP to 88159b4fcc365576856c3d9c12a8d5b0e9614660dd30d507894466dabd58e92b.  ICDevs will match the bounty $40:1 ICP for the first 125 ICP out of the DFINITY grant and then 0.25:1.  All donations will be tax deductible for US Citizens and Corporations.  If you send a donation and need a donation receipt, please email the hash of your donation transaction, physical address, and name to donations@icdevs.org.  More information about how you can contribute can be found at our [donations page](https://icdevs.org/donations.html).


## FYI: General Bounty Process

### Discussion

The draft bounty is posted to the DFINITY developer's forum for discussion

### Ratification: (01/09/2023)

The developer advisor's board will propose a bounty be ratified and a vote will take place to ratify the bounty.  Until a bounty is ratified by the Dev it hasn't been officially adopted. Please take this into consideration if you are considering starting early.

### Open for application

Developers can submit applications to the Dev Forum post.  The council will consider these as they come in and propose a vote to award the bounty to one of the applicants.  If you would like to apply anonymously you can send an email to austin at icdevs dot org or sending a PM on the dev forum.

### Assigned

A developer is currently working on this bounty, you are free to contribute, but any splitting of the award will need to be discussed with the currently assigned developer.

### In Review

The Dev Council is reviewing the submission

### Awarded

The award has been given and the bounty is closed.



[Other ICDevs.org Bounties](https://icdevs.org/bounties.html)

-------------------------

cyberowl | 2023-01-21 07:45:22 UTC | #2

[quote="skilesare, post:1, topic:17962"]
```
let result = actor.notify_of_file(file_id, "myfile.txt");
```
[/quote]

I have experience with Motoko and Javascript in my previous projects. I am interested in taking on this bounty. However, I was wondering if it would be possible to complete the work for Motoko and Javascript at a reduced cost, since I am already familiar with those languages. While I am willing to learn Rust, I believe it would be more efficient if someone who is already proficient in Rust could handle that part of the work. Could we consider splitting the work in this way?

Below, I have provided a brief example of my previous implementation, but I would like to improve it, add documentation, and expand it to meet the requirements of this bounty.

https://github.com/cybrowl/upload-file

This code doesn't show the integration and unit tests I have for this implementation. You can also see a project that uses this to scale file assets across many canisters at the following: 

https://kqlfj-siaaa-aaaag-aaawq-cai.ic0.app/
https://kqlfj-siaaa-aaaag-aaawq-cai.ic0.app/snap/7GWF5PA4PHG55MC2R2RSVXN41D?canister_id=lrr5x-jaaaa-aaaag-aatzq-cai

Dependancies I will use: 
`mo:base`

Dependancies I might consider: 
`aviate-labs/ulid.mo` to generate id (although might not be necessary)

I would not use any dependancies unless it is absolutely necessary. For this task I don't think anything other than `base` is necessary. 

- chunking files into 2MB chunks and handling the processing and repeated calling of the IC to get the file into the canister.
	
	solution: to some extent this is done via the following
	https://github.com/cybrowl/upload-file
	
	I think if we want scaling I can build an approach to that as well. The description asks for one canister. 
	
-  create a package called fileUploader in agent-js/packages that takes an actor and an identity, and allows to pass a file and await the upload of that file. Additionally, the developer should adapt existing libraries such as @dfinity/assets and mintjs/stage.ts to make them more general and to return/notify of the file id.

	solution: my understanding is that the actor would contain both the canister_id and the identity to upload the file. Adding this package shouldn't be a problem. Looking at https://www.npmjs.com/package/@dfinity/assets. It seems like much of what we want to use is there. I think adding great tests to all this will best showcase how it works. 

This will take me a couple of weeks to complete. Most likely 2 weeks. There are still a couple of questions that I would like clarification on. 

I don't understand what this is supposed to do: 

`let result = actor.notify_of_file(file_id, "myfile.txt");`

What is result?

-------------------------

skilesare | 2023-01-21 16:22:31 UTC | #3

For sure. If you can take care of the JS and Motoko we can do 2/3 of the bounty and attempt to recruit a Rust dev to help you for the other 1/3.

I've asked for approval and I expect it to pass:
https://77i6o-oqaaa-aaaag-qbm6q-cai.ic0.app/axon/1/proposal/11

-------------------------

Safik | 2023-01-23 09:49:44 UTC | #4

Hi!
I already have such loaders. There are several options in my project. One of the advanced forms shows progress. The other one just loads the file and shows completion. It is possible to check the integrity of the file by CRC and without it. Similarly, file acceptance is implemented in motoko.

Link github [https://github.com/fury02/Difibase](https://github.com/fury02/Difibase)
Web [https://7wwjw-5iaaa-aaaan-qbguq-cai.ic0.app/](https://7wwjw-5iaaa-aaaan-qbguq-cai.ic0.app/)

I can do it. Implemented in TypeScript/JS and Motoko

-------------------------

skilesare | 2023-01-23 13:38:41 UTC | #5

Safik...this looks super cool. The bounty is currently assigned to @cyberowl. Please check with him. If you guys want to coordinate and share the bounty it would be up to him.  It looks like you'd basically just need to extract the relevant pieces into their own repo that could be easily included with vessel or mops along with an example.  Then wire up the TS into the agent.  Seems pretty straightforward, but I'll leave it to cyberowl on how to proceed.

-------------------------

Safik | 2023-01-23 15:10:12 UTC | #6

Ok [@skilesare](https://forum.dfinity.org/u/skilesare). Let's not get in the way [@cyberowl](https://forum.dfinity.org/u/cyberowl). Then let's let him do it alone. If my examples help, let him put stars on github :slightly_smiling_face:

@skilesare I have a request for you. Consider me for this task. Definitely I want to solve it.
https://forum.dfinity.org/t/open-icdevs-org-bounty-39-async-flow-one-shot-motoko-6-000/17901

-------------------------

cyberowl | 2023-01-24 07:55:33 UTC | #7

Hello @Safik, I hope you are able to claim bounty #39. I have already reached out to @LightningLad91 and we are planning to meet on Friday to discuss the design for file uploader. I have suggested splitting it between the two of us.

I was not aware that I had already been assigned the bounty, proposal appears to be active. Regardless, this is the current status. I will update you after our meeting.

-------------------------

Safik | 2023-01-24 09:34:10 UTC | #8

You can develop everything from scratch. I hope this will be the best solution. But there is a great opportunity to focus (when solving) on [my]( https://github.com/fury02/Difibase) project. I don't mind if you use my modules. But, like any code, it requires refactoring. In any case, need there is work on the design of the code.

-------------------------

cyberowl | 2023-01-29 23:55:52 UTC | #9

So I am a bit confused how this process works. How do I know I got approved and can proceed with the work. Thanks @skilesare 

![Screen Shot 2023-01-29 at 3.54.30 PM|690x283](upload://wmAv2DAZu7yHvAjTpL6ZHG7QUnC.jpeg)

-------------------------

skilesare | 2023-01-30 03:23:20 UTC | #10

Doh...sorry...let me repost.  We need to do a better job voting as a board.  I'll bug people about it. Please keep working.

-------------------------

heyuanxun | 2023-02-17 18:37:21 UTC | #11

Hi, I can get things done in rust. Would you like to share the bounty with me? This is my previous work experience:
https://github.com/PrimLabs/ISP-SDK

https://github.com/PrimLabs/ICSP

-------------------------

cyberowl | 2023-02-17 22:48:55 UTC | #12

Yeah that sounds good. Go ahead with rust implementation.

-------------------------

heyuanxun | 2023-02-18 10:36:22 UTC | #13

ok. our team will start do it.

-------------------------

heyuanxun | 2023-02-18 11:11:04 UTC | #14

Sorry, I have a little doubt.
May I ask whether the implementation of rust is to be a rust canister or a rust sdk to pass file slices larger than 2M to motoko canister

-------------------------

heyuanxun | 2023-02-18 11:21:29 UTC | #15

Hello.
I officially apply for the rust implementation of this bounty, can i get one-third of the reward when i complete?

-------------------------

heyuanxun | 2023-02-18 12:52:02 UTC | #16

I'm a bit confused about the interface description
```
com_uploader_chunk({bytes : [Nat8], file_id: ?Nat, chunk : Nat}) -> Nat; 
```

What kind of actual situation does `file_id` correspond to `null`?

What does the `Nat` of the function return value mean? Is the current `chunk index`?

-------------------------

skilesare | 2023-02-18 13:06:48 UTC | #17

Please go ahead with the rust side. I think fileid is optional so that the first chunk doesn't have to have a file id and the it is assigned and returned.

-------------------------

cyberowl | 2023-02-19 10:46:05 UTC | #18

I think it is supposed to be a rust canister. This helped me understand the current implementation for assets: https://github.com/dfinity/sdk/blob/master/src/canisters/frontend/ic-certified-assets/src/state_machine.rs. I don't think we need to support all the methods included in that implementation but it is a good reference.

-------------------------

heyuanxun | 2023-02-19 11:22:47 UTC | #19

ok. i will change the data canister from motoko to rust. i will also complete the rust upload crate

-------------------------

skilesare | 2023-02-19 13:14:23 UTC | #20

The idea is that this should be a library that is easy to add to either a motoko or rust project. A bit of boilerplate will be required to wire up the com_uploader_chunk function, but the library should handle the rest and make it easy for a canister dev to access what has been uploaded.

-------------------------

heyuanxun | 2023-02-19 13:53:20 UTC | #21

Thanks for your answer, this time I clearly understand what I should do!

-------------------------

skilesare | 2023-03-07 18:46:50 UTC | #22

Hi @heyuanxun, any updates?

-------------------------

cyberowl | 2023-03-15 21:10:21 UTC | #23

I just want to provide a progress report for the Motoko side of file uploading. I closely followed the interface from `@dfinity/assets`. However, I simplified the interface by not creating two distinct methods for uploading files. Previously, there was one method for files smaller than a certain byte size and another for chunking larger files. Now, I have designed it to chunk all files, regardless of size. Many tests demonstrate how this works, and I plan to create a video explaining its usage. I would appreciate feedback from the community regarding any additional features or improvements they would like to see.

https://github.com/cybrowl/upload-file
https://github.com/cybrowl/agent-js/tree/feature/file-upload/packages/file-upload
![Screenshot 2023-03-15 at 1.58.16 PM|634x500](upload://5pkqmh14VRIlbHXX53G7rpIMY2O.png)

-------------------------

skilesare | 2023-03-15 22:52:42 UTC | #24

Chunking is required over about 2MB. What do you have the chunk size at?

-------------------------

cyberowl | 2023-03-15 23:38:18 UTC | #25

I have chunking size at 2MB

-------------------------

Safik | 2023-03-16 06:02:49 UTC | #26

I wrote above. I did the same in my project. If possible (preferably) make it possible to adjust the size of the piece.Since the user needs (not always) to count the hash or checksum. It doesn't always succeed in a round.

-------------------------

cyberowl | 2023-03-16 08:37:57 UTC | #27

I just didn't understand why a developer would choose anything less than 2MB chunking size. I guess in extremely poor or unstable internet connections it might be useful. Going to add the retry to the client, should be easy enough. Anything else that you think might be good to have let me know.

-------------------------

cyberowl | 2023-03-16 09:54:33 UTC | #28

So I added retry logic. I think one thing missing is checksum. However, going to think about this and then add it.

-------------------------

C-B-Elite | 2023-03-20 07:21:25 UTC | #29

We are MetaBox Team，we will start working on this bounty.
In MetaBox, once we have fulfilled the requirements mentioned above, we will abstract these functions.
MetaBox : app.metabox.rocks

-------------------------

skilesare | 2023-03-20 16:03:55 UTC | #30

Hey C-B-Elite...the bounty is currently assigned to Cyberowl.

-------------------------

cyberowl | 2023-03-22 05:33:55 UTC | #31

Can you take a look at the code above and offer any suggestions that you would find helpful for MetaBox. Thanks

-------------------------

cyberowl | 2023-03-22 05:41:55 UTC | #32

Seems like checksum is a good idea here are my approach to doing it: 

#Checksum Verification

Client-side (using JavaScript):
a. Compute the checksum of the file before uploading, using a JavaScript library that supports the desired checksum algorithm (e.g., MD5, SHA-1, or SHA-256).
b. Send the computed checksum along with the file to the server.

Server-side:
a. Form File from all the chunks
b. Compute the checksum of the received file using the same algorithm as the client.
c. Compare the server-generated checksum with the client-generated checksum.

If the checksums match, it is highly likely that the file was uploaded correctly and without errors. If they don't match, there might be an issue with the uploaded file, such as corruption or an incomplete transfer.

I thought maybe it would be good to add a sync file mech as well, but that will probably take more time. However, I think a simple checksum will be good for file integrity in case some chunks are injected in some way while uploading the file.

-------------------------

cyberowl | 2023-04-15 19:17:03 UTC | #33

#Version-Update 

I implemented CRC-32 checksums for file uploads. This ensures that if any chunk is missing when committing a batch, an error will be triggered. Additionally, checksums are performed at both the chunk and file levels, allowing for potential synchronization of different chunks in the future. For instance, updating specific parts of an executable file could be made possible. While I haven't tested this functionality yet, it's an experiment I plan to explore next. Another aspect I'm interested in trying is implementing gzip compression and decompression on the client side.

-------------------------

Zane | 2023-04-15 19:20:16 UTC | #34

Is there any particular reason to why you chose to use transient memory instead of ZhenyaUsenko's stable hashmap? Afaik it is more performant than the one used in the base Motoko library despite using stable memory and it would lift the storage limit per canister to 48GB.

-------------------------

cyberowl | 2023-04-15 19:41:34 UTC | #35

[quote="Zane, post:34, topic:17962"]
ZhenyaUsenko’s
[/quote]

I don't think ZhenyaUsenko’s uses stable memory, it is just a module. There is no particular reason, just not brining in more dependancies than necessary. I still don't understand why we don't support improvement of base hashmap vs creating additional deps.  However, if the community prefers that I can change it.

-------------------------

cyberowl | 2023-04-15 23:53:09 UTC | #36

#Version-Update 

Taking into consideration your feedback @Zane I have updated https://github.com/cybrowl/upload-file/commit/904a3e8ab6bd3687471b8e163d598a077daa2538. to move towards hashmap dep. I think it makes code easier to read as well. Anyway, let me know if you have any other suggestions.

-------------------------

Zane | 2023-04-17 19:11:08 UTC | #37

That is great, but just to be sure I'd also ask @skilesare's opinion on this one, the additional dependency argument you pointed out makes sense an since he is the bounty issuer he deserves the decide if it's a worth compromise for more storage capacity. 

Are more granular permission per asset planned?

Also remember to update this line to match the new domain, ic0.app won't be used anymore for new canister after the 20th April: https://github.com/cybrowl/upload-file/blob/main/src/utils.mo#L33

-------------------------

cyberowl | 2023-04-17 21:23:39 UTC | #38

Yeah I just saw a tweet about the domain name change. I don't think the hashmap dep adds any increase in storage capacity but will add support for stable storage as well next since it seems like a good thing. There are limitations though and I will outline them in the readme. Permission per asset can only be done via token generation and is def something to explore.

-------------------------

cyberowl | 2023-04-18 05:47:35 UTC | #39

#Version-Update 

Initially, I wrote the `@dfinity/file-upload` package in JavaScript. I chose this approach because I didn't want to learn TypeScript and didn't see the need for a small library. However, to maintain consistency with `agent-js`, I decided to rewrite it in TypeScript. I also updated all my tests to be compatible with Jest. I created a new repository to manage changes while testing the package at https://github.com/cybrowl/agent-js-file-upload. After testing, it can be more easily merged into `agent-js`. Currently, there is a minor issue I couldn't fix with `agent-js`, where the Jest tests are not working for me. It seems to be a configuration issue related to the monorepo structure.

The next step is to start using the library in a project, and I am considering building a simple UI for people to see what they can do with the project. Domwoe also suggested that I should add it to https://internetcomputer.org/samples, which I plan to do soon.

-------------------------

skilesare | 2023-04-18 09:45:02 UTC | #40

Using Evginey's hashmap is great. It is fast and performant. It doesn't do stable storage but takes advantage of the stable migrations provided by motoko so you shouldn't need to do or/post/upgrade. 

A stable version that gets you up to 48GB wold be great, but I think we need to let @matthewhammer burn in the stable region stuff(is that ready to go Matt?)

-------------------------

cyberowl | 2023-04-18 09:58:01 UTC | #41

Wait how is it able to do preupgrade and postupgrade? Also where in the lib is it being done?

-------------------------

cyberowl | 2023-04-18 13:33:40 UTC | #42

[quote="Zane, post:37, topic:17962"]
granular permission
[/quote]

What kind of granular permission are you interested in?

-------------------------

Safik | 2023-04-19 13:23:31 UTC | #43

I want to clarify. Using this hash card does not eliminate the use of the *system function preupgrade and*
*system function portupgrade*. That is, we cannot rely on it during the code update?

-------------------------

matthewhammer | 2023-04-19 15:34:19 UTC | #44

[quote="skilesare, post:40, topic:17962"]
A stable version that gets you up to 48GB wold be great, but I think we need to let @matthewhammer burn in the stable region stuff(is that ready to go Matt?)
[/quote]

It's still on a branch, but it's ready to be used by anyone that wants to try it.  Please ping me.

Before merging into `main`, the main outstanding issue is preparing the "migration feature" that installs the region manager into an existing, classic use of the experimental API.  I should be making progress on that this week, but it's not needed for dev that wants to try to build on regions, in preparation of that eventually being finished soon.

-------------------------

cyberowl | 2023-04-20 01:06:45 UTC | #45

What are the main resources I can parse through to learn more? What are the main github repos? Is it just base?

-------------------------

cyberowl | 2023-04-20 02:50:31 UTC | #46

Gzip compression such as pako: https://nodeca.github.io/pako/ only saves like 1% space on multimedia files so I don't think it is worth pursuing. It works best for text based files but not sure that is something most people will upload. Adds more complexity than reward. Better to focus on stable storage and good UI examples.

-------------------------

cyberowl | 2023-05-06 08:31:57 UTC | #47

So for this I think a storage system similar to Dropbox will do the most good, so I am going to demonstrate that for the file storage code. However, it will be able to do more than just store files and share those files with people, it will be able to share with other applications. This will be an experiment but I think it will be really cool how it can be the foundation for many types of applications.

-------------------------

LightningLad91 | 2023-05-17 03:03:57 UTC | #48

We’ve done a lot of this sort of experimentation with our filesystem library. It’s still being refined. Let me know if you’d like to chat again.

-------------------------

cyberowl | 2023-05-17 03:34:56 UTC | #49

Sure let me know when. The more I think about it the more important it becomes.

-------------------------

pramitgaha | 2023-06-15 10:32:25 UTC | #50

@skilesare what's the update for the rust side? is it still open?

-------------------------

skilesare | 2023-06-21 23:49:02 UTC | #51

Hey @cyberowl, what is the status here?  Do we have the three pieces all together so we can close out the bounty?  Do we still need a rust implementation?

-------------------------

cyberowl | 2023-06-22 00:43:44 UTC | #52

I believe @pramitgaha is working on the rust side of things. We will update soon. I need to review all the changes.

-------------------------

pramitgaha | 2023-06-22 07:13:07 UTC | #53

@cyberowl 
should I push my work to your repo?
or leave as it is?

-------------------------

cyberowl | 2023-06-22 07:58:26 UTC | #54

Leave as it is. I just want the github link.

-------------------------

cyberowl | 2023-06-26 07:07:47 UTC | #57

Adding all repos for ref: 

note: agent-js-file-upload changes need to be merged into agent, this repo was used for testing

# repos
https://github.com/cybrowl/upload-file
https://github.com/cybrowl/agent-js-file-upload
https://github.com/cybrowl/static
https://github.com/cybrowl/static-components
https://github.com/pramitgaha/upload_file_rs

# website
https://kriz4-caaaa-aaaag-abrha-cai.icp0.io/
https://static.icp.xyz/

-------------------------

skilesare | 2023-06-26 12:50:40 UTC | #58

Amazing Guys!  Thanks for the work. I'll get it reviewed and submitted for approval.

Can you give an example of how you can inject this into agent-js?  I'd love to get @kpeacock take on it.

-------------------------

cyberowl | 2023-06-27 07:37:53 UTC | #59

I am thinking about something like this:

![Screenshot 2023-06-26 at 7.34.18 PM|630x499](upload://7xXD8v7mDAxHTazGr0RVKpz8LEx.png)
![Screenshot 2023-06-26 at 7.36.34 PM|585x500](upload://6b590I6CS8ljYzyNeJCisVvySFo.png)



Developer would just need to install dep similar to other deps in `agent-js` and then import AssetManager. They only need to provide the canister id and host to start interacting with the canister. 

I am always open to feedback as well. I want to make this easy to use. Identity can be assigned as well, if they want to authorize the user.

You can assign it a static canister or a dynamic one that is shown by calling file_scaling_manager. This allows for scaling within the 4gb size canisters. Like how memory works in canisters we only scale up, although we can reuse can memory but that would complicate this example case. 

A timer is used to check the health of each canister and create a new one when it fills up. There are different ways to go about this, I just used the easiest to follow.

-------------------------

cyberowl | 2023-07-16 05:19:39 UTC | #60

Just following on the review status of this.

-------------------------

skilesare | 2023-07-17 16:19:35 UTC | #61

Did you every hear anything from @kpeacock ?  It would be great to find some dapps that need this tech and can validate it.

-------------------------

cyberowl | 2023-07-18 01:22:39 UTC | #62

I assisted @iamenochchirima with onboarding. So far, I haven't received any communication from kpeacock. Nonetheless, the technology is available and can be tested at https://static.icp.xyz/. While I can try reaching out to some of the dapps, it might take some time before they onboard. I believe that Static is excellent and has the potential to be transformed into a platform for hosting larger content such as videos. I have presented it there. I will try to connect with dapps, but I cannot make any guarantees.

-------------------------

skilesare | 2023-07-18 11:14:27 UTC | #63

It looks really good. I'll put it in the wire for the next round of approvals. Have you worked out with @pramitgaha how the payout will be distributed?

-------------------------

cyberowl | 2023-07-18 11:40:00 UTC | #64

@pramitgaha agreed to $3,400. I get the difference from that. I think we can just give you our ICP wallets. Here is mine: `c49ddb79b5243c6941c5b56b6150476f9e55996db8b497752b660a5c9adafac1`

-------------------------

pramitgaha | 2023-07-18 11:43:05 UTC | #65

Do I also need to post my address? @skilesare

-------------------------

cyberowl | 2023-07-18 11:44:20 UTC | #66

You should post it, I created a new linked account just for distribution.

-------------------------

pramitgaha | 2023-07-18 12:00:18 UTC | #67

@skilesare 
here is mine: 
```f1dd32160226d1b7a3c61ef1accd2da62d4d81ac0abe801703d1694c8680f4cb```

-------------------------

josephgranata | 2023-07-25 04:51:16 UTC | #68

@cyberowl and @pramitgaha this code is great news. 

We are building a DAPP that needs to upload documents to the IC. 

I tried making your code work @pramitgaha but I got some errors when building the Rust canisters. I would prefer to use Rust, but on my local DFX I got the error below for one of the canisters:
![Screen Shot 2023-07-24 at 9.35.04 PM|690x231](upload://tDhyoC54z4aLs6m2isyHedXK2v5.png)

On the other hand the code from @cyberowl ran perfectly, it all worked. I can not figure out yet how to use it, since I do not use Motoko, some pointers on how to use it from a Node.js application running locally would be most welcome.

Still, THANK YOU BOTH, this code is a Godsend for us, since getting this functionality to work is not trivial. 

I am currently going over all the files you guys did, lots to review, but any additional guidance would be appreciated to save time, and understand how you built STATIC the example IC DAPP. Where should we start, and how could we integrate the code into a new Client App running locally on Electron ?

-------------------------

pramitgaha | 2023-07-25 05:07:17 UTC | #69

hello @josephgranata 
can you show the error that you're getting?
I've tested the code and I'm also using the same code in my other projects, it works fine for me!

-------------------------

josephgranata | 2023-07-25 05:10:16 UTC | #70

@pramitgaha The error is on the screenshot I shared above.
It says an error happened in the Candid canister, and then it shows the error it found.

If you can tell me in detail the steps to correctly build your code, I will happily try again.

-------------------------

pramitgaha | 2023-07-25 05:11:24 UTC | #71

are you trying to run the test?

-------------------------

josephgranata | 2023-07-25 05:18:19 UTC | #72

@pramitgaha I am trying to replicate the results of building the Motoko version in my local DFX replica:
https://github.com/cybrowl/upload-file

When building that one, you get two canisters and their Candid interfaces.

When I try to build yours, using your Readme file instructions, only one canister builds. The other one fails, as shown on the screenshot.

The one that fails is the file_scaling_manager, the other one works. Here is the other error I get from the command line:
![Screen Shot 2023-07-24 at 10.18.51 PM|690x214](upload://6Kg9EgKEWgJGqTwcEX9Bij8pHu7.png)

-------------------------

pramitgaha | 2023-07-25 05:19:02 UTC | #73

ahh! now I got it!
so, the file_storage canister is the crate that handles the chunk upload and file serving through http part.
@cyberowl has another canister for scaling the storage. I skipped that as the bounty was for uploading.

-------------------------

josephgranata | 2023-07-25 05:21:19 UTC | #74

@pramitgaha Okay, now I understand. I am guessing the whole storage scaling is in Motoko correct?

How do you suggest I could connect your code with the Motoko code from @cyberowl ?

-------------------------

pramitgaha | 2023-07-25 05:24:36 UTC | #75

@josephgranata 
not into motoko, if motoko accepts wasm file for instantiating the canisters, then you can use the rust part with file_scaling_manager code.
however, I can push the code for storage scaling part too.

-------------------------

josephgranata | 2023-07-25 05:26:34 UTC | #76

Thanks! I would really appreciate having it all in Rust.

-------------------------

cyberowl | 2023-07-25 06:26:43 UTC | #77

[quote="josephgranata, post:68, topic:17962"]
We are building a DAPP that needs to upload documents to the IC.
[/quote]

Makes me happy that you are using it. We will help you in any way to onboard you and future users more easily into it. First a few questions.

Are you going to modify the code in any way to extend functionality? 
What functionality are you wanting to use?

One of the easiest ways to get started is to use https://github.com/cybrowl/agent-js-file-upload.

You can take a look at static to see how it is being used: https://github.com/cybrowl/static/blob/main/src/ui/routes/%2Bpage.svelte#L26

All you need to do is pass the canister id to agent with some other args and deploy those canisters and it should work. 

If you are running on Electron it should be the same as running it on web. You would need to communicate with the canisters that are running those storage assets. 

I can help you more if I understand your use case.

Thanks again for using it.

-------------------------

josephgranata | 2023-07-26 05:14:17 UTC | #78

@cyberowl the main functionality we need is for a given IC user to upload his files into a canister where his files will reside, and to use his Cycles to pay for the file storage.

We would like to make the upload invisible, like iCloud and Dropbox do, but at the same time to have a confirmation of when a file was saved to the IC Blockchain. A status for each file like Dropbox does.

I am not familiar with Motoko, and I do hope @pramitgaha can finish the Rust code so that we can see the whole thing in Rust.

That said, I tested your code in Motoko, and it runs really well. I will try to get an understanding of the code you built too, perhaps we end up using Motoko for this feature.

-------------------------

cyberowl | 2023-07-26 05:20:51 UTC | #79

Based on that description you should be good with what is there. The only part you will need to figure out is the flow of getting the user to pay before creation of the canister. Or maybe you will charge them later. You will need to map their files to some tree like structure if you want directories,  organizational structure that maps those files. Also if you want to limit the viewing of those files you can do some kind of code based system to not allow access via the public url that is provided. Http requests cannot pass the principal in the IC. Other than that you should be good.

-------------------------

josephgranata | 2023-07-26 05:46:14 UTC | #80

@cyberowl yes indeed, we plan to use a Rust data structure (a BTree) to replicate a directory like structure. Rust Stable Data structures help here, but there is no code similar to yours for the upload. That is why I am so interested in the work of @pramitgaha but I reckon I must examine your code, especially the way you build STATIC which is a remarkable showcase.

We also need a controller canister, and targets where to put the files in other canisters. Indeed we would need to charge the user beforehand. 

I would appreciate any help as we build this, I will DM you for sure, thanks for your work!

-------------------------

pramitgaha | 2023-07-26 18:21:36 UTC | #81

@josephgranata I have started working on it!
I'll be busy with my college assignment for 2 days.
after that I'll complete and push the new changes

-------------------------

josephgranata | 2023-07-26 19:18:34 UTC | #82

@pramitgaha no problem, thanks again.

One favor, that probably @cyberowl can answer.

Imagine you were in my shoes, meaning an experienced developer who knows JavaScript, and Rust; but no Motoko, and wants to get a good understanding of the series of programs you just built.

What would be the sequence of files I should examine to UNDERSTAND how they work together? Which should be first, second, third, and fourth? These are your code files:
a) https://github.com/cybrowl/upload-file
b) https://github.com/cybrowl/agent-js-file-upload
c) https://github.com/cybrowl/static-components
d) https://github.com/cybrowl/static

Also where does the code @pramitgaha fit, I am guessing it can replace (a) only since the FileScalingManager piece is not there yet.

Thanks for your guidance in advance.

Joseph

-------------------------

cyberowl | 2023-07-27 01:06:13 UTC | #83

[quote="josephgranata, post:82, topic:17962"]
UNDERSTAND how they work together
[/quote]

I would look at the tests. I would also start with 

[quote="josephgranata, post:82, topic:17962"]
GitHub - cybrowl/static: ui showcasing file-upload scaling
[/quote]
 
To get an overview of how the file storage canister is called. All calls are made here for file upload. 
Make sure you look at how it uses agent-js. In agent-js look at the tests. 

Then you can go to 

[quote="josephgranata, post:82, topic:17962"]
[GitHub - cybrowl/upload-file: uploading file assets](https://github.com/cybrowl/upload-file)
[/quote]

and see how files ared being stored. 

Tests and writing tests is the best way to understand something. Cheers

-------------------------

josephgranata | 2023-07-27 16:15:44 UTC | #84

Thanks @cyberowl I will follow your advice.

-------------------------

pramitgaha | 2023-07-28 23:33:21 UTC | #85

@josephgranata 
I was trying to upgrade the code, but I'm facing issue.
My first priority is to use `ic-stable-structures`, but I'm getting some issue with that. I've asked about the issue to the author, waiting for his reply. If he takes longer to reply or I can't find the solution. I'll use `ic-stable-memory` library to accomplish the work.

-------------------------

pramitgaha | 2023-07-30 09:35:21 UTC | #86

@josephgranata 
upgraded the code to use stable memory, I'm using `ic-stable-memory`
however, scaler part is remaining!

@cyberowl facing some checksum issue, can you review it once?
it works with pdf, when I try for videos it fails!.

-------------------------

josephgranata | 2023-07-31 18:22:04 UTC | #87

@pramitgaha thanks for the update you are getting there! 
I also hope your exams are going well, and success in all of them.

-------------------------

pramitgaha | 2023-07-31 18:43:52 UTC | #88

@josephgranata thanks.
I also had started with `ic-stable-structures`. you check that on `v2` branch.
Once I get the fix for the problem I'm facing, I'll provide the code using `ic-stable-structures`

-------------------------

kpeacock | 2023-07-31 22:36:49 UTC | #89

I've been on an extended vacation and just got back today. Sorry I wasn't around to support with this!

-------------------------

icaten | 2023-08-03 07:06:56 UTC | #90

Would these repos make for a good tutorial on understanding asset canisters?

-------------------------

cyberowl | 2023-08-04 00:29:22 UTC | #91

Yes it will allow you to understand how to store files.

-------------------------

josephgranata | 2023-08-29 04:49:50 UTC | #92

Dear @cyberowl and @pramitgaha first some good news, myself and my front-end dev partner have managed to use your Motoko code for our Electron application, it is a Note App that will have native support for the IC.

We are now able to save files in the local replica, and most of our main Electron app is working well with your Motoko code.

However we have two challenges:
- First we have followed the pattern of your static example which uses Motoko. You use it in an unusual way, instead of using dfx and building, the Motoko files are already pre-compiled as WASM files as I show on the the attached image. 
- In your code at https://github.com/cybrowl/static you used two wasm files to interact with your JavaScript app. We are doing the same and it is working. But how can we compile updated Motoko code and create the corresponding WASM? We need to update this code to add new features.

I've been looking at this for some days, and I have not been able to do it? How did you do it? How did you go from the Motoko code to the wasm?

I would be very grateful with your help on this.

![Screen Shot 2023-08-28 at 11.39.08 PM|604x500](upload://2agkjvPz1DBgplnhAnQgJvvtaf7.jpeg)

-------------------------

cyberowl | 2023-08-29 08:50:09 UTC | #93

[quote="josephgranata, post:92, topic:17962"]
You use it in an unusual way, instead of using dfx and building, the Motoko files are already pre-compiled as WASM files as I show on the the attached image.
[/quote]

Yeah this is done so that you can just import the wasm and it works with the client lib. 

[quote="josephgranata, post:92, topic:17962"]
But how can we compile updated Motoko code and create the corresponding WASM?
[/quote]

The code for everything is here: https://github.com/cybrowl/upload-file

You can
```
dfx deploy file_scaling_manager --argument='(false)'

dfx deploy file_storage --argument='(false)'
```
the arg is `isProd` bool

That should build the wasm file with any changes that you add.

Yeah it is not possible to do every possible scenario so some modifications are prod needed per project. However, I am happy to guide you in the right direction.

-------------------------

josephgranata | 2023-08-29 16:48:20 UTC | #95

@cyberowl yes indeed we know how to use your code, it works well in the local replica.

What we did not know is where do the .wasm files go inside the filesystem.

But a few minutes ago I just saw @h1teshtr1path1 explain that those .wasm files are inside the hidden .dfx directory, and indeed they are there!

Just one second question @cyberowl when we need to deploy these files to production on the IC what do we need to change besides the:

dfx deploy file_storage --argument='(true)'

Where can we change the canister address for storage so that it works with an IC canister not just in the local replica? I did notice this code for the local replica in the utils.mo file, on line 45:
```
    if (args.is_prod == false) {
            url := Text.join(
                "",
                (["http://", args.canister_id, ".localhost:8080/asset/", args.asset_id].vals()),
            );
``` 

Related code is in the entry point to the actors on FileScalingManager and FileStorage; where could we load the IC canister address for storage space? Is it on line 34 to 39 of FileScalingManager.mo as shown? That would be the main section of the code we should expand to allow for InternetIdentity and paid canister storage correct? Is there any other major area of the code we should upgrade?

Thanks for any advice :slight_smile: 

Joseph

P.S. Attached is the code section I mentioned from FileScalingManager.mo
![Screen Shot 2023-08-29 at 11.43.04 AM|681x500](upload://jmJaUw37GOlCQ5E6j4cd3Wdcp1O.jpeg)

-------------------------

cyberowl | 2023-08-29 18:50:33 UTC | #96

[quote="josephgranata, post:95, topic:17962"]
dfx deploy file_storage --argument=‘(true)’
[/quote]

`dfx deploy --network ic --wallet xx file_storage --argument=‘(true)’`

[quote="josephgranata, post:95, topic:17962"]
I did notice this code for the local replica in the utils.mo file, on line 45:
[/quote]

Yeah when you pass `true` that changes the url to work in mainnet. 

[quote="josephgranata, post:95, topic:17962"]
Is it on line 34 to 39 of FileScalingManager.mo as shown? That would be the main section of the code we should expand to allow for InternetIdentity and paid canister storage correct?
[/quote]

It all depends on what your strategy for payment is. If you are doing 1 canister per user then that would prob be the best place. You just have to make the function public and think about how you will handle payment. You can also extract some of that code to your main canister and do it there where you have the user info.

-------------------------

josephgranata | 2023-08-29 21:40:42 UTC | #97

[quote="cyberowl, post:96, topic:17962"]
It all depends on what your strategy for payment is. If you are doing 1 canister per user then that would prob be the best place. You just have to make the function public and think about how you will handle payment. You can also extract some of that code to your main canister and do it there where you have the user info.
[/quote]

Indeed we are planning to do one canister per user, and yes we would have to charge for it as well. 

Your code has been very useful for us, I will probably have a few more questions as we move forward. THANK YOU.

-------------------------

josephgranata | 2023-08-29 22:04:41 UTC | #98

@pramitgaha it's been a while, I know you were busy at university.

Any news about your Rust code for upload_file_rs in Github? 
https://github.com/pramitgaha/upload_file_rs

I remember your started a new v2 branch to use *ic-stable-structures*, is that done, could I use it or you are still working on it? I really like the fact that this code would make the pre-upgrade and post-upgrade no longer necessary! :sunglasses:

-------------------------

josephgranata | 2023-08-31 04:49:38 UTC | #99

@cyberowl Going back to the way the JavaScript code works in your static example, please explain to me how you build the .wasm files from the Motoko code so that they all work well.

Let me explain our challenge. 

We are following a similar approach our Electron code resides under an app directory, and we have placed your .wasm motoko code under the icp directory as seen on this screenshot.

![Screen Shot 2023-08-30 at 11.37.49 PM|690x390](upload://91vw7dwvZg1C3REkVNCTrDCO0Gg.png)

We placed the motoko code in the motoko directory, but are having some difficulties getting the compiled motoko, and the wasm files to work as you expect in your code. This is what I mean now in the /icp directory the src directory contains these files:
![Screen Shot 2023-08-30 at 11.40.54 PM|690x479](upload://rcOpVyjqG218d7Vvk854ORAmEK2.jpeg)

We know those files get created when we compile with dfx the Motoko code, however the dfx compilation creates many more files. We did the compilation with dfx following your instructions doing:
```
npm i
vessel sources
dfx deploy file_scaling_manager --argument='(false)'
dfx deploy file_storage --argument='(false)'
```
It worked well, and we got these files, many more than those in the static example to interact with the JavaScript Electron frontend:

![Screen Shot 2023-08-30 at 11.43.32 PM|547x500](upload://rqvMtC7do9G8QbIl3Ue6vcsHQcy.jpeg)

I have tried taking those files, and overwriting the ones under /icp but it does not work. There has to be something I am missing, because I know the code works.

Please help.

Can you please explain what should we do after using DFX to compile the motoko files, how do we put that code into the main app at /icp so that it works?

P.S. @cyberowl Perhaps we can take this out of this forum, I would appreciate it if you can DM me and we can discuss a way that you can explain to us how to make all this work. It is much harder than it looks. Thanks.

-------------------------

cyberowl | 2023-08-31 06:27:24 UTC | #100

ok will continue in DM.

-------------------------

josephgranata | 2023-08-31 19:35:34 UTC | #101

Thank you, I just responded to your DM too.

-------------------------

pramitgaha | 2023-10-09 17:34:27 UTC | #102

https://github.com/rustacean1/upload_file

-------------------------

cryptoschindler | 2023-10-09 19:08:38 UTC | #103

Maybe an interesting bounty for some participants of this thread

https://github.com/dfinity/grant-rfps/issues/48

-------------------------

