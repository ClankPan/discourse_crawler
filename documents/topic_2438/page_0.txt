lastmjs | 2021-04-09 22:59:03 UTC | #1

Running into the problems described here: https://forum.dfinity.org/t/dfx-0-7-0-beta-2-does-not-allow-es-modules/2430, and I am trying to figure out how to get this all to work using a local http proxy for now.

For a GET request, how does the replica know which canister to get the assets from? Inspecting some of the traffic, it seems like it must be the `Referrer` http header, because not all GET requests have the `canisterId` appended to their paths.

I'm playing with this locally but getting 500 errors from dependencies of my ES modules.

-------------------------

lastmjs | 2021-04-09 23:08:28 UTC | #2

Okay I think I figured it out, it's got to be the `Referer` header. When I set that to the empty string I get a 500, and when I manually put a `canisterId` into it I don't get 500 errors anymore.

So ES modules are indeed unsupported currently with the `v0.7.0` beta, since the `Referer` does not have the canisterId. I am assuming other things besides ES modules are broken, essentially whenever a request is not originating from the route index.html file, there might be a possibility of this being broken.

-------------------------

nomeata | 2021-04-20 08:35:07 UTC | #3

Sorry, late repsonse, but it’s not the referrer. Eventually it will be the `Host` (`canister-id.ic0.app`); for local development a query parameter `?canister_id=abcde-fgh` is used.

-------------------------

lastmjs | 2021-04-20 12:29:52 UTC | #4

I'm sorry, but are you sure it's not the referer locally? Like I explained in my previous post, I get 500 errors when the referer header does not have the canisterId query parameter in it.

The problem is, many requests locally do not have the canisterId query parameter anywhere in the headers that I can see. If you look through some of my other posts, I've explained that ES module transitive import requests do not have the canisterId query parameter anywhere in the request. These requests fail. But when I put the canisterId query parameter into the referer header (using a proxy), the requests succeed.

My experiments locally do not match what you're saying, so I have to disagree.

-------------------------

lastmjs | 2021-04-20 12:31:43 UTC | #5

Or, I can't square what you're saying with what I'm seeing locally I guess. What am I doing wrong? I assume you would be able to replicate my issues locally

-------------------------

kpeacock | 2021-05-20 16:32:49 UTC | #6

Best solution I've found is to use `http://canisterId.localhost:8000` and to mostly develop on chrome, which supports localhost subdomains, or else to use Webpack dev server

-------------------------

nomeata | 2021-04-20 14:09:45 UTC | #7

[quote="lastmjs, post:4, topic:2438"]
My experiments locally do not match what you’re saying, so I have to disagree.
[/quote]

That would be odd; I don’t see any code using the referrer in any component that could play a role here, and I never heard about this.

Maybe the requests you are seeing without the url query parameter are not `GET` request to `/api/…`, which are interaction with the internet computer?

For `GET`s to assets, the canister id must come from somewhere, and as far I know, that is either the query parameter, or the hostname (as @kpeacock points out). If you obsere something else I’d be curious to have more detail, e.g. a dump of the request as captured from the dev console.

-------------------------

lastmjs | 2021-04-20 15:25:23 UTC | #8

Cool, I'll see if I can get more information

-------------------------

nomeata | 2021-05-20 16:32:49 UTC | #9

Looks like you were right and I was wrong, to some extend.

In _local development_ the proxy ran by `dfx start` will indeed look for the canister id in the following locations:
 * Hostname
 * Query string
 * Referrer

The latter two are only needed for local development where you can’t easily have separate hostnames per canister; for the real deployment, the hostname should always be indicative.

Sorry for being thick-headed here!

-------------------------

lastmjs | 2021-05-18 15:51:55 UTC | #10

Oh cool, yeah it's no problem at all! Thanks for getting back to me on this

-------------------------

lastmjs | 2021-05-20 15:29:45 UTC | #11

This seems to work for now, I'll update this thread if there are any issues with using localhost subdomains.

-------------------------

lastmjs | 2021-05-20 15:29:48 UTC | #12

I think using localhost subdomains might be breaking update calls in development: https://forum.dfinity.org/t/fail-to-verify-certificate-in-development-update-calls/4078

-------------------------

lastmjs | 2021-05-20 16:32:44 UTC | #13

Turns out they weren't!

-------------------------

paulyoung | 2022-05-13 03:28:42 UTC | #14

`icx-proxy --fetch-root-key --address 127.0.0.1:1234 --dns-alias foo.localhost:<asset-canister-id>` allows browsing to http://foo.localhost:1234 in Chrome.

-------------------------

