mparikh | 2021-07-05 02:52:33 UTC | #1

I am trying to wrap my head around whether there's an alternative to the current way of "developing" an actor in the following narrative. 

An actor is an entity which learns from it's environment (messages being passed to it) through which it updates it's state. The state is a non-direct mapping to messages (think neural networks). An actor also imparts it's learning to others for a fee(through  query messages). Occasionally the actor updates itself (i.e. next incarnation) through code and state changes. Assume several incarnation into the process.

In order to make this repeatable in DEV/QA (given that an actor cannot pull for information), we have to give birth to the actor in dev, replay all messages in the current incarnation,  move to next incarnation then repeat that process over and over until the current incarnation of the actor. This obviously has a lot of overhead( data+code changes co-ordination). Then we do the same for QA. and then for PROD.

Has someone come across a similar situation but dealing with differently?

-------------------------

